

      SUBROUTINE MAKE_TRIAS (INDCO)

      USE PRECISION
      USE PARMMOD
      USE CTRIG
      USE CLGIN

      IMPLICIT NONE

      INTEGER,INTENT(IN) :: INDCO(9)

      IF (NTRII+8 > NTRI) THEN
        WRITE (6,*) ' ALLOWED NUMBER OF TRIANGLES EXCEEDED '
        WRITE (6,*) ' INCREASE NT '
        CALL EXIT
      END IF

      NECKE(1,NTRII+1) = INDCO(1)
      NECKE(2,NTRII+1) = INDCO(2)
      NECKE(3,NTRII+1) = INDCO(9)
      CALL EINFUEGEN (INDCO(1),NTRII+1)
      CALL EINFUEGEN (INDCO(2),NTRII+1)
      CALL EINFUEGEN (INDCO(9),NTRII+1)

      NECKE(1,NTRII+2) = INDCO(2)
      NECKE(2,NTRII+2) = INDCO(3)
      NECKE(3,NTRII+2) = INDCO(9)
      CALL EINFUEGEN (INDCO(2),NTRII+2)
      CALL EINFUEGEN (INDCO(3),NTRII+2)
      CALL EINFUEGEN (INDCO(9),NTRII+2)

      NECKE(1,NTRII+3) = INDCO(3)
      NECKE(2,NTRII+3) = INDCO(4)
      NECKE(3,NTRII+3) = INDCO(9)
      CALL EINFUEGEN (INDCO(3),NTRII+3)
      CALL EINFUEGEN (INDCO(4),NTRII+3)
      CALL EINFUEGEN (INDCO(9),NTRII+3)

      NECKE(1,NTRII+4) = INDCO(4)
      NECKE(2,NTRII+4) = INDCO(5)
      NECKE(3,NTRII+4) = INDCO(9)
      CALL EINFUEGEN (INDCO(4),NTRII+4)
      CALL EINFUEGEN (INDCO(5),NTRII+4)
      CALL EINFUEGEN (INDCO(9),NTRII+4)

      NECKE(1,NTRII+5) = INDCO(5)
      NECKE(2,NTRII+5) = INDCO(6)
      NECKE(3,NTRII+5) = INDCO(9)
      CALL EINFUEGEN (INDCO(5),NTRII+5)
      CALL EINFUEGEN (INDCO(6),NTRII+5)
      CALL EINFUEGEN (INDCO(9),NTRII+5)

      NECKE(1,NTRII+6) = INDCO(6)
      NECKE(2,NTRII+6) = INDCO(7)
      NECKE(3,NTRII+6) = INDCO(9)
      CALL EINFUEGEN (INDCO(6),NTRII+6)
      CALL EINFUEGEN (INDCO(7),NTRII+6)
      CALL EINFUEGEN (INDCO(9),NTRII+6)

      NECKE(1,NTRII+7) = INDCO(7)
      NECKE(2,NTRII+7) = INDCO(8)
      NECKE(3,NTRII+7) = INDCO(9)
      CALL EINFUEGEN (INDCO(7),NTRII+7)
      CALL EINFUEGEN (INDCO(8),NTRII+7)
      CALL EINFUEGEN (INDCO(9),NTRII+7)

      NECKE(1,NTRII+8) = INDCO(8)
      NECKE(2,NTRII+8) = INDCO(1)
      NECKE(3,NTRII+8) = INDCO(9)
      CALL EINFUEGEN (INDCO(8),NTRII+8)
      CALL EINFUEGEN (INDCO(1),NTRII+8)
      CALL EINFUEGEN (INDCO(9),NTRII+8)

      NCHBAR(2,NTRII+1) = NTRII+2
      NSEITE(2,NTRII+1) = 3
      NCHBAR(3,NTRII+1) = NTRII+8
      NSEITE(3,NTRII+1) = 2

      NCHBAR(2,NTRII+2) = NTRII+3
      NSEITE(2,NTRII+2) = 3
      NCHBAR(3,NTRII+2) = NTRII+1
      NSEITE(3,NTRII+2) = 2

      NCHBAR(2,NTRII+3) = NTRII+4
      NSEITE(2,NTRII+3) = 3
      NCHBAR(3,NTRII+3) = NTRII+2
      NSEITE(3,NTRII+3) = 2

      NCHBAR(2,NTRII+4) = NTRII+5
      NSEITE(2,NTRII+4) = 3
      NCHBAR(3,NTRII+4) = NTRII+3
      NSEITE(3,NTRII+4) = 2

      NCHBAR(2,NTRII+5) = NTRII+6
      NSEITE(2,NTRII+5) = 3
      NCHBAR(3,NTRII+5) = NTRII+4
      NSEITE(3,NTRII+5) = 2

      NCHBAR(2,NTRII+6) = NTRII+7
      NSEITE(2,NTRII+6) = 3
      NCHBAR(3,NTRII+6) = NTRII+5
      NSEITE(3,NTRII+6) = 2

      NCHBAR(2,NTRII+7) = NTRII+8
      NSEITE(2,NTRII+7) = 3
      NCHBAR(3,NTRII+7) = NTRII+6
      NSEITE(3,NTRII+7) = 2

      NCHBAR(2,NTRII+8) = NTRII+1
      NSEITE(2,NTRII+8) = 3
      NCHBAR(3,NTRII+8) = NTRII+7
      NSEITE(3,NTRII+8) = 2
 
      NTRII = NTRII+8

      RETURN

      CONTAINS
      
      SUBROUTINE EINFUEGEN (IC,ITRI)
        INTEGER, INTENT(IN) :: IC, ITRI
        TYPE(TRI_ELEM), POINTER :: CUR

        ALLOCATE (CUR)
        CUR%NOTRI = ITRI
        CUR%NEXT_TRI => COORTRI(IC)%PTRI
        COORTRI(IC)%PTRI => CUR
      END SUBROUTINE EINFUEGEN

      END


