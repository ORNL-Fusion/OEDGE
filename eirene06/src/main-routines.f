C EIRENE06 COMPILATION
C ===== SOURCE: clear_stratum.f
      SUBROUTINE CLEAR_STRATUM
C
C  CLEAR WORK AREA FOR THIS STRATUM
C
      USE PRECISION
      USE PARMMOD
      USE CSPEI
      USE CESTIM
      USE CSDVI
      USE CSDVI_BGK
      USE CSDVI_COP

      IMPLICIT NONE

      INTEGER :: ISPC

      IESTR=-1
      ESTIMV=0.
      ESTIMS=0.
      SDVI1=0.
      SDVI2=0.
      SIGMAC=0.
      SGMCS=0.
C  ARRAYS SDVIA,SDVIAW,SDVIAC
      SDVIA  = 0.D0
      SDVIAW = 0.D0
      SDVIAC = 0.D0
C  BGK-ARRAYS
      SGMS_BGK=0.D0
      SIGMA_BGK=0.D0
      SDVIA_BGK=0.D0
C  COP-ARRAYS
      SGMS_COP=0.D0
      SIGMA_COP=0.D0
      SDVIA_COP=0.D0
C  SPECTRA
      DO ISPC=1,NADSPC
        ESTIML(ISPC)%PSPC%SPC = 0._DP
        ESTIML(ISPC)%PSPC%SPCINT = 0._DP
        IF (NSIGI_SPC > 0) THEN
          ESTIML(ISPC)%PSPC%SGMS = 0._DP
          ESTIML(ISPC)%PSPC%SGM = 0._DP
          ESTIML(ISPC)%PSPC%SDV = 0._DP
        END IF
      END DO

      RETURN

      END SUBROUTINE CLEAR_STRATUM
C ===== SOURCE: clear_sumostra.f
c  19.12.05:  stvw, stvws = 0   included
      SUBROUTINE CLEAR_SUMOSTRA

      USE PRECISION
      USE PARMMOD
      USE CSPEI
      USE CSDVI
      USE CSDVI_BGK
      USE CSDVI_COP
      USE COMSOU
      USE CESTIM

      IMPLICIT NONE

      INTEGER :: ISPC

C
C**** CLEAR WORK AREA FOR SUM OVER STRATA ****************************
C
      SMESTV = 0._DP
      SMESTS = 0._DP
      STV    = 0._DP
      STVS   = 0._DP
      STVW   = 0._DP
      STVWS  = 0._DP
      STVC   = 0._DP
      STVCS  = 0._DP
C  ARRAYS: EE,FF,....
      EE     = 0._DP
      EES    = 0._DP
      FF     = 0._DP
      FFS    = 0._DP
C  BGK-ARRAYS:
      IF (NSIGI_BGK.GT.0) THEN
        STVS_BGK=0._DP
        EES_BGK=0._DP
        STV_BGK=0._DP
        EE_BGK=0._DP
      ENDIF
C  COP-ARRAYS:
      IF (NSIGI_COP.GT.0) THEN
        STVS_COP=0._DP
        EES_COP=0._DP
        STV_COP=0._DP
        EE_COP=0._DP
      ENDIF

C  SPECTRA
      IF ((NSTRAI > 1) .AND. (NSMSTRA > 0)) THEN
        DO ISPC=1,NADSPC
          SMESTL(ISPC)%PSPC%SPC = 0._DP
          IF (NSIGI_SPC > 0) THEN
            SMESTL(ISPC)%PSPC%SGM = 0._DP
            SMESTL(ISPC)%PSPC%SDV = 0._DP
          END IF
          SMESTL(ISPC)%PSPC%SPCINT = 0._DP
          SMESTL(ISPC)%PSPC%SGMS = 0._DP
          SMESTL(ISPC)%PSPC%STVS = 0._DP
          SMESTL(ISPC)%PSPC%EES = 0._DP
        END DO
      END IF

      RETURN

      END SUBROUTINE CLEAR_SUMOSTRA
C ===== SOURCE: eirene.f
      SUBROUTINE EIRENE(DT,NLMODE,NLLAST,ITNR,MPI_INITIALIZE)
C
C  DT >  0.      : RUN EIRENE FOR A TIMESTEP DT (S),
C  DT <= 0.      : RUN EIRENE IN QUASI STEADY STATE MODE
C  NLMODE=.FALSE.: STAND ALONE EIRENE RUN
C  NLMODE=.TRUE. : CALLED FROM INTERFACING ROUTINE EIRSRT
C                  PLASMA DATA ON COMMON BRAEIR IN SUBROUTINE INFCOP.
C  ITNR          : ITERATION NUMBER
C  MPI_INITIALIZE: INITIALIZE USAGE OF MPI-ROUTINES FOR PARALLEL COMPUTATION 
C
      USE PRECISION
      USE PARMMOD
      USE COMUSR
      USE CREFMOD
      USE CREF
      USE CESTIM
      USE CRECH
      USE CADGEO
      USE cai
      USE CCONA
      USE CGRPTL
      USE CLOGAU
      USE CPL3D
      USE CPLOT
      USE CINIT
      USE CUPD
      USE COMSIG
      USE CPOLYG
      USE CGRID
      USE CSPEZ
      USE CZT1
      USE CTRCEI
      USE CCOUPL
      USE CGEOM
      USE CSDVI
      USE CSDVI_COP
      USE CSDVI_BGK
      USE CTETRA
      USE COMPRT
      USE CPES
      USE COMNNL
      USE COMSOU
      USE CSTEP
      USE COMSPL
      USE CTEXT
      USE CLGIN
      USE COUTAU
      USE COMXS
      USE CSPEI
      USE CTRIG
      USE CLAST

      IMPLICIT NONE

      INCLUDE 'mpif.h'

      REAL(DP), INTENT(IN) :: DT
      LOGICAL, INTENT(IN) :: NLMODE, NLLAST, MPI_INITIALIZE
      INTEGER, INTENT(IN) :: ITNR

      INTEGER :: NA, NS, IAIN, ICELL, IERROR, IER
      REAL(DP) :: RESET_SECOND, SECOND_OWN, DUMMY, TIMI
      integer :: inentry=1
      character(20) :: outname
C
C               1.         INITIALIZE PACKAGE
C
      IF (MPI_INITIALIZE) CALL MPI_INIT(IER)
      CALL MPI_COMM_SIZE (MPI_COMM_WORLD,NPRS,IER)
      CALL MPI_COMM_RANK (MPI_COMM_WORLD,MY_PE,IER)
      NRPES = NPRS
      IF (NPRS == 1) NSTEFF=1

      IUNOUT = 6
      IF (MY_PE > 0) THEN
        IUNOUT = 7
        OUTNAME='output.'
        WRITE (OUTNAME(8:),'(I4.4)') MY_PE
        OPEN (UNIT=IUNOUT,FILE=OUTNAME,ACCESS='SEQUENTIAL',
     .        FORM='FORMATTED')
      END IF        

      IF (MY_PE == 0) THEN

      IF (ITNR == 1) THEN
        CALL FIND_PARAM
        CALL SET_PARMMOD(1)
      ELSE
        DUMMY=RESET_SECOND()
      END IF

      write (iunout,*) ' Number of PEs ',nprs
      if (nprs .gt. nrpes) then
        write (iunout,*) ' Number of PE too large '
        write (iunout,*) ' increase parameter NRPES = ',nrpes
        call exit_own(1)
      endif

      IF (ITNR == 1) CALL ALLOC_CLOGAU
      CALL ALLOC_COMPRT
      IUNOUT = 6  ! has been reset to 0 in INIT_COMPRT 
      inentry = 0

        NRAPS=60
        IRAPS=0
        IITER=ITNR
        ITIMV=1
        IPRNLI=0
        DTIMVN=DT
        NLPLAS=NLMODE

      END IF  ! MY_PE == 0

C
100   CONTINUE
C
C  READ FORMATTED INPUT FILE OR RESTART FOR NEXT ITERATION
C
      ENTRY EIRENE_COUPLE (NLLAST,ITNR)

      IF (MY_PE == 0) THEN
C
      IF (INENTRY == 1) THEN
        CALL SET_PARMMOD(1)
        CALL ALLOC_CLOGAU
        CALL ALLOC_COMPRT
      END IF
      CALL ALLOC_CESTIM(1)
      CALL ALLOC_COMUSR(1)
      CALL ALLOC_CADGEO
      CALL ALLOC_CAI
      CALL ALLOC_CPLOT
      CALL ALLOC_CINIT
      CALL ALLOC_CUPD
      CALL ALLOC_CPOLYG
      CALL ALLOC_CGRID
      CALL ALLOC_CSPEZ
      CALL ALLOC_CZT1(1)
      CALL ALLOC_CTRCEI
      CALL ALLOC_CGEOM
      CALL ALLOC_CSDVI(1)
      CALL ALLOC_CTETRA
      CALL ALLOC_CPES
      CALL ALLOC_COMSOU(1)
      CALL ALLOC_COMSPL
      CALL ALLOC_CTEXT(1)
      CALL ALLOC_CLGIN
      CALL ALLOC_COMXS(1)
      CALL ALLOC_CTRIG
      CALL ALLOC_COMNNL

      IF (ITNR == 1) NLSRON = .TRUE.
C
C   SET DEFAULTS
C
        CALL SETCON

      END IF  ! MY_PE == 0
C
C  each internal iteration or time-step starts here
101   CONTINUE
c  re-initialize some "ifirst"-blocks
      CALL GRNXTB(3,'EIRENE.F')

      IF (MY_PE == 0) THEN

      TIMI=SECOND_OWN()
C
      CALL INPUT

      CALL ALLOC_COUTAU
C
C  CHECK PARAMETER STATEMENTS, STORAGE REQUIREMENTS
C
      CALL SETPRM

      CALL ALLOC_CSTEP
      CALL ALLOC_CSPEI
      CALL ALLOC_CSDVI(2)
      CALL ALLOC_CSDVI_BGK
      CALL ALLOC_CSDVI_COP
      CALL ALLOC_CLAST

      CALL STTXT1
C
      TIME=SECOND_OWN()
      WRITE (iunout,*) 'CPU-TIME CONSUMED IN INPUT: ',TIME-TIMI,' SEC'
      CALL LEER(1)
C
C  SET UP SPLITTING SURFACES, IMPORTANCE FUNCTION AND OTHER DATA
C  FOR NONANALOG METHODS
C
      IF (.NOT.NLANA) THEN
        CALL NANALG
      ELSEIF (NLANA) THEN
C  TURN OF ALL NON-ANALOG SAMPLING
        CALL MASBOX('NON-ANALOG SAMPLING DE-ACTIVATED')
C 1: NO SPLITTING AND RUSSIAN ROULETTE
        WRITE (iunout,*) 'SUBROUTINE NANALG NOT CALLED '
C 2: SPECIES SOURCE SAMPLING
        DO ISTRA=1,NSTRAI
          NSPEZ(ISTRA)=MAX(0,NSPEZ(ISTRA))
        ENDDO
        WRITE (iunout,*) 'NON-ANALOG SOURCE SPECIES SAMPLING TURNED OFF'
C 3: SUPPRESSION OF ABSORPTION AT SURFACES TURNED OFF
        WMINS=1.D30
        WRITE (iunout,*) 
     .    'SUPPRESSION OF ABSORPTION AT SURFACES TURNED OFF'
C 4: SUPPRESSION OF ABSORPTION AT COLLISIONS TURNED OFF
        WMINV=1.D30
        WRITE (iunout,*) 
     .    'SUPPRESSION OF ABSORPTION AT COLLISIONS TURNED OFF'
        CALL LEER(2)
      ENDIF
C
      TIMI=SECOND_OWN()
C
C
C  PARAMETERS FOR BGK ITERATIONS
C
      NBGVI=NRBGI
      NFSTVI(NTALB)=NBGVI
      NBGVI_STAT=0
      IF (NSIGI_BGK > 0) NBGVI_STAT=NBGVI+2*(NATMI+NMOLI)
      IF (NBGVI_STAT > NBGV_STAT) THEN
        CALL MASPRM('NBGVI_STAT',10,NBGVI_STAT,
     .              'NBGV_STAT',9,NBGV_STAT,IERROR)
        CALL EXIT_OWN(1)
      END IF
C
      IF (TRCAMD) THEN
        CALL LEER(1)
        WRITE (iunout,*) 'NRCXI,NRCX ',NRCXI,NRCX
        WRITE (iunout,*) 'NRELI,NREL ',NRELI,NREL
        WRITE (iunout,*) 'NRPII,NRPI ',NRPII,NRPI
        WRITE (iunout,*) 'NREII,NREI ',NREII,NRDS
        WRITE (iunout,*) 'NRRCI,NREC ',NRRCI,NREC
        CALL LEER(1)
      ENDIF
C
C
C  READ EIRENE STATISTICAL RECOMMENDATIONS FROM PREVIOUS RUN,
C  AND CARRY THEM OUT
C
      IF (NFILEK.EQ.2.OR.NFILEK.EQ.3) THEN
        CALL RREC
        WRITE (iunout,*) 'STRATIFIED SOURCE SAMPLING:'
        WRITE (iunout,*) 'NPTS(ISTRA) ARE MODIFIED, DUE TO NFILEK.GE.2 '
        DO 162 ISTRA=1,NSTRAI
          WRITE (iunout,*) ISTRA,' NPTS(INP)= ',NPTS(ISTRA),
     .                      ' NPTS(MOD)= ',NRECOM(ISTRA)
          NPTS(ISTRA)=NRECOM(ISTRA)
162     CONTINUE
      ENDIF
C
C  IF NLERG:
C  PERFORM A RUN, ONE-SPEED, COLLISION-LESS, UNTIL TIME-LIMIT
C  FOR CELL VOLUME ESTIMATION FROM ERGODIC PRINZIPLE
C
      IF (NLERG) CALL ERGOD
C
C  IF NLMOVIE:
C  PERFORM A RUN, MANY TIMESTEPS, CONSTANT NUMBER OF PARTICLES IN
C  PICTURE, COLD START FROM PREVIOUS CENSUS.
C  FOR MOVIE OF PARTICLE TRAJECTORIES
C  INVERT ORDER OF STRATA IN ORDER TO HAVE CENSUS STRATUM FIRST.
C
      IF (NLMOVIE) CALL MOVIE
C
C  PUT SELECTED EIRENE ATOMIC DATA FIELDS ONTO ADIN-ARRAY FOR OUTPUT
C
      DO 170 IAIN=1,NAINI
        NS=NAINS(IAIN)
        NA=NAINT(IAIN)
C
        IF (NSTORDR < NRAD) GOTO 170
        IF (NA.EQ.20) THEN
          DO 1720 ICELL=1,NSBOX
            ADIN(IAIN,ICELL)=TABDS1(NS,ICELL)
1720      CONTINUE
        ELSEIF (NA.EQ.21) THEN
          DO 1721 ICELL=1,NSBOX
            ADIN(IAIN,ICELL)=EELDS1(NS,ICELL)
1721      CONTINUE
        ELSEIF (NA.EQ.22) THEN
          DO 1722 ICELL=1,NSBOX
            ADIN(IAIN,ICELL)=TABCX3(NS,ICELL,1)
1722      CONTINUE
        ELSEIF (NA.EQ.23) THEN
          DO 1723 ICELL=1,NSBOX
            ADIN(IAIN,ICELL)=EPLCX3(NS,ICELL,1)
1723      CONTINUE
        ELSEIF (NA.EQ.24) THEN
          DO 1724 ICELL=1,NSBOX
            ADIN(IAIN,ICELL)=TABEL3(NS,ICELL,1)
1724      CONTINUE
        ELSEIF (NA.EQ.25) THEN
          DO 1725 ICELL=1,NSBOX
            ADIN(IAIN,ICELL)=EPLEL3(NS,ICELL,1)
1725      CONTINUE
        ELSEIF (NA.EQ.26) THEN
          DO 1726 ICELL=1,NSBOX
            ADIN(IAIN,ICELL)=TABPI3(NS,ICELL,1)
1726      CONTINUE
        ELSEIF (NA.EQ.27) THEN
          DO 1727 ICELL=1,NSBOX
            ADIN(IAIN,ICELL)=EPLPI3(NS,ICELL,1)
1727      CONTINUE
        ELSEIF (NA.EQ.28) THEN
          DO 1728 ICELL=1,NSBOX
            ADIN(IAIN,ICELL)=TABRC1(NS,ICELL)
1728      CONTINUE
        ELSEIF (NA.EQ.29) THEN
          DO 1729 ICELL=1,NSBOX
            ADIN(IAIN,ICELL)=EELRC1(NS,ICELL)
1729      CONTINUE
        ENDIF
170   CONTINUE
C
C  PRINT VOLUME AVERAGED INPUT TALLIES.
C
      CALL OUTPLA(0)
C
      TIME=SECOND_OWN()
      WRITE (iunout,*) 'CPU-TIME CONSUMED IN XSECT: ',TIME-TIMI,' SEC'
      CALL LEER(1)
C
C               2.         PLOT GEOMETRY
C
200   CONTINUE
      CALL PLT2D
C
C               3.         MONTE CARLO CALCULATION
C
300   CONTINUE

      END IF   ! MY_PE == 0

      if (nprs > 1) CALL BROADCAST

      CALL MCARLO
C
C               4.         OUTPUT , INTERFACE  AND PLOTTING
C
400   CONTINUE
C
C  OUTPUT FOR SELECTED STRATA AND/OR SUM OVER STRATA
C
      DO 450 ISTRA=1,NSTRAI
        if( ((mod(istra-1,nprs) .eq. my_pe).and.(nprs.le.nsteff)) .or.
     .     (nprs.gt.nsteff).and.(my_pe.eq.npesta(istra))) then
          IF (TRCSRC(ISTRA).OR.(NSTRAI.EQ.1.AND.TRCSRC(0)))
     .        CALL OUTEIR(ISTRA)
          IF (PLTSRC(ISTRA).OR.(NSTRAI.EQ.1.AND.PLTSRC(0)))
     .        CALL PLTEIR(ISTRA)
        END IF
450   CONTINUE
C
      IF (MY_PE == 0) THEN

      IF ((NSTRAI.GT.1) .AND. (NSMSTRA==1))  THEN
        IF (TRCSRC(0)) CALL OUTEIR(0)
        IF (PLTSRC(0)) CALL PLTEIR(0)
      ENDIF
C
C  WRITE FILES FOR RAPS GRAPHICS
C
      IF (IRAPS.GT.0) THEN
        CALL RPSOUT
        NRAPS=60
        IRAPS=0
      ENDIF
C
C  LAST CALL TO INTERFACING ROUTINE (GLOBAL BALANCES, ETC)
C
      IF (NMODE.GT.0) CALL IF4COP
C
!dr   IF (NFILEN.EQ.2.OR.NFILEN.EQ.7) RETURN
C
C  CALL WRREC TO EVALUATE EIRENE STATISTICAL RECOMMENDATIONS
C  FOR NEXT RUN  AND WRITE THEM ON FT 14
C
      IF (NFILEK.EQ.1.OR.NFILEK.EQ.3) THEN
c   achtung !!!!!!!!!!!!!
c   fuer parallele version noch nicht richtig
c   noch mal ganz scharf nachdenken !!!!!!!!
        CALL WRREC
      ENDIF
C
C  ITERATIVE MONTE CARLO PROBLEM: EIRENE RECALL OPTION
C
C  SUBROUTINE MODUSR IS A USER SUPPLIED SUBROUTINE, WHICH MAY BE USED
C  TO MODIFY SOME OF THE INPUT VARIABLES FOR THE NEXT ITERATION STEP.
C  MODUSR IS ALSO CALLED AFTER THE LAST ITERATION TO ALLOW
C  WRITING OF DATA ONTO SOME FILE AFTER EACH ITERATION
C
      IF (NITER.GE.1.AND.IITER.LE.NITER) THEN
        CALL PLASMA_DERIV(1)
C  PRINT THOSE BACKGROUND TALLIES WHICH HAVE BEEN MODIFIED
C  IN PLASMA_DERIV(1)
        CALL OUTPLA(1)
        CALL MODUSR
        IITER=IITER+1
        IF (IITER.LE.NITER) THEN
          DUMMY=RESET_SECOND()
          IPRNLI=0
          GOTO 101
        ENDIF
      ENDIF
C
C  CALL DIAGNOSTIC MODULE (COMPUTE LINE INTEGRALS FROM EIRENE TALLIES)
C

      IF (NCHORI.GT.0) CALL DIAGNO
C
C  SUBROUTINE STOSS IS A SUBROUTINE, IN WHICH BINARY COLLISION
C  EVENTS BETWEEN TEST PARTICLES ARE CARRIED OUT
C  STOSS IS ALSO CALLED AFTER THE LAST "TIMESTEP"
C
      IF (NTIME.GE.1) THEN
C  COLLISIONS BETWEEN TEST PARTICLES
C  MODIFY BACKGROUND (TIME DEP. MODE)
C       CALL STOSS
        CALL TMSTEP
        ITIMV=ITIMV+1
        IF (ITIMV.LE.NTIME) THEN
C  DO ONE MORE COMPLETE TIME-CYCLE IN THIS EIRENE RUN
          DUMMY=RESET_SECOND()
          IITER=1
          IPRNLI=0
          GOTO 101
        ENDIF
      ENDIF
c slmod begin
c...  Good place?
      CALL OUTUSR
c slmod end
      END IF   ! MY_PE == 0
      IF (NLLAST) THEN
         CALL DEALLOC_COMUSR
         CALL DEALLOC_CREFMOD
         CALL DEALLOC_CREF
         CALL DEALLOC_CESTIM
         CALL DEALLOC_CADGEO
         CALL DEALLOC_CAI
         CALL DEALLOC_CGRPTL
         CALL DEALLOC_CPLOT
         CALL DEALLOC_CINIT
         CALL DEALLOC_CUPD
         IF (NCHORI > 0) CALL DEALLOC_COMSIG
         CALL DEALLOC_CPOLYG
         CALL DEALLOC_CGRID
         CALL DEALLOC_CSPEZ
         CALL DEALLOC_CZT1
         CALL DEALLOC_CTRCEI
         IF (NMODE .NE. 0) CALL DEALLOC_CCOUPL
         CALL DEALLOC_CGEOM
         CALL DEALLOC_CSDVI
         CALL DEALLOC_CSDVI_BGK
         CALL DEALLOC_CSDVI_COP
         CALL DEALLOC_CTETRA
         CALL DEALLOC_COMPRT
         CALL DEALLOC_CPES
         CALL DEALLOC_COMNNL
         CALL DEALLOC_COMSOU
         CALL DEALLOC_CSTEP
         CALL DEALLOC_COMSPL
         CALL DEALLOC_CTEXT
         CALL DEALLOC_CLGIN
         CALL DEALLOC_COUTAU
         CALL DEALLOC_COMXS
         CALL DEALLOC_CSPEI
         CALL DEALLOC_CLAST
         CALL LOCAT2            ! DEALLOCATE LOCAL ARRAYS IN LOCATE
         CALL SAMSF2            ! DEALLOCATE LOCAL ARRAYS IN SAMSRF
         CALL STATS3            ! DEALLOCATE LOCAL ARRAYS IN STATIS
C
         IF (MPI_INITIALIZE) CALL MPI_FINALIZE(IER)
      END IF

      IF (MY_PE > 0) THEN
         CLOSE (UNIT=IUNOUT)
      END IF

      RETURN
      END
C ===== SOURCE: eirene_main.f
C
C
C     EIRENE VERSION '2004'  (Jan.2005)
C
C
      PROGRAM EIRENE_MAIN
      USE PRECISION
      IMPLICIT NONE
      REAL(DP) :: DT
      INTEGER :: ITNR
C
      CALL GRSTRT(35,8)
C
      DT=0._DP
      ITNR=1
      CALL EIRENE(DT,.FALSE.,.TRUE.,ITNR,.TRUE.)
C
      CALL GREND
C
      STOP
      END
C ===== SOURCE: integrate_tallies.f
C
      SUBROUTINE INTEGRATE_TALLIES (ISTRA)
C
C  MONTE CARLO CALCULATION
C
      USE PRECISION
      USE PARMMOD
      USE COMUSR
      USE CESTIM
      USE COUTAU
      USE CGRID
      USE CGEOM
      USE CSPEZ

      IMPLICIT NONE

      INTEGER, INTENT(IN) :: ISTRA
      REAL(DP) :: DUMMY(NRTAL)
      INTEGER :: IATM, IMOL, IION, IPHOT, IPLS, IADV, ICLV, ISNV,
     .           ICPV, IBGV

C
C
C   INTEGRATE VOLUME AVERAGED PROFILES   450 --- 459
C
      IF (LPAEL) THEN
        DUMMY(1:NSBOX_TAL) = PAEL(1:NSBOX_TAL)
        CALL INTTAL (DUMMY,VOLTAL,1,1,NSBOX_TAL,PAELI(ISTRA),
     .               NR1TAL,NP2TAL,NT3TAL,NBMLT)
        PAEL(1:NSBOX_TAL) = DUMMY(1:NSBOX_TAL)
      END IF

      IF (LPMEL) THEN
        DUMMY(1:NSBOX_TAL) = PMEL(1:NSBOX_TAL)
        CALL INTTAL (DUMMY,VOLTAL,1,1,NSBOX_TAL,PMELI(ISTRA),
     .               NR1TAL,NP2TAL,NT3TAL,NBMLT)
        PMEL(1:NSBOX_TAL) = DUMMY(1:NSBOX_TAL)
      END IF

      IF (LPIEL) THEN
        DUMMY(1:NSBOX_TAL) = PIEL(1:NSBOX_TAL)
        CALL INTTAL (DUMMY,VOLTAL,1,1,NSBOX_TAL,PIELI(ISTRA),
     .               NR1TAL,NP2TAL,NT3TAL,NBMLT)
        PIEL(1:NSBOX_TAL) = DUMMY(1:NSBOX_TAL)
      END IF

      IF (LEAEL) THEN
        DUMMY(1:NSBOX_TAL) = EAEL(1:NSBOX_TAL)
        CALL INTTAL (DUMMY,VOLTAL,1,1,NSBOX_TAL,EAELI(ISTRA),
     .               NR1TAL,NP2TAL,NT3TAL,NBMLT)
        EAEL(1:NSBOX_TAL) = DUMMY(1:NSBOX_TAL)
      END IF

      IF (LEAAT) THEN
        DUMMY(1:NSBOX_TAL) = EAAT(1:NSBOX_TAL)
        CALL INTTAL (DUMMY,VOLTAL,1,1,NSBOX_TAL,EAATI(ISTRA),
     .               NR1TAL,NP2TAL,NT3TAL,NBMLT)
        EAAT(1:NSBOX_TAL) = DUMMY(1:NSBOX_TAL)
      END IF

      IF (LEAML) THEN
        DUMMY(1:NSBOX_TAL) = EAML(1:NSBOX_TAL)
        CALL INTTAL (DUMMY,VOLTAL,1,1,NSBOX_TAL,EAMLI(ISTRA),
     .               NR1TAL,NP2TAL,NT3TAL,NBMLT)
        EAML(1:NSBOX_TAL) = DUMMY(1:NSBOX_TAL)
      END IF

      IF (LEAIO) THEN
        DUMMY(1:NSBOX_TAL) = EAIO(1:NSBOX_TAL)
        CALL INTTAL (DUMMY,VOLTAL,1,1,NSBOX_TAL,EAIOI(ISTRA),
     .               NR1TAL,NP2TAL,NT3TAL,NBMLT)
        EAIO(1:NSBOX_TAL) = DUMMY(1:NSBOX_TAL)
      END IF

      IF (LEAPHT) THEN
        DUMMY(1:NSBOX_TAL) = EAPHT(1:NSBOX_TAL)
        CALL INTTAL (DUMMY,VOLTAL,1,1,NSBOX_TAL,EAPHTI(ISTRA),
     .               NR1TAL,NP2TAL,NT3TAL,NBMLT)
        EAPHT(1:NSBOX_TAL) = DUMMY(1:NSBOX_TAL)
      END IF

      IF (LEAPL) THEN
        DUMMY(1:NSBOX_TAL) = EAPL(1:NSBOX_TAL)
        CALL INTTAL (DUMMY,VOLTAL,1,1,NSBOX_TAL,EAPLI(ISTRA),
     .               NR1TAL,NP2TAL,NT3TAL,NBMLT)
        EAPL(1:NSBOX_TAL) = DUMMY(1:NSBOX_TAL)
      END IF

      IF (LEMEL) THEN
        DUMMY(1:NSBOX_TAL) = EMEL(1:NSBOX_TAL)
        CALL INTTAL (DUMMY,VOLTAL,1,1,NSBOX_TAL,EMELI(ISTRA),
     .               NR1TAL,NP2TAL,NT3TAL,NBMLT)
        EMEL(1:NSBOX_TAL) = DUMMY(1:NSBOX_TAL)
      END IF

      IF (LEMAT) THEN
        DUMMY(1:NSBOX_TAL) = EMAT(1:NSBOX_TAL)
        CALL INTTAL (DUMMY,VOLTAL,1,1,NSBOX_TAL,EMATI(ISTRA),
     .               NR1TAL,NP2TAL,NT3TAL,NBMLT)
        EMAT(1:NSBOX_TAL) = DUMMY(1:NSBOX_TAL)
      END IF

      IF (LEMML) THEN
        DUMMY(1:NSBOX_TAL) = EMML(1:NSBOX_TAL)
        CALL INTTAL (DUMMY,VOLTAL,1,1,NSBOX_TAL,EMMLI(ISTRA),
     .               NR1TAL,NP2TAL,NT3TAL,NBMLT)
        EMML(1:NSBOX_TAL) = DUMMY(1:NSBOX_TAL)
      END IF

      IF (LEMIO) THEN
        DUMMY(1:NSBOX_TAL) = EMIO(1:NSBOX_TAL)
        CALL INTTAL (DUMMY,VOLTAL,1,1,NSBOX_TAL,EMIOI(ISTRA),
     .               NR1TAL,NP2TAL,NT3TAL,NBMLT)
        EMIO(1:NSBOX_TAL) = DUMMY(1:NSBOX_TAL)
      END IF

      IF (LEMPHT) THEN
        DUMMY(1:NSBOX_TAL) = EMPHT(1:NSBOX_TAL)
        CALL INTTAL (DUMMY,VOLTAL,1,1,NSBOX_TAL,EMPHTI(ISTRA),
     .               NR1TAL,NP2TAL,NT3TAL,NBMLT)
        EMPHT(1:NSBOX_TAL) = DUMMY(1:NSBOX_TAL)
      END IF

      IF (LEMPL) THEN
        DUMMY(1:NSBOX_TAL) = EMPL(1:NSBOX_TAL)
        CALL INTTAL (DUMMY,VOLTAL,1,1,NSBOX_TAL,EMPLI(ISTRA),
     .               NR1TAL,NP2TAL,NT3TAL,NBMLT)
        EMPL(1:NSBOX_TAL) = DUMMY(1:NSBOX_TAL)
      END IF

      IF (LEIEL) THEN
        DUMMY(1:NSBOX_TAL) = EIEL(1:NSBOX_TAL)
        CALL INTTAL (DUMMY,VOLTAL,1,1,NSBOX_TAL,EIELI(ISTRA),
     .               NR1TAL,NP2TAL,NT3TAL,NBMLT)
        EIEL(1:NSBOX_TAL) = DUMMY(1:NSBOX_TAL)
      END IF

      IF (LEIAT) THEN
        DUMMY(1:NSBOX_TAL) = EIAT(1:NSBOX_TAL)
        CALL INTTAL (DUMMY,VOLTAL,1,1,NSBOX_TAL,EIATI(ISTRA),
     .               NR1TAL,NP2TAL,NT3TAL,NBMLT)
        EIAT(1:NSBOX_TAL) = DUMMY(1:NSBOX_TAL)
      END IF

      IF (LEIML) THEN
        DUMMY(1:NSBOX_TAL) = EIML(1:NSBOX_TAL)
        CALL INTTAL (DUMMY,VOLTAL,1,1,NSBOX_TAL,EIMLI(ISTRA),
     .               NR1TAL,NP2TAL,NT3TAL,NBMLT)
        EIML(1:NSBOX_TAL) = DUMMY(1:NSBOX_TAL)
      END IF

      IF (LEIIO) THEN
        DUMMY(1:NSBOX_TAL) = EIIO(1:NSBOX_TAL)
        CALL INTTAL (DUMMY,VOLTAL,1,1,NSBOX_TAL,EIIOI(ISTRA),
     .               NR1TAL,NP2TAL,NT3TAL,NBMLT)
        EIIO(1:NSBOX_TAL) = DUMMY(1:NSBOX_TAL)
      END IF

      IF (LEIPHT) THEN
        DUMMY(1:NSBOX_TAL) = EIPHT(1:NSBOX_TAL)
        CALL INTTAL (DUMMY,VOLTAL,1,1,NSBOX_TAL,EIPHTI(ISTRA),
     .               NR1TAL,NP2TAL,NT3TAL,NBMLT)
        EIPHT(1:NSBOX_TAL) = DUMMY(1:NSBOX_TAL)
      END IF

      IF (LEIPL) THEN
        DUMMY(1:NSBOX_TAL) = EIPL(1:NSBOX_TAL)
        CALL INTTAL (DUMMY,VOLTAL,1,1,NSBOX_TAL,EIPLI(ISTRA),
     .               NR1TAL,NP2TAL,NT3TAL,NBMLT)
        EIPL(1:NSBOX_TAL) = DUMMY(1:NSBOX_TAL)
      END IF

      IF (LEPHEL) THEN
        DUMMY(1:NSBOX_TAL) = EPHEL(1:NSBOX_TAL)
        CALL INTTAL (DUMMY,VOLTAL,1,1,NSBOX_TAL,EPHELI(ISTRA),
     .               NR1TAL,NP2TAL,NT3TAL,NBMLT)
        EPHEL(1:NSBOX_TAL) = DUMMY(1:NSBOX_TAL)
      END IF

      IF (LEPHAT) THEN
        DUMMY(1:NSBOX_TAL) = EPHAT(1:NSBOX_TAL)
        CALL INTTAL (DUMMY,VOLTAL,1,1,NSBOX_TAL,EPHATI(ISTRA),
     .               NR1TAL,NP2TAL,NT3TAL,NBMLT)
        EPHAT(1:NSBOX_TAL) = DUMMY(1:NSBOX_TAL)
      END IF

      IF (LEPHML) THEN
        DUMMY(1:NSBOX_TAL) = EPHML(1:NSBOX_TAL)
        CALL INTTAL (DUMMY,VOLTAL,1,1,NSBOX_TAL,EPHMLI(ISTRA),
     .               NR1TAL,NP2TAL,NT3TAL,NBMLT)
        EPHML(1:NSBOX_TAL) = DUMMY(1:NSBOX_TAL)
      END IF

      IF (LEPHIO) THEN
        DUMMY(1:NSBOX_TAL) = EPHIO(1:NSBOX_TAL)
        CALL INTTAL (DUMMY,VOLTAL,1,1,NSBOX_TAL,EPHIOI(ISTRA),
     .               NR1TAL,NP2TAL,NT3TAL,NBMLT)
        EPHIO(1:NSBOX_TAL) = DUMMY(1:NSBOX_TAL)
      END IF

      IF (LEPHPHT) THEN
        DUMMY(1:NSBOX_TAL) = EPHPHT(1:NSBOX_TAL)
        CALL INTTAL (DUMMY,VOLTAL,1,1,NSBOX_TAL,EPHPHTI(ISTRA),
     .               NR1TAL,NP2TAL,NT3TAL,NBMLT)
        EPHPHT(1:NSBOX_TAL) = DUMMY(1:NSBOX_TAL)
      END IF

      IF (LEPHPL) THEN
        DUMMY(1:NSBOX_TAL) = EPHPL(1:NSBOX_TAL)
        CALL INTTAL (DUMMY,VOLTAL,1,1,NSBOX_TAL,EPHPLI(ISTRA),
     .               NR1TAL,NP2TAL,NT3TAL,NBMLT)
        EPHPL(1:NSBOX_TAL) = DUMMY(1:NSBOX_TAL)
      END IF

      IF (LEPAT) THEN
        DUMMY(1:NSBOX_TAL) = EPAT(1:NSBOX_TAL)
        CALL INTTAL (DUMMY,VOLTAL,1,1,NSBOX_TAL,EPATI(ISTRA),
     .               NR1TAL,NP2TAL,NT3TAL,NBMLT)
        EPAT(1:NSBOX_TAL) = DUMMY(1:NSBOX_TAL)
      END IF

      IF (LEPML) THEN
        DUMMY(1:NSBOX_TAL) = EPML(1:NSBOX_TAL)
        CALL INTTAL (DUMMY,VOLTAL,1,1,NSBOX_TAL,EPMLI(ISTRA),
     .               NR1TAL,NP2TAL,NT3TAL,NBMLT)
        EPML(1:NSBOX_TAL) = DUMMY(1:NSBOX_TAL)
      END IF

      IF (LEPIO) THEN
        DUMMY(1:NSBOX_TAL) = EPIO(1:NSBOX_TAL)
        CALL INTTAL (DUMMY,VOLTAL,1,1,NSBOX_TAL,EPIOI(ISTRA),
     .               NR1TAL,NP2TAL,NT3TAL,NBMLT)
        EPIO(1:NSBOX_TAL) = DUMMY(1:NSBOX_TAL)
      END IF

      IF (LEPPHT) THEN
        DUMMY(1:NSBOX_TAL) = EPPHT(1:NSBOX_TAL)
        CALL INTTAL (DUMMY,VOLTAL,1,1,NSBOX_TAL,EPPHTI(ISTRA),
     .               NR1TAL,NP2TAL,NT3TAL,NBMLT)
        EPPHT(1:NSBOX_TAL) = DUMMY(1:NSBOX_TAL)
      END IF

      IF (LEPPL) THEN
        DUMMY(1:NSBOX_TAL) = EPPL(1:NSBOX_TAL)
        CALL INTTAL (DUMMY,VOLTAL,1,1,NSBOX_TAL,EPPLI(ISTRA),
     .               NR1TAL,NP2TAL,NT3TAL,NBMLT)
        EPPL(1:NSBOX_TAL) = DUMMY(1:NSBOX_TAL)
      END IF

      DO 450 IATM=1,NATMI
        IF (.NOT.LOGATM(IATM,ISTRA)) CYCLE
          IF (LPDENA) THEN
            DUMMY(1:NSBOX_TAL) = PDENA(IATM,1:NSBOX_TAL)
            CALL INTTAL (DUMMY,VOLTAL,1,1,NSBOX_TAL,
     .                   PDENAI(IATM,ISTRA),
     .                   NR1TAL,NP2TAL,NT3TAL,NBMLT)
            PDENA(IATM,1:NSBOX_TAL) = DUMMY(1:NSBOX_TAL)
          END IF

          IF (LEDENA) THEN
            DUMMY(1:NSBOX_TAL) = EDENA(IATM,1:NSBOX_TAL)
            CALL INTTAL (DUMMY,VOLTAL,1,1,NSBOX_TAL,
     .                   EDENAI(IATM,ISTRA),
     .                   NR1TAL,NP2TAL,NT3TAL,NBMLT)
            EDENA(IATM,1:NSBOX_TAL) = DUMMY(1:NSBOX_TAL)
          END IF

          IF (LPAAT) THEN
            DUMMY(1:NSBOX_TAL) = PAAT(IATM,1:NSBOX_TAL)
            CALL INTTAL (DUMMY,VOLTAL,1,1,NSBOX_TAL,
     .                   PAATI(IATM,ISTRA),
     .                   NR1TAL,NP2TAL,NT3TAL,NBMLT)
            PAAT(IATM,1:NSBOX_TAL) = DUMMY(1:NSBOX_TAL)
          END IF

          IF (LPMAT) THEN
            DUMMY(1:NSBOX_TAL) = PMAT(IATM,1:NSBOX_TAL)
            CALL INTTAL (DUMMY,VOLTAL,1,1,NSBOX_TAL,
     .                   PMATI(IATM,ISTRA),
     .                   NR1TAL,NP2TAL,NT3TAL,NBMLT)
            PMAT(IATM,1:NSBOX_TAL) = DUMMY(1:NSBOX_TAL)
          END IF

          IF (LPIAT) THEN
            DUMMY(1:NSBOX_TAL) = PIAT(IATM,1:NSBOX_TAL)
            CALL INTTAL (DUMMY,VOLTAL,1,1,NSBOX_TAL,
     .                   PIATI(IATM,ISTRA),
     .                   NR1TAL,NP2TAL,NT3TAL,NBMLT)
            PIAT(IATM,1:NSBOX_TAL) = DUMMY(1:NSBOX_TAL)
          END IF

          IF (LPPHAT) THEN
            DUMMY(1:NSBOX_TAL) = PPHAT(IATM,1:NSBOX_TAL)
            CALL INTTAL (DUMMY,VOLTAL,1,1,NSBOX_TAL,
     .                   PPHATI(IATM,ISTRA),
     .                   NR1TAL,NP2TAL,NT3TAL,NBMLT)
            PPHAT(IATM,1:NSBOX_TAL) = DUMMY(1:NSBOX_TAL)
          END IF

          IF (LPGENA) THEN
            DUMMY(1:NSBOX_TAL) = PGENA(IATM,1:NSBOX_TAL)
            CALL INTTAL (DUMMY,VOLTAL,1,1,NSBOX_TAL,
     .                   PGENAI(IATM,ISTRA),
     .                   NR1TAL,NP2TAL,NT3TAL,NBMLT)
            PGENA(IATM,1:NSBOX_TAL) = DUMMY(1:NSBOX_TAL)
          END IF

          IF (LEGENA) THEN
            DUMMY(1:NSBOX_TAL) = EGENA(IATM,1:NSBOX_TAL)
            CALL INTTAL (DUMMY,VOLTAL,1,1,NSBOX_TAL,
     .                   EGENAI(IATM,ISTRA),
     .                   NR1TAL,NP2TAL,NT3TAL,NBMLT)
           EGENA(IATM,1:NSBOX_TAL) = DUMMY(1:NSBOX_TAL)
          END IF

          IF (LVGENA) THEN
            DUMMY(1:NSBOX_TAL) = VGENA(IATM,1:NSBOX_TAL)
            CALL INTTAL (DUMMY,VOLTAL,1,1,NSBOX_TAL,
     .                   VGENAI(IATM,ISTRA),
     .                   NR1TAL,NP2TAL,NT3TAL,NBMLT)
            VGENA(IATM,1:NSBOX_TAL) = DUMMY(1:NSBOX_TAL)
          END IF

          IF (LPPAT) THEN
            DUMMY(1:NSBOX_TAL) = PPAT(IATM,1:NSBOX_TAL)
            CALL INTTAL (DUMMY,VOLTAL,1,1,NSBOX_TAL,
     .                   PPATI(IATM,ISTRA),
     .                   NR1TAL,NP2TAL,NT3TAL,NBMLT)
            PPAT(IATM,1:NSBOX_TAL) = DUMMY(1:NSBOX_TAL)
          END IF

          IF (LVXDENA) THEN
            DUMMY(1:NSBOX_TAL) = VXDENA(IATM,1:NSBOX_TAL)
            CALL INTTAL (DUMMY,VOLTAL,1,1,NSBOX_TAL,
     .                   VXDENAI(IATM,ISTRA),
     .                   NR1TAL,NP2TAL,NT3TAL,NBMLT)
            VXDENA(IATM,1:NSBOX_TAL) = DUMMY(1:NSBOX_TAL)
          END IF

          IF (LVYDENA) THEN
            DUMMY(1:NSBOX_TAL) = VYDENA(IATM,1:NSBOX_TAL)
            CALL INTTAL (DUMMY,VOLTAL,1,1,NSBOX_TAL,
     .                   VYDENAI(IATM,ISTRA),
     .                   NR1TAL,NP2TAL,NT3TAL,NBMLT)
            VYDENA(IATM,1:NSBOX_TAL) = DUMMY(1:NSBOX_TAL)
          END IF

          IF (LVZDENA) THEN
            DUMMY(1:NSBOX_TAL) = VZDENA(IATM,1:NSBOX_TAL)
            CALL INTTAL (DUMMY,VOLTAL,1,1,NSBOX_TAL,
     .                   VZDENAI(IATM,ISTRA),
     .                   NR1TAL,NP2TAL,NT3TAL,NBMLT)
            VZDENA(IATM,1:NSBOX_TAL) = DUMMY(1:NSBOX_TAL)
          END IF

450   CONTINUE
      DO 451 IMOL=1,NMOLI
        IF (.NOT.LOGMOL(IMOL,ISTRA)) CYCLE
          IF (LPDENM) THEN
            DUMMY(1:NSBOX_TAL) = PDENM(IMOL,1:NSBOX_TAL)
            CALL INTTAL (DUMMY,VOLTAL,1,1,NSBOX_TAL,
     .                   PDENMI(IMOL,ISTRA),
     .                   NR1TAL,NP2TAL,NT3TAL,NBMLT)
            PDENM(IMOL,1:NSBOX_TAL) = DUMMY(1:NSBOX_TAL)
          END IF

          IF (LEDENM) THEN
            DUMMY(1:NSBOX_TAL) = EDENM(IMOL,1:NSBOX_TAL)
            CALL INTTAL (DUMMY,VOLTAL,1,1,NSBOX_TAL,
     .                   EDENMI(IMOL,ISTRA),
     .                   NR1TAL,NP2TAL,NT3TAL,NBMLT)
            EDENM(IMOL,1:NSBOX_TAL) = DUMMY(1:NSBOX_TAL)
          END IF

          IF (LPAML) THEN
            DUMMY(1:NSBOX_TAL) = PAML(IMOL,1:NSBOX_TAL)
            CALL INTTAL (DUMMY,VOLTAL,1,1,NSBOX_TAL,
     .                   PAMLI(IMOL,ISTRA),
     .                   NR1TAL,NP2TAL,NT3TAL,NBMLT)
            PAML(IMOL,1:NSBOX_TAL) = DUMMY(1:NSBOX_TAL)
          END IF

          IF (LPMML) THEN
            DUMMY(1:NSBOX_TAL) = PMML(IMOL,1:NSBOX_TAL)
            CALL INTTAL (DUMMY,VOLTAL,1,1,NSBOX_TAL,
     .                   PMMLI(IMOL,ISTRA),
     .                   NR1TAL,NP2TAL,NT3TAL,NBMLT)
            PMML(IMOL,1:NSBOX_TAL) = DUMMY(1:NSBOX_TAL)
          END IF

          IF (LPIML) THEN
            DUMMY(1:NSBOX_TAL) = PIML(IMOL,1:NSBOX_TAL)
            CALL INTTAL (DUMMY,VOLTAL,1,1,NSBOX_TAL,
     .                   PIMLI(IMOL,ISTRA),
     .                   NR1TAL,NP2TAL,NT3TAL,NBMLT)
            PIML(IMOL,1:NSBOX_TAL) = DUMMY(1:NSBOX_TAL)
          END IF

          IF (LPPHML) THEN
            DUMMY(1:NSBOX_TAL) = PPHML(IMOL,1:NSBOX_TAL)
            CALL INTTAL (DUMMY,VOLTAL,1,1,NSBOX_TAL,
     .                   PPHMLI(IMOL,ISTRA),
     .                   NR1TAL,NP2TAL,NT3TAL,NBMLT)
            PPHML(IMOL,1:NSBOX_TAL) = DUMMY(1:NSBOX_TAL)
          END IF

          IF (LPGENM) THEN
            DUMMY(1:NSBOX_TAL) = PGENM(IMOL,1:NSBOX_TAL)
            CALL INTTAL (DUMMY,VOLTAL,1,1,NSBOX_TAL,
     .                   PGENMI(IMOL,ISTRA),
     .                   NR1TAL,NP2TAL,NT3TAL,NBMLT)
            PGENM(IMOL,1:NSBOX_TAL) = DUMMY(1:NSBOX_TAL)
          END IF

          IF (LEGENM) THEN
            DUMMY(1:NSBOX_TAL) = EGENM(IMOL,1:NSBOX_TAL)
            CALL INTTAL (DUMMY,VOLTAL,1,1,NSBOX_TAL,
     .                   EGENMI(IMOL,ISTRA),
     .                   NR1TAL,NP2TAL,NT3TAL,NBMLT)
            EGENM(IMOL,1:NSBOX_TAL) = DUMMY(1:NSBOX_TAL)
          END IF

          IF (LVGENM) THEN
            DUMMY(1:NSBOX_TAL) = VGENM(IMOL,1:NSBOX_TAL)
            CALL INTTAL (DUMMY,VOLTAL,1,1,NSBOX_TAL,
     .                   VGENMI(IMOL,ISTRA),
     .                   NR1TAL,NP2TAL,NT3TAL,NBMLT)
            VGENM(IMOL,1:NSBOX_TAL) = DUMMY(1:NSBOX_TAL)
          END IF

          IF (LPPML) THEN
            DUMMY(1:NSBOX_TAL) = PPML(IMOL,1:NSBOX_TAL)
            CALL INTTAL (DUMMY,VOLTAL,1,1,NSBOX_TAL,
     .                   PPMLI(IMOL,ISTRA),
     .                   NR1TAL,NP2TAL,NT3TAL,NBMLT)
            PPML(IMOL,1:NSBOX_TAL) = DUMMY(1:NSBOX_TAL)
          END IF

          IF (LVXDENM) THEN
            DUMMY(1:NSBOX_TAL) = VXDENM(IMOL,1:NSBOX_TAL)
            CALL INTTAL (DUMMY,VOLTAL,1,1,NSBOX_TAL,
     .                   VXDENMI(IMOL,ISTRA),
     .                   NR1TAL,NP2TAL,NT3TAL,NBMLT)
            VXDENM(IMOL,1:NSBOX_TAL) = DUMMY(1:NSBOX_TAL)
          END IF

          IF (LVYDENM) THEN
            DUMMY(1:NSBOX_TAL) = VYDENM(IMOL,1:NSBOX_TAL)
            CALL INTTAL (DUMMY,VOLTAL,1,1,NSBOX_TAL,
     .                   VYDENMI(IMOL,ISTRA),
     .                   NR1TAL,NP2TAL,NT3TAL,NBMLT)
            VYDENM(IMOL,1:NSBOX_TAL) = DUMMY(1:NSBOX_TAL)
          END IF

          IF (LVZDENM) THEN
            DUMMY(1:NSBOX_TAL) = VZDENM(IMOL,1:NSBOX_TAL)
            CALL INTTAL (DUMMY,VOLTAL,1,1,NSBOX_TAL,
     .                   VZDENMI(IMOL,ISTRA),
     .                   NR1TAL,NP2TAL,NT3TAL,NBMLT)
            VZDENM(IMOL,1:NSBOX_TAL) = DUMMY(1:NSBOX_TAL)
          END IF

451   CONTINUE
      DO 452 IION=1,NIONI
        IF (.NOT.LOGION(IION,ISTRA)) CYCLE
          IF (LPDENI) THEN
            DUMMY(1:NSBOX_TAL) = PDENI(IION,1:NSBOX_TAL)
            CALL INTTAL (DUMMY,VOLTAL,1,1,NSBOX_TAL,
     .                   PDENII(IION,ISTRA),
     .                   NR1TAL,NP2TAL,NT3TAL,NBMLT)
            PDENI(IION,1:NSBOX_TAL) = DUMMY(1:NSBOX_TAL)
          END IF

          IF (LEDENI) THEN
            DUMMY(1:NSBOX_TAL) = EDENI(IION,1:NSBOX_TAL)
            CALL INTTAL (DUMMY,VOLTAL,1,1,NSBOX_TAL,
     .                   EDENII(IION,ISTRA),
     .                   NR1TAL,NP2TAL,NT3TAL,NBMLT)
            EDENI(IION,1:NSBOX_TAL) = DUMMY(1:NSBOX_TAL)
          END IF

          IF (LPAIO) THEN
            DUMMY(1:NSBOX_TAL) = PAIO(IION,1:NSBOX_TAL)
            CALL INTTAL (DUMMY,VOLTAL,1,1,NSBOX_TAL,
     .                   PAIOI(IION,ISTRA),
     .                   NR1TAL,NP2TAL,NT3TAL,NBMLT)
            PAIO(IION,1:NSBOX_TAL) = DUMMY(1:NSBOX_TAL)
          END IF

          IF (LPMIO) THEN
            DUMMY(1:NSBOX_TAL) = PMIO(IION,1:NSBOX_TAL)
            CALL INTTAL (DUMMY,VOLTAL,1,1,NSBOX_TAL,
     .                   PMIOI(IION,ISTRA),
     .                   NR1TAL,NP2TAL,NT3TAL,NBMLT)
            PMIO(IION,1:NSBOX_TAL) = DUMMY(1:NSBOX_TAL)
          END IF

          IF (LPIIO) THEN
            DUMMY(1:NSBOX_TAL) = PIIO(IION,1:NSBOX_TAL)
            CALL INTTAL (DUMMY,VOLTAL,1,1,NSBOX_TAL,
     .                   PIIOI(IION,ISTRA),
     .                   NR1TAL,NP2TAL,NT3TAL,NBMLT)
            PIIO(IION,1:NSBOX_TAL) = DUMMY(1:NSBOX_TAL)
          END IF

          IF (LPPHIO) THEN
            DUMMY(1:NSBOX_TAL) = PPHIO(IION,1:NSBOX_TAL)
            CALL INTTAL (DUMMY,VOLTAL,1,1,NSBOX_TAL,
     .                   PPHIOI(IION,ISTRA),
     .                   NR1TAL,NP2TAL,NT3TAL,NBMLT)
            PPHIO(IION,1:NSBOX_TAL) = DUMMY(1:NSBOX_TAL)
          END IF

          IF (LPGENI) THEN
            DUMMY(1:NSBOX_TAL) = PGENI(IION,1:NSBOX_TAL)
            CALL INTTAL (DUMMY,VOLTAL,1,1,NSBOX_TAL,
     .                   PGENII(IION,ISTRA),
     .                   NR1TAL,NP2TAL,NT3TAL,NBMLT)
            PGENI(IION,1:NSBOX_TAL) = DUMMY(1:NSBOX_TAL)
          END IF

          IF (LEGENI) THEN
            DUMMY(1:NSBOX_TAL) = EGENI(IION,1:NSBOX_TAL)
            CALL INTTAL (DUMMY,VOLTAL,1,1,NSBOX_TAL,
     .                   EGENII(IION,ISTRA),
     .                   NR1TAL,NP2TAL,NT3TAL,NBMLT)
            EGENI(IION,1:NSBOX_TAL) = DUMMY(1:NSBOX_TAL)
          END IF

          IF (LVGENI) THEN
            DUMMY(1:NSBOX_TAL) = VGENI(IION,1:NSBOX_TAL)
            CALL INTTAL (DUMMY,VOLTAL,1,1,NSBOX_TAL,
     .                   VGENII(IION,ISTRA),
     .                   NR1TAL,NP2TAL,NT3TAL,NBMLT)
            VGENI(IION,1:NSBOX_TAL) = DUMMY(1:NSBOX_TAL)
          END IF

          IF (LPPIO) THEN
            DUMMY(1:NSBOX_TAL) = PPIO(IION,1:NSBOX_TAL)
            CALL INTTAL (DUMMY,VOLTAL,1,1,NSBOX_TAL,
     .                   PPIOI(IION,ISTRA),
     .                   NR1TAL,NP2TAL,NT3TAL,NBMLT)
            PPIO(IION,1:NSBOX_TAL) = DUMMY(1:NSBOX_TAL)
          END IF

          IF (LVXDENI) THEN
            DUMMY(1:NSBOX_TAL) = VXDENI(IION,1:NSBOX_TAL)
            CALL INTTAL (DUMMY,VOLTAL,1,1,NSBOX_TAL,
     .                   VXDENII(IION,ISTRA),
     .                   NR1TAL,NP2TAL,NT3TAL,NBMLT)
            VXDENI(IION,1:NSBOX_TAL) = DUMMY(1:NSBOX_TAL)
          END IF

          IF (LVYDENI) THEN
            DUMMY(1:NSBOX_TAL) = VYDENI(IION,1:NSBOX_TAL)
            CALL INTTAL (DUMMY,VOLTAL,1,1,NSBOX_TAL,
     .                   VYDENII(IION,ISTRA),
     .                   NR1TAL,NP2TAL,NT3TAL,NBMLT)
            VYDENI(IION,1:NSBOX_TAL) = DUMMY(1:NSBOX_TAL)
          END IF

          IF (LVZDENI) THEN
            DUMMY(1:NSBOX_TAL) = VZDENI(IION,1:NSBOX_TAL)
            CALL INTTAL (DUMMY,VOLTAL,1,1,NSBOX_TAL,
     .                   VZDENII(IION,ISTRA),
     .                   NR1TAL,NP2TAL,NT3TAL,NBMLT)
            VZDENI(IION,1:NSBOX_TAL) = DUMMY(1:NSBOX_TAL)
          END IF

452   CONTINUE
      DO 453 IPHOT=1,NPHOTI
        IF (.NOT.LOGPHOT(IPHOT,ISTRA)) CYCLE
          IF (LPDENPH) THEN
            DUMMY(1:NSBOX_TAL) = PDENPH(IPHOT,1:NSBOX_TAL)
            CALL INTTAL (DUMMY,VOLTAL,1,1,NSBOX_TAL,
     .                   PDENPHI(IPHOT,ISTRA),
     .                   NR1TAL,NP2TAL,NT3TAL,NBMLT)
            PDENPH(IPHOT,1:NSBOX_TAL) = DUMMY(1:NSBOX_TAL)
          END IF

          IF (LEDENPH) THEN
            DUMMY(1:NSBOX_TAL) = EDENPH(IPHOT,1:NSBOX_TAL)
            CALL INTTAL (DUMMY,VOLTAL,1,1,NSBOX_TAL,
     .                   EDENPHI(IPHOT,ISTRA),
     .                   NR1TAL,NP2TAL,NT3TAL,NBMLT)
            EDENPH(IPHOT,1:NSBOX_TAL) = DUMMY(1:NSBOX_TAL)
          END IF

          IF (LPAPHT) THEN
            DUMMY(1:NSBOX_TAL) = PAPHT(IPHOT,1:NSBOX_TAL)
            CALL INTTAL (DUMMY,VOLTAL,1,1,NSBOX_TAL,
     .                   PAPHTI(IPHOT,ISTRA),
     .                   NR1TAL,NP2TAL,NT3TAL,NBMLT)
            PAPHT(IPHOT,1:NSBOX_TAL) = DUMMY(1:NSBOX_TAL)
          END IF

          IF (LPMPHT) THEN
            DUMMY(1:NSBOX_TAL) = PMPHT(IPHOT,1:NSBOX_TAL)
            CALL INTTAL (DUMMY,VOLTAL,1,1,NSBOX_TAL,
     .                   PMPHTI(IPHOT,ISTRA),
     .                   NR1TAL,NP2TAL,NT3TAL,NBMLT)
            PMPHT(IPHOT,1:NSBOX_TAL) = DUMMY(1:NSBOX_TAL)
          END IF

          IF (LPIPHT) THEN
            DUMMY(1:NSBOX_TAL) = PIPHT(IPHOT,1:NSBOX_TAL)
            CALL INTTAL (DUMMY,VOLTAL,1,1,NSBOX_TAL,
     .                   PIPHTI(IPHOT,ISTRA),
     .                   NR1TAL,NP2TAL,NT3TAL,NBMLT)
            PIPHT(IPHOT,1:NSBOX_TAL) = DUMMY(1:NSBOX_TAL)
          END IF

          IF (LPPHPHT) THEN
            DUMMY(1:NSBOX_TAL) = PPHPHT(IPHOT,1:NSBOX_TAL)
            CALL INTTAL (DUMMY,VOLTAL,1,1,NSBOX_TAL,
     .                   PPHPHTI(IPHOT,ISTRA),
     .                   NR1TAL,NP2TAL,NT3TAL,NBMLT)
            PPHPHT(IPHOT,1:NSBOX_TAL) = DUMMY(1:NSBOX_TAL)
          END IF

          IF (LPGENPH) THEN
            DUMMY(1:NSBOX_TAL) = PGENPH(IPHOT,1:NSBOX_TAL)
            CALL INTTAL (DUMMY,VOLTAL,1,1,NSBOX_TAL,
     .                   PGENPHI(IPHOT,ISTRA),
     .                   NR1TAL,NP2TAL,NT3TAL,NBMLT)
            PGENPH(IPHOT,1:NSBOX_TAL) = DUMMY(1:NSBOX_TAL)
          END IF

          IF (LEGENPH) THEN
            DUMMY(1:NSBOX_TAL) = EGENPH(IPHOT,1:NSBOX_TAL)
            CALL INTTAL (DUMMY,VOLTAL,1,1,NSBOX_TAL,
     .                   EGENPHI(IPHOT,ISTRA),
     .                   NR1TAL,NP2TAL,NT3TAL,NBMLT)
            EGENPH(IPHOT,1:NSBOX_TAL) = DUMMY(1:NSBOX_TAL)
          END IF

          IF (LVGENPH) THEN
            DUMMY(1:NSBOX_TAL) = VGENPH(IPHOT,1:NSBOX_TAL)
            CALL INTTAL (DUMMY,VOLTAL,1,1,NSBOX_TAL,
     .                   VGENPHI(IPHOT,ISTRA),
     .                   NR1TAL,NP2TAL,NT3TAL,NBMLT)
            VGENPH(IPHOT,1:NSBOX_TAL) = DUMMY(1:NSBOX_TAL)
          END IF

          IF (LPPPHT) THEN
            DUMMY(1:NSBOX_TAL) = PPPHT(IPHOT,1:NSBOX_TAL)
            CALL INTTAL (DUMMY,VOLTAL,1,1,NSBOX_TAL,
     .                   PPPHTI(IPHOT,ISTRA),
     .                   NR1TAL,NP2TAL,NT3TAL,NBMLT)
            PPPHT(IPHOT,1:NSBOX_TAL) = DUMMY(1:NSBOX_TAL)
          END IF

          IF (LVXDENPH) THEN
            DUMMY(1:NSBOX_TAL) = VXDENPH(IPHOT,1:NSBOX_TAL)
            CALL INTTAL (DUMMY,VOLTAL,1,1,NSBOX_TAL,
     .                   VXDENPHI(IPHOT,ISTRA),
     .                   NR1TAL,NP2TAL,NT3TAL,NBMLT)
            VXDENPH(IPHOT,1:NSBOX_TAL) = DUMMY(1:NSBOX_TAL)
          END IF

          IF (LVYDENPH) THEN
            DUMMY(1:NSBOX_TAL) = VYDENPH(IPHOT,1:NSBOX_TAL)
            CALL INTTAL (DUMMY,VOLTAL,1,1,NSBOX_TAL,
     .                   VYDENPHI(IPHOT,ISTRA),
     .                   NR1TAL,NP2TAL,NT3TAL,NBMLT)
            VYDENPH(IPHOT,1:NSBOX_TAL) = DUMMY(1:NSBOX_TAL)
          END IF

          IF (LVZDENPH) THEN
            DUMMY(1:NSBOX_TAL) = VZDENPH(IPHOT,1:NSBOX_TAL)
            CALL INTTAL (DUMMY,VOLTAL,1,1,NSBOX_TAL,
     .                   VZDENPHI(IPHOT,ISTRA),
     .                   NR1TAL,NP2TAL,NT3TAL,NBMLT)
            VZDENPH(IPHOT,1:NSBOX_TAL) = DUMMY(1:NSBOX_TAL)
          END IF

 453  CONTINUE
      DO 454 IPLS=1,NPLSI
        IF (LPAPL) THEN
          DUMMY(1:NSBOX_TAL) = PAPL(IPLS,1:NSBOX_TAL)
          CALL INTTAL (DUMMY,VOLTAL,1,1,NSBOX_TAL,
     .                 PAPLI(IPLS,ISTRA),
     .                 NR1TAL,NP2TAL,NT3TAL,NBMLT)
          PAPL(IPLS,1:NSBOX_TAL) = DUMMY(1:NSBOX_TAL)
        END IF

        IF (LPMPL) THEN
          DUMMY(1:NSBOX_TAL) = PMPL(IPLS,1:NSBOX_TAL)
          CALL INTTAL (DUMMY,VOLTAL,1,1,NSBOX_TAL,
     .                 PMPLI(IPLS,ISTRA),
     .                 NR1TAL,NP2TAL,NT3TAL,NBMLT)
          PMPL(IPLS,1:NSBOX_TAL) = DUMMY(1:NSBOX_TAL)
        END IF

        IF (LPIPL) THEN
          DUMMY(1:NSBOX_TAL) = PIPL(IPLS,1:NSBOX_TAL)
          CALL INTTAL (DUMMY,VOLTAL,1,1,NSBOX_TAL,
     .                 PIPLI(IPLS,ISTRA),
     .                 NR1TAL,NP2TAL,NT3TAL,NBMLT)
          PIPL(IPLS,1:NSBOX_TAL) = DUMMY(1:NSBOX_TAL)
        END IF

        IF (LPPHPL) THEN
          DUMMY(1:NSBOX_TAL) = PPHPL(IPLS,1:NSBOX_TAL)
          CALL INTTAL (DUMMY,VOLTAL,1,1,NSBOX_TAL,
     .                 PPHPLI(IPLS,ISTRA),
     .                 NR1TAL,NP2TAL,NT3TAL,NBMLT)
          PPHPL(IPLS,1:NSBOX_TAL) = DUMMY(1:NSBOX_TAL)
        END IF

        IF (LPPPL) THEN
          DUMMY(1:NSBOX_TAL) = PPPL(IPLS,1:NSBOX_TAL)
          CALL INTTAL (DUMMY,VOLTAL,1,1,NSBOX_TAL,
     .                 PPPLI(IPLS,ISTRA),
     .                 NR1TAL,NP2TAL,NT3TAL,NBMLT)
          PPPL(IPLS,1:NSBOX_TAL) = DUMMY(1:NSBOX_TAL)
        END IF

        IF (LMAPL) THEN
          DUMMY(1:NSBOX_TAL) = MAPL(IPLS,1:NSBOX_TAL)
          CALL INTTAL (DUMMY,VOLTAL,1,1,NSBOX_TAL,
     .                 MAPLI(IPLS,ISTRA),
     .                 NR1TAL,NP2TAL,NT3TAL,NBMLT)
          MAPL(IPLS,1:NSBOX_TAL) = DUMMY(1:NSBOX_TAL)
        END IF

        IF (LMMPL) THEN
          DUMMY(1:NSBOX_TAL) = MMPL(IPLS,1:NSBOX_TAL)
          CALL INTTAL (DUMMY,VOLTAL,1,1,NSBOX_TAL,
     .                 MMPLI(IPLS,ISTRA),
     .                 NR1TAL,NP2TAL,NT3TAL,NBMLT)
          MMPL(IPLS,1:NSBOX_TAL) = DUMMY(1:NSBOX_TAL)
        END IF

        IF (LMIPL) THEN
          DUMMY(1:NSBOX_TAL) = MIPL(IPLS,1:NSBOX_TAL)
          CALL INTTAL (DUMMY,VOLTAL,1,1,NSBOX_TAL,
     .                 MIPLI(IPLS,ISTRA),
     .                 NR1TAL,NP2TAL,NT3TAL,NBMLT)
          MIPL(IPLS,1:NSBOX_TAL) = DUMMY(1:NSBOX_TAL)
        END IF

        IF (LMPHPL) THEN
          DUMMY(1:NSBOX_TAL) = MPHPL(IPLS,1:NSBOX_TAL)
          CALL INTTAL (DUMMY,VOLTAL,1,1,NSBOX_TAL,
     .                 MPHPLI(IPLS,ISTRA),
     .                 NR1TAL,NP2TAL,NT3TAL,NBMLT)
          MPHPL(IPLS,1:NSBOX_TAL) = DUMMY(1:NSBOX_TAL)
        END IF

454   CONTINUE

      IF (LADDV) THEN
        DO 455 IADV=1,NADVI
          IF (IADVE(IADV).NE.2.AND.IADVE(IADV).NE.4) THEN
            DUMMY(1:NSBOX_TAL) = ADDV(IADV,1:NSBOX_TAL)
            CALL INTTAL (DUMMY,VOLTAL,1,1,NSBOX_TAL,
     .                   ADDVI(IADV,ISTRA),
     .                   NR1TAL,NP2TAL,NT3TAL,NBMLT)
            ADDV(IADV,1:NSBOX_TAL) = DUMMY(1:NSBOX_TAL)
          END IF

          IF (IADVE(IADV).EQ.2.OR.IADVE(IADV).EQ.4) THEN
            DUMMY(1:NSBOX_TAL) = ADDV(IADV,1:NSBOX_TAL)
            CALL INTVOL (DUMMY,1,1,NSBOX_TAL,ADDVI(IADV,ISTRA),
     .                   NR1TAL,NP2TAL,NT3TAL,NBMLT)
            ADDV(IADV,1:NSBOX_TAL) = DUMMY(1:NSBOX_TAL)
          END IF
455     CONTINUE
      END IF

      IF (LCOLV) THEN
        DO 456 ICLV=1,NCLVI
          IF (ICLVE(ICLV).NE.2.AND.ICLVE(ICLV).NE.4) THEN
            DUMMY(1:NSBOX_TAL) = COLV(ICLV,1:NSBOX_TAL)
            CALL INTTAL (DUMMY,VOLTAL,1,1,NSBOX_TAL,
     .                   COLVI(ICLV,ISTRA),
     .                   NR1TAL,NP2TAL,NT3TAL,NBMLT)
            COLV(ICLV,1:NSBOX_TAL) = DUMMY(1:NSBOX_TAL)
          END IF

          IF (ICLVE(ICLV).EQ.2.OR.ICLVE(ICLV).EQ.4) THEN
            DUMMY(1:NSBOX_TAL) = COLV(ICLV,1:NSBOX_TAL)
            CALL INTVOL (DUMMY,1,1,NSBOX_TAL,COLVI(ICLV,ISTRA),
     .                 NR1TAL,NP2TAL,NT3TAL,NBMLT)
            COLV(ICLV,1:NSBOX_TAL) = DUMMY(1:NSBOX_TAL)
          END IF
456     CONTINUE
      END IF

      IF (LSNAPV) THEN
        DO 457 ISNV=1,NSNVI
          IF (ISNVE(ISNV).NE.2.AND.ISNVE(ISNV).NE.4) THEN
            DUMMY(1:NSBOX_TAL) = SNAPV(ISNV,1:NSBOX_TAL)
            CALL INTTAL (DUMMY,VOLTAL,1,1,NSBOX_TAL,
     .                   SNAPVI(ISNV,ISTRA),
     .                   NR1TAL,NP2TAL,NT3TAL,NBMLT)
            SNAPV(ISNV,1:NSBOX_TAL) = DUMMY(1:NSBOX_TAL)
          END IF

          IF (ISNVE(ISNV).EQ.2.OR.ISNVE(ISNV).EQ.4) THEN
            DUMMY(1:NSBOX_TAL) = SNAPV(ISNV,1:NSBOX_TAL)
            CALL INTVOL (DUMMY,1,1,NSBOX_TAL,SNAPVI(ISNV,ISTRA),
     .                 NR1TAL,NP2TAL,NT3TAL,NBMLT)
            SNAPV(ISNV,1:NSBOX_TAL) = DUMMY(1:NSBOX_TAL)
          END IF
457     CONTINUE
      END IF

      IF (LCOPV) THEN
        DO 458 ICPV=1,NCPVI
          DUMMY(1:NSBOX_TAL) = COPV(ICPV,1:NSBOX_TAL)
          CALL INTTAL (DUMMY,VOLTAL,1,1,NSBOX_TAL,
     .                 COPVI(ICPV,ISTRA),
     .                 NR1TAL,NP2TAL,NT3TAL,NBMLT)
          COPV(ICPV,1:NSBOX_TAL) = DUMMY(1:NSBOX_TAL)
458     CONTINUE
      END IF

      IF (LBGKV) THEN
        DO 459 IBGV=1,NBGVI
          DUMMY(1:NSBOX_TAL) = BGKV(IBGV,1:NSBOX_TAL)
          CALL INTTAL (DUMMY,VOLTAL,1,1,NSBOX_TAL,BGKVI(IBGV,ISTRA),
     .                 NR1TAL,NP2TAL,NT3TAL,NBMLT)
          BGKV(IBGV,1:NSBOX_TAL) = DUMMY(1:NSBOX_TAL)
459     CONTINUE
      END IF

      RETURN
      END SUBROUTINE INTEGRATE_TALLIES
C ===== SOURCE: mcarlo.f
!PB 02.03.06: storing of trajectories
c  nov.16th 2005: npts_save = npts always, not only for nlmovie option
c                 because otherwise in iterative mode a stratum cannot be
c                 re-activated, once it was de-activated in a particlar iteration.
c                 v.kotov
c  19.12.05:  bug: no printout of surface tally std. dev., for sum over strata
c             bug fix: here in macrlo.f: sigmaw = stvw and sgmws=stvws added
c             also needed for this bug fix: clear_sumostra, stat_sumostra
c
      SUBROUTINE MCARLO
C
C  MONTE CARLO CALCULATION
C
      USE PRECISION
      USE PARMMOD
      USE COMUSR
      USE CTSURF
      USE CESTIM
      USE CCONA
      USE CLOGAU
      USE CRAND
      USE CGRID
      USE CSPEZ
      USE CZT1
      USE CTRCEI
      USE CGEOM
      USE CSDVI
      USE CSDVI_BGK
      USE CSDVI_COP
      USE COMPRT
      USE CPES
      USE COMNNL
      USE COMSOU
      USE COMSPL
      USE COMSIG
      USE CLGIN
      USE COUTAU
      USE COMSIG
      USE CSPEI
      USE CUPD
      USE PHOTON

      IMPLICIT NONE

      INCLUDE 'mpif.h'
C
      CHARACTER(6) :: CIS
      CHARACTER(10) :: CDATE, CTIME

      REAL(DP), ALLOCATABLE :: OUTAU(:)
      REAL(DP) :: ZVOLIN(NRTAL), ZVOLIW(NRTAL),
     .          XTIM(0:NSTRA), SCLTAL(N1MX,NTALV), DXTIM(0:NSTRA)
      REAL(DP) :: ST, FFF, DELT, XFL1,
     .          XPRNLS, XFACT, OVER_ACC, XPRNLI, STW, STWS,
     .          TIMI, SECOND_OWN, XPT, XX1, XPT1, XFL, SECND, XX, FLX,
     .          VAL, ZW, ZWW, VALUE, ZVOLWT, ZVOLNT, FSIG, ZFLUX,
     .          SECND2, OVER, SECND1, WTT, SECDEL, DUMRAN, timan, timen
      REAL(DP), EXTERNAL :: RANF_EIRENE, RANSET_EIRENE

      INTEGER :: NPTS_SAVE(NSTRA)
      INTEGER :: ITAL, ISDV, IALS, ISTRAA, ISTRAE, ICELL,
     .           IGFFT, IALV, IDV, I, K, IER, IRC, IBGV, NMX, NINIST,
     .           IPANU, ISEED, ISTR, NPTTOT, NREC11, IB, N2, NREC10,
     .           IC, IR, IGFF, IADD, INDX, ICLV, IADV, ICPV, ISNV,
     .           INODES, J, ISEE, IPTSI, I1, I2, I3, IA, IT, IMCP,
     .           ISUM, NPX, IS, NEW_ITER, ISPC, IN
      INTEGER, EXTERNAL :: RANGET_EIRENE
C
      LOGICAL :: LGSTOP, NLPOLS, NLTORS
c slmod begin - debug
      INTEGER :: LAST_IPANU = 0
c slmod end
      DATA N2/2/
C
C@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
C
      TIMI=SECOND_OWN()
      timan=timi
C
      IF (NFILEN.NE.0) THEN
        NREC10=1500
        OPEN (UNIT=10,ACCESS='DIRECT',FORM='UNFORMATTED',RECL=8*NREC10)
        NREC11=NOUTAU
        OPEN (UNIT=11,ACCESS='DIRECT',FORM='UNFORMATTED',RECL=8*NREC11)
      ENDIF
C@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
C
C-------------------------------------------------------------------
C
C** INITIALIZE SOME DATA AND SUBROUTINES (ONCE FOR ALL STRATA) *****
C
C  SCLTAL: FLAG FOR SCALING OF VOLUME AVERAGED TALLY
C  SCLTAL =0  1.
C         =1  ZVOLIN(ICELL)
C         =2  ZW
C         =3  ZVOLIW(ICELL)
C         =4  ZWW
C
      SCLTAL=0.D0
      SCLTAL(1,1:8)=1
      SCLTAL(1,9:56)=3
C
C  INITIALIZE RANDOM NUMBER ARRAYS
      INIV1=0
      INIV2=0
      INIV3=0
      INIV4=0
C  DETERMINE MAXIMAL INTEGER (DEPENDING ON MACHINE)
      IF (NLCRR) THEN
        INTMAX=HUGE(1)
      ENDIF
C
C  IRNDVC MUST BE EVEN AND NOT LARGER THEN 64 (COMMON CRAND)
C  IRNDVC IS THE NUMBER OF RANDOM VECTORS PRODUCED IN ONE CALL TO
C  TO RANDOM SAMPLING ROUTINES
      IF (NLCRR) THEN
        IRNDVC=2
      ELSE
        IRNDVC=64
      ENDIF
      IRNDVH=IRNDVC/2

      TIMen=SECOND_OWN()
C
C  INITIALIZE SUBR. STATIS
C
      CALL LEER(1)
      CALL STATS0
      CALL STATS0_BGK
      CALL STATS0_COP
      CALL STATS0_SPC
C  INITIALIZE SUBR. REFLEC AND SPUTER
      CALL REFLC0
      IF (NPHOT > 0) THEN
        CALL REFLC0_PHOTON
        CALL LINE_CUTOFF
      END IF
      CALL SPUTR0
C  INITIALIZE SUBR. SAMVOL
      CALL SAMVL0
C  INITIALIZE SUBR. SAMSRF
      CALL SAMSF0
C
C
      IESTR=-1
      IF (NFILEN.EQ.2.OR.NFILEN.EQ.7) GOTO 2000
C
C**** CLEAR WORK AREA FOR SUM OVER STRATA ****************************
C
      CALL CLEAR_SUMOSTRA
C
C**** INITIALIZE COMMONS COUTAU AND CSPEZ
C
      CALL INIT_COUTAU
      FASCL(0)=1.
      FMSCL(0)=1.
      FISCL(0)=1.
      FPHSCL(0)=1.
C
      LOGATM=.FALSE.
      LOGION=.FALSE.
      LOGMOL=.FALSE.
      LOGPLS=.FALSE.
      LOGPHOT=.FALSE.
C
C
C   MAXIMAL CALCULATION TIME ALLOWED FOR EACH STRATUM,
C   PROPORTIONAL TO NPTS(ISTRA), OR FLUX(ISTRA) (INPUT)
C   OR LINEAR COMBINATION THEREOF
C   THEREFORE NUMBER OF TEST PARTICLES MAY BE LESS THAN NPTS
C   BUT DO AT LEAST 2 PARTICLES, IN CASE NPTS(ISTRA).GE.2
C
      CALL TRMAIN(XX,NTCPU)
      XTIM(0)=SECOND_OWN()
      SECND=XTIM(0)

      NPTS_SAVE=NPTS

      timan=secnd
C
C  REMAINING CPU TIME, SUBSTRACT N2 SECONDS FOR PRINTOUT AND PLOTS
      XX1=XX-N2
      XPT=0.
      XFL=0.
      DO 7 ISTRA=1,NSTRAI
        IF (NPTS(ISTRA).LE.0.AND.FLUX(ISTRA).GT.0.D0) THEN
          FLUX(ISTRA)=0.D0
          WRITE (iunout,*) 'STRATUM ISTRA= ',ISTRA,
     .                     ' TURNED OFF, BECAUSE NPTS=0'
          CALL LEER(1)
        ENDIF
        IF (NPTS(ISTRA).GT.0.AND.FLUX(ISTRA).LE.0.D0) THEN
          NPTS(ISTRA)=0
          WRITE (iunout,*) 'STRATUM ISTRA= ',ISTRA,
     .                     ' TURNED OFF, BECAUSE FLUX=0.0'
          CALL LEER(1)
        ENDIF
        XPT=XPT+FLOAT(NPTS(ISTRA))
        XFL=XFL+FLUX(ISTRA)
7     CONTINUE
      XPT1=0.
      XFL1=0.
      nsteff=0
      DO 8 ISTRA=1,NSTRAI
        if (npts(istra) .gt. 0) then
          XPT1=XPT1+REAL(NPTS(ISTRA))
c          XPT1=XPT1+NPTS(ISTRA)
          XFL1=XFL1+FLUX(ISTRA)
          XTIM(ISTRA)=XTIM(0)+XX1*((1.-ALLOC)*XPT1/(XPT+EPS60)+
     +                             (   ALLOC)*XFL1/(XFL+EPS60))
          nsteff=nsteff+1
c slmod begin - debug
c      WRITE(0,*) 'XTIM A:',istra,xtim(istra)
c      WRITE(0,*) ' XTIM0:',xtim(0)
c      WRITE(0,*) ' NPTS :',npts(istra)
c      WRITE(0,*) ' FLUX :',flux(istra)
c      WRITE(0,*) ' XX1  :',xx1
c      WRITE(0,*) ' XPT  :',xpt
c      WRITE(0,*) ' XFL  :',xfl
c      WRITE(0,*) ' ALLOC:',alloc 
c slmod end      
        else
          xtim(istra)=xtim(istra-1)
        end if
8     CONTINUE
C  REDISTRIBUTE XTIM IN CASE THAT SOURCES ARE SWITCHED OFF (SHORT CYCLE)
      DO ISTRA=1,NSTRAI
        DXTIM(ISTRA)=XTIM(ISTRA)-XTIM(ISTRA-1)
        IF (.NOT.NLSRON(ISTRA)) DXTIM(ISTRA)=0._DP
      END DO

      DO ISTRA=1,NSTRAI
        XTIM(ISTRA)=XTIM(ISTRA-1)+DXTIM(ISTRA)
      END DO
C

      TIMen=SECOND_OWN()

      CALL LEER(2)
      CALL MASAGE ('LOOP OVER STRATA STARTS AT CPU TIME(SEC):    ')
      CALL MASR1 ('STARTTIM',XTIM(0))
      CALL MASAGE ('CPU TIME ASSIGNED TO STRATA (SEC) :          ')
      IF (ALLOC.EQ.0.D0) THEN
        CALL MASAGE ('PROPORTIONAL NPTS(ISTRA)                     ')
      ELSEIF (ALLOC.EQ.1.) THEN
        CALL MASAGE ('PROPORTIONAL FLUX(ISTRA)                     ')
      ELSE
        CALL MASAGE ('WEIGHTED ALLOCATION BETWEEN NPTS AND FLUX    ')
      ENDIF
      DO 9 ISTRA=1,NSTRAI
        DELT=XTIM(ISTRA)-XTIM(ISTRA-1)
        CALL MASJ1R ('STRATUM, TIME   ',ISTRA,DELT)
9     CONTINUE
      CALL LEER(2)
C
C  ASSIGN NUMBER OF PARTICLES TO BE STORED ON CENSUS, PROPORTIONAL
C  TO CPU TIME ASSIGNED TO EACH STRATUM
C
      IF (NPRNLI.GT.0) THEN
        WRITE(iunout,*) 
     .    'MAXIMUM NUMBER OF PARTICLES THAT WILL BE SAVED '
        WRITE(iunout,*) 'FOR SNAPSHOT ESTIMATORS: PROPORTIONAL TO CPU-'
        WRITE(iunout,*) 'TIME ALLOCATED FOR EACH STRATUM'
        DO  ISTRA=1,NSTRAI
          XFACT=(XTIM(ISTRA)-XTIM(ISTRA-1))/XX1
          XPRNLS       =NPRNLI*XFACT+0.5
          NPRNLS(ISTRA)=XPRNLS
        ENDDO
10      ISUM=SUM(NPRNLS(1:NSTRAI))
        IF (ISUM.NE.NPRNLI) THEN
C  ROUND OFF ERRORS
          WRITE (iunout,*) 'ISUM,NPRNLI ',ISUM,NPRNLI
          NMX=0
          NPX=-1
          DO ISTRA=1,NSTRAI
            IF (NPRNLS(ISTRA).GT.NPX) THEN
              NMX=ISTRA
              NPX=NPRNLS(ISTRA)
            ENDIF
          ENDDO
          IS=ISIGN(1,ISUM-NPRNLI)
          NPRNLS(NMX)=NPRNLS(NMX)-IS
          GOTO 10
        ENDIF
        DO  ISTRA=1,NSTRAI
          CALL MASJ2 ('STRATUM, NUMBER ',ISTRA,NPRNLS(ISTRA))
        ENDDO
      ENDIF
C
C  ASSIGN PE'S TO STRATA
C
      IF ((NSTEFF > 0) .AND. (NPRS.GT.nsteff)) THEN
        CALL PEDIST(XTIM)
        if (.not.lident) then
          do istra=1,nstrai
            ninitl(istra)=ninitl(istra)+my_pe*10000
          enddo
        endif
      ENDIF
C
C**** STRATA LOOP ****************************************************
C
      NPANU=0
      OVER_ACC=0.D0
      NEW_ITER=0
      DO 1000 ISTR=1,NSTRAI

        timan=second_own()

        ISTRA=ISTR
        IF (.NOT.NLSRON(ISTRA)) CYCLE
        IF (NLMOVIE) THEN
          ISTRA=NSTRAI-ISTR+1
          IF (ISTRA.EQ.NSTRAI-1) THEN
C  TOTAL NUMBER OF PARTICLES TO BE LAUNCHED FROM ALL NON-CENSUS STRATA
            NPTTOT=NPRNLI-NPANU
C  REDEFINE NPTS ACCORDING TO XTIM(ISTRA)
            CALL LEER(2)
            WRITE (iunout,*) 
     .        'REDEFINE NPTS(ISTRA) BECAUSE OF NLMOVIE OPTION'
            ISUM=0
            DO IS=1,NSTRAI-1
              XFACT=(XTIM(IS)-XTIM(IS-1))/XTIM(NSTRAI-1)
              XPRNLI=NPTTOT*XFACT+0.5
              NPTS(IS)=XPRNLI
              ISUM=ISUM+NPTS(IS)
              WRITE(iunout,*) 'ISTRA, NPTS = ',IS,NPTS(IS)
            ENDDO
          ENDIF
        ENDIF
        CALL LEER(2)
        IF (NPTS(ISTRA).GT.0) THEN
          WRITE (iunout,*) 'BEGIN TO WORK ON STRATUM NO. ',ISTRA
        ELSEIF (NPTS(ISTRA).LE.0) THEN
          WRITE (iunout,*) 'STRATUM NO. ',ISTRA,' ABANDONED'
        ENDIF
        CALL LEER(2)
        XMCP(ISTRA)=0.
        if( ((nprs.le.nsteff).and.(mod(ISTRA-1,nprs).eq.my_pe)) .or.
     .      ((nprs.gt.nsteff).and.(nstrpe(my_pe).eq.istra)) ) then
        IPANU=0
C
C  INITIALIZE RANDOM NUMBER GENERATOR FOR STRATUM ISTRA
        IF (NINITL(ISTRA).GT.0) THEN
          NINIST=NINITL(ISTRA)
          dumran=ranset_eirene(ninist)
          iseed=ranget_eirene(isee)
          ISEEDR=ISEED*0.3D0
          INIV1=0
          INIV2=0
          INIV3=0
          INIV4=0
        ELSEIF (NINITL(ISTRA).LT.0) THEN
          CALL DATE_AND_TIME(CDATE,CTIME)
          READ(CTIME(1:6),*) NINITL(ISTRA)
          WRITE (iunout,*) 'NINITL(ISTRA) SET TO ',NINITL(ISTRA)
          NINIST=NINITL(ISTRA)
          dumran=ranset_eirene(ninist)
          iseed=ranget_eirene(isee)
          ISEEDR=ISEED*0.3D0
          INIV1=0
          INIV2=0
          INIV3=0
          INIV4=0
C       ELSEIF (NINITL(ISTRA).EQ.0) THEN
C  DON'T INITIALIZE FOR THIS STRATUM, NOTHING TO BE DONE HERE
        ENDIF
C
        FASCL(ISTRA)=1.
        FMSCL(ISTRA)=1.
        FISCL(ISTRA)=1.
        FPHSCL(ISTRA)=1.

        timen=second_own()
C
C  CLEAR WORK AREA FOR THIS STRATUM
C
        CALL CLEAR_STRATUM
C
C  ENFORCE TOROIDAL OR POLOIDAL SYMMETRY FOR THIS STRATUM
C
        IF (NLAVRP(ISTRA)) THEN
          NLPOLS=NLPOL
          NLPOL=.FALSE.
        ENDIF
C
        IF (NLAVRT(ISTRA)) THEN
          NLTORS=NLTOR
          NLTOR=.FALSE.
        ENDIF
C
        IPRNLS=0
C
        IF (NPTS(ISTRA).LE.0) GOTO 1000
C
C  INITIALIZE SUBR. LOCATE
C
        CALL LOCAT0
C
C  LOCATE AND FOLLOW MC-PARTICLES
C
        CALL FTCRI(ISTRA,CIS)
        CALL MASBOX ('LAUNCH PARTICLES FOR STRATUM NUMBER ISTRA='//CIS)
        OVER=SECOND_OWN()-SECND
C  ACCUMULATED OVERHEAD BETWEEN STRATA
        OVER_ACC=OVER_ACC+OVER
        CALL MASR1 ('OVERHEAD',OVER)
        XTIM(ISTRA)=XTIM(ISTRA)+OVER_ACC
        WRITE (iunout,*) 'XTIM(ISTRA)= ',XTIM(ISTRA)
C
        LGLAST=.FALSE.
        LGSTOP=.FALSE.
C
C
        DO 100 IPTSI=1,NPTS(ISTRA)
C
C  RESET INDEX-ARRAY
          NCLMT = 0
          DO I=1,NCLMTS
            IN=ICLMT(I)
            IMETCL(IN) = 0
          END DO
          LMETSP=.FALSE.
          NCLMTS = 0
          IF (NADSPC > 0) THEN
            DO ISPC=1,NADSPC
              ESTIML(ISPC)%PSPC%IMETSP = 0
            END DO
          END IF
C
          IF (LGLAST.AND.LGSTOP) THEN
            CALL LEER(1)
            WRITE (iunout,*) 
     .        'NO FURTHER COMP.TIME AVAIL. FOR THIS STRATUM'
            WRITE (iunout,*) 
     .        'M.C. HISTORIES FOLLOWED UNTIL THAT TIME FOR'
            WRITE (iunout,*) 'THIS STRATUM'
            CALL MASJ2 ('ISTRA,IPANU=    ',ISTRA,IPANU)
            IF (NPRNLI.GT.0) THEN
              WRITE (iunout,*) 'M.C. HISTORIES THAT SCORED AT CENSUS'
              CALL MASJ1 ('IPRNLS= ',IPRNLS)
            ENDIF
            IF (TRCLST) CALL OUTLST
            GOTO 101
          ELSEIF (LGLAST.AND..NOT.LGSTOP) THEN
            CALL LEER(1)
            WRITE (iunout,*) 'CENSUS ARRAYS FILLED FOR THIS STRATUM'
            WRITE (iunout,*) 
     .        'M.C. HISTORIES FOLLOWED UNTIL THAT TIME FOR'
            WRITE (iunout,*) 'THIS STRATUM'
            CALL MASJ2 ('ISTRA,IPANU=    ',ISTRA,IPANU)
            WRITE (iunout,*) 'M.C. HISTORIES THAT SCORED AT CENSUS'
            CALL MASJ1 ('IPRNLS= ',IPRNLS)
            IF (TRCLST) CALL OUTLST
            GOTO 101
          ENDIF
          SECND1=SECOND_OWN()
          LGLAST = IPTSI.EQ.NPTS(ISTRA)
          LGLAST = LGLAST.OR.(SECND1.GT.XTIM(ISTRA).AND.IPTSI.GE.2.AND.
     .                        .NOT.NLMOVIE)
          LGSTOP = LGLAST
C  NEXT MONTE CARLO HISTORY
          IF (NLCRR) THEN
C  INITIALIZE RANDOM NUMBERS FOR EACH PARTICLE, TO GENERATE CORRELATION
C           Call RANSET_eirene(ISEED)
            dumran=ranset_eirene(iseed)
            DUMRAN=RANF_EIRENE( )
            iseed=ranget_eirene(isee)
            ISEED=INTMAX-ISEED
            INIV1=0
            INIV2=0
            INIV3=0
            INIV4=0
          ENDIF
          XMCP(ISTRA)=XMCP(ISTRA)+1.
          NPANU=NPANU+1
          IPANU=IPANU+1
          ITRJ = NCHORI + MOD(IPANU,NTRJ) + 1
          NLEVEL=0
          CALL LOCAT1(IPANU)
C  IS BIRTH PROCESS SURVIVED?
          IF (.NOT.LGPART) GOTO 110
C
102       CONTINUE
C  FOLLOW NEUTRAL PARTICLE
          IF (ITYP.EQ.0.OR.ITYP.EQ.1.OR.ITYP.EQ.2) THEN
c slmod begin - debug
            IF (IPANU.NE.LAST_IPANU) THEN
              IF (MOD(IPANU,1000).EQ.0) WRITE(0,*) 'IPANU:',ipanu
              LAST_IPANU = IPANU
            ENDIF
c            IF (ipanu.EQ.4933) nltrc = .TRUE.
c slmod end
            CALL FOLNEUT
c slmod begin - debug
c            nltrc = .FALSE.
c slmod end
C  FOLLOW TEST ION
          ELSEIF (ITYP.EQ.3) THEN
            CALL FOLION
          ENDIF
C  NEXT GENERATION ?
          IF (LGPART) GOTO 102
C
          IF (NLRAY(ISTRA)) THEN
            CALL CLEAR_TRAJECTORY (ITRJ)
          END IF

110       CONTINUE
C  NUMBER OF REMAINING NODES AND NUMBER OF LEVELS AT NEXT NODE
          IF (NLEVEL.GT.0) THEN
104         INODES=NODES(NLEVEL)-1
            NODES(NLEVEL)=INODES
            IF(INODES.LE.0) GO TO 103
C  RESTORE VARIABLES AND START NEW TRACK
            DO 105 J=1,NPARTC
              RPST(J)=RSPLST(NLEVEL,J)
105         CONTINUE
            DO 106 J=1,MPARTC
              IPST(J)=ISPLST(NLEVEL,J)
106         CONTINUE
            ITYP=ISPEZI(ISPZ,-1)
            IPHOT=ISPEZI(ISPZ,0)
            IATM=ISPEZI(ISPZ,1)
            IMOL=ISPEZI(ISPZ,2)
            IION=ISPEZI(ISPZ,3)
            IPLS=ISPEZI(ISPZ,4)
            CALL NCELLN(NCELL,NRCELL,NPCELL,NTCELL,NACELL,NBLOCK,
     .                  NR1ST,NP2ND,NT3RD,NBMLT,NLRAD,NLPOL,NLTOR)
            NBLCKA=NSTRD*(NBLOCK-1)+NACELL
            NLSRFX=MRSURF.GT.0
            NLSRFY=MPSURF.GT.0
            NLSRFZ=MTSURF.GT.0
            NLSRFA=MASURF.GT.0
            IF (NLTRC) CALL CHCTRC(X0,Y0,Z0,0,12)
            IF (NLSTOR) CALL STORE(200)
            IC_NEUT=0
            IC_ION=0
            GOTO 102
C  RETURN TO PREVIOUS LEVEL
103         CONTINUE
            NLEVEL=NLEVEL-1
            IF(NLEVEL.GT.0) GOTO 104
          ENDIF
C  HISTORY HAS ENDED
C
C  IN CASE NLERG: EITHER LOGATM(1,ISTRA) OR LOGMOL(1,ISTRA)
C  ACTIVATE CORRESPONDING STANDARD DEVIATION ESTIMATOR
C
          IF (NLERG.AND.IPTSI.EQ.1) THEN
            IF (NMOLI >= 1) THEN
              IF (LOGMOL(1,ISTRA)) THEN
                IIH(1)=2
                CALL STATS0
              ENDIF
            ENDIF
          ENDIF
C
C   MEAN SQUARE
          IF (NSIGI.GT.0) CALL STATS1     (NSBOX_TAL,NR1TAL,NP2TAL,
     .                                     NT3TAL,NLIMPS,
     .                                     NLSYMP(ISTRA),NLSYMT(ISTRA))
          IF (NSIGI_BGK.GT.0) CALL STATS1_BGK (NSBOX_TAL,NR1TAL,NP2TAL,
     .                                     NT3TAL,NLIMPS,
     .                                     NLSYMP(ISTRA),NLSYMT(ISTRA))
          IF (NSIGI_COP.GT.0) CALL STATS1_COP (NSBOX_TAL,NR1TAL,NP2TAL,
     .                                     NT3TAL,NLIMPS,
     .                                     NLSYMP(ISTRA),NLSYMT(ISTRA))
          IF (NSIGI_SPC.GT.0) CALL STATS1_SPC (NSBOX_TAL,NR1TAL,NP2TAL,
     .                                     NT3TAL,NLIMPS,
     .                                     NLSYMP(ISTRA),NLSYMT(ISTRA))
C
          IF (TRCTIM) THEN
            SECND2=SECOND_OWN( )
            SECDEL=SECND2-SECND1
            CALL MASJ1R('PART., CPU TIME ',NPANU,SECDEL)
          ENDIF
100     CONTINUE
        CALL LEER(1)
        WRITE (iunout,*) 'ALL REQUESTED TRAJECTORIES COMPLETED'
        WRITE (iunout,*) 'M.C. HISTORIES FOLLOWED UNTIL THAT TIME FOR'
        WRITE (iunout,*) 'THIS STRATUM'
        CALL MASJ2 ('ISTRA,IPANU=    ',ISTRA,IPANU)
        IF (NPRNLI.GT.0) THEN
          WRITE (iunout,*) 'M.C. HISTORIES THAT SURVIVED TO CENSUS'
          CALL MASJ1 ('IPRNLS= ',IPRNLS)
        ENDIF
        IF (TRCLST) CALL OUTLST
C       GOTO 101
101     CONTINUE
C
        SECND=SECOND_OWN()
C
C**** PARTICLE TRACING FOR THIS STRATUM FINISHED **********************
C
c
c     collect data for one stratum from all pe's performing calculations
c     for this stratum
c
       if ((nprs.gt.nsteff).and.(nstrpe(my_pe).eq.istra))
     .  call calstr
C
C  UPDATE AND CHECK LOGICALS FOR TALLIES
C
      DO 120  IMOL=1,NMOLI
        LOGMOL(0,ISTRA)=LOGMOL(0,ISTRA).OR.LOGMOL(IMOL,ISTRA)
        LOGMOL(IMOL,0)=LOGMOL(IMOL,0).OR.LOGMOL(IMOL,ISTRA)
120   CONTINUE
      DO 130  IATM=1,NATMI
        LOGATM(IATM,0)=LOGATM(IATM,0).OR.LOGATM(IATM,ISTRA)
        LOGATM(0,ISTRA)=LOGATM(0,ISTRA).OR.LOGATM(IATM,ISTRA)
130   CONTINUE
      DO 133  IION=1,NIONI
        LOGION(IION,0)=LOGION(IION,0).OR.LOGION(IION,ISTRA)
        LOGION(0,ISTRA)=LOGION(0,ISTRA).OR.LOGION(IION,ISTRA)
133   CONTINUE
      DO 135  IPLS=1,NPLSI
        LOGPLS(IPLS,0)=LOGPLS(IPLS,0).OR.LOGPLS(IPLS,ISTRA)
        LOGPLS(0,ISTRA)=LOGPLS(0,ISTRA).OR.LOGPLS(IPLS,ISTRA)
135   CONTINUE
      DO IPHOT=1,NPHOTI
        LOGPHOT(IPHOT,0)=LOGPHOT(IPHOT,0).OR.LOGPHOT(IPHOT,ISTRA)
        LOGPHOT(0,ISTRA)=LOGPHOT(0,ISTRA).OR.LOGPHOT(IPHOT,ISTRA)
      END DO
      LOGMOL(0,0)=LOGMOL(0,0).OR.LOGMOL(0,ISTRA)
      LOGION(0,0)=LOGION(0,0).OR.LOGION(0,ISTRA)
      LOGATM(0,0)=LOGATM(0,0).OR.LOGATM(0,ISTRA)
      LOGPLS(0,0)=LOGPLS(0,0).OR.LOGPLS(0,ISTRA)
      LOGPHOT(0,0)=LOGPHOT(0,0).OR.LOGPHOT(0,ISTRA)
C
C  NUMBER OF LOCATED M.C. HISTORIES FOR THIS STRATUM: XMCP(ISTRA)
C
      if ((nsteff.ge.nprs).or.(npesta(istra).eq.my_pe)) then

      IF(XMCP(ISTRA).LT.1.) GOTO 1111
C
      WTT=0.
      DO IPHOT=1,NPHOTI
        WTOTPH(0,ISTRA)=WTOTPH(0,ISTRA)+WTOTPH(IPHOT,ISTRA)
        WTT=WTT+WTOTPH(IPHOT,ISTRA)*NPRT(IPHOT)
      END DO
      DO 200 IATM=1,NATMI
        WTOTA(0,ISTRA)=WTOTA(0,ISTRA)+WTOTA(IATM,ISTRA)
        WTT=WTT+WTOTA(IATM,ISTRA)*NPRT(NSPH+IATM)
200   CONTINUE
      DO 201 IMOL=1,NMOLI
        WTOTM(0,ISTRA)=WTOTM(0,ISTRA)+WTOTM(IMOL,ISTRA)
        WTT=WTT+WTOTM(IMOL,ISTRA)*NPRT(NSPA+IMOL)
 201  CONTINUE
      DO 202 IION=1,NIONI
        WTOTI(0,ISTRA)=WTOTI(0,ISTRA)+WTOTI(IION,ISTRA)
        WTT=WTT+WTOTI(IION,ISTRA)*NPRT(NSPAM+IION)
 202  CONTINUE
      WTOTE(ISTRA)=0._DP
      DO 203 IPLS=1,NPLSI
        WTOTP(0,ISTRA)=WTOTP(0,ISTRA)+WTOTP(IPLS,ISTRA)
        WTOTE(ISTRA)=WTOTE(ISTRA)+WTOTP(IPLS,ISTRA)*NCHRGP(IPLS)
        WTT=WTT-WTOTP(IPLS,ISTRA)*NPRT(NSPAMI+IPLS)
 203  CONTINUE
      CALL LEER(2)
      WRITE (iunout,*) 'TOTAL WEIGHT OF PRIMARY SOURCE PARTICLES '
      WRITE (iunout,*) 'BULK IONS, ATOMS, MOLECULES, TEST IONS '
      CALL MASR5 ('WTPLS,WTATM,WTMOL,WTION,WTPHOT          ',
     .     WTOTP(0,ISTRA),WTOTA(0,ISTRA),WTOTM(0,ISTRA),WTOTI(0,ISTRA),
     .     WTOTPH(0,ISTRA))
      WRITE (iunout,*) 'TOTAL NUMBER OF MONTE CARLO HISTORIES'
      IMCP=XMCP(ISTRA)
      CALL MASJ1 ('NPART   ',IMCP)
C
C
C  SET SOME SCALING CONSTANTS
C
      CALL SET_SCAL_CONST (ISTRA, WTT,ZWW, ZW, ZVOLNT, ZVOLWT,
     .                     ZVOLIN, ZVOLIW, SCLTAL, N1MX)
C
C   STATISTICS , IF REQUESTED
C
      IF (XMCP(ISTRA).LE.1.) GOTO 219
C
C  FACTORS FOR STANDARD DEVIATION
      ZFLUX=FLXFAC(ISTRA)*XMCP(ISTRA)
      FSIG=SQRT(XMCP(ISTRA)/(XMCP(ISTRA)-1.))
C
      IF (NSIGI.GT.0) THEN
        CALL STATS2(XMCP(ISTRA),FSIG,ZFLUX)
C  CONVERT TO %
        SDVI1=MAX(0._DP,SDVI1-EPS6)*100.D0
        SDVI2=MAX(0._DP,SDVI2-EPS6)*100.D0
      ENDIF
      IF (NSIGI_BGK.GT.0) THEN
        CALL STATS2_BGK(XMCP(ISTRA),FSIG,ZFLUX)
C  CONVERT TO %
        DO 211 IB=1,NBGVI_STAT
          SGMS_BGK(IB)=MAX(0._DP,SGMS_BGK(IB)-EPS6)*100.D0
          DO 212 J=1,NSBOX_TAL
            SIGMA_BGK(IB,J)=MAX(0._DP,SIGMA_BGK(IB,J)-EPS6)*100.D0
212       CONTINUE
211     CONTINUE
      ENDIF
      IF (NSIGI_COP.GT.0) THEN
        CALL STATS2_COP(XMCP(ISTRA),FSIG,ZFLUX)
C  CONVERT TO %
        DO 213 IC=1,NCPVI_STAT
          SGMS_COP(IC)=MAX(0._DP,SGMS_COP(IC)-EPS6)*100.D0
          DO 214 J=1,NSBOX_TAL
            SIGMA_COP(IC,J)=MAX(0._DP,SIGMA_COP(IC,J)-EPS6)*100.D0
214       CONTINUE
213     CONTINUE
      ENDIF
      IF (NSIGI_SPC.GT.0) THEN
        CALL STATS2_SPC(XMCP(ISTRA),FSIG,ZFLUX)
C  CONVERT TO %
        DO ISPC=1,NADSPC
          ESTIML(ISPC)%PSPC%SGMS=MAX(0._DP,ESTIML(ISPC)%PSPC%SGMS-EPS6)*
     .                           100.D0
          DO J=0,ESTIML(ISPC)%PSPC%NSPC+1
            ESTIML(ISPC)%PSPC%SGM(J)=MAX(0._DP,ESTIML(ISPC)%PSPC%SGM(J)-
     .                               EPS6)*100.D0
          END DO
        END DO
      ENDIF
C
219   CONTINUE

      CALL SCAL_VOLAV_TALLIES (ISTRA, ZWW, ZW,
     .                         ZVOLIN, ZVOLIW, SCLTAL, N1MX)
C
C   REPLACE DEFAULT TALLIES BY USER SUPPLIED
C   COLLISION ESTIMATED TALLIES
C   THIS IS DONE BEFORE VOLUME INTEGRATION THUS THERE IS THE RISK TO
C   DESTROY TERMS NEEDED FOR GLOBAL BALANCES
C
      IF (LCOLV) THEN
        DO 285 ICLV=1,NCLVI
          IS=ICLVS(ICLV)
          IT=ICLVT(ICLV)
          IF (IT.LE.0.OR.IT.GE.NTALA) GOTO 285
          IGFFT=NFSTVI(IT)
          IGFF=NFIRST(IT)
          IF (IS.LE.0.OR.IS.GT.IGFFT) GOTO 285
          IADD=NADDV(IT)
          DO 286 J=1,NSBOX_TAL
            INDX=IADD+(J-1)*IGFF+IS
            ESTIMV(IADD+IS,J)=COLV(ICLV,J)
 286      CONTINUE
 285    CONTINUE
      END IF
C
C   REPLACE DEFAULT TALLIES BY USER SUPPLIED
C   TRACKLENGTH ESTIMATED TALLIES
C   THIS IS DONE BEFORE VOLUME INTEGRATION THUS THERE IS THE RISK TO
C   DESTROY TERMS NEEDED FOR GLOBAL BALANCES
C
      IF (LADDV) THEN
        DO 290 IADV=1,NADVI
          IS=IADVS(IADV)
          IT=IADVT(IADV)
          IF (IT.LE.0.OR.IT.GE.NTALA) GOTO 290
          IGFFT=NFSTVI(IT)
          IGFF=NFIRST(IT)
          IF (IS.LE.0.OR.IS.GT.IGFFT) GOTO 290
          IADD=NADDV(IT)
          DO 295 J=1,NSBOX_TAL
            INDX=IADD+(J-1)*IGFF+IS
            ESTIMV(IADD+IS,J)=ADDV(IADV,J)
 295      CONTINUE
 290    CONTINUE
      END IF
C
C
C   INTEGRATE VOLUME AVERAGED PROFILES   450 --- 459
C
      CALL INTEGRATE_TALLIES (ISTRA)
C
C   SYMMETRISE VOLUME AVERAGED TALLIES?
      IF (NLSYMP(ISTRA).OR.NLSYMT(ISTRA)) THEN
        CALL SYMET(ESTIMV,NTALV,NRTAL,NR1TAL,NP2TAL,NT3TAL,
     .             NADDV,NFIRST,NLSYMP(ISTRA),NLSYMT(ISTRA))
      ENDIF
C
C  WORK WITH VOLUME AVERAGED TALLIES FOR THIS STRATUM FINISHED
C
C  SCALE SURFACE AVERAGED ESTIMATORS AND OTHER FLUXES 600 - 630
C
      CALL SCAL_SURF_TALLIES (ISTRA)
C
C
C   SUM OVER SURFACE INDEX
C   IN THE SURFACE AVERAGED ESTIMATORS
C
C
C  SUM OVER SPECIES INDEX FOR INTEGRATED VOLUME AVERAGED TALLIES
C                         AND INTEGRATED SURFACE AVERAGED TALLIES
C
      CALL SUM_AVERAGE (ISTRA)
C
      CALL SCALE_TALLIES (ISTRA)
C
C   ALGEBRAIC EXPRESSION IN TALLIES 801--900
C
      IF (NALVI.GT.0.OR.NALSI.GT.0) THEN
C
        CALL ALGTAL
C
        IF (LALGV) THEN
          DO 830 IALV=1,NALVI
            CALL INTTAL (ALGV,VOL,IALV,NALV,NSBOX_TAL,ALGVI(IALV,ISTRA),
     .                   NR1TAL,NP2TAL,NT3TAL,NBMLT)
830       CONTINUE
        END IF
C
        IF (LALGS) THEN
          DO 832 IALS=1,NALSI
            ALGSI(IALS,ISTRA)=0.
            DO 831 J=1,NLIMPS
              ALGSI(IALS,ISTRA)=ALGSI(IALS,ISTRA)+ALGS(IALS,J)
831         CONTINUE
832       CONTINUE
        END IF
C
      ENDIF
C
C  SCALE STANDARD DEVIATIONS, WHICH ARE NOT GIVEN IN % REL.ERROR
C  1/XMCP IS INCLUDED IN ZVOLIN,ZW,ZWW,... FOR TALLY AVERAGING
C  THEREFORE IT MUST BE MULTIPLIED HERE BECAUSE ONLY FLUX SCALING
C
      IF (XMCP(ISTRA).LE.1.D0) GOTO 950
C
      CALL SCALE_DEVIATION(ISTRA, ZWW, ZW, ZVOLNT, ZVOLWT,
     .                     ZVOLIN, ZVOLIW, SCLTAL, N1MX)
C
950   CONTINUE
C
C  CALL INTERFACE TO OTHER CODES TO RETURN DATA. STRATUM ISTRA
C
c slmod begin 
      IF (.TRUE..OR.NMODE.GT.0) THEN
c
c      IF (NMODE.GT.0) THEN
c slmode end
        IESTR=ISTRA
        ISTRAA=ISTRA
        ISTRAE=ISTRA
c slmod begin
        CALL IF3COP(ISTRAA,ISTRAE,NEW_ITER,IPANU)
c
c        CALL IF3COP(ISTRAA,ISTRAE,NEW_ITER)
c slmod end
        NEW_ITER=1
      ENDIF
C
C  WRITE RESULTS FOR THIS STRATUM ON TEMP. FILE
C
cpara  hier muss fuer den fall nprs > nstrai noch was getan werden!!!
      IESTR=ISTRA
      IF (NFILEN.EQ.1) THEN
        CALL WRSTRT(ISTRA,NSTRAI,NESTM1,NESTM2,NADSPC,
     .              ESTIMV,ESTIMS,ESTIML,
     .              NSDVI1,SDVI1,NSDVI2,SDVI2,
     .              NSDVC1,SIGMAC,NSDVC2,SGMCS,
     .              NSBGK,SIGMA_BGK,NBGV_STAT,SGMS_BGK,
     .              NSCOP,SIGMA_COP,NCPV_STAT,SGMS_COP,
     .              NSIGI_SPC,TRCFLE)
      ENDIF
C
C  UPDATE TALLIES FOR  "SUM OVER STRATA"
C
      IF (NSTRAI.EQ.1) GOTO 1111
C
      CALL SUMOSTRA (ISTRA)
C
C
      IF (NSMSTRA == 1) THEN
        do idv=1,nidv
          smestv(idv,1:nrtal) = smestv(idv,1:nrtal) +
     .                          estimv(idv,1:nrtal)
        end do
        SMESTS = SMESTS + ESTIMS
        DO ISPC=1,NADSPC
          SMESTL(ISPC)%PSPC%SPC = SMESTL(ISPC)%PSPC%SPC +
     .                            ESTIML(ISPC)%PSPC%SPC
          SMESTL(ISPC)%PSPC%SPCINT = SMESTL(ISPC)%PSPC%SPCINT +
     .                               ESTIML(ISPC)%PSPC%SPCINT
        END DO
      END IF
C
      DO 1170 ISDV=1,NSIGCI
        DO 1172 ICELL=1,NSBOX_TAL
          STVC(0,ISDV,ICELL)=STVC(0,ISDV,ICELL)+SIGMAC(0,ISDV,ICELL)
          STVC(1,ISDV,ICELL)=STVC(1,ISDV,ICELL)+SIGMAC(1,ISDV,ICELL)**2
          STVC(2,ISDV,ICELL)=STVC(2,ISDV,ICELL)+SIGMAC(2,ISDV,ICELL)**2
1172    CONTINUE
        STVCS(0,ISDV)=STVCS(0,ISDV)+SGMCS(0,ISDV)
        STVCS(1,ISDV)=STVCS(1,ISDV)+SGMCS(1,ISDV)**2
        STVCS(2,ISDV)=STVCS(2,ISDV)+SGMCS(2,ISDV)**2
1170  CONTINUE
C
1111  CONTINUE
        WRITE(iunout,*) 'CPU TIME USED UNTIL END OF STRATUM ISTRA '
        WRITE(iunout,*) 'ISTRA, CPU(S) ',ISTRA,SECOND_OWN()
        CALL LEER(2)
        endif  ! nprs > nsteff ...
      end if  ! nprs < nsteff ... or  nprs > nstef ...
1000  CONTINUE
C
C*** STRATA LOOP FINISHED *******************************************
C

      NPTS=NPTS_SAVE
C
      IF ((NPRS > 1) .AND. (NSMSTRA > 0)) THEN
        CALL COLSUM
      END IF

      IF ((MY_PE .EQ. 0) .AND. (NSTRAI.EQ.1)) THEN
C
C  WRITE RESULTS FOR SUM OVER STRATA ON TEMP. FILE
C  USE THE DATA FOR STRATUM NO. 1 FOR THIS, RATHER THEN DOING
C  A USELESS SUMMATION
C
C  INDICATE: DATA FOR ISTRA=1 ARE ON CESTIM, BUT WRITE AS SUM OVER
C  STRATA
        IESTR=1
        IF (NFILEN.EQ.1.OR.NFILEN.EQ.6) THEN
          CALL WRSTRT(0,NSTRAI,NESTM1,NESTM2,NADSPC,
     .              ESTIMV,ESTIMS,ESTIML,
     .              NSDVI1,SDVI1,NSDVI2,SDVI2,
     .              NSDVC1,SIGMAC,NSDVC2,SGMCS,
     .              NSBGK,SIGMA_BGK,NBGV_STAT,SGMS_BGK,
     .              NSCOP,SIGMA_COP,NCPV_STAT,SGMS_COP,
     .              NSIGI_SPC,TRCFLE)
        ENDIF
        GOTO 2000
      ENDIF
      IF (XMCP(0).LE.1) GOTO 2000

C SEQUENTIAL REGION

      IF(MY_PE .EQ. 0) THEN

C
C    STATISTICS, SUM OVER STRATA
C
      CALL STAT_SUMOSTRA
C
C  PUT SUM OVER STRATA BACK ONTO CESTIM, CSDVI
C
      IF (NSMSTRA == 1) THEN
        ESTIMV(1:NIDV,1:NRTAL) = SMESTV(1:NIDV,1:NRTAL)
        ESTIMS = SMESTS
        DO ISPC=1,NADSPC
          ESTIML(ISPC)%PSPC%SPC = SMESTL(ISPC)%PSPC%SPC
          ESTIML(ISPC)%PSPC%SPCINT = SMESTL(ISPC)%PSPC%SPCINT
          IF (NSIGI_SPC > 0) THEN
            ESTIML(ISPC)%PSPC%SGM = SMESTL(ISPC)%PSPC%SGM
            ESTIML(ISPC)%PSPC%SGMS = SMESTL(ISPC)%PSPC%STVS
          END IF
        END DO


        SIGMA  = STV
        SGMS   = STVS
        SIGMAW = STVW
        SGMWS  = STVWS

        IF (NSIGI_BGK.GT.0) THEN
          DO 1271 IB=1,NBGVI_STAT
            SGMS_BGK(IB)=STVS_BGK(IB)
            DO 1272 J=1,NSBOX_TAL
              SIGMA_BGK(IB,J)=STV_BGK(IB,J)
1272        CONTINUE
1271      CONTINUE
        ENDIF
        IF (NSIGI_COP.GT.0) THEN
          DO 1273 IC=1,NCPVI_STAT
            SGMS_COP(IC)=STVS_COP(IC)
            DO 1274 J=1,NSBOX_TAL
              SIGMA_COP(IC,J)=STV_COP(IC,J)
1274        CONTINUE
1273      CONTINUE
        ENDIF
C
C   ALGEBRAIC EXPRESSION IN TALLIES, SUM OVER STRATA  1271--1279
C
        IF (NALVI.GT.0.OR.NALSI.GT.0) THEN
C
          CALL ALGTAL
C
          DO 1571 IALV=1,NALVI
            CALL INTTAL (ALGV,VOLTAL,IALV,NALV,NSBOX_TAL,ALGVI(IALV,0),
     .                   NR1TAL,NP2TAL,NT3TAL,NBMLT)
1571      CONTINUE
C
          DO 1572 IALS=1,NALSI
            ALGSI(IALS,0)=0.
            DO 1573 J=1,NLIMPS
              ALGSI(IALS,0)=ALGSI(IALS,0)+ALGS(IALS,J)
1573        CONTINUE
1572      CONTINUE
C
        ENDIF
C
C  WRITE RESULTS FOR SUM OVER STRATA ON TEMP. FILE
C
        IESTR=0
        IF (NFILEN.EQ.1.OR.NFILEN.EQ.6) THEN
          CALL WRSTRT(0,NSTRAI,NESTM1,NESTM2,NADSPC,
     .                ESTIMV,ESTIMS,ESTIML,
     .                NSDVI1,SDVI1,NSDVI2,SDVI2,
     .                NSDVC1,SIGMAC,NSDVC2,SGMCS,
     .                NSBGK,SIGMA_BGK,NBGV_STAT,SGMS_BGK,
     .                NSCOP,SIGMA_COP,NCPV_STAT,SGMS_COP,
     .                NSIGI_SPC,TRCFLE)
        ENDIF
      ENDIF
C
      ENDIF
C
2000  CONTINUE

      CALL BROAD_IESTR(IESTR)

      IF(MY_PE .EQ. 0) THEN
C
C  SAVE OR RESTORE SOME DATA FOR "EIRENE RECALL OPTION NFILE.NE.0"
C  FROM FILE "FT11"
C  NOTE: RECORD IRC=3 MAY BE USED IN INTERFACING ROUTINE INFCOP
C
      IF (NFILEN.EQ.1.OR.NFILEN.EQ.6) THEN
        IF (TRCFLE) WRITE (iunout,*) 'WRITE DATA FOR RECALL OPTION '
        IRC=1
        WRITE (11,REC=IRC) LOGATM,LOGION,LOGMOL,LOGPLS,LOGPHOT
        IF (TRCFLE)   WRITE (iunout,*) 'WRITE 11  IRC= ',IRC
        IRC=2
        ALLOCATE (OUTAU(NOUTAU))
        CALL WRITE_COUTAU (OUTAU, IUNOUT)
        WRITE (11,REC=IRC) OUTAU
        DEALLOCATE (OUTAU)
        IF (TRCFLE)   WRITE (iunout,*) 'WRITE 11  IRC= ',IRC
      ELSEIF (NFILEN.EQ.2.OR.NFILEN.EQ.7) THEN
        IF (TRCFLE) WRITE (iunout,*) 'READ DATA FOR RECALL OPTION'
        IRC=1
        READ (11,REC=IRC) LOGATM,LOGION,LOGMOL,LOGPLS,LOGPHOT
        IF (TRCFLE)   WRITE (iunout,*) 'READ 11  IRC= ',IRC
        IRC=2
        ALLOCATE (OUTAU(NOUTAU))
        READ (11,REC=IRC) OUTAU
        CALL READ_COUTAU (OUTAU, IUNOUT)
        DEALLOCATE (OUTAU)
        IF (TRCFLE)   WRITE (iunout,*) 'READ 11  IRC= ',IRC
      ENDIF

C END SEQUENTIAL REGION
      ENDIF

      CALL MPI_BARRIER (MPI_COMM_WORLD,IER)

C
      RETURN
      END
C ===== SOURCE: scale_deviation.f
      SUBROUTINE SCALE_DEVIATION (ISTR, ZWW, ZW, ZVOLNT, ZVOLWT,
     .                     ZVOLIN, ZVOLIW, SCLTAL, N1DIM)

      USE PRECISION
      USE PARMMOD
      USE CSDVI
      USE CGRID
      USE COUTAU

      IMPLICIT NONE

      INTEGER, INTENT(IN) :: ISTR, N1DIM
      REAL(DP), INTENT(IN) :: ZWW, ZW, ZVOLNT, ZVOLWT
      REAL(DP), INTENT(IN) :: SCLTAL(N1DIM,*)
      REAL(DP), INTENT(IN) :: ZVOLIN(*), ZVOLIW(*)

      INTEGER :: ISDV, ITAL, ICELL, ISPZ

      DO 900 ISDV=1,NSIGCI
        DO 901 ITAL=1,NTALR
          IF (IIHC(1,ISDV).NE.ITAL) GOTO 901
          ISPZ=MAX(1,IGHC(1,ISDV))
          IF (SCLTAL(ISPZ,ITAL).EQ.1) THEN
            DO 902 ICELL=1,NSBOX_TAL
              SIGMAC(1,ISDV,ICELL)=SIGMAC(1,ISDV,ICELL)*ZVOLIN(ICELL)*
     .                             XMCP(ISTR)
              SIGMAC(0,ISDV,ICELL)=SIGMAC(0,ISDV,ICELL)*ZVOLIN(ICELL)*
     .                             XMCP(ISTR)
902         CONTINUE
            SGMCS(1,ISDV)=SGMCS(1,ISDV)*ZVOLNT*XMCP(ISTR)
            SGMCS(0,ISDV)=SGMCS(0,ISDV)*ZVOLNT*XMCP(ISTR)
          ELSEIF (SCLTAL(ISPZ,ITAL).EQ.2) THEN
            DO 903 ICELL=1,NSBOX_TAL
              SIGMAC(1,ISDV,ICELL)=SIGMAC(1,ISDV,ICELL)*ZW*
     .                             XMCP(ISTR)
              SIGMAC(0,ISDV,ICELL)=SIGMAC(0,ISDV,ICELL)*ZW*
     .                             XMCP(ISTR)
903         CONTINUE
            SGMCS(1,ISDV)=SGMCS(1,ISDV)*ZW*XMCP(ISTR)
            SGMCS(0,ISDV)=SGMCS(0,ISDV)*ZW*XMCP(ISTR)
          ELSEIF (SCLTAL(ISPZ,ITAL).EQ.3) THEN
            DO 904 ICELL=1,NSBOX_TAL
              SIGMAC(1,ISDV,ICELL)=SIGMAC(1,ISDV,ICELL)*ZVOLIW(ICELL)*
     .                             XMCP(ISTR)
              SIGMAC(0,ISDV,ICELL)=SIGMAC(0,ISDV,ICELL)*ZVOLIW(ICELL)*
     .                             XMCP(ISTR)
904         CONTINUE
            SGMCS(1,ISDV)=SGMCS(1,ISDV)*ZVOLWT*XMCP(ISTR)
            SGMCS(0,ISDV)=SGMCS(0,ISDV)*ZVOLWT*XMCP(ISTR)
          ELSEIF (SCLTAL(ISPZ,ITAL).EQ.4) THEN
            DO 905 ICELL=1,NSBOX_TAL
              SIGMAC(1,ISDV,ICELL)=SIGMAC(1,ISDV,ICELL)*ZWW*
     .                             XMCP(ISTR)
              SIGMAC(0,ISDV,ICELL)=SIGMAC(0,ISDV,ICELL)*ZWW*
     .                             XMCP(ISTR)
905         CONTINUE
            SGMCS(1,ISDV)=SGMCS(1,ISDV)*ZWW*XMCP(ISTR)
            SGMCS(0,ISDV)=SGMCS(0,ISDV)*ZWW*XMCP(ISTR)
          ENDIF
901     CONTINUE
C
        DO 911 ITAL=1,NTALR
          IF (IIHC(2,ISDV).NE.ITAL) GOTO 911
          ISPZ=MAX(1,IGHC(2,ISDV))
          IF (SCLTAL(ISPZ,ITAL).EQ.1) THEN
            DO 912 ICELL=1,NSBOX_TAL
              SIGMAC(2,ISDV,ICELL)=SIGMAC(2,ISDV,ICELL)*ZVOLIN(ICELL)*
     .                             XMCP(ISTR)
              SIGMAC(0,ISDV,ICELL)=SIGMAC(0,ISDV,ICELL)*ZVOLIN(ICELL)*
     .                             XMCP(ISTR)
912         CONTINUE
            SGMCS(2,ISDV)=SGMCS(2,ISDV)*ZVOLNT*XMCP(ISTR)
            SGMCS(0,ISDV)=SGMCS(0,ISDV)*ZVOLNT*XMCP(ISTR)
          ELSEIF (SCLTAL(ISPZ,ITAL).EQ.2) THEN
            DO 913 ICELL=1,NSBOX_TAL
              SIGMAC(2,ISDV,ICELL)=SIGMAC(2,ISDV,ICELL)*ZW*
     .                             XMCP(ISTR)
              SIGMAC(0,ISDV,ICELL)=SIGMAC(0,ISDV,ICELL)*ZW*
     .                             XMCP(ISTR)
913         CONTINUE
            SGMCS(2,ISDV)=SGMCS(2,ISDV)*ZW*XMCP(ISTR)
            SGMCS(0,ISDV)=SGMCS(0,ISDV)*ZW*XMCP(ISTR)
          ELSEIF (SCLTAL(ISPZ,ITAL).EQ.3) THEN
            DO 914 ICELL=1,NSBOX_TAL
              SIGMAC(2,ISDV,ICELL)=SIGMAC(2,ISDV,ICELL)*ZVOLIW(ICELL)*
     .                             XMCP(ISTR)
              SIGMAC(0,ISDV,ICELL)=SIGMAC(0,ISDV,ICELL)*ZVOLIW(ICELL)*
     .                             XMCP(ISTR)
914         CONTINUE
            SGMCS(2,ISDV)=SGMCS(2,ISDV)*ZVOLWT*XMCP(ISTR)
            SGMCS(0,ISDV)=SGMCS(0,ISDV)*ZVOLWT*XMCP(ISTR)
          ELSEIF (SCLTAL(ISPZ,ITAL).EQ.4) THEN
            DO 915 ICELL=1,NSBOX_TAL
              SIGMAC(2,ISDV,ICELL)=SIGMAC(2,ISDV,ICELL)*ZWW*
     .                             XMCP(ISTR)
              SIGMAC(0,ISDV,ICELL)=SIGMAC(0,ISDV,ICELL)*ZWW*
     .                             XMCP(ISTR)
915         CONTINUE
            SGMCS(2,ISDV)=SGMCS(2,ISDV)*ZWW*XMCP(ISTR)
            SGMCS(0,ISDV)=SGMCS(0,ISDV)*ZWW*XMCP(ISTR)
          ENDIF
911     CONTINUE
900   CONTINUE

      RETURN

      END SUBROUTINE SCALE_DEVIATION
C ===== SOURCE: scale_tallies.f
C  150205 :  double printout: fatm2,....taken out. use only getscl4, not getscl
C  6.7.05 :  call ph_integrate for photon-background tallies taken out.
C            no more additional photon background tallies active
C 15.12.05:  rescaling connected to spump surface tally

      SUBROUTINE SCALE_TALLIES (ISTRA)
C
C  RESCALE TRACKLENGTH ESTIMATED VOLUME AVERAGED TALLIES TO ENSURE
C  PERFECT PARTICLE BALANCE
C
      USE PRECISION
      USE PARMMOD
      USE COMUSR
      USE COMPRT, ONLY : IUNOUT
      USE CLOGAU
      USE COUTAU
      USE CGRID
      USE CCONA
      USE CESTIM

      IMPLICIT NONE

      INTEGER, INTENT(IN) :: ISTRA
      REAL(DP) :: FATM, FMOL, FION, FPHOT, FADD
      INTEGER :: IATM, IMOL, IION, IPLS, IPHOT, IADV, ICLV, IBGV, ICPV,
     .           J, ISPC
C
!     CALL GETSCL (ISTRA,FATM,FMOL,FION,FPHOT)
      CALL GETSCL4 (ISTRA,FATM,FMOL,FION,FPHOT)
C
      IF (.NOT.NLSCL) THEN

        CALL LEER(1)
        WRITE (iunout,*) 'NO RESCALING DONE (NLSCL=FALSE)'
        CALL LEER(2)

      ELSEIF (NLSCL) THEN

        FASCL(ISTRA) = FATM
        FMSCL(ISTRA) = FMOL
        FISCL(ISTRA) = FION
        FPHSCL(ISTRA)= FPHOT
C
C  CARRY OUT SCALING OF VOLUME AND SURFACE TALLIES, RESP.
C
C  ATOM TALLIES
C
        DO 2101 IATM=1,NATMI
          DO 111 J=1,NSBOX_TAL
            IF (LPDENA) PDENA(IATM,J)=PDENA(IATM,J)*FATM
            IF (LEDENA) EDENA(IATM,J)=EDENA(IATM,J)*FATM
            IF (LPAAT) PAAT(IATM,J)=PAAT(IATM,J)*FATM
            IF (LPMAT) PMAT(IATM,J)=PMAT(IATM,J)*FMOL
            IF (LPIAT) PIAT(IATM,J)=PIAT(IATM,J)*FION
            IF (LPPHAT) PPHAT(IATM,J)=PPHAT(IATM,J)*FPHOT
            IF (LPGENA) PGENA(IATM,J)=PGENA(IATM,J)*FATM
            IF (LEGENA) EGENA(IATM,J)=EGENA(IATM,J)*FATM
            IF (LVGENA) VGENA(IATM,J)=VGENA(IATM,J)*FATM
            IF (LVXDENA) VXDENA(IATM,J)=VXDENA(IATM,J)*FATM
            IF (LVYDENA) VYDENA(IATM,J)=VYDENA(IATM,J)*FATM
            IF (LVZDENA) VZDENA(IATM,J)=VZDENA(IATM,J)*FATM
111       CONTINUE
          DO 310 J=1,NLIMPS
            IF (LPOTAT) POTAT(IATM,J)=POTAT(IATM,J)*FATM
            IF (LPRFAAT) PRFAAT(IATM,J)=PRFAAT(IATM,J)*FATM
            IF (LPRFMAT) PRFMAT(IATM,J)=PRFMAT(IATM,J)*FMOL
            IF (LPRFIAT) PRFIAT(IATM,J)=PRFIAT(IATM,J)*FION
            IF (LPRFPHAT) PRFPHAT(IATM,J)=PRFPHAT(IATM,J)*FPHOT
            IF (LEOTAT) EOTAT(IATM,J)=EOTAT(IATM,J)*FATM
            IF (LERFAAT) ERFAAT(IATM,J)=ERFAAT(IATM,J)*FATM
            IF (LERFMAT) ERFMAT(IATM,J)=ERFMAT(IATM,J)*FMOL
            IF (LERFIAT) ERFIAT(IATM,J)=ERFIAT(IATM,J)*FION
            IF (LERFPHAT) ERFPHAT(IATM,J)=ERFPHAT(IATM,J)*FPHOT
            IF (LSPTAT) SPTAT(IATM,J)=SPTAT(IATM,J)*FATM
            IF (LSPUMP) SPUMP (NSPH+IATM,J)=SPUMP (NSPH+IATM,J)*FATM
310       CONTINUE

2101    CONTINUE
        DO 2111 IATM=0,NATMI
          PDENAI(IATM,ISTRA)=PDENAI(IATM,ISTRA)*FATM
          EDENAI(IATM,ISTRA)=EDENAI(IATM,ISTRA)*FATM
          PAATI(IATM,ISTRA)=PAATI(IATM,ISTRA)*FATM
          PMATI(IATM,ISTRA)=PMATI(IATM,ISTRA)*FMOL
          PIATI(IATM,ISTRA)=PIATI(IATM,ISTRA)*FION
          PPHATI(IATM,ISTRA)=PPHATI(IATM,ISTRA)*FPHOT
          POTATI(IATM,ISTRA)=POTATI(IATM,ISTRA)*FATM
          PRFAAI(IATM,ISTRA)=PRFAAI(IATM,ISTRA)*FATM
          PRFMAI(IATM,ISTRA)=PRFMAI(IATM,ISTRA)*FMOL
          PRFIAI(IATM,ISTRA)=PRFIAI(IATM,ISTRA)*FION
          PRFPHAI(IATM,ISTRA)=PRFPHAI(IATM,ISTRA)*FPHOT
          EOTATI(IATM,ISTRA)=EOTATI(IATM,ISTRA)*FATM
          ERFAAI(IATM,ISTRA)=ERFAAI(IATM,ISTRA)*FATM
          ERFMAI(IATM,ISTRA)=ERFMAI(IATM,ISTRA)*FMOL
          ERFIAI(IATM,ISTRA)=ERFIAI(IATM,ISTRA)*FION
          ERFPHAI(IATM,ISTRA)=ERFPHAI(IATM,ISTRA)*FPHOT
          SPTATI(IATM,ISTRA)=SPTATI(IATM,ISTRA)*FATM
          SPUMPI(NSPH+IATM,ISTRA)=SPUMPI(NSPH+IATM,ISTRA)*FATM
          PGENAI(IATM,ISTRA)=PGENAI(IATM,ISTRA)*FATM
          EGENAI(IATM,ISTRA)=EGENAI(IATM,ISTRA)*FATM
          VGENAI(IATM,ISTRA)=VGENAI(IATM,ISTRA)*FATM
          VXDENAI(IATM,ISTRA)=VXDENAI(IATM,ISTRA)*FATM
          VYDENAI(IATM,ISTRA)=VYDENAI(IATM,ISTRA)*FATM
          VZDENAI(IATM,ISTRA)=VZDENAI(IATM,ISTRA)*FATM
2111    CONTINUE
        DO 2112 J=1,NSBOX_TAL
          IF (LEAAT) EAAT(J)=EAAT(J)*FATM
          IF (LEMAT) EMAT(J)=EMAT(J)*FMOL
          IF (LEIAT) EIAT(J)=EIAT(J)*FION
          IF (LEPHAT) EPHAT(J)=EPHAT(J)*FPHOT
2112    CONTINUE
        EAATI(ISTRA)=EAATI(ISTRA)*FATM
        EMATI(ISTRA)=EMATI(ISTRA)*FMOL
        EIATI(ISTRA)=EIATI(ISTRA)*FION
        EPHATI(ISTRA)=EPHATI(ISTRA)*FPHOT
C
C  MOLECULE TALLIES
C
        DO 2115 IMOL=1,NMOLI
          DO 115 J=1,NSBOX_TAL
            IF (LPDENM) PDENM(IMOL,J)=PDENM(IMOL,J)*FMOL
            IF (LEDENM) EDENM(IMOL,J)=EDENM(IMOL,J)*FMOL
            IF (LPAML) PAML(IMOL,J)=PAML(IMOL,J)*FATM
            IF (LPMML) PMML(IMOL,J)=PMML(IMOL,J)*FMOL
            IF (LPIML) PIML(IMOL,J)=PIML(IMOL,J)*FION
            IF (LPPHML) PPHML(IMOL,J)=PPHML(IMOL,J)*FPHOT
            IF (LPGENM) PGENM(IMOL,J)=PGENM(IMOL,J)*FMOL
            IF (LEGENM) EGENM(IMOL,J)=EGENM(IMOL,J)*FMOL
            IF (LVGENM) VGENM(IMOL,J)=VGENM(IMOL,J)*FMOL
            IF (LVXDENM) VXDENM(IMOL,J)=VXDENM(IMOL,J)*FMOL
            IF (LVYDENM) VYDENM(IMOL,J)=VYDENM(IMOL,J)*FMOL
            IF (LVZDENM) VZDENM(IMOL,J)=VZDENM(IMOL,J)*FMOL
115       CONTINUE
          DO 315 J=1,NLIMPS
            IF (LPOTML) POTML(IMOL,J)=POTML(IMOL,J)*FMOL
            IF (LPRFAML) PRFAML(IMOL,J)=PRFAML(IMOL,J)*FATM
            IF (LPRFMML) PRFMML(IMOL,J)=PRFMML(IMOL,J)*FMOL
            IF (LPRFIML) PRFIML(IMOL,J)=PRFIML(IMOL,J)*FION
            IF (LPRFPHML) PRFPHML(IMOL,J)=PRFPHML(IMOL,J)*FPHOT
            IF (LEOTML) EOTML(IMOL,J)=EOTML(IMOL,J)*FMOL
            IF (LERFAML) ERFAML(IMOL,J)=ERFAML(IMOL,J)*FATM
            IF (LERFMML) ERFMML(IMOL,J)=ERFMML(IMOL,J)*FMOL
            IF (LERFIML) ERFIML(IMOL,J)=ERFIML(IMOL,J)*FION
            IF (LERFPHML) ERFPHML(IMOL,J)=ERFPHML(IMOL,J)*FPHOT
            IF (LSPTML) SPTML(IMOL,J)=SPTML(IMOL,J)*FMOL
            IF (LSPUMP) SPUMP (NSPA+IMOL,J)=SPUMP(NSPA+IMOL,J)*FMOL
315       CONTINUE
2115     CONTINUE

        DO 2116 IMOL=0,NMOLI
          PDENMI(IMOL,ISTRA)=PDENMI(IMOL,ISTRA)*FMOL
          EDENMI(IMOL,ISTRA)=EDENMI(IMOL,ISTRA)*FMOL
          PAMLI(IMOL,ISTRA)=PAMLI(IMOL,ISTRA)*FATM
          PMMLI(IMOL,ISTRA)=PMMLI(IMOL,ISTRA)*FMOL
          PIMLI(IMOL,ISTRA)=PIMLI(IMOL,ISTRA)*FION
          PPHMLI(IMOL,ISTRA)=PPHMLI(IMOL,ISTRA)*FPHOT
          POTMLI(IMOL,ISTRA)=POTMLI(IMOL,ISTRA)*FMOL
          PRFAMI(IMOL,ISTRA)=PRFAMI(IMOL,ISTRA)*FATM
          PRFMMI(IMOL,ISTRA)=PRFMMI(IMOL,ISTRA)*FMOL
          PRFIMI(IMOL,ISTRA)=PRFIMI(IMOL,ISTRA)*FION
          PRFPHMI(IMOL,ISTRA)=PRFPHMI(IMOL,ISTRA)*FPHOT
          EOTMLI(IMOL,ISTRA)=EOTMLI(IMOL,ISTRA)*FMOL
          ERFAMI(IMOL,ISTRA)=ERFAMI(IMOL,ISTRA)*FATM
          ERFMMI(IMOL,ISTRA)=ERFMMI(IMOL,ISTRA)*FMOL
          ERFIMI(IMOL,ISTRA)=ERFIMI(IMOL,ISTRA)*FION
          ERFPHMI(IMOL,ISTRA)=ERFPHMI(IMOL,ISTRA)*FPHOT
          SPTMLI(IMOL,ISTRA)=SPTMLI(IMOL,ISTRA)*FMOL
          SPUMPI(NSPA+IMOL,ISTRA)=SPUMPI(NSPA+IMOL,ISTRA)*FMOL
          PGENMI(IMOL,ISTRA)=PGENMI(IMOL,ISTRA)*FMOL
          EGENMI(IMOL,ISTRA)=EGENMI(IMOL,ISTRA)*FMOL
          VGENMI(IMOL,ISTRA)=VGENMI(IMOL,ISTRA)*FMOL
          VXDENMI(IMOL,ISTRA)=VXDENMI(IMOL,ISTRA)*FMOL
          VYDENMI(IMOL,ISTRA)=VYDENMI(IMOL,ISTRA)*FMOL
          VZDENMI(IMOL,ISTRA)=VZDENMI(IMOL,ISTRA)*FMOL
2116    CONTINUE

        DO 2117 J=1,NSBOX_TAL
          IF (LEAML) EAML(J)=EAML(J)*FATM
          IF (LEMML) EMML(J)=EMML(J)*FMOL
          IF (LEIML) EIML(J)=EIML(J)*FION
          IF (LEPHML) EPHML(J)=EPHML(J)*FPHOT
2117    CONTINUE
        EAMLI(ISTRA)=EAMLI(ISTRA)*FATM
        EMMLI(ISTRA)=EMMLI(ISTRA)*FMOL
        EIMLI(ISTRA)=EIMLI(ISTRA)*FION
        EPHMLI(ISTRA)=EPHMLI(ISTRA)*FPHOT
C
C  TEST ION TALLIES
C
        DO 420 IION=1,NIONI
          DO 421 J=1,NSBOX_TAL
            IF (LPDENI) PDENI(IION,J)=PDENI(IION,J)*FION
            IF (LEDENI) EDENI(IION,J)=EDENI(IION,J)*FION
            IF (LPAIO) PAIO(IION,J)=PAIO(IION,J)*FATM
            IF (LPMIO) PMIO(IION,J)=PMIO(IION,J)*FMOL
            IF (LPIIO) PIIO(IION,J)=PIIO(IION,J)*FION
            IF (LPPHIO) PPHIO(IION,J)=PPHIO(IION,J)*FPHOT
            IF (LPGENI) PGENI(IION,J)=PGENI(IION,J)*FION
            IF (LEGENI) EGENI(IION,J)=EGENI(IION,J)*FION
            IF (LVGENI) VGENI(IION,J)=VGENI(IION,J)*FION
            IF (LVXDENI) VXDENI(IION,J)=VXDENI(IION,J)*FION
            IF (LVYDENI) VYDENI(IION,J)=VYDENI(IION,J)*FION
            IF (LVZDENI) VZDENI(IION,J)=VZDENI(IION,J)*FION
421       CONTINUE
          DO 422 J=1,NLIMPS
            IF (LPOTIO) POTIO(IION,J)=POTIO(IION,J)*FION
            IF (LPRFAIO) PRFAIO(IION,J)=PRFAIO(IION,J)*FATM
            IF (LPRFMIO) PRFMIO(IION,J)=PRFMIO(IION,J)*FMOL
            IF (LPRFIIO) PRFIIO(IION,J)=PRFIIO(IION,J)*FION
            IF (LPRFPHIO) PRFPHIO(IION,J)=PRFPHIO(IION,J)*FPHOT
            IF (LEOTIO) EOTIO(IION,J)=EOTIO(IION,J)*FION
            IF (LERFAIO) ERFAIO(IION,J)=ERFAIO(IION,J)*FATM
            IF (LERFMIO) ERFMIO(IION,J)=ERFMIO(IION,J)*FMOL
            IF (LERFIIO) ERFIIO(IION,J)=ERFIIO(IION,J)*FION
            IF (LERFPHIO) ERFPHIO(IION,J)=ERFPHIO(IION,J)*FPHOT
            IF (LSPTIO) SPTIO(IION,J)=SPTIO(IION,J)*FION
            IF (LSPUMP) SPUMP(NSPAM+IION,J)=SPUMP(NSPAM+IION,J)*FION
422       CONTINUE
420     CONTINUE

        DO 431 IION=0,NIONI
          PDENII(IION,ISTRA)=PDENII(IION,ISTRA)*FION
          EDENII(IION,ISTRA)=EDENII(IION,ISTRA)*FION
          PAIOI(IION,ISTRA)=PAIOI(IION,ISTRA)*FATM
          PMIOI(IION,ISTRA)=PMIOI(IION,ISTRA)*FMOL
          PIIOI(IION,ISTRA)=PIIOI(IION,ISTRA)*FION
          PPHIOI(IION,ISTRA)=PPHIOI(IION,ISTRA)*FPHOT
          POTIOI(IION,ISTRA)=POTIOI(IION,ISTRA)*FION
          PRFAII(IION,ISTRA)=PRFAII(IION,ISTRA)*FATM
          PRFMII(IION,ISTRA)=PRFMII(IION,ISTRA)*FMOL
          PRFIII(IION,ISTRA)=PRFIII(IION,ISTRA)*FION
          PRFPHII(IION,ISTRA)=PRFPHII(IION,ISTRA)*FPHOT
          EOTIOI(IION,ISTRA)=EOTIOI(IION,ISTRA)*FION
          ERFAII(IION,ISTRA)=ERFAII(IION,ISTRA)*FATM
          ERFMII(IION,ISTRA)=ERFMII(IION,ISTRA)*FMOL
          ERFIII(IION,ISTRA)=ERFIII(IION,ISTRA)*FION
          ERFPHII(IION,ISTRA)=ERFPHII(IION,ISTRA)*FPHOT
          SPTIOI(IION,ISTRA)=SPTIOI(IION,ISTRA)*FION
          SPUMPI(NSPAM+IION,ISTRA)=SPUMPI(NSPAM+IION,ISTRA)*FION
          PGENII(IION,ISTRA)=PGENII(IION,ISTRA)*FION
          EGENII(IION,ISTRA)=EGENII(IION,ISTRA)*FION
          VGENII(IION,ISTRA)=VGENII(IION,ISTRA)*FION
          VXDENII(IION,ISTRA)=VXDENII(IION,ISTRA)*FION
          VYDENII(IION,ISTRA)=VYDENII(IION,ISTRA)*FION
          VZDENII(IION,ISTRA)=VZDENII(IION,ISTRA)*FION
431     CONTINUE
        DO 432 J=1,NSBOX_TAL
          IF (LEAIO) EAIO(J)=EAIO(J)*FATM
          IF (LEMIO) EMIO(J)=EMIO(J)*FMOL
          IF (LEIIO) EIIO(J)=EIIO(J)*FION
          IF (LEPHIO) EPHIO(J)=EPHIO(J)*FPHOT
432     CONTINUE
        EAIOI(ISTRA)=EAIOI(ISTRA)*FATM
        EMIOI(ISTRA)=EMIOI(ISTRA)*FMOL
        EIIOI(ISTRA)=EIIOI(ISTRA)*FION
        EPHIOI(ISTRA)=EPHIOI(ISTRA)*FPHOT
C
C  PHOTON TALLIES
C
        DO IPHOT=1,NPHOTI
          DO J=1,NSBOX_TAL
            IF (LPDENPH) PDENPH(IPHOT,J)=PDENPH(IPHOT,J)*FPHOT
            IF (LEDENPH) EDENPH(IPHOT,J)=EDENPH(IPHOT,J)*FPHOT
            IF (LPAPHT)  PAPHT (IPHOT,J)=PAPHT (IPHOT,J)*FATM
            IF (LPMPHT)  PMPHT (IPHOT,J)=PMPHT (IPHOT,J)*FMOL
            IF (LPIPHT)  PIPHT (IPHOT,J)=PIPHT (IPHOT,J)*FION
            IF (LPPHPHT) PPHPHT(IPHOT,J)=PPHPHT(IPHOT,J)*FPHOT
            IF (LPGENPH) PGENPH(IPHOT,J)=PGENPH(IPHOT,J)*FPHOT
            IF (LEGENPH) EGENPH(IPHOT,J)=EGENPH(IPHOT,J)*FPHOT
            IF (LVGENPH) VGENPH(IPHOT,J)=VGENPH(IPHOT,J)*FPHOT
            IF (LVXDENPH) VXDENPH(IPHOT,J)=VXDENPH(IPHOT,J)*FPHOT
            IF (LVYDENPH) VYDENPH(IPHOT,J)=VYDENPH(IPHOT,J)*FPHOT
            IF (LVZDENPH) VZDENPH(IPHOT,J)=VZDENPH(IPHOT,J)*FPHOT
          END DO
          DO J=1,NLIMPS
            IF (LPOTPHT)  POTPHT (IPHOT,J)=POTPHT (IPHOT,J)*FPHOT
            IF (LPRFAPHT) PRFAPHT(IPHOT,J)=PRFAPHT(IPHOT,J)*FATM
            IF (LPRFMPHT) PRFMPHT(IPHOT,J)=PRFMPHT(IPHOT,J)*FMOL
            IF (LPRFIPHT) PRFIPHT(IPHOT,J)=PRFIPHT(IPHOT,J)*FION
            IF (LPRFPHPHT) PRFPHPHT(IPHOT,J)=PRFPHPHT(IPHOT,J)*FPHOT
            IF (LPRFPPHT) PRFPPHT(IPHOT,J)=PRFPPHT(IPHOT,J)*FPHOT
            IF (LEOTPHT) EOTPHT (IPHOT,J)=EOTPHT (IPHOT,J)*FPHOT
            IF (LERFAPHT) ERFAPHT(IPHOT,J)=ERFAPHT(IPHOT,J)*FATM
            IF (LERFMPHT) ERFMPHT(IPHOT,J)=ERFMPHT(IPHOT,J)*FMOL
            IF (LERFIPHT) ERFIPHT(IPHOT,J)=ERFIPHT(IPHOT,J)*FION
            IF (LERFPHPHT) ERFPHPHT(IPHOT,J)=ERFPHPHT(IPHOT,J)*FPHOT
            IF (LERFPPHT) ERFPPHT(IPHOT,J)=ERFPPHT(IPHOT,J)*FPHOT
            IF (LSPTPHT) SPTPHT (IPHOT,J)=SPTPHT (IPHOT,J)*FPHOT
            IF (LSPUMP) SPUMP (IPHOT,J)=SPUMP (IPHOT,J)*FPHOT
          END DO
        END DO

        DO IPHOT=0,NPHOTI
          PDENPHI(IPHOT,ISTRA)=PDENPHI(IPHOT,ISTRA)*FPHOT
          EDENPHI(IPHOT,ISTRA)=EDENPHI(IPHOT,ISTRA)*FPHOT
          PAPHTI (IPHOT,ISTRA)=PAPHTI (IPHOT,ISTRA)*FATM
          PMPHTI (IPHOT,ISTRA)=PMPHTI (IPHOT,ISTRA)*FMOL
          PIPHTI (IPHOT,ISTRA)=PIPHTI (IPHOT,ISTRA)*FION
          PPHPHTI(IPHOT,ISTRA)=PPHPHTI(IPHOT,ISTRA)*FPHOT
          POTPHTI(IPHOT,ISTRA)=POTPHTI(IPHOT,ISTRA)*FPHOT
          PRFAPHTI(IPHOT,ISTRA)=PRFAPHTI(IPHOT,ISTRA)*FATM
          PRFMPHTI(IPHOT,ISTRA)=PRFMPHTI(IPHOT,ISTRA)*FMOL
          PRFIPHTI(IPHOT,ISTRA)=PRFIPHTI(IPHOT,ISTRA)*FION
          PRFPHPHTI(IPHOT,ISTRA)=PRFPHPHTI(IPHOT,ISTRA)*FPHOT
          EOTPHTI(IPHOT,ISTRA)=EOTPHTI(IPHOT,ISTRA)*FPHOT
          ERFAPHTI(IPHOT,ISTRA)=ERFAPHTI(IPHOT,ISTRA)*FATM
          ERFMPHTI(IPHOT,ISTRA)=ERFMPHTI(IPHOT,ISTRA)*FMOL
          ERFIPHTI(IPHOT,ISTRA)=ERFIPHTI(IPHOT,ISTRA)*FION
          ERFPHPHTI(IPHOT,ISTRA)=ERFPHPHTI(IPHOT,ISTRA)*FPHOT
          SPTPHTI(IPHOT,ISTRA)=SPTPHTI(IPHOT,ISTRA)*FPHOT
          SPUMPI(IPHOT,ISTRA)=SPUMPI(IPHOT,ISTRA)*FPHOT
          PGENPHI(IPHOT,ISTRA)=PGENPHI(IPHOT,ISTRA)*FPHOT
          EGENPHI(IPHOT,ISTRA)=EGENPHI(IPHOT,ISTRA)*FPHOT
          VGENPHI(IPHOT,ISTRA)=VGENPHI(IPHOT,ISTRA)*FPHOT
          VXDENPHI(IPHOT,ISTRA)=VXDENPHI(IPHOT,ISTRA)*FPHOT
          VYDENPHI(IPHOT,ISTRA)=VYDENPHI(IPHOT,ISTRA)*FPHOT
          VZDENPHI(IPHOT,ISTRA)=VZDENPHI(IPHOT,ISTRA)*FPHOT
        END DO
        DO J=1,NSBOX_TAL
          IF (LEAPHT) EAPHT(J)=EAPHT(J)*FATM
          IF (LEMPHT) EMPHT(J)=EMPHT(J)*FMOL
          IF (LEIPHT) EIPHT(J)=EIPHT(J)*FION
          IF (LEPHPHT) EPHPHT(J)=EPHPHT(J)*FPHOT
        END DO
        EAPHTI(ISTRA)=EAPHTI(ISTRA)*FATM
        EMPHTI(ISTRA)=EMPHTI(ISTRA)*FMOL
        EIPHTI(ISTRA)=EIPHTI(ISTRA)*FION
        EPHPHTI(ISTRA)=EPHPHTI(ISTRA)*FPHOT

csw integrate/scale internal photon tallies
cdr     IF (NPHOTI > 0)
cdr  .    CALL PH_INTEGRATE(ISTRA,FLXFAC(ISTRA)/ELCHA,
cdr  .                    fphot,fatm,fmol,fion)
C
C  ADDITIONAL TRACKLENGTH ESTIMATED TALLIES
C
        IF (LADDV) THEN
          DO 423 IADV=1,NADVI
            IF (IADRC(IADV).EQ.0) THEN
              FADD=FPHOT
            ELSEIF (IADRC(IADV).EQ.1) THEN
              FADD=FATM
            ELSEIF (IADRC(IADV).EQ.2) THEN
              FADD=FMOL
            ELSEIF (IADRC(IADV).EQ.3) THEN
              FADD=FION
            ELSE
              GOTO 423
            ENDIF
            DO 424 J=1,NSBOX_TAL
              ADDV(IADV,J)=ADDV(IADV,J)*FADD
424         CONTINUE
            ADDVI(IADV,ISTRA)=ADDVI(IADV,ISTRA)*FADD
423       CONTINUE
        END IF
C
C  ADDITIONAL COLLISION ESTIMATED TALLIES
C
        IF (LCOLV) THEN
          DO 426 ICLV=1,NCLVI
            IF (ICLRC(ICLV).EQ.0) THEN
              FADD=FPHOT
            ELSEIF (ICLRC(ICLV).EQ.1) THEN
              FADD=FATM
            ELSEIF (ICLRC(ICLV).EQ.2) THEN
              FADD=FMOL
            ELSEIF (ICLRC(ICLV).EQ.3) THEN
              FADD=FION
            ELSE
              GOTO 426
            ENDIF
            DO 427 J=1,NSBOX_TAL
              COLV(ICLV,J)=COLV(ICLV,J)*FADD
427         CONTINUE
            COLVI(ICLV,ISTRA)=COLVI(ICLV,ISTRA)*FADD
426       CONTINUE
        END IF
C
C  SNAPSHOT TALLIES
C
C  TO BE WRITTEN
C
C  TALLIES FOR COUPLING TO FLUID PLASMA CODE
C
        IF (LCOPV) THEN
          DO 435 ICPV=1,NCPVI
            IF (ICPRC(ICPV).EQ.1) THEN
              FADD=FATM
            ELSEIF (ICPRC(ICPV).EQ.2) THEN
              FADD=FMOL
            ELSEIF (ICPRC(ICPV).EQ.3) THEN
              FADD=FION
            ELSEIF (ICPRC(ICPV).EQ.0) THEN
              FADD=FPHOT
            ELSE
              GOTO 435
            ENDIF
            DO 436 J=1,NSBOX_TAL
              COPV(ICPV,J)=COPV(ICPV,J)*FADD
436         CONTINUE
            COPVI(ICPV,ISTRA)=COPVI(ICPV,ISTRA)*FADD
435       CONTINUE
        END IF
C
C  TALLIES FOR BGK SELF COLLISION ITERATIONS
C
        IF (LBGKV) THEN
          DO 437 IBGV=1,NBGVI
            IF (IBGRC(IBGV).EQ.1) THEN
              FADD=FATM
            ELSEIF (IBGRC(IBGV).EQ.2) THEN
              FADD=FMOL
            ELSEIF (IBGRC(IBGV).EQ.3) THEN
              FADD=FION
            ELSEIF (IBGRC(IBGV).EQ.0) THEN
              FADD=FPHOT
            ELSE
              GOTO 437
            ENDIF
            DO 438 J=1,NSBOX_TAL
              BGKV(IBGV,J)=BGKV(IBGV,J)*FADD
438         CONTINUE
            BGKVI(IBGV,ISTRA)=BGKVI(IBGV,ISTRA)*FADD
437       CONTINUE
        END IF
C
C  BULK ION TALLIES
C
        DO IPLS=1,NPLSI
          DO J=1,NSBOX_TAL
            IF (LPAPL) PAPL(IPLS,J)=PAPL(IPLS,J)*FATM
            IF (LPMPL) PMPL(IPLS,J)=PMPL(IPLS,J)*FMOL
            IF (LPIPL) PIPL(IPLS,J)=PIPL(IPLS,J)*FION
            IF (LPPHPL) PPHPL(IPLS,J)=PPHPL(IPLS,J)*FPHOT
            IF (LMAPL) MAPL(IPLS,J)=MAPL(IPLS,J)*FATM
            IF (LMMPL) MMPL(IPLS,J)=MMPL(IPLS,J)*FMOL
            IF (LMIPL) MIPL(IPLS,J)=MIPL(IPLS,J)*FION
            IF (LMPHPL) MPHPL(IPLS,J)=MPHPL(IPLS,J)*FPHOT
          END DO
        END DO
        DO IPLS=0,NPLSI
          PAPLI(IPLS,ISTRA)=PAPLI(IPLS,ISTRA)*FATM
          PMPLI(IPLS,ISTRA)=PMPLI(IPLS,ISTRA)*FMOL
          PIPLI(IPLS,ISTRA)=PIPLI(IPLS,ISTRA)*FION
          PPHPLI(IPLS,ISTRA)=PPHPLI(IPLS,ISTRA)*FPHOT
          MAPLI(IPLS,ISTRA)=MAPLI(IPLS,ISTRA)*FATM
          MMPLI(IPLS,ISTRA)=MMPLI(IPLS,ISTRA)*FMOL
          MIPLI(IPLS,ISTRA)=MIPLI(IPLS,ISTRA)*FION
          MPHPLI(IPLS,ISTRA)=MPHPLI(IPLS,ISTRA)*FPHOT
        END DO
        DO 449 J=1,NSBOX_TAL
          IF (LEAPL) EAPL(J)=EAPL(J)*FATM
          IF (LEMPL) EMPL(J)=EMPL(J)*FMOL
          IF (LEIPL) EIPL(J)=EIPL(J)*FION
          IF (LEPHPL) EPHPL(J)=EPHPL(J)*FPHOT
449     CONTINUE
        EAPLI(ISTRA)=EAPLI(ISTRA)*FATM
        EMPLI(ISTRA)=EMPLI(ISTRA)*FMOL
        EIPLI(ISTRA)=EIPLI(ISTRA)*FION
        EPHPLI(ISTRA)=EPHPLI(ISTRA)*FPHOT
C
C  ELECTRON TALLIES
C
        DO 551 J=1,NSBOX_TAL
          IF (LPAEL) PAEL(J)=PAEL(J)*FATM
          IF (LPMEL) PMEL(J)=PMEL(J)*FMOL
          IF (LPIEL) PIEL(J)=PIEL(J)*FION
          IF (LPPHEL) PPHEL(J)=PPHEL(J)*FPHOT
551     CONTINUE
        PAELI(ISTRA)=PAELI(ISTRA)*FATM
        PMELI(ISTRA)=PMELI(ISTRA)*FMOL
        PIELI(ISTRA)=PIELI(ISTRA)*FION
        PPHELI(ISTRA)=PPHELI(ISTRA)*FPHOT
        DO 552 J=1,NSBOX_TAL
          IF (LEAEL) EAEL(J)=EAEL(J)*FATM
          IF (LEMEL) EMEL(J)=EMEL(J)*FMOL
          IF (LEIEL) EIEL(J)=EIEL(J)*FION
          IF (LEPHEL) EPHEL(J)=EPHEL(J)*FPHOT
552     CONTINUE
        EAELI(ISTRA)=EAELI(ISTRA)*FATM
        EMELI(ISTRA)=EMELI(ISTRA)*FMOL
        EIELI(ISTRA)=EIELI(ISTRA)*FION
        EPHELI(ISTRA)=EPHELI(ISTRA)*FPHOT

        DO ISPC=1,NADSPC
          SELECT CASE (ESTIML(ISPC)%PSPC%IPRTYP)
          CASE (0)
            FADD = FPHOT
          CASE (1)
            FADD = FATM
          CASE (2)
            FADD = FMOL
          CASE (3)
            FADD = FION
          CASE DEFAULT
            FADD = 1._DP
          END SELECT
          ESTIML(ISPC)%PSPC%SPC = ESTIML(ISPC)%PSPC%SPC * FADD
          ESTIML(ISPC)%PSPC%SPCINT = ESTIML(ISPC)%PSPC%SPCINT * FADD
        END DO

C
        CALL LEER(1)
        WRITE (iunout,*) ('RESCALING OF TRACKLENGTH TALLIES COMPLETED')
        WRITE (iunout,*) ('RESCALING FACTORS:                        ')
        CALL MASR4 ('FATM,FMOL,FION,FPHOT            ',
     .               FATM, FMOL, FION, FPHOT)
!       CALL MASR4 ('FATM2,FMOL2,FION2,FPHOT2        ',
!    .               FATM2, FMOL2, FION2, FPHOT2)
        CALL LEER(2)
C
      ENDIF

      RETURN
      END SUBROUTINE SCALE_TALLIES
C ===== SOURCE: scal_surf_tallies.f
      SUBROUTINE SCAL_SURF_TALLIES (ISTR)

      USE PRECISION
      USE PARMMOD
      USE CESTIM
      USE COUTAU

      IMPLICIT NONE

      INTEGER, INTENT(IN) :: ISTR
      INTEGER :: IATM, IMOL, IION, IPHOT, IPLS, ISPC

      ESTIMS=ESTIMS*FLXFAC(ISTR)
C
      ETOTA(ISTR)=ETOTA(ISTR)*FLXFAC(ISTR)
      ETOTM(ISTR)=ETOTM(ISTR)*FLXFAC(ISTR)
      ETOTI(ISTR)=ETOTI(ISTR)*FLXFAC(ISTR)
      ETOTP(ISTR)=ETOTP(ISTR)*FLXFAC(ISTR)
      ETOTPH(ISTR)=ETOTPH(ISTR)*FLXFAC(ISTR)
      PTRASH(ISTR)=PTRASH(ISTR)*FLXFAC(ISTR)
      ETRASH(ISTR)=ETRASH(ISTR)*FLXFAC(ISTR)
      DO 610 IATM=0,NATM
        WTOTA(IATM,ISTR)=WTOTA(IATM,ISTR)*FLXFAC(ISTR)
610   CONTINUE
      DO 615 IMOL=0,NMOL
        WTOTM(IMOL,ISTR)=WTOTM(IMOL,ISTR)*FLXFAC(ISTR)
615   CONTINUE
      DO 620 IION=0,NION
        EELFI(IION,ISTR)=EELFI(IION,ISTR)*FLXFAC(ISTR)
        WTOTI(IION,ISTR)=WTOTI(IION,ISTR)*FLXFAC(ISTR)
620   CONTINUE
      DO 622 IPHOT=0,NPHOT
        WTOTPH(IPHOT,ISTR)=WTOTPH(IPHOT,ISTR)*FLXFAC(ISTR)
 622  CONTINUE
      DO 625 IPLS=0,NPLS
        WTOTP(IPLS,ISTR)=WTOTP(IPLS,ISTR)*FLXFAC(ISTR)
625   CONTINUE
      WTOTE(ISTR)=WTOTE(ISTR)*FLXFAC(ISTR)

C   SCALE AND INTEGRATE SPECTRA

      DO ISPC=1,NADSPC
        IF (ESTIML(ISPC)%PSPC%ISRFCLL == 0) THEN
          ESTIML(ISPC)%PSPC%SPC = ESTIML(ISPC)%PSPC%SPC * FLXFAC(ISTR) *
     .                            ESTIML(ISPC)%PSPC%SPCDELI
          ESTIML(ISPC)%PSPC%SPCINT = SUM(ESTIML(ISPC)%PSPC%SPC*
     .                                   ESTIML(ISPC)%PSPC%SPCDEL)
        END IF  
      END DO

      RETURN

      END SUBROUTINE SCAL_SURF_TALLIES
C ===== SOURCE: scal_volav_tallies.f
      SUBROUTINE SCAL_VOLAV_TALLIES (ISTR, ZWW, ZW,
     .                               ZVOLIN, ZVOLIW, SCLTAL, N1DIM)

      USE PRECISION
      USE PARMMOD
      USE COMSOU
      USE COMUSR
      USE COMPRT, ONLY: IUNOUT
      USE CGRID
      USE COUTAU
      USE CESTIM
      USE CCONA
      USE CGEOM
      USE CSPEZ
      USE COMNNL

      IMPLICIT NONE

      INTEGER, INTENT(IN) :: ISTR, N1DIM
      REAL(DP), INTENT(IN) :: ZWW, ZW
      REAL(DP), INTENT(INOUT) :: SCLTAL(N1DIM,*)
      REAL(DP), INTENT(IN) :: ZVOLIN(*), ZVOLIW(*)

      REAL(DP) :: ZFAC
      INTEGER :: IATM, J, IMOL, IION, IPHOT, IPLS, IADV, ICLV,
     .           ISNV, ICPV, IBGV, ISPC, ICL
C
C
C*****VOLUME AVERAGED TALLIES  220 - 239
C
C  ATOMIC PARTICLE SPECIES LOOP FOR THE STRATUM ISTRA
C
      DO 220 IATM=1,NATMI
         IF (LOGATM(IATM,ISTR)) THEN
          DO 221 J=1,NSBOX_TAL
            IF (LPDENA) PDENA(IATM,J)=PDENA(IATM,J)*ZVOLIN(J)
            IF (LEDENA) EDENA(IATM,J)=EDENA(IATM,J)*ZVOLIN(J)
            IF (LPAAT)  PAAT(IATM,J) =PAAT(IATM,J) *ZVOLIW(J)
            IF (LPMAT)  PMAT(IATM,J) =PMAT(IATM,J) *ZVOLIW(J)
            IF (LPIAT)  PIAT(IATM,J) =PIAT(IATM,J) *ZVOLIW(J)
            IF (LPPHAT) PPHAT(IATM,J)=PPHAT(IATM,J)*ZVOLIW(J)
            IF (LPGENA) PGENA(IATM,J)=PGENA(IATM,J)*ZVOLIW(J)
            IF (LEGENA) EGENA(IATM,J)=EGENA(IATM,J)*ZVOLIW(J)
            IF (LVGENA) VGENA(IATM,J)=VGENA(IATM,J)*ZVOLIW(J)
            IF (LPPAT)  PPAT(IATM,J) =PPAT(IATM,J) *ZVOLIW(J)
            IF (LVXDENA) VXDENA(IATM,J)=VXDENA(IATM,J)*ZVOLIN(J)
            IF (LVYDENA) VYDENA(IATM,J)=VYDENA(IATM,J)*ZVOLIN(J)
            IF (LVZDENA) VZDENA(IATM,J)=VZDENA(IATM,J)*ZVOLIN(J)
221       CONTINUE
        ENDIF
        SCLTAL(IATM,1)=1
        SCLTAL(IATM,5)=1
        SCLTAL(IATM,10)=3
        SCLTAL(IATM,16)=3
        SCLTAL(IATM,22)=3
        SCLTAL(IATM,28)=3
        SCLTAL(IATM,63)=3
        SCLTAL(IATM,67)=3
        SCLTAL(IATM,71)=3
        SCLTAL(IATM,75)=3
        SCLTAL(IATM,85)=1
        SCLTAL(IATM,89)=1
        SCLTAL(IATM,93)=1
220   CONTINUE
C
C  MOLECULAR PARTICLE SPECIES LOOP FOR THE STRATUM ISTRA
C
      DO 222 IMOL=1,NMOLI
        IF (LOGMOL(IMOL,ISTR)) THEN
          DO 223 J=1,NSBOX_TAL
            IF (LPDENM) PDENM(IMOL,J)=PDENM(IMOL,J)*ZVOLIN(J)
            IF (LEDENM) EDENM(IMOL,J)=EDENM(IMOL,J)*ZVOLIN(J)
            IF (LPAML)  PAML(IMOL,J) =PAML(IMOL,J) *ZVOLIW(J)
            IF (LPMML)  PMML(IMOL,J) =PMML(IMOL,J) *ZVOLIW(J)
            IF (LPIML)  PIML(IMOL,J) =PIML(IMOL,J) *ZVOLIW(J)
            IF (LPPHML) PPHML(IMOL,J)=PPHML(IMOL,J)*ZVOLIW(J)
            IF (LPGENM) PGENM(IMOL,J)=PGENM(IMOL,J)*ZVOLIW(J)
            IF (LEGENM) EGENM(IMOL,J)=EGENM(IMOL,J)*ZVOLIW(J)
            IF (LVGENM) VGENM(IMOL,J)=VGENM(IMOL,J)*ZVOLIW(J)
            IF (LPPML)  PPML(IMOL,J) =PPML(IMOL,J) *ZVOLIW(J)
            IF (LVXDENM) VXDENM(IMOL,J)=VXDENM(IMOL,J)*ZVOLIN(J)
            IF (LVYDENM) VYDENM(IMOL,J)=VYDENM(IMOL,J)*ZVOLIN(J)
            IF (LVZDENM) VZDENM(IMOL,J)=VZDENM(IMOL,J)*ZVOLIN(J)
223       CONTINUE
        ENDIF
        SCLTAL(IMOL,2)=1
        SCLTAL(IMOL,6)=1
        SCLTAL(IMOL,11)=3
        SCLTAL(IMOL,17)=3
        SCLTAL(IMOL,23)=3
        SCLTAL(IMOL,29)=3
        SCLTAL(IMOL,64)=3
        SCLTAL(IMOL,68)=3
        SCLTAL(IMOL,72)=3
        SCLTAL(IMOL,76)=3
        SCLTAL(IMOL,86)=1
        SCLTAL(IMOL,90)=1
        SCLTAL(IMOL,94)=1
222   CONTINUE
C
C  TEST ION PARTICLE SPECIES LOOP FOR THE STRATUM ISTRA
C
      DO 225 IION=1,NIONI
        IF (LOGION(IION,ISTR)) THEN
          DO 226 J=1,NSBOX_TAL
            IF (LPDENI) PDENI(IION,J)=PDENI(IION,J)*ZVOLIN(J)
            IF (LEDENI) EDENI(IION,J)=EDENI(IION,J)*ZVOLIN(J)
            IF (LPAIO)  PAIO(IION,J) =PAIO(IION,J) *ZVOLIW(J)
            IF (LPMIO)  PMIO(IION,J) =PMIO(IION,J) *ZVOLIW(J)
            IF (LPIIO)  PIIO(IION,J) =PIIO(IION,J) *ZVOLIW(J)
            IF (LPPHIO) PPHIO(IION,J)=PPHIO(IION,J)*ZVOLIW(J)
            IF (LPGENI) PGENI(IION,J)=PGENI(IION,J)*ZVOLIW(J)
            IF (LEGENI) EGENI(IION,J)=EGENI(IION,J)*ZVOLIW(J)
            IF (LVGENI) VGENI(IION,J)=VGENI(IION,J)*ZVOLIW(J)
            IF (LPPIO)  PPIO(IION,J) =PPIO(IION,J) *ZVOLIW(J)
            IF (LVXDENI) VXDENI(IION,J)=VXDENI(IION,J)*ZVOLIN(J)
            IF (LVYDENI) VYDENI(IION,J)=VYDENI(IION,J)*ZVOLIN(J)
            IF (LVZDENI) VZDENI(IION,J)=VZDENI(IION,J)*ZVOLIN(J)
226       CONTINUE
        ENDIF
        SCLTAL(IION,3)=1
        SCLTAL(IION,7)=1
        SCLTAL(IION,12)=3
        SCLTAL(IION,18)=3
        SCLTAL(IION,24)=3
        SCLTAL(IION,30)=3
        SCLTAL(IION,65)=3
        SCLTAL(IION,69)=3
        SCLTAL(IION,73)=3
        SCLTAL(IION,77)=3
        SCLTAL(IION,87)=1
        SCLTAL(IION,91)=1
        SCLTAL(IION,95)=1
225   CONTINUE
C
C  PHOTON PARTICLE SPECIES LOOP FOR THE STRATUM ISTRA
C
      DO IPHOT=1,NPHOTI
        IF (LOGPHOT(IPHOT,ISTR)) THEN
          DO J=1,NSBOX_TAL
            IF (LPDENPH) PDENPH(IPHOT,J)=PDENPH(IPHOT,J)*ZVOLIN(J)
            IF (LEDENPH) EDENPH(IPHOT,J)=EDENPH(IPHOT,J)*ZVOLIN(J)
            IF (LPAPHT)  PAPHT(IPHOT,J) =PAPHT(IPHOT,J) *ZVOLIW(J)
            IF (LPMPHT)  PMPHT(IPHOT,J) =PMPHT(IPHOT,J) *ZVOLIW(J)
            IF (LPIPHT)  PIPHT(IPHOT,J) =PIPHT(IPHOT,J) *ZVOLIW(J)
            IF (LPPHPHT) PPHPHT(IPHOT,J)=PPHPHT(IPHOT,J)*ZVOLIW(J)
            IF (LPGENPH) PGENPH(IPHOT,J)=PGENPH(IPHOT,J)*ZVOLIW(J)
            IF (LEGENPH) EGENPH(IPHOT,J)=EGENPH(IPHOT,J)*ZVOLIW(J)
            IF (LVGENPH) VGENPH(IPHOT,J)=VGENPH(IPHOT,J)*ZVOLIW(J)
            IF (LPPPHT)  PPPHT(IPHOT,J) =PPPHT(IPHOT,J) *ZVOLIW(J)
            IF (LVXDENPH) VXDENPH(IPHOT,J)=VXDENPH(IPHOT,J)*ZVOLIN(J)
            IF (LVYDENPH) VYDENPH(IPHOT,J)=VYDENPH(IPHOT,J)*ZVOLIN(J)
            IF (LVZDENPH) VZDENPH(IPHOT,J)=VZDENPH(IPHOT,J)*ZVOLIN(J)
          END DO
        ENDIF
        SCLTAL(IPHOT,4)=1
        SCLTAL(IPHOT,8)=1
        SCLTAL(IPHOT,13)=3
        SCLTAL(IPHOT,19)=3
        SCLTAL(IPHOT,25)=3
        SCLTAL(IPHOT,31)=3
        SCLTAL(IPHOT,66)=3
        SCLTAL(IPHOT,70)=3
        SCLTAL(IPHOT,74)=3
        SCLTAL(IPHOT,78)=3
        SCLTAL(IPHOT,88)=1
        SCLTAL(IPHOT,92)=1
        SCLTAL(IPHOT,96)=1
      END DO
C
C  BULK ION PARTICLE SPECIES LOOP FOR THE STRATUM ISTRA
C
      DO 227 IPLS=1,NPLSI
        IF (LOGPLS(IPLS,ISTR)) THEN
          DO 228 J=1,NSBOX_TAL
            IF (LPAPL)  PAPL(IPLS,J) =PAPL(IPLS,J) *ZVOLIW(J)
            IF (LPMPL)  PMPL(IPLS,J) =PMPL(IPLS,J) *ZVOLIW(J)
            IF (LPIPL)  PIPL(IPLS,J) =PIPL(IPLS,J) *ZVOLIW(J)
            IF (LPPHPL) PPHPL(IPLS,J)=PPHPL(IPLS,J)*ZVOLIW(J)
            IF (LPPPL)  PPPL(IPLS,J) =PPPL(IPLS,J) *ZVOLIW(J)
            IF (LMAPL)  MAPL(IPLS,J) =MAPL(IPLS,J) *ZVOLIW(J)
            IF (LMMPL)  MMPL(IPLS,J) =MMPL(IPLS,J) *ZVOLIW(J)
            IF (LMIPL)  MIPL(IPLS,J) =MIPL(IPLS,J) *ZVOLIW(J)
            IF (LMPHPL) MPHPL(IPLS,J)=MPHPL(IPLS,J)*ZVOLIW(J)
228       CONTINUE
        SCLTAL(IPLS,14)=3
        SCLTAL(IPLS,20)=3
        SCLTAL(IPLS,26)=3
        SCLTAL(IPLS,32)=3
        SCLTAL(IPLS,32)=3
        SCLTAL(IPLS,79)=3
        SCLTAL(IPLS,97)=3
        SCLTAL(IPLS,98)=3
        SCLTAL(IPLS,99)=3
        SCLTAL(IPLS,100)=3
        ENDIF
227   CONTINUE
C
C  ADDITIONAL TRACKLENGTH ESTIMATED TALLIES FOR THE STRATUM ISTRA
C  TALLY NO. NTALA
C
      IF (LADDV) THEN
        DO 230 IADV=1,NADVI
          IF (IADVE(IADV).EQ.1) THEN
C  SCALE # PER VOLUME
            DO 231 J=1,NSBOX_TAL
              ADDV(IADV,J)=ADDV(IADV,J)*ZVOLIN(J)
231         CONTINUE
            SCLTAL(IADV,NTALA)=1
          ELSEIF (IADVE(IADV).EQ.2) THEN
C  SCALE # PER CELL
            DO 232 J=1,NSBOX_TAL
              ADDV(IADV,J)=ADDV(IADV,J)*ZW
232         CONTINUE
            SCLTAL(IADV,NTALA)=2
C  SCALE AMP/S PER VOLUME
          ELSEIF (IADVE(IADV).EQ.3) THEN
            DO 233 J=1,NSBOX_TAL
              ADDV(IADV,J)=ADDV(IADV,J)*ZVOLIW(J)
233         CONTINUE
            SCLTAL(IADV,NTALA)=3
C  SCALE AMP/S PER CELL
          ELSEIF (IADVE(IADV).EQ.4) THEN
            DO 234 J=1,NSBOX_TAL
              ADDV(IADV,J)=ADDV(IADV,J)*ZWW
234         CONTINUE
            SCLTAL(IADV,NTALA)=4
C         ELSE
C  DON'T SCALE AT ALL
            SCLTAL(IADV,NTALA)=0
          ENDIF
230     CONTINUE
      END IF
C
C  ADDITIONAL COLLISION ESTIMATED TALLIES FOR THE STRATUM ISTRA
C  TALLY NO. NTALC
C
      IF (LCOLV) THEN
        DO 235 ICLV=1,NCLVI
          IF (ICLVE(ICLV).EQ.1) THEN
C  SCALE # PER VOLUME
            DO 236 J=1,NSBOX_TAL
              COLV(ICLV,J)=COLV(ICLV,J)*ZVOLIN(J)
236         CONTINUE
            SCLTAL(ICLV,NTALC)=1
          ELSEIF (ICLVE(ICLV).EQ.2) THEN
C  SCALE # PER CELL
            DO 237 J=1,NSBOX_TAL
              COLV(ICLV,J)=COLV(ICLV,J)*ZW
237         CONTINUE
            SCLTAL(ICLV,NTALC)=2
          ELSEIF (ICLVE(ICLV).EQ.3) THEN
C  SCALE AMP/S PER VOLUME
            DO 238 J=1,NSBOX_TAL
              COLV(ICLV,J)=COLV(ICLV,J)*ZVOLIW(J)
238         CONTINUE
            SCLTAL(ICLV,NTALC)=3
          ELSEIF (ICLVE(ICLV).EQ.4) THEN
C  SCALE AMP/S PER CELL
            DO 239 J=1,NSBOX_TAL
              COLV(ICLV,J)=COLV(ICLV,J)*ZWW
239         CONTINUE
            SCLTAL(ICLV,NTALC)=4
C         ELSE
C  DON'T SCALE AT ALL
            SCLTAL(ICLV,NTALC)=0
          ENDIF
235     CONTINUE
      END IF
C
C  ADDITIONAL SNAPSHOT ESTIMATED TALLIES FOR THE STRATUM ISTRA
C  TALLY NO. NTALT, FIRST: SNAPV=SNAPV*DTIMV, THEN: SCALING
C
      IF (LSNAPV) THEN
        DO 245 ISNV=1,NSNVI
          IF (ISNVE(ISNV).EQ.1) THEN
C  SCALE # PER VOLUME
            DO 246 J=1,NSBOX_TAL
              SNAPV(ISNV,J)=SNAPV(ISNV,J)*DTIMV*ZVOLIN(J)
246         CONTINUE
            SCLTAL(ISNV,NTALT)=1
          ELSEIF (ISNVE(ISNV).EQ.2) THEN
C  SCALE # PER CELL
            DO 247 J=1,NSBOX_TAL
              SNAPV(ISNV,J)=SNAPV(ISNV,J)*DTIMV*ZW
247         CONTINUE
            SCLTAL(ISNV,NTALT)=2
          ELSEIF (ISNVE(ISNV).EQ.3) THEN
C  SCALE AMP/S PER VOLUME
            DO 248 J=1,NSBOX_TAL
              SNAPV(ISNV,J)=SNAPV(ISNV,J)*DTIMV*ZVOLIW(J)
248         CONTINUE
            SCLTAL(ISNV,NTALT)=3
          ELSEIF (ISNVE(ISNV).EQ.4) THEN
C  SCALE AMP/S PER CELL
            DO 249 J=1,NSBOX_TAL
              SNAPV(ISNV,J)=SNAPV(ISNV,J)*DTIMV*ZWW
249         CONTINUE
            SCLTAL(ISNV,NTALT)=4
C         ELSE
C  DON'T SCALE AT ALL
            DO J=1,NSBOX_TAL
              SNAPV(ISNV,J)=SNAPV(ISNV,J)*DTIMV
            ENDDO
            SCLTAL(ISNV,NTALT)=0
          ENDIF
245     CONTINUE
      END IF
C
C  TALLIES FOR FLUID CODE COUPLING FOR THE STRATUM ISTRA
C  TALLY NO. NTALM
C
      IF (LCOPV) THEN
        DO 255 ICPV=1,NCPVI
          IF (ICPVE(ICPV).EQ.1) THEN
C  SCALE # PER VOLUME
            DO 256 J=1,NSBOX_TAL
              COPV(ICPV,J)=COPV(ICPV,J)*ZVOLIN(J)
256         CONTINUE
            SCLTAL(ICPV,NTALM)=1
          ELSEIF (ICPVE(ICPV).EQ.2) THEN
C  SCALE # PER CELL
            DO 257 J=1,NSBOX_TAL
              COPV(ICPV,J)=COPV(ICPV,J)*ZW
257         CONTINUE
            SCLTAL(ICPV,NTALM)=2
          ELSEIF (ICPVE(ICPV).EQ.3) THEN
C  SCALE AMP/S PER VOLUME
            DO 258 J=1,NSBOX_TAL
              COPV(ICPV,J)=COPV(ICPV,J)*ZVOLIW(J)
258         CONTINUE
            SCLTAL(ICPV,NTALM)=3
          ELSEIF (ICPVE(ICPV).EQ.4) THEN
C  SCALE AMP/S PER CELL
            DO 259 J=1,NSBOX_TAL
              COPV(ICPV,J)=COPV(ICPV,J)*ZWW
259         CONTINUE
            SCLTAL(ICPV,NTALM)=4
C         ELSE
C  DON'T SCALE AT ALL
            SCLTAL(ICPV,NTALM)=0
          ENDIF
255     CONTINUE
      END IF
C
C  TALLIES FOR ITERATIVE MODE, E.G.: BGK OPTION. STRATUM ISTRA
C  TALLY NO. NTALB
C
      IF (LBGKV) THEN
        DO 265 IBGV=1,NBGVI
          IF (IBGVE(IBGV).EQ.1) THEN
C  SCALE # PER VOLUME
            DO 266 J=1,NSBOX_TAL
              BGKV(IBGV,J)=BGKV(IBGV,J)*ZVOLIN(J)
266         CONTINUE
            SCLTAL(IBGV,NTALB)=1
          ELSEIF (IBGVE(IBGV).EQ.2) THEN
C  SCALE # PER CELL
            DO 267 J=1,NSBOX_TAL
              BGKV(IBGV,J)=BGKV(IBGV,J)*ZW
267         CONTINUE
            SCLTAL(IBGV,NTALB)=2
          ELSEIF (IBGVE(IBGV).EQ.3) THEN
C  SCALE AMP/S PER VOLUME
            DO 268 J=1,NSBOX_TAL
              BGKV(IBGV,J)=BGKV(IBGV,J)*ZVOLIW(J)
268         CONTINUE
            SCLTAL(IBGV,NTALB)=3
          ELSEIF (IBGVE(IBGV).EQ.4) THEN
C  SCALE AMP/S PER CELL
            DO 269 J=1,NSBOX_TAL
              BGKV(IBGV,J)=BGKV(IBGV,J)*ZWW
269         CONTINUE
            SCLTAL(IBGV,NTALB)=4
C         ELSE
C  DON'T SCALE AT ALL
            SCLTAL(IBGV,NTALB)=0
          ENDIF
265     CONTINUE
      END IF
C
C  OTHER TALLIES ESTIMATED FROM HISTORIES
C
      DO 270 J=1,NSBOX_TAL
        IF (LPAEL)  PAEL(J) =PAEL(J) *ZVOLIW(J)
        IF (LEAEL)  EAEL(J) =EAEL(J) *ZVOLIW(J)
        IF (LEAAT)  EAAT(J) =EAAT(J) *ZVOLIW(J)
        IF (LEAML)  EAML(J) =EAML(J) *ZVOLIW(J)
        IF (LEAPL)  EAPL(J) =EAPL(J) *ZVOLIW(J)
        IF (LEAIO)  EAIO(J) =EAIO(J) *ZVOLIW(J)
        IF (LEAPHT) EAPHT(J)=EAPHT(J)*ZVOLIW(J)
C
        IF (LPMEL)  PMEL(J) =PMEL(J) *ZVOLIW(J)
        IF (LEMEL)  EMEL(J) =EMEL(J) *ZVOLIW(J)
        IF (LEMAT)  EMAT(J) =EMAT(J) *ZVOLIW(J)
        IF (LEMML)  EMML(J) =EMML(J) *ZVOLIW(J)
        IF (LEMIO)  EMIO(J) =EMIO(J) *ZVOLIW(J)
        IF (LEMPHT) EMPHT(J)=EMPHT(J)*ZVOLIW(J)
        IF (LEMPL)  EMPL(J) =EMPL(J) *ZVOLIW(J)
C
        IF (LPIEL)  PIEL(J) =PIEL(J) *ZVOLIW(J)
        IF (LEIEL)  EIEL(J) =EIEL(J) *ZVOLIW(J)
        IF (LEIAT)  EIAT(J) =EIAT(J) *ZVOLIW(J)
        IF (LEIML)  EIML(J) =EIML(J) *ZVOLIW(J)
        IF (LEIIO)  EIIO(J) =EIIO(J) *ZVOLIW(J)
        IF (LEIPHT) EIPHT(J)=EIPHT(J)*ZVOLIW(J)
        IF (LEIPL)  EIPL(J) =EIPL(J) *ZVOLIW(J)
C
        IF (LPPHEL)  PPHEL(J) =PPHEL(J) *ZVOLIW(J)
        IF (LEPHEL)  EPHEL(J) =EPHEL(J) *ZVOLIW(J)
        IF (LEPHAT)  EPHAT(J) =EPHAT(J) *ZVOLIW(J)
        IF (LEPHML)  EPHML(J) =EPHML(J) *ZVOLIW(J)
        IF (LEPHIO)  EPHIO(J) =EPHIO(J) *ZVOLIW(J)
        IF (LEPHPHT) EPHPHT(J)=EPHPHT(J)*ZVOLIW(J)
        IF (LEPHPL)  EPHPL(J) =EPHPL(J) *ZVOLIW(J)

        IF (LEPAT)  EPAT(J) =EPAT(J) *ZVOLIW(J)
        IF (LEPML)  EPML(J) =EPML(J) *ZVOLIW(J)
        IF (LEPIO)  EPIO(J) =EPIO(J) *ZVOLIW(J)
        IF (LEPPHT) EPPHT(J)=EPPHT(J)*ZVOLIW(J)
        IF (LEPPL)  EPPL(J) =EPPL(J) *ZVOLIW(J)
270   CONTINUE
      SCLTAL(1,9)=3
      SCLTAL(1,15)=3
      SCLTAL(1,21)=3
      SCLTAL(1,27)=3
      SCLTAL(1,33)=3
      SCLTAL(1,34)=3
      SCLTAL(1,35)=3
      SCLTAL(1,36)=3
      SCLTAL(1,37)=3
      SCLTAL(1,38)=3
      SCLTAL(1,39)=3
      SCLTAL(1,40)=3
      SCLTAL(1,41)=3
      SCLTAL(1,42)=3
      SCLTAL(1,43)=3
      SCLTAL(1,44)=3
      SCLTAL(1,45)=3
      SCLTAL(1,46)=3
      SCLTAL(1,47)=3
      SCLTAL(1,48)=3
      SCLTAL(1,49)=3
      SCLTAL(1,50)=3
      SCLTAL(1,51)=3
      SCLTAL(1,52)=3
      SCLTAL(1,53)=3
      SCLTAL(1,54)=3
      SCLTAL(1,55)=3
      SCLTAL(1,56)=3
      SCLTAL(1,80)=3
      SCLTAL(1,81)=3
      SCLTAL(1,82)=3
      SCLTAL(1,83)=3
      SCLTAL(1,84)=3


C   SCALE AND INTEGRATE SPECTRA

      DO ISPC=1,NADSPC
        IF (ESTIML(ISPC)%PSPC%ISRFCLL /= 0) THEN
          ICL = ESTIML(ISPC)%PSPC%ISPCSRF
          IF (ESTIML(ISPC)%PSPC%ISRFCLL == 1) THEN
!  scoring cell
            ZFAC = ZVOLIN(ICL)
          ELSE IF (ESTIML(ISPC)%PSPC%ISRFCLL == 2) THEN
!  geometry cell
            ZFAC = ZW / VOL(ICL)
          ELSE
            ZFAC = 1._DP
            WRITE (IUNOUT,*) ' NO SCALING PERFORMED FOR SPETRUM NO. ',
     .                         ISPC
          END IF
          ESTIML(ISPC)%PSPC%SPC = ESTIML(ISPC)%PSPC%SPC * ZFAC *
     .                            ESTIML(ISPC)%PSPC%SPCDELI
          ESTIML(ISPC)%PSPC%SPCINT = SUM(ESTIML(ISPC)%PSPC%SPC*
     .                                   ESTIML(ISPC)%PSPC%SPCDEL)
        END IF  
      END DO


      RETURN

      END SUBROUTINE SCAL_VOLAV_TALLIES
C ===== SOURCE: set_scal_const.f
      SUBROUTINE SET_SCAL_CONST (ISTR, WTT, ZWW, ZW, ZVOLNT, ZVOLWT,
     .                           ZVOLIN, ZVOLIW, SCLTAL, N1DIM)
C
C  SET SOME SCALING CONSTANTS
C
      USE PRECISION
      USE PARMMOD
      USE COMSOU
      USE COMPRT, ONLY : IUNOUT
      USE CGRID
      USE COUTAU
      USE CESTIM
      USE CCONA
      USE CGEOM

      IMPLICIT NONE

      INTEGER, INTENT(IN) :: ISTR, N1DIM
      REAL(DP), INTENT(IN) :: WTT
      REAL(DP), INTENT(OUT) :: ZWW, ZW, ZVOLNT, ZVOLWT
      REAL(DP), INTENT(IN) :: SCLTAL(N1DIM,*)
      REAL(DP), INTENT(OUT) :: ZVOLIN(*), ZVOLIW(*)

      INTEGER :: IS, IT, IC, I1, I2, I3, IA, IB, NBLCKA, IADD, IGFF,
     .           INDX
      REAL(DP) :: VALUE, VAL, FLX

C  FACTOR FOR FLUXES (AMP) (INPUT FLUX "FLUXT" IS IN AMP)
      FLXFAC(ISTR)=0.
c slmod begin
      IF (SCALV(ISTR).LT.0.D0) THEN
c...    Set the flux to a particular value:
        WRITE(0,*) 'DEBUG: FLUX OVER-RIDE',ISTR
        FLUXT(ISTR)=-SCALV(ISTR)
        IF (WTT.NE.0.D0) FLXFAC(ISTR)=FLUXT(ISTR)/WTT
      ELSEIF (SCALV(ISTR).NE.0.D0) THEN
c
c      IF (SCALV(ISTR).NE.0.D0) THEN
c slmod end
C  NON DEFAULT SCALING OPTION
        IS=ISCLS(ISTR)
        IT=ISCLT(ISTR)
        IC=ISCL1(ISTR)
        IF (IVLSF(ISTR).EQ.1) THEN
C  SCALE TO ENFORCE CERTAIN VALUE OF VOLUME TALLY
          IF (ISCL2(ISTR).GT.0.AND.ISCL3(ISTR).GT.0) THEN
            I1=ISCL1(ISTR)
            I2=ISCL2(ISTR)
            I3=ISCL3(ISTR)
            IB=ISCLB(ISTR)
            IA=ISCLA(ISTR)
            NBLCKA=NSTRD*(IB-1)+IA
            IC=I1+((I2-1)+(I3-1)*NP2T3)*NR1P2+NBLCKA
          ENDIF
          IF (IT.LE.0.OR.IT.GE.NTALA) GOTO 207
          IF (IS.LT.0.OR.IS.GT.NFSTVI(IT)) GOTO 207
          IF (IC.LT.0.OR.IC.GT.NSBOX_TAL) GOTO 207
          IADD=NADDV(IT)
          IGFF=NFIRST(IT)
          INDX=IADD+(IC-1)*IGFF+IS
          IF (SCLTAL(1,IT).EQ.1) THEN
            VALUE=ESTIMV(IADD+IS,IC)/VOLTAL(IC)/ELCHA
          ELSEIF (SCLTAL(1,IT).EQ.2) THEN
            VALUE=ESTIMV(IADD+IS,IC)/ELCHA
          ELSEIF (SCLTAL(1,IT).EQ.3) THEN
            VALUE=ESTIMV(IADD+IS,IC)/VOLTAL(IC)
          ELSEIF (SCLTAL(1,IT).EQ.4) THEN
            VALUE=ESTIMV(IADD+IS,IC)
          ENDIF
          IF (ABS(VALUE).LE.EPS60) GOTO 207
          VAL=SCALV(ISTR)
          FLXFAC(ISTR)=VAL/VALUE
          FLX=FLXFAC(ISTR)*WTT
          FLUXT(ISTR)=FLX
        ELSEIF (IVLSF(ISTR).EQ.2) THEN
C  SCALE TO ENFORCE CERTAIN VALUE OF SURFACE TALLY
          GOTO 207
        ELSE
          GOTO 207
        ENDIF
        GOTO 205
207     WRITE (iunout,*) 
     .    'INCONSISTENT INPUT FOR SCALING OF STRATUM ISTR '
        WRITE (iunout,*) 'ISTR ',ISTR,IS,IT,IC,VALUE
        WRITE (iunout,*) 'USE DEFAULT SCALING (FLUX(ISTR)) '
        FLUXT(ISTR)=FLUX(ISTR)
        IF (WTT.NE.0.D0) FLXFAC(ISTR)=FLUXT(ISTR)/WTT
205     CONTINUE
      ELSE
C  DEFAULT SCALING OPTION: USE FLUX(ISTR)
        FLUXT(ISTR)=FLUX(ISTR)
        IF (WTT.NE.0.D0) FLXFAC(ISTR)=FLUXT(ISTR)/WTT
      ENDIF
C
C  TOTAL TEST PARTICLE FLUX (AMP)
      WRITE (iunout,*) 'TOTAL SOURCE STRENGTH FOR TEST PARTICLE SPECIES'
      CALL MASR1 ('FLUXT=  ',FLUXT(ISTR))
      CALL LEER(2)
C
C  ZONE IN-DEPENDENT SCALING FACTORS
      ZWW=FLXFAC(ISTR)
      ZW=FLXFAC(ISTR)/ELCHA
C  ZONE DEPENDENT SCALING FACTORS
      DO 206 IC=1,NSBOX_TAL
        ZVOLIN(IC)=0.
        ZVOLIW(IC)=0.
        IF (VOLTAL(IC).NE.0.D0) THEN
          ZVOLIN(IC)=ZW /VOLTAL(IC)
          ZVOLIW(IC)=ZWW/VOLTAL(IC)
        ENDIF
206   CONTINUE
      ZVOLNT=ZW /VOLTOT
      ZVOLWT=ZWW/VOLTOT

      RETURN
      END SUBROUTINE SET_SCAL_CONST
C ===== SOURCE: stat_sumostra.f
c  16.12.05  cleaned up
      SUBROUTINE STAT_SUMOSTRA
C
C    STATISTICS, SUM OVER STRATA
C
      USE PRECISION
      USE PARMMOD
      USE CSDVI
      USE CSDVI_BGK
      USE CSDVI_COP
      USE CGRID
      USE CSPEI
      USE CCONA
      USE COMSOU
      USE CESTIM

      IMPLICIT NONE

      REAL(DP) :: ST
      INTEGER :: K, I, ISPC, J, ISDV, ICELL, IB

      DO 1207 K=1,NSIGVI
        DO 1208 I=1,NSBOX_TAL
          ST=MAX(0._DP,STV(K,I))
          STV(K,I)=SQRT(ST)/(ABS(EE(K,I))+EPS60)
1208    CONTINUE
        ST=MAX(0._DP,STVS(K))
        STVS(K)=SQRT(ST)/(ABS(EES(K))+EPS60)
1207  CONTINUE
C
      IF (NSIGI_BGK.GT.0) THEN
        DO 1217 K=1,NBGVI_STAT
          DO 1218 I=1,NSBOX_TAL
            ST=MAX(0._DP,STV_BGK(K,I))
            STV_BGK(K,I)=SQRT(ST)/(ABS(EE_BGK(K,I))+EPS60)
1218      CONTINUE
          ST=MAX(0._DP,STVS_BGK(K))
          STVS_BGK(K)=SQRT(ST)/(ABS(EES_BGK(K))+EPS60)
1217    CONTINUE
      ENDIF
C
      IF (NSIGI_COP.GT.0) THEN
        DO K=1,NCPVI_STAT
          DO I=1,NSBOX_TAL
            ST=MAX(0._DP,STV_COP(K,I))
            STV_COP(K,I)=SQRT(ST)/(ABS(EE_COP(K,I))+EPS60)
          END DO
          ST=MAX(0._DP,STVS_COP(K))
          STVS_COP(K)=SQRT(ST)/(ABS(EES_COP(K))+EPS60)
        END DO
      ENDIF
C
      IF ((NSTRAI > 1) .AND. (NSMSTRA > 0)) THEN
        IF (NSIGI_SPC.GT.0) THEN
          DO ISPC=1,NADSPC
            DO I=0,SMESTL(ISPC)%PSPC%NSPC+1
              ST=MAX(0._DP,SMESTL(ISPC)%PSPC%SGM(I))
              SMESTL(ISPC)%PSPC%SGM(I)=SQRT(ST)/
     .                     (ABS(SMESTL(ISPC)%PSPC%SDV(I))+EPS60)
            END DO
            ST=MAX(0._DP,SMESTL(ISPC)%PSPC%STVS)
            SMESTL(ISPC)%PSPC%STVS=SQRT(ST)/
     .                             (ABS(SMESTL(ISPC)%PSPC%EES)+EPS60)
          END DO
        ENDIF
      ENDIF
C
      DO 1221 K=1,NSIGSI
        DO 1222 J=1,NLIMPS
          ST=MAX(0._DP,STVW(K,J))
          STVW(K,J)=SQRT(ST)/(ABS(FF(K,J))+EPS60)
1222    CONTINUE
        ST=MAX(0._DP,STVWS(K))
        STVWS(K)=SQRT(ST)/(ABS(FFS(K))+EPS60)
1221  CONTINUE
C
      DO 1240 ISDV=1,NSIGCI
        DO 1242 ICELL=1,NSBOX_TAL
          STVC(1,ISDV,ICELL)=SQRT(MAX(0._DP,STVC(1,ISDV,ICELL)))
          STVC(2,ISDV,ICELL)=SQRT(MAX(0._DP,STVC(2,ISDV,ICELL)))
1242    CONTINUE
        STVCS(1,ISDV)=SQRT(MAX(0._DP,STVCS(1,ISDV)))
        STVCS(2,ISDV)=SQRT(MAX(0._DP,STVCS(2,ISDV)))
1240  CONTINUE
C
C  CONVERT RELATIVE ERRORS TO %-ERRORS
C
      STV  = STV*100._DP
      STVS = STVS*100._DP
      STVW  = STVW*100._DP
      STVWS = STVWS*100._DP
C
      IF (NSIGI_BGK.GT.0) THEN
        DO 1251 IB=1,NBGVI_STAT
          STVS_BGK(IB)=STVS_BGK(IB)*100.D0
          DO 1252 J=1,NSBOX_TAL
            STV_BGK(IB,J)=STV_BGK(IB,J)*100.D0
1252      CONTINUE
1251    CONTINUE
      ENDIF
C
      IF (NSIGI_COP.GT.0) THEN
        DO IB=1,NCPVI_STAT
          STVS_COP(IB)=STVS_COP(IB)*100.D0
          DO J=1,NSBOX_TAL
            STV_COP(IB,J)=STV_COP(IB,J)*100.D0
          END DO
        END DO
      ENDIF

      IF ((NSTRAI > 1) .AND. (NSMSTRA > 0)) THEN
        IF (NSIGI_SPC.GT.0) THEN
          DO ISPC=1,NADSPC
            SMESTL(ISPC)%PSPC%STVS=SMESTL(ISPC)%PSPC%STVS*100.D0
            DO J=0,SMESTL(ISPC)%PSPC%NSPC+1
              SMESTL(ISPC)%PSPC%SGM(J)=SMESTL(ISPC)%PSPC%SGM(J)*100.D0
            END DO
          END DO
        ENDIF
      ENDIF

      RETURN

      END SUBROUTINE STAT_SUMOSTRA
C ===== SOURCE: sum_average.f
C
      SUBROUTINE SUM_AVERAGE (ISTRA)
C
C  MONTE CARLO CALCULATION
C
      USE PRECISION
      USE PARMMOD
      USE COMUSR
      USE COUTAU
      USE CSPEZ
      USE CESTIM
      USE CLGIN

      IMPLICIT NONE

      INTEGER, INTENT(IN) :: ISTRA
      INTEGER :: J, IATM, IMOL, IION, IPLS, IPHOT, ISPZ, IADV, ICLV,
     .           ISNV, ICPV, IBGV
C
C   SUM OVER SURFACE INDEX
C   IN THE SURFACE AVERAGED ESTIMATORS
C
      DO 632 IMOL=1,NMOLI
        IF (.NOT.LOGMOL(IMOL,ISTRA)) CYCLE
        DO 633 J=1,NLIMPS
          IF (ILIIN(J).LE.0) CYCLE
          IF (LPRFAML) 
     .      PRFAMI(IMOL,ISTRA)=PRFAMI(IMOL,ISTRA)+PRFAML(IMOL,J)
          IF (LPRFMML) 
     .      PRFMMI(IMOL,ISTRA)=PRFMMI(IMOL,ISTRA)+PRFMML(IMOL,J)
          IF (LPRFIML) 
     .      PRFIMI(IMOL,ISTRA)=PRFIMI(IMOL,ISTRA)+PRFIML(IMOL,J)
          IF (LPRFPHML) 
     .      PRFPHMI(IMOL,ISTRA)=PRFPHMI(IMOL,ISTRA)+PRFPHML(IMOL,J)
          IF (LPRFPML) 
     .      PRFPMI(IMOL,ISTRA)=PRFPMI(IMOL,ISTRA)+PRFPML(IMOL,J)
          IF (LPOTML) 
     .      POTMLI(IMOL,ISTRA)=POTMLI(IMOL,ISTRA)-POTML(IMOL,J)
          IF (LERFAML) 
     .      ERFAMI(IMOL,ISTRA)=ERFAMI(IMOL,ISTRA)+ERFAML(IMOL,J)
          IF (LERFMML) 
     .      ERFMMI(IMOL,ISTRA)=ERFMMI(IMOL,ISTRA)+ERFMML(IMOL,J)
          IF (LERFIML) 
     .      ERFIMI(IMOL,ISTRA)=ERFIMI(IMOL,ISTRA)+ERFIML(IMOL,J)
          IF (LERFPHML) 
     .      ERFPHMI(IMOL,ISTRA)=ERFPHMI(IMOL,ISTRA)+ERFPHML(IMOL,J)
          IF (LERFPML) 
     .      ERFPMI(IMOL,ISTRA)=ERFPMI(IMOL,ISTRA)+ERFPML(IMOL,J)
          IF (LEOTML) 
     .      EOTMLI(IMOL,ISTRA)=EOTMLI(IMOL,ISTRA)-EOTML(IMOL,J)
          IF (LSPTML) 
     .      SPTMLI(IMOL,ISTRA)=SPTMLI(IMOL,ISTRA)+SPTML(IMOL,J)
633     CONTINUE
632   CONTINUE
C
      DO 635 IATM=1,NATMI
        IF (.NOT.LOGATM(IATM,ISTRA)) CYCLE
        DO 636 J=1,NLIMPS
          IF (ILIIN(J).LE.0) CYCLE
          IF (LPRFAAT) 
     .      PRFAAI(IATM,ISTRA)=PRFAAI(IATM,ISTRA)+PRFAAT(IATM,J)
          IF (LPRFMAT) 
     .      PRFMAI(IATM,ISTRA)=PRFMAI(IATM,ISTRA)+PRFMAT(IATM,J)
          IF (LPRFMAT) 
     .      PRFIAI(IATM,ISTRA)=PRFIAI(IATM,ISTRA)+PRFIAT(IATM,J)
          IF (LPRFPHAT) 
     .      PRFPHAI(IATM,ISTRA)=PRFPHAI(IATM,ISTRA)+PRFPHAT(IATM,J)
          IF (LPRFPAT) 
     .      PRFPAI(IATM,ISTRA)=PRFPAI(IATM,ISTRA)+PRFPAT(IATM,J)
          IF (LPOTAT) 
     .      POTATI(IATM,ISTRA)=POTATI(IATM,ISTRA)-POTAT(IATM,J)
          IF (LERFAAT) 
     .      ERFAAI(IATM,ISTRA)=ERFAAI(IATM,ISTRA)+ERFAAT(IATM,J)
          IF (LERFMAT) 
     .      ERFMAI(IATM,ISTRA)=ERFMAI(IATM,ISTRA)+ERFMAT(IATM,J)
          IF (LERFIAT) 
     .      ERFIAI(IATM,ISTRA)=ERFIAI(IATM,ISTRA)+ERFIAT(IATM,J)
          IF (LERFPHAT) 
     .      ERFPHAI(IATM,ISTRA)=ERFPHAI(IATM,ISTRA)+ERFPHAT(IATM,J)
          IF (LERFPAT) 
     .      ERFPAI(IATM,ISTRA)=ERFPAI(IATM,ISTRA)+ERFPAT(IATM,J)
          IF (LEOTAT) 
     .      EOTATI(IATM,ISTRA)=EOTATI(IATM,ISTRA)-EOTAT(IATM,J)
          IF (LSPTAT) 
     .      SPTATI(IATM,ISTRA)=SPTATI(IATM,ISTRA)+SPTAT(IATM,J)
636     CONTINUE
635   CONTINUE
C
      DO 638 IION=1,NIONI
        IF (.NOT.LOGION(IION,ISTRA)) CYCLE
        DO 639 J=1,NLIMPS
          IF (ILIIN(J).LE.0) CYCLE
          IF (LPRFAIO) 
     .      PRFAII(IION,ISTRA)=PRFAII(IION,ISTRA)+PRFAIO(IION,J)
          IF (LPRFMIO) 
     .      PRFMII(IION,ISTRA)=PRFMII(IION,ISTRA)+PRFMIO(IION,J)
          IF (LPRFIIO) 
     .      PRFIII(IION,ISTRA)=PRFIII(IION,ISTRA)+PRFIIO(IION,J)
          IF (LPRFPHIO) 
     .      PRFPHII(IION,ISTRA)=PRFPHII(IION,ISTRA)+PRFPHIO(IION,J)
          IF (LPRFPIO) 
     .      PRFPII(IION,ISTRA)=PRFPII(IION,ISTRA)+PRFPIO(IION,J)
          IF (LPOTIO) 
     .      POTIOI(IION,ISTRA)=POTIOI(IION,ISTRA)-POTIO(IION,J)
          IF (LERFAIO) 
     .      ERFAII(IION,ISTRA)=ERFAII(IION,ISTRA)+ERFAIO(IION,J)
          IF (LERFMIO) 
     .      ERFMII(IION,ISTRA)=ERFMII(IION,ISTRA)+ERFMIO(IION,J)
          IF (LERFIIO) 
     .      ERFIII(IION,ISTRA)=ERFIII(IION,ISTRA)+ERFIIO(IION,J)
          IF (LERFPHIO) 
     .      ERFPHII(IION,ISTRA)=ERFPHII(IION,ISTRA)+ERFPHIO(IION,J)
          IF (LERFPIO) 
     .      ERFPII(IION,ISTRA)=ERFPII(IION,ISTRA)+ERFPIO(IION,J)
          IF (LEOTIO) 
     .      EOTIOI(IION,ISTRA)=EOTIOI(IION,ISTRA)-EOTIO(IION,J)
          IF (LSPTIO) 
     .      SPTIOI(IION,ISTRA)=SPTIOI(IION,ISTRA)+SPTIO(IION,J)
639     CONTINUE
638   CONTINUE
C
      DO IPHOT=1,NPHOTI
        IF (.NOT.LOGPHOT(IPHOT,ISTRA)) CYCLE
        DO J=1,NLIMPS
          IF (ILIIN(J).LE.0) CYCLE
          IF (LPRFAPHT) 
     .      PRFAPHTI(IPHOT,ISTRA)=PRFAPHTI(IPHOT,ISTRA)+PRFAPHT(IPHOT,J)
          IF (LPRFMPHT) 
     .      PRFMPHTI(IPHOT,ISTRA)=PRFMPHTI(IPHOT,ISTRA)+PRFMPHT(IPHOT,J)
          IF (LPRFIPHT) 
     .      PRFIPHTI(IPHOT,ISTRA)=PRFIPHTI(IPHOT,ISTRA)+PRFIPHT(IPHOT,J)
          IF (LPRFPHPHT) 
     .      PRFPHPHTI(IPHOT,ISTRA)=PRFPHPHTI(IPHOT,ISTRA)+
     .                           PRFPHPHT(IPHOT,J)
          IF (LPRFPPHT) 
     .      PRFPPHTI(IPHOT,ISTRA)=PRFPPHTI(IPHOT,ISTRA)+PRFPPHT(IPHOT,J)
          IF (LPOTPHT) 
     .      POTPHTI(IPHOT,ISTRA)=POTPHTI(IPHOT,ISTRA)-POTPHT(IPHOT,J)
          IF (LERFAPHT) 
     .      ERFAPHTI(IPHOT,ISTRA)=ERFAPHTI(IPHOT,ISTRA)+ERFAPHT(IPHOT,J)
          IF (LERFMPHT) 
     .      ERFMPHTI(IPHOT,ISTRA)=ERFMPHTI(IPHOT,ISTRA)+ERFMPHT(IPHOT,J)
          IF (LERFIPHT) 
     .      ERFIPHTI(IPHOT,ISTRA)=ERFIPHTI(IPHOT,ISTRA)+ERFIPHT(IPHOT,J)
          IF (LERFPHPHT) 
     .      ERFPHPHTI(IPHOT,ISTRA)=ERFPHPHTI(IPHOT,ISTRA)+
     .                           ERFPHPHT(IPHOT,J)
          IF (LERFPPHT) 
     .      ERFPPHTI(IPHOT,ISTRA)=ERFPPHTI(IPHOT,ISTRA)+ERFPPHT(IPHOT,J)
          IF (LEOTPHT) 
     .      EOTPHTI(IPHOT,ISTRA)=EOTPHTI(IPHOT,ISTRA)-EOTPHT(IPHOT,J)
          IF (LSPTPHT) 
     .      SPTPHTI(IPHOT,ISTRA)=SPTPHTI(IPHOT,ISTRA)+SPTPHT(IPHOT,J)
        END DO
      END DO
C
      DO 641 IPLS=1,NPLSI
        IF (.NOT.LOGPLS(IPLS,ISTRA)) CYCLE
        DO 642 J=1,NLIMPS
          IF (ILIIN(J).LE.0) CYCLE
          IF (LPOTPL) 
     .      POTPLI(IPLS,ISTRA)=POTPLI(IPLS,ISTRA)-POTPL(IPLS,J)
          IF (LEOTPL) 
     .      EOTPLI(IPLS,ISTRA)=EOTPLI(IPLS,ISTRA)-EOTPL(IPLS,J)
          IF (LSPTPL) 
     .      SPTPLI(IPLS,ISTRA)=SPTPLI(IPLS,ISTRA)+SPTPL(IPLS,J)
642     CONTINUE
641   CONTINUE
C
      DO 651 ISPZ=1,NSPTOT
        DO 652 J=1,NLIMPS
          IF (ILIIN(J).LE.0) CYCLE
            IF (LSPUMP) 
     .        SPUMPI(ISPZ,ISTRA)=SPUMPI(ISPZ,ISTRA)+SPUMP(ISPZ,J)
652     CONTINUE
651   CONTINUE
C
C  SUM OVER SPECIES INDEX FOR INTEGRATED VOLUME AVERAGED TALLIES
C                         AND INTEGRATED SURFACE AVERAGED TALLIES
C
      DO 661 IPLS=1,NPLSI
        PAPLI(0,ISTRA)=PAPLI(0,ISTRA)+PAPLI(IPLS,ISTRA)
        PMPLI(0,ISTRA)=PMPLI(0,ISTRA)+PMPLI(IPLS,ISTRA)
        PIPLI(0,ISTRA)=PIPLI(0,ISTRA)+PIPLI(IPLS,ISTRA)
        PPHPLI(0,ISTRA)=PPHPLI(0,ISTRA)+PPHPLI(IPLS,ISTRA)
        PPPLI(0,ISTRA)=PPPLI(0,ISTRA)+PPPLI(IPLS,ISTRA)
        POTPLI(0,ISTRA)=POTPLI(0,ISTRA)+POTPLI(IPLS,ISTRA)
        EOTPLI(0,ISTRA)=EOTPLI(0,ISTRA)+EOTPLI(IPLS,ISTRA)
        SPTPLI(0,ISTRA)=SPTPLI(0,ISTRA)+SPTPLI(IPLS,ISTRA)
        MAPLI(0,ISTRA)=MAPLI(0,ISTRA)+MAPLI(IPLS,ISTRA)
        MMPLI(0,ISTRA)=MMPLI(0,ISTRA)+MMPLI(IPLS,ISTRA)
        MIPLI(0,ISTRA)=MIPLI(0,ISTRA)+MIPLI(IPLS,ISTRA)
        MPHPLI(0,ISTRA)=MPHPLI(0,ISTRA)+MPHPLI(IPLS,ISTRA)
661   CONTINUE
      DO 662 IION=1,NIONI
        PDENII(0,ISTRA)=PDENII(0,ISTRA)+PDENII(IION,ISTRA)
        EDENII(0,ISTRA)=EDENII(0,ISTRA)+EDENII(IION,ISTRA)
        PPIOI (0,ISTRA)=PPIOI (0,ISTRA)+PPIOI (IION,ISTRA)
        PAIOI (0,ISTRA)=PAIOI (0,ISTRA)+PAIOI (IION,ISTRA)
        PMIOI (0,ISTRA)=PMIOI (0,ISTRA)+PMIOI (IION,ISTRA)
        PIIOI (0,ISTRA)=PIIOI (0,ISTRA)+PIIOI (IION,ISTRA)
        PPHIOI(0,ISTRA)=PPHIOI(0,ISTRA)+PPHIOI(IION,ISTRA)
        POTIOI(0,ISTRA)=POTIOI(0,ISTRA)+POTIOI(IION,ISTRA)
        PRFAII(0,ISTRA)=PRFAII(0,ISTRA)+PRFAII(IION,ISTRA)
        PRFMII(0,ISTRA)=PRFMII(0,ISTRA)+PRFMII(IION,ISTRA)
        PRFIII(0,ISTRA)=PRFIII(0,ISTRA)+PRFIII(IION,ISTRA)
        PRFPHII(0,ISTRA)=PRFPHII(0,ISTRA)+PRFPHII(IION,ISTRA)
        PRFPII(0,ISTRA)=PRFPII(0,ISTRA)+PRFPII(IION,ISTRA)
        EOTIOI(0,ISTRA)=EOTIOI(0,ISTRA)+EOTIOI(IION,ISTRA)
        ERFAII(0,ISTRA)=ERFAII(0,ISTRA)+ERFAII(IION,ISTRA)
        ERFMII(0,ISTRA)=ERFMII(0,ISTRA)+ERFMII(IION,ISTRA)
        ERFIII(0,ISTRA)=ERFIII(0,ISTRA)+ERFIII(IION,ISTRA)
        ERFPHII(0,ISTRA)=ERFPHII(0,ISTRA)+ERFPHII(IION,ISTRA)
        ERFPII(0,ISTRA)=ERFPII(0,ISTRA)+ERFPII(IION,ISTRA)
        SPTIOI(0,ISTRA)=SPTIOI(0,ISTRA)+SPTIOI(IION,ISTRA)
        PGENII(0,ISTRA)=PGENII(0,ISTRA)+PGENII(IION,ISTRA)
        EGENII(0,ISTRA)=EGENII(0,ISTRA)+EGENII(IION,ISTRA)
        VGENII(0,ISTRA)=VGENII(0,ISTRA)+VGENII(IION,ISTRA)
        EELFI (0,ISTRA)=EELFI (0,ISTRA)+EELFI (IION,ISTRA)
        VXDENII(0,ISTRA)=VXDENII(0,ISTRA)+VXDENII(IION,ISTRA)
        VYDENII(0,ISTRA)=VYDENII(0,ISTRA)+VYDENII(IION,ISTRA)
        VZDENII(0,ISTRA)=VZDENII(0,ISTRA)+VZDENII(IION,ISTRA)
662   CONTINUE
      DO 663 IMOL=1,NMOLI
        PDENMI(0,ISTRA)=PDENMI(0,ISTRA)+PDENMI(IMOL,ISTRA)
        EDENMI(0,ISTRA)=EDENMI(0,ISTRA)+EDENMI(IMOL,ISTRA)
        PPMLI (0,ISTRA)=PPMLI (0,ISTRA)+PPMLI (IMOL,ISTRA)
        PAMLI (0,ISTRA)=PAMLI (0,ISTRA)+PAMLI (IMOL,ISTRA)
        PMMLI (0,ISTRA)=PMMLI (0,ISTRA)+PMMLI (IMOL,ISTRA)
        PIMLI (0,ISTRA)=PIMLI (0,ISTRA)+PIMLI (IMOL,ISTRA)
        PPHMLI(0,ISTRA)=PPHMLI(0,ISTRA)+PPHMLI(IMOL,ISTRA)
        POTMLI(0,ISTRA)=POTMLI(0,ISTRA)+POTMLI(IMOL,ISTRA)
        PRFAMI(0,ISTRA)=PRFAMI(0,ISTRA)+PRFAMI(IMOL,ISTRA)
        PRFMMI(0,ISTRA)=PRFMMI(0,ISTRA)+PRFMMI(IMOL,ISTRA)
        PRFIMI(0,ISTRA)=PRFIMI(0,ISTRA)+PRFIMI(IMOL,ISTRA)
        PRFPHMI(0,ISTRA)=PRFPHMI(0,ISTRA)+PRFPHMI(IMOL,ISTRA)
        PRFPMI(0,ISTRA)=PRFPMI(0,ISTRA)+PRFPMI(IMOL,ISTRA)
        EOTMLI(0,ISTRA)=EOTMLI(0,ISTRA)+EOTMLI(IMOL,ISTRA)
        ERFAMI(0,ISTRA)=ERFAMI(0,ISTRA)+ERFAMI(IMOL,ISTRA)
        ERFMMI(0,ISTRA)=ERFMMI(0,ISTRA)+ERFMMI(IMOL,ISTRA)
        ERFIMI(0,ISTRA)=ERFIMI(0,ISTRA)+ERFIMI(IMOL,ISTRA)
        ERFPHMI(0,ISTRA)=ERFPHMI(0,ISTRA)+ERFPHMI(IMOL,ISTRA)
        ERFPMI(0,ISTRA)=ERFPMI(0,ISTRA)+ERFPMI(IMOL,ISTRA)
        SPTMLI(0,ISTRA)=SPTMLI(0,ISTRA)+SPTMLI(IMOL,ISTRA)
        PGENMI(0,ISTRA)=PGENMI(0,ISTRA)+PGENMI(IMOL,ISTRA)
        EGENMI(0,ISTRA)=EGENMI(0,ISTRA)+EGENMI(IMOL,ISTRA)
        VGENMI(0,ISTRA)=VGENMI(0,ISTRA)+VGENMI(IMOL,ISTRA)
        VXDENMI(0,ISTRA)=VXDENMI(0,ISTRA)+VXDENMI(IMOL,ISTRA)
        VYDENMI(0,ISTRA)=VYDENMI(0,ISTRA)+VYDENMI(IMOL,ISTRA)
        VZDENMI(0,ISTRA)=VZDENMI(0,ISTRA)+VZDENMI(IMOL,ISTRA)
663   CONTINUE
      DO 664 IATM=1,NATMI
        PDENAI(0,ISTRA)=PDENAI(0,ISTRA)+PDENAI(IATM,ISTRA)
        EDENAI(0,ISTRA)=EDENAI(0,ISTRA)+EDENAI(IATM,ISTRA)
        PPATI (0,ISTRA)=PPATI (0,ISTRA)+PPATI (IATM,ISTRA)
        PAATI (0,ISTRA)=PAATI (0,ISTRA)+PAATI (IATM,ISTRA)
        PMATI (0,ISTRA)=PMATI (0,ISTRA)+PMATI (IATM,ISTRA)
        PIATI (0,ISTRA)=PIATI (0,ISTRA)+PIATI (IATM,ISTRA)
        PPHATI(0,ISTRA)=PPHATI(0,ISTRA)+PPHATI(IATM,ISTRA)
        POTATI(0,ISTRA)=POTATI(0,ISTRA)+POTATI(IATM,ISTRA)
        PRFAAI(0,ISTRA)=PRFAAI(0,ISTRA)+PRFAAI(IATM,ISTRA)
        PRFMAI(0,ISTRA)=PRFMAI(0,ISTRA)+PRFMAI(IATM,ISTRA)
        PRFIAI(0,ISTRA)=PRFIAI(0,ISTRA)+PRFIAI(IATM,ISTRA)
        PRFPHAI(0,ISTRA)=PRFPHAI(0,ISTRA)+PRFPHAI(IATM,ISTRA)
        PRFPAI(0,ISTRA)=PRFPAI(0,ISTRA)+PRFPAI(IATM,ISTRA)
        EOTATI(0,ISTRA)=EOTATI(0,ISTRA)+EOTATI(IATM,ISTRA)
        ERFAAI(0,ISTRA)=ERFAAI(0,ISTRA)+ERFAAI(IATM,ISTRA)
        ERFMAI(0,ISTRA)=ERFMAI(0,ISTRA)+ERFMAI(IATM,ISTRA)
        ERFIAI(0,ISTRA)=ERFIAI(0,ISTRA)+ERFIAI(IATM,ISTRA)
        ERFPHAI(0,ISTRA)=ERFPHAI(0,ISTRA)+ERFPHAI(IATM,ISTRA)
        ERFPAI(0,ISTRA)=ERFPAI(0,ISTRA)+ERFPAI(IATM,ISTRA)
        SPTATI(0,ISTRA)=SPTATI(0,ISTRA)+SPTATI(IATM,ISTRA)
        PGENAI(0,ISTRA)=PGENAI(0,ISTRA)+PGENAI(IATM,ISTRA)
        EGENAI(0,ISTRA)=EGENAI(0,ISTRA)+EGENAI(IATM,ISTRA)
        VGENAI(0,ISTRA)=VGENAI(0,ISTRA)+VGENAI(IATM,ISTRA)
        VXDENAI(0,ISTRA)=VXDENAI(0,ISTRA)+VXDENAI(IATM,ISTRA)
        VYDENAI(0,ISTRA)=VYDENAI(0,ISTRA)+VYDENAI(IATM,ISTRA)
        VZDENAI(0,ISTRA)=VZDENAI(0,ISTRA)+VZDENAI(IATM,ISTRA)
664   CONTINUE
      DO IPHOT=1,NPHOTI
        PDENPHI (0,ISTRA)=PDENPHI (0,ISTRA)+PDENPHI (IPHOT,ISTRA)
        EDENPHI (0,ISTRA)=EDENPHI (0,ISTRA)+EDENPHI (IPHOT,ISTRA)
        PPPHTI  (0,ISTRA)=PPPHTI  (0,ISTRA)+PPPHTI  (IPHOT,ISTRA)
        PAPHTI  (0,ISTRA)=PAPHTI  (0,ISTRA)+PAPHTI  (IPHOT,ISTRA)
        PMPHTI  (0,ISTRA)=PMPHTI  (0,ISTRA)+PMPHTI  (IPHOT,ISTRA)
        PIPHTI  (0,ISTRA)=PIPHTI  (0,ISTRA)+PIPHTI  (IPHOT,ISTRA)
        PPHPHTI (0,ISTRA)=PPHPHTI (0,ISTRA)+PPHPHTI (IPHOT,ISTRA)
        POTPHTI (0,ISTRA)=POTPHTI (0,ISTRA)+POTPHTI (IPHOT,ISTRA)
        PRFAPHTI(0,ISTRA)=PRFAPHTI(0,ISTRA)+PRFAPHTI(IPHOT,ISTRA)
        PRFMPHTI(0,ISTRA)=PRFMPHTI(0,ISTRA)+PRFMPHTI(IPHOT,ISTRA)
        PRFIPHTI(0,ISTRA)=PRFIPHTI(0,ISTRA)+PRFIPHTI(IPHOT,ISTRA)
        PRFPHPHTI(0,ISTRA)=PRFPHPHTI(0,ISTRA)+PRFPHPHTI(IPHOT,ISTRA)
        PRFPPHTI(0,ISTRA)=PRFPPHTI(0,ISTRA)+PRFPPHTI(IPHOT,ISTRA)
        EOTPHTI (0,ISTRA)=EOTPHTI (0,ISTRA)+EOTPHTI (IPHOT,ISTRA)
        ERFAPHTI(0,ISTRA)=ERFAPHTI(0,ISTRA)+ERFAPHTI(IPHOT,ISTRA)
        ERFMPHTI(0,ISTRA)=ERFMPHTI(0,ISTRA)+ERFMPHTI(IPHOT,ISTRA)
        ERFIPHTI(0,ISTRA)=ERFIPHTI(0,ISTRA)+ERFIPHTI(IPHOT,ISTRA)
        ERFPHPHTI(0,ISTRA)=ERFPHPHTI(0,ISTRA)+ERFPHPHTI(IPHOT,ISTRA)
        ERFPPHTI(0,ISTRA)=ERFPPHTI(0,ISTRA)+ERFPPHTI(IPHOT,ISTRA)
        SPTPHTI (0,ISTRA)=SPTPHTI (0,ISTRA)+SPTPHTI (IPHOT,ISTRA)
        PGENPHI (0,ISTRA)=PGENPHI (0,ISTRA)+PGENPHI (IPHOT,ISTRA)
        EGENPHI (0,ISTRA)=EGENPHI (0,ISTRA)+EGENPHI (IPHOT,ISTRA)
        VGENPHI (0,ISTRA)=VGENPHI (0,ISTRA)+VGENPHI (IPHOT,ISTRA)
        VXDENPHI (0,ISTRA)=VXDENPHI (0,ISTRA)+VXDENPHI (IPHOT,ISTRA)
        VYDENPHI (0,ISTRA)=VYDENPHI (0,ISTRA)+VYDENPHI (IPHOT,ISTRA)
        VZDENPHI (0,ISTRA)=VZDENPHI (0,ISTRA)+VZDENPHI (IPHOT,ISTRA)
      END DO
      DO 665 IADV=1,NADVI
        ADDVI(0,ISTRA)=ADDVI(0,ISTRA)+ADDVI(IADV,ISTRA)
665   CONTINUE
      DO 666 ICLV=1,NCLVI
        COLVI(0,ISTRA)=COLVI(0,ISTRA)+COLVI(ICLV,ISTRA)
666   CONTINUE
      DO 667 ISNV=1,NSNVI
        SNAPVI(0,ISTRA)=SNAPVI(0,ISTRA)+SNAPVI(ISNV,ISTRA)
667   CONTINUE
      DO 668 ICPV=1,NCPVI
        COPVI(0,ISTRA)=COPVI(0,ISTRA)+COPVI(ICPV,ISTRA)
668   CONTINUE
      DO 669 IBGV=1,NBGVI
        BGKVI(0,ISTRA)=BGKVI(0,ISTRA)+BGKVI(IBGV,ISTRA)
669   CONTINUE
C
      RETURN
      END SUBROUTINE SUM_AVERAGE
C ===== SOURCE: sumostra.f
C
      SUBROUTINE SUMOSTRA (ISTRA)
C
C  SUM UP TALLIES FOR SUM OVER STRATA
C
      USE PRECISION
      USE PARMMOD
      USE COMUSR
      USE COUTAU

      IMPLICIT NONE

      INTEGER, INTENT(IN) :: ISTRA
      INTEGER :: IMOL, IATM, IION, IPHOT, IPLS
      INTEGER :: IADV, ICLV, ISNV, ICPV, IBGV

C
C  UPDATE TALLIES FOR  "SUM OVER STRATA"
C
      DO 1101 IMOL=0,NMOLI
        PPMLI (IMOL,0)=PPMLI (IMOL,0)+PPMLI (IMOL,ISTRA)
        WTOTM (IMOL,0)=WTOTM (IMOL,0)+WTOTM (IMOL,ISTRA)
        PDENMI(IMOL,0)=PDENMI(IMOL,0)+PDENMI(IMOL,ISTRA)
        EDENMI(IMOL,0)=EDENMI(IMOL,0)+EDENMI(IMOL,ISTRA)
        PAMLI (IMOL,0)=PAMLI (IMOL,0)+PAMLI (IMOL,ISTRA)
        PMMLI (IMOL,0)=PMMLI (IMOL,0)+PMMLI (IMOL,ISTRA)
        PIMLI (IMOL,0)=PIMLI (IMOL,0)+PIMLI (IMOL,ISTRA)
        PPHMLI(IMOL,0)=PPHMLI(IMOL,0)+PPHMLI(IMOL,ISTRA)
        POTMLI(IMOL,0)=POTMLI(IMOL,0)+POTMLI(IMOL,ISTRA)
        PRFAMI(IMOL,0)=PRFAMI(IMOL,0)+PRFAMI(IMOL,ISTRA)
        PRFMMI(IMOL,0)=PRFMMI(IMOL,0)+PRFMMI(IMOL,ISTRA)
        PRFIMI(IMOL,0)=PRFIMI(IMOL,0)+PRFIMI(IMOL,ISTRA)
        PRFPHMI(IMOL,0)=PRFPHMI(IMOL,0)+PRFPHMI(IMOL,ISTRA)
        PRFPMI(IMOL,0)=PRFPMI(IMOL,0)+PRFPMI(IMOL,ISTRA)
        EOTMLI(IMOL,0)=EOTMLI(IMOL,0)+EOTMLI(IMOL,ISTRA)
        ERFAMI(IMOL,0)=ERFAMI(IMOL,0)+ERFAMI(IMOL,ISTRA)
        ERFMMI(IMOL,0)=ERFMMI(IMOL,0)+ERFMMI(IMOL,ISTRA)
        ERFIMI(IMOL,0)=ERFIMI(IMOL,0)+ERFIMI(IMOL,ISTRA)
        ERFPHMI(IMOL,0)=ERFPHMI(IMOL,0)+ERFPHMI(IMOL,ISTRA)
        ERFPMI(IMOL,0)=ERFPMI(IMOL,0)+ERFPMI(IMOL,ISTRA)
        SPTMLI(IMOL,0)=SPTMLI(IMOL,0)+SPTMLI(IMOL,ISTRA)
        PGENMI(IMOL,0)=PGENMI(IMOL,0)+PGENMI(IMOL,ISTRA)
        EGENMI(IMOL,0)=EGENMI(IMOL,0)+EGENMI(IMOL,ISTRA)
        VGENMI(IMOL,0)=VGENMI(IMOL,0)+VGENMI(IMOL,ISTRA)
        VXDENMI(IMOL,0)=VXDENMI(IMOL,0)+VXDENMI(IMOL,ISTRA)
        VYDENMI(IMOL,0)=VYDENMI(IMOL,0)+VYDENMI(IMOL,ISTRA)
        VZDENMI(IMOL,0)=VZDENMI(IMOL,0)+VZDENMI(IMOL,ISTRA)
1101  CONTINUE
      DO 1102 IATM=0,NATMI
        PPATI (IATM,0)=PPATI (IATM,0)+PPATI (IATM,ISTRA)
        WTOTA (IATM,0)=WTOTA (IATM,0)+WTOTA (IATM,ISTRA)
        PDENAI(IATM,0)=PDENAI(IATM,0)+PDENAI(IATM,ISTRA)
        EDENAI(IATM,0)=EDENAI(IATM,0)+EDENAI(IATM,ISTRA)
        PAATI (IATM,0)=PAATI (IATM,0)+PAATI (IATM,ISTRA)
        PMATI (IATM,0)=PMATI (IATM,0)+PMATI (IATM,ISTRA)
        PIATI (IATM,0)=PIATI (IATM,0)+PIATI (IATM,ISTRA)
        PPHATI(IATM,0)=PPHATI(IATM,0)+PPHATI(IATM,ISTRA)
        POTATI(IATM,0)=POTATI(IATM,0)+POTATI(IATM,ISTRA)
        PRFAAI(IATM,0)=PRFAAI(IATM,0)+PRFAAI(IATM,ISTRA)
        PRFMAI(IATM,0)=PRFMAI(IATM,0)+PRFMAI(IATM,ISTRA)
        PRFIAI(IATM,0)=PRFIAI(IATM,0)+PRFIAI(IATM,ISTRA)
        PRFPHAI(IATM,0)=PRFPHAI(IATM,0)+PRFPHAI(IATM,ISTRA)
        PRFPAI(IATM,0)=PRFPAI(IATM,0)+PRFPAI(IATM,ISTRA)
        EOTATI(IATM,0)=EOTATI(IATM,0)+EOTATI(IATM,ISTRA)
        ERFAAI(IATM,0)=ERFAAI(IATM,0)+ERFAAI(IATM,ISTRA)
        ERFMAI(IATM,0)=ERFMAI(IATM,0)+ERFMAI(IATM,ISTRA)
        ERFIAI(IATM,0)=ERFIAI(IATM,0)+ERFIAI(IATM,ISTRA)
        ERFPHAI(IATM,0)=ERFPHAI(IATM,0)+ERFPHAI(IATM,ISTRA)
        ERFPAI(IATM,0)=ERFPAI(IATM,0)+ERFPAI(IATM,ISTRA)
        SPTATI(IATM,0)=SPTATI(IATM,0)+SPTATI(IATM,ISTRA)
        PGENAI(IATM,0)=PGENAI(IATM,0)+PGENAI(IATM,ISTRA)
        EGENAI(IATM,0)=EGENAI(IATM,0)+EGENAI(IATM,ISTRA)
        VGENAI(IATM,0)=VGENAI(IATM,0)+VGENAI(IATM,ISTRA)
        VXDENAI(IATM,0)=VXDENAI(IATM,0)+VXDENAI(IATM,ISTRA)
        VYDENAI(IATM,0)=VYDENAI(IATM,0)+VYDENAI(IATM,ISTRA)
        VZDENAI(IATM,0)=VZDENAI(IATM,0)+VZDENAI(IATM,ISTRA)
1102  CONTINUE
      DO 1103 IION=0,NIONI
        PPIOI (IION,0)=PPIOI (IION,0)+PPIOI (IION,ISTRA)
        EELFI (IION,0)=EELFI (IION,0)+EELFI (IION,ISTRA)
        WTOTI (IION,0)=WTOTI (IION,0)+WTOTI (IION,ISTRA)
        PDENII(IION,0)=PDENII(IION,0)+PDENII(IION,ISTRA)
        EDENII(IION,0)=EDENII(IION,0)+EDENII(IION,ISTRA)
        PAIOI (IION,0)=PAIOI (IION,0)+PAIOI (IION,ISTRA)
        PMIOI (IION,0)=PMIOI (IION,0)+PMIOI (IION,ISTRA)
        PIIOI (IION,0)=PIIOI (IION,0)+PIIOI (IION,ISTRA)
        PPHIOI(IION,0)=PPHIOI(IION,0)+PPHIOI(IION,ISTRA)
        POTIOI(IION,0)=POTIOI(IION,0)+POTIOI(IION,ISTRA)
        PRFAII(IION,0)=PRFAII(IION,0)+PRFAII(IION,ISTRA)
        PRFMII(IION,0)=PRFMII(IION,0)+PRFMII(IION,ISTRA)
        PRFIII(IION,0)=PRFIII(IION,0)+PRFIII(IION,ISTRA)
        PRFPHII(IION,0)=PRFPHII(IION,0)+PRFPHII(IION,ISTRA)
        PRFPII(IION,0)=PRFPII(IION,0)+PRFPII(IION,ISTRA)
        EOTIOI(IION,0)=EOTIOI(IION,0)+EOTIOI(IION,ISTRA)
        ERFAII(IION,0)=ERFAII(IION,0)+ERFAII(IION,ISTRA)
        ERFMII(IION,0)=ERFMII(IION,0)+ERFMII(IION,ISTRA)
        ERFIII(IION,0)=ERFIII(IION,0)+ERFIII(IION,ISTRA)
        ERFPHII(IION,0)=ERFPHII(IION,0)+ERFPHII(IION,ISTRA)
        ERFPII(IION,0)=ERFPII(IION,0)+ERFPII(IION,ISTRA)
        SPTIOI(IION,0)=SPTIOI(IION,0)+SPTIOI(IION,ISTRA)
        PGENII(IION,0)=PGENII(IION,0)+PGENII(IION,ISTRA)
        EGENII(IION,0)=EGENII(IION,0)+EGENII(IION,ISTRA)
        VGENII(IION,0)=VGENII(IION,0)+VGENII(IION,ISTRA)
        VXDENII(IION,0)=VXDENII(IION,0)+VXDENII(IION,ISTRA)
        VYDENII(IION,0)=VYDENII(IION,0)+VYDENII(IION,ISTRA)
        VZDENII(IION,0)=VZDENII(IION,0)+VZDENII(IION,ISTRA)
1103  CONTINUE
      DO IPHOT=0,NPHOTI
        PPPHTI  (IPHOT,0)=PPPHTI  (IPHOT,0)+PPPHTI  (IPHOT,ISTRA)
        WTOTPH  (IPHOT,0)=WTOTPH  (IPHOT,0)+WTOTPH  (IPHOT,ISTRA)
        PDENPHI (IPHOT,0)=PDENPHI (IPHOT,0)+PDENPHI (IPHOT,ISTRA)
        EDENPHI (IPHOT,0)=EDENPHI (IPHOT,0)+EDENPHI (IPHOT,ISTRA)
        PAPHTI  (IPHOT,0)=PAPHTI  (IPHOT,0)+PAPHTI  (IPHOT,ISTRA)
        PMPHTI  (IPHOT,0)=PMPHTI  (IPHOT,0)+PMPHTI  (IPHOT,ISTRA)
        PIPHTI  (IPHOT,0)=PIPHTI  (IPHOT,0)+PIPHTI  (IPHOT,ISTRA)
        PPHPHTI (IPHOT,0)=PPHPHTI (IPHOT,0)+PPHPHTI (IPHOT,ISTRA)
        POTPHTI (IPHOT,0)=POTPHTI (IPHOT,0)+POTPHTI (IPHOT,ISTRA)
        PRFAPHTI(IPHOT,0)=PRFAPHTI(IPHOT,0)+PRFAPHTI(IPHOT,ISTRA)
        PRFMPHTI(IPHOT,0)=PRFMPHTI(IPHOT,0)+PRFMPHTI(IPHOT,ISTRA)
        PRFIPHTI(IPHOT,0)=PRFIPHTI(IPHOT,0)+PRFIPHTI(IPHOT,ISTRA)
        PRFPHPHTI(IPHOT,0)=PRFPHPHTI(IPHOT,0)+PRFPHPHTI(IPHOT,ISTRA)
        PRFPPHTI(IPHOT,0)=PRFPPHTI(IPHOT,0)+PRFPPHTI(IPHOT,ISTRA)
        EOTPHTI (IPHOT,0)=EOTPHTI (IPHOT,0)+EOTPHTI (IPHOT,ISTRA)
        ERFAPHTI(IPHOT,0)=ERFAPHTI(IPHOT,0)+ERFAPHTI(IPHOT,ISTRA)
        ERFMPHTI(IPHOT,0)=ERFMPHTI(IPHOT,0)+ERFMPHTI(IPHOT,ISTRA)
        ERFIPHTI(IPHOT,0)=ERFIPHTI(IPHOT,0)+ERFIPHTI(IPHOT,ISTRA)
        ERFPHPHTI(IPHOT,0)=ERFPHPHTI(IPHOT,0)+ERFPHPHTI(IPHOT,ISTRA)
        ERFPPHTI(IPHOT,0)=ERFPPHTI(IPHOT,0)+ERFPPHTI(IPHOT,ISTRA)
        SPTPHTI (IPHOT,0)=SPTPHTI (IPHOT,0)+SPTPHTI (IPHOT,ISTRA)
        PGENPHI (IPHOT,0)=PGENPHI (IPHOT,0)+PGENPHI (IPHOT,ISTRA)
        EGENPHI (IPHOT,0)=EGENPHI (IPHOT,0)+EGENPHI (IPHOT,ISTRA)
        VGENPHI (IPHOT,0)=VGENPHI (IPHOT,0)+VGENPHI (IPHOT,ISTRA)
        VXDENPHI (IPHOT,0)=VXDENPHI (IPHOT,0)+VXDENPHI (IPHOT,ISTRA)
        VYDENPHI (IPHOT,0)=VYDENPHI (IPHOT,0)+VYDENPHI (IPHOT,ISTRA)
        VZDENPHI (IPHOT,0)=VZDENPHI (IPHOT,0)+VZDENPHI (IPHOT,ISTRA)
      END DO
      DO 1104 IPLS=0,NPLSI
        PPPLI (IPLS,0)=PPPLI (IPLS,0)+PPPLI (IPLS,ISTRA)
        WTOTP (IPLS,0)=WTOTP (IPLS,0)+WTOTP (IPLS,ISTRA)
        PAPLI (IPLS,0)=PAPLI (IPLS,0)+PAPLI (IPLS,ISTRA)
        PMPLI (IPLS,0)=PMPLI (IPLS,0)+PMPLI (IPLS,ISTRA)
        PIPLI (IPLS,0)=PIPLI (IPLS,0)+PIPLI (IPLS,ISTRA)
        PPHPLI(IPLS,0)=PPHPLI(IPLS,0)+PPHPLI(IPLS,ISTRA)
        POTPLI(IPLS,0)=POTPLI(IPLS,0)+POTPLI(IPLS,ISTRA)
        EOTPLI(IPLS,0)=EOTPLI(IPLS,0)+EOTPLI(IPLS,ISTRA)
        SPTPLI(IPLS,0)=SPTPLI(IPLS,0)+SPTPLI(IPLS,ISTRA)
        MAPLI (IPLS,0)=MAPLI (IPLS,0)+MAPLI (IPLS,ISTRA)
        MMPLI (IPLS,0)=MMPLI (IPLS,0)+MMPLI (IPLS,ISTRA)
        MIPLI (IPLS,0)=MIPLI (IPLS,0)+MIPLI (IPLS,ISTRA)
        MPHPLI(IPLS,0)=MPHPLI(IPLS,0)+MPHPLI(IPLS,ISTRA)
1104  CONTINUE
      WTOTE(0)=WTOTE(0)+WTOTE(ISTRA)
      DO 1105 IADV=0,NADVI
        ADDVI(IADV,0)=ADDVI(IADV,0)+ADDVI(IADV,ISTRA)
1105  CONTINUE
      DO 1106 ICLV=0,NCLVI
        COLVI(ICLV,0)=COLVI(ICLV,0)+COLVI(ICLV,ISTRA)
1106  CONTINUE
      DO 1107 ISNV=0,NSNVI
        SNAPVI(ISNV,0)=SNAPVI(ISNV,0)+SNAPVI(ISNV,ISTRA)
1107  CONTINUE
      DO 1108 ICPV=0,NCPVI
        COPVI(ICPV,0)=COPVI(ICPV,0)+COPVI(ICPV,ISTRA)
1108  CONTINUE
      DO 1109 IBGV=0,NBGVI
        BGKVI(IBGV,0)=BGKVI(IBGV,0)+BGKVI(IBGV,ISTRA)
1109  CONTINUE
      PAELI (0)=PAELI (0)+PAELI (ISTRA)
      PMELI (0)=PMELI (0)+PMELI (ISTRA)
      PIELI (0)=PIELI (0)+PIELI (ISTRA)
      PPHELI(0)=PPHELI(0)+PPHELI(ISTRA)
C
      EAELI (0)=EAELI (0)+EAELI (ISTRA)
      EAATI (0)=EAATI (0)+EAATI (ISTRA)
      EAMLI (0)=EAMLI (0)+EAMLI (ISTRA)
      EAIOI (0)=EAIOI (0)+EAIOI (ISTRA)
      EAPHTI(0)=EAPHTI(0)+EAPHTI(ISTRA)
      EAPLI (0)=EAPLI (0)+EAPLI (ISTRA)
C
      EMELI (0)=EMELI (0)+EMELI (ISTRA)
      EMATI (0)=EMATI (0)+EMATI (ISTRA)
      EMMLI (0)=EMMLI (0)+EMMLI (ISTRA)
      EMIOI (0)=EMIOI (0)+EMIOI (ISTRA)
      EMPHTI(0)=EMPHTI(0)+EMPHTI(ISTRA)
      EMPLI (0)=EMPLI (0)+EMPLI (ISTRA)
C
      EIELI (0)=EIELI (0)+EIELI (ISTRA)
      EIATI (0)=EIATI (0)+EIATI (ISTRA)
      EIMLI (0)=EIMLI (0)+EIMLI (ISTRA)
      EIIOI (0)=EIIOI (0)+EIIOI (ISTRA)
      EIPHTI(0)=EIPHTI(0)+EIPHTI(ISTRA)
      EIPLI (0)=EIPLI (0)+EIPLI (ISTRA)
C
      EPHELI (0)=EPHELI (0)+EPHELI (ISTRA)
      EPHATI (0)=EPHATI (0)+EPHATI (ISTRA)
      EPHMLI (0)=EPHMLI (0)+EPHMLI (ISTRA)
      EPHIOI (0)=EPHIOI (0)+EPHIOI (ISTRA)
      EPHPHTI(0)=EPHPHTI(0)+EPHPHTI(ISTRA)
      EPHPLI (0)=EPHPLI (0)+EPHPLI (ISTRA)
C
      EPATI (0)=EPATI (0)+EPATI (ISTRA)
      EPMLI (0)=EPMLI (0)+EPMLI (ISTRA)
      EPIOI (0)=EPIOI (0)+EPIOI (ISTRA)
      EPPHTI(0)=EPPHTI(0)+EPPHTI(ISTRA)
      EPPLI (0)=EPPLI (0)+EPPLI (ISTRA)
C
C
      FLUXT(0)=FLUXT(0)+FLUXT(ISTRA)
      XMCP(0)=XMCP(0)+XMCP(ISTRA)
      PTRASH(0)=PTRASH(0)+PTRASH(ISTRA)
      ETRASH(0)=ETRASH(0)+ETRASH(ISTRA)
      ETOTA(0)=ETOTA(0)+ETOTA(ISTRA)
      ETOTM(0)=ETOTM(0)+ETOTM(ISTRA)
      ETOTI(0)=ETOTI(0)+ETOTI(ISTRA)
      ETOTP(0)=ETOTP(0)+ETOTP(ISTRA)
      ETOTPH(0)=ETOTPH(0)+ETOTPH(ISTRA)
C
      RETURN
      END
