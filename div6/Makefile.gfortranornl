#
# Definintions
#
#	jhnmod 2/24/20: for ornl once pgi is gone
#
# Remove implicit .f and .f90 and .mod creation rules
#
%.o : %.f
#%.o : %.f90
#%.o : %.mod
#
#
# Source filename extensions
#
DIVEXT=.f
DIVF90EXT=.f90	
#COMEXT=.u6a
#COMF90EXT=.u6b
CEXT=.c
#
# VERSION to build
#
VER=gcc
#
# Source file locations
#
DIVMAIN=$(HOME)/divimp
COMMONS=$(DIVMAIN)/commons
DIVLOCALINC=$(DIVMAIN)/local/gcc-9.3.0/include
#
DIVSRC =$(DIVMAIN)/div6/src
DIVF90SRC=$(DIVSRC)/f90
COMSRC =$(DIVMAIN)/comsrc
COMF90SRC=$(COMSRC)/f90
#
#
VPATH=$(DIVSRC):$(COMSRC):$(DIVF90SRC):$(COMF90SRC)

#
# Suffixes
#
.SUFFIXES: .o $(DIVEXT) $(DIVF90EXT)

#
# Compiler
#
FCOMP=gcc
RM=rm -f
#

#
# Optimization and debugging flags
#
ARCH=
ARCHOPT= -march=$(ARCH)
OPTC= -O
#
#OPT_GFORTRAN = -fbounds-check -fbacktrace -mcmodel=medium -O0 -ffree-line-length-none
#OPT_GFORTRAN = --fbounds-check -fbacktrace -mcmodel=medium -finit-local-zero -O0 -ffree-line-length-none
#OPT_GFORTRAN = -fbounds-check -fbacktrace -mcmodel=medium -finit-local-zero -O0
#OPT_GFORTRAN = -g -fbacktrace -O0 -ffree-line-length-none -fcheck=all
OPT_GFORTRAN = -g -fbacktrace -O0 -ffree-line-length-none -Wall -fcheck=bounds -fcheck=array-temps -fcheck=do -fcheck=mem -fcheck=pointer -std=legacy
#
OPT = $(OPT_GFORTRAN)
#
OPTS=
#
# Fortran compiler options
#
FFLAGS= $(OPT) 
#
# Common block directory
#
IDIR=$(COMMONS)
IDIR_DIV=$(DIVLOCALINC)
INCL= -I$(IDIR) -I$(IDIR_DIV) -I/usr/include
#
# C-compiler
#
CC= gcc
#
# C-flags
#
CFLAGS= $(OPTC)

#
# Libraries
#
#
# AIX
#
# LIBS= -L/u/local/lib -lxlf -lc -lghost -lpostsc
#
# LIBS= -L/usr/local/lib -lc -lghost -lpostsc -L/usr/pgi/linux86/lib -lpgftnrtl
#
#
# LINUX
#
#LIBS= -L/usr/local/lib64 -lc -L../libsrc -lghost_64 -lpostcl_64
#LIBS= -L/usr/local/lib -lc -L../libsrc -lghost -lpostcl
#LIBS= -L/usr/local/lib -lc -L../libsrc -lghost -lpostsc
LOCAL_DIV_LIB=$(DIVMAIN)/local/gcc-9.3.0/lib
LOCAL_DIV_LIB_STATIC=$(DIVMAIN)/libsrc/ifort64
#LIBS= -L$(LOCAL_DIV_LIB) -lc -lnetcdf -lnetcdff -lghost -lpostcl
#LIBS= -L$(LOCAL_DIV_LIB) -L$(LOCAL_DIV_LIB_STATIC) -lc -lm -lnetcdf -lnetcdff -lgfortran -lghost
#LIBS= -L$(LOCAL_DIV_LIB) -lc -lm -lnetcdf -lnetcdff -lghost -lpostsc -lgfortran
LIBS= -Wl,-rpath=$(LOCAL_DIV_LIB) -L$(LOCAL_DIV_LIB) -lc -lm -lnetcdff -lnetcdf -lghost -lpostsc -lgfortran
#
#
# Name of target to build
#
TARG=div6O$(VER)
TARGALT=div6aO$(VER)

#
# Objects to compile
#

include OBJECT_LIST

#
# Rules
#

#$(DIVEXT).o:
#	cp $(DIVSRC)$*$(DIVEXT) $*.f
#	$(FCOMP) $(FFLAGS) $(ARCH) -I$(IDIR) $(OPTS) -c $*.f
#	rm $*.f


#$(DIVEXT).o:
#	$(FCOMP) $(FFLAGS) $(ARCH) -I$(IDIR) $(OPTS) -c $?


#$(DIVF90EXT).o:
#	$(FCOMP) $(FFLAGS) $(ARCH) -I$(IDIR) $(OPTS) -c $?


#
# Basic creation rules - apparently the file extensions can't be aliased as a variable
#

%.o: %.f
	$(FCOMP) $(FFLAGS) $(ARCHOPT) $(INCL) $(OPTS) -c $?
#	$(FCOMP) $(FFLAGS) $(ARCH) -I$(IDIR) $(OPTS) -c $?

%.o: %.f90
	$(FCOMP) $(FFLAGS) $(ARCHOPT) $(INCL) $(OPTS) -c $?
#	$(FCOMP) $(FFLAGS) $(ARCH) -I$(IDIR) $(OPTS) -c $?


#.f.o:
#	rm -f $*.f
#	rm -f $*.mod
#	cp $? $*.f
#	$(FCOMP) $(FFLAGS) $(ARCH) -I$(IDIR) $(OPTS) -c $*.f
#	$(RM) $*.f

#.f90.o:
#	rm -f $*.f90
#	rm -f $*.mod
#	cp $? $*.f90
#	$(FCOMP) $(FFLAGS) $(ARCH) -I$(IDIR) $(OPTS) -c $*.f90
#	$(RM) $*.f90

#$(COMEXT).o:
#	rm -f $*.f
#	rm -f $*.mod
#	cp $? $*.f
#	$(FCOMP) $(FFLAGS) $(ARCH) -I$(IDIR) $(OPTS) -c $*.f
#	$(RM) $*.f

#$(COMF90EXT).o:
#	rm -f $*.f90
#	rm -f $*.mod
#	cp $? $*.f90
#	$(FCOMP) $(FFLAGS) $(ARCH) -I$(IDIR) $(OPTS) -c $*.f90
#	$(RM) $*.f90

#
# Target
#

$(TARG): $(OBJECTS)
	$(FCOMP) $(OBJECTS) $(ARCHOPT) $(OPT) $(LIBS) -o $(TARG)

#
# Various MAKE targets for different platforms and optimization
# levels - need to do an rm *.o to make sure that the whole
# thing is recompiled - it could be set up to do this automatically
# except for the one environment used for development.  
#

64bit:
	$(MAKE)  "OPT=$(OPT_GFORTRAN)" "ARCH=x86-64"

debug:
	$(MAKE)  "OPT=$(OPT_GFORTRAN)" "ARCH=x86-64" "TARG=div6dbg$(VER)"

clean:
	$(RM) *.o
	$(RM) *.lst
	$(RM) *.f
	$(RM) *.f90
	$(RM) *.mod
	$(RM) *.oo







