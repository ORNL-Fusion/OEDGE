C  6.4.04:  include torl in default step function
C  nov. 11.05  jet-2005 patch 1: new parameter shwl at call to smsrf1
C              added:  print ekflx, eshflx: total kinetic and sheath fluxes
C              from newly added step functions  elstep, shstep
C              now return shwl, efwl(ipls) for use in locate.f
C              in locate: new options nemod1=8,9 for using efwl(ipls)
C              efwl(ipls) is the kinetic ion energy flux (W) at sheath entrance
C  nov.14.05: bug fix, v.k., istra --> istep for aleft(1,....) (twice)
C  may 06: sampling on 2nd order additional surface modified:
C          sign of determinant is now sampled. rejection with respect to bounding box
c  aug 06: new option SORIND.gt.100 for step functions introducted. 3rd digit is now
c          pointer to species of step function
!pb 22.03.07: LEVGEO=6 --> LEVGEO=10
C
      SUBROUTINE EIRENE_SAMSRF
C
C  THIS SUBROUTINE SAMPLES THE INITIAL CO-ORDINATES OF A PARTICLE
C  HISTORY, WHICH STARTS ON A SURFACE
C
      USE EIRMOD_PRECISION
      USE EIRMOD_PARMMOD
      USE EIRMOD_COMUSR
      USE EIRMOD_CADGEO
      USE EIRMOD_CCONA
      USE EIRMOD_CLOGAU
      USE EIRMOD_CINIT
      USE EIRMOD_CUPD
      USE EIRMOD_CPOLYG
      USE EIRMOD_CGRID
      USE EIRMOD_CTRCEI
      USE EIRMOD_CGEOM
      USE EIRMOD_CTETRA
      USE EIRMOD_COMPRT
      USE EIRMOD_CPES
      USE EIRMOD_COMSOU
      USE EIRMOD_CSTEP
      USE EIRMOD_CLGIN
      USE EIRMOD_CTRIG
 
      IMPLICIT NONE
 
      REAL(DP), INTENT(OUT) :: TEWL, SHWL, VXWL(*), VYWL(*), VZWL(*),
     .                         TIWL(*), DIWL(*), EFWL(*), WEISPZ(*)
      INTEGER, INTENT(IN) :: NLSF
      REAL(DP) :: ZZ(3)
      REAL(DP) :: X1, Y1, Z1, X2, Y2, Z2, X3, Y3, Z3, ELLZZ1, EP1ZZ1,
     .          WINK, XR, EIRENE_STEP0, DELR, CS, EIRENE_STEP, FL, DET,
     .          X0TEST, Y0TEST, S, AN, P, Q, VVX, D, VVI, VVY, BL, PH,
     .          Z0TEST, RNF, ZH, EIRENE_STEP1, DELTA, ZM, XLAMDA, BABS,
     .          CTETHA
      INTEGER :: ISID, IDUM, EIRENE_LEARC1, NDUM, EIRENE_LEARC2, NT, 
     .           IEN, IAN,
     .           EIRENE_LEARCA, ITET, ISGRD1, IS2, IP, ISTEP, ISGRD2,
     .           IS1, ISGRD3, NSMX, K, NL3J, ISTR, ISR, NL2J, NL1J,
     .           IERROR, ISOR, ISRFS, ICOUNT, IPLG, I, ILTR, IAUSR,
     .           IBUSR, IRUSR, IPUSR, ITUSR, IK, J, JCALC, IINDEX,
     .           KAN, KEN, ISRPB, ISRND, ITRI, IS, NBIN, INDSRF,
     .           IPLSTI, IPLSV, IT, IPL, NANZ, IPLSD(NPLS), ISORFL, INS,
     .           ISTEP_SPEZ
      REAL(DP):: FF, TORL(NSTEP,NGITT)
      REAL(DP):: FLX(NPLS),EKFLX(NPLS),ESHFLX(NPLS)
      REAL(DP), EXTERNAL :: RANF_EIRENE
      INTEGER, EXTERNAL :: EIRENE_IDEZ
      REAL(DP), ALLOCATABLE, SAVE ::
     .        ALEFT(:,:,:), BRGHT(:,:,:), XI(:,:,:), XE(:,:,:)
      INTEGER, ALLOCATABLE, SAVE :: INDTEC(:,:)
      LOGICAL :: LOGTST
      INTEGER :: ITSIDE(3,4)
      DATA ITSIDE /1,2,3,
     .             1,4,2,
     .             2,4,3,
     .             3,4,1/
C
C  INITIALIZE DATA FOR SURFACE SAMPLING FOR STRATUM NO. ISTRA
C
      ENTRY EIRENE_SAMSF0
 
      DO ISTRA=1,NSTRAI
 
      IF (.NOT.NLSRF(ISTRA)) CYCLE
 
      IERROR=0
 
      IF (.NOT.ALLOCATED(INDTEC)) THEN
        ALLOCATE (INDTEC(3*NSRFS,NSTRA))
        ALLOCATE (ALEFT(3,NSRFS,NSTRA))
        ALLOCATE (BRGHT(3,NSRFS,NSTRA))
        ALLOCATE (XI(3,NSRFS,NSTRA))
        ALLOCATE (XE(3,NSRFS,NSTRA))
      END IF
C
C  LOOP OVER SOURCE SURFACES: ISRFS
C
      DO 1 ISRFS=1,NSRFSI(ISTRA)
C
        ISOR=SORLIM(ISRFS,ISTRA)
        ISORFL=EIRENE_IDEZ(INT(SORIFL(ISRFS,ISTRA)),4,4)
C
        IF (SORLIM(ISRFS,ISTRA).GT.0.AND.INDIM(ISRFS,ISTRA).EQ.1.) THEN
          IF (INGRDA(ISRFS,ISTRA,1).NE.INGRDE(ISRFS,ISTRA,1)) THEN
            WRITE (iunout,*) 'WARNING FROM SAMSF0, ISTRA= ',ISTRA
            WRITE (iunout,*) 'NEW INPUT FOR INGRDA,INGRDE....'
            WRITE (iunout,*) 'AUTOMATIC CORRECTION CARRIED OUT '
            INGRDA(ISRFS,ISTRA,2)=INGRDA(ISRFS,ISTRA,1)
            INGRDE(ISRFS,ISTRA,2)=INGRDE(ISRFS,ISTRA,1)
            INGRDA(ISRFS,ISTRA,1)=INSOR(ISRFS,ISTRA)
            INGRDE(ISRFS,ISTRA,1)=INSOR(ISRFS,ISTRA)
          ENDIF
        ENDIF
C  HAS THIS SURFACE SOURCE A PREPROGRAMMED DISTRIBUTION
C
        IF (ISOR.LE.0) THEN
C  NOW INITIALIZE USER SUPPLIED SOURCE SAMPLING
          ISR=ISRFS
          ISTR=ISTRA
          CALL EIRENE_SM0USR(ISR,ISTR,
     .                SORAD1(ISR,ISTR),SORAD2(ISR,ISTR),
     .                SORAD3(ISR,ISTR),SORAD4(ISR,ISTR),
     .                SORAD5(ISR,ISTR),SORAD6(ISR,ISTR))
          GOTO 1
        ENDIF
C  YES
        NL1J=ISRFS
        NL2J=NL1J+NSRFS
        NL3J=NL2J+NSRFS
        INDTEC(NL1J,ISTRA)=EIRENE_IDEZ(ISOR,1,4)
        INDTEC(NL2J,ISTRA)=EIRENE_IDEZ(ISOR,2,4)
        INDTEC(NL3J,ISTRA)=EIRENE_IDEZ(ISOR,3,4)
C
C  IS A STEP FUNCTION REQUESTED?
C
        ISTEP=0
        ISTEP_SPEZ=0
        IF (INDTEC(NL1J,ISTRA).NE.4.AND.INDTEC(NL2J,ISTRA).NE.4.AND.
     .      INDTEC(NL3J,ISTRA).NE.4) GOTO 7
C
C  YES. CHECK INPUT DATA AND STORAGE
C
        ISTEP=MOD(IDINT(REAL(SORIND(ISRFS,ISTRA),KIND(1.D0))),100)
        ISTEP_SPEZ=SORIND(ISRFS,ISTRA)/100
C
        IF (ISTEP.EQ.0) THEN
          WRITE (iunout,*) 'ERROR IN PRIMARY SOURCE DATA '
          WRITE (iunout,*) 'STEPFUNCTION REQUESTED FOR SOURCE SURFACE '
          WRITE (iunout,*) 'NO. ', INSOR(ISRFS,ISTRA),
     .      ' BUT SORIND.EQ.0..'
          CALL EIRENE_EXIT_OWN(1)
        ELSEIF (ISTEP.GT.NSTEP) THEN
          CALL EIRENE_MASPRM('NSTEP',5,NSTEP,'ISTEP',5,ISTEP,IERROR)
          CALL EIRENE_EXIT_OWN(1)
        ENDIF
C
C  HAS THIS STEPFUNCTION NO. ISTEP STILL TO BE INITIALIZED?
C
        IF (ISTUF(ISTEP).EQ.0) THEN
C  YES
C
C  INITIALIZE STEPFUNCTION NO. ISTEP BY DEFAULT MODEL:
C  DEFAULT MODEL FOR ISTEP: NPLSI STEP FUNCTIONS FROM BULK ION FLUXES
C
C  FIRST: RADIAL STEP FUNCTION:
C
          IF (INDTEC(NL1J,ISTRA).EQ.4) THEN
C
C  USE X-OR RADIAL DISTRIBUTION OF ION FLUX 0.5*NI(R,Y0,Z0)*CS(R,Y0,Z0)*(DELTA-Z
C  WITH: CS = COMMON ION ACOUSTIC SPEED
C  WITH: DELTA-Z = LENGTH IN TOROIDAL OR Z-DIRECTION
C  Y0:
            IF (INDIM(ISRFS,ISTRA).NE.2.OR..NOT.NLPOL) THEN
              IP=1
            ELSEIF (INDIM(ISRFS,ISTRA).EQ.2.AND.NLPOL) THEN
              IP=INSOR(ISRFS,ISTRA)
            ENDIF
            IF (INDIM(ISRFS,ISTRA).NE.3.OR..NOT.NLTOR) THEN
              IT=1
            ELSEIF (INDIM(ISRFS,ISTRA).EQ.3.AND.NLTOR) THEN
              IT=INSOR(ISRFS,ISTRA)
              WRITE (iunout,*)
     .          'DEFAULT STEP FUNCTIONS EIRENE_ONLY AVAILABLE FOR'
              WRITE (iunout,*) 'SAMPLING OF RADIAL (OR X-) CO-ORDINATE '
              WRITE (iunout,*) 'ON A POLOIDAL (OR Y-) SURFACE '
              WRITE (iunout,*)
     .  'DEFINE STEP FUNCTION EIRENE_ELSEWHERE, ',
     .                    'EG. IN SAMUSR'
              WRITE (iunout,*) 'CALL EXIT '
              CALL EIRENE_EXIT_OWN(1)
            ENDIF
C
C  CURRENTLY: IN STANDARD GEOMETRY BLOCK  IBLOCK=1, TOROIDAL CELL IT=1
C
 
            IF (LEVGEO.EQ.1) THEN
              KAN=1
              KEN=NR1STM
              DO K=1,NR1STM
                IRSTEP(ISTEP,K)=K
                IASTEP(ISTEP,K)=0
                IBSTEP(ISTEP,K)=1
                IPSTEP(ISTEP,K)=IP
                IF (ISORFL == 1) IPSTEP(ISTEP,K)=IP-1
                ITSTEP(ISTEP,K)=IT
                RRSTEP(ISTEP,K)=RSURF(K)
                IF (NLTRZ) THEN
                  TORL(ISTEP,K)=ZDF
                ELSEIF (NLTRA.OR.NLTRT) THEN
                  TORL(ISTEP,K)=(RSURF(K+1)+RSURF(K))/2._DP
                  TORL(ISTEP,K)=TORL(ISTEP,K)*2._DP*PIA
                ENDIF
              ENDDO
              NBIN=NR1ST
            ELSEIF (LEVGEO.EQ.2.OR.LEVGEO.EQ.3) THEN
              KAN=1
              KEN=NR1STM
              DO K=1,NR1STM
                IRSTEP(ISTEP,K)=K
                IASTEP(ISTEP,K)=0
                IBSTEP(ISTEP,K)=1
                IPSTEP(ISTEP,K)=IP
                IF (ISORFL == 1) IPSTEP(ISTEP,K)=IP-1
                ITSTEP(ISTEP,K)=IT
                RRSTEP(ISTEP,K)=BGLP(K,IP)
                IF (NLTRZ) THEN
                  TORL(ISTEP,K)=ZDF
                ELSEIF (NLTRA.OR.NLTRT) THEN
                  TORL(ISTEP,K)=(XPOL(K+1,IP)+XPOL(K,IP))/2._DP
                  TORL(ISTEP,K)=TORL(ISTEP,K)*2._DP*PIA
                ENDIF
              ENDDO
              NBIN=NR1ST
            ELSEIF (LEVGEO.EQ.4) THEN
              K=0
              RRSTEP(ISTEP,1) = 0._DP
              INDSRF=INSOR(ISRFS,ISTRA)
              IF (INDSRF < 0) INDSRF=NLIM+ABS(INDSRF)
              DO ITRI=1,NTRII
                DO IS=1,3
                  IF (INMTI(IS,ITRI) == INDSRF) THEN
                    K=K+1
                    IS1=IS+1
                    IF (IS1.GT.3) IS1=1
                    IRSTEP(ISTEP,K)=ITRI
                    IPSTEP(ISTEP,K)=IS
                    ITSTEP(ISTEP,K)=IT
                    IASTEP(ISTEP,K)=0
                    IBSTEP(ISTEP,K)=1
!pb  projection to b-field switched off!!!
!pb  to allow for step functions on surfaces perpendicular to magnetic field
!pb                    BABS=SQRT(BXIN(ITRI)**2+BYIN(ITRI)**2+BZIN(ITRI)**2)
!pb                    CTETHA=ABS((PTRIX(IS,ITRI)*BXIN(ITRI) +
!pb     .                          PTRIY(IS,ITRI)*BYIN(ITRI))/BABS)
                    CTETHA = 1._DP
                    RRSTEP(ISTEP,K+1)=RRSTEP(ISTEP,K) + CTETHA*SQRT(
     .              (XTRIAN(NECKE(IS,ITRI))-XTRIAN(NECKE(IS1,ITRI)))**2+
     .              (YTRIAN(NECKE(IS,ITRI))-YTRIAN(NECKE(IS1,ITRI)))**2)
                    IF (NLTRZ) THEN
                      TORL(ISTEP,K)=ZDF
                    ELSEIF (NLTRA.OR.NLTRT) THEN
                      TORL(ISTEP,K)=
     .                  (XTRIAN(NECKE(IS,ITRI))+XTRIAN(NECKE(IS1,ITRI)))
     .                  /2._DP
                      TORL(ISTEP,K)=TORL(ISTEP,K)*2._DP*PIA
                    ENDIF
                  END IF
                END DO
              END DO
              KAN=1
              KEN=K
              NBIN=K+1
            ELSEIF (LEVGEO.EQ.5) THEN
              K=0
              RRSTEP(ISTEP,1) = 0._DP
              DO ITET=1,NTET
                DO IS=1,4
                  IF (INMTIT(IS,ITET) == NLIM+INSOR(ISRFS,ISTRA)) THEN
                    CALL EIRENE_TET_STEP (ISTEP,ITET,IS,K)
                  END IF
                END DO
              END DO
              KAN=1
              KEN=K
C  toroidal length: already included in RRSTEP, which is a surface area
              TORL(ISTEP,KAN:KEN)=1._DP
              NBIN=K+1
            ELSEIF (LEVGEO.GE.10) THEN
              GOTO 3
            ENDIF
C
C  NOW SET THE FLUX DISTRIBUTION FLSTEP
C
            DO K=KAN,KEN
              NBLCKA=NSTRD*(IBSTEP(ISTEP,K)-1)+IASTEP(ISTEP,K)
              IF ((LEVGEO == 4) .OR. (LEVGEO == 5)) THEN
                NCELL=IRSTEP(ISTEP,K)+
     .            (ITSTEP(ISTEP,K)-1)*NP2T3*
     .             NR1P2+NBLCKA
              ELSE
                NCELL=IRSTEP(ISTEP,K)+
     .            ((IPSTEP(ISTEP,K)-1)+(ITSTEP(ISTEP,K)-1)*NP2T3)*
     .             NR1P2+NBLCKA
              END IF
              TESTEP(ISTEP,K)=TEIN(NCELL)
              DO 2 IPLS=1,NPLSI
                IPLSTI = MPLSTI(IPLS)
                IPLSV = MPLSV(IPLS)
                TISTEP(IPLSTI,ISTEP,K)=TIIN(IPLSTI,NCELL)
                IF (INDPRO(4) == 8) THEN
                  CALL EIRENE_VECUSR(2,VXSTEP(IPLSV,ISTEP,K),
     .                          VYSTEP(IPLSV,ISTEP,K),
     .                          VZSTEP(IPLSV,ISTEP,K),IPLSV)
                ELSE
                  VXSTEP(IPLSV,ISTEP,K)=VXIN(IPLSV,NCELL)
                  VYSTEP(IPLSV,ISTEP,K)=VYIN(IPLSV,NCELL)
                  VZSTEP(IPLSV,ISTEP,K)=VZIN(IPLSV,NCELL)
                END IF
                DISTEP(IPLS,ISTEP,K)=DIIN(IPLS,NCELL)
                CS=CVEL2A*SQRT((TIIN(IPLSTI,NCELL)+TEIN(NCELL))/
     .             RMASSP(IPLS))
                FF=ELCHA*CS
                FLSTEP(IPLS,ISTEP,K)=FF*DIIN(IPLS,NCELL)*TORL(ISTEP,K)
2             CONTINUE
            END DO
3           CONTINUE
C
C  LAST INTERVAL BOUNDARY FOR SAMPLING DISTRIBUTION
C
            IF (LEVGEO.EQ.1) THEN
              RRSTEP(ISTEP,NR1ST)=RSURF(NR1ST)
            ELSEIF (LEVGEO.EQ.2.OR.LEVGEO.EQ.3) THEN
              RRSTEP(ISTEP,NR1ST)=BGLP(NR1ST,IP)
            ELSEIF (LEVGEO.GE.4) THEN
C  RRSTEP(ISTEP,NBIN) ALREADY SET ABOVE
            ENDIF
            FL=EIRENE_STEP(1,NPLSI,NBIN,ISTEP)
C
          ELSEIF (INDTEC(NL2J,ISTRA).EQ.4) THEN
            WRITE (iunout,*)
     .  'DEFAULT STEP FUNCTIONS EIRENE_ONLY AVAILABLE FOR'
            WRITE (iunout,*) 'SAMPLING OF RADIAL CO-ORDINATE '
            WRITE (iunout,*)
     .        'DEFINE STEP FUNCTION EIRENE_ELSEWHERE, EG. IN SAMUSR'
            WRITE (iunout,*) 'CALL EXIT '
            CALL EIRENE_EXIT_OWN(1)
C
          ELSEIF (INDTEC(NL3J,ISTRA).EQ.4) THEN
            WRITE (iunout,*)
     .  'DEFAULT STEP FUNCTIONS EIRENE_ONLY AVAILABLE FOR'
            WRITE (iunout,*) 'SAMPLING OF RADIAL CO-ORDINATE '
            WRITE (iunout,*)
     .        'DEFINE STEP FUNCTION EIRENE_ELSEWHERE, EG. IN SAMUSR'
            WRITE (iunout,*) 'CALL EXIT '
            CALL EIRENE_EXIT_OWN(1)
          ENDIF
C
        ENDIF
C
7       CONTINUE
C
C  DEFINE LEFT AND RIGHT BOUNDARY OF SAMPLING INTERVALS.
C
        IF (INDIM(ISRFS,ISTRA).EQ.1) THEN
C  SOURCE ON RADIAL SURFACE: SAMPLE SECOND AND THIRD CO-ORDINATE,
C                            COMPUTE FIRST CO-ORDINATE
C
          INDTEC(NL1J,ISTRA)=0
C
          ISGRD2=INGRDA(ISRFS,ISTRA,2)+INGRDE(ISRFS,ISTRA,2)
          ISGRD3=INGRDA(ISRFS,ISTRA,3)+INGRDE(ISRFS,ISTRA,3)
          IF ((LEVGEO.EQ.2.OR.LEVGEO.EQ.3).AND.ISGRD2.GT.0) THEN
            IS1=MAX0(1,INGRDA(ISRFS,ISTRA,2))
!pb            IS2=MIN0(NP2ND,INGRDE(ISRFS,ISTRA,2))
            IS2=MIN0(NRPLG,INGRDE(ISRFS,ISTRA,2))
            ALEFT(2,ISRFS,ISTRA)=BGL(INSOR(ISRFS,ISTRA),IS1)
            BRGHT(2,ISRFS,ISTRA)=BGL(INSOR(ISRFS,ISTRA),IS2)
          ELSEIF (LEVGEO.EQ.4.OR.LEVGEO.EQ.5) THEN
            ISTEP=MOD(IDINT(REAL(SORIND(ISRFS,ISTRA),KIND(1.D0))),100)
            ISTEP_SPEZ=SORIND(ISRFS,ISTRA)/100
            IF (ISTEP.NE.0.AND.NSMAX(ISTEP).NE.0) THEN
              ALEFT(2,ISRFS,ISTRA)=RRSTEP(ISTEP,1)
              BRGHT(2,ISRFS,ISTRA)=RRSTEP(ISTEP,NSMAX(ISTEP))
            ELSE IF ((ISTEP == 0) .AND. (LEVGEO == 4)) THEN
!PB
              INS = INSOR(ISRFS,ISTRA)
              ALEFT(2,ISRFS,ISTRA)=SURF_TRIAN(INS)%BGLT(1)
              BRGHT(2,ISRFS,ISTRA)=SURF_TRIAN(INS)%
     .                             BGLT(SURF_TRIAN(INS)%NUMTR+1)
            ELSE
              WRITE (iunout,*) ' ERROR IN SAMSRF '
              WRITE (iunout,*)
     .          ' INDIM=1 ONLY FORESEEN WITH STEPFUNCTION '
              WRITE (iunout,*) ' FOR LEVGEO=4 OR LEVGEO=5 '
              CALL EIRENE_EXIT_OWN(1)
            ENDIF
          ELSE
            ALEFT(2,ISRFS,ISTRA)=SORAD3(ISRFS,ISTRA)
            BRGHT(2,ISRFS,ISTRA)=SORAD4(ISRFS,ISTRA)
          ENDIF
          ALEFT(3,ISRFS,ISTRA)=SORAD5(ISRFS,ISTRA)
          BRGHT(3,ISRFS,ISTRA)=SORAD6(ISRFS,ISTRA)
        ENDIF
C
        IF (INDIM(ISRFS,ISTRA).EQ.2) THEN
C  SOURCE ON POLOIDAL SURFACE: SAMPLE FIRST AND THIRD CO-ORDINATE,
C                              COMPUTE SECOND CO-ORDINATE
C
          INDTEC(NL2J,ISTRA)=0
C
          ISGRD1=INGRDA(ISRFS,ISTRA,1)+INGRDE(ISRFS,ISTRA,1)
          ISGRD3=INGRDA(ISRFS,ISTRA,3)+INGRDE(ISRFS,ISTRA,3)
          IF ((LEVGEO.EQ.2.OR.LEVGEO.EQ.3).AND.ISGRD1.GT.0) THEN
            IS1=MAX0(1,INGRDA(ISRFS,ISTRA,1))
            IS2=MIN0(NR1ST,INGRDE(ISRFS,ISTRA,1))
            ALEFT(1,ISRFS,ISTRA)=BGLP(IS1,INSOR(ISRFS,ISTRA))
            BRGHT(1,ISRFS,ISTRA)=BGLP(IS2,INSOR(ISRFS,ISTRA))
          ELSE
            ALEFT(1,ISRFS,ISTRA)=SORAD1(ISRFS,ISTRA)
            BRGHT(1,ISRFS,ISTRA)=SORAD2(ISRFS,ISTRA)
          ENDIF
          ALEFT(3,ISRFS,ISTRA)=SORAD5(ISRFS,ISTRA)
          BRGHT(3,ISRFS,ISTRA)=SORAD6(ISRFS,ISTRA)
        ENDIF
C
        IF (INDIM(ISRFS,ISTRA).EQ.3) THEN
C  SOURCE ON TOROIDAL SURFACE: SAMPLE FIRST AND SECOND CO-ORDINATE,
C                              COMPUTE THIRD CO-ORDINATE
C
          INDTEC(NL3J,ISTRA)=0
C
          ISGRD1=INGRDA(ISRFS,ISTRA,1)+INGRDE(ISRFS,ISTRA,1)
          ISGRD2=INGRDA(ISRFS,ISTRA,2)+INGRDE(ISRFS,ISTRA,2)
C         IF (LEVGEO.EQ.3.AND.ISGRD1.GT.0) THEN
C         ELSE
            ALEFT(1,ISRFS,ISTRA)=SORAD1(ISRFS,ISTRA)
            BRGHT(1,ISRFS,ISTRA)=SORAD2(ISRFS,ISTRA)
C         ENDIF
          ALEFT(2,ISRFS,ISTRA)=SORAD3(ISRFS,ISTRA)
          BRGHT(2,ISRFS,ISTRA)=SORAD4(ISRFS,ISTRA)
        ENDIF
C
        IF (INDIM(ISRFS,ISTRA).EQ.4) THEN
C  SOURCE ON RADIAL AND POLOIDAL SURFACES:
C      SAMPLE ARC-LENGTH AND THIRD CO-ORDINATE,
C      COMPUTE FIRST AND SECOND CO-ORDINATE FROM ARCLENGTH
C
          INDTEC(NL2J,ISTRA)=0
C
          ISTEP=MOD(IDINT(REAL(SORIND(ISRFS,ISTRA),KIND(1.D0))),100)
          ISTEP_SPEZ=SORIND(ISRFS,ISTRA)/100
          IF (ISTEP.NE.0.AND.NSMAX(ISTEP).NE.0) THEN
            ALEFT(1,ISRFS,ISTRA)=RRSTEP(ISTEP,1)
            BRGHT(1,ISRFS,ISTRA)=RRSTEP(ISTEP,NSMAX(ISTEP))
          ELSE
            WRITE (iunout,*) ' ERROR IN SAMSRF '
            WRITE (iunout,*) ' INDIM=4 ONLY FORESEEN WITH STEPFUNCTION '
            CALL EIRENE_EXIT_OWN(1)
          ENDIF
          ALEFT(3,ISRFS,ISTRA)=SORAD5(ISRFS,ISTRA)
          BRGHT(3,ISRFS,ISTRA)=SORAD6(ISRFS,ISTRA)
        ENDIF
C
        IF (INDIM(ISRFS,ISTRA).EQ.0) THEN
C  SOURCE ON ADDITIONAL SURFACE
          ALEFT(1,ISRFS,ISTRA)=SORAD1(ISRFS,ISTRA)
          BRGHT(1,ISRFS,ISTRA)=SORAD2(ISRFS,ISTRA)
          ALEFT(2,ISRFS,ISTRA)=SORAD3(ISRFS,ISTRA)
          BRGHT(2,ISRFS,ISTRA)=SORAD4(ISRFS,ISTRA)
          ALEFT(3,ISRFS,ISTRA)=SORAD5(ISRFS,ISTRA)
          BRGHT(3,ISRFS,ISTRA)=SORAD6(ISRFS,ISTRA)
        ENDIF
C
        IF (TRCSOU.AND.ISTEP.GT.0) THEN
          NSMX=NSMAX(ISTEP)
C  IDENTIFY THOSE BULK SPECIES WITH NON-ZERO FLUX
          FLX=0.
          EKFLX=0.
          ESHFLX=0.
          DO  IPLS=1,NPLSI
            DO  K=1,NSMX-1
              DELR=RRSTEP(ISTEP,K+1)-RRSTEP(ISTEP,K)
              FF=FLSTEP(IPLS,ISTEP,K)*DELR
              FLX(IPLS)=FLX(IPLS)+FF
              EKFLX(IPLS)=EKFLX(IPLS)+ELSTEP(IPLS,ISTEP,K)*DELR
              ESHFLX(IPLS)=ESHFLX(IPLS)+
     .                     FF*SHSTEP(ISTEP,K)*TESTEP(ISTEP,K)
            ENDDO
          ENDDO
          NANZ=COUNT(FLX(:).GT.0.D0)
          IPLSD(1:NANZ)=PACK((/(IPL,IPL=1,NPLSI)/),FLX(1:NPLSI).GT.0.D0)
C
          WRITE (iunout,*) 'FUNCTION STEP NO. ',ISTEP,': '
          WRITE (iunout,'(1X,A4,A12,5(2X,A7,I2,A12))')
     .    '   K','  RRSTEP    ',('FLSTEP(',IPLSD(IPL),'): AMP/CM**2',
     .    IPL=1,NANZ)
          DO 4 K=1,NSMX-1
            WRITE (iunout,'(1X,I4,1P,6E12.4/(5x,1P,6E12.4))')
     .               K,RRSTEP(ISTEP,K),
     .               (FLSTEP(IPLSD(IPL),ISTEP,K),IPL=1,NANZ)
4         CONTINUE
 
          WRITE (iunout,'(1X,I4,1P,2E12.4)') NSMX,RRSTEP(ISTEP,NSMX)
          CALL EIRENE_LEER(1)
 
          WRITE (iunout,*) 'FLUXES: PART., KINET., SHEATH; INTEGRATED:'
          DO 5 IPL=1,NANZ
            CALL EIRENE_MASJ1R('IP,FLUX      [A]',IPL,FLX(IPLSD(IPL)))
            CALL EIRENE_MASJ1R('IP,EKIN-FLUX [W]',IPL,EKFLX(IPLSD(IPL)))
            CALL
     .  EIRENE_MASJ1R('IP,ESH-FLUX  [W]',IPL,ESHFLX(IPLSD(IPL)))
5         CONTINUE
          CALL EIRENE_LEER(2)
        ENDIF
C
C
C  STEP FUNCTION INITIALISATION FINISHED.
C  NEXT: STORE SOME DATA TO SPEED UP SAMPLING FROM STEP FUNCTION
C
        ISPZ=0
        IF (NSPEZ(ISTRA).GT.0) ISPZ=NSPEZ(ISTRA)
        IF (ISTEP_SPEZ.GT.0) ISPZ=ISTEP_SPEZ
C
        IF (ISTEP.GT.0) THEN
          IF (ISPZ.GT.0.AND.ISPZ.LT.NSPSTI(ISTEP)) GOTO 991
          IF (              ISPZ.GT.NSPSTE(ISTEP)) GOTO 991
C
          IF (INDTEC(NL1J,ISTRA).EQ.4) THEN
            XI(1,ISRFS,ISTRA)=
     .           EIRENE_STEP0(ISPZ,ISTEP,ALEFT(1,ISRFS,ISTRA))
            XE(1,ISRFS,ISTRA)=
     .           EIRENE_STEP0(ISPZ,ISTEP,BRGHT(1,ISRFS,ISTRA))
            IF (TRCSOU) THEN
              WRITE (IUNOUT,*) ' XI ',XI(1,ISRFS,ISTRA)
              WRITE (IUNOUT,*) ' XE ',XE(1,ISRFS,ISTRA)
              DO IPL=1,NANZ
                WRITE (IUNOUT,*) 'FLUX ONTO SOURCE SURFACE [A] ',IPL,
     .                (XE(1,ISRFS,ISTRA)-XI(1,ISRFS,ISTRA))*
     .                 FLX(IPLSD(IPL))
              END DO
            END IF
          ELSEIF (INDTEC(NL2J,ISTRA).EQ.4) THEN
            XI(2,ISRFS,ISTRA)=
     .           EIRENE_STEP0(ISPZ,ISTEP,ALEFT(2,ISRFS,ISTRA))
            XE(2,ISRFS,ISTRA)=
     .           EIRENE_STEP0(ISPZ,ISTEP,BRGHT(2,ISRFS,ISTRA))
            IF (TRCSOU) THEN
              WRITE (IUNOUT,*) ' XI ',XI(2,ISRFS,ISTRA)
              WRITE (IUNOUT,*) ' XE ',XE(2,ISRFS,ISTRA)
              DO IPL=1,NANZ
                WRITE (IUNOUT,*) 'FLUX ONTO SOURCE SURFACE [A] ',IPL,
     .                (XE(2,ISRFS,ISTRA)-XI(2,ISRFS,ISTRA))*
     .                 FLX(IPLSD(IPL))
              END DO
            END IF
          ELSEIF (INDTEC(NL3J,ISTRA).EQ.4) THEN
            XI(3,ISRFS,ISTRA)=
     .           EIRENE_STEP0(ISPZ,ISTEP,ALEFT(3,ISRFS,ISTRA))
            XE(3,ISRFS,ISTRA)=
     .           EIRENE_STEP0(ISPZ,ISTEP,BRGHT(3,ISRFS,ISTRA))
            IF (TRCSOU) THEN
              WRITE (IUNOUT,*) ' XI ',XI(3,ISRFS,ISTRA)
              WRITE (IUNOUT,*) ' XE ',XE(3,ISRFS,ISTRA)
              DO IPL=1,NANZ
                WRITE (IUNOUT,*) 'FLUX ONTO SOURCE SURFACE [A] ',IPL,
     .                (XE(3,ISRFS,ISTRA)-XI(3,ISRFS,ISTRA))*
     .                 FLX(IPLSD(IPL))
              END DO
            END IF
          ENDIF
        ENDIF
C
1     CONTINUE
C
      IF (TRCSOU) CALL EIRENE_LEER(2)
 
      END DO    ! STRATA LOOP
 
      RETURN
C
      ENTRY EIRENE_SAMSF1
     .      (NLSF,TIWL,TEWL,DIWL,VXWL,VYWL,VZWL,EFWL,SHWL,WEISPZ)
C
      ICOUNT=0
100   CONTINUE
      ICOUNT=ICOUNT+1
C
C   NLSF=SURFACE INDEX IN (NSRFS ) SOURCE  ARRAYS
C
      JCALC=0
      ISTEP=0
C
      DO 101 ISPZ=1,NSPZ
        WEISPZ(ISPZ)=-1.
101   CONTINUE
C
C   USER SUPPLIED GENERATOR FOR X0,Y0,Z0. ONLY ONE CALL
C   FOR ALL 3 CO-ORDINATES. SUBR. SURTST IS NOT CALLED!
C
      IF (SORLIM(NLSF,ISTRA).LT.0.D0) THEN
        CALL EIRENE_SM1USR(NLSF,X0,Y0,Z0,
     .              SORAD1(NLSF,ISTRA),SORAD2(NLSF,ISTRA),
     .              SORAD3(NLSF,ISTRA),SORAD4(NLSF,ISTRA),
     .              SORAD5(NLSF,ISTRA),SORAD6(NLSF,ISTRA),
     .              IRUSR,IPUSR,ITUSR,IAUSR,IBUSR,
     .              TIWL,TEWL,DIWL,VXWL,VYWL,VZWL,EFWL,SHWL,WEISPZ)
        ISTEP=-1
        ZZ(1)=X0
        ZZ(2)=Y0
        ZZ(3)=Z0
        GOTO 1500
      ENDIF
C
      ZZ = 0._DP
      DO 1000 J=1,3
        IK=NLSF+(J-1)*NSRFS
        GOTO (10,20,30,40),INDTEC(IK,ISTRA)
C   ZZ(JCALC) IS TO BE CALCULATED FROM SURFACE-EQUATION
          IF (JCALC.NE.0) GOTO 997
          JCALC=J
          GOTO 1000
C   DELTA DISTRIBUTION AT CENTER OF INTERVALL
10      CONTINUE
          ZZ(J)=(ALEFT(J,NLSF,ISTRA)+BRGHT(J,NLSF,ISTRA))*0.5
          GOTO 1000
C   UNIFORM DISTRIBUTION IN THIS CO-ORDINATE
20      CONTINUE
          ZZ(J)=RANF_EIRENE( )*(BRGHT(J,NLSF,ISTRA)-
     .          ALEFT(J,NLSF,ISTRA))+ALEFT(J,NLSF,ISTRA)
          GOTO 1000
C   TRUNCATED EXPONENTIAL DECAY WITH LENGTH XLAMDA, FOR ONE CO-ORDINATE ONLY
C   PARAMETER: SOREXP
C   METHOD: COVEYOU-TRICK  (SPANIER-GELBARD, ADDISON WESLEY,  P 35)
30      CONTINUE
          DELTA=BRGHT(J,NLSF,ISTRA)-ALEFT(J,NLSF,ISTRA)
          XLAMDA=SOREXP(NLSF,ISTRA)
          ZM=DELTA/XLAMDA
          ZH=MOD(-LOG(RANF_EIRENE( )),ZM)
          ZZ(J)=XLAMDA*ZH+ALEFT(J,NLSF,ISTRA)
          GOTO 1000
C   STEPFUNCTION NO. ISTEP, FOR ONE CO-ORDINATE ONLY
C   PARAMETER: SORIND
40      CONTINUE
          ISTEP=MOD(IDINT(REAL(SORIND(NLSF,ISTRA),KIND(1.D0))),100)
          ISTEP_SPEZ = SORIND(NLSF,ISTRA)/100
          ISPZ=NSPEZ(ISTRA)
          IF (ISTEP_SPEZ.GT.0) ISPZ=ISTEP_SPEZ
          RNF=XI(J,NLSF,ISTRA)+RANF_EIRENE( )*
     .        (XE(J,NLSF,ISTRA)-XI(J,NLSF,ISTRA))
          ZZ(J)=EIRENE_STEP1(IINDEX,ISTEP,RNF,ISPZ)
          GOTO 1000
1000  CONTINUE
C
      IPOLG=1
C
1500  CONTINUE
C
C  1500---2000
C  IN CASE OF DEFAULT SAMPLING:
C    TWO OUT OF THE THREE CO-ORDINATES ZZ(1),ZZ(2),ZZ(3) ARE
C    SAMPLED.
C    FIND 3RD CO-ORDINATE FROM SURFACE EQUATION
C    CONVERT ZZ(1), ZZ(2), ZZ(3) TO CARTHESIAN CO-ORDINATES X0,Y0,Z0
C  IN CASE OF USER SUPPLIED SAMPLING:
C    THE THREE CARTHESIAN CO-ORDINATES X0,Y0,Z0 ARE GIVEN NOW
C    ONLY SURFACE FLAGS NLSRFX,...MRSURF,.... MUST BE SET
C
      IF (INDIM(NLSF,ISTRA).EQ.0) THEN
C  BIRTH POINT ON ADDITIONAL SURFACE, ZZ( ) ARE CARTHESIAN
        NLSRFX=.FALSE.
        NLSRFY=.FALSE.
        NLSRFZ=.FALSE.
        MTSURF=0
        MPSURF=0
        MRSURF=0
        MASURF=INSOR(NLSF,ISTRA)
        ILTR=ILTOR(MASURF)
        IF (NLTRZ.OR.     ILTR.NE.0) THEN
C Z0 IS GIVEN IN LOCAL CO-ORDINATE SYSTEM ILTOR
          Z0=ZZ(3)
        ELSEIF (NLTRA.AND.ILTR.EQ.0) THEN
          PHI=ZZ(3)*DEGRAD
C Z0 IS IRRELEVANT HERE, AND IS DETERMINED LATER FROM PHI
        ELSEIF (NLTRT.AND.ILTR.EQ.0) THEN
          PHI=ZZ(3)*DEGRAD
C Z0 IS IRRELEVANT HERE, AND IS DETERMINED LATER FROM PHI
        ENDIF
        IF (SORLIM(NLSF,ISTRA).LT.0.D0) GOTO 2000
C
        IF (JCALC.EQ.1) THEN
C  FIND X CO-ORDINATE X0 FROM Y=Y0 AND Z=Z0 ON SURFACE NO. MASURF
          Y0=ZZ(2)
          IF (NLTRA.AND.ILTR.EQ.0) THEN
            WRITE (iunout,*) 'Z0 IN SAMSRF FOR JCALC=1 ?? '
            CALL EIRENE_EXIT_OWN(1)
          ENDIF
          IF (JUMLIM(MASURF).NE.0) THEN
            IF (ABS(A1LM(MASURF)).LE.EPS12) GOTO 9931
            AN=-1./A1LM(MASURF)
            X0=(A0LM(MASURF)+Y0*A2LM(MASURF)+Z0*A3LM(MASURF))*AN
          ELSE
            S=A4LM(MASURF)
            Q=A0LM(MASURF)+(A2LM(MASURF)+A5LM(MASURF)*Y0)*Y0+
     .        (A3LM(MASURF)+A6LM(MASURF)*Z0+A9LM(MASURF)*Y0)*Z0
            P=A1LM(MASURF)+A7LM(MASURF)*Y0+A8LM(MASURF)*Z0
            IF (ABS(S).GT.EPS12) THEN
C  SECOND ORDER IN X
              AN=1./S
              Q=Q*AN
              P=P*AN
              PH=-P*0.5
              DET=PH*PH-Q
              IF (DET.LT.0.D0) THEN
                GOTO 999
              ELSEIF (DET.EQ.0.D0) THEN
                X0=PH
              ELSEIF (DET.GT.0.D0) THEN
                X0=PH+SIGN(1._DP,RANF_EIRENE()-0.5_DP)*SQRT(DET)
                CALL EIRENE_SURTST(X0,Y0,Z0,MASURF,LOGTST)
                IF (.NOT.LOGTST) THEN
                  IF (ICOUNT.LE.1000) GOTO 100
                  WRITE (IUNOUT,*) 'PROBABLY ILL DEFINED SURFACE '
                  WRITE (IUNOUT,*) 'SAMPLING, MASURF = ',MASURF
                  LGPART=.FALSE.
                  RETURN
                ENDIF
              ENDIF
            ELSEIF (ABS(P).GT.EPS12) THEN
C  FIRST ORDER IN X
              X0=Q/P
            ELSE
C  INDEPENDENT OF X
              GOTO 9931
            ENDIF
          ENDIF
C  CARRY OUT RANGE TEST FOR X0?
          X0TEST=ABS(ALEFT(1,NLSF,ISTRA)-BRGHT(1,NLSF,ISTRA))
          IF (X0TEST.LT.1.D-10) GOTO 2000
          IF (ALEFT(1,NLSF,ISTRA).GT.X0 .OR.
     .        BRGHT(1,NLSF,ISTRA).LT.X0) THEN
            IF (ICOUNT.LT.1000) GOTO 100
            WRITE (iunout,*)
     .        'WARNING FROM SAMSRF FROM X0TEST, ICOUNT=1000 '
            LGPART=.FALSE.
            RETURN
          ENDIF
 
        ELSEIF (JCALC.EQ.2) THEN
C    FIND Y CO-ORDINATE Y0 FROM X=X0 AND Z=Z0 ON SURFACE NO. MASURF
          X0=ZZ(1)
          IF (NLTRA.AND.ILTR.EQ.0) THEN
C  FIND Z0, NT,  FROM X0,PHI
            IF (PHI.LT.ZSURF(1)) PHI=PHI+PI2A
            IF (PHI.GT.ZSURF(NTTRA)) PHI=PHI-PI2A
            NT=EIRENE_LEARCA(PHI,ZSURF,1,NTTRA,1,'SAMSRF      ')
            IF (NT.LE.0.OR.NT.GT.NTTRAM) THEN
              WRITE (iunout,*) 'NT OUT OF RANGE IN SAMSRF '
              WRITE (iunout,*) PHI,ZFULL
              CALL EIRENE_EXIT_OWN(1)
            ENDIF
            X01=X0+RMTOR
            CALL EIRENE_FZRTRI(X0,Z0,NT,X01,PHI,NT)
          ENDIF
          IF (JUMLIM(MASURF).NE.0) THEN
            IF (ABS(A2LM(MASURF)).LE.EPS12) GOTO 9931
            AN=-1./A2LM(MASURF)
            Y0=(A0LM(MASURF)+X0*A1LM(MASURF)+Z0*A3LM(MASURF))*AN
          ELSE
            S=A5LM(MASURF)
            Q=A0LM(MASURF)+(A1LM(MASURF)+A4LM(MASURF)*X0)*X0+
     .        (A3LM(MASURF)+A6LM(MASURF)*Z0+A8LM(MASURF)*X0)*Z0
            P=A2LM(MASURF)+A7LM(MASURF)*X0+A9LM(MASURF)*Z0
            IF (ABS(S).GT.EPS12) THEN
C  SECOND ORDER IN Y
              AN=1./S
              Q=Q*AN
              P=P*AN
              PH=-P*0.5
              DET=PH*PH-Q
              IF (DET.LT.0.D0) THEN
                GOTO 999
              ELSEIF (DET.EQ.0.D0) THEN
                Y0=PH
              ELSEIF (DET.GT.0.D0) THEN
                Y0=PH+SIGN(1._DP,RANF_EIRENE()-0.5_DP)*SQRT(DET)
                CALL EIRENE_SURTST(X0,Y0,Z0,MASURF,LOGTST)
                IF (.NOT.LOGTST) THEN
                  IF (ICOUNT.LE.1000) GOTO 100
                  WRITE (IUNOUT,*) 'PROBABLY ILL DEFINED SURFACE '
                  WRITE (IUNOUT,*) 'SAMPLING, MASURF = ',MASURF
                  LGPART=.FALSE.
                  RETURN
                ENDIF
              ENDIF
            ELSEIF (ABS(P).GT.EPS12) THEN
C  FIRST ORDER IN Y
              Y0=Q/P
            ELSE
C  INDEPENDENT OF Y
              GOTO 9931
            ENDIF
          ENDIF
C  CARRY OUT RANGE TEST FOR Y0?
          Y0TEST=ABS(ALEFT(2,NLSF,ISTRA)-BRGHT(2,NLSF,ISTRA))
          IF (Y0TEST.LT.1.D-10) GOTO 2000
          IF (ALEFT(2,NLSF,ISTRA).GT.Y0 .OR.
     .        BRGHT(2,NLSF,ISTRA).LT.Y0) THEN
            IF (ICOUNT.LT.1000) GOTO 100
            WRITE (iunout,*)
     .        'WARNING FROM SAMSRF FROM Y0TEST, ICOUNT=1000 '
            LGPART=.FALSE.
            RETURN
          ENDIF
 
        ELSEIF (JCALC.EQ.3) THEN
C    FIND Z CO-ORDINATE Z0 FROM X=X0 AND Y=Y0 ON SURFACE NO. MASURF
          X0=ZZ(1)
          Y0=ZZ(2)
          IF ((NLTRA.OR.NLTRT).AND.ILTR.EQ.0) GOTO 9931
          IF (JUMLIM(MASURF).NE.0) THEN
            IF (ABS(A3LM(MASURF)).LE.EPS12) GOTO 9931
            AN=-1./A3LM(MASURF)
            Z0=(A0LM(MASURF)+X0*A1LM(MASURF)+Y0*A2LM(MASURF))*AN
          ELSE
            S= A6LM(MASURF)
            Q= A0LM(MASURF)+(A1LM(MASURF)+A4LM(MASURF)*X0)*X0+
     .        (A2LM(MASURF)+A5LM(MASURF)*Y0+A7LM(MASURF)*X0)*Y0
            P= A3LM(MASURF)+A8LM(MASURF)*X0+A9LM(MASURF)*Y0
            IF (ABS(S).GT.EPS12) THEN
C  SECOND ORDER IN Z
              AN=1./S
              Q=Q*AN
              P=P*AN
              PH=-P*0.5
              DET=PH*PH-Q
              IF (DET.LT.0.D0) THEN
                GOTO 999
              ELSEIF (DET.EQ.0.D0) THEN
                Z0=PH
              ELSEIF (DET.GT.0.D0) THEN
                Z0=PH+SIGN(1._DP,RANF_EIRENE()-0.5_DP)*SQRT(DET)
                CALL EIRENE_SURTST(X0,Y0,Z0,MASURF,LOGTST)
                IF (.NOT.LOGTST) THEN
                  IF (ICOUNT.LE.1000) GOTO 100
                  WRITE (IUNOUT,*) 'PROBABLY ILL DEFINED SURFACE '
                  WRITE (IUNOUT,*) 'SAMPLING, MASURF = ',MASURF
                  LGPART=.FALSE.
                  RETURN
                ENDIF
              ENDIF
            ELSEIF (ABS(P).GT.EPS12) THEN
C  FIRST ORDER IN Z
              Z0=Q/P
            ELSE
C  INDEPENDENT OF Z
              GOTO 9931
            ENDIF
          ENDIF
C  CARRY OUT RANGE TEST FOR Z0?
          Z0TEST=ABS(ALEFT(3,NLSF,ISTRA)-BRGHT(3,NLSF,ISTRA))
          IF (Z0TEST.LT.1.D-10) GOTO 2000
          IF (ALEFT(3,NLSF,ISTRA).GT.Z0 .OR.
     .        BRGHT(3,NLSF,ISTRA).LT.Z0) THEN
            IF (ICOUNT.LT.1000) GOTO 100
            WRITE (iunout,*) 'WARNING FROM SAMSRF, Z0TEST, ICOUNT=1000 '
            LGPART=.FALSE.
            RETURN
          ENDIF
C
        ELSE
          X0=ZZ(1)
          Y0=ZZ(2)
          Z0=ZZ(3)
        ENDIF
C
        CALL EIRENE_SURTST(X0,Y0,Z0,MASURF,LOGTST)
        IF (.NOT.LOGTST) GOTO 998
C
      ELSEIF (INDIM(NLSF,ISTRA).EQ.1) THEN
C  BIRTH POINT ON STANDARD RADIAL SURFACE  MRSURF
C  Y- OR POLOIDAL AND Z- OR TOROIDAL CO-ORDINATES MUST BE SAMPLED
C  X-OR RADIAL CO-ORDINATE IS COMPUTED FROM SURFACE EQUATION
C  SPECIAL CASE: LEVGEO=5: SAMPLE ON SURFACE IN 3D, DISCRETISED BY
C                SET OF TRIANGLES (SELECTED SIDES OF TETRAHEDONS)
        NLSRFX=.TRUE.
        NLSRFY=.FALSE.
        NLSRFZ=.FALSE.
        MRSURF=INSOR(NLSF,ISTRA)
        MPSURF=0
        MTSURF=0
        MASURF=0
        ILTR=0
        IF (NLTRZ) THEN
          Z0=ZZ(3)
        ELSEIF (NLTRA) THEN
          PHI=ZZ(3)*DEGRAD
        ELSEIF (NLTRT) THEN
          PHI=ZZ(3)*DEGRAD
        ENDIF
        IF (SORLIM(NLSF,ISTRA).LT.0.D0) GOTO 2000
        IF (JCALC.EQ.2.OR.JCALC.EQ.3) GOTO 993
C
        IF (LEVGEO.EQ.1) THEN
          X0=RSURF(MRSURF)
          Y0=ZZ(2)
        ELSEIF (LEVGEO.EQ.2) THEN
          X0=RSURF(MRSURF)*COS(ZZ(2)*DEGRAD)+EP1(MRSURF)
          Y0=RSURF(MRSURF)*SIN(ZZ(2)*DEGRAD)*ELL(MRSURF)
        ELSEIF (LEVGEO.EQ.3) THEN
          BL=ZZ(2)
          DO 1501 I=1,NPPLG
            DO 1501 J=NPOINT(1,I),NPOINT(2,I)
            IF (BL.LE.BGL(MRSURF,J)) GOTO 1502
1501      CONTINUE
          GOTO 996
1502      CONTINUE
          IPLG=J-1
          D=BL-BGL(MRSURF,IPLG)
          VVX=VPLX(MRSURF,IPLG)
          VVY=VPLY(MRSURF,IPLG)
          VVI=1./SQRT(VVX*VVX+VVY*VVY)
          X0=XPOL(MRSURF,IPLG)+D*VVX*VVI
          Y0=YPOL(MRSURF,IPLG)+D*VVY*VVI
        ELSEIF (LEVGEO.EQ.4) THEN
          BL=ZZ(2)
          IF (ISTEP.LE.0) THEN
            DO I=1,SURF_TRIAN(MRSURF)%NUMTR
              IF (BL.LE.SURF_TRIAN(MRSURF)%BGLT(I+1)) GOTO 1503
            END DO
            GOTO 996
 1503       CONTINUE
            ITRI = SURF_TRIAN(MRSURF)%ITRIAS(I)
            IPLG = SURF_TRIAN(MRSURF)%ITRISI(I)
            D = BL - SURF_TRIAN(MRSURF)%BGLT(I)
            MRSURF=ITRI
          ELSE
            ITRI=IRSTEP(ISTEP,IINDEX)
            IPLG=IPSTEP(ISTEP,IINDEX)
            MRSURF=ITRI
            D=BL-RRSTEP(ISTEP,IINDEX)
          END IF
          VVX=VTRIX(IPLG,ITRI)
          VVY=VTRIY(IPLG,ITRI)
          VVI=1./SQRT(VVX*VVX+VVY*VVY)
          X0=XTRIAN(NECKE(IPLG,ITRI))+D*VVX*VVI
          Y0=YTRIAN(NECKE(IPLG,ITRI))+D*VVY*VVI
        ELSEIF (LEVGEO.EQ.5) THEN
          IF (ISTEP.LE.0) GOTO 995
          ITET=IRSTEP(ISTEP,IINDEX)
          ISID=IPSTEP(ISTEP,IINDEX)
          MRSURF=ITET
          X1=XTETRA(NTECK(ITSIDE(1,ISID),ITET))
          Y1=YTETRA(NTECK(ITSIDE(1,ISID),ITET))
          Z1=ZTETRA(NTECK(ITSIDE(1,ISID),ITET))
          X2=XTETRA(NTECK(ITSIDE(2,ISID),ITET))
          Y2=YTETRA(NTECK(ITSIDE(2,ISID),ITET))
          Z2=ZTETRA(NTECK(ITSIDE(2,ISID),ITET))
          X3=XTETRA(NTECK(ITSIDE(3,ISID),ITET))
          Y3=YTETRA(NTECK(ITSIDE(3,ISID),ITET))
          Z3=ZTETRA(NTECK(ITSIDE(3,ISID),ITET))
          CALL EIRENE_FPOLYT_3(X1,Y1,Z1,X2,Y2,Z2,X3,Y3,Z3,X0,Y0,Z0)
        ELSEIF (LEVGEO.EQ.10) THEN
          WRITE (iunout,*) 'ERROR EXIT FROM SAMSRF. NLPOL ',LEVGEO
          CALL EIRENE_EXIT_OWN(1)
        ENDIF
C
      ELSEIF (INDIM(NLSF,ISTRA).EQ.2) THEN
C  BIRTH POINT ON STANDARD POLOIDAL SURFACE MPSURF
C  X-OR RADIAL CO-ORDINATE AND Z-OR TOROIDAL CO-ORDINATE MUST BE SAMPLED
C  Y-OR POLOIDAL CO-ORDINATE IS COMPUTED FROM SURFACE EQUATION
        NLSRFX=.FALSE.
        NLSRFY=.TRUE.
        NLSRFZ=.FALSE.
        MRSURF=0
        MPSURF=INSOR(NLSF,ISTRA)
        MTSURF=0
        MASURF=0
        ILTR=0
        IF (NLTRZ) THEN
          Z0=ZZ(3)
        ELSEIF (NLTRA) THEN
          PHI=ZZ(3)*DEGRAD
        ELSEIF (NLTRT) THEN
          PHI=ZZ(3)*DEGRAD
        ENDIF
        IF (SORLIM(NLSF,ISTRA).LT.0.D0) GOTO 2000
        IF (JCALC.EQ.1.OR.JCALC.EQ.3) GOTO 993
C
        IF (LEVGEO.EQ.1) THEN
          X0=ZZ(1)
          Y0=PSURF(MPSURF)
        ELSEIF (LEVGEO.EQ.2.AND.NLCRC) THEN
          X0=ZZ(1)*COSPH(MPSURF)
          Y0=ZZ(1)*SINPH(MPSURF)
        ELSEIF (LEVGEO.EQ.2.OR.LEVGEO.EQ.3) THEN
          BL=ZZ(1)
          DO 1601 J=2,NR1ST
            IF (BL.LE.BGLP(J,MPSURF)) GOTO 1602
1601      CONTINUE
          GOTO 996
1602      CONTINUE
          IPLG=J-1
          D=BL-BGLP(IPLG,MPSURF)
          VVX=VVTX(IPLG,MPSURF)
          VVY=VVTY(IPLG,MPSURF)
          VVI=1./SQRT(VVX*VVX+VVY*VVY)
          X0=XPOL(IPLG,MPSURF)+D*VVX*VVI
          Y0=YPOL(IPLG,MPSURF)+D*VVY*VVI
        ELSE
          WRITE (iunout,*) 'ERROR IN SAMSRF: LEVGEO AND INDIM? '
          CALL EIRENE_EXIT_OWN(1)
        ENDIF
C
      ELSEIF (INDIM(NLSF,ISTRA).EQ.3) THEN
C  BIRTH POINT ON STANDARD TOROIDAL SURFACE
C  X-OR RADIAL CO-ORDINATE AND Y-OR TOROIDAL CO-ORDINATE MUST BE SAMPLED
C  Z-OR TOROIDAL CO-ORDINATE IS COMPUTED FROM SURFACE EQUATION
        NLSRFX=.FALSE.
        NLSRFY=.FALSE.
        NLSRFZ=.TRUE.
        MRSURF=0
        MPSURF=0
        MTSURF=INSOR(NLSF,ISTRA)
        MASURF=0
        ILTR=0
        IF (SORLIM(NLSF,ISTRA).LT.0.D0) GOTO 2000
        IF (JCALC.EQ.1.OR.JCALC.EQ.2) GOTO 993
C
        IF (LEVGEO.EQ.1) THEN
          X0=ZZ(1)
          Y0=ZZ(2)
          Z0=ZSURF(MTSURF)
          IF (NLTRA) PHI=ZSURF(MTSURF)
        ELSEIF (LEVGEO.EQ.2.AND.NLCRC) THEN
          EP1ZZ1=0.0
          ELLZZ1=1.0
          X0=ZZ(1)*COS(ZZ(2)*DEGRAD)+EP1ZZ1
          Y0=ZZ(1)*SIN(ZZ(2)*DEGRAD)*ELLZZ1
          Z0=ZSURF(MTSURF)
          IF (NLTRA) PHI=ZSURF(MTSURF)
          IF (.NOT.NLCRC) GOTO 992
        ELSE
C  TO BE WRITTEN
          WRITE (iunout,*) 'ERROR IN SAMPLE, SOURCE ON TOR. SURFACE'
          CALL EIRENE_EXIT_OWN(1)
        ENDIF
C
      ELSEIF (INDIM(NLSF,ISTRA).EQ.4) THEN
C  LEVGEO=3,4:
C     BIRTH POINT ON STANDARD RADIAL OR POLOIDAL SURFACE
C     ARC-LENGTH CO-ORDINATE IS SAMPLED FROM STEP FUNCTION
C  LEVGEO=5:
C     TRIANGULAR SURFACE SEGMENT IS SAMPLED FROM STEP FUNCTION
C     UNIFORM DISTRIBUTION WITHIN SURFACE SEGMENT
        IF (ISTEP.LE.0) GOTO 995
        NLSRFZ=.FALSE.
        MTSURF=0
        MASURF=0
        ILTR=0
        IF (NLTRZ) THEN
          Z0=ZZ(3)
        ELSEIF (NLTRA) THEN
          PHI=ZZ(3)*DEGRAD
        ELSEIF (NLTRT) THEN
          PHI=ZZ(3)*DEGRAD
        ENDIF
        IF (SORLIM(NLSF,ISTRA).LT.0.D0) GOTO 2000
        IF (JCALC.EQ.1.OR.JCALC.EQ.3) GOTO 993
C
        BL=ZZ(1)
        DO 1701 J=2,NSMAX(ISTEP)
          IF (BL.LE.RRSTEP(ISTEP,J)) GOTO 1702
1701    CONTINUE
        GOTO 996
1702    CONTINUE
        IPLG=J-1
        D=BL-RRSTEP(ISTEP,IPLG)
        IF (LEVGEO.EQ.4) THEN
          IF (ISTEP.LE.0) GOTO 995
          NLSRFX=.TRUE.
          NLSRFY=.FALSE.
          ITRI=IRSTEP(ISTEP,IINDEX)
          ISID=IPSTEP(ISTEP,IINDEX)
          MRSURF=ITRI
          VVX=VTRIX(ISID,ITRI)
          VVY=VTRIY(ISID,ITRI)
          VVI=1./SQRT(VVX*VVX+VVY*VVY)
          X0=XTRIAN(NECKE(ISID,ITRI))+D*VVX*VVI
          Y0=YTRIAN(NECKE(ISID,ITRI))+D*VVY*VVI
        ELSEIF (LEVGEO.EQ.5) THEN
          IF (ISTEP.LE.0) GOTO 995
          NLSRFX=.TRUE.
          NLSRFY=.FALSE.
          ITET=IRSTEP(ISTEP,IINDEX)
          ISID=IPSTEP(ISTEP,IINDEX)
          MRSURF=ITET
          X1=XTETRA(NTECK(ITSIDE(1,ISID),ITET))
          Y1=YTETRA(NTECK(ITSIDE(1,ISID),ITET))
          Z1=ZTETRA(NTECK(ITSIDE(1,ISID),ITET))
          X2=XTETRA(NTECK(ITSIDE(2,ISID),ITET))
          Y2=YTETRA(NTECK(ITSIDE(2,ISID),ITET))
          Z2=ZTETRA(NTECK(ITSIDE(2,ISID),ITET))
          X3=XTETRA(NTECK(ITSIDE(3,ISID),ITET))
          Y3=YTETRA(NTECK(ITSIDE(3,ISID),ITET))
          Z3=ZTETRA(NTECK(ITSIDE(3,ISID),ITET))
          CALL EIRENE_FPOLYT_3(X1,Y1,Z1,X2,Y2,Z2,X3,Y3,Z3,X0,Y0,Z0)
        ELSEIF (LEVGEO.EQ.3) THEN
          IF (IGSTEP(ISTEP,IPLG).LT.200000) THEN
C  RADIAL PART
            NLSRFX=.TRUE.
            NLSRFY=.FALSE.
            MPSURF=0
            MRSURF=IGSTEP(ISTEP,IPLG)-100000
            VVX=VPLX(MRSURF,IPSTEP(ISTEP,IPLG))
            VVY=VPLY(MRSURF,IPSTEP(ISTEP,IPLG))
            VVI=1./SQRT(VVX*VVX+VVY*VVY)
            X0=XPOL(MRSURF,IPSTEP(ISTEP,IPLG))+D*VVX*VVI
            Y0=YPOL(MRSURF,IPSTEP(ISTEP,IPLG))+D*VVY*VVI
          ELSE
C  POLOIDAL PART
            NLSRFX=.FALSE.
            NLSRFY=.TRUE.
            MRSURF=0
            MPSURF=IGSTEP(ISTEP,IPLG)-200000
            VVX=VVTX(IRSTEP(ISTEP,IPLG),MPSURF)
            VVY=VVTY(IRSTEP(ISTEP,IPLG),MPSURF)
            VVI=1./SQRT(VVX*VVX+VVY*VVY)
            X0=XPOL(IRSTEP(ISTEP,IPLG),MPSURF)+D*VVX*VVI
            Y0=YPOL(IRSTEP(ISTEP,IPLG),MPSURF)+D*VVY*VVI
          ENDIF
        ELSE
          GOTO 992
        ENDIF
      ENDIF
C
2000  CONTINUE
C
C  X0,Y0,Z0 AND PHI ARE GIVEN NOW.
C  MAKE SURE, THAT THESE ARE IN PROPER PERIODICITY BLOCK
C
      IF (NLTRA.AND.ILTR.GT.0) THEN
C  Z0 IS A CARTHESIAN CO-ORDINATE IN LOCAL SYSTEM ILTR
C  BIRTHPOINT IS ON ADDITIONAL SURFACE (BECAUSE ILTR.NE.0)
C  FIND PHI,NT AND THEN X0,Z0 IN CELL NT
        CALL EIRENE_FZRTOR(X0,Z0,ILTR,XR,PHI,NT,.FALSE.,0)
        IF (NT.NE.ILTR)
     .    CALL EIRENE_FZRTRI(X0,Z0,NT,XR,PHI,NT)
        X01=X0+RMTOR
      ELSEIF (NLTRA.AND.ILTR.EQ.0) THEN
C  PHI IS THE TOROIDAL ANGLE (RADIANS)
C  BIRTHPOINT IS EITHER ON ADDITIONAL OR ON STANDARD GRID SURFACE
C  FIND Z0, NT,  FROM X0,PHI
C
C  MOVE PHI AWAY FROM TOROIDAL PERIODICITY SURFACE
        IF (PHI.EQ.0.0.AND.ABS(ZSURF(1)).LT.EPS10) PHI=0.01_DP
C  DONE
        IF (PHI.LT.ZSURF(1)) PHI=PHI+PI2A
        IF (PHI.GT.ZSURF(NTTRA)) PHI=PHI-PI2A
        NT=EIRENE_LEARCA(PHI,ZSURF,1,NTTRA,1,'SAMSRF      ')
        IF (NT.LE.0.OR.NT.GT.NTTRAM) THEN
          WRITE (iunout,*) 'NT OUT OF RANGE IN SAMSRF '
          WRITE (iunout,*) PHI,ZFULL
          CALL EIRENE_EXIT_OWN(1)
        ENDIF
        X01=X0+RMTOR
        CALL EIRENE_FZRTRI(X0,Z0,NT,X01,PHI,NT)
      ENDIF
C
C  FIND ZONE NUMBER NRCELL, NACELL ,NBLOCK AND IPOLG
C
      IF (NASOR(NLSF,ISTRA).GT.0.AND.NRSOR(NLSF,ISTRA).EQ.0) THEN
C  NRCELL=0
C  IPOLG=0
C  NBLOCK=NBMLTP
C  NACELL IS EXPLICITLY DEFINED BY INPUT VARIABLE NASOR
        NACELL=NASOR(NLSF,ISTRA)
        NRCELL=0
        NBLOCK=NBMLTP
        IPOLG=0
      ELSEIF (NRSOR(NLSF,ISTRA).GT.0.AND.NASOR(NLSF,ISTRA).EQ.0) THEN
C  NRCELL IS EXPLICITLY DEFINED BY INPUT VARIABLE NRSOR
C  IPOLG  IS EXPLICITLY DEFINED BY INPUT VARIABLE NISOR
C  NBLOCK IS EXPLICITLY DEFINED BY INPUT VARIABLE NBSOR
C  NACELL=0
        NRCELL=NRSOR(NLSF,ISTRA)
        NBLOCK=NBSOR(NLSF,ISTRA)
        IPOLG=NISOR(NLSF,ISTRA)
        NACELL=0
      ELSEIF (NRSOR(NLSF,ISTRA).EQ.0.AND.NASOR(NLSF,ISTRA).EQ.0) THEN
C  NRCELL IS COMPUTED IN STANDARD MESH
C  IPOLG IS COMPUTED IN STANDARD MESH
C  NBLOCK IS EXPLICITLY DEFINED BY INPUT VARIABLE NBSOR
C  NACELL=0
        IF (NLSRFX) THEN
          NRCELL=MIN0(NR1STM,MRSURF)
          IAN=MRSURF
          IEN=MRSURF
          NDUM=EIRENE_LEARC1(X0,Y0,Z0,IPOLG,IAN,IEN,NLSRFX,NLSRFY,NPANU,
     .        'SAMSRF      ')
        ELSEIF (NLSRFY) THEN
          IPOLG=MIN0(NP2NDM,MPSURF)
          IAN=MPSURF
          IEN=MPSURF
          NRCELL=EIRENE_LEARC1(X0,Y0,Z0,IDUM,IAN,IEN,NLSRFX,NLSRFY,
     .                  NPANU,'SAMSRF      ')
        ELSE
          NRCELL=EIRENE_LEARC1(X0,Y0,Z0,IPOLG,1,NR1STM,NLSRFX,NLSRFY,
     .                  NPANU,'SAMSRF      ')
        ENDIF
        NACELL=0
        NBLOCK=NBSOR(NLSF,ISTRA)
      ELSEIF (NRSOR(NLSF,ISTRA).LT.0.AND.ISTEP.GT.0) THEN
C  NRCELL IS FOUND FROM STEPFUNCTION DATA
C  IPOLG IS FOUND FROM STEPFUNCTION DATA
C  NBLOCK IS FOUND FROM STEPFUNCTION DATA
C  NACELL IS FOUND FROM STEPFUNCTION DATA
        NRCELL=IRSTEP(ISTEP,IINDEX)
        IPOLG =IPSTEP(ISTEP,IINDEX)
        NBLOCK=IBSTEP(ISTEP,IINDEX)
        NACELL=IASTEP(ISTEP,IINDEX)
      ELSEIF (NRSOR(NLSF,ISTRA).LT.0.AND.ISTEP.LT.0) THEN
C  NRCELL IS TRANSFERRED FROM SUBR. SAMUSR
C  IPOLG IS TRANSFERRED FROM SUBR. SAMUSR
C  NBLOCK IS TRANSFERRED FROM SUBR. SAMUSR
C  NACELL IS TRANSFERRED FROM SUBR. SAMUSR
        NRCELL=IRUSR
        NACELL=IAUSR
        NBLOCK=IBUSR
        IPOLG =IPUSR
      ELSE
        GOTO 999
      ENDIF
C
      NTCELL=1
      IPERID=1
      IF (NLTOR.AND.NACELL.EQ.0) THEN
        IF (NLTRZ) THEN
          IF (NTSOR(NLSF,ISTRA).GT.0) THEN
C  NTCELL IS EXPLICITLY DEFINED BY INPUT VARIABLE NTSOR
            NTCELL=NTSOR(NLSF,ISTRA)
          ELSEIF (NTSOR(NLSF,ISTRA).LT.0.AND.ISTEP.GT.0) THEN
C  NTCELL IS FOUND FROM STEPFUNCTION DATA
            NTCELL=ITSTEP(ISTEP,IINDEX)
          ELSEIF (NTSOR(NLSF,ISTRA).LT.0.AND.ISTEP.LT.0) THEN
C  NTCELL IS TRANSFERRED FROM SUBR. SAMUSR
            NTCELL=ITUSR
          ELSEIF (NTSOR(NLSF,ISTRA).EQ.0) THEN
C  NTCELL IS COMPUTED IN STANDARD MESH
            NTCELL=EIRENE_LEARCA(Z0,ZSURF,1,NT3RD,1,'SAMSRF      ')
          ELSE
            GOTO 999
          ENDIF
        ELSEIF (NLTRA) THEN
C  NTSOR NOT AVAILABLE FOR NLTRA OPTION
          NTCELL=NT
ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
C Yannick : adding this option for toroidal cases
          NTSOR(NLSF,ISTRA)=-1
          IF (NTSOR(NLSF,ISTRA).LT.0.AND.ISTEP.GT.0) THEN
C  NTCELL IS FOUND FROM STEPFUNCTION DATA
            NTCELL=ITSTEP(ISTEP,IINDEX)
cc brutal test on the consistency of PHI
c PHI=PHI+dfloat(NTCELL-1)*ZAA/dfloat(n3rd-1)*DEGRAD
          endif
          IPERID=NTCELL
ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
        ELSEIF (NLTRT) THEN
          WRITE (iunout,*) 'NLTRT: TO BE WRITTEN IN SAMSRF '
          CALL EIRENE_EXIT_OWN(1)
        ENDIF
      ELSEIF (.NOT.NLTOR.OR.NACELL.GT.0) THEN
C       IF (NLTRZ) THEN
C  ALL DONE
        IF (NLTRA) THEN
C  NTSOR NOT AVAILABLE FOR NLTRA OPTION
          IPERID=NT
        ELSEIF (NLTRT) THEN
          WRITE (iunout,*) 'NLTRT: TO BE WRITTEN IN SAMSRF '
          CALL EIRENE_EXIT_OWN(1)
        ENDIF
      ENDIF
C
      NPCELL=1
      IF (NLPOL.AND.NACELL.EQ.0) THEN
        IF (NPSOR(NLSF,ISTRA).GT.0) THEN
C  NPCELL IS EXPLICITLY DEFINED BY INPUT VARIABLE NPSOR
          NPCELL=NPSOR(NLSF,ISTRA)
        ELSEIF (NPSOR(NLSF,ISTRA).LT.0.AND.ISTEP.GT.0) THEN
C  NPCELL IS FOUND FROM STEPFUNCTION DATA
          IF ((LEVGEO == 4) .OR. (LEVGEO == 5)) THEN
            NPCELL = 1
          ELSE
            NPCELL=IPSTEP(ISTEP,IINDEX)
          END IF
        ELSEIF (NPSOR(NLSF,ISTRA).LT.0.AND.ISTEP.LT.0) THEN
C  NPCELL IS TRANSFERRED FROM SUBR. SAMUSR
          NPCELL=IPUSR
        ELSEIF (NPSOR(NLSF,ISTRA).EQ.0) THEN
C  NPCELL IS COMPUTED IN STANDARD MESH
          IF (LEVGEO.EQ.1) THEN
            NPCELL=EIRENE_LEARCA(Y0,PSURF,1,NP2ND,1,'SAMSRF')
          ELSEIF (LEVGEO.EQ.2.AND.NLCRC) THEN
            WINK=MOD(ATAN2(Y0,X0)+PI2A-PSURF(1),PI2A)+PSURF(1)
            NPCELL=EIRENE_LEARCA(WINK,PSURF,1,NP2ND,1,'SAMSRF')
          ELSEIF (LEVGEO.EQ.2.OR.LEVGEO.EQ.3) THEN
            IF (NLSRFY) THEN
              NPCELL=MIN0(NP2NDM,MPSURF)
            ELSE
              NPCELL=EIRENE_LEARC2(X0,Y0,NRCELL,NPANU,'SAMSRF')
            ENDIF
          ELSE
            WRITE (iunout,*) 'ERROR EXIT FROM SAMSRF. NLPOL ',LEVGEO
            CALL EIRENE_EXIT_OWN(1)
          ENDIF
        ELSE
          GOTO 999
        ENDIF
      ENDIF
C
      NBLOCK=MAX0(1,NBLOCK)
      NBLOCK=MIN0(NBLOCK,NBMLT)
      IF (NRCELL.GT.0) NACELL=0
      IF (NACELL.GT.0) NBLOCK=NBMLTP
      NBLCKA=NSTRD*(NBLOCK-1)+NACELL
      NCELL=NRCELL+((NPCELL-1)+(NTCELL-1)*NP2T3)*NR1P2+NBLCKA
C
      IF (ISTEP.GT.0) THEN
C  TAKE BACKGROUND MEDIUM DATA AT PLACE OF BIRTH FROM STEP FUNCTION ISTEP
        TEWL=TESTEP(ISTEP,IINDEX)
        SHWL=SHSTEP(ISTEP,IINDEX)
        DELR=RRSTEP(ISTEP,IINDEX+1)-RRSTEP(ISTEP,IINDEX)
        DO 3010 IPLS=1,NPLSI
          IPLSTI=MPLSTI(IPLS)
          TIWL(IPLS)=TISTEP(IPLSTI,ISTEP,IINDEX)
          VXWL(IPLS)=VXSTEP(IPLS,ISTEP,IINDEX)
          VYWL(IPLS)=VYSTEP(IPLS,ISTEP,IINDEX)
          VZWL(IPLS)=VZSTEP(IPLS,ISTEP,IINDEX)
          DIWL(IPLS)=DISTEP(IPLS,ISTEP,IINDEX)
                  FF=FLSTEP(IPLS,ISTEP,IINDEX)
          EFWL(IPLS)=ELSTEP(IPLS,ISTEP,IINDEX)/(FF+EPS30)
3010    CONTINUE
      ELSEIF (ISTEP.EQ.0) THEN
C  TAKE BACKGROUND MEDIUM DATA AT PLACE OF BIRTH FROM LOCAL BULK PLASMA DATA
C                              IN SAMPLED CELL NCELL
        TEWL=TEIN(NCELL)
        SHWL=0.
        DO 3020 IPLS=1,NPLSI
          IPLSTI = MPLSTI(IPLS)
          IPLSV = MPLSV(IPLS)
          TIWL(IPLS)=TIIN(IPLSTI,NCELL)
          IF (INDPRO(4) == 8) THEN
            CALL EIRENE_VECUSR (2,VXWL(IPLS),VYWL(IPLS),VZWL(IPLS),IPLS)
          ELSE
            VXWL(IPLS)=VXIN(IPLSV,NCELL)
            VYWL(IPLS)=VYIN(IPLSV,NCELL)
            VZWL(IPLS)=VZIN(IPLSV,NCELL)
          END IF
          DIWL(IPLS)=DIIN(IPLS,NCELL)
          EFWL(IPLS)=0.
3020    CONTINUE
      ELSEIF (ISTEP.LT.0) THEN
C  TEWL, TIWL, .... SHWL ALREADY DEFINED IN SM1USR
C  NOTHING MORE TO BE DONE HERE
      ENDIF
C
C  SET ANALOG SPECIES INDEX DISTRIBUTION WEISPZ
C
      IF (NSPEZ(ISTRA).LE.0) THEN
        IF (ISTEP.GT.0) THEN
C  WEISPZ FROM STEP FUNCTION
          DO 4100 ISPZ=NSPSTI(ISTEP),NSPSTE(ISTEP)
            WEISPZ(ISPZ)=FLSTEP(ISPZ,ISTEP,IINDEX)/
     .                   FLSTEP(0,   ISTEP,IINDEX)
4100      CONTINUE
          DO ISPZ=1,NSPSTI(ISTEP)-1
            WEISPZ(ISPZ)=0.D0
          ENDDO
          DO ISPZ=NSPSTE(ISTEP)+1,NSPZ
            WEISPZ(ISPZ)=0.D0
          ENDDO
        ELSE
C  WEISPZ NOT DEFINED
        ENDIF
      ENDIF
C
      RETURN
 
 
      ENTRY EIRENE_SAMSF2
 
      IF (ALLOCATED(INDTEC)) THEN
        DEALLOCATE (INDTEC)
        DEALLOCATE (ALEFT)
        DEALLOCATE (BRGHT)
        DEALLOCATE (XI)
        DEALLOCATE (XE)
      END IF
 
      RETURN
 
991   CONTINUE
      WRITE (iunout,*) ' ERROR IN SAMSRF '
      WRITE (iunout,*) 'SPECIES INDEX DISTRIBUTION NOT KNOWN'
      CALL EIRENE_EXIT_OWN(1)
992   CONTINUE
      WRITE (iunout,*) ' ERROR IN SAMSRF '
      WRITE (iunout,*) 'INDIM, LEVGEO: ',INDIM(NLSF,ISTRA),LEVGEO
      WRITE (iunout,*) ' THIS CASE IS TO BE WRITTEN '
      CALL EIRENE_EXIT_OWN(1)
993   CONTINUE
      WRITE (iunout,*) 'ERROR IN SAMSRF. EXIT CALLED'
      WRITE (iunout,*) 'SOURCE ON STANDARD SURFACE BUT INVALID "JCALC"'
      WRITE (iunout,*) 'CHANGE INPUT FLAG "INDTEC"'
      CALL EIRENE_EXIT_OWN(1)
9931  CONTINUE
      WRITE (iunout,*) 'ERROR IN SAMSRF. EXIT CALLED'
      WRITE (iunout,*)
     .  'SOURCE ON ADDITIONAL SURFACE BUT INVALID "JCALC"'
      WRITE (iunout,*) 'CHANGE INPUT FLAG "INDTEC"'
      CALL EIRENE_EXIT_OWN(1)
994   CONTINUE
      WRITE (iunout,*) 'ERROR IN SAMPLE. EXIT CALLED'
      WRITE (iunout,*)
     .  'ARCLENGTH REQUESTED ON STANDARD SURFACE BUT LEVGEO'
      WRITE (iunout,*) 'IS NOT = 3. THIS OPTION IS STILL TO BE WRITTEN'
      CALL EIRENE_EXIT_OWN(1)
995   CONTINUE
      WRITE (iunout,*) ' ERROR IN SAMSRF '
      WRITE (iunout,*) 'INDIM, LEVGEO: ',INDIM(NLSF,ISTRA),LEVGEO
      WRITE (iunout,*)
     .  ' AND NO STEP FUNCTION EIRENE_FOR COMPUTING THE BIRTH PLACE'
      WRITE (iunout,*) ' THIS CASE IS TO BE WRITTEN '
      CALL EIRENE_EXIT_OWN(1)
996   CONTINUE
      WRITE (iunout,*) 'ERROR IN SAMSRF. EXIT CALLEDEIRENE_'
      WRITE (iunout,*) 'ARCLENGTH BL GREATER THAN THE LENGTH OF THE '
      WRITE (iunout,*) 'POLYGONE    BL = ',BL
      CALL EIRENE_EXIT_OWN(1)
997   CONTINUE
      WRITE (iunout,*) 'ERROR IN SAMSRF. EXIT CALLED'
      WRITE (iunout,*) 'CHECK INPUT OF SORLIM, BECAUSE EIRENE TRIES TO'
      WRITE (iunout,*)
     .  'COMPUTE MORE THAN ONE VARIABLES FROM THE SURFACE'
      WRITE (iunout,*) 'EQUATION'
      CALL EIRENE_EXIT_OWN(1)
998   CONTINUE
      WRITE (iunout,*) 'ERROR IN SAMSRF. EXIT CALLEDEIRENE_'
      WRITE (iunout,*) 'X0,Y0,Z0 ',X0,Y0,Z0
      WRITE (iunout,*) 'BUT OUTSIDE THE VALID AREA OF THIS SURFACE'
      CALL EIRENE_EXIT_OWN(1)
999   CONTINUE
      WRITE (iunout,*) 'ERROR IN SAMSRF. EXIT CALLED'
      WRITE (iunout,*) 'INITIAL CELL NUMBER INVALID OR DET NEGATIVE'
      WRITE (iunout,*) 'X0,Y0,Z0,DET ',X0,Y0,Z0,DET
      WRITE (iunout,*) 'ISTEP ',ISTEP
      WRITE (iunout,*) 'NBLOCK,NACELL,NRCELL ',NBLOCK,NACELL,NRCELL
      WRITE (iunout,*) 'NPCELL,NTCELL,IPOLG ',NPCELL,NTCELL,IPOLG
      CALL EIRENE_EXIT_OWN(1)
      END
