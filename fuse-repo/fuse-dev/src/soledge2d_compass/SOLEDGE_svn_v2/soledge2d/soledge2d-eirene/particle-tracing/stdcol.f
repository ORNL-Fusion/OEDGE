!  18.08.06: after particle has been moved to surface correct particle
!            positions used in timep and timet
!pb  05.10.06: option for single sided switching of nondefault standard
!pb            surfaces introduced
!pb  07.12.06: cell number corrected for nltet option
!pb  22.03.07: LEVGEO=6 --> LEVGEO=10
!pb  18.04.08: typo corrected: NLSRFZ => NLSRFY in ELSEIF (IDIM==3) block
!pb  25.07.07: periodicity in y-direction for LEVGEO=3 introduced
!pb  07.07.09: setting of NLSRFA added
C
      SUBROUTINE EIRENE_STDCOL (ISTS,IDIM,SG,*,*)
C
C  1.) ADVANCE TRAJECTORY TO A NON-DEFAULT STANDARD SURFACE (DISTANCE: ZT)
C  2.) SWITCHING (CELL NUMBERS, FLAGS, ETC...)
C  3A.) IF TRANSPARENT AND NO SURFACE TALLIES: CONTINUE FLIGHT
C  3B.) ELSE: IF NEEDED, PREPARE REFLECTION (SURFACE NORMALS), THEN CALL EXCAPE
C
C  SG:    =SIGN OF COSINE OF ANGLE OF INCIDENCE
C  ISTS:  =SURFACE INDEX IN NSTSI ARRAYS
C  IDIM:  =INDEX (1,2,3) FOR: RADIAL, POLOIDAL OR TOROIDAL SURFACE
C  RETURN 1:  NO SURFACE TALLIES, FLIGHT CONTINUES
C  RETURN 2:  SURFACE TALLIES,
C             THEN ABSORBTION, REFLECTION MODEL OR CONTINUATION OF FLIGHT
C             (CALL SUBR. ESCAPE)
C
      USE EIRMOD_PRECISION
      USE EIRMOD_PARMMOD
      USE EIRMOD_COMUSR
      USE EIRMOD_CESTIM
      USE EIRMOD_CCONA
      USE EIRMOD_CLOGAU
      USE EIRMOD_CUPD
      USE EIRMOD_CPOLYG
      USE EIRMOD_CGRID
      USE EIRMOD_CGEOM
      USE EIRMOD_CTETRA
      USE EIRMOD_COMPRT
      USE EIRMOD_CLGIN
      USE EIRMOD_COUTAU
      USE EIRMOD_CTRIG
      use EIRMOD_cfplk
 
      IMPLICIT NONE
 
      REAL(DP), INTENT(IN) :: SG
      INTEGER, INTENT(IN) :: ISTS, IDIM
 
      REAL(DP) :: WINK, TANPHI, PHINM, X0E, Y0E, Z0E, SCOSE, X0SA,
     .          Y0SA, Z0SA, COSROT, SINROT, VELX_OLD, DST0, DSTT, FR,
     .          SINPHI, COSPHI
      INTEGER :: IDUM, EIRENE_LEARCA, EIRENE_LEARC1, IAN, IEN, NDUM, 
     .           EIRENE_LEARC2,
     .           IR, M, IP, IST, MSURFE, NACLLS, ICOS, IWEI, MSURFS
      INTEGER, EXTERNAL :: EIRENE_IDEZ
C
C   COLLISION WITH STANDARD SURFACE NO. MSURF=NLIM+ISTS
C   OF THE RADIAL   (OR X-) GRID: IDIM=1
C   OR THE POLOIDAL (OR Y-) GRID: IDIM=2
C   OR THE TOROIDAL (OR Z-) GRID: IDIM=3
C
C  SAVE DATA OF OLD POINT FOR DIAGNOSTICS
      X0SA=X0
      Y0SA=Y0
      Z0SA=Z0
      MSURFS=MSURF
      NACLLS=NACELL
C  SET NEW POINT ON NON DEFAULT STANDARD SURFACE ISTS. FLIGHT TIME: ZT
      X0=X0+VELX*ZT
      Y0=Y0+VELY*ZT
      Z0=Z0+VELZ*ZT
      TIME=TIME+ZT/VEL
      if (nlfem.or.nltet) then
        MSURF=ISTS
      else
        MSURF=NLIM+ISTS
      endif
      ISPZ=ISPEZ(ITYP,IPHOT,IATM,IMOL,IION,IPLS)
      SCOS=SG
      ICOS=SCOS
C  SET PHI AND X01
      IF (NLTRA) THEN
        PHI=MOD(PHI-ATAN2(Z01,X01)+ATAN2(Z0,(RMTOR+X0)),PI2A)
        X01=X0+RMTOR
      ENDIF
C  SET IPOLG
      IPOLG=IPOLGN
      X00=X0
      Y00=Y0
      Z00=Z0
      Z01=Z0
C
C  CARRY OUT DEFAULT CELL SWITCHING AT TRANSPARENT STANDARD SURFACES
      IF (IDIM.EQ.1) THEN
        NLSRFX=.TRUE.
        NLSRFY=.FALSE.
        NLSRFZ=.FALSE.
        NLSRFA=.FALSE.
        IF (ILIIN(MSURF).LE.0) NRCELL=NRCELL+ICOS
C
C  IN NLFEM, NLTET AND NLGEN OPTIONS: ALL SURFACES ARE IDIM=1 SURFACES
        IF (NLFEM) NRCELL=MRSURF
        IF (NLTET) NRCELL=MRSURF
        IF (NLGEN) NRCELL=MRSURF
C
      ELSEIF (IDIM.EQ.2) THEN
        NLSRFX=.FALSE.
        NLSRFY=.TRUE.
        NLSRFZ=.FALSE.
        NLSRFA=.FALSE.
        IF (ILIIN(MSURF).LE.0) NPCELL=NPCELL+ICOS
C
        IF (NLPLG.AND.ILIIN(MSURF).GT.0.AND.SCOS.GT.0) IPOLG=IPOLG-1
C
      ELSEIF (IDIM.EQ.3) THEN
        NLSRFX=.FALSE.
        NLSRFY=.FALSE.
        NLSRFZ=.TRUE.
        NLSRFA=.TRUE.
        IF (ILIIN(MSURF).LE.0) NTCELL=NTCELL+ICOS
      ENDIF
C
      IWEI=ILSIDE(MSURF)*ICOS
!pb      IF (IWEI.LT.0) GOTO 300
      IF (ILIIN(MSURF).EQ.2) GOTO 400
C
C  OPERATE A SWITCH
C
      IF (ILSWCH(MSURF).NE.0) THEN
C
C  TURN ON OR OFF THE STANDARD GRID CALCULATION
        IF (ISWICH(1,MSURF).NE.0) ITIME=ICOS*ISWICH(1,MSURF)
 
C  TURN ON OR OFF MFP AND REACTION RATES: PARTICLE ENTERS VACUUM
        IF (ISWICH(2,MSURF).NE.0) IFPATH=ICOS*ISWICH(2,MSURF)
 
C  TURN ON OR OFF VOLUME AVERAGED TALLIES
        IF (ISWICH(3,MSURF).NE.0) IUPDTE=ICOS*ISWICH(3,MSURF)
 
C  NEW ADD. CELL INDEX NACELL
C  NOTE: STANDARD SURFACES CANNOT SWITCH NACELL, NBLOCK, NRCELL,....
        IF (ISWICH(4,MSURF).NE.0) THEN
          GOTO 999
C
C  ENTRANCE INTO STANDARD MESH, INTO BLOCK NBLOCK=ILBLCK
C  OR
C  EXIT FROM STANDARD MESH, INTO CELL NACELL=ILACLL
        ELSEIF (ISWICH(5,MSURF).NE.0) THEN
          IF (NACELL.EQ.0) THEN
C  SET CELL INDEX EQUAL TO ILACLL
            IF (ILACLL(MSURF) > 0) THEN
              NACELL=ILACLL(MSURF)
              NBLOCK=NBMLTP
              NRCELL=0
              NPCELL=1
              NTCELL=1
              IF (.NOT.NLADD.OR.NACELL.GT.NRADD.OR.NACELL.LT.1) THEN
                IWEI=-10
                GOTO 300
              ENDIF
            ENDIF
          ELSEIF (NACELL.GT.0) THEN
C  ENTRANCE INTO STANDARD MESH, INTO NBLOCK=ILBLCK
            NBLOCK=ILBLCK(MSURF)
            NACELL=0
C  FIND  NRCELL,IPOLG IN STANDARD MESH, BLOCK NBLOCK
            IF (IDIM.EQ.1) THEN
              NRCELL=MIN0(NR1STM,MRSURF)
              IAN=MRSURF
              IEN=MRSURF
              NDUM=EIRENE_LEARC1(X0,Y0,Z0,IPOLG,IAN,IEN,NLSRFX,NLSRFY,
     .                           NPANU,'STDCOL      ')
            ELSEIF (IDIM.EQ.2) THEN
              IPOLG=MIN0(NP2NDM,MPSURF)
              IAN=MPSURF
              IEN=MPSURF
              NRCELL=EIRENE_LEARC1(X0,Y0,Z0,IDUM,IAN,IEN,NLSRFX,NLSRFY,
     .                             NPANU,'STDCOL      ')
            ELSE
              NRCELL=EIRENE_LEARC1(X0,Y0,Z0,IPOLG,1,NR1STM,
     .                     .FALSE.,.FALSE.,NPANU,'STDCOL      ')
            ENDIF
C  FIND NTCELL IN STANDARD MESH, BLOCK NBLOCK
            IF (NLTOR) THEN
              IF (NLTRZ) THEN
                NTCELL=EIRENE_LEARCA(Z0,ZSURF,1,NT3RD,1,'STDCOL    ')
              ELSEIF (NLTRA) THEN
                NTCELL=EIRENE_LEARCA(PHI,ZSURF,1,NT3RD,1,'STDCOL    ')
 
              ENDIF
            ELSE
              NTCELL=1
 
            ENDIF
C  FIND NPCELL IN STANDARD MESH, BLOCK NBLOCK
            IF (NLPOL) THEN
              IF (LEVGEO.EQ.1) THEN
                NPCELL=EIRENE_LEARCA(Y0,PSURF,1,NP2ND,1,'STDCOL')
              ELSEIF (LEVGEO.EQ.2) THEN
                IF (NLCRC) THEN
                  WINK=MOD(ATAN2(Y0,X0)+PI2A-PSURF(1),PI2A)+PSURF(1)
                  NPCELL=EIRENE_LEARCA(WINK,PSURF,1,NP2ND,1,'STDCOL')
                ELSE
                  NPCELL=EIRENE_LEARC2(X0,Y0,NRCELL,NPANU,'STDCOL')
                ENDIF
              ELSEIF (LEVGEO.EQ.3) THEN
                NPCELL=IPOLG
              ELSE
                WRITE (iunout,*) 'ERROR EXIT IN STDCOL, NLPOL ',LEVGEO
                CALL EIRENE_EXIT_OWN(1)
              ENDIF
            ELSE
              NPCELL=1
            ENDIF
          ENDIF
          NBLCKA=NSTRD*(NBLOCK-1)+NACELL
C  ENTRANCE INTO STANDARD MESH, BLOCK ILBLCK
C  OR
C  EXIT FROM STANDARD MESH, INTO NACELL=NBLOCK+ILACLL
        ELSEIF (ISWICH(6,MSURF).NE.0) THEN
          IF (NACELL.EQ.0) THEN
C  SET CELL INDEX EQUAL TO ILACLL
            NACELL=NBLOCK+ICOS*ISWICH(6,MSURF)*ILACLL(MSURF)
            NBLOCK=NBMLTP
C
            NRCELL=0
            NPCELL=1
            NTCELL=1
            IF (.NOT.NLADD.OR.NACELL.GT.NRADD.OR.NACELL.LT.1) THEN
              IWEI=-10
              GOTO 300
            ENDIF
          ELSEIF (NACELL.GT.0) THEN
C  ENTRANCE INTO STANDARD MESH, INTO NBLOCK=NACELL+ILBLCK
            NBLOCK=NACELL+ICOS*ISWICH(6,MSURF)*ILBLCK(MSURF)
            NACELL=0
C  FIND  NRCELL,IPOLG IN STANDARD MESH, BLOCK NBLOCK
            IF (IDIM.EQ.1) THEN
              NRCELL=MIN0(NR1STM,MRSURF)
              IAN=MRSURF
              IEN=MRSURF
              NDUM=EIRENE_LEARC1(X0,Y0,Z0,IPOLG,IAN,IEN,NLSRFX,NLSRFY,
     .                           NPANU,'STDCOL      ')
            ELSEIF (IDIM.EQ.2) THEN
              IPOLG=MIN0(NP2NDM,MPSURF)
              IAN=MPSURF
              IEN=MPSURF
              NRCELL=EIRENE_LEARC1(X0,Y0,Z0,IDUM,IAN,IEN,NLSRFX,NLSRFY,
     .                             NPANU,'STDCOL      ')
            ELSE
              NRCELL=EIRENE_LEARC1(X0,Y0,Z0,IPOLG,1,NR1STM,
     .                     .FALSE.,.FALSE.,NPANU,'STDCOL      ')
            ENDIF
C  FIND NTCELL IN STANDARD MESH, BLOCK NBLOCK
            IF (NLTOR) THEN
              IF (NLTRZ) THEN
                NTCELL=EIRENE_LEARCA(Z0,ZSURF,1,NT3RD,1,'STDCOL    ')
              ELSEIF (NLTRA) THEN
                NTCELL=EIRENE_LEARCA(PHI,ZSURF,1,NT3RD,1,'STDCOL    ')
 
              ENDIF
            ELSE
              NTCELL=1
 
            ENDIF
C  FIND NPCELL IN STANDARD MESH, BLOCK NBLOCK
            IF (NLPOL) THEN
              IF (LEVGEO.EQ.1) THEN
                NPCELL=EIRENE_LEARCA(Y0,PSURF,1,NP2ND,1,'STDCOL')
              ELSEIF (LEVGEO.EQ.2) THEN
                IF (NLCRC) THEN
                  WINK=MOD(ATAN2(Y0,X0)+PI2A-PSURF(1),PI2A)+PSURF(1)
                  NPCELL=EIRENE_LEARCA(WINK,PSURF,1,NP2ND,1,'STDCOL')
                ELSE
                  NPCELL=EIRENE_LEARC2(X0,Y0,NRCELL,NPANU,'STDCOL')
                ENDIF
              ELSEIF (LEVGEO.EQ.3) THEN
                NPCELL=IPOLG
              ELSE
                WRITE (iunout,*) 'ERROR EXIT IN STDCOL, NLPOL ',LEVGEO
                CALL EIRENE_EXIT_OWN(1)
              ENDIF
            ELSE
              NPCELL=1
            ENDIF
          ENDIF
          NBLCKA=NSTRD*(NBLOCK-1)+NACELL
        ENDIF
      ENDIF
C
C  SWITCHING DONE
C
      IF (IWEI.LT.0) GOTO 300
 
      IF (NLTRC.AND.EIRENE_IDEZ(ILIIN(MSURF),1,2).LE.4)
     .  CALL EIRENE_CHCTRC(X0,Y0,Z0,16,8)
C
C
      IF (ILIIN(MSURF).LT.0) THEN
        IF (ILIIN(MSURF).EQ.-1) then
	  colflag = .true.
	  RETURN 1
        endif
	RETURN 2
      ENDIF
C
C  ILIIN(MASURF) .GT. 0, AND  ILIIN(MASURF) .NE. 2
C  PREPARE REFLECTION, I.E. SET OUTER NORMAL
C
      GOTO (100,150,200),IDIM
C
      ENTRY EIRENE_STDNOR (X0E,Y0E,Z0E,IDIM,SCOSE,MSURFE,*,*)
      X0=X0E
      Y0=Y0E
      Z0=Z0E
      SCOS=SCOSE
      MSURF=MSURFE
      IRCELL=NRCELL
      IPCELL=NPCELL
      ITCELL=NTCELL
C
      GOTO (100,150,200,250),IDIM
C
C  RADIAL SURFACE
C
100   CONTINUE
C
      IF (LEVGEO.EQ.3) THEN
        IF (NLPOL)      IP=IPCELL
        IF (.NOT.NLPOL) IP=IPOLG
        CRTX=PLNX(MRSURF,IP)*SCOS
        CRTY=PLNY(MRSURF,IP)*SCOS
        CRTZ=0.
      ELSEIF (LEVGEO.EQ.2) THEN
        CRTX=(X0-EP1(MRSURF))*ELLQ(MRSURF)
        CRTY=Y0
        PHINM=SQRT(CRTX*CRTX+CRTY*CRTY)
        CRTX=CRTX/PHINM*SCOS
        CRTY=CRTY/PHINM*SCOS
        CRTZ=0.
      ELSEIF (LEVGEO.EQ.4) THEN
        IP=IPOLG
        CRTX=PTRIX(IP,MRSURF)*SCOS
        CRTY=PTRIY(IP,MRSURF)*SCOS
        CRTZ=0.
      ELSEIF (LEVGEO.EQ.5) THEN
        if (iliin(msurf).gt.3) then
          IST=MSURF-NLIM
          CALL EIRENE_NORUSR(IST,X0,Y0,Z0,CRTX,CRTY,CRTZ,SCOS,
     .                VELX,VELY,VELZ,NRCELL)
        else
          IP=IPOLG
          CRTX=PTETX(IP,MRSURF)*SCOS
          CRTY=PTETY(IP,MRSURF)*SCOS
          CRTZ=PTETZ(IP,MRSURF)*SCOS
        end if
      ELSEIF (LEVGEO.EQ.1) THEN
        CRTX=SCOS
        CRTY=0.
        CRTZ=0.
C  PERIODICITY SURFACE IN X DIRECTION
        IF (ILIIN(MSURF).GT.3) THEN
          M=EIRENE_IDEZ(ILIIN(MSURF),2,2)
C  NEW X0, AND KEEP Y AND Z (NLTRZ) OR Y AND PHI (NLTRA) CONSTANT
          IF (NLTRA) THEN
            TANPHI=Z0/(X0+RMTOR)
            X0=RSURF(M)
            Z0=TANPHI*(X0+RMTOR)
          ELSEIF (NLTRZ) THEN
            X0=RSURF(M)
          ELSEIF (NLTRT) THEN
            WRITE (iunout,*) 'EXIT IN STDNOR'
            CALL EIRENE_EXIT_OWN(1)
          ENDIF
C  NEW CELL NUMBERS
          MRSURF=M
          IF (SCOS.GT.0) NRCELL=M
          IF (SCOS.LT.0) NRCELL=M-1
          GOTO 500
        ENDIF
      ELSEIF (LEVGEO.EQ.10) THEN
C
C  GENERAL GEOMETRY OPTION: PROVIDE OUTER SURFACE NORMAL UNIT VECTOR
C                           CRTX,CRTY,CRTZ
C  IN CASE OF PERIODICITY: ALSO NEW POSITION, SPEED, SURFACE- AND CELL NUMBERS
C
        IST=MSURF-NLIM
        CALL EIRENE_NORUSR(IST,X0,Y0,Z0,CRTX,CRTY,CRTZ,SCOS,
     .              VELX,VELY,VELZ,NRCELL)
      ENDIF
      RETURN 2
C
C  POLOIDAL SURFACE
C
150   CONTINUE
C
      IF (LEVGEO.EQ.2.OR.LEVGEO.EQ.3) THEN
        IF (NLRAD)      IR=IRCELL
C       IF (.NOT.NLRAD) IR=???
!PB USE OUTER NORMAL OF PERIODICITY COUNTERPART
!PB        CRTX=PPLNX(IR,MPSURF)*SCOS
!PB        CRTY=PPLNY(IR,MPSURF)*SCOS
!PB        CRTZ=0.
C  PERIODICITY SURFACE IN Y DIRECTION
        IF (ILIIN(MSURF).GT.3) THEN
          M=EIRENE_IDEZ(ILIIN(MSURF),2,2)
          DST0 = SQRT((XPOL(IR,MPSURF)-X0)**2+(YPOL(IR,MPSURF)-Y0)**2)
          DSTT = BGLP(IR+1,MPSURF)-BGLP(IR,MPSURF)
          FR = DST0 / DSTT
          X0 = XPOL(IR,M) + FR*VVTX(IR,M)
          Y0 = YPOL(IR,M) + FR*VVTY(IR,M)
! NEW VELOCITY
! (PPLNX,PPLNY) ARE ALREADY NORMALIZED
          COSPHI=PPLNX(IR,MPSURF)*PPLNX(IR,M) +
     .           PPLNY(IR,MPSURF)*PPLNY(IR,M)
          SINPHI=SQRT(1._DP-COSPHI*COSPHI)
! COS(-PHI)=COS(PHI) ; SIN(-PHI)=-SIN(PHI)
          COSROT=COSPHI
          SINROT= -SINPHI
          VELX_OLD = VELX
          VELX = VELX_OLD*COSROT - VELY*SINROT
          VELY = VELX_OLD*SINROT + VELY*COSROT
C  NEW CELL NUMBERS
          MPSURF=M
          IF (SCOS.GT.0) THEN
            NPCELL = M
            IPOLG = M
            IPOLGN = M
          END IF
          IF (SCOS.LT.0) THEN
            NPCELL = M-1
            IPOLG = M-1
            IPOLGN = M-1
          END IF
        END IF
!PB USE OUTER NORMAL OF PERIODICITY COUNTERPART
        CRTX=PPLNX(IR,MPSURF)*SCOS
        CRTY=PPLNY(IR,MPSURF)*SCOS
        CRTZ=0.
      ELSEIF (LEVGEO.EQ.1) THEN
        CRTX=0.
        CRTY=SCOS
        CRTZ=0.
C  PERIODICITY SURFACE IN Y DIRECTION
        IF (ILIIN(MSURF).GT.3) THEN
          M=EIRENE_IDEZ(ILIIN(MSURF),2,2)
          Y0=PSURF(M)
C  NEW CELL NUMBERS
          MPSURF=M
          IF (SCOS.GT.0) NPCELL=M
          IF (SCOS.LT.0) NPCELL=M-1
          GOTO 500
        ENDIF
      ELSE
        WRITE (iunout,*)
     .  'STDCOL IDIM=2, BUT LEVGEO.GT.3 CALL EIRENE_EXIT '
        CALL EIRENE_EXIT_OWN(1)
      ENDIF
      RETURN 2
C
C  TOROIDAL SURFACE
C
200   CONTINUE
C
      IF (NLTRZ) THEN
        CRTX=0.
        CRTY=0.
        CRTZ=SCOS
C  PERIODICITY SURFACE IN Z-DIRECTION
        IF (ILIIN(MSURF).GT.3) THEN
          M=EIRENE_IDEZ(ILIIN(MSURF),2,2)
          Z0=ZSURF(M)
          MTSURF=M
          IF (SCOS.GT.0) NTCELL=M
          IF (SCOS.LT.0) NTCELL=M-1
          GOTO 500
        ENDIF
      ELSEIF (NLTRA) THEN
        CRTX=-SIN(ALPHA)
        CRTY=0.
        CRTZ=SCOS*COS(ALPHA)
C  PERIODICITY SURFACE IN TOROIDAL-DIRECTION
        IF (ILIIN(MSURF).GT.3) THEN
          M=EIRENE_IDEZ(ILIIN(MSURF),2,2)
C  NEW POSITION. KEEP X0,Y0 FIXED
          PHI=ZSURF(M)
C  ROTATE VELOCITY BECAUSE OF LOCAL COORDIANTE SYSTEM ROTATION
          IF (ITYP.LE.2) THEN
C  ANGLE FOR ROTATION IS 2*ALPHA
            COSROT=COSAL
            SINROT=SINAL*FLOAT(NINCZ)
            VELX_OLD=VELX
            VELX= VELX_OLD*COSROT +VELZ*SINROT
            VELZ=-VELX_OLD*SINROT +VELZ*COSROT
          ENDIF
          Z01=-Z01
          Z0=Z01
C  NEW CELL NUMBERS
          MTSURF=M
          IF (SCOS.GT.0) NTCELL=M
          IF (SCOS.LT.0) NTCELL=M-1
          IPERID=NTCELL
          GOTO 500
        ELSE
C         CRTX=?
          CRTY=0.
C         CRTZ=?
          WRITE (iunout,*)
     .  'STDCOL IDIM=3, BUT NOT PERIODIC. CALL EIRENE_EXIT '
          CALL EIRENE_EXIT_OWN(1)
        ENDIF
      ELSE
        WRITE (iunout,*)
     .    'STDCOL IDIM=3, BUT NEITHER NLTRZ NOR NLTRA: EXIT '
        CALL EIRENE_EXIT_OWN(1)
      ENDIF
      RETURN 2
C
C  MIXED SURFACE
C
250   CONTINUE
      IF (NLSRFX) GOTO 100
      IF (NLSRFY) GOTO 150
      WRITE (iunout,*) ' ERROR IN STDNOR,',
     .            ' IDIM=4 AND NEITHER NLSRFX NOR NLSRFY '
      CALL EIRENE_EXIT_OWN(1)
C
C
300   CONTINUE
C
C  IWEI.LT.0, I.E., ILIIN OPTION IS OVERRULED FROM THIS SIDE
C
      IF (IWEI.EQ.-1) THEN
C  PARTICLE HAS HITTEN A SURFACE FROM AN ABSORBING SIDE
C  UPDATE FLUXES (DO NOT SET WEIGHT=0.D0) AND ABSORB PARTICLE
        IF (NLTRC) THEN
          CALL EIRENE_CHCTRC(X0,Y0,Z0,16,8)
          WRITE (iunout,*) 'ABSORB PARTICLE: NPANU ',NPANU
        ENDIF
        IF (LSPUMP) SPUMP(ISPZ,MSURF)=SPUMP(ISPZ,MSURF)+WEIGHT
        LGPART=.FALSE.
        RETURN 2
      ELSEIF (IWEI.EQ.-2) THEN
C  KILL THIS PARTICLE BECAUSE IT COMES FROM WRONG SIDE
C  DO NOT UPDATE FLUXES (SET WEIGHT=0.D0)
        PTRASH(ISTRA)=PTRASH(ISTRA)-WEIGHT
        ETRASH(ISTRA)=ETRASH(ISTRA)-WEIGHT*E0
        IF (NLTRC) THEN
          CALL EIRENE_CHCTRC(X0,Y0,Z0,16,18)
        ENDIF
        WRITE (iunout,*) 'ERROR DETECTED IN SUBR. STDCOL '
        WRITE (iunout,*) 'PARTICLE COMES FROM WRONG SIDE '
        CALL EIRENE_MASJ1 ('NPANU=  ',NPANU)
        CALL EIRENE_MASJ1 ('MSURF NW',-(MSURF-NLIM))
        IF (MSURFS.GT.NLIM) MSURFS=-(MSURFS-NLIM)
        CALL EIRENE_MASJ1 ('MSURF OD',MSURFS)
        CALL EIRENE_MASR3 ('X0,Y0,Z0 (NEW)          ',X0,Y0,Z0)
        CALL EIRENE_MASR3 ('X0,Y0,Z0 (OLD)          ',X0SA,Y0SA,Z0SA)
        CALL EIRENE_MASR3 ('VELX,VELY,VELZ          ',VELX,VELY,VELZ)
        CALL EIRENE_MASR2 ('WEIGHT,E0       ',WEIGHT,E0)
        IF (LSPUMP) SPUMP(ISPZ,MSURF)=SPUMP(ISPZ,MSURF)+WEIGHT
        WEIGHT=0.
        LGPART=.FALSE.
        RETURN 2
      ELSEIF (IWEI.EQ.-3) THEN
C  SURFACE IS NOT SEEN BY THE PARTICLE BECAUSE OF ILSIDE OPTION
C  I.E., SURFACE IS TRANSPARENT FROM THIS SIDE
C  ACTS AS ILIIN=0 OPTION (NO SURFACE TALLIES, NO SWITCHES)
!pb for levgeo=4 or levgeo=5 increasing of cell numbers is wrong
        IF (LEVGEO <= 3) THEN
          IF (IDIM.EQ.1.AND.ILIIN(MSURF).GT.0) NRCELL=NRCELL+ICOS
          IF (IDIM.EQ.2.AND.ILIIN(MSURF).GT.0) NPCELL=NPCELL+ICOS
          IF (IDIM.EQ.3.AND.ILIIN(MSURF).GT.0) NTCELL=NTCELL+ICOS
        END IF
        IF (NLTRC) CALL EIRENE_CHCTRC(X0,Y0,Z0,16,8)
	colflag = .true.
        RETURN 1
      ELSEIF (IWEI.EQ.-10) THEN
C  KILL THIS PARTICLE BECAUSE CELL NUMBER OUT OF RANGE DUE TO SWITCHING
C  DO NOT UPDATE FLUXES (SET WEIGHT=0.D0)
        PTRASH(ISTRA)=PTRASH(ISTRA)-WEIGHT
        ETRASH(ISTRA)=ETRASH(ISTRA)-WEIGHT*E0
        IF (NLTRC) THEN
          CALL EIRENE_CHCTRC(X0,Y0,Z0,16,18)
        ENDIF
        WRITE (iunout,*) 'ERROR DETECTED IN SUBR. STDCOL '
        WRITE (iunout,*) 'NACELL OUT OF RANGE '
        CALL EIRENE_MASJ1 ('NPANU=  ',NPANU)
        WRITE (iunout,*) 'NLMLT,NLADD ',NLMLT,NLADD
        WRITE (iunout,*) 'NBMLT,NRADD ',NBMLT,NRADD
        CALL EIRENE_MASJ1 ('MSURF NW',-(MSURF-NLIM))
        IF (MSURFS.GT.NLIM) MSURFS=-(MSURFS-NLIM)
        CALL EIRENE_MASJ1 ('MSURF OD',MSURFS)
        CALL EIRENE_MASJ1 ('NACL NEW',NACELL)
        CALL EIRENE_MASJ1 ('NACL OLD',NACLLS)
        CALL EIRENE_MASR3 ('X0,Y0,Z0 (NEW)          ',X0,Y0,Z0)
        CALL EIRENE_MASR3 ('X0,Y0,Z0 (OLD)          ',X0SA,Y0SA,Z0SA)
        CALL EIRENE_MASR3 ('VELX,VELY,VELZ          ',VELX,VELY,VELZ)
        CALL EIRENE_MASR2 ('WEIGHT,E0       ',WEIGHT,E0)
        IF (LSPUMP) SPUMP(ISPZ,MSURF)=SPUMP(ISPZ,MSURF)+WEIGHT
        WEIGHT=0.
        LGPART=.FALSE.
        RETURN 2
      ENDIF
C
C  ABSORBING SURFACE
C  UPDATE FLUXES (DO NOT SET WEIGHT=0.D0)
C
400   CONTINUE
      IF (NLTRC) CALL EIRENE_CHCTRC(X0,Y0,Z0,16,8)
      RETURN 2
C
500   CONTINUE
      IF (NLTRA) X01=X0+RMTOR
      X00=X0
      Y00=Y0
      Z00=Z0
      Z01=Z0
      RETURN 2
 
C
999   CONTINUE
      WRITE (iunout,*) 'ERROR IN STDCOL, WRONG CELL SWITCHING '
      WRITE (iunout,*) 'NPANU, MSURF = ',NPANU,MSURF
      CALL EIRENE_EXIT_OWN(1)
      END
