C
!PB 30.01.08: optimization of calculation of intersection with additional surfaces
!             corrected
!PB 22.03.07: LEVGEO=6 --> LEVGEO=10
!PB 12.01.06: calls to calc_spectrum introduced for cell based spectra
!PB 02.03.06: Store trajectory from birth place to first collision with the
!             wall. It is assumed that conditional epectation estimator is
!             switched on.
!PB 18.04.06: xstorv=0 in "vacuum region" added
!PB 26.09.06: sg corrected for levgeo=4 and levgeo=5
 
C  MAY05: CALL UPDATE FROM STATIC LOOP WITH IFLAG=4 (RATHER =1)
C         WG. COLL EST. ON 1ST FLIGHT AFTER BIRTH.
C
      SUBROUTINE EIRENE_FOLNEUT
C
C     NEUTRAL PARTICLE, LAUNCHED AT X0,Y0,Z0, IN CELL NRCELL, IPOLG,
C     IPERID, NPCELL, NTCELL, NACELL, NBLOCK, IS FOLLOWED
C
C  ON INPUT
C     ITYP=0 OR ITYP=1 OR ITYP=2
C
C  ON OUTPUT:
C
C     LGPART=TRUE
C     ITYP=3            A NEXT GENERATION TEST ION IS BORN
C                          IION= SPECIES INDEX OF NEXT GENERATION ION
C     LGPART=FALSE
C     ITYP=4  NO NEXT GENERATION TEST PARTICLE
C
      USE EIRMOD_PRECISION
      USE EIRMOD_PARMMOD
      USE EIRMOD_COMUSR
      USE EIRMOD_CESTIM
      USE EIRMOD_CADGEO
      USE EIRMOD_CCONA
      USE EIRMOD_CLOGAU
      USE EIRMOD_CRAND
      USE EIRMOD_CUPD
      USE EIRMOD_CGRID
      USE EIRMOD_CSPEZ
      USE EIRMOD_CZT1
      USE EIRMOD_CTETRA
      USE EIRMOD_COMPRT
      USE EIRMOD_CPES
      USE EIRMOD_COMNNL
      USE EIRMOD_COMSPL
      USE EIRMOD_CLGIN
      USE EIRMOD_COUTAU
      USE EIRMOD_COMXS
      USE EIRMOD_CTRIG
      USE EIRMOD_CTRCEI
 
      IMPLICIT NONE
 
      REAL(DP) :: CFLAG(7,3)
      REAL(DP) :: AX(2)
      REAL(DP) :: XSTOR2(MSTOR1,MSTOR2,N2ND+N3RD),
     .            XSTORV2(NSTORV,N2ND+N3RD)
      REAL(DP) :: XSTORC(MSTOR1,MSTOR2), XSTORVC(NSTORV)
      REAL(DP) :: VELXC, TIMEC, PR, WS, COLTYP, X0C, Y0C, Z0C, ZDT1C,
     .          X0ERR, Y0ERR, Z0ERR, VELC, E0C, VELYC, VELZC, SG,
     .          GENRC, PHIC, WEIGHC, ZLI, DG, XLI, YLI, T, ZTS,
     .          ZMFP, ZEP1, ZLOG, ZTST, ZINT1, ZINT2, Z0S, TIMES,
     .          X0S, Y0S, PHIS, DIST, ZTC, PSAVE, TSAVE, EIRENE_FPATHM, 
     .          EIRENE_FPATHA, EX, EXPM, EIRENE_FPATHPH, WMINC_LOCAL,
     .          SCOS_NEW
      REAL(DP), EXTERNAL :: RANF_EIRENE
      INTEGER :: NBLCKC, NCELLC, NRCLLC, NACLLC, ITIMEC, IPERIDC,
     .           IFPTHC, IUPDTC, NPCLLC, NTCLLC, NTSAVE, NPSAVE,
     .           EIRENE_LEARC2, J, NCOUS, NLE, NRC, JCOL, NLI, ISTS, 
     .           NPCOLC,
     .           JJ, NPCELC, NTCELC, NTCOLC, IFLAG, I1, I2, I3, I, IM,
     .           NCLLN
      LOGICAL :: NLPR, LTRANS, LCNDEXP
      TYPE(CELL_INFO), POINTER :: NEW_CELL
C
C  TENTATIVELY ASSUME: A NEXT GENERATION PARTICLE WILL BE BORN
C
C  IC_NEUT, IC_ION: COUNTER FOR GENERATIONS WITHIN STATIC LOOP
      IC_NEUT=IC_ION
100   LGPART=.TRUE.
      IC_NEUT=IC_NEUT+1
      XGENER=0
      NLPR=.FALSE.
      AX(1)=1.
      AX(2)=1.
      WMINC_LOCAL=WMINC
      IF (ITYP.EQ.0) THEN
        IF (IPHOT.LE.0.OR.IPHOT.GT.NPHOTI) GOTO 998
      ELSEIF (ITYP.EQ.1) THEN
        IF (IATM.LE.0.OR.IATM.GT.NATMI) GOTO 998
      ELSEIF (ITYP.EQ.2) THEN
        IF (IMOL.LE.0.OR.IMOL.GT.NMOLI) GOTO 998
      ENDIF
C
C  THE  CELL NUMBER NRCELL, IPOLG, IPERID, NPCELL, NTCELL, NACELL, NBLOCK
C  WAS ALREADY SET IN CALLING SUBROUTINE MCARLO
C
C  IF NLSRFX, SURFACE INDEX MRSURF MUST BE DEFINED AT THIS POINT
C  IF NLSRFY, SURFACE INDEX MPSURF MUST BE DEFINED AT THIS POINT
C  IF NLSRFZ, SURFACE INDEX MTSURF MUST BE DEFINED AT THIS POINT
C  IF NLSRFA, SURFACE INDEX MASURF MUST BE DEFINED AT THIS POINT
C
C  FOLLOW MOTION OF NEUTRAL PARTICLE OR "STATIC APPROXIMATION"?
      IF (IFPATH.NE.1) GOTO 1002
      IF (ITYP.EQ.1) THEN
        IF (NFOLA(IATM).EQ.-1) GOTO 1001
      ELSEIF (ITYP.EQ.2) THEN
        IF (NFOLM(IMOL).EQ.-1) GOTO 1001
      ELSEIF (ITYP.EQ.0) THEN
        IF (NFOLPH(IPHOT).EQ.-1) GOTO 1001
      ENDIF
      GOTO 1002
C
1001  CONTINUE
      IF (IC_NEUT.EQ.1.AND.NLTRC.AND.TRCHST)
     .  WRITE (iunout,*) 'TRAJECTORY ENTERS STATIC LOOP, ITYP=', ITYP
 
C***********************************************************************
C  STATIC APPROXIMATION
C  SIMULATE NEXT COLLISION INSTANTANEOUSLY
C***********************************************************************
 
C  WEIGHT TOO SMALL? STOP HISTORY
        IF (WEIGHT.LT.EPS30) THEN
          LGPART=.FALSE.
          RETURN
        ENDIF
C
C  PARTICLE ON SURFACE ?
        IF (NLSRFX.OR.NLSRFY.OR.NLSRFZ.OR.NLSRFA) THEN
C  EMITTED  ?  CALL COLLIDE, AFTER UPDATE
          IF (IC_NEUT.EQ.1) THEN
C  FIRST ENTRY INTO "STATIC LOOP", ALWAYS: EMITTED FROM FROM SURFACE
C    (CRTXG,....,...): NORMAL RELATIVE TO DEFAULT SETTINGS
C                      NEEDED LATER IF PARTICLE LEAVES STATIC LOOP
C                      VIA STDCOL OR ADDCOL
            CRTXG=CRTX*SCOS
            CRTYG=CRTY*SCOS
            CRTZG=CRTZ*SCOS
            SCOS = SIGN(1.D0,VELX*CRTXG+VELY*CRTYG+VELZ*CRTZG)
            SCOS_SAVE = SCOS
            SCOS_NEW  = SCOS
C  INCIDENT OR EMITTED DURING STATIC LOOP?
C  CALL ESCAPE OR CALL COLLIDE, AFTER UPDATE
          ELSE
            SCOS_NEW = SIGN(1.D0,VELX*CRTXG+VELY*CRTYG+VELZ*CRTZG)
          ENDIF
        ELSE
C  PARTICLE NOT ON SURFACE
          SCOS_SAVE = SCOS
          SCOS_NEW  = SCOS
        ENDIF
C
        NCOU=1
        NUPC(1)=(NCELL-NRCELL-NBLCKA)/NR1P2
        IF (IFPATH.NE.1) GOTO 993
        IF (ITYP.EQ.0) THEN
          LOGPHOT(IPHOT,ISTRA)=.TRUE.
          ZMFP=EIRENE_FPATHPH(NCELL,CFLAG,1,1)
        ELSEIF (ITYP.EQ.1) THEN
          LOGATM(IATM,ISTRA)=.TRUE.
          ZMFP=EIRENE_FPATHA(NCELL,CFLAG,1,1)
        ELSEIF (ITYP.EQ.2) THEN
          LOGMOL(IMOL,ISTRA)=.TRUE.
          ZMFP=EIRENE_FPATHM(NCELL,CFLAG,1,1)
        ENDIF
C  XSTOR IN STATIC LOOP:  NOT NEEDED, BECAUSE NCOU=1
C       XSTOR2(:,:,1)=XSTOR(:,:)
C       XSTORV2(:,1) =XSTORV(:)
C  DECIDE TO FOLLOW OR NOT TO FOLLOW THIS TRACK ON BASIS OF MFP
C
C  TO BE WRITTEN
C
        CLPD(1)=ZMFP
        IF (IUPDTE.EQ.1) THEN
          IFLAG=4
          IF (ITYP.EQ.0) THEN
            CALL EIRENE_UPDPHOT(XSTOR2,XSTORV2,IFLAG)
          ELSEIF (ITYP.EQ.1) THEN
            CALL EIRENE_UPDATM (XSTOR2,XSTORV2,IFLAG)
          ELSEIF (ITYP.EQ.2) THEN
            CALL EIRENE_UPDMOL (XSTOR2,XSTORV2,IFLAG)
          ENDIF
          IF (NADSPC >= 1) CALL EIRENE_CALC_SPECTRUM (WEIGHT,IFLAG,1)
        ENDIF
        ZTC=0.
C  CARRY OUT INELASTIC COLLISION EVENT, DIRECTLY AT PLACE OF BIRTH
        IF (SCOS_SAVE.EQ.SCOS_NEW) THEN
          GOTO 230
        ELSE
C  AT THIS POINT: PARTICLE INCIDENT ON SURFACE, IC_NEUT GT 1 NECESSARILY
          IF (ILIIN(MSURF).GT.0) THEN
            SCOS=SCOS_NEW
            GOTO 380
          ELSE
            GOTO 230
          END IF
        ENDIF
C
C
1002  CONTINUE
C  NO STATIC APPROXIMATION, FOLLOW MOTION
C
      IF (IC_NEUT.GT.1.AND.NLTRC.AND.TRCHST)
     .  WRITE (iunout,*) 'TRAJECTORY LEAVES STATIC LOOP, ITYP=',ITYP
      IF (IC_NEUT.GT.1.AND.
     .   (NLSRFX.OR.NLSRFY.OR.NLSRFZ.OR.NLSRFA)) THEN
C  PARTICLE CONTINUES FROM SURFACE AND FROM PREVIOUS "STATIC LOOP" ?
        IC_ION=0
        IC_NEUT=0
        SCOS_NEW = SIGN(1.D0,VELX*CRTXG+VELY*CRTYG+VELZ*CRTZG)
        IF (SCOS_SAVE.NE.SCOS_NEW) THEN
          SCOS=SCOS_NEW
          ZT=0.D0
          TL=0.D0
          IPOLGN=IPOLG
          IF (NLSRFA) THEN
            CALL EIRENE_ADDCOL (X0,Y0,Z0,SCOS,*101,*380)
          ELSEIF (NLSRFX) THEN
            IF (LEVGEO.LE.3) THEN
              ISTS=INMP1I(MRSURF,IPCELL,ITCELL)
              MSURFG=NPCELL+(NTCELL-1)*NP2T3
              IF (ILIIN(NLIM+ISTS) .NE. 0)
     .          CALL EIRENE_STDCOL (ISTS,1,SCOS,*101,*380)
            ELSEIF (LEVGEO.EQ.4) THEN
              ISTS=ABS(INMTI(IPOLGN,MRSURF))
              MSURFG=INSPAT(IPOLGN,MRSURF)
              IF (ILIIN(ISTS) .NE. 0)
     .          CALL EIRENE_STDCOL (ISTS,1,SCOS,*101,*380)
            ELSEIF (LEVGEO.EQ.5) THEN
              ISTS=ABS(INMTIT(IPOLGN,MRSURF))
C             MSURFG= ??
              IF (ILIIN(ISTS) .NE. 0)
     .          CALL EIRENE_STDCOL (ISTS,1,SCOS,*101,*380)
            ELSEIF (LEVGEO.EQ.10) THEN
              ISTS=INMP1I(MRSURF,IPCELL,ITCELL)
C             MSURFG= ??
              IF (ILIIN(ISTS) .NE. 0)
     .          CALL EIRENE_STDCOL (ISTS,1,SCOS,*101,*380)
            ENDIF
          ELSEIF (NLSRFY) THEN
            ISTS=INMP2I(IRCELL,MPSURF,ITCELL)
            MSURFG=NRCELL+(NTCELL-1)*NR1P2
            IF (ILIIN(NLIM+ISTS) .NE. 0)
     .        CALL EIRENE_STDCOL (ISTS,2,SCOS,*101,*380)
          ELSEIF (NLSRFZ) THEN
            ISTS=INMP3I(IRCELL,IPCELL,MTSURF)
            MSURFG=NRCELL+(NPCELL-1)*NR1P2
            IF (ILIIN(NLIM+ISTS) .NE. 0)
     .        CALL EIRENE_STDCOL (ISTS,3,SG,*101,*380)
          ENDIF
        ENDIF
      ENDIF
 
C**********************************************************************
C   STATIC LOOP FINISHED. REGULAR PARTICLE TRACKING CONTINUES
C**********************************************************************
 
      IC_ION=0
      IC_NEUT=0
C
C  PARTICLE IN VOLUME OR ON SURFACE BUT NOT FROM "STATIC LOOP"
C
C  EACH NEUTRAL PARTICLE TRACK STARTS AT THIS POINT, IC_NEUT=0 HERE
C
101   CONTINUE
      IF (ITYP.EQ.1) THEN
        LOGATM(IATM,ISTRA)=.TRUE.
        NLPR=NLPRCA(IATM)
        NRC=NRCA(IATM)
      ELSEIF (ITYP.EQ.2) THEN
        LOGMOL(IMOL,ISTRA)=.TRUE.
        NLPR=NLPRCM(IMOL)
        NRC=NRCM(IMOL)
      ELSEIF (ITYP.EQ.0) then
        LOGPHOT(IPHOT,ISTRA)=.TRUE.
        NLPR=NLPRCPH(IPHOT)
        NRC=NRCPH(IPHOT)
      ENDIF
      IF (NLTRJ .AND. .NOT.NLPR) THEN
        WRITE (IUNOUT,*) ' STORING OF TRAJECTORIES SWITCHED OFF',
     .           ' BECAUSE NO CONDITIONAL EXPECTATION ESTIMATOR'
        NLTRJ = .FALSE.
      END IF
C  WEIGHT TOO SMALL? STOP HISTORY
      IF (WEIGHT.LT.EPS30) THEN
        LGPART=.FALSE.
        RETURN
      ENDIF
      ICOL=0
      JCOL=0
C
      ZEP1=RANF_EIRENE( )
      ZLOG=-LOG(ZEP1)
      ZINT1=0.0
      ZINT2=ZINT1
      IF (NLTRA) X01=X0+RMTOR
      X00=X0
      Y00=Y0
      Z00=Z0
      Z01=Z0
C
C  CLEAR WORK VARIABLES AND: CONTINUE FLIGHTS THROUGH TRANSPARENT
C                            SURFACES FROM THIS POINT
104   CONTINUE
      NJUMP=0
      DO I=1,NIMINT
        IM=IIMINT(I)
        TIMINT(IM)=0._DP
        IIMINT(I)=0
      END DO
      NIMINT = 0
      PHIS=0
      TT=1.D30
      TL=1.D30
      TS=1.D30
      ZTST=1.D30
      ZT=0.0
C
 110  CONTINUE
 
      NCOU=1
      NUPC(1)=0
      NCOUNT(1)=1
      NCOUNP(1)=1
      ISRFCL=-1
 
      NCELL=NRCELL+((NPCELL-1)+(NTCELL-1)*NP2T3)*NR1P2+NBLCKA
C
C TL: DISTANCE TO NEXT ADDITIONAL SURFACE
      IF (NCELL.LE.NOPTIM) THEN
        NLI=NLIMII(NCELL)
        NLE=NLIMIE(NCELL)
      ELSE
        NLI=1
        NLE=NLIMI
      ENDIF
      IF (NLI.LE.NLE) THEN
        CALL EIRENE_TIMEA1
     .  (MSURF,NCELL,NLI,NLE,NTCELL,IPERID,X0,Y0,Z0,TIME,
     .               VELX,VELY,VELZ,VEL,
     .               MASURF,XLI,YLI,ZLI,SG,TL,NLTRC,LCNDEXP)
!pb     NLPR=NLPRCS(MASURF).OR.NLPR
        NLPR=LCNDEXP.OR.NLPR
        ZDT1=TL
        ZTST=TL
        CLPD(1)=ZDT1
        IF (MASURF.NE.0) ISRFCL=1
      ENDIF
C
C TT: DISTANCE UNTIL NEXT TIMESTEP LIMIT IS REACHED
      IF (LGTIME) THEN
        TT=(DTIMVI-TIME)*VEL
        IF (TT.LT.TL) THEN
          ZDT1=TT
          ZTST=TT
          CLPD(1)=ZDT1
          ISRFCL=2
        ENDIF
      ENDIF
C
C  SCAN OVER SEGMENT
C
210   CONTINUE
C
C  TS:   DISTANCE TO NEXT SURFACE OF STANDARD MESH
C  ZDT1: DISTANCE TRAVELLED IN CURRENT RADIAL CELL
C  ZT: DISTANCE ALREADY TRAVELLED IN PREVIOUS PARTS OF THIS TRACK
C
      IF (ITIME.EQ.1) THEN
        IF (NLRAD) THEN
          CALL EIRENE_TIMER(TS)
C
          T=TS/TL-1.0_DP
          IF (ABS(T).LE.EPS10.AND.TL.NE.1.E30_DP) GOTO 992
          IF (TL.LT.TS.OR.TT.LT.TS) THEN
            MRSURF=0
            IPOLGN=0
C  COLLISION WITH ADDITIONAL SURFACE
            IF (TL.LE.TT) THEN
              ZDT1=TL-ZT
              TL=ZT+ZDT1
              ZTST=TL
              ISRFCL=1
C  COLLISION WITH TIME SURFACE
            ELSEIF (TT.LT.TL) THEN
              ZDT1=TT-ZT
              TT=ZT+ZDT1
              ZTST=TT
              ISRFCL=2
            ENDIF
          ELSE
C  COLLISION WITH RADIAL SURFACE
            ISRFCL=0
            ZDT1=TS-ZT
            ZTST=TS
          ENDIF
        ENDIF
C
        NCOU=1
        NUPC(1)=0
        CLPD(1)=ZDT1
        NCOUNT(1)=1
        NCOUNP(1)=1
C
        IF (NLTOR.OR.NLTRA) THEN
          CALL EIRENE_TIMET (ZDT1)
          TS=ZT+ZDT1
          ZTST=TS
        ENDIF
C
        IF (NLPOL) THEN
          CALL EIRENE_TIMEP(ZDT1)
          TS=ZT+ZDT1
          ZTST=TS
        ENDIF
C
        IF (ZDT1.LE.0.D0) GOTO 990
C
      ELSEIF (ITIME.NE.1) THEN
C
        IF (NLTOR.OR.NLTRA) THEN
          CALL EIRENE_TIMET (ZDT1)
          TS=ZT+ZDT1
          ZTST=TS
        ENDIF
      ENDIF
C
      IF (ZTST.GE.1.D30) GOTO 990
C
C  LOCAL MEAN FREE PATH
C
C  NCOU CELLS ARE CROSSED BY THE CURRENT TRACK.
C  EVALUATE RACTION RATES, MFP, ETC. IN THESE CELLS
C
      IFLAG=3
 
      IF (NLTRJ) THEN
        TRAJ(ITRJ)%TRJ%NCOU_CELL = TRAJ(ITRJ)%TRJ%NCOU_CELL + NCOU
        DO J=1,NCOU
          NCELL=NRCELL+NUPC(J)*NR1P2+NBLCKA
          ALLOCATE(NEW_CELL)
          NEW_CELL%NO_CELL = NCELL
          NEW_CELL%FLIGHT = CLPD(J)
          CALL EIRENE_CELL_INSERT(ITRJ,NEW_CELL)
        END DO
      END IF
      IF (IFPATH.NE.1.OR.NRC.LT.0) THEN
C  USE VACUUM VALUES FOR REACTION RATES, MFP, ETC..
        XSTORV(:) =0.D0
        IF (NCOU.GT.1) THEN
          XSTOR2(:,:,1:NCOU)=0.D0
          XSTORV2(:,1:NCOU) =0.D0
        ENDIF
        ZMFP=1.D10
        NCELL=NRCELL+((NPCELL-1)+(NTCELL-1)*NP2T3)*NR1P2+NBLCKA
      ELSE
        NCOUS=NCOU
        ZTS=ZT
        DO 212 J=1,NCOU
          JJ=J
          NCELL=NRCELL+NUPC(J)*NR1P2+NBLCKA
          IF (ITYP.EQ.0) ZMFP=EIRENE_FPATHPH(NCELL,CFLAG,J,NCOU)
          IF (ITYP.EQ.1) ZMFP=EIRENE_FPATHA (NCELL,CFLAG,J,NCOU)
          IF (ITYP.EQ.2) ZMFP=EIRENE_FPATHM (NCELL,CFLAG,J,NCOU)
          IF ((ITYP.EQ.0).AND.(ZMFP < WMINL*CLPD(J))) WMINC_LOCAL=1._DP
          IF (NCOU.GT.1) THEN
            XSTOR2(:,:,J) = XSTOR(:,:)
            XSTORV2(:,J) = XSTORV(:)
          ENDIF
C  UPDATE INTEGRAL
          ZINT1=ZINT1+CLPD(J)*ZMFPI
          IF (.NOT.NLPR) THEN
            IF (ZINT1.GE.ZLOG) THEN
C  COLLISION IN SECTION JJ
              IF (NLPOL) NPCELL=NCOUNP(J)
              IF (NLTOR) NTCELL=NCOUNT(J)
              GO TO 213
            ENDIF
            ZINT2=ZINT1
            ZT=ZT+CLPD(J)
          ELSEIF (NLPR) THEN
            IF (JCOL.EQ.0) THEN
              IF (ZINT1.GE.ZLOG) THEN
                JCOL=JJ
                IF (NLPOL) NPCOLC=NCOUNP(J)
                IF (NLTOR) NTCOLC=NCOUNT(J)
              ELSE
                ZINT2=ZINT1
                ZT=ZT+CLPD(J)
              ENDIF
            ENDIF
            AX(1)=AX(2)
            EX=CLPD(J)*ZMFPI
            IF (EX.LE.1.D-10) THEN
              EXPM=1.
C             AX(1)=AX(1)
            ELSEIF (EX.GT.1.D2) THEN
              EXPM=0.D0
              AX(1)=AX(1)/EX
            ELSE
              EXPM=EXP(-EX)
              AX(1)=AX(1)*(1.-EXPM)/EX
            ENDIF
            ZTS=ZTS+CLPD(J)
            IF (NLPOL) NPCELC=NCOUNP(J)
            IF (NLTOR) NTCELC=NCOUNT(J)
            CLPD(J)=CLPD(J)*AX(1)
            AX(2)=AX(2)*EXPM
C  COND. EXP.EST: STOP BECAUSE OF WMINC-CRITERION
            IF (.NOT.NLTRJ.AND.(AX(2).LE.WMINC_LOCAL)) THEN
C    RESTORE POINT OF COLLISION ?
              IF (JCOL.NE.0) GOTO 213
C    NO COLLISION YET; CONTINUE LOOP 212
              AX(1)=1.
              AX(2)=1.
            ENDIF
          ENDIF
212     CONTINUE   ! NCOU LOOP DONE
C
213     CONTINUE   ! EXIT FROM NCOU LOOP DUE TO COLLISION AT ICOU=JJ
        NCOU=JJ
      ENDIF
C
C  CHECK FOR EVENT
C
      IF (NLPR) THEN
C  CHECK FOR 1.ST COLLISION ALONG TRACK
        IF (ICOL.EQ.0.AND.ZINT1.GE.ZLOG) GOTO 505
C  STOP TRACK BECAUSE OF WMINC-CRITERION?
        IF (NCOU.LT.NCOUS) THEN
          IFLAG=2
          IF (IUPDTE.GE.1) THEN
            IF (ITYP.EQ.1) CALL EIRENE_UPDATM (XSTOR2,XSTORV2,IFLAG)
            IF (ITYP.EQ.2) CALL EIRENE_UPDMOL (XSTOR2,XSTORV2,IFLAG)
            IF (ITYP.EQ.0) CALL EIRENE_UPDPHOT(XSTOR2,XSTORV2,IFLAG)
            IF (NADSPC >= 1) CALL EIRENE_CALC_SPECTRUM (WEIGHT,IFLAG,1)
          ENDIF
          ZT=ZTS
          GOTO 216
        ENDIF
C  STOP TRACK BECAUSE OF COLLISION
      ELSEIF (ZINT1.GE.ZLOG) THEN
        GO TO 220
      ENDIF
C
215   CONTINUE
C
      ZINT2=ZINT1
      ZT=ZTST
C
C  UPDATE CONTRIBUTION TO VOLUME AVERAGED ESTIMATORS
C
      IF (IUPDTE.GE.1) THEN
        IF (ITYP.EQ.1) CALL EIRENE_UPDATM (XSTOR2,XSTORV2,IFLAG)
        IF (ITYP.EQ.2) CALL EIRENE_UPDMOL (XSTOR2,XSTORV2,IFLAG)
        IF (ITYP.EQ.0) CALL EIRENE_UPDPHOT(XSTOR2,XSTORV2,IFLAG)
        IF (NADSPC >= 1) CALL EIRENE_CALC_SPECTRUM (WEIGHT,IFLAG,1)
      ENDIF
C
C  STOP TRACK ?
C
      IF (ISRFCL.EQ.1) CALL EIRENE_ADDCOL (XLI,YLI,ZLI,SG,*104,*380)
      IF (ISRFCL.EQ.2) CALL EIRENE_TIMCOL (AX(2),         *104,*800)
      IF (ISRFCL.EQ.3) CALL EIRENE_TORCOL (               *104)
C
C  NO, CONTINUE TRACK
C
C  NEXT CELL - CHECK FOR ESCAPE OR NON DEFAULT ACTING STANDARD SURFACE
C
      IF (LEVGEO.LE.3) THEN
C
        ISTS=INMP1I(MRSURF,IPCELL,ITCELL)
        IF (NLRAD.AND.ISTS.NE.0) THEN
          SG=ISIGN(1,NINCX)
          NLSRFX=.TRUE.
          MSURFG=NPCELL+(NTCELL-1)*NP2T3
          IF (ILIIN(NLIM+ISTS) .NE. 0) CALL EIRENE_STDCOL
     .  (ISTS,1,SG,*104,*380)
        ENDIF
        ISTS=INMP2I(IRCELL,MPSURF,ITCELL)
        IF (NLPOL.AND.ISTS.NE.0) THEN
          SG=ISIGN(1,NINCY)
          NLSRFY=.TRUE.
          MSURFG=NRCELL+(NTCELL-1)*NR1P2
          IF (ILIIN(NLIM+ISTS) .NE. 0) CALL EIRENE_STDCOL
     .  (ISTS,2,SG,*104,*380)
        ENDIF
        ISTS=INMP3I(IRCELL,IPCELL,MTSURF)
        IF (NLTOR.AND.ISTS.NE.0) THEN
          SG=ISIGN(1,NINCZ)
          NLSRFZ=.TRUE.
          MSURFG=NRCELL+(NPCELL-1)*NR1P2
          IF (ILIIN(NLIM+ISTS) .NE. 0) CALL EIRENE_STDCOL
     .  (ISTS,3,SG,*104,*380)
        ENDIF
C
      ELSEIF (LEVGEO.EQ.4) THEN
!yannick
        if (ipolgn == 0) then ! that's a crappy check
          ISTS=INMP3I(IRCELL,IPCELL,MTSURF)
          if (ISTS .ne. 0) then
            SG=ISIGN(1,NINCZ)
            NLSRFZ=.TRUE.
            ! what is MSURFG in that context ?? probably not needed
            !MSURFG=NRCELL+(NPCELL-1)*NR1P2
            ists=ists+nlim ! made necessary by nlfem branching in stdcol
            IF (ILIIN(ISTS) .NE. 0) CALL EIRENE_STDCOL
     .  (ISTS,3,SG,*104,*380)
          else
            write(*,*) 'you should not be here !!! 
     .      yannick modifications in folneut'
          endif
        else
! end yannick
          ISTS=ABS(INMTI(IPOLGN,MRSURF))
          IF (NLRAD.AND.ISTS.NE.0) THEN
!pb          SG=ISIGN(1,NINCX)
            SG=SIGN(1._DP,VELX*PTRIX(IPOLGN,MRSURF)+
     .                  VELY*PTRIY(IPOLGN,MRSURF))
            NLSRFX=.TRUE.
            MSURFG=INSPAT(IPOLGN,MRSURF)          
            IF (ILIIN(ISTS) .NE. 0) CALL EIRENE_STDCOL
     .    (ISTS,1,SG,*104,*380)
          ENDIF
        endif
C
      ELSEIF (LEVGEO.EQ.5) THEN
        ISTS=ABS(INMTIT(IPOLGN,MRSURF))
        IF (NLRAD.AND.ISTS.NE.0) THEN
!pb          SG=ISIGN(1,NINCX)
!pb          IF (NRCELL == 0) SG = -1.D0
          SG=SIGN(1._DP,VELX*PTETX(IPOLGN,MRSURF)+
     .                  VELY*PTETY(IPOLGN,MRSURF)+
     .                  VELZ*PTETZ(IPOLGN,MRSURF))
          NLSRFX=.TRUE.
C         MSURFG= ??
          IF (ILIIN(ISTS) .NE. 0) CALL EIRENE_STDCOL
     .  (ISTS,1,SG,*104,*380)
        ENDIF
C
      ELSEIF (LEVGEO.EQ.10) THEN
        ISTS=INMP1I(MRSURF,IPCELL,ITCELL)
        IF (NLRAD.AND.ISTS.NE.0) THEN
          SG=ISIGN(1,NINCX)
          NLSRFX=.TRUE.
          IF (ILIIN(ISTS) .NE. 0) CALL EIRENE_STDCOL
     .  (ISTS,1,SG,*104,*380)
        ENDIF
      ENDIF
C
      NRCELL=NRCELL+NINCX
      IF (NRCELL.GT.NR1STM) GOTO 990
      IF (NACELL.LT.1.AND.NRCELL.LT.1) GOTO 990
C
C  PARTICLE ON SURFACE MRSURF BELONGING TO 1ST (RADIAL OR X-) GRID
C
C  IF NOT, THEN IT MUST, FOR SOME REASON,
C  HAVE BEEN STOPPED IN THE MIDDLE OF A TRACK.
      IF (MRSURF.EQ.0) THEN
C  ADVANCE IN SAME CELL, AND CONTINUE TRACK
        X0=X0+VELX*ZT
        Y0=Y0+VELY*ZT
        Z0=Z0+VELZ*ZT
        TIME=TIME+ZT/VEL
        IPOLG=IPOLGN
        MASURF=0
        MSURF=0
        IF (NLTRA) THEN
          PHI=MOD(PHI-ATAN2(Z01,X01)+ATAN2(Z0,(RMTOR+X0)),PI2A)
          X01=X0+RMTOR
        ENDIF
        X00=X0
        Y00=Y0
        Z00=Z0
        Z01=Z0
        GOTO 104
      ENDIF
C
C  CHECK IF WE HAVE ENCOUNTERED A SPLITTING ZONE
C  SPLITTING AND RR NOT READY FOR LEVGEO.GE.4
      IF (LEVGEO.LE.3) THEN
        IF (NLSPLT(MRSURF).AND.NLEVEL.LT.MAXLEV.AND.ICOL.EQ.0) THEN
          CALL EIRENE_SPLTRR(1,MRSURF,NINCX,*210,*700)
        ENDIF
      ENDIF
C
216   CONTINUE
C
C  SWITCH OFF CONDITIONAL EXP. ESTIMATOR ?
      IF (NLPR.AND..NOT.NLTRJ.AND.(AX(2).LT.WMINC_LOCAL)) THEN
        IF (NLTRC) THEN
          X0S=X0+VELX*ZT
          Y0S=Y0+VELY*ZT
          Z0S=Z0+VELZ*ZT
          TIMES=TIME+ZT/VEL
          IF (NLTRA)
     .      PHIS=MOD(PHI-ATAN2(Z01,X01)+ATAN2(Z0S,(X0S+RMTOR)),PI2A)
          PSAVE=PHI
          PHI=PHIS
          TSAVE=TIME
          TIME=TIMES
          CALL EIRENE_CHCTRC(X0S,Y0S,Z0S,16,8)
          PHI=PSAVE
          TIME=TSAVE
        ENDIF
        IF (ICOL.EQ.1) GOTO 512
C  NO COLLISION YET; RESTART AGAIN WITH COND. EXP. ESTIMATOR
C                    IN NEW CELL
        AX(1)=1.
        AX(2)=1.
        JCOL=0
      ENDIF
C  EITHER: GOTO 101, NEW RANDOM NUMBER, ZINT1=0, X=XS
C  OR    : GOTO 210, CONTINUE TRACK,
C  THIS IS THE SAME, BECAUSE OF EXPONENTIAL DISTRIBUTION OF PATH LENGTHS
      IF (NCELL.LE.NOPTIM) THEN
C  FROM NEW CELL NCLLN MORE ADDITIONAL SURFACES CAN BE SEEN BY THE PARTICLES
        NCLLN=NRCELL+((NPCELL-1)+(NTCELL-1)*NP2T3)*NR1P2+NBLCKA
        IF (NCLLN <= NOPTIM) THEN
          IF ((NLIMII(NCLLN) < NLIMII(NCELL)) .OR.
     .        (NLIMIE(NCLLN) > NLIMIE(NCELL))) GOTO 110
        END IF
      END IF
      GOTO 210
C
C  POINT OF COLLISION  220 -- 240
C
220   CONTINUE
      DIST=CLPD(NCOU)
      CLPD(NCOU)=(ZLOG-ZINT2)*ZMFP
      ZTC=ZT+CLPD(NCOU)
      IFLAG=4
      IF (IUPDTE.GE.1) THEN
        IF (ITYP.EQ.1) CALL EIRENE_UPDATM (XSTOR2,XSTORV2,IFLAG)
        IF (ITYP.EQ.2) CALL EIRENE_UPDMOL (XSTOR2,XSTORV2,IFLAG)
        IF (ITYP.EQ.0) CALL EIRENE_UPDPHOT(XSTOR2,XSTORV2,IFLAG)
        IF (NADSPC >= 1) CALL EIRENE_CALC_SPECTRUM (WEIGHT,IFLAG,1)
      ENDIF
      X0=X0+VELX*ZTC
      Y0=Y0+VELY*ZTC
      Z0=Z0+VELZ*ZTC
      TIME=TIME+ZTC/VEL
      IF (LEVGEO.LE.3.AND.NLPOL) THEN
        IPOLG=NPCELL
      ELSEIF (NLPLG) THEN
        IPOLG=EIRENE_LEARC2(X0,Y0,NRCELL,NPANU,'FOLNEUT 2    ')
      ELSEIF (NLFEM) THEN
        IPOLG=0
      ELSEIF (NLTET) THEN
        IPOLG=0
      ENDIF
      NLSRFX=.FALSE.
      NLSRFY=.FALSE.
      NLSRFZ=.FALSE.
      NLSRFA=.FALSE.
      MRSURF=0
      MPSURF=0
      MTSURF=0
      MASURF=0
      MSURF=0
      IF (NLTRA) PHI=MOD(PHI-ATAN2(Z01,X01)+ATAN2(Z0,(RMTOR+X0)),PI2A)
C
230   CONTINUE
C
C  PRE COLLISION ESTIMATOR
C
      IF (NCLVI.GT.0) THEN
        WS=WEIGHT/SIGTOT
        CALL EIRENE_UPCUSR(WS,1)
      ENDIF
C
C  TEST FOR CORRECT CELL NUMBER AT COLLISION POINT
C  KILL PARTICLE, IF TOO LARGE ROUND OFF ERRORS DURING
C  PARTICLE TRACING
C
      IF (NLTEST) CALL EIRENE_CLLTST(*997)
C
C  SAMPLE FROM COLLISION KERNEL FOR NEUTRAL PARTICLES
C  AT PRESENT: NO SUPPRESSION OF ABSORBTION AT IONIZATION
C  FIND NEW WEIGHT, SPECIES INDEX, VELOCITY AND RETURN
C
      IF (ITYP.EQ.1) THEN
        CALL EIRENE_COLATM(CFLAG,COLTYP,DIST)
      ELSEIF (ITYP.EQ.2) THEN
        CALL EIRENE_COLMOL(CFLAG,COLTYP,DIST)
      ELSEIF (ITYP.EQ.0) THEN
        CALL EIRENE_COLPHOT(CFLAG,COLTYP,DIST)
      ENDIF
      ISPZ=ISPEZ(ITYP,IPHOT,IATM,IMOL,IION,IPLS)
C
C  POST COLLISION ESTIMATOR
C
      IF (NCLVI.GT.0) THEN
        WS=WEIGHT/SIGTOT
        CALL EIRENE_UPCUSR(WS,2)
      ENDIF
C
      IF (COLTYP.EQ.2.) GOTO 700
C
      GOTO 100
C
C  SIMULATION OF COLLISION EVENT FINISHED
C
C
C  ..............................................................
C  .
C  .  INCIDENT ONTO SURFACE
C  ..............................................................
C
380   CONTINUE
C
C
      PR=AX(2)
      IF (ILIIN(MSURF).LE.-2) PR=PR*SG
C
C  UPDATE EFFLUXES ONTO SURFACE AND REFLECT PARTICLE
C
      CALL EIRENE_ESCAPE(PR,SG,*100,*104,*512)
C
C   GOTO 100: START NEW TRACK OF NEUTRAL PARTICLE
C   GOTO 104: CONTINUE THIS TRACK, TRANSPARENT SURFACE IS CROSSED
C   GOTO 512: RESTORE PREVIOUS COLLISION DATA,
C             CONDITIONAL EXPECTATION ESTIMATOR WAS USED
C
      NLTRJ = .FALSE.
      TRAJ(ITRJ)%TRJ%NO_SURF = MSURF
      RETURN
C
C
C  ...................................................
C  .                                                 .
C  .  CONDITIONAL EXPECTATION ESTIMATOR  500 -- 599  .
C  ...................................................
C
C
C
C
C   SAVE DATA OF FIRST COLLISION ALONG CONDITIONAL TRACK
505   CONTINUE
      IF (NCOU.GT.1) THEN
        ZMFP=1./XSTORV2(NSTORV,JCOL)
      ELSE
C  IN CASE NCOU.EQ.1: XSTORV HAS NOT BEEN STORED ONTO XSTORV2
        ZMFP=1./XSTORV(NSTORV)
      ENDIF
      NPCLLC=1
      NTCLLC=1
      IF (NLPOL) NPCLLC=NPCOLC
      IF (NLTOR) NTCLLC=NTCOLC
      ZDT1C=(ZLOG-ZINT2)*ZMFP
      ZTC=ZT+ZDT1C
      X0C=X0+VELX*ZTC
      Y0C=Y0+VELY*ZTC
      Z0C=Z0+VELZ*ZTC
      TIMEC=TIME+ZTC/VEL
      NRCLLC=NRCELL
      NACLLC=NACELL
      NBLCKC=NBLOCK
      NCELLC=NCELL
      ITIMEC=ITIME
      IFPTHC=IFPATH
      IUPDTC=IUPDTE
      IPERIDC=IPERID
      VELXC=VELX
      VELYC=VELY
      VELZC=VELZ
      VELC=VEL
      E0C=E0
      GENRC=XGENER
      WEIGHC=WEIGHT
      IF (NLTRA)
     .  PHIC=MOD(PHI-ATAN2(Z01,X01)+ATAN2(Z0C,(X0C+RMTOR)),PI2A)
      IF (NCOU.GT.1) THEN
        XSTORC(:,:) = XSTOR2(:,:,JCOL)
        XSTORVC(:)  = XSTORV2(:,JCOL)
      ELSE
C  IN CASE NCOU.EQ.1: XSTORV HAS NOT BEEN STORED ONTO XSTORV2
        XSTORC(:,:) = XSTOR(:,:)
        XSTORVC(:)  = XSTORV(:)
      ENDIF
      IF (NLTRC) THEN
        PSAVE=PHI
        TSAVE=TIME
        NPSAVE=NPCELL
        NTSAVE=NTCELL
        IF (NLTRA) PHI=PHIC
        TIME=TIMEC
        NPCELL=NPCLLC
        NTCELL=NTCLLC
        CALL EIRENE_CHCTRC(X0C,Y0C,Z0C,16,13)
        PHI=PSAVE
        TIME=TSAVE
        NPCELL=NPSAVE
        NTCELL=NTSAVE
      ENDIF
      ICOL=1
      IFLAG=5
C  TRACK COMPLETED ?
      IF (NCOU.GE.NCOUS) GOTO 215
C
C  TRACK NOT COMPLETED BECAUSE OF WMINC-CRITERION
C  UPDATE CONTRIBUTION TO VOLUME AVERAGED ESTIMATORS
C
      IF (IUPDTE.GE.1) THEN
        IF (ITYP.EQ.1) CALL EIRENE_UPDATM (XSTOR2,XSTORV2,IFLAG)
        IF (ITYP.EQ.2) CALL EIRENE_UPDMOL (XSTOR2,XSTORV2,IFLAG)
        IF (ITYP.EQ.0) CALL EIRENE_UPDPHOT(XSTOR2,XSTORV2,IFLAG)
        IF (NADSPC >= 1) CALL EIRENE_CALC_SPECTRUM (WEIGHT,IFLAG,1)
      ENDIF
      GOTO 216
C
C   RESTORE PRE COLLISION DATA AND SAMPLE FROM COLLISION KERNEL
512   X0=X0C
      Y0=Y0C
      Z0=Z0C
      TIME=TIMEC
      NLSRFX=.FALSE.
      NLSRFY=.FALSE.
      NLSRFZ=.FALSE.
      NLSRFA=.FALSE.                                                 !pb 07.07.09
      MSURF=0
      MRSURF=0
      MPSURF=0
      MTSURF=0
      MASURF=0
      NRCELL=NRCLLC
      NPCELL=NPCLLC
      NTCELL=NTCLLC
      NACELL=NACLLC
      NBLOCK=NBLCKC
      NBLCKA=NSTRD*(NBLOCK-1)+NACELL
      NCELL=NCELLC
      ITIME=ITIMEC
      IFPATH=IFPTHC
      IUPDTE=IUPDTC
      IPERID=IPERIDC
      VELX=VELXC
      VELY=VELYC
      VELZ=VELZC
      VEL=VELC
      E0=E0C
      XGENER=GENRC
      WEIGHT=WEIGHC
      IF (LEVGEO.LE.3.AND.NLPOL) THEN
        IPOLG=NPCELL
      ELSEIF (NLPLG) THEN
        IPOLG=EIRENE_LEARC2(X0,Y0,NRCELL,NPANU,'FOLNEUT 3    ')
      ELSEIF (NLFEM) THEN
        IPOLG=0
      ELSEIF (NLTET) THEN
        IPOLG=0
      ENDIF
      IF (NLTRA) PHI=PHIC
      XSTOR(:,:) = XSTORC(:,:)
      XSTORV(:)  = XSTORVC(:)
      IF (NLTRC) CALL EIRENE_CHCTRC(X0,Y0,Z0,0,14)
      ICOL=0
      LGPART=.TRUE.
      NLTRJ = .FALSE.
      GOTO 230
C
700   CONTINUE
C  REGULAR STOP IN SUBR. FOLNEUT, CONTINUE IN SUBR. MCARLO
      RETURN
C
800   CONTINUE
C  REGULAR STOP IN SUBR. FOLNEUT, STOP HISTORY, CENSUS ARRAY FULL
      IF (ICOL.EQ.1.AND..NOT.LGLAST) GOTO 512
      LGPART=.FALSE.
      WEIGHT=0.
      RETURN
C
990   CONTINUE
      CALL EIRENE_LEER(1)
      CALL EIRENE_MASAGE
     .  ('ERROR IN FOLNEUT, ZDT1 OR NRCELL OUT OF RANGE  ')
      CALL EIRENE_MASAGE
     .  ('PARTICLE IS KILLED                             ')
      WRITE (iunout,*) 'NPANU,NRCELL,ZDT1,ZTST,TL,TS '
      WRITE (iunout,*) NPANU,NRCELL,ZDT1,ZTST,TL,TS
      GOTO 995
C
992   CONTINUE
      CALL EIRENE_LEER(1)
      CALL EIRENE_MASAGE
     .  ('ERROR IN FOLNEUT, SURFACE CONFLICT             ')
      CALL EIRENE_MASR2  ('TL,TS           ',TL,TS)
      WRITE (iunout,*) 'NPANU ',NPANU
      ZT=TL
      GOTO 995
C
993   CALL EIRENE_MASAGE
     .  ('ERROR IN FOLNEUT, NO PARTICLE TRACING BUT     ')
      CALL EIRENE_MASAGE
     .  ('IFPATH.NE.1. PARTICLE IS KILLED               ')
      WRITE (iunout,*) 'ISPEZ ',ISPEZ(ITYP,IPHOT,IATM,IMOL,IION,IPLS)
      GOTO 999
C
995   WRITE (iunout,*) 'MRSURF,MPSURF,MTSURF,MASURF ',
     .             MRSURF,MPSURF,MTSURF,MASURF
      X0ERR=X0+ZT*VELX
      Y0ERR=Y0+ZT*VELY
      Z0ERR=Z0+ZT*VELZ
      IF (NLTRC) THEN
        CALL EIRENE_CHCTRC(X0ERR,Y0ERR,Z0ERR,16,18)
      ELSE
        WRITE (iunout,*) 'X0,Y0,Z0,ZT ',X0,Y0,Z0,ZT
        WRITE (iunout,*) 'VELX,VELY,VELZ ',VELX,VELY,VELZ
        WRITE (iunout,*) 'X0ERR,Y0ERR,Z0ERR ',X0ERR,Y0ERR,Z0ERR
      ENDIF
      GOTO 999
997   CALL EIRENE_MASAGE
     .  ('ERROR IN FOLNEUT, DETECTED IN SUBR. CLLTST    ')
      CALL EIRENE_MASAGE
     .  ('PARTICLE IS KILLED                            ')
C   DETAILED PRINTOUT ALREADY DONE FROM SUBR. CLLTST
      IF (NLTRC) CALL EIRENE_CHCTRC(X0,Y0,Z0,16,18)
      GOTO 999
C
998   WRITE (iunout,*) 'ERROR IN FOLNEUT, SPECIES INDEX OUT OF RANGE '
      WRITE (iunout,*) ' NPANU,ITYP,IATM,IMOL,IPHOT ',
     .                   NPANU,ITYP,IATM,IMOL,IPHOT
      GOTO 999
C
999   CONTINUE
      PTRASH(ISTRA)=PTRASH(ISTRA)-WEIGHT
      ETRASH(ISTRA)=ETRASH(ISTRA)-WEIGHT*E0
      LGPART=.FALSE.
      CALL EIRENE_LEER(1)
      RETURN
      END
