      MODULE EIRMOD_CTRIG
 
!pb 07.12.06: use POINTER rather than ALLOCATABLE in datatype definition
!pb           at this place ALLOCATABLE is allowed only in FORTRAN 2000
 
      USE EIRMOD_PRECISION
      USE EIRMOD_PARMMOD
 
      IMPLICIT NONE
 
      PRIVATE
 
      PUBLIC :: EIRENE_ALLOC_CTRIG, EIRENE_DEALLOC_CTRIG, 
     P          EIRENE_INIT_CTRIG,
     P          TRI_ELEM, TRI_LISTE, TRI_SURF
 
      REAL(DP), PUBLIC, ALLOCATABLE, SAVE ::
     R XTRIAN(:),  YTRIAN(:),
     R VTRIX(:,:), VTRIY(:,:), PTRIX(:,:), PTRIY(:,:)
 
      INTEGER, PUBLIC, ALLOCATABLE, SAVE ::
     I NECKE(:,:), NCHBAR(:,:), NSEITE(:,:),
     I INMTI(:,:), INSPAT(:,:), IXTRI(:), IYTRI(:)
 
      INTEGER, PUBLIC, SAVE ::
     I NRKNOT, NTRII, NCTRIG, MCTRIG
 
 
      TYPE :: TRI_ELEM
        INTEGER :: NOTRI
        TYPE(TRI_ELEM), POINTER :: NEXT_TRI
      END TYPE TRI_ELEM
 
      TYPE :: TRI_LISTE
        TYPE(TRI_ELEM), POINTER :: PTRI
      END TYPE TRI_LISTE
 
      TYPE :: TRI_SURF
        INTEGER :: NUMTR
        INTEGER, POINTER :: ITRIAS(:), ITRISI(:)
        REAL(DP), POINTER :: BGLT(:)
      END TYPE TRI_SURF
 
      TYPE(TRI_LISTE), ALLOCATABLE, SAVE, PUBLIC :: COORTRI(:)
 
      TYPE(TRI_SURF), ALLOCATABLE, PUBLIC, SAVE :: SURF_TRIAN(:)
 
      CONTAINS
 
 
      SUBROUTINE EIRENE_ALLOC_CTRIG
 
      IF (ALLOCATED(XTRIAN)) RETURN
 
      NCTRIG = 2*NKNOTS+4*3*NTRIS
      MCTRIG = (5*3+2)*NTRIS+2
 
      ALLOCATE (XTRIAN(NKNOTS))
      ALLOCATE (YTRIAN(NKNOTS))
      ALLOCATE (VTRIX(3,NTRIS))
      ALLOCATE (VTRIY(3,NTRIS))
      ALLOCATE (PTRIX(3,NTRIS))
      ALLOCATE (PTRIY(3,NTRIS))
 
      ALLOCATE (NECKE(3,NTRIS))
      ALLOCATE (NCHBAR(3,NTRIS))
      ALLOCATE (NSEITE(3,NTRIS))
      ALLOCATE (INMTI(3,NTRIS))
      ALLOCATE (INSPAT(3,NTRIS))
      ALLOCATE (IXTRI(NTRIS))
      ALLOCATE (IYTRI(NTRIS))
 
      ALLOCATE (SURF_TRIAN(NLIMPS))
 
      WRITE (55,'(A,T25,I15)')
     .       ' CTRIG ',NCTRIG*8+MCTRIG*4
 
      CALL EIRENE_INIT_CTRIG
 
      RETURN
      END SUBROUTINE EIRENE_ALLOC_CTRIG
 
 
      SUBROUTINE EIRENE_DEALLOC_CTRIG
 
      INTEGER :: I
      TYPE(TRI_ELEM), POINTER :: CUR, CURN
 
      IF (.NOT.ALLOCATED(XTRIAN)) RETURN
 
      DEALLOCATE (XTRIAN)
      DEALLOCATE (YTRIAN)
      DEALLOCATE (VTRIX)
      DEALLOCATE (VTRIY)
      DEALLOCATE (PTRIX)
      DEALLOCATE (PTRIY)
 
      DEALLOCATE (NECKE)
      DEALLOCATE (NCHBAR)
      DEALLOCATE (NSEITE)
      DEALLOCATE (INMTI)
      DEALLOCATE (INSPAT)
      DEALLOCATE (IXTRI)
      DEALLOCATE (IYTRI)
 
      DO I=1, NLIMPS
        IF (SURF_TRIAN(I)%NUMTR > 0) THEN
          DEALLOCATE (SURF_TRIAN(I)%ITRIAS)
          DEALLOCATE (SURF_TRIAN(I)%ITRISI)
          DEALLOCATE (SURF_TRIAN(I)%BGLT)
        END IF
      END DO
 
      DEALLOCATE (SURF_TRIAN)
 
      IF (ALLOCATED(COORTRI)) THEN
        DO I=1, NKNOT
! yannick corrected
!          CUR => COORTRI(NECKE(1,I))%PTRI
          CUR => COORTRI(I)%PTRI
          DO WHILE(ASSOCIATED(CUR))
            CURN => CUR%NEXT_TRI
            DEALLOCATE (CUR)
            CUR => CURN
          END DO
        END DO
 
        DEALLOCATE (COORTRI)
      END IF
 
      RETURN
      END SUBROUTINE EIRENE_DEALLOC_CTRIG
 
 
      SUBROUTINE EIRENE_INIT_CTRIG
 
      XTRIAN = 0._DP
      YTRIAN = 0._DP
      VTRIX  = 0._DP
      VTRIY  = 0._DP
      PTRIX  = 0._DP
      PTRIY  = 0._DP
 
      NECKE  = 0
      NCHBAR = 0
      NSEITE = 0
      INMTI  = 0
      INSPAT = 0
      IXTRI = 0
      IYTRI = 0
 
      SURF_TRIAN(:)%NUMTR = 0
 
      RETURN
      END SUBROUTINE EIRENE_INIT_CTRIG
 
      END MODULE EIRMOD_CTRIG
 
 
 
 
 
 
