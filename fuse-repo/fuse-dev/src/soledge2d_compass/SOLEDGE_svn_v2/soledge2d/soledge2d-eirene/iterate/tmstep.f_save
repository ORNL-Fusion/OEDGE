CDR  APRIL 2006: IPHOT ADDED TO LOOP: DO 140
!pb  31.10.06:  definition of RPART, RPARTC, IPART, IPARTC changed
!               RPART(NPARTT,NPRNL) --> RPART(NPRNL,NPARTT)
C
      SUBROUTINE EIRENE_TMSTEP
C
C  THIS SUBROUTINE IS CALLED AFTER EACH TIME CYCLE. IT ALLOWS TO
C  MODIFY SOME PLASMA BACKGROUND AND PRIMARY SOURCE DATA (I.E., STRATA
C  ISTRA=1,NSTRAI-1) ACCORDING TO INPUT SPECIFICATIONS IN BLOCK 13.
C
C  IT THEN DEFINES THE STRATUM ISTRA=NSTRAI, I.E., THE SOURCE DUE TO
C  THE INITIAL CONDITION AT THE BEGINNING OF THE NEXT TIMESTEP.
C
      USE EIRMOD_PRECISION
      USE EIRMOD_PARMMOD
      USE EIRMOD_COMUSR
      USE EIRMOD_CCONA
      USE EIRMOD_CLOGAU
      USE EIRMOD_CPLOT
      USE EIRMOD_CTRCEI
      USE EIRMOD_COMPRT
      USE EIRMOD_COMNNL
      USE EIRMOD_COMSOU
      USE EIRMOD_CTEXT
      USE EIRMOD_CLGIN
      USE EIRMOD_CGRID
      USE EIRMOD_COUTAU
 
      IMPLICIT NONE
 
      REAL(DP) :: SGMTOT(NSTRA),FLX(NSTRA)
      REAL(DP), ALLOCATABLE :: SPZ_FLX(:,:,:)
      REAL(DP) :: FLXQ, FCT, SGMREL, SGMTQN, ADDS, ADD, SGMTQ1, 
     .            XW, YW, ZW, RW, PH
      INTEGER :: J, ISTRO, IPANO, ISTR, I, IPAN, MXSPZ, ISPNO, NT
C
C  STEP 1
C
C  REDUCE REDUNDANT PRINTOUT
      TRCPLT=.FALSE.
      TRCGRD=.FALSE.
      PLTSRC(NSTRAI)=.FALSE.
      DO 120 ISTR=1,NSTRAI-1
        PLTSRC(NSTRAI)=PLTSRC(NSTRAI).OR.PLTSRC(ISTR)
120   CONTINUE
C
C  SPEED UP GEOMETRY
C
C  STEP 2
C
C  MODIFY BACKGROUND DATA AS COMPARED TO PREVIOUS ITERATION
C  FOR TIME DEP. MODE
C
C  STARTING TIME FOR NEXT TIMESTEP
C
      TIME0=TIME0+DTIMV
C
C  CALL USER SUPPLIED ROUTINE TMSUSR
C  E.G.: FILL COMMON BRAEIR WITH NEW PLASMA, IF NMODE.NE.0
C  BE CAREFUL: NO INDEX MAPPING IS DONE, UNLESS
C  NCUTL.NE.NCUTB
      CALL EIRENE_TMSUSR(TIME0)
      NLPLAS=.TRUE.
C
C  STEP 3
C
C  SET SOURCE DUE TO INITIAL CONDITION FOR NEXT TIME CYCLE
C
C  SOURCE STRENGTH OF INITIAL DISTRIBUTION IN NEW TIME CYCLE
      IPRNL=IPRNLI
      IPRNLI=0
      IF (NPTST.EQ.0) THEN
        NPTS(NSTRAI)=IPRNL
        NLMOVIE=.FALSE.
      ELSEIF (NPTST.GT.0) THEN
        NPTS(NSTRAI)=NPTST
        NLMOVIE=.FALSE.
      ELSEIF (NPTST.LT.0) THEN
        NPTS(NSTRAI)=IPRNL
        NLMOVIE=.TRUE.
      ENDIF
 
      MXSPZ = MAX(NPHOTI, NATMI, NMOLI, NIONI)
      ALLOCATE (SPZ_FLX(NSTRA,0:4,0:MXSPZ))
      SPZ_FLX = 0._DP

      FLUX(NSTRAI)=0.
      RPARTW(0)=0.0
      DO 130 ISTR=1,NSTRAI
        SGMTOT(ISTR)=0.0
        FLX(ISTR)=0.0
130   CONTINUE
      SGMREL=0.0
C
      IF (IPRNL.EQ.0) GOTO 300
      IPANO=IPART(1,1)
      ISTRO=IPART(8,1)
      ADDS=0.
C
C  SET "ATOMIC" FLUXES ONTO CENSUS ARRAY
      DO 140  I=1,IPRNL
        IPAN=IPART(1,I)
        ISTR=IPART(8,I)
        ITYP=ISPEZI(IPART(9,I),-1)
        WEIGHT=RPART(9,I)
        IF (ITYP.EQ.0) THEN
          IPHOT=ISPEZI(IPART(9,I),0)
          RPART(9,I)=RPART(9,I)*FPHSCL(ISTR)
          ADD=WEIGHT*FLXFAC(ISTR)*NPRT(IPHOT)
          ISPNO=IPHOT
        ELSEIF (ITYP.EQ.1) THEN
          IATM=ISPEZI(IPART(9,I),1)
          RPART(9,I)=RPART(9,I)*FASCL(ISTR)
          ADD=WEIGHT*FLXFAC(ISTR)*NPRT(NSPH+IATM)
          ISPNO=IATM
        ELSEIF (ITYP.EQ.2) THEN
          IMOL=ISPEZI(IPART(9,I),2)
          RPART(9,I)=RPART(9,I)*FMSCL(ISTR)
          ADD=WEIGHT*FLXFAC(ISTR)*NPRT(NSPA+IMOL)
          ISPNO=IMOL
        ELSEIF (ITYP.EQ.3) THEN
          IION=ISPEZI(IPART(9,I),3)
          RPART(9,I)=RPART(9,I)*FISCL(ISTR)
          ADD=WEIGHT*FLXFAC(ISTR)*NPRT(NSPAM+IION)
          ISPNO=IION
        ENDIF
        RPARTW(I)=RPARTW(I-1)+WEIGHT*FLXFAC(ISTR)
        SPZ_FLX(ISTR,ITYP,ISPNO) = SPZ_FLX(ISTR,ITYP,ISPNO) + ADD
        SPZ_FLX(ISTR,ITYP,0) = SPZ_FLX(ISTR,ITYP,0) + ADD
C
C  ACCUMULATE CONTRIBUTION FROM TEST FLIGHT NO. IPANO
        IF (IPAN.EQ.IPANO) THEN
          ADDS=ADDS+ADD
        ENDIF
C  NEW PARTICLE ?
        IF (IPAN.NE.IPANO) THEN
          FLUX(NSTRAI)=FLUX(NSTRAI)+ADDS
          FLX(ISTRO)=FLX(ISTRO)+ADDS
          SGMTOT(ISTRO)=SGMTOT(ISTRO)+ADDS*ADDS
          IPANO=IPAN
          ISTRO=ISTR
          ADDS=ADD
        ENDIF
140   CONTINUE
C  CONTRIBUTION FROM LAST TEST FLIGHT
      FLUX(NSTRAI)=FLUX(NSTRAI)+ADDS
      FLX(ISTRO)=FLX(ISTRO)+ADDS
      SGMTOT(ISTRO)=SGMTOT(ISTRO)+ADDS*ADDS
C
C  VARIANCE OF CENSUS FLUX: ACCOUNT FOR SOURCE STRATIFICATION
C
      SGMTQ1=0.
      SGMREL=0.
      DO 150 ISTR=1,NSTRAI
        IF (XMCP(ISTR).GT.1.) THEN
          FCT=XMCP(ISTR)/(XMCP(ISTR)-1.)
          FLXQ=FLX(ISTR)*FLX(ISTR)
          SGMTQ1=SGMTQ1+(SGMTOT(ISTR)-FLXQ/XMCP(ISTR))*FCT
        ENDIF
150   CONTINUE
      IF (SGMTQ1.GT.0.D0) THEN
        SGMTQN=SQRT(SGMTQ1)
        SGMREL=SGMTQN/(FLUX(NSTRAI)+EPS60)
        SGMREL=MAX(0._DP,SGMREL-EPS10)*100.
      ENDIF
C
      IF (FLUX(NSTRAI).GT.0) THEN
        NSRFSI(NSTRAI)=1
        SORWGT(1,NSTRAI)=1.D0
      ENDIF
C
      DO I=1,IPRNL
        DO J=1,NPARTT
          RPARTC(J,I)=RPART(J,I)
        ENDDO
      ENDDO
      DO I=1,IPRNL
        DO J=1,MPARTT
          IPARTC(J,I)=IPART(J,I)
        ENDDO
      ENDDO
C
      DO I=1,IPRNL
        IPARTC(8,I)=NSTRAI
      ENDDO
C
C  CALL WRSNAP TO WRITE SNAPSHOT POPULATION
C  FOR NEXT RUN ON FT 15
C
      IF ((NFILEJ.EQ.1.OR.NFILEJ.EQ.3).AND.ITIMV.EQ.NTIME) THEN
        CALL EIRENE_WRSNAP
        WRITE (iunout,*) 'CENSUS ARRAY, FLUX AND TOTAL TIMESTEP STORED '

        OPEN (UNIT=2,FILE='census.out')
        WRITE (2,'(I9)') IPRNL
        DO I=1,IPRNL
          ITYP=ISPEZI(IPART(9,I),-1)
          IION=ISPEZI(IPART(9,I),3)
          XW=RPART(1,I)
          YW=RPART(2,I)
          ZW=RPART(3,I)
          PH=RPART(11,I)
          CALL EIRENE_FZRTRA(XW,ZW,PH,NT)
          XW=XW+RMTOR
          RW=SQRT(XW**2+ZW**2)
          XW=RW*COS(PH)
          ZW=RW*SIN(PH)
!          WRITE (2,'(4ES16.7,2X,2I6)') 
!     .           RPART(1:3,I),RPART(9,I),NMASSI(IION),NCHRGI(IION)
          WRITE (2,'(4ES16.7,2X,2I6)') 
     .           XW,YW,ZW,RPART(9,I),NMASSI(IION),NCHRGI(IION)
        END DO
        CLOSE (UNIT=2)
      ENDIF
C
300   CONTINUE
      CALL EIRENE_LEER(2)
      WRITE (iunout,*) 'TIME CYCLE COMPLETED, NEXT TIME CYCLE PREPARED '
      WRITE (iunout,*) 'NEXT TIME CYCLE RUNS FROM TIM1 TO TIM2:  '
      CALL EIRENE_MASR2('TIM1, TIM2      ',TIME0,TIME0+DTIMV)
      CALL EIRENE_MASJ1('IPRNL   ',IPRNL)
      WRITE (IUNOUT,*) '"ATOMIC" FLUX AT CENSUS (AMP):'
      CALL EIRENE_MASR1('FLUX    ',FLUX(NSTRAI))
      CALL EIRENE_MASR1('+-%     ',SGMREL)
C
      DO ISTR=1, NSTRAI
        IF (XMCP(ISTR) <= 1) CYCLE
        CALL EIRENE_LEER(2)
        WRITE (IUNOUT,'(A,I6)') 
     .    '"ATOMIC" FLUXES AT CENSUS (AMP) FROM STRATUM ', ISTR
        IF (ABS(SPZ_FLX(ISTR,0,0)) > EPS30) THEN
          WRITE (IUNOUT,*) 'ORIGINATING FROM PHOTONS'
          DO IPHOT = 1, NPHOTI
            WRITE (IUNOUT,'(A8,4X,ES12.4)') 
     .         TEXTS(IPHOT), SPZ_FLX(ISTR,0,IPHOT)
          END DO
          WRITE (IUNOUT,'(A8,4X,ES12.4)') 
     .         'TOTAL   ', SPZ_FLX(ISTR,0,0)
        ELSEIF (ABS(SPZ_FLX(ISTR,1,0)) > EPS30) THEN
          WRITE (IUNOUT,*) 'ORIGINATING FROM ATOMS'
          DO IATM = 1, NATMI
            WRITE (IUNOUT,'(A8,4X,ES12.4)') 
     .         TEXTS(NSPH+IATM), SPZ_FLX(ISTR,1,IATM)
          END DO        
          WRITE (IUNOUT,'(A8,4X,ES12.4)') 
     .         'TOTAL   ', SPZ_FLX(ISTR,1,0)
        ELSEIF (ABS(SPZ_FLX(ISTR,2,0)) > EPS30) THEN
          WRITE (IUNOUT,*) 'ORIGINATING FROM MOLECULES'
          DO IMOL = 1, NMOLI
            WRITE (IUNOUT,'(A8,4X,ES12.4)') 
     .         TEXTS(NSPA+IMOL), SPZ_FLX(ISTR,2,IMOL)
          END DO        
          WRITE (IUNOUT,'(A8,4X,ES12.4)') 
     .         'TOTAL   ', SPZ_FLX(ISTR,2,0)
        ELSEIF (ABS(SPZ_FLX(ISTR,3,0)) > EPS30) THEN
          WRITE (IUNOUT,*) 'ORIGINATING FROM IONS'
          DO IION = 1, NIONI
            WRITE (IUNOUT,'(A8,4X,ES12.4)') 
     .         TEXTS(NSPAM+IION), SPZ_FLX(ISTR,3,IION)
          END DO        
          WRITE (IUNOUT,'(A8,4X,ES12.4)') 
     .         'TOTAL   ', SPZ_FLX(ISTR,3,0)
        END IF
      END DO
      DEALLOCATE (SPZ_FLX)
C
      RETURN
      END
