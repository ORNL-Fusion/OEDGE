!pb  181206  output is done by processor 0
!pb  181206  setting up of census source is done by processor 0
!pb  100107  call to reinitialisation routine
 
 
      subroutine eirene_init_phase(DT,NLMODE,NLLAST,ITNR,MPI_INITIALIZE)
C
C  DT >  0.      : RUN EIRENE FOR A TIMESTEP DT (S),
C  DT <= 0.      : RUN EIRENE IN QUASI STEADY STATE MODE
C  NLMODE=.FALSE.: STAND ALONE EIRENE RUN
C  NLMODE=.TRUE. : CALLED FROM INTERFACING ROUTINE EIRSRT
C                  PLASMA DATA ON COMMON BRAEIR IN SUBROUTINE INFCOP.
C  ITNR          : ITERATION NUMBER
C  MPI_INITIALIZE: INITIALIZE USAGE OF MPI-ROUTINES FOR PARALLEL COMPUTATION
C
      USE EIRMOD_PRECISION
      USE EIRMOD_PARMMOD
      USE EIRMOD_COMUSR
!pb      USE EIRMOD_CREFMOD
      USE EIRMOD_CREF
      USE EIRMOD_CESTIM
      USE EIRMOD_CRECH
      USE EIRMOD_CADGEO
      USE EIRMOD_cai
      USE EIRMOD_CCONA
      USE EIRMOD_CGRPTL
      USE EIRMOD_CLOGAU
      USE EIRMOD_CPL3D
      USE EIRMOD_CPLOT
      USE EIRMOD_CINIT
      USE EIRMOD_CUPD
      USE EIRMOD_COMSIG
      USE EIRMOD_CPOLYG
      USE EIRMOD_CGRID
      USE EIRMOD_CSPEZ
      USE EIRMOD_CZT1
      USE EIRMOD_CTRCEI
      USE EIRMOD_CCOUPL
      USE EIRMOD_CGEOM
      USE EIRMOD_CSDVI
      USE EIRMOD_CSDVI_COP
      USE EIRMOD_CSDVI_BGK
      USE EIRMOD_CTETRA
      USE EIRMOD_COMPRT
      USE EIRMOD_CPES
      USE EIRMOD_COMNNL
      USE EIRMOD_COMSOU
      USE EIRMOD_CSTEP
      USE EIRMOD_COMSPL
      USE EIRMOD_CTEXT
      USE EIRMOD_CLGIN
      USE EIRMOD_COUTAU
      USE EIRMOD_COMXS
      USE EIRMOD_CSPEI
      USE EIRMOD_CTRIG
      USE EIRMOD_CLAST
      use EIRMOD_cfplk

      use styx2eirene, only : Ntor_cells
 
      IMPLICIT NONE
 
      INCLUDE 'mpif.h'
 
      REAL(DP), INTENT(IN) :: DT
      LOGICAL, INTENT(IN) :: NLMODE, NLLAST, MPI_INITIALIZE
      INTEGER, INTENT(IN) :: ITNR
 
      INTEGER :: NA, NS, IAIN, ICELL, IERROR, IER, ISTRAI
      REAL(DP) :: EIRENE_RESET_SECOND, EIRENE_SECOND_OWN, DUMMY, TIMI
      integer :: inentry=1
      character(20) :: outname


c this is now done in styx2D
C
C               1.         INITIALIZE PACKAGE
C
c      IF (MPI_INITIALIZE) CALL MPI_INIT(IER)
c      CALL MPI_COMM_SIZE (MPI_COMM_WORLD,NPRS,IER)
c      CALL MPI_COMM_RANK (MPI_COMM_WORLD,MY_PE,IER)
      NRPES = NPRS
      IF (NPRS == 1) NSTEFF=1
      
      IF (MY_PE > 0) THEN
        IUNOUT = 7
        OUTNAME='output.'
        WRITE (OUTNAME(8:),'(I4.4)') MY_PE
        OPEN (UNIT=IUNOUT,FILE=OUTNAME,ACCESS='SEQUENTIAL',
     .        FORM='FORMATTED')
      END IF
 
      IF (MY_PE == 0) THEN
 
      IF (ITNR == 1) THEN
        CALL EIRENE_FIND_PARAM
        CALL EIRENE_SET_PARMMOD(1)
      ELSE
        DUMMY=EIRENE_RESET_SECOND()
      END IF


      ! yannick
      NSRFS=Ntor_cells
 
      write (iunout,*) ' Number of PEs ',nprs
      if (nprs .gt. nrpes) then
        write (iunout,*) ' Number of PE too large '
        write (iunout,*) ' increase parameter NRPES = ',nrpes
        call EIRENE_exit_own(1)
      endif
 
      IF (ITNR == 1) CALL EIRENE_ALLOC_CLOGAU
      CALL EIRENE_ALLOC_COMPRT

c     that's the fort.800 ...        
      IUNOUT = 800
      
      inentry = 0
 
        NRAPS=60
        IRAPS=0
        IITER=ITNR
        ITIMV=1
        IPRNLI=0
        DTIMVN=DT
        NLPLAS=NLMODE
 
      END IF  ! MY_PE == 0
 
C
100   CONTINUE
C
C  READ FORMATTED INPUT FILE OR RESTART FOR NEXT ITERATION
C
      ENTRY EIRENE_EIRENE_COUPLE (NLLAST,ITNR)
 
      IF (MY_PE == 0) THEN
C
      IF (INENTRY == 1) THEN
        CALL EIRENE_SET_PARMMOD(1)
        CALL EIRENE_ALLOC_CLOGAU
        CALL EIRENE_ALLOC_COMPRT
      END IF
      CALL EIRENE_ALLOC_CESTIM(1)
      CALL EIRENE_ALLOC_COMUSR(1)
      CALL EIRENE_ALLOC_CADGEO
      CALL EIRENE_ALLOC_CAI
      CALL EIRENE_ALLOC_CPLOT
      CALL EIRENE_ALLOC_CINIT
      CALL EIRENE_ALLOC_CUPD
      CALL EIRENE_ALLOC_CPOLYG
      CALL EIRENE_ALLOC_CGRID
      CALL EIRENE_ALLOC_CSPEZ
      CALL EIRENE_ALLOC_CZT1(1)
      CALL EIRENE_ALLOC_CTRCEI
      CALL EIRENE_ALLOC_CGEOM(1)
      CALL EIRENE_ALLOC_CSDVI(1)
      CALL EIRENE_ALLOC_CTETRA
      CALL EIRENE_ALLOC_CPES
      IF (ITNR == 1) CALL EIRENE_ALLOC_COMSOU(1)
      CALL EIRENE_ALLOC_COMSPL
      CALL EIRENE_ALLOC_CTEXT(1)
      CALL EIRENE_ALLOC_CLGIN
      CALL EIRENE_ALLOC_COMXS(1)
      CALL EIRENE_ALLOC_CTRIG
      CALL EIRENE_ALLOC_COMNNL
 
      IF (ITNR == 1) NLSRON = .TRUE.
C
C   SET DEFAULTS
C
        CALL EIRENE_SETCON
 
      END IF  ! MY_PE == 0
C
C  each internal iteration or time-step starts here
101   CONTINUE
c  re-initialize some "ifirst"-blocks
      CALL EIRENE_GRNXTB(3,'EIRENE.F')
 
      IF (MY_PE == 0) THEN
 
      TIMI=EIRENE_SECOND_OWN()
C
      CALL EIRENE_INPUT
 
      CALL EIRENE_ALLOC_COUTAU
C
C  CHECK PARAMETER STATEMENTS, STORAGE REQUIREMENTS
C
      CALL EIRENE_SETPRM
 
      CALL EIRENE_ALLOC_CSTEP
      CALL EIRENE_ALLOC_CSPEI
      CALL EIRENE_ALLOC_CSDVI(2)
      CALL EIRENE_ALLOC_CSDVI_BGK
      CALL EIRENE_ALLOC_CSDVI_COP
      CALL EIRENE_ALLOC_CLAST
 
      CALL EIRENE_STTXT1
C
      TIME=EIRENE_SECOND_OWN()
      WRITE (iunout,*) 'CPU-TIME CONSUMED IN INPUT: ',TIME-TIMI,' SEC'
      CALL EIRENE_LEER(1)
C
C  SET UP SPLITTING SURFACES, IMPORTANCE FUNCTION AND OTHER DATA
C  FOR NONANALOG METHODS
C
      IF (.NOT.NLANA) THEN
        CALL EIRENE_NANALG
      ELSEIF (NLANA) THEN
C  TURN OF ALL NON-ANALOG SAMPLING
        CALL EIRENE_MASBOX('NON-ANALOG SAMPLING DE-ACTIVATED')
C 1: NO SPLITTING AND RUSSIAN ROULETTE
        WRITE (iunout,*) 'SUBROUTINE NANALG NOT CALLED EIRENE_'
C 2: SPECIES SOURCE SAMPLING
        DO ISTRAI=1,NSTRAI
          NSPEZ(ISTRAI)=MAX(0,NSPEZ(ISTRAI))
        ENDDO
        WRITE (iunout,*) 'NON-ANALOG SOURCE SPECIES SAMPLING TURNED OFF'
C 3: SUPPRESSION OF ABSORPTION AT SURFACES TURNED OFF
        WMINS=1.D30
        WRITE (iunout,*)
     .    'SUPPRESSION OF ABSORPTION AT SURFACES TURNED OFF'
C 4: SUPPRESSION OF ABSORPTION AT COLLISIONS TURNED OFF
        WMINV=1.D30
        WRITE (iunout,*)
     .    'SUPPRESSION OF ABSORPTION AT COLLISIONS TURNED OFF'
        CALL EIRENE_LEER(2)
      ENDIF
C
      TIMI=EIRENE_SECOND_OWN()
C
C
C  PARAMETERS FOR BGK ITERATIONS
C
      NBGVI=NRBGI
      NFSTVI(NTALB)=NBGVI
      NBGVI_STAT=0
      IF (NSIGI_BGK > 0) NBGVI_STAT=NBGVI+2*(NATMI+NMOLI)
      IF (NBGVI_STAT > NBGV_STAT) THEN
        CALL EIRENE_MASPRM('NBGVI_STAT',10,NBGVI_STAT,
     .              'NBGV_STAT',9,NBGV_STAT,IERROR)
        CALL EIRENE_EXIT_OWN(1)
      END IF
C
      IF (TRCAMD) THEN
        CALL EIRENE_LEER(1)
        WRITE (iunout,*) 'NRCXI,NRCX ',NRCXI,NRCX
        WRITE (iunout,*) 'NRELI,NREL ',NRELI,NREL
        WRITE (iunout,*) 'NRPII,NRPI ',NRPII,NRPI
        WRITE (iunout,*) 'NREII,NREI ',NREII,NRDS
        WRITE (iunout,*) 'NRRCI,NREC ',NRRCI,NREC
        CALL EIRENE_LEER(1)
      ENDIF
C
C
C  READ EIRENE STATISTICAL RECOMMENDATIONS FROM PREVIOUS RUN,
C  AND CARRY THEM OUT
C
      IF (NFILEK.EQ.2.OR.NFILEK.EQ.3) THEN
        CALL EIRENE_RREC
        WRITE (iunout,*) 'STRATIFIED SOURCE SAMPLING:'
        WRITE (iunout,*) 'NPTS(ISTRA) ARE MODIFIED, DUE TO NFILEK.GE.2 '
        DO 162 ISTRAI=1,NSTRAI
          WRITE (iunout,*) ISTRAI,' NPTS(INP)= ',NPTS(ISTRAI),
     .                      ' NPTS(MOD)= ',NRECOM(ISTRAI)
          NPTS(ISTRAI)=NRECOM(ISTRAI)
162     CONTINUE
      ENDIF
C
C  IF NLERG:
C  PERFORM A RUN, ONE-SPEED, COLLISION-LESS, UNTIL TIME-LIMIT
C  FOR CELL VOLUME ESTIMATION FROM ERGODIC PRINZIPLE
C
      IF (NLERG) CALL EIRENE_ERGOD
C
C  IF NLMOVIE:
C  PERFORM A RUN, MANY TIMESTEPS, CONSTANT NUMBER OF PARTICLES IN
C  PICTURE, COLD START FROM PREVIOUS CENSUS.
C  FOR MOVIE OF PARTICLE TRAJECTORIES
C  INVERT ORDER OF STRATA IN ORDER TO HAVE CENSUS STRATUM FIRST.
C
      IF (NLMOVIE) CALL EIRENE_MOVIE
C
C  PUT SELECTED EIRENE ATOMIC DATA FIELDS ONTO ADIN-ARRAY FOR OUTPUT
C
      DO 170 IAIN=1,NAINI
        NS=NAINS(IAIN)
        NA=NAINT(IAIN)
C
        IF (NSTORDR < NRAD) GOTO 170
        IF (NA.EQ.20) THEN
          DO 1720 ICELL=1,NSBOX
            ADIN(IAIN,ICELL)=TABDS1(NS,ICELL)
1720      CONTINUE
        ELSEIF (NA.EQ.21) THEN
          DO 1721 ICELL=1,NSBOX
            ADIN(IAIN,ICELL)=EELDS1(NS,ICELL)
1721      CONTINUE
        ELSEIF (NA.EQ.22) THEN
          DO 1722 ICELL=1,NSBOX
            ADIN(IAIN,ICELL)=TABCX3(NS,ICELL,1)
1722      CONTINUE
        ELSEIF (NA.EQ.23) THEN
          DO 1723 ICELL=1,NSBOX
            ADIN(IAIN,ICELL)=EPLCX3(NS,ICELL,1)
1723      CONTINUE
        ELSEIF (NA.EQ.24) THEN
          DO 1724 ICELL=1,NSBOX
            ADIN(IAIN,ICELL)=TABEL3(NS,ICELL,1)
1724      CONTINUE
        ELSEIF (NA.EQ.25) THEN
          DO 1725 ICELL=1,NSBOX
            ADIN(IAIN,ICELL)=EPLEL3(NS,ICELL,1)
1725      CONTINUE
        ELSEIF (NA.EQ.26) THEN
          DO 1726 ICELL=1,NSBOX
            ADIN(IAIN,ICELL)=TABPI3(NS,ICELL,1)
1726      CONTINUE
        ELSEIF (NA.EQ.27) THEN
          DO 1727 ICELL=1,NSBOX
            ADIN(IAIN,ICELL)=EPLPI3(NS,ICELL,1)
1727      CONTINUE
        ELSEIF (NA.EQ.28) THEN
          DO 1728 ICELL=1,NSBOX
            ADIN(IAIN,ICELL)=TABRC1(NS,ICELL)
1728      CONTINUE
        ELSEIF (NA.EQ.29) THEN
          DO 1729 ICELL=1,NSBOX
            ADIN(IAIN,ICELL)=EELRC1(NS,ICELL)
1729      CONTINUE
        ENDIF
170   CONTINUE
C
C  PRINT VOLUME AVERAGED INPUT TALLIES.
C
      CALL EIRENE_OUTPLA(0)
C
      TIME=EIRENE_SECOND_OWN()
      WRITE (iunout,*) 'CPU-TIME CONSUMED IN XSECT: ',TIME-TIMI,' SEC'
      CALL EIRENE_LEER(1)
C
C               2.         PLOT GEOMETRY
C
200   CONTINUE
      CALL EIRENE_PLT2D

 
      END IF   ! MY_PE == 0

      if (nprs > 1) CALL EIRENE_BROADCAST


 
      RETURN
 
C     the following entry is for reinitialization of EIRENE (DMH)
 
      ENTRY EIRENE_EIRENE_REINIT
      inentry = 1
      return
      END
