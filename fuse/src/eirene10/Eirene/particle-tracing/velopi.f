C
      SUBROUTINE VELOPI(K,VXO,VYO,VZO,VLO,IOLD,NOLD,VELQ,NFLAG,
     .                  IRPI,RMASS)
C
C  FETCH A NEW SPECIES INDEX AND A
C          NEW VELOCITY OF TEST PARTICLE AFTER BULK PARTICLE COLLISION (PI)
C  AT THIS POINT: ONE NEXT GENERATION TEST PARTICLE WILL BE BORN
C                 I.E. WEIGHT ADJUSTMENT ALREADY DONE IN CALLING PROGRAM
C
C  K   : CELL INDEX
C  VXO : X COMPONENT OF SPEED UNIT VECTOR OF TEST PARTICLE BEFORE EVENT
C  VYO : Y COMPONENT OF SPEED UNIT VECTOR OF TEST PARTICLE BEFORE EVENT
C  VZO : Z COMPONENT OF SPEED UNIT VECTOR OF TEST PARTICLE BEFORE EVENT
C  VLO : VELOCITY OF TEST PARTICLE BEFORE EVENT
C
C
C  FIND TYPE OF NEXT GENERATION PARTICLE (ATOM, MOLECULE, TEST ION)
C
      USE PRECISION
      USE PARMMOD
      USE COMUSR
      USE CCONA
      USE CRAND
      USE CZT1
      USE COMPRT
      USE CINIT
      USE CLOGAU
      USE COMXS
      USE CLAST

      IMPLICIT NONE

      REAL(DP), INTENT(IN) :: VXO, VYO, VZO, VLO, RMASS
      REAL(DP), INTENT(OUT) :: VELQ
      INTEGER, INTENT(IN) :: K, IRPI, IOLD, NOLD, NFLAG
      REAL(DP) :: FEHVPI3, VXISO, VYISO, VZISO, EHEAVY, VX, VY, VZ,
     .            CVRSS, RSQDV, EDISS, ZEP3, VELDS, VREL,VRELQ,
     .            VXI, VYI, VZI, 
     .            VXN, VYN, VZN, VN,
     .            VXDR, VYDR, VZDR, ZARGX, ZARGY, ZARGZ, ZARG,
     .            ELMIN,ELMAX,CPI,ELAB,ELLAB,VRQ,VR,CROSS,TEST
      REAL(DP), EXTERNAL :: RANF_EIRENE
      INTEGER :: ISPZI, ISPZM, ISPZA
      INTEGER :: ICOUNT, J, JJ, IRL, IREAC
      INTEGER :: IFIRST=0 

      IF (IFIRST.EQ.0) THEN
        IFIRST=1
        DO IRL=1,NRPII
          IFLRPI(IRL)=0
          NPMEAN(IRL)=0
          XPMEAN(IRL)=0.D0
        ENDDO
      ENDIF
C
      IF (IFLRPI(IRPI).EQ.0.AND.NFLAG.NE.2) THEN
        IFLRPI(IRPI)=-1
C  PREPARE REJECTION SAMPLING OF INCIDENT ION VELOCITY
C  IS CROSS SECTION AVAILABLE?
        IREAC=MODCOL(4,1,IRPI)
        IF (IREAC.EQ.0) GOTO 1
C
        elmin=log(1.0_dp)
        elmax=log(1.e5_dp)
        SGPVMX(IRPI)=-1.D60
        JJ=1
        do j=1,1000
          elab=elmin+(j-1)/999.*(elmax-elmin)
          IF (LHABER) THEN
            write (iunout,*) 'error in velopi: no diff. PI Cr. Section '
C           CALL SCATANG (ELAB,-1._DP,ELTHDUM,CTCHDUM,SIGHABER)
C           CPI= SIGHABER*AU_TO_CM2
          ELSE
            CPI=CROSS(ELAB,IREAC,IRPI,'VELOPI 1')
          END IF
          vrq=exp(elab-defpi(IRPI))
          vr=sqrt(vrq)
          if (cpi*vr.gt.SGPVMX(IRPI)) then
            JJ=J
            SGPVMX(IRPI)=cpi*vr
          endif
        enddo
        CALL LEER(1)
        WRITE (iunout,*) 'FIRST CALL TO VELOPI FOR IRPI= ',IRPI
        WRITE (iunout,*) 'PREPARE REJECTION TECHNIQUE '
        WRITE (iunout,*) 'SGPVMX IN VELOPI,JJ ',SGPVMX(IRPI),JJ
        IF (JJ.NE.1.AND.JJ.NE.1000) THEN
          elab=elmin+(JJ-1)/999.*(elmax-elmin)
          ELAB=EXP(ELAB)
          WRITE (iunout,*) 'TRUE MAXIMUM FOUND AT ELAB(EV) = ',ELAB
          IFLRPI(IRPI)=1
        ELSE
          WRITE (iunout,*) 'NO TRUE MAXIMUM FOUND, USE WEIGHING '
        ENDIF
        CALL LEER(1)
      ENDIF
1     CONTINUE
C
C  INITIALIZE COUNTER FOR REJECTION SAMPLING OF INCIDENT BULK PARTICLE
C
      ICOUNT=1
C
C  NEXT: STEP 1
C
      ZARG=ZRG(IPLS,K)
      ZARGX=ZRG(IPLS,K)
      ZARGY=ZRG(IPLS,K)
      ZARGZ=ZRG(IPLS,K)
      IF (NLDRFT) THEN
        IF (INDPRO(4) == 8) THEN
          CALL VECUSR (2,VXDR,VYDR,VZDR,IPLS)
        ELSE
          VXDR=VXIN(IPLS,K)
          VYDR=VYIN(IPLS,K)
          VZDR=VZIN(IPLS,K)
        END IF
      ELSE
        VXDR=0.D0
        VYDR=0.D0
        VZDR=0.D0
      ENDIF
C
      VX=VXO*VLO
      VY=VYO*VLO
      VZ=VZO*VLO
C
123   CONTINUE
      IF (INIV2.LE.0) CALL FGAUSS
C
C  SAMPLE FROM 3D MAXWELLIAN
      VXN=FG1(INIV2)
      VYN=FG2(INIV2)
      VZN=FG3(INIV2)
      INIV2=INIV2-1
C
C  DRIFTING, MONOENERGETIC ISOTROPIC DISTRIBUTION
C
      IF (NFLAG.EQ.1) THEN
C  ZT1 CORRESPONDS TO ROOT MEAN SQUARE VELOCITY AT TIIN(IPLS,K)
        VEL=SQRT(ZT1(IPLS,K))
        VN=VEL/SQRT(VXN*VXN+VYN*VYN+VZN*VZN)
        VXN=VXN*VN+VXDR
        VYN=VYN*VN+VYDR
        VZN=VZN*VN+VZDR
      ELSE
        VXN=VXN*ZARGX+VXDR
        VYN=VYN*ZARGY+VYDR
        VZN=VZN*ZARGZ+VZDR
      ENDIF
C
C  DRIFTING MAXWELLIAN DISTRIBUTION (FOR MAXWELL-POTENTIAL: SIGMA*V = CONST.)
C
      IF (NFLAG.EQ.2) THEN
C
        VXI=VXN
        VYI=VYN
        VZI=VZN
C
      ELSE
C
C   ALL OTHER DISTRIBUTIONS
C
C   WEIGHT CORRECTION DUE TO ENERGY DEPENDENCE IN CROSS SECTION
C   OR: REJECTION     DUE TO ENERGY DEPENDENCE IN CROSS SECTION
C   PRESENT VERSION: REJECTION
        VRELQ=(VXN-VX)**2+(VYN-VY)**2+(VZN-VZ)**2
        VREL=SQRT(VRELQ)
        ELAB=LOG(VRELQ)+DEFPI(IRPI)
        IREAC=MODCOL(4,1,IRPI)
        CPI=CROSS(ELAB,IREAC,IRPI,'VELOPI 2')
C
CH FOR SCATTERING ANGLE FROM DIFFERENTIAL CROSS SECTION:
C
        IF (LHABER) THEN
C         RMN=RMASS
C         RMI=RMASSP(IPLS)
C         RMSI=1./(RMN+RMI)
C         RLMS=RMN*RMI*RMSI
C         ER=RLMS*VRELQ*CVELI2
C         RAN=RANF_EIRENE()
C         CALL SCATANG (ER,RAN,ELTHDUM,CTCHDUM,SIGHABER)
C         CPI= SIGHABER*AU_TO_CM2
        END IF
CH
C
C       IF (NLREJC) THEN
C
        IF (IFLRPI(IRPI).GT.0) THEN
          TEST=RANF_EIRENE()*SGPVMX(IRPI)
          IF (TEST.GT.CPI*VREL) THEN
C  REJECT
            ICOUNT=ICOUNT+1
            IF (ICOUNT.LT.500) GOTO 123
            WRITE (iunout,*) 
     .        'ICOUNT TOO LARGE ( > 500) IN VELOPI. ACCEPT SAMPLE '
            ELLAB=EXP(ELAB)
            WRITE (iunout,*) 'NPANU, IREAC, IRPI, ELAB(EV) ',
     .                        NPANU, IREAC, IRPI, ELLAB
          ELSE
C  ACCEPT
            XPMEAN(IRPI)=XPMEAN(IRPI)+ICOUNT
            NPMEAN(IRPI)=NPMEAN(IRPI)+1
          ENDIF
C       ELSEIF (NLWEIGHT) THEN

        ELSE
C  FOR SOME REASON SGCVMX COULD NOT BE FOUND. 
C  SO USE WEIGHTING RATHER THAN REJECTION
          WEIGHT=WEIGHT*CPI*VREL*DIIN(IPLS,K)/SIGVPI(IRPI)
        ENDIF
C
        VXI=VXN
        VYI=VYN
        VZI=VZN
      ENDIF
C
C  STEP 1 FINISHED, COLLIDING BULK ION'S VELOCITY IS SET: VXI,VYI,VZI
C
200   CONTINUE
C
C  STEP 2: 
C

C  DETERMINE NEXT GENERATION TEST PARTICLE, BY SAMPLING FROM P2NP

      ZEP3=RANF_EIRENE( )
C
      IF (ZEP3.LE.P2NP(IRPI,NSPH)) THEN
C
C  A PHOTON IS BORN, FIND SPECIES INDEX IPHOT AND VELOCITY
C
C  OPTION NOT WRITTEN
        WRITE (iunout,*) 'INVALID OPTION IN VELOPI. CALL EXIT '
        CALL EXIT_OWN(1)
C
      ELSEIF (ZEP3.LE.P2NP(IRPI,NSPA)) THEN
C
C  A NEUTRAL ATOM IS BORN, FIND SPECIES INDEX IATM AND WEIGHT
C
        ITYP=1
        DO 448 IATM=1,NATMIM
          ISPZA=NSPH+IATM
          IF (ZEP3.LE.P2NP(IRPI,ISPZA)) GOTO 449
448     CONTINUE
        IATM=NATMI
449     CONTINUE
        CVRSS=CVRSSA(IATM)
        RSQDV=RSQDVA(IATM)
        EDISS=EATPI(IRPI,IATM,2)
C
      ELSEIF (ZEP3.LE.P2NP(IRPI,NSPAM)) THEN
C
C  A NEUTRAL MOLECULE IS BORN, FIND SPECIES INDEX IMOL AND WEIGHT
C
        ITYP=2
        DO 458 IMOL=1,NMOLIM
          ISPZM=NSPA+IMOL
          IF (ZEP3.LE.P2NP(IRPI,ISPZM)) GOTO 459
458     CONTINUE
        IMOL=NMOLI
459     CONTINUE
        CVRSS=CVRSSM(IMOL)
        RSQDV=RSQDVM(IMOL)
        EDISS=EMLPI(IRPI,IMOL,2)
C
      ELSEIF (ZEP3.LE.P2NP(IRPI,NSPAMI)) THEN
C
C  A TEST ION IS BORN, FIND SPECIES INDEX IION AND WEIGHT
C
        ITYP=3
        DO 468 IION=1,NIONIM
          ISPZI=NSPAM+IION
          IF (ZEP3.LE.P2NP(IRPI,ISPZI)) GOTO 469
468     CONTINUE
        IION=NIONI
469     CONTINUE
        CVRSS=CVRSSI(IION)
        RSQDV=RSQDVI(IION)
        EDISS=EIOPI(IRPI,IION,2)
C
      ELSE
        WRITE (iunout,*) 'ERROR IN VELOPI '
        WRITE (iunout,*) 'IRPI ',IRPI,P2NP(IRPI,NSPAMI)
        CALL EXIT_OWN(1)
      ENDIF
C
      IF (NSTORDR >= NRAD) THEN
        EHEAVY=EHVPI3(IRPI,K,1)
      ELSE
        EHEAVY=FEHVPI3(IRPI,K)
      END IF
      EDISS=EDISS*EHEAVY
C
C  FIND SPEED VECTOR FROM ISOTROPIC DISTRIBUTION IN CENTER OF MASS
C  SYSTEM
C

      IF (EDISS.GT.0.D0) THEN
C
C  NEXT LINES: E-NEW=E-OLD+EDIS, ON AVERAGE
C
        IF (INIV3.EQ.0) CALL FISOTR
C
        VXISO=FI1(INIV3)
        VYISO=FI2(INIV3)
        VZISO=FI3(INIV3)
        INIV3=INIV3-1
C
        VELDS=SQRT(EDISS)*RSQDV
        VX=VLO*VXO+VELDS*VXISO
        VY=VLO*VYO+VELDS*VYISO
        VZ=VLO*VZO+VELDS*VZISO
        VELQ=VX*VX+VY*VY+VZ*VZ
        VEL=SQRT(VELQ)
        VELX=VX/VEL
        VELY=VY/VEL
        VELZ=VZ/VEL
      ELSE
        VELX=VXO
        VELY=VYO
        VELZ=VZO
        VEL=VLO
        VELQ=VEL*VEL
      ENDIF
      E0=CVRSS*VELQ
C
      RETURN
C     the following ENTRY is for reinitialization of EIRENE 
      
      ENTRY VELOPI_REINIT
      IFIRST = 0
      return
      END
