      MODULE BRASPOI

      USE PRECISION
      USE PARMMOD

      IMPLICIT NONE

      PRIVATE
      PUBLIC :: ALLOC_BRASPOI, DEALLOC_BRASPOI, NEW_SIMARR, NEW_MULARR,
     .          FREE_SIMARR, FREE_MULARR
      PUBLIC :: CELLSIM, CELLMUL, SIMARR, MULARR,
     .          EAELS, EMELS, EIELS,
     .          EAPLS, EMPLS, EIPLS, PAPLS, PMPLS, PIPLS,
     .          PDENAS, PDENMS, PDENIS, EDENAS, COPVS,
     .          PPPLS, CPPVS, EPPLS, EPELS 

      TYPE :: CELLSIM
        REAL(DP) :: VALUES
        INTEGER :: ICS
        TYPE(CELLSIM), POINTER :: NXTSIM
      END TYPE CELLSIM

      TYPE :: CELLMUL
        REAL(DP) :: VALUEM
        INTEGER :: IART,ICM
        TYPE(CELLMUL), POINTER :: NXTMUL
      END TYPE CELLMUL

      TYPE :: SIMARR
        TYPE(CELLSIM),POINTER :: PSIM
      END TYPE SIMARR

      TYPE :: MULARR
        TYPE(CELLMUL),POINTER :: PMUL
      END TYPE MULARR

      TYPE(SIMARR), ALLOCATABLE, SAVE :: EAELS(:), EMELS(:), EIELS(:),
     .                                   EAPLS(:), EMPLS(:), EIPLS(:),
     .                                   EPPLS(:), EPELS(:)
      TYPE(MULARR), ALLOCATABLE, SAVE :: PAPLS(:), PMPLS(:), PIPLS(:),
     .                                   PDENAS(:),PDENMS(:),PDENIS(:),
     .                                   EDENAS(:),COPVS(:),
     .                                   PPPLS(:), CPPVS(:)

      TYPE(CELLSIM),POINTER, SAVE :: COLLECT_SIMARR
      TYPE(CELLMUL),POINTER, SAVE :: COLLECT_MULARR

      CONTAINS


      SUBROUTINE ALLOC_BRASPOI
      
      INTEGER :: ISTRAI

      IF (ALLOCATED(EAELS)) RETURN

      ALLOCATE (EAELS(NSTRA)) 
      ALLOCATE (EMELS(NSTRA)) 
      ALLOCATE (EIELS(NSTRA))
      ALLOCATE (EAPLS(NSTRA)) 
      ALLOCATE (EMPLS(NSTRA)) 
      ALLOCATE (EIPLS(NSTRA))
      ALLOCATE (EPPLS(NSTRA))
      ALLOCATE (EPELS(NSTRA))
      ALLOCATE (PAPLS(NSTRA)) 
      ALLOCATE (PMPLS(NSTRA)) 
      ALLOCATE (PIPLS(NSTRA))
      ALLOCATE (PDENAS(NSTRA)) 
      ALLOCATE (PDENMS(NSTRA)) 
      ALLOCATE (PDENIS(NSTRA))
      ALLOCATE (EDENAS(NSTRA)) 
      ALLOCATE (COPVS(NSTRA))
      ALLOCATE (PPPLS(NSTRA))
      ALLOCATE (CPPVS(NSTRA))


      DO ISTRAI=1,NSTRA
      
      NULLIFY(PAPLS(ISTRAI)%PMUL)
      NULLIFY(PMPLS(ISTRAI)%PMUL)
      NULLIFY(PIPLS(ISTRAI)%PMUL)
      
      NULLIFY(EAELS(ISTRAI)%PSIM)
      NULLIFY(EMELS(ISTRAI)%PSIM)
      NULLIFY(EIELS(ISTRAI)%PSIM)
      NULLIFY(EAPLS(ISTRAI)%PSIM)
      NULLIFY(EMPLS(ISTRAI)%PSIM)
      NULLIFY(EIPLS(ISTRAI)%PSIM)
      NULLIFY(EPPLS(ISTRAI)%PSIM)
      NULLIFY(EPELS(ISTRAI)%PSIM)
      
      NULLIFY(PDENAS(ISTRAI)%PMUL)
      NULLIFY(PDENMS(ISTRAI)%PMUL)
      NULLIFY(PDENIS(ISTRAI)%PMUL)
      NULLIFY(EDENAS(ISTRAI)%PMUL)
      
      NULLIFY(COPVS(ISTRAI)%PMUL)
      NULLIFY(PPPLS(ISTRAI)%PMUL)
      NULLIFY(CPPVS(ISTRAI)%PMUL)

      END DO
      
      NULLIFY(COLLECT_SIMARR)
      NULLIFY(COLLECT_MULARR)

      WRITE (55,*) ' BRASPOI ',18*NSTRA*8

      RETURN
      END SUBROUTINE ALLOC_BRASPOI


      SUBROUTINE DEALLOC_BRASPOI

      IF (.NOT.ALLOCATED(EAELS)) RETURN

      DEALLOCATE (EAELS)
      DEALLOCATE (EMELS)
      DEALLOCATE (EIELS)
      DEALLOCATE (EAPLS)
      DEALLOCATE (EMPLS)
      DEALLOCATE (EIPLS)
      DEALLOCATE (EPPLS)
      DEALLOCATE (EPELS)
      DEALLOCATE (PAPLS)
      DEALLOCATE (PMPLS)
      DEALLOCATE (PIPLS)
      DEALLOCATE (PDENAS)
      DEALLOCATE (PDENMS)
      DEALLOCATE (PDENIS)
      DEALLOCATE (EDENAS)
      DEALLOCATE (COPVS)
      DEALLOCATE (PPPLS)
      DEALLOCATE (CPPVS)

      RETURN
      END SUBROUTINE DEALLOC_BRASPOI


      FUNCTION NEW_SIMARR() RESULT(NODE)
      
      TYPE(CELLSIM), POINTER :: NODE
      
      IF (ASSOCIATED(COLLECT_SIMARR)) THEN
        NODE => COLLECT_SIMARR
        COLLECT_SIMARR => COLLECT_SIMARR%NXTSIM
      ELSE
        ALLOCATE (NODE)
        NULLIFY (NODE%NXTSIM)
      END IF

      RETURN
      END FUNCTION NEW_SIMARR


      FUNCTION NEW_MULARR() RESULT(NODE)
      
      TYPE(CELLMUL), POINTER :: NODE
      
      IF (ASSOCIATED(COLLECT_MULARR)) THEN
        NODE => COLLECT_MULARR
        COLLECT_MULARR => COLLECT_MULARR%NXTMUL
      ELSE
        ALLOCATE (NODE)
        NULLIFY (NODE%NXTMUL)
      END IF

      RETURN
      END FUNCTION NEW_MULARR

      
      SUBROUTINE FREE_SIMARR(ISTRAI)

      INTEGER, INTENT(IN) :: ISTRAI
      TYPE(CELLSIM), POINTER :: P

C  FREE EAELS
      P => EAELS(ISTRAI)%PSIM
      IF (ASSOCIATED(P)) THEN
        DO WHILE (ASSOCIATED(P%NXTSIM))
          P => P%NXTSIM
        END DO
        P%NXTSIM => COLLECT_SIMARR
        COLLECT_SIMARR => EAELS(ISTRAI)%PSIM
        NULLIFY(EAELS(ISTRAI)%PSIM)
      END IF
      
C  FREE EMELS
      P => EMELS(ISTRAI)%PSIM
      IF (ASSOCIATED(P)) THEN
        DO WHILE (ASSOCIATED(P%NXTSIM))
          P => P%NXTSIM
        END DO
        P%NXTSIM => COLLECT_SIMARR
        COLLECT_SIMARR => EMELS(ISTRAI)%PSIM
        NULLIFY(EMELS(ISTRAI)%PSIM)
      END IF
      
      
C  FREE EIELS
      P => EIELS(ISTRAI)%PSIM
      IF (ASSOCIATED(P)) THEN
        DO WHILE (ASSOCIATED(P%NXTSIM))
          P => P%NXTSIM
        END DO
        P%NXTSIM => COLLECT_SIMARR
        COLLECT_SIMARR => EIELS(ISTRAI)%PSIM
        NULLIFY(EIELS(ISTRAI)%PSIM)
      END IF

C  FREE EAPLS
      P => EAPLS(ISTRAI)%PSIM
      IF (ASSOCIATED(P)) THEN
        DO WHILE (ASSOCIATED(P%NXTSIM))
          P => P%NXTSIM
        END DO
        P%NXTSIM => COLLECT_SIMARR
        COLLECT_SIMARR => EAPLS(ISTRAI)%PSIM
        NULLIFY(EAPLS(ISTRAI)%PSIM)
      END IF
      
C  FREE EMPLS
      P => EMPLS(ISTRAI)%PSIM
      IF (ASSOCIATED(P)) THEN
        DO WHILE (ASSOCIATED(P%NXTSIM))
          P => P%NXTSIM
        END DO
        P%NXTSIM => COLLECT_SIMARR
        COLLECT_SIMARR => EMPLS(ISTRAI)%PSIM
        NULLIFY(EMPLS(ISTRAI)%PSIM)
      END IF
      
      
C  FREE EIPLS
      P => EIPLS(ISTRAI)%PSIM
      IF (ASSOCIATED(P)) THEN
        DO WHILE (ASSOCIATED(P%NXTSIM))
          P => P%NXTSIM
        END DO
        P%NXTSIM => COLLECT_SIMARR
        COLLECT_SIMARR => EIPLS(ISTRAI)%PSIM
        NULLIFY(EIPLS(ISTRAI)%PSIM)
      END IF
      
C  FREE EPPLS
      P => EPPLS(ISTRAI)%PSIM
      IF (ASSOCIATED(P)) THEN
        DO WHILE (ASSOCIATED(P%NXTSIM))
          P => P%NXTSIM
        END DO
        P%NXTSIM => COLLECT_SIMARR
        COLLECT_SIMARR => EPPLS(ISTRAI)%PSIM
        NULLIFY(EPPLS(ISTRAI)%PSIM)
      END IF
      
      
C  FREE EPELS
      P => EPELS(ISTRAI)%PSIM
      IF (ASSOCIATED(P)) THEN
        DO WHILE (ASSOCIATED(P%NXTSIM))
          P => P%NXTSIM
        END DO
        P%NXTSIM => COLLECT_SIMARR
        COLLECT_SIMARR => EPELS(ISTRAI)%PSIM
        NULLIFY(EPELS(ISTRAI)%PSIM)
      END IF

      RETURN
      END SUBROUTINE FREE_SIMARR


      
      SUBROUTINE FREE_MULARR(ISTRAI)

      INTEGER, INTENT(IN) :: ISTRAI
      TYPE(CELLMUL), POINTER :: P

C  FREE EAELS
      P => PAPLS(ISTRAI)%PMUL
      IF (ASSOCIATED(P)) THEN
        DO WHILE (ASSOCIATED(P%NXTMUL))
          P => P%NXTMUL
        END DO
        P%NXTMUL => COLLECT_MULARR
        COLLECT_MULARR => PAPLS(ISTRAI)%PMUL
        NULLIFY(PAPLS(ISTRAI)%PMUL)
      END IF
      
C  FREE PMPLS
      P => PMPLS(ISTRAI)%PMUL
      IF (ASSOCIATED(P)) THEN
        DO WHILE (ASSOCIATED(P%NXTMUL))
          P => P%NXTMUL
        END DO
        P%NXTMUL => COLLECT_MULARR
        COLLECT_MULARR => PMPLS(ISTRAI)%PMUL
        NULLIFY(PMPLS(ISTRAI)%PMUL)
      END IF
      
C  FREE PIPLS
      P => PIPLS(ISTRAI)%PMUL
      IF (ASSOCIATED(P)) THEN
        DO WHILE (ASSOCIATED(P%NXTMUL))
          P => P%NXTMUL
        END DO
        P%NXTMUL => COLLECT_MULARR
        COLLECT_MULARR => PIPLS(ISTRAI)%PMUL
        NULLIFY(PIPLS(ISTRAI)%PMUL)
      END IF

C  FREE PDENAS
      P => PDENAS(ISTRAI)%PMUL
      IF (ASSOCIATED(P)) THEN
        DO WHILE (ASSOCIATED(P%NXTMUL))
          P => P%NXTMUL
        END DO
        P%NXTMUL => COLLECT_MULARR
        COLLECT_MULARR => PDENAS(ISTRAI)%PMUL
        NULLIFY(PDENAS(ISTRAI)%PMUL)
      END IF
      
C  FREE PDENMS
      P => PDENMS(ISTRAI)%PMUL
      IF (ASSOCIATED(P)) THEN
        DO WHILE (ASSOCIATED(P%NXTMUL))
          P => P%NXTMUL
        END DO
        P%NXTMUL => COLLECT_MULARR
        COLLECT_MULARR => PDENMS(ISTRAI)%PMUL
        NULLIFY(PDENMS(ISTRAI)%PMUL)
      END IF
      
C  FREE PDENIS
      P => PDENIS(ISTRAI)%PMUL
      IF (ASSOCIATED(P)) THEN
        DO WHILE (ASSOCIATED(P%NXTMUL))
          P => P%NXTMUL
        END DO
        P%NXTMUL => COLLECT_MULARR
        COLLECT_MULARR => PDENIS(ISTRAI)%PMUL
        NULLIFY(PDENIS(ISTRAI)%PMUL)
      END IF
      
C  FREE EDENAS
      P => EDENAS(ISTRAI)%PMUL
      IF (ASSOCIATED(P)) THEN
        DO WHILE (ASSOCIATED(P%NXTMUL))
          P => P%NXTMUL
        END DO
        P%NXTMUL => COLLECT_MULARR
        COLLECT_MULARR => EDENAS(ISTRAI)%PMUL
        NULLIFY(EDENAS(ISTRAI)%PMUL)
      END IF
      
C  FREE COPVS
      P => COPVS(ISTRAI)%PMUL
      IF (ASSOCIATED(P)) THEN
        DO WHILE (ASSOCIATED(P%NXTMUL))
          P => P%NXTMUL
        END DO
        P%NXTMUL => COLLECT_MULARR
        COLLECT_MULARR => COPVS(ISTRAI)%PMUL
        NULLIFY(COPVS(ISTRAI)%PMUL)
      END IF

C  FREE PPPLS
      P => PPPLS(ISTRAI)%PMUL
      IF (ASSOCIATED(P)) THEN
        DO WHILE (ASSOCIATED(P%NXTMUL))
          P => P%NXTMUL
        END DO
        P%NXTMUL => COLLECT_MULARR
        COLLECT_MULARR => PPPLS(ISTRAI)%PMUL
        NULLIFY(PPPLS(ISTRAI)%PMUL)
      END IF
      
C  FREE CPPVS
      P => CPPVS(ISTRAI)%PMUL
      IF (ASSOCIATED(P)) THEN
        DO WHILE (ASSOCIATED(P%NXTMUL))
          P => P%NXTMUL
        END DO
        P%NXTMUL => COLLECT_MULARR
        COLLECT_MULARR => CPPVS(ISTRAI)%PMUL
        NULLIFY(CPPVS(ISTRAI)%PMUL)
      END IF

      RETURN
      END SUBROUTINE FREE_MULARR

      END MODULE BRASPOI
