      subroutine redefine_vessel(nves,
     >                           rves,zves,nbufle,
     >                           rbufle,zbufle,
     >                           nbufmx,nbufx,rbufx,zbufx)
      implicit none
c
      include 'p09'
      include 'div_bafdat'
c
      integer nves,nbufle,nbufmx,nbufx(mbufx)
c
c
c     DIVIMP     - real*4 
c     NIMBUS/PIN - real*8  
c
      real*8 rves(mves),zves(mves),
     >       rbufle(mbufle),zbufle(mbufle),
     >       rbufx(mbufx,mbufle),zbufx(mbufx,mbufle)
c 
c
c     REDEFINE_VESSEL: This routine loops through the baffles 
c     finding any points where they intersect the vessel wall
c     or each other. It then follows along all intersectiions and 
c     modifies the vessel wall to match these changes. Any baffles
c     that are not included by this process are left alone though
c     they may be moved to fill any space vacated by baffles that
c     have been incorporated into the vessel wall. DIVIMP is not, 
c     at present equipped to deal with free-standing baffles 
c     within the vessel. If this becomes necessary, DIVIMP will be 
c     appropriately modified. 
c
c     David Elder,   Feb  12, 1999.
c
c     Copy BAFFLE data to local common variables for processing   
c
c
c     Other local variables 
c
      logical checkpoint 
      integer curindex,curbaffle,newindex,newbaffle,baffle_count
      integer in,id,ib,nvesn,ibstart
      integer baffleused(mbufx+2)
      real*8  rvesn(mves+mbufx*mbufle),zvesn(mves+mbufx*mbufle)
c
c     Set initial value of wall redefinition flag 
c
      wall_redef = 0 
c
c     Check for existence of baffles - EXIT if none
c
      if (nbufle.le.0.and.nbufmx.le.0) return
c
c     Make a copy of the original wall 
c
      nvesorg = nves
      do in = 1,nves
         rvesorg(in) = rves(in)
         zvesorg(in) = zves(in)
      end do 
c 
c     Set starting point for baffle/wall counting 
c
      ibstart = 0    
      checkpoint=.true.
c
c     Copy all baffles and wall into one array for easier processing
c
c     Wall
c
      if (nves.gt.0) then 
         ibstart = ibstart + 1
         nbufxl(ibstart) = nves
         do in = 1,nves
            rbufxl(ibstart,in) = rves(in)  
            zbufxl(ibstart,in) = zves(in)  
         end do
      endif
c
c     Primary baffle
c
      if (nbufle.gt.0) then 
         ibstart = ibstart + 1
         nbufxl(ibstart) = nbufle
         do in = 1,nbufle
            rbufxl(ibstart,in) = rbufle(in)  
            zbufxl(ibstart,in) = zbufle(in)  
         end do
      endif 
c
c     Copy rest of the baffles
c
      if (nbufmx.gt.0) then
         do ib = 1,nbufmx
            nbufxl(ib+ibstart) = nbufx(ib)
            do in = 1,nbufx(ib)
               rbufxl(ib+ibstart,in) = rbufx(ib,in)
               zbufxl(ib+ibstart,in) = zbufx(ib,in)
            end do
         end do
      endif 
c
c     Set total number of local baffles 
c 
      nbufmxl = nbufmx + ibstart
c
c     Assume for now that a given point will only lie on one
c     other baffle or wall and not intersect with two 
c     structures at the same point.  
c
c     Assume that all of the baffle structures are listed 
c     counter-clockwise. This is true for the ones that are 
c     in the g46529.vers1 grid file. 
c
c     Algorithm - loop around first baffle (main vessel wall) - 
c               - check point - is it on a baffle?
c               - check segment - does a baffle point lie on it
c               - follow baffle - check for wall or other baffle on 
c                 segment
c               - check next node - is it on wall or other baffle?
c               - if on another structure - follow it - otherwise 
c                 continue with current structure.
c
c
c     Start on wall which is indexed as the first baffle - stay on
c     that surface until hitting an intersecting surface - then follow
c     that surface - always incrementing the index for each structure. 
c        
      nvesn = 0
      curindex  = 1 
      curbaffle = 1 
c
c     Record baffles that have been incorporated into the wall
c     So that extras can be left as baffles.
c
      do in = 1,nbufmxl
         baffleused(in) = 0
      end do
c
c     Add the initial point to the wall
c
      nvesn = nvesn +1
      rvesn(nvesn) = rbufxl(curbaffle,curindex) 
      zvesn(nvesn) = zbufxl(curbaffle,curindex)
      indref(nvesn)= curindex
      baffleused(curbaffle) = 1
c
c     Use GOTO structure since F77 does not support while constructs and 
c     some users still operate in that environment.
c
 100  continue

      call find_next(curindex,curbaffle,newindex,newbaffle,
     >               checkpoint)

      if (curbaffle.eq.newbaffle) checkpoint = .true.

      if (rbufxl(newbaffle,newindex).ne.rvesn(nvesn).or.
     >    zbufxl(newbaffle,newindex).ne.zvesn(nvesn)) then 

         nvesn = nvesn +1
         rvesn(nvesn) = rbufxl(newbaffle,newindex) 
         zvesn(nvesn) = zbufxl(newbaffle,newindex)
c
c     Record index cross-reference to original wall nodes 
c      
         if (newbaffle.eq.1) then 
 
            indref(nvesn) = newindex

         endif  

         baffleused(newbaffle) = 1
     
      else

         checkpoint=.false.

      endif 

      curindex = newindex
      curbaffle= newbaffle

c
c     Exit when the last point of the initial baffle is reached or
c     if nvesn reaches the maximum.
c
      if ((curindex.eq.nves.and.curbaffle.eq.1).or.
     >     (nvesn.gt.mves)) goto 200

      goto 100

c
c     Finish off processing of the new wall definition 
c

200   continue 

c
c     Check to see if nvesn is small enough  
c
      if (nvesn.gt.mves) then 
c
c        Issue error message and return without making any changes
c
         write(0,*) 'ERROR REDEFINING WALL: NVESN > MVES'//
     >              ' - NO CHANGES MADE'
         write(6,*) 'ERROR REDEFINING WALL: NVESN > MVES'//
     >              ' - NO CHANGES MADE'
         write(7,*) 'ERROR REDEFINING WALL: NVESN > MVES'//
     >              ' - NO CHANGES MADE'
         return
c
      endif 
c
c     Set wall redefined flag
c
      wall_redef = 1  
c
c     Copy new wall into the original wall definition
c
      nves = nvesn
c
      do in = 1,nvesn
         rves(in) = rvesn(in)
         zves(in) = zvesn(in)
      end do
c
c     Collapse baffle definitions - eliminating any that were 
c     incorporated into the wall.
c                  
c     Eliminate current baffles
c
      nbufle = 0
c     
      do in = 1,nbufmx 
         nbufx(in) = 0
      end do
c
      nbufmx = 0
c
c     Zero counting variable - to keep track of remaining baffles
c
      baffle_count = 0
c
c     Copy in any remaining unused baffles 
c
      do ib = 1,nbufmxl
c
         if (baffleused(ib).eq.0) then 
c
            baffle_count = baffle_count + 1
c
c           Load nbufle first 
c
            if (baffle_count.eq.1) then              
c
               nbufle = nbufxl(ib)
c
c              Copy first baffle elements
c
               do in = 1,nbufxl(ib)
c
                  rbufle(in) = rbufxl(ib,in)
                  zbufle(in) = zbufxl(ib,in)
c
               end do
c
            else  
c
               nbufx(baffle_count-1) = nbufxl(ib)
c
               do in = 1, nbufxl(ib)
c
                  rbufx(baffle_count-1,in) = rbufxl(ib,in)
                  zbufx(baffle_count-1,in) = zbufxl(ib,in)
c
               end do 
c
            end if
c
         end if
c 
      end do
c
c     Write out new wall for comparison  
c
      write(6,*) 'Remaining Baffle Count:',baffle_count
      write(6,*) 'Redefined Wall:',nves
c
      do in = 1,nves
         write (6,'(2(1x,g14.7))') rves(in),zves(in) 
      end do
c
c     Exit routine -  
c
      return
      end
c
c
c
      subroutine find_next(curindex,curbaffle,newindex,newbaffle,
     >                     checkpoint)
      implicit none
      logical checkpoint
      integer curindex,curbaffle,newindex,newbaffle
      include 'p09'
      include 'div_bafdat'
c
c     FIND_NEXT: This routine determines the next index or node
c                to be included in the wall by moving from baffle 
c                to baffle.
c
c                There are two conditions checked for:
c                1) Does the current node lie on a surface that
c                   is part of another baffle? 
c                   If so the newindex and newbaffle are set to the
c                   next greater point on the intersecting baffle.
c
c                2) Does the segment to the next node on the current 
c                   baffle contain a node belonging to another baffle?
c                   If yes - set the next baffle and index to the
c                   intersecting point - need to check for multiple 
c                   nodes on the one segment and choose the one
c                   closest to the current node.
c
c                3) If no intersections are found increment the
c                   current index and do not change baffles. 
c
c
c     Check for point interscetions
c
      if (checkpoint) then 
c
         call check_point(curindex,curbaffle,newindex,newbaffle)
c
         if (curbaffle.ne.newbaffle) return
c
      endif 
c
c     Check for segment intersections
c
      call check_segment(curindex,curbaffle,newindex,newbaffle)
c          
      if (curbaffle.ne.newbaffle) then 
c
c        Turn off point checking for the next call 
c
         checkpoint = .false.
c
         return
c
      endif
c
c     No interections found - return next element in current baffle
c
c     Explicitly set new indices      
c     
      if (curindex.eq.nbufxl(curbaffle)) then 
         newindex = 1
      else
         newindex = curindex +1  
      endif
c
      newbaffle= curbaffle
c
      return
      end
c
c
c
      subroutine check_point(curindex,curbaffle,newindex,newbaffle)
      implicit none
      integer curindex,curbaffle,newindex,newbaffle
c
c     CHECK_POINT: This routine checks to see if the node defined by
c                  curindex and curbaffle lies on any other segment
c                  of the remaining baffles. It then returns the 
c                  indices of the "higher numbered" end of the segment
c                  where the intersection occurs. 
c
      integer in,ib,nextin
      logical result
      real*8  angle
c
c
      include 'p09'
      include 'div_bafdat'
c
c     Loop through looking for intersections
c
c     Set default return value 
c
      newbaffle = curbaffle
      newindex  = curindex 
c
      do ib = 1,nbufmxl
c
         if (ib.ne.curbaffle) then  
c 
            do in = 1,nbufxl(ib)
c
               if (in.eq.nbufxl(ib)) then 
                  nextin = 1
               else
                  nextin = in +1 
               endif
c
c              Check for intersection     
c
               call baffle_sect(rbufxl(curbaffle,curindex),
     >                          zbufxl(curbaffle,curindex),
     >                          rbufxl(ib,in),zbufxl(ib,in),
     >                          rbufxl(ib,nextin),zbufxl(ib,nextin),
     >                          angle,result,0)
c
               if (result) then 
c
                  newindex = nextin
                  newbaffle= ib
                  return 
c
               endif 
c 
            end do

         end if

      end do 
c
      return
      end      
c
c
c
      subroutine check_segment(curindex,curbaffle,newindex,newbaffle)
      implicit none
      integer curindex,curbaffle,newindex,newbaffle
c
c     CHECK_SEGMENT: This routine checks to see if any nodes lie 
c                    on the segment defined by the starting points of
c                    curindex and curbaffle.
c                    If there are multiple nodes on that segment
c                    then the closest to the current node is 
c                    chosen. 
c
c
      integer in,ib,nextin
      logical result
c
      real*8 dist,newdist,angle,
     >       dz,dr,atan2c
      external atan2c
c
c
      include 'p09'
      include 'div_bafdat'
c
c     Loop through looking for intersections
c
c     Set default values
c
      newdist = 1.0d38 
c
      newbaffle = curbaffle
      newindex  = curindex 
c
c     Set next index for other end of segment 
c
      if (curindex.eq.nbufxl(curbaffle)) then 
         nextin = 1
      else
         nextin = curindex+1
      endif 
c
c     Calculate angle (slope) of line segment 
c
      dr = rbufxl(curbaffle,nextin)-rbufxl(curbaffle,curindex)
      dz = zbufxl(curbaffle,nextin)-zbufxl(curbaffle,curindex)
      angle = atan2c(dz,dr) 
c
      do ib = 1,nbufmxl
c
         if (ib.ne.curbaffle) then  
c 
            do in = 1,nbufxl(ib)
c
c              Check for intersection     
c
               call baffle_sect(rbufxl(ib,in),zbufxl(ib,in),
     >                          rbufxl(curbaffle,curindex),
     >                          zbufxl(curbaffle,curindex),
     >                          rbufxl(curbaffle,nextin),
     >                          zbufxl(curbaffle,nextin),
     >                          angle,result,1)
c
               if (result) then 
c
                  dist = 
     >               (rbufxl(ib,in)-rbufxl(curbaffle,curindex))**2
     >              +(zbufxl(ib,in)-zbufxl(curbaffle,curindex))**2
c
                  if (dist.lt.newdist) then                   

                      newindex = in
                      newbaffle= ib
                      newdist  = dist

                  endif 

               endif 
c 
            end do

         end if

      end do 
c
      return
      end      
c
c
c
      subroutine baffle_sect(rp,zp,rstart,zstart,rend,zend,
     >                       angle,result,opt)
      implicit none
      integer opt
      logical result
      real*8 rp,zp,rstart,zstart,rend,zend,angle
c
      real*8 PI
      parameter(PI=3.141592654)
c
c     BAFFLE_SECT: The purpose of this routine is to determine if the
c                  point rp,zp lies on or near the line segment defined
c                  by:  [rstart,zstart] to [rend,zend]  
c
c     Opt 0 : calculate segment angle            
c     Opt 1 : Use angle argument as the segment angle
c
c     Check R-coordinate in-bounds
c
      real*8 norm_angle,dist,
     >       dz,dr,atan2c,dist_to_point
      external atan2c,dist_to_point
c
      result = .false. 
c
      if ((abs(rend-rp)+abs(rp-rstart))
     >       .le.(abs(rend-rstart)+0.002)) then
c
c        Check Z-coordinate in-bounds
c
         if ((abs(zend-zp)+abs(zp-zstart))
     >               .le.(abs(zend-zstart)+0.002)) then
c
c           Calculate Segment normal
c
            if (opt.eq.0) then
c
c              Calculate segment normal 
c
               dr = rend-rstart 
               dz = zend-zstart
               norm_angle = atan2c(dz,dr) -PI/2.0
c
            elseif (opt.eq.1) then  
c
c              Use angle passed in
c
               norm_angle = angle - PI/2.0
c
            endif
c
c           How close is the point to the line?  
c
            dist = dist_to_point(rp,zp,
     >                           rstart,zstart,
     >                           norm_angle)
c
c           If point is a millimeter from the line then assume that 
c           intersection occurs ...
c
            if (dist.lt.0.001) then 
 
               result = .true.

            endif 
c
         endif  
c
      endif
c
      return
c
      end
c
c
c
      REAL*8 FUNCTION ATAN2C (ARGZ,ARGR)
      implicit none
      REAL*8 ARGZ,ARGR
c
C     INCLUDE "PARAMS"
c      include 'params'
c
      real*8 PI
      parameter(PI=3.141592654)
C
C     THIS ACTS AS AN ERROR-CHECKING FRONT-END TO THE ATAN2
C     IMPLICIT FUNCTION. IT RETURNS APPROPRIATE ANGLE VALUES FOR
C     EITHER OF THE ARGUMENTS EQUAL TO ZERO AND RETURNS A
C     ZERO VALUE IF BOTH ARGUMENTS ARE EQUAL TO ZERO. SINCE
C     THE TANGENT IS UNDEFINED IN THIS CASE.
C
C     D. ELDER  SEPTEMBER 1992
C
      IF (ARGZ.EQ.0.0) THEN
         IF (ARGR.GT.0.0) THEN
            ATAN2C = 0.0
         ELSEIF (ARGR.LT.0.0) THEN
            ATAN2C = PI
         ELSE
            ATAN2C = 0.0
         ENDIF
      ELSEIF (ARGR.EQ.0.0) THEN
         IF (ARGZ.GT.0.0) THEN
            ATAN2C = PI /2.0
         ELSEIF (ARGZ.LT.0.0) THEN
            ATAN2C = - PI /2.0
         ELSE
            ATAN2C = 0.0
         ENDIF
      ELSE
         ATAN2C = DATAN2(ARGZ,ARGR)
      ENDIF
      RETURN
      END
c
c
c
      real*8 function dist_to_point(rp,zp,r1,z1,theta)
      implicit none
      real*8 rp,zp,r1,z1,theta
c
c     DIST_TO_POINT:
c
c     This routine calculates the perpendicular distance from the 
c     point R,Z to the linear extension of the element specified by
c     a point on the element and the normal angle THETA to the target surface. 
c
c     Theta is defined as the angle normal to each target 
c     segment measured from the positive R-axis.
c
c     The line of the target is defined by the equation ar+bz=c
c
c     The normal to this line is the vector (a,b) = (cos(theta),sin(theta))
c
c     The perpendicular distance D is equal to the magnitude of the vector
c     from (r1,z1) to (rp,zp) projected onto the normal to the line.
c
c     B = p1 -> pp       D = | B cos (alpha) |  
c     alpha = angle between B and N (normal to the line) 
c
c     But B .dot. N =  | B | | N| cos (alpha) 
c
c     Therefore   D = | B .dot. N|  / |N|
c
c     B = <rp-r1, zp-z1>   N = <cos(theta),sin(theta)>
c
c     D = |cos(theta) * (rp-z1) + sin(theta) * (zp -z1)| / |N|
c
c     |N| = 1 
c
c     This is the formula used here in this function.
c
c
      dist_to_point = abs(cos(theta)*(rp-r1) + sin(theta)*(zp-z1))
c
      return
      end 
