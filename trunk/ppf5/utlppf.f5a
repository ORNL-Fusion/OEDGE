      SUBROUTINE LDCOMN (VERSN,TITLE,JOB)
      IMPLICIT  NONE
C
C  *********************************************************************
C  *                                                                   *
C  *   LDCOMN:  CALL GET TO READ RESULTS OF DIVIMP RUN INTO THE        *
C  *            DIVIMP COMMON BLOCKS AND THEN TRANSCRIBED THESE        *
C  *            DATA INTO THE DIVPPF COMMON BLOCKS.  THIS AND GET      *
C  *            SHOULD BE THE ONLY ROUTINES NOT COMPLETELY             *
C  *            COMPATIBLE WITH THE PPROC POST-PROCESSOR.              *
C  *                                   LORNE HORTON    AUGUST 1994     *
C  *********************************************************************
C
      CHARACTER*(*) VERSN,TITLE,JOB
C
C  DIVIMP COMMON BLOCKS
C
      INCLUDE   (PARAMS)
      INCLUDE   (COMTOR)
      INCLUDE   (CNEUT)
      INCLUDE   (CGEOM)
      INCLUDE   (DYNAM2)
      INCLUDE   (DYNAM3)
      INCLUDE   (DYNAM4)
      INCLUDE   (PINDATA)
      INCLUDE   (CADAS)
C
C  POST PROCESSOR PARAMETER COMMON BLOCK WITH NAMES CHANGED
C
C
      INTEGER PMAXNKS,PMAXNRS,PMAXNDS,PMAXIZS,
     >        PMAXTHE,PMAXCH3,PMAXADS,PMAXNZS
      REAL    PHI,PLO,PROOT2,PPI,PRADDEG,PDEGRAD,PECH,PAMU,PEMI
      PARAMETER (
     >  PMAXNKS=140, PMAXNRS=60, PMAXNDS=2*PMAXNRS, PMAXIZS=18,
     >  PMAXTHE=1000, PMAXCH3= 42, PMAXADS=60, PMAXNZS=2,
     >  PHI=1.E25, PLO=1.E-25,
     >  PROOT2 =1.414213562, PPI=3.141592654,
     >  PRADDEG=57.29577952, PDEGRAD=1.745329252E-02,
     >  PECH=1.602192E-19,   PAMU=1.672614E-27, PEMI=PECH/PAMU
     >  )
C
C  POST PROCESSOR GEOMETRY COMMON BLOCK WITH NAMES CHANGED
C
      COMMON /PPGEOM/
     >  PISHOT, PTSHOT,
     >  PNRS, PNKS, PNDS, PIRSEP, PIRWALL, PIRCENT,
     >  PIRTRAP, PJPRGT, PJPLFT,
     >  PREFCT, PR0, PZ0, PRXP, PZXP,
     >  PRS, PZS, PSH, PRHOG, PTHETAG, PHRO, PHTETA, PBTS, PPSI,
     >  PNPOLYP, PKORPG, PNVERTP, PRVERTP, PZVERTP,
     >  PIKINS, PIRINS, PIKOUTS, PIROUTS,
     >  PRP, PZP, PIDDS, PIKDS, PIRDS, PDDS2, PTHETAS2,
     >  PTAGDV, PEQUIL
      INTEGER
     >  PISHOT, PNRS, PNKS(PMAXNRS), PNDS,
     >  PIRSEP, PIRWALL, PIRCENT, PIRTRAP,
     >  PJPRGT, PJPLFT, PREFCT, PNPOLYP, PKORPG(PMAXNKS,PMAXNRS),
     >  PNVERTP(PMAXNKS*PMAXNRS),
     >  PIKINS(PMAXNKS,PMAXNRS), PIRINS(PMAXNKS,PMAXNRS),
     >  PIKOUTS(PMAXNKS,PMAXNRS), PIROUTS(PMAXNKS,PMAXNRS),
     >  PIDDS(PMAXNRS,2), PIKDS(PMAXNDS), PIRDS(PMAXNDS),
     >  PTAGDV(PMAXNKS,PMAXNRS)
      REAL
     >  PTSHOT, PR0, PZ0, PRXP, PZXP,
     >  PRS(PMAXNKS,PMAXNRS), PZS(PMAXNKS,PMAXNRS),
     >  PSH(PMAXNKS,PMAXNRS),
     >  PRHOG(PMAXNKS,PMAXNRS), PTHETAG(PMAXNKS,PMAXNRS),
     >  PHRO(PMAXNKS,PMAXNRS), PHTETA(PMAXNKS,PMAXNRS),
     >  PRVERTP(5,PMAXNKS*PMAXNRS), PZVERTP(5,PMAXNKS*PMAXNRS),
     >  PRP(PMAXNDS), PZP(PMAXNDS),
     >  PDDS2(PMAXNDS), PTHETAS2(PMAXNDS),
     >  PBTS(PMAXNKS,PMAXNRS), PPSI(PMAXNKS,PMAXNRS)
      CHARACTER
     >  PEQUIL*60
C
C  POST PROCESSOR PLASMA COMMON BLOCK WITH NAMES CHANGED
C
      COMMON /PPPLAS/
     >  PCRMB, PCIZB, PCION, PNIZS, PNZS,
     >  PKTIBS, PKTEBS, PKNBS, PKNEBS, PKVHS,
     >  PKTIDS, PKTEDS, PKNDS, PKNEDS, PKVDS, PKNZDS, PKVZDS,
     >  PSDLIMS, PSDTS,
     >  PPINATOM, PPINION, PPINMOL, PPINZ0,
     >  PPINIONZ, PPINENA, PPINENM, PPINENZ,
     >  PPINQI, PPINQE, PPINMP,
     >  PPOWZ,
     >  PIYEARH, PIYEARZ, PUSERIDH, PUSERIDZ
      INTEGER
     >  PCIZB, PCION(PMAXNZS), PNIZS(PMAXNZS), PIYEARH,
     >  PIYEARZ(PMAXNZS), PNZS
      REAL
     >  PCRMB,
     >  PKTIBS(PMAXNKS,PMAXNRS), PKTEBS(PMAXNKS,PMAXNRS),
     >  PKNBS(PMAXNKS,PMAXNRS), PKNEBS(PMAXNKS,PMAXNRS),
     >  PKVHS(PMAXNKS,PMAXNRS),
     >  PKTIDS(PMAXNDS), PKTEDS(PMAXNDS), PKNDS(PMAXNDS), 
     >  PKNEDS(PMAXNDS),
     >  PKVDS(PMAXNDS), PKNZDS(PMAXNDS,0:PMAXIZS,PMAXNZS), 
     >  PKVZDS(PMAXNDS,0:PMAXIZS,PMAXNZS),
     >  PSDLIMS(PMAXNKS,PMAXNRS,0:PMAXIZS,PMAXNZS), 
     >  PSDTS(PMAXNKS,PMAXNRS,0:PMAXIZS,PMAXNZS),
     >  PPINATOM(PMAXNKS,PMAXNRS), PPINION(PMAXNKS,PMAXNRS),
     >  PPINMOL(PMAXNKS,PMAXNRS),
     >  PPINZ0(PMAXNKS,PMAXNRS,PMAXNZS),
     >  PPINIONZ(PMAXNKS,PMAXNRS,PMAXNZS),
     >  PPINENA(PMAXNKS,PMAXNRS), PPINENM(PMAXNKS,PMAXNRS),
     >  PPINENZ(PMAXNKS,PMAXNRS,PMAXNZS), PPINQI(PMAXNKS,PMAXNRS),
     >  PPINQE(PMAXNKS,PMAXNRS), PPINMP(PMAXNKS,PMAXNRS),
     >  PPOWZ(PMAXNKS,PMAXNRS,PMAXNZS)
      CHARACTER
     >  PUSERIDH*80, PUSERIDZ(PMAXNZS)*80
C
C
C---- VARIABLES FOR CALL TO GET
C
      CHARACTER EQUIL*60
      INTEGER   NIZS,ITER,NITERS
      REAL      FACTA(-1:MAXIZS),FACTB(-1:MAXIZS)
C
      INTEGER I,K,IR,IK,IZ
C
      REWIND(8)
   10 CONTINUE
      CALL GET (TITLE,NIZS,JOB,EQUIL,FACTA,FACTB,ITER,NITERS)
C
C---- WRITE RESULTS OF LAST ITERATION ONLY INTO PPF
C
      IF (ITER.LT.NITERS) GOTO 10
C
      VERSN = VERSON
      RIZB = REAL (CIZB)
C
      PNZS = 1
      PISHOT = ISHOT
      PTSHOT = TSLICE
      PNRS = NRS
      PIRSEP = IRSEP
      PIRWALL = IRWALL
      PIRCENT = IRCENT
      PIRTRAP = IRTRAP
      PJPRGT = IKTO + 1
      PJPLFT = IKTI - 1
      PREFCT = REFCT
      PR0 = R0
      PZ0 = Z0
      PRXP = RXP
      PZXP = ZXP
      PCRMB = CRMB
      PCIZB = CIZB
      PCION(1) = CION
      PNIZS(1) = NIZS
      PEQUIL = EQUIL
      PUSERIDZ(1) = USERIDZ
      PIYEARZ(1) = IYEARZ
      PUSERIDH = USERIDH
      PIYEARH = IYEARH
      DO IR = 1, NRS
        PNKS(IR) = NKS(IR)
        DO IK = 1, NKS(IR)
          PRS(IK,IR) = RS(IK,IR)
          PZS(IK,IR) = ZS(IK,IR)
          PSH(IK,IR) = 1.0/KBFS(IK,IR)
          PRHOG(IK,IR) = RHOG(IK,IR)
          PTHETAG(IK,IR) = THETAG(IK,IR)
          PHRO(IK,IR) = HRO(IK,IR)
          PHTETA(IK,IR) = HTETA(IK,IR)
          PBTS(IK,IR) = BTS(IK,IR)
          PPSI(IK,IR) = PSIFL(IK,IR)
          PKORPG(IK,IR) = KORPG(IK,IR)
          PTAGDV(IK,IR) = TAGDV(IK,IR)
          PKTIBS(IK,IR) = KTIBS(IK,IR)
          PKTEBS(IK,IR) = KTEBS(IK,IR)
          PKNBS(IK,IR) = KNBS(IK,IR)
          PKNEBS(IK,IR) = RIZB * KNBS(IK,IR)
          PKVHS(IK,IR) = KVHS(IK,IR) / QTIM
          PPINATOM(IK,IR) = PINATOM(IK,IR)
          PPINION(IK,IR) = PINION(IK,IR)
          PPINMOL(IK,IR) = PINMOL(IK,IR)
          PPINZ0(IK,IR,1) = PINZ0(IK,IR)
          PPINIONZ(IK,IR,1) = PINIONZ(IK,IR)
          PPINENA(IK,IR) = PINENA(IK,IR)
          PPINENM(IK,IR) = PINENM(IK,IR)
          PPINENZ(IK,IR,1) = PINENZ(IK,IR)
          PPINQI(IK,IR) = PINQI(IK,IR)
          PPINQE(IK,IR) = PINQE(IK,IR)
          PPINMP(IK,IR) = PINMP(IK,IR)
          PPOWZ(IK,IR,1) = 0.0
          DO IZ = 0,NIZS
            PPOWZ(IK,IR,1) = PPOWZ(IK,IR,1) + POWLS(IK,IR,IZ)
            PSDLIMS(IK,IR,IZ,1) = ABSFAC * SDLIMS(IK,IR,IZ)
            PSDTS(IK,IR,IZ,1) = SDTS(IK,IR,IZ)
          ENDDO
        ENDDO
      ENDDO
      PNPOLYP = NPOLYP
      DO I = 1, NPOLYP
        PNVERTP(I) = NVERTP(I)
        DO K = 1, NVERTP(I)
          PRVERTP(K,I) = RVERTP(K,I)
          PZVERTP(K,I) = ZVERTP(K,I)
        ENDDO
      ENDDO
      DO I = 1, NDS
        PKTIDS(I) = KTIDS(I)
        PKTEDS(I) = KTEDS(I)
        PKNDS(I) = KNDS(I)
        PKNEDS(I) = RIZB * KNDS(I)
        PKVDS(I) = 9.79E3 * SQRT (0.5*(KTEDS(I)+KTIDS(I))*
     >                      (1.0+RIZB)/CRMB)
C
C ZERO TARGET IMPURITY DENSITY AND VELOCITY (CAN BE USED TO CALCULATE
C TOTAL ION SATURATION CURRENT FROM EDGE2D)
C
        DO IZ = 0, NIZS
          PKNZDS(I,IZ,1) = 0.0
          PKVZDS(I,IZ,1) = 0.0
        ENDDO
      ENDDO
C
      RETURN
      END
C
C
C
      SUBROUTINE GET (TITLE,NIZS,JOB,equil,FACTA,FACTB,ITER,NITERS)
      IMPLICIT  NONE
C     INCLUDE   "PARAMS"
      include 'params'
      CHARACTER*(*) TITLE,JOB,equil
      INTEGER   NIZS,ITER,NITERS
      REAL      FACTA(-1:MAXIZS),FACTB(-1:MAXIZS)
C
C  *********************************************************************
C  *                                                                   *
C  *   GET:  READ  RESULTS OF DIVIMP RUN ON UNFORMATTED UNIT 8         *
C  *         GET MAY BE CALLED SEVERAL TIMES, ONCE FOR                 *
C  *         EACH ITERATION.                                           *
C  *                                   CHRIS FARRELL    MARCH 1989     *
C  *********************************************************************
C
C     INCLUDE   "COMTOR"
      include 'comtor'
C     INCLUDE   "CNEUT2"
      include 'cneut2'
C     INCLUDE   "CGEOM"
      include 'cgeom'
C     INCLUDE   "DYNAM2"
      include 'dynam2'
C     INCLUDE   "DYNAM3"
      include 'dynam3'
C     INCLUDE   "DYNAM4"
      include 'dynam4'
C     INCLUDE   "PINDATA"
      include 'pindata'
c
      include 'cadas'
c
      include 'outxy'
C
      include 'grbound'
c
      include 'cedge2d' 
C
      include 'transcoef'
c
      include 'cioniz'
c
      CHARACTER VERSE*5
      INTEGER   IR,IZ,IT,in
C
      READ  (8) VERSE,ITER,NITERS,NIZS,TITLE,JOB,NTS,R0,Z0,RXP,ZXP,
     >          NRS,(NKS(IR),IR=1,MAXNRS),RMIN,RMAX,ZMIN,ZMAX,DR,DZ,NDS,
     >          (FACTA(IZ),FACTB(IZ),DWELTS(IZ),IZ=-1,MAXIZS),
     >          (DWELFS(IT),IT=1,MAXNTS),QTIM,FSRATE,NXS,NYS,ABSFAC,
     >          CRMB,CRMI,CIZB,CION,IMODE,IRCENT,IRSEP,IRWALL,IRTRAP,
     >          IKT,NDSIN,(KALPHS(IZ),KBETAS(IZ),IZ=1,MAXIZS),IKREF,
     >          CK0,CIRHR,IKTO,IKTI,NPOLYP,ISHOT,TSLICE,EQUIL,
     >          NITERSOL,CIOPTF,CBPHI,cdatopt,cneur,nves,nleakcore,
     >          irsep2,irwall2,nrs2,ndsin2,ndsin3,cgridopt,
     >          irtrap2,xygrid,cleaksn,cxnear,cynear,refct,
     >          nvesm,nvesp,inmid,oumid,useridh,iyearh,useridz,iyearz,
     >          cre2d,cre2dizs,
c
c               The following are the piece-wise wall specifications
c               from the GA15 routines.
c
     >          ioncpts,ionwpts,(riw(in),ziw(in),rcw(in),zcw(in),
     >          rw(in),zw(in),rves(in),zves(in),in=1,maxpts),
     >          ((iwindw(it,in),icindw(it,in),it=1,2),in=1,maxpts),
     >          (iwwork(in),icwork(in),in=1,4*maxpts),
     >          (iwtdum(in),iwxdum(in),iwydum(in),in=1,maxpts),
     >          (ictdum(in),icxdum(in),icydum(in),in=1,maxpts),
c
c               The following relate to the wall definition as 
c               calculated in DIVIMP.
c
     >          wlwall1,wlwall2,wltrap1,wltrap2,wallpts
c
C
      WRITE (6,9001) NXS,NYS,NRS,NDS,NIZS,NTS,
     >  MAXNXS,MAXNYS,MAXNRS,MAXNDS,MAXIZS,MAXNTS,
     >  TITLE,JOB,ITER,IMODE,refct,maxseg,nvesm,nvesp
C
      CALL RINOUT ('R POWLS ',POWLS ,MAXNKS*MAXNRS*(MAXIZS+2))
      CALL RINOUT ('R LINES ',LINES ,MAXNKS*MAXNRS*(MAXIZS+2))
      CALL RINOUT ('R HPOWLS',HPOWLS,MAXNKS*MAXNRS*2)
      CALL RINOUT ('R HLINES',HLINES,MAXNKS*MAXNRS*2)
      CALL RINOUT ('R TIZS  ',TIZS  ,MAXNKS*MAXNRS*(MAXIZS+2))
      CALL RINOUT ('R ZEFFS ',ZEFFS ,MAXNKS*MAXNRS*3)
      CALL RINOUT ('R WALLS ',WALLS ,MAXNKS*MAXNRS*(MAXIZS+2))
      CALL RINOUT ('R DEPS  ',DEPS  ,MAXNDS*MAXIZS)
      CALL RINOUT ('R NEROS ',NEROS ,MAXNDS*5)
      CALL RINOUT ('R WALLSN',WALLSN,MAXPTS)
      CALL RINOUT ('R WALLSE',WALLSE,MAXPTS)
      CALL RINOUT ('R WALLPT',WALLPT,MAXPTS*19)
      CALL RINOUT ('R RS    ',RS    ,MAXNKS*MAXNRS)
      CALL RINOUT ('R ZS    ',ZS    ,MAXNKS*MAXNRS)
c
c     The storing of these arrays needed to be customized
c     because of a likely size mismatch between the
c     array in DIVIMP and that in OUT.
c
c      CALL IINOUT ('R IKXYS ',IKXYS ,MAXNXS*MAXNYS)
c      CALL IINOUT ('R IRXYS ',IRXYS ,MAXNXS*MAXNYS)
c      CALL IINOUT ('R IFXYS ',IFXYS ,MAXNXS*MAXNYS)
c
      CALL IINOUT2 ('R IKXYS ',IKXYS ,MAXNXS,MAXNYS,MAXIXS,MAXIYS)
      CALL IINOUT2 ('R IRXYS ',IRXYS ,MAXNXS,MAXNYS,MAXIXS,MAXIYS)
      CALL IINOUT2 ('R IFXYS ',IFXYS ,MAXNXS,MAXNYS,MAXIXS,MAXIYS)
c
      CALL IINOUT ('R IKDS  ',IKDS  ,MAXNDS)
      CALL IINOUT ('R IRDS  ',IRDS  ,MAXNDS)
C
      CALL IINOUT ('R IKINS ',IKINS ,MAXNKS*MAXNRS)
      CALL IINOUT ('R IKOUTS',IKOUTS,MAXNKS*MAXNRS)
      CALL IINOUT ('R IRINS ',IRINS ,MAXNKS*MAXNRS)
      CALL IINOUT ('R IROUTS',IROUTS,MAXNKS*MAXNRS)
C
      CALL IINOUT ('R KORY  ',KORY  ,MAXNKS*MAXNRS)
      CALL IINOUT ('R KORPG ',KORPG ,MAXNKS*MAXNRS)
      CALL IINOUT ('R NVERTP',NVERTP,MAXNKS*MAXNRS)
      CALL RINOUT ('R RVERTP',RVERTP,5*MAXNKS*MAXNRS)
      CALL RINOUT ('R ZVERTP',ZVERTP,5*MAXNKS*MAXNRS)
C
      CALL RINOUT ('R SDLIMS',SDLIMS,MAXNKS*MAXNRS*(MAXIZS+2))
      CALL RINOUT ('R SDTS  ',SDTS  ,MAXNKS*MAXNRS*(MAXIZS+2))
      CALL RINOUT ('R ELIMS ',ELIMS ,MAXNKS*3*(MAXIZS+2))
      CALL RINOUT ('R WALKS ',WALKS ,MAXNWS*2)
C
      CALL RINOUT ('R KKS   ',KKS   ,MAXNRS)
      CALL RINOUT ('R KSS   ',KSS   ,MAXNKS*MAXNRS)
      CALL RINOUT ('R KPS   ',KPS   ,MAXNKS*MAXNRS)
      CALL RINOUT ('R KNORMS',KNORMS,MAXNKS*MAXNRS)
      CALL RINOUT ('R KPERPS',KPERPS,MAXNKS*MAXNRS)
      CALL RINOUT ('R KCURVS',KCURVS,MAXNKS*MAXNRS)
      CALL RINOUT ('R KVOLS ',KVOLS ,MAXNKS*MAXNRS)
      CALL RINOUT ('R KAREAS',KAREAS,MAXNKS*MAXNRS)
      CALL RINOUT ('R KTOTAS',KTOTAS,MAXNRS)
      CALL RINOUT ('R KTOTVS',KTOTVS,MAXNRS)
      CALL RINOUT ('R KVOL2 ',KVOL2 ,MAXNKS*MAXNRS)
      CALL RINOUT ('R KAREA2',KAREA2,MAXNKS*MAXNRS)
      CALL RINOUT ('R KTOTA2',KTOTA2,MAXNRS)
      CALL RINOUT ('R KTOTV2',KTOTV2,MAXNRS)
      CALL RINOUT ('R KBFS  ',KBFS  ,MAXNKS*MAXNRS)
      CALL RINOUT ('R KINS  ',KINS  ,MAXNKS*MAXNRS)
      CALL RINOUT ('R KSMAXS',KSMAXS,MAXNRS)
      CALL RINOUT ('R KPMAXS',KPMAXS,MAXNRS)
      CALL RINOUT ('R KTEBS ',KTEBS ,MAXNKS*MAXNRS)
      CALL RINOUT ('R KTIBS ',KTIBS ,MAXNKS*MAXNRS)
      CALL RINOUT ('R KNBS  ',KNBS  ,MAXNKS*MAXNRS)
c
      CALL RINOUT ('R KFIZS ',KFIZS ,MAXNKS*MAXNRS*(MAXIZS+1))
c
c      CALL RINOUT ('R KFSSMO',KFSSMOD,MAXNKS*MAXNRS)
c
      CALL RINOUT ('R KINDS ',KINDS ,MAXNKS*MAXNRS)
      CALL RINOUT ('R KOUTDS',KOUTDS,MAXNKS*MAXNRS)
      CALL RINOUT ('R KFORDS',KFORDS,MAXNKS*MAXNRS)
      CALL RINOUT ('R KBACDS',KBACDS,MAXNKS*MAXNRS)
c
      CALL RINOUT ('R OKTEBS',OKTEBS,MAXNKS*MAXNRS)
      CALL RINOUT ('R OKTIBS',OKTIBS,MAXNKS*MAXNRS)
      CALL RINOUT ('R OKNBS ',OKNBS ,MAXNKS*MAXNRS)
      CALL RINOUT ('R OKVHS ',OKVHS ,MAXNKS*MAXNRS)
      CALL RINOUT ('R OKES  ',OKES  ,MAXNKS*MAXNRS)
C
      CALL RINOUT ('R KFEGS ',KFEGS ,MAXNKS*MAXNRS)
      CALL RINOUT ('R KFIGS ',KFIGS ,MAXNKS*MAXNRS)
      CALL RINOUT ('R KES   ',KES   ,MAXNKS*MAXNRS)
      CALL RINOUT ('R KVHS  ',KVHS  ,MAXNKS*MAXNRS)
c
c     Background data at plates
c
      CALL RINOUT ('R RP    ',RP    ,MAXNDS)
      CALL RINOUT ('R ZP    ',ZP    ,MAXNDS)
      call iinout ('R IDDS  ',idds  ,maxnrs*2)
      CALL RINOUT ('R KTEDS ',KTEDS ,MAXNDS)
      CALL RINOUT ('R KTIDS ',KTIDS ,MAXNDS)
      CALL RINOUT ('R KTI3LS',KTI3LS,MAXNDS)
      CALL RINOUT ('R KTINJ ',KTINJ ,MAXNDS)
      CALL RINOUT ('R KNDS  ',KNDS  ,MAXNDS)
      CALL RINOUT ('R KFEDS ',KFEDS ,MAXNDS)
      CALL RINOUT ('R KFIDS ',KFIDS ,MAXNDS)
      CALL RINOUT ('R KEDS  ',KEDS  ,MAXNDS)
      CALL RINOUT ('R KVDS  ',KVDS  ,MAXNDS)
      call rinout ('R KPREDB',kpredbar,maxnds*3*2)
c
      CALL RINOUT ('R KFLUX ',KFLUX ,MAXNDS)
      CALL RINOUT ('R KENER ',KENER ,MAXNDS)
      CALL RINOUT ('R KYIELD',KYIELD,MAXNDS)
      CALL RINOUT ('R KFY   ',KFY   ,MAXNDS)
      CALL RINOUT ('R KRMAX ',KRMAX ,MAXNDS)
      CALL RINOUT ('R KCUM  ',KCUM  ,MAXNDS)
      CALL RINOUT ('R DDS   ',DDS   ,MAXNDS)
      CALL RINOUT ('R THETAS',THETAS,MAXNDS)
      CALL RINOUT ('R DDS2  ',DDS2  ,MAXNDS)
      CALL RINOUT ('R THETA2',THETAS2,MAXNDS)
      CALL RINOUT ('R COSTET',COSTET,MAXNDS)
c
      call rinout ('R RHOG  ',rhog  ,maxnrs*maxnks)
      call rinout ('R THETAG',thetag,maxnrs*maxnks)
      call rinout ('R HRO   ',hro   ,maxnrs*maxnks)
      call rinout ('R HTETA ',hteta ,maxnrs*maxnks)
      call rinout ('R BTS   ',bts   ,maxnrs*maxnks)
      call rinout ('R PSIFL ',psifl ,maxnrs*maxnks)
      call iinout ('R TAGDV ',tagdv ,maxnrs*maxnks)
c
c     Chi Squared data
c
      CALL RINOUT ('R CHISQ1',CHISQ1,25)
      CALL RINOUT ('R CHISQ2',CHISQ2,25)
      CALL RINOUT ('R CHISQ3',CHISQ3,25)
      CALL RINOUT ('R CHISQ4',CHISQ4,25)
      CALL RINOUT ('R CHISQ5',CHISQ5,25)
C
      CALL RINOUT ('R PINATO',PINATOM ,MAXNKS*MAXNRS)
      CALL RINOUT ('R PINION',PINION  ,MAXNKS*MAXNRS)
      CALL RINOUT ('R PINALP',PINALPHA,MAXNKS*MAXNRS)
      CALL RINOUT ('R PINMOL',PINMOL  ,MAXNKS*MAXNRS)
      CALL RINOUT ('R PINZ0 ',PINZ0   ,MAXNKS*MAXNRS)
      CALL RINOUT ('R PININZ',PINIONZ ,MAXNKS*MAXNRS)
      CALL RINOUT ('R PINENA',PINENA  ,MAXNKS*MAXNRS)
      CALL RINOUT ('R PINENM',PINENM  ,MAXNKS*MAXNRS)
      CALL RINOUT ('R PINENZ',PINENZ  ,MAXNKS*MAXNRS)
      CALL RINOUT ('R PINQI ',PINQI   ,MAXNKS*MAXNRS)
      CALL RINOUT ('R PINQE ',PINQE   ,MAXNKS*MAXNRS)
      CALL RINOUT ('R PINMP ',PINMP   ,MAXNKS*MAXNRS)
      CALL RINOUT ('R PINVDI',PINVDIST,3*14*MAXNKS*MAXNRS)
      CALL RINOUT ('R PINREC',PINREC  ,MAXNKS*MAXNRS)
C
      call rinout ('R RVESM ',RVESM   ,2*MAXSEG)
      call rinout ('R ZVESM ',ZVESM   ,2*MAXSEG)
      call iinout ('R JVESM ',JVESM   ,MAXSEG)
      call rinout ('R FLUXHW',FLUXHW  ,MAXSEG)
      call rinout ('R FLXHW2',FLXHW2  ,MAXSEG)
      call rinout ('R FLXHW3',FLXHW3  ,MAXSEG)
      call rinout ('R FLXHW4',FLXHW4  ,MAXSEG)
      call rinout ('R FLXHW5',FLXHW5  ,MAXSEG)
      CALL RINOUT ('R HWALKS',HWALKS  ,MAXNWS*2)
C
      CALL rINOUT ('R SOLTE ',solte,maxnks*msolpt+msolpt+1)
      CALL rINOUT ('R SOLTI ',solti,maxnks*msolpt+msolpt+1)
      CALL rINOUT ('R SOLNE ',solne,maxnks*msolpt+msolpt+1)
      CALL rINOUT ('R SOLVEL',solvel,maxnks*msolpt+msolpt+1)
      CALL rINOUT ('R SOLCOR',solcor,maxnks*msolpt+msolpt+1)
C
c     Leakage data
c
      CALL RINOUT ('R CLEAKS',cleaks  ,MAXpts)
      CALL RINOUT ('R CLEAKN',cleakn  ,MAXpts*(maxizs+1))
      call rinout ('R LEAKPS',cleakpos,maximp*2) 
c
c     More arrays related to leakage results 
c
      call rinout ('R ncore ',ncore,maxnks*maxnrs)
      call rinout ('R nedge ',nedge,maxnks*maxnrs)
      call rinout ('R ntrap ',ntrap,maxnks*maxnrs)
      call rinout ('R ndivt ',ndivert,maxnks*maxnrs)
      call rinout ('R nmsol ',nmsol,maxnks*maxnrs)
      call rinout ('R WTSOU ',wtsource,maxpts*maxnrs*4*5)
      call rinout ('R TSOUR ',targsrc,3*4)
      call rinout ('R TLEAK ',targleak,3*4)
      call rinout ('R WSOUR ',wallsrc,5*3)
      call rinout ('R WLEAK ',wallleak,5*3)

c
c     READ any EDGE2D BG data that has been saved 
c

      if (cre2d.eq.1) then 

        call rinout ('R E2D N ',e2dnbs,maxnks*maxnrs)
        call rinout ('R E2D TE',e2dtebs,maxnks*maxnrs)
        call rinout ('R E2D TI',e2dtibs,maxnks*maxnrs)
        call rinout ('R E2D VB',e2dvhs,maxnks*maxnrs)
        call rinout ('R E2D E ',e2des,maxnks*maxnrs)
        call rinout ('R E2D I ',e2dion,maxnks*maxnrs)
        call rinout ('R E2D TA',e2dtarg,maxnrs*5*2)

        if (cre2dizs.gt.0) then 

          call rinout ('R E2D NZ ',e2dnzs,maxnks*maxnrs*
     >                              (maxe2dizs+1))
          call rinout ('R E2D PW',e2dpowls,maxnks*maxnrs*
     >                              (maxe2dizs+1))
          call rinout ('R E2D LI',e2dlines,maxnks*maxnrs*
     >                              (maxe2dizs+1))

        endif
c
      endif
c
C
c     Read Data related to transport coefficient calculations 
c
      call rinout ('R DPERP ',DPERP,maxnrs)
      call rinout ('R DPERPO',odperp,maxnrs)
      call rinout ('R DPERPI',idperp,maxnrs)
      call rinout ('R XPERP ',xPERPt,maxnrs)
      call rinout ('R XPERPO',oxperpt,maxnrs)
      call rinout ('R XPERPI',ixperpt,maxnrs)
      call rinout ('R XPI   ',chiperpi,maxnrs)
      call rinout ('R XPI  O',ochiperpi,maxnrs)
      call rinout ('R XPI  I',ichiperpi,maxnrs)
      call rinout ('R XPE   ',chiperpe,maxnrs)
      call rinout ('R XPE  O',ochiperpe,maxnrs)
      call rinout ('R XPE  I',ichiperpe,maxnrs)
      call rinout ('R RC OUT',rcouter,maxnrs)
      call rinout ('R RC IN ',rcinner,maxnrs)
      call rinout ('R GRADNE',gradn,maxnks*maxnrs)
      call rinout ('R GRADTE',gradte,maxnks*maxnrs)
      call rinout ('R GRADTI',gradti,maxnks*maxnrs)
      call rinout ('R E2DGNE',e2dgradn,maxnks*maxnrs)
      call rinout ('R E2DGTE',e2dgradte,maxnks*maxnrs)
      call rinout ('R E2DGTI',e2dgradti,maxnks*maxnrs)
c
c     Read the pressure - from SOL option 22 
c
      call rinout ('R KPRESS',kpress,maxnks*maxnrs*2)
c
c     Temporarily Add the following
c
      call rinout ('R FLUXES',fluxes,maxnks*maxnrs*16)
c
c
c
      IF (IMODE.EQ.1) THEN
      CALL RINOUT ('R LIMS  ',LIMS  ,MAXNKS*MAXNRS*(MAXIZS+2)*MAXNTS)
      ENDIF
      RETURN
C
 9001 FORMAT(//1X,'GET:     NXS    NYS    NRS    NDS   NIZS    NTS',
     >  /6X,6I7,/1X,'(MAX)',6I7,/6X,A,/6X,A,
     >        /1X,'        ITER   MODE   REFCT  MAXSEG NVESM  NVESP',
     >  /6x,6I7,/)
 9002 FORMAT(//1X,'WARNING! PROGRAM HAS BEEN RECOMPILED SINCE ',
     >  'RESULTS FILE CREATED.',/10X,'RESULTS  WRITTEN  BY  DIV',A5,
     >                          /10X,'RESULTS BEING READ BY OUT',A5,/)
      END
**==DMGUID
C
C=======================================================================
      SUBROUTINE DMGUID(SYSUID,PREFIX)
C
C RETURNS USERID                                         
C
      CHARACTER*(*) SYSUID, PREFIX
C     
      CALL GETENV('LOGNAME',SYSUID)
C     
      PREFIX = ' '
C     
      RETURN 
      END
**++EOF
**==MAPUID
C
C=======================================================================
      SUBROUTINE MAPUID(SYSUID,LUID)
C
C TRIES TO MAP USER ID FROM JAC TO JET3090.  IF NO MATCHING ID IS FOUND
C THEN THE UID IS LEFT UNCHANGED.
C
      INTEGER       LUID
      CHARACTER*(*) SYSUID
C
      INTEGER       INIT, MAXUID, NUIDS
      PARAMETER     (MAXUID=100)
      CHARACTER     UNIXID(MAXUID)*8, IBMID(MAXUID)*6
      DATA INIT/0/
C
      IF (SYSUID(1:3).EQ.'JET') RETURN
C
      IF (INIT.EQ.0) THEN
        READ(LUID,*) NUIDS
        IF (NUIDS.GT.MAXUID) THEN
          WRITE(6,*) ' TOO MANY UIDS IN TRANSCRIPTION FILE!!!'
          STOP
        ENDIF
        DO I = 1, NUIDS
          READ(LUID,*) IBMID(I), UNIXID(I)
        ENDDO
        INIT = 1
      ENDIF
C
      DO I = 1, NUIDS
        IF (SYSUID.EQ.UNIXID(I)) THEN
          SYSUID = IBMID(I)
          RETURN
        ENDIF
      ENDDO
C     
      RETURN 
      END
**++EOF
C
C  *********************************************************************
C  *  RINOUT: READS IN / WRITES OUT AN UNFORMATTED ARRAY OF REALS.     *
C  *  THE ARRAYS ARE READ/WRITTEN ON CHANNEL 8, TO A DATASET WITH      *
C  *  ATTRIBUTES BLKSIZE=6160, RECFM=VBS, LREC=6160, TRKS=(20,20)      *
C  *  OPT(1:1) SHOULD BE 'R' OR 'W', AND OPT(3:8) IS THE ARRAY NAME    *
C  *  (USED IN WRITE STATEMENT AT END OF ROUTINE).                     *
C  *                                                                   *
C  *          CHRIS FARRELL    MARCH 1989                              *
C  *********************************************************************
C
      SUBROUTINE RINOUT (OPT,RARRAY,N)
      INTEGER I,J,N,IBLOCK
      CHARACTER OPT*8
      REAL RARRAY(N)
      DATA IBLOCK /1500/
C
      IF     (OPT(1:1).EQ.'R') THEN
        DO 100 I = 1, N, IBLOCK
          READ  (8) (RARRAY(J),J=I,MIN(N,I+IBLOCK-1))
  100   CONTINUE
      ELSEIF (OPT(1:1).EQ.'W') THEN
        DO 200 I = 1, N, IBLOCK
          WRITE (8) (RARRAY(J),J=I,MIN(N,I+IBLOCK-1))
  200   CONTINUE
      ENDIF
C     IF (4*N.GT.10000) WRITE (6,9001) OPT(3:8),REAL(4*N)
C9001 FORMAT(1X,'RINOUT: SIZE OF ',A6,' =',-6P,F6.2,' MB')
      RETURN
      END
C
C  *********************************************************************
C  *  IINOUT: WRITE / READ INTEGER ARRAY,  SIMILAR TO RINOUT.          *
C  *********************************************************************
C
      SUBROUTINE IINOUT (OPT,IARRAY,N)
      INTEGER I,J,N,IBLOCK,IARRAY(N)
      CHARACTER OPT*8
      DATA IBLOCK /1500/
C
      IF     (OPT(1:1).EQ.'R') THEN
        DO 100 I = 1, N, IBLOCK
          READ  (8) (IARRAY(J),J=I,MIN(N,I+IBLOCK-1))
  100   CONTINUE
      ELSEIF (OPT(1:1).EQ.'W') THEN
        DO 200 I = 1, N, IBLOCK
          WRITE (8) (IARRAY(J),J=I,MIN(N,I+IBLOCK-1))
  200   CONTINUE
      ENDIF
C     IF (4*N.GT.10000) WRITE (6,9001) OPT(3:8),REAL(4*N)
C9001 FORMAT(1X,'IINOUT: SIZE OF ',A6,' =',-6P,F6.2,' MB')
      RETURN
      END
C
C
C  *********************************************************************
C  *  IINOUT2: WRITE / READ INTEGER ARRAY,  SIMILAR TO IINOUT.         *
C  *           EXCEPT DONE BY ELEMENTS                                 *
C  *********************************************************************
C
      SUBROUTINE IINOUT2 (OPT,IARRAY,M,N,L,U)
      IMPLICIT NONE
      CHARACTER OPT*8
      INTEGER M,N,L,U
      INTEGER IARRAY(L,U)
C
      INTEGER TOT,S1,S2,IBLOCK,I,J,K,LL,CNT
      PARAMETER (IBLOCK=1500)
      INTEGER TMPARRAY(IBLOCK)
C
      TOT = M * N
      IF     (OPT(1:1).EQ.'R'.OR.OPT(1:1).EQ.'R') THEN
        S1 = 1
        S2 = 1
        DO 100 I = 1, TOT, IBLOCK
          READ (8) (TMPARRAY(J),J=1,MIN(TOT-(I-1)*IBLOCK,IBLOCK))
          CNT = 0
          DO 110 K = S1, M
             DO 110 LL = S2,N
                CNT = CNT + 1
                IARRAY(K,LL) = TMPARRAY(J)
                IF (CNT.EQ.IBLOCK) GOTO 115
 110      CONTINUE
C
 115      CONTINUE
          S1 = K
          S2 = LL+1
          IF (S2.EQ.N+1) THEN
             S2 = 1
             S1 = K+1
          ENDIF
C
  100   CONTINUE
      ELSEIF (OPT(1:1).EQ.'W'.OR.OPT(1:1).EQ.'W') THEN
        S1 = 1
        S2 = 1
        DO 200 I = 1, TOT, IBLOCK
          CNT = 0
          DO 210 K = S1, M
             DO 210 LL = S2,N
                CNT = CNT + 1
                TMPARRAY(CNT) = IARRAY(K,LL)
                IF (CNT.EQ.IBLOCK) GOTO 215
 210      CONTINUE
C
 215      CONTINUE
          S1 = K
          S2 = LL+1
          IF (S2.EQ.N+1) THEN
             S2 = 1
             S1 = K+1
          ENDIF
          WRITE (8) (TMPARRAY(J),J=1,MIN(TOT-(I-1)*IBLOCK,IBLOCK))
C
 200    CONTINUE
      ENDIF
C     WRITE (6,9001) OPT(3:8),REAL(4*N)
C9001 FORMAT(1X,'IINOUT: SIZE OF ',A6,' =',-6P,F6.2,' MB')
      RETURN
      END
C
C
C
      SUBROUTINE RDNRC(DIVUID,PASSWD)                                   00010000
C.----------------------------------------------------------------------
C.                                                                      
C.  RDNRC           : Attempts to read the mainframe UID and password 
C.                    from the .netrc file. If this fails, user will      
C.                    be prompted by the PPF system. (NB: jac specific)
C.                    
C.                                                                      
C.  FORTRAN SOURCE  : /u/ral/idl_ppf/rdnrc.f                         
C.  INCLUDE LIBRARY : -                                                 
C.                                                                      
C.  ARGUMENTS       : NAME      I/O    TYPE   DETAILS
C.                    divuid     O     C*6    mainframe UID           
C.                    passwd     O     C*8    mainframe password     
C.  WRITTEN BY      : R A LAYNE , TESSELLA/ Data Management Group   
C.  ON              : 12/06/95                                          
C.  MODIFICATIONS                                                       
C.                                                                      
C.----------------------------------------------------------------------
      LOGICAL*4      GOTUID                                             00310000
      CHARACTER*18   FNAME                                              00340004
      CHARACTER*50   LINE                                               00350000
      character*6 aixuid,divuid
      character*8  passwd

C                                                                       00400000
      GOTUID = .FALSE.                                                  00410000
      divuid = ' '
      passwd = ' '
C                                                                       00420000
      CALL GETENV('LOGNAME',AIXUID)
      FNAME  = '/u/'//AIXUID(1:lnblnk_(AIXUID))//'/.netrc'              00440005
C                                                                       00450005
      OPEN(UNIT=90,FILE=FNAME,STATUS='OLD',ACCESS='SEQUENTIAL'          00460004
     +,    FORM='FORMATTED',ERR=900,IOSTAT=IOSO)                        00470005
      IF(IOSO.NE.0)                                GO TO 900            00480005
C                                                                       00490000
   10 CONTINUE                                                          00500000
      READ(90,'(A50)',END=900,ERR=900, IOSTAT=IOSR) LINE 
C                                                                       00520000
      CALL UPPER(LINE,LINE)                                             00530000
      IF(LINE( 1: 7).NE.'MACHINE')                 GO TO 10             00540000
C                                                                       00550005
      DO 20 IC=9,74                                                     00560005
         IF(LINE(IC:IC+6).EQ.'JET3090')            GO TO 30             00570005
   20 CONTINUE                                                          00580005
      GO TO 10                                                          00590005
C                                                                       00600005
   30 CONTINUE                                                          00610005
      JC     = IC + 8                                                   00620005
      IF(JC.GT.53)                                 GO TO 900            00630005
      DO 40 IC=JC,76                                                    00640005
         IF(LINE(IC:IC+4).EQ.'LOGIN')              GO TO 50             00650005
   40 CONTINUE                                                          00660005
      GO TO 900                                                         00670005
C                                                                       00680005
   50 CONTINUE                                                          00690005
      JC     = IC + 6                                                   00700005
      IF(JC.GT.59)                                 GO TO 900            00710005
      DO 60 IC=JC,76                                                    00720005
         IF(LINE(IC:IC).NE.' ')                    GO TO 70             00730005
   60 CONTINUE                                                          00740005
      GO TO 900                                                         00750005
C                                                                       00760000
   70 CONTINUE                                                          00770005
      JC     = MIN0(IC+5,80)                                            00780005
      DIVUID = LINE(IC:JC)                                              00790005
      IF(lnblnk_(DIVUID).NE.6)                     GO TO 900            00800005
      GOTUID = .TRUE.                                                   00810005
C                                                                       00820005
      JC     = IC + 7                                                   00830005
      IF(JC.GT.66)                                 GO TO 900            00840005
      DO 80 IC=JC,73                                                    00850005
         IF(LINE(IC:IC+7).EQ.'PASSWORD')           GO TO 90             00860005
   80 CONTINUE                                                          00870005
      GO TO 900                                                         00880005
C                                                                       00890005
   90 CONTINUE                                                          00900005
      JC     = IC + 9                                                   00910005
      IF(JC.GT.75)                                 GO TO 900            00920005
      DO 100 IC=JC,75                                                   00930005
         IF(LINE(IC:IC).NE.' ')                    GO TO 110            00940005
  100 CONTINUE                                                          00950005
      GO TO 900                                                         00960005
C                                                                       00970005
  110 CONTINUE                                                          00980005
      JC     = MIN0(IC+7,80)                                            00990005
      PASSWD = LINE(IC:JC)                                              01000005
      IF(lnblnk_(PASSWD).GE.6)                     GO TO 900            01010005
C--                                                                     01020000
C--      NO NETRC FILE OR IT DOES NOT CONTAIN NECESSARY DATA            01030000
C                                                                       01040000
  900 CONTINUE                                                          01390000
      RETURN                                                            01400000

      END                                                               01510000
C=======================================================================01520000








