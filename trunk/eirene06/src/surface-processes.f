C EIRENE06 COMPILATION
C ===== SOURCE: emaxw.f
C
C
      FUNCTION EMAXW(TI,XMPER,YMPAR)
C
C  MEAN ENERGY OF AN ION, GIVEN A TRUNCATED MAXWELLIAN FLUX DENSITY
C  AT TI (EV) SHIFTED
C  BY A DRIFT WITH NORMALIZED VELOCITY XMPER PERPENDICULAR
C  ONTO AND YMPAR PARALLEL TO THE TARGET SURFACE
C  IF VDRIFT IS A VELOCITY, THEN XMPER (YMPAR) IS
C  VDRIFT/VTERM WITH VTERM=SQRT(2*TI/RMASS)
C  IN EIRENE UNITS: VDRIFT: CM/SEC
C                   VTERM : SQRT(2*TI/RMASS)*CVEL2A (CM/SEC)
C                           (WITH TI (EV), RMASS (AMU) CVEL2A=9.8226 E5)
      USE PRECISION
      USE PARMMOD
      USE CCONA

      IMPLICIT NONE

      REAL(DP), INTENT(IN) :: TI, XMPER, YMPAR
      REAL(DP) :: XMM, XMM2, YMM2, ER1, ER2, FACTOR, EMAXW, ERF

      IF (XMPER.NE.0.D0) THEN
        XMM=XMPER
        XMM2=XMPER*XMPER
        YMM2=YMPAR*YMPAR
        ER1=EXP(-XMM2)/SQRT(PIA)
        ER2=(1.+ERF(XMM))*XMM
        FACTOR=((XMM2+2.+YMM2)*ER1+(XMM2+2.5+YMM2)*ER2)/(ER1+ER2)
      ELSE
        YMM2=YMPAR*YMPAR
        FACTOR=2.+YMM2
      ENDIF
      EMAXW=FACTOR*TI
      RETURN
      END
C ===== SOURCE: refang.f
C
      SUBROUTINE REFANG (COSP,COSM,CRTXR,CRTYR,CRTZR,NMODEL,SNORM)
C
C   ANGLE OF REFLECTION, GAUSSIAN, COSINE LIKE, SPECULAR OR MIXED
C   THIS ROUTINE IS USED FOR SPECIAL ANGULAR SOURCE DISTRIBUTIONS
C   FOR PRIMARY SOURCE PARTICLES (CALLED FROM SUBR. LOCATE)
C   INPUT : VELX,VELY,VELZ VIA COMPRT
C           CRTX,CRTY,CRTZ VIA COMPRT
C           COSP:
C           COSM:
C           CRTXR,CRTYR,CRTZR: MODIFIED SURFACE NORMAL VECTOR
C   OUTPUT: VELX,VELY,VELZ VIA COMPRT, AND VELX_MEAN,....,VELZ_MEAN
C
      USE PRECISION
      USE PARMMOD
      USE CCONA
      USE CRAND
      USE COMPRT

      IMPLICIT NONE

      REAL(DP), INTENT(IN) :: COSP, COSM, CRTXR, CRTYR, CRTZR, SNORM
      INTEGER, INTENT(IN) :: NMODEL
      REAL(DP) :: A, ZCPHI, ZCTHET, ZSTHET, VX, VY, VZ, ZPHI,
     .            ZTHET, CRTXL, CRTYL, CRTZL, COSIN, ZSPHI
      REAL(DP), EXTERNAL :: RANF_EIRENE
      INTEGER :: ICOUNT

      CRTXL=CRTXR
      CRTYL=CRTYR
      CRTZL=CRTZR
      IF (SNORM.GE.EPS10) THEN
        COSIN=CRTXL*VELX+CRTYL*VELY+CRTZL*VELZ
      ELSE
        COSIN=CRTX*VELX+CRTY*VELY+CRTZ*VELZ
        CRTXL=CRTX
        CRTYL=CRTY
        CRTZL=CRTZ
      ENDIF
C   AZIMUTAL ANGLE: EQUIDISTRIBUTION
      ZTHET=PI2A*RANF_EIRENE( )
      ZSTHET=SIN(ZTHET)
      ZCTHET=COS(ZTHET)
C
      IF (NMODEL.EQ.1) THEN
C   POLAR ANGLE: MODIFIED COSINE WITH CUT OFF COSM
        A=RANF_EIRENE( )
        ZCPHI=(1.-A*COSM)**COSP
      ELSE
C   POLAR ANGLE: FROM GAUSSIAN WITH CUT OFF COSM
        ICOUNT=0
410     IF (INIV2.EQ.0) CALL FGAUSS
        ZPHI=COSP*FG1(INIV2)
        INIV2=INIV2-1
        ICOUNT=ICOUNT+1
C   CUT OFF ANGLE: COSM (RADIANS)
        IF (ICOUNT.GT.1000) THEN
          WRITE (iunout,*) 'WARNING FROM REFANG: ICOUNT=1000 '
          GOTO 420
        ENDIF
        IF (ABS(ZPHI).GT.COSM) GOTO 410
420     ZCPHI=COS(ZPHI)
      ENDIF
C
      ZSPHI=SQRT(1.-ZCPHI*ZCPHI)
C
C  NO SPECULAR CONTRIBUTION IN MODIFIED COSINE
      VX=-ZCPHI
      VY=ZSPHI*ZCTHET
      VZ=ZSPHI*ZSTHET
C
      IF (ABS(COSIN).LT.EPS10) THEN
C  NO SPECIFIED DIRECTION, EG. POINT ISOTROPIC SOURCE
        VELX=VX
        VELY=VY
        VELZ=VZ
      ELSE
C  ROTATE, TO ACCOUNT FOR SURFACE NORMAL VECTOR CRTXL,CRTYL,CRTZL
        CALL ROTATF (VELX,VELY,VELZ,VX,VY,VZ,CRTXL,CRTYL,CRTZL)
      ENDIF
C
      VELX_MEAN=VELX
      VELY_MEAN=VELY
      VELZ_MEAN=VELZ
C
      RETURN
      END
C ===== SOURCE: reflec.f
C  nov.05:  cleanup: ispz=nspa+imol, instead ispz=nsph+natmi+imol
C  jan.06:  user reflection model: modref=3 --> modref=9
C  feb06:   check for valid MODREF added
C  apr06:   spelling error corrected: rprop --> rprob (2 times)
C  aug06:   printout of reflection properties of surfaces only for 
C           nontransparent surfaces
C
      SUBROUTINE REFLEC
C
C  REFLECT ESCAPING ATOMS OR IONS
C  INPUT:
C       ILREF = 1  DATABASE REFLECTION MODEL, W.ECKSTEIN, D.B.HEIFETZ,
C                  IPP 9/59 (1986)
C       ILREF = 2  MODIFIED BEHRISCH MATRIX, R. BEHRISCH, ERICE SUMMER
C                  SCHOOL 1976
C       ILREF = 9  USER SUPPLIED REFLECTION MODEL, CALL: RF1USR
C
C       ITYP  = 1  INCIDENT ATOM
C       ITYP  = 3  INCIDENT TEST ION
C       ITYP  = 4  INCIDENT BULK ION
C  OUTPUT:
C     LGPART= TRUE AND:
C       ITYP = 1  ATOM IATM IS RETURNED TO CALLING PROGRAM
C       ITYP = 2  MOLECULE IMOL IS RETURNED TO CALLING PROGRAM
C       ITYP = 3  TEST ION  IION IS RETURNED TO CALLING PROGRAM
C     LGPART= FALSE  NO PARTICLE IS RETURNED (ABSORBTION)
C       ITYP = -1
C
      USE PRECISION
      USE PARMMOD
      USE COMUSR
      USE CREFMOD
      USE CESTIM
      USE CADGEO
      USE CCONA
      USE CLOGAU
      USE CRAND
      USE CREF
      USE CZT1
      USE CTRCEI
      USE COMPRT
      USE CLGIN
      USE CSPEI
      USE CPES

      IMPLICIT NONE
C
C---------------------------------------------------------------------
C
      REAL(DP) ::
     .  ZRANGE(0:12),ZDE(12),ZDEL(12),ZENGY(0:12),ZR(0:12),ZIDE(12,12),
     .  ZIDED(12,12),XSP(12),YSP(12),ASP(12),BSP(12),CSP(12),DSP(12),
     .  E0AV(0:12),QUOTR(0:11),QUOTE(0:11)
      REAL(DP) :: EREDC, VX, VY, VZ, ED, ZCTHET, ZSTHET, RO4, ZCPHI,
     .          ZSPHI, RO5, PRBRF, FTHOMP, WATOM, RPROBA, ZE0, ZA, A,
     .          ZTHET, ZE, ESUM, EFAC, ZDELTA, COSI2, WABS, WLOSS, TW,
     .          FLPRT, WMOLEC, RPROBM, FR2, PRTEST, RPROBL, DUMMY,
     .          XCH, XMFE, XMH, EPSHFE, E0TERM, XCW, EBIND, PRFCT,
     .          PRFCF, XMW, CON, ZWDR, EOQ, XMP, WMIN,
     .          XCP, XCFE, DX, EXPP, RO1, EQSAVE, ZEP1, RO3,
     .          EMINR, EMAXR, RPROB, COSIN, EXPI, EXPE, RINTG, AINTG,
     .          EINTG, EFCT, EQTO, ETEST, EQT, F1, WFAC, F2, EREDUC,
     .          FR1, XMTT, XCTT, XMPP, XCPP, RO2
      REAL(DP) :: RF, RF1, RF2, RF3, RF4, RF5, RF6, RF7, RF8, RF9, RF10,
     .          RF11, RF12, RF13, RF14, RF15, RF16,
     .          RFF1, RFF2, RFF3, RFF4, RFF5, RFF6, RFF7, RFF8,
     .          RFFF1, RFFF2, RFFF3, RFFF4,
     .          RFFFF1, RFFFF2
      REAL(DP), EXTERNAL :: RANF_EIRENE, RANSET_EIRENE
      INTEGER :: NPANOLD, IDIM, IRANGE, IRM, INDR2, INDR3P, MSS,
     .           IBOX, ILIM, JP, ISP, ISTS, I, ISEE, MODREF, IGAST,
     .           IGASF, NPRIN, LEARCA, NRE, NREP, ICOUNT, IFIRST, J,
     .           NRI, INDR3, ISAVE, INDEP, INDWP, INDE, INDR2P, INDR1P,
     .           INDR1, ISPZO, IFILE, INDW
      INTEGER, EXTERNAL :: RANGET_EIRENE
      LOGICAL :: NLDATA, NLBEHR

      SAVE
C  SIZE OF "BEHRISCH TABLES"
      DATA IDIM/12/
C  ENERGY , ABSZISSA FOR REFLECTION PROBABILITY, H INCIDENT ON FE
      DATA
     .   ZENGY/0.,4.64,10.0,21.5,46.4,100.0,215.4,464.1,1000.0,2154.3,
     .         4641.3,10000.0,21543.0/
C  REFLECTION PROBABILITY RPROB(ENERGY)= ZR(ZENGY)
      DATA
     .   ZR/1.,0.9,0.8,0.7,0.62,0.543,0.46,0.37,0.29,0.21,0.14,
     .      0.095,0.04/
C  ENERGY RANGE FOR ENERGY DISTRIBUTION, LAST CELL IS: ZENGY
C  I.E. ABSZISSA FOR ENERGY-DISTRIBUTION-FUNCTIONS, H INCIDENT ON FE
      DATA
     .   ZRANGE/0.,6.81,14.7,31.63,68.1,146.8,316.3,681.9,1468.0,
     .          3162.0,6813.0,14678.0,31630./
C  DISTRIBUTION FUNCTIONS ZIDE(ZRANGE) , ONE FOR EACH ZENGY
      DATA ZIDE
     . /12*1.,
     .  0.2,11*1.,
     .  0.1,0.2,10*1.,
     .  0.025,0.05,0.35,9*1.,
     .  0.012,0.025,0.1,0.45,8*1.,
     .  0.01,0.02,0.05,0.15,0.55,7*1.,
     .  0.002,0.005,0.02,0.055,0.175,0.625,6*1.,
     .  0.001,0.003,0.011,0.029,0.079,0.224,0.699,5*1.,
     .  0.001,0.003,0.007,0.016,0.04,0.105,0.301,0.771,4*1.,
     .  0.,0.001,0.003,0.007,0.018,0.050,0.14,0.40,0.83,3*1.,
     .  0.,0.001,0.003,0.006,0.011,0.025,0.073,0.215,0.505,0.865,2*1.,
     .  0.,0.001,0.003,0.005,0.009,0.015,0.035,0.105,0.305,0.6,0.9,1./
C---------------------------------------------------------------------
      DATA CON/0.4685/,EOQ/14.39/,ZWDR/0.666667/,IFIRST/0/,ICOUNT/0/
      DATA NPANOLD/0/
      EREDC(XMTT,XCTT,XMPP,XCPP)=CON/EOQ*XMTT/((XMPP+XMTT)*XCPP*XCTT*
     .                       SQRT(XCPP**ZWDR+XCTT**ZWDR))
C
C  INITIALIZE SURFACE REFLECTION MODELS
C
      ENTRY REFLC0
C
      IF (IFIRST.EQ.1) RETURN
      IFIRST=1
C
      NLDATA=.FALSE.
      NLBEHR=.FALSE.
      DO 1 J=1,NLIMPS
        NLDATA=NLDATA.OR.(ILREF(J).EQ.1)
        NLBEHR=NLBEHR.OR.(ILREF(J).EQ.2)
1     CONTINUE
C
C
C  SET ADDITIONAL DATA FOR "DATABASE REFLECTION MODEL"
C
      IF (NLDATA) THEN
C
        if (my_pe .eq. 0) then
          IF (NLTRIM) THEN
            IF (LTRMOL) THEN
              CALL REFDAT(TM,TC,WM,WC)
            ELSE
              CALL RDTRIM
            ENDIF
          ELSE
            WRITE (iunout,*) 'INPUT ERROR FOR LOCAL REFLECTION MODEL'
            WRITE (iunout,*) 'DATABASE REFLECTION MODEL REQUIRED BUT '
            WRITE (iunout,*) 'NLTRIM IS NOT SET TRUE'
            CALL EXIT_OWN(1)
          ENDIF
        endif

        if (nprs > 1) call broadref
C
C  SET FACTORS FOR REDUCED ENERGY SCALING FOR ALL TARGET/PROJECTILE
C  COMBINATIONS AVAILABLE IN DATABASE MODEL
        DO 3 J=1,NFLR
          ERDC(J)=EREDC(WM(J),WC(J),TM(J),TC(J))
3       CONTINUE
C  SET UNIFORM DISTRIBUTION OF AZIMUTAL ANGLE FOR DATABASE MODEL
C  FOR PERPENDICULAR INCIDENCE (INDW=1)
        DO 4 INDR3=1,INR
          HFTR3F(INDR3)=COS(PIA*(1.-RAAR(INDR3)))
4       CONTINUE
C
        IF (TRCREF) THEN
          DO 5 J=1,NFLR
            CALL LEER(1)
            WRITE (iunout,*) 'DATABASE REFLECTION MODEL DEFINED FOR:'
            WRITE (iunout,*) 'IFILE =                      ',J
            WRITE (iunout,*) 'TARGET MASS NUMBER =         ',WM(J)
            WRITE (iunout,*) 'TARGET NUCL. CHARGE NUMBER = ',WC(J)
            WRITE (iunout,*) 'PROJECTIL MASS NUMBER =      ',TM(J)
            WRITE (iunout,*) 'PRJTL. NUCL. CHARGE NUMBER = ',TC(J)
            WRITE (iunout,*) 'REDUCED ENERGY FACTOR ERDC = ',ERDC(J)
5         CONTINUE
          CALL LEER(2)
        ENDIF
      ELSE
        INE=1
        INW=1
        INR=1
        NFLR=1
        if (nprs > 1) call broadref
      ENDIF
C
C  SET ADDITIONAL DATA FOR "BEHRISCH MATRIX REFLECTION MODEL"
C
      IF (NLBEHR) THEN
C
C  "BEHRISCH MODEL" REFLECTION PROBABILITY ZR(ZENGY)
C        FOR ENERGIES BELOW ERCUT CAN BE MODIFIED;
C        RPROB0 IS THE NEW (HYPOTHETICAL) REFL. PROB AT ZENGY(0)=0. (EV)
C        (THERE IS NO REFLECTION MODEL BUT ONLY A THERMAL PARTICLE
C        MODEL CALLED FOR E0 BELOW ERMIN)
C
C  NO MODIFICATION FOR ERCUT.LT.0.
C  ZR(0) -- ZR(NRE) ARE MODIFIED FOR ERCUT.GE.ZENGY(0)
        IF (ERCUT.GT.ZENGY(0).AND.ERCUT.LT.ZENGY(1)) THEN
          ZR(0)=RPROB0
        ELSEIF (ERCUT.GE.ZENGY(1)) THEN
          NRI=2
          NRE=LEARCA(ERCUT,ZENGY,1,13,1,'REFLEC (1)  ')-1
          NREP=NRE+1
          DX=ERCUT-ZENGY(NRE)
          XSP(1)=ZENGY(0)
          YSP(1)=RPROB0
          XSP(2)=ERCUT
          YSP(2)=(ZR(NREP)-ZR(NRE))/(ZENGY(NREP)-ZENGY(NRE))*DX+ZR(NRE)
C  SET SPLINE DATA FOR NEW REFLECTION PROBABLITY ZR(ZENGY)
          DO 6 J=NREP,12
            NRI=NRI+1
            XSP(NRI)=ZENGY(J)
            YSP(NRI)=ZR(J)
6         CONTINUE
          CALL SPLINE(XSP,YSP,NRI,ASP,BSP,CSP,DSP)
C   SET THE NEW ZR ON GRID ZENGY(J) FROM ZENGY(0) TO ZENGY(NRE)
          ZR(0)=RPROB0
          DO 7 J=0,NRE
            DX=ZENGY(J)-XSP(1)
            ZR(J)=((DSP(1)*DX+CSP(1))*DX+BSP(1))*DX+ASP(1)
7         CONTINUE
        ENDIF
C
C
C  THE BEHRISCH-REFLECTION DATA ARE GIVEN FOR H INCIDENT ON FE
C  CONVERT TO REDUCED ENERGY
C
C  CHARGE NUMBERS: STAINLESS STEEL
        XCFE=26.
C  MASS NUMBERS  : STAINLESS STEEL
        XMFE=56.
C  CHARGE NUMBER: HYDROGEN
        XCH=1.
C  MASS NUMBER  : HYDROGEN
        XMH=1.
C
        EPSHFE=EREDC(XMFE,XCFE,XMH,XCH)
C
        DO 12 J=1,12
          ZRANGE(J)=ZRANGE(J)*EPSHFE
          ZDE(J)=ZRANGE(J)-ZRANGE(J-1)
          ZENGY(J)=ZENGY(J)*EPSHFE
12      CONTINUE
        DO 13 I=1,12
          ZIDED(1,I)=ZIDE(1,I)
          ZDEL(I)=ZENGY(I)-ZRANGE(I-1)
          DO 14 J=2,12
            ZIDED(J,I)=ZIDE(J,I)-ZIDE(J-1,I)
14        CONTINUE
13      CONTINUE
        ZDEL(1)=0.
C
C  SET MEAN ENERGY OF REFLECTED PARTICLES FROM STOCHASTIC MATRIX
C
        E0AV(0)=0.
        DO 15 J=1,12
C  LAST BOX
          E0AV(J)=ZIDED(J,J)*(ZENGY(J)-ZDEL(J)/2.)
C   OTHER BOXES
          DO 16 I=1,J-1
16          E0AV(J)=E0AV(J)+ZIDED(I,J)*(ZRANGE(I)-ZDE(I)/2.)
15      CONTINUE
C
C  SET SOME CONSTANTS TO SPEED UP LINEAR INTERPOLATION IN
C  BEHRISCH REFLECTION DATA
C
        DO 17 J=0,11
          JP=J+1
          QUOTR(J)=(ZR(JP)-ZR(J))/(ZENGY(JP)-ZENGY(J))
          QUOTE(J)=(E0AV(JP)-E0AV(J))/(ZENGY(JP)-ZENGY(J))
17      CONTINUE
C
        IF (TRCREF) THEN
          CALL LEER(1)
          WRITE (iunout,*) 'REFLECTION DATA FROM BEHRISCH-MATRIX'
          WRITE (iunout,*) 
     .      'IMP. ENERGY (RED), REF. PROB, MEAN REFL. ENERGY'
          DO 19 J=0,12
            CALL MASR3('                        ',ZRANGE(J),ZR(J),
     .                                            E0AV(J))
19        CONTINUE
          CALL LEER(2)
        ENDIF
C
      ENDIF
C
C  PRINTOUT REFLECTION PROPERTIES OF SURFACES
C
      IF (TRCREF) THEN
        WRITE (iunout,*) 
     .    'ADDITIONAL SURFACES, THAT ARE NOT 100% RECYCLING'
        WRITE (iunout,*) 'FOR ALL SPECIES'
        ICOUNT=0
        DO 20 ILIM=1,NLIMI
          DO 21 ISP=1,NSPTOT
            IF ((RECYCT(ISP,ILIM).LT.1.D0).AND.
     .          (TRANSP(ISP,1,ILIM)+TRANSP(ISP,2,ILIM).LT.2.D0)) THEN
              ICOUNT=ICOUNT+1
              IF (ICOUNT.EQ.1) WRITE (iunout,*) 'ISPZ,ILIM,RECYCT'
              WRITE (iunout,*) TEXTS(ISP),ILIM,RECYCT(ISP,ILIM)
            ENDIF
21        CONTINUE
20      CONTINUE
        IF (ICOUNT.EQ.0) WRITE (iunout,*) 'NONE '
        WRITE (iunout,*) 
     .    'STANDARD SURFACES, THAT ARE NOT 100% REFLECTING'
        WRITE (iunout,*) 'FOR ALL SPECIES'
        ICOUNT=0
        DO 22 ISTS=1,NSTSI
          DO 23 ISP=1,NSPTOT
            IF ((RECYCT(ISP,NLIM+ISTS).LT.1.D0).AND.
     .          (TRANSP(ISP,1,NLIM+ISTS)+
     .           TRANSP(ISP,2,NLIM+ISTS).LT.2.D0)) THEN
              ICOUNT=ICOUNT+1
              IF (ICOUNT.EQ.1) WRITE (iunout,*) 'ISPZ,ISTS,RECYCT'
              WRITE (iunout,*) TEXTS(ISP),ISTS,RECYCT(ISP,NLIM+ISTS)
            ENDIF
23        CONTINUE
22      CONTINUE
        IF (ICOUNT.EQ.0) WRITE (iunout,*) 'NONE '
        ICOUNT=0
        CALL LEER(2)
      ENDIF
C
      CALL RF0USR
C
      RETURN
C
      ENTRY REFLC1 (WMIN,XMP,XCP,NPRIN,IGASF,IGAST)
C
C  SYNCHRONIZE RANDOM NUMBERS
C
      IF (NLCRR.AND.(NPANU.NE.NPANOLD)) THEN
C  INITIALIZE RANDOM NUMBERS FOR EACH PARTICLE, TO GENERATE CORRELATION
C       Call RANSET_EIRENE(ISEED)
        dummy=ranset_eirene(iseedR)
        DUMMY=RANF_EIRENE( )
        ISEEDR=ranget_eirene(isee)
        ISEEDR=INTMAX-ISEEDR
        NPANOLD=NPANU
      END IF
C
C  SURFACE NUMBER  : MSURF (MSURF=0: DEFAULT MODEL)
C  SPECIES INDEX   : ISPZ
C
      MODREF=ILREF(MSURF)
      XMW=ZNML(MSURF)
      XCW=ZNCL(MSURF)
      E0TERM=EWALL(MSURF)
      EBIND=EWBIN(MSURF)
      PRFCF=RECYCF(ISPZ,MSURF)
      PRFCT=RECYCT(ISPZ,MSURF)
      EXPP=EXPPL(ISPZ,MSURF)
      EXPE=EXPEL(ISPZ,MSURF)
      EXPI=EXPIL(ISPZ,MSURF)
      RINTG=RINTEG(MSURF)
      EINTG=EINTEG(MSURF)
      AINTG=AINTEG(MSURF)
      ISPZO=ISPZ
C
C  SET EMIN AND EMAX FOR ENERGY SAMPLING FROM DATABASE (MODREF=1)
C
      EMINR=E0TERM
      IF (E0TERM.LT.0.D0) EMINR=-2.*E0TERM
      EMAXR=E0
C
C   TENTATIVELY ASSUME  REFLECTION
      LGPART=.TRUE.
C   COSINE OF ANGLE OF INCIDENCE
      COSIN=VELX*CRTX+VELY*CRTY+VELZ*CRTZ
      IF (COSIN.LT.0.D0) GOTO 993
C
C   NO REFLECTION OF FAST ATOMS FOR INCIDENT ENERGY BELOW ERMIN
C                               OR IF IGASF=0
C
c      IF (msurf.EQ.12) WRITE(0,*) 'debug igas:',ispz,msurf,igasf,igast
      IF (E0.LE.ERMIN.OR.IGASF.EQ.0) THEN
C
C   THERMAL PARTICLE MODEL IS CALLED
C
        RPROB=0.
        WFAC=0.
        COSIN=1.
C  RELATIVE FRACTION OF COSINE VS. SPECULAR REFLECTION
        F1=1.
        F2=0.
        FR1=RANF_EIRENE( )
C       IF (FR1.GE.RPROB) THEN
          IF (IGAST) 500,700,600
C       ENDIF
      ENDIF
C
C   FACTOR FOR CONVERSION TO REDUCED ENERGY
      EREDUC=EREDC(XMW,XCW,XMP,XCP)
C
C
C   MODREF=1: "DATABASE REFLECTION MODEL" (TRIM)
C   MODREF=2: "BEHRISCH-MATRIX"
C   MODREF=3: "USER SUPPLIED REFLECTION MODEL"
C
      IF (MODREF.EQ.1) THEN
        GOTO 100
      ELSEIF (MODREF.EQ.2) THEN
        GOTO 200
      ELSEIF (MODREF.GE.9) THEN
        CALL RF1USR (XMW,XCW,XMP,XCP,IGASF,IGAST,F1,F2,EXPI,
     .               RPROB,E0TERM,*400,*500,*600,*700)
        RETURN
      ELSE
        WRITE (6,*)  'INVALID REFLECTION MODEL PARAMETER '
        WRITE (6,*)  'EXIT CALLED FROM SUBROUTINE REFLEC.F'
        MSS=MSURF
        IF (MSURF.GT.NLIM) MSS=-(MSURF-NLIM)
        WRITE (6,*)  'MSURF, MODREF ',MSS, MODREF
        CALL EXIT_OWN(1)
      ENDIF
C
C  DATABASE REFLECTION MODEL STARTS HERE
C
100   CONTINUE
C
C   CHECK IF WALL REFLECTION DATA FOR IATM/IION INCIDENT ON
C   XWALL/ZWALL ARE AVAILABLE
C
      EQTO=1.D40
      EFCT=1.
      DO 120 IFILE=1,NFLR
        IF (ABS(ERDC(IFILE)-EREDUC).LE.EPS12) GOTO 130
        EQT=EREDUC/ERDC(IFILE)
        ETEST=ABS(EQT-1.)
        IF (ETEST.LT.EQTO) THEN
          ISAVE=IFILE
          EQTO=ETEST
          EQSAVE=EQT
        ENDIF
120   CONTINUE
      IF (ICOUNT.LT.5.AND.TRCREF) THEN
        WRITE (iunout,*) 'TRIM-REFLECTION DATA REQUESTED BUT NOT'
        WRITE (iunout,*) 'AVAILABLE FOR THE TARGET-PROJECTIL SYSTEM:'
        WRITE (iunout,*) 'XMWALL,XCWALL,XMPART,XCPART '
        WRITE (iunout,*)  XMW,XCW,XMP,XCP
        WRITE (iunout,*) 'EREDUC = ',EREDUC
        WRITE (iunout,*) 'THE REDUCED ENERGY FORMULAS ARE APPLIED WITH'
        WRITE (iunout,*) 'THE DATA FOR THE TARGET-PROJECTIL SYSTEM:'
        WRITE (iunout,*) 'J,WM(J),WC(J),TM(J),TC(J) '
        WRITE (iunout,*)  ISAVE,WM(ISAVE),WC(ISAVE),TM(ISAVE),TC(ISAVE)
        WRITE (iunout,*) 'ERDC(J),J=1,NFLR = ',(ERDC(J),J=1,NFLR)
        CALL LEER(1)
        ICOUNT=ICOUNT+1
      ENDIF
      IFILE=ISAVE
      EFCT=EQSAVE
C
      E0=E0*EFCT
C
130   CONTINUE
C
C  FIND INDICES FOR INCIDENT ENERGY AND ANGLE: INDE, INDW, R01, R02
C
      DO 102 I=2,INEM
        INDEP=I
        IF (E0.LE.ENAR(I)) GOTO 101
102   CONTINUE
      INDEP=INE
101   INDE=INDEP-1
C
      DO 103 I=2,INWM
         INDWP=I
         IF (COSIN.GE.WIAR(I)) GOTO 104
103      CONTINUE
      INDWP=INW
104   INDW=INDWP-1
C
      RO1=(E0-ENAR(INDE))*DENAR(INDE)
      RO2=(COSIN-WIAR(INDW))*DWIAR(INDW)
C
C  REFLECTION PROBALITY: RPROB
C
      IF (RINTG.GT.0.D0) THEN
        RPROB=MIN(PRFCT,RINTG)
      ELSEIF (RINTG.LT.0) THEN
        RPROB=1.D0
      ELSE
        RF1=HFTR0(INDE,INDW,IFILE)
        RF1=RF1+RO1*(HFTR0(INDEP,INDW,IFILE)-RF1)
        RF2=HFTR0(INDE,INDWP,IFILE)
        RF2=RF2+RO1*(HFTR0(INDEP,INDWP,IFILE)-RF2)
C
        RPROB=RF1+RO2*(RF2-RF1)
        RPROB=MIN(RPROB*PRFCF,PRFCT)
      ENDIF
C
C   DECIDE IF PARTICLE IS TO BE REFLECTED OR IF THE "THERMAL
C   PARTICLE-MODEL" IS CALLED
C
      WFAC=1.
      FR1=RANF_EIRENE( )
C  THERMAL PARTICLE MODEL
c      IF (msurf.EQ.12) WRITE(0,*) 'debug rprob:',ispz,msurf,rprob,prfct
      IF (FR1.GE.RPROB) THEN
        IF (IGAST) 500,700,600
      ENDIF
C
C  SPECIES OF REFLECTED PARTICLE
      IF (IGASF.LT.1.OR.IGASF.GT.NATMI) GOTO 992
      IATM=IGASF
      ISPZ=NSPH+IATM
      ITYP=1
C
C  ENERGY OF REFLECTED PARTICLE
C
      ZEP1=RANF_EIRENE( )
      DO 105 I=2,INRM
        INDR1P=I
        IF (ZEP1.LE.RAAR(I)) GOTO 106
105   CONTINUE
      INDR1P=INR
106   INDR1=INDR1P-1
C
      RO3=(ZEP1-RAAR(INDR1))*DRAAR(INDR1)
C
      IF (EINTG.GT.0.D0) THEN
C  CONSTANT ENERGY REFLECTION COEFFICIENT
        E0=E0*EINTG
      ELSEIF (EINTG.LT.0.D0) THEN
C       E0=E0
C  E0 FROM MEAN ENERGY MODEL
      ELSE
C  E0 FROM STOCHASTIC MATRIX
        RF1=HFTR1(INDE,INDW,INDR1,IFILE)
        RF1=RF1+RO1*(HFTR1(INDEP,INDW,INDR1,IFILE)-RF1)
        RF2=HFTR1(INDE,INDWP,INDR1,IFILE)
        RF2=RF2+RO1*(HFTR1(INDEP,INDWP,INDR1,IFILE)-RF2)
        RF3=HFTR1(INDE,INDW,INDR1P,IFILE)
        RF3=RF3+RO1*(HFTR1(INDEP,INDW,INDR1P,IFILE)-RF3)
        RF4=HFTR1(INDE,INDWP,INDR1P,IFILE)
        RF4=RF4+RO1*(HFTR1(INDEP,INDWP,INDR1P,IFILE)-RF4)
C
        RFF1=RF1+RO2*(RF2-RF1)
        RFF2=RF3+RO2*(RF4-RF3)
C
        E0=RFF1+RO3*(RFF2-RFF1)
        E0=MAX(E0,EMINR)
        E0=MIN(E0,EMAXR)
      ENDIF
C
      E0=E0/EFCT
      VEL=RSQDVA(IATM)*SQRT(E0)
C
C  POLAR ANGLE OF REFLECTION
C
      IF (EXPI.EQ.0..OR.EXPI.GE.100.D0) THEN
        F1=1.
        F2=0.
        GOTO 400
      ENDIF
C
      ZEP1=RANF_EIRENE( )
      DO 107 I=2,INRM
        INDR2P=I
        IF (ZEP1.LE.RAAR(I)) GOTO 108
107   CONTINUE
      INDR2P=INR
108   INDR2=INDR2P-1
C
      RO4=(ZEP1-RAAR(INDR2))*DRAAR(INDR2)
C
      RF1=HFTR2(INDE,INDW,INDR1,INDR2,IFILE)
      RF1=RF1+RO1*(HFTR2(INDEP,INDW,INDR1,INDR2,IFILE)-RF1)
      RF2=HFTR2(INDE,INDWP,INDR1,INDR2,IFILE)
      RF2=RF2+RO1*(HFTR2(INDEP,INDWP,INDR1,INDR2,IFILE)-RF2)
      RF3=HFTR2(INDE,INDW,INDR1P,INDR2,IFILE)
      RF3=RF3+RO1*(HFTR2(INDEP,INDW,INDR1P,INDR2,IFILE)-RF3)
      RF4=HFTR2(INDE,INDWP,INDR1P,INDR2,IFILE)
      RF4=RF4+RO1*(HFTR2(INDEP,INDWP,INDR1P,INDR2,IFILE)-RF4)
      RF5=HFTR2(INDE,INDW,INDR1,INDR2P,IFILE)
      RF5=RF5+RO1*(HFTR2(INDEP,INDW,INDR1,INDR2P,IFILE)-RF5)
      RF6=HFTR2(INDE,INDWP,INDR1,INDR2P,IFILE)
      RF6=RF6+RO1*(HFTR2(INDEP,INDWP,INDR1,INDR2P,IFILE)-RF6)
      RF7=HFTR2(INDE,INDW,INDR1P,INDR2P,IFILE)
      RF7=RF7+RO1*(HFTR2(INDEP,INDW,INDR1P,INDR2P,IFILE)-RF7)
      RF8=HFTR2(INDE,INDWP,INDR1P,INDR2P,IFILE)
      RF8=RF8+RO1*(HFTR2(INDEP,INDWP,INDR1P,INDR2P,IFILE)-RF8)
C
      RFF1=RF1+RO2*(RF2-RF1)
      RFF2=RF3+RO2*(RF4-RF3)
      RFF3=RF5+RO2*(RF6-RF5)
      RFF4=RF7+RO2*(RF8-RF7)
C
      RFFF1=RFF1+RO3*(RFF2-RFF1)
      RFFF2=RFF3+RO3*(RFF4-RFF3)
C
      ZCPHI=RFFF1+RO4*(RFFF2-RFFF1)
C  LIMIT COSINE OF POLAR ANGLE TO 85. DEGREES
C  (I.E., 5 DEGREES AGAINST SURFACE TANGENTIAL PLANE)
      ZCPHI=MIN(0.999999_DP,MAX(0.08716_DP,ZCPHI))
      ZSPHI=SQRT(1.-ZCPHI*ZCPHI)
C
C  AZIMUTAL ANGLE OF REFLECTION
C
      ZEP1=RANF_EIRENE( )
      DO 109 I=2,INRM
         INDR3P=I
         IF (ZEP1.LE.RAAR(I)) GOTO 110
109      CONTINUE
      INDR3P=INR
110   INDR3=INDR3P-1
C
      RO5=(ZEP1-RAAR(INDR3))*DRAAR(INDR3)
C
      IF (INDW.EQ.1) THEN
        RF1=HFTR3F(INDR3)
        RF3=RF1
        RF5=RF1
        RF7=RF1
        RF9=HFTR3F(INDR3P)
        RF11=RF9
        RF13=RF9
        RF15=RF9
      ELSE
        RF1=HFTR3(INDE,INDW,INDR1,INDR2,INDR3,IFILE)
        RF1=RF1+RO1*(HFTR3(INDEP,INDW,INDR1,INDR2,INDR3,IFILE)-RF1)
        RF3=HFTR3(INDE,INDW,INDR1P,INDR2,INDR3,IFILE)
        RF3=RF3+RO1*(HFTR3(INDEP,INDW,INDR1P,INDR2,INDR3,IFILE)-RF3)
        RF5=HFTR3(INDE,INDW,INDR1,INDR2P,INDR3,IFILE)
        RF5=RF5+RO1*(HFTR3(INDEP,INDW,INDR1,INDR2P,INDR3,IFILE)-RF5)
        RF7=HFTR3(INDE,INDW,INDR1P,INDR2P,INDR3,IFILE)
        RF7=RF7+RO1*(HFTR3(INDEP,INDW,INDR1P,INDR2P,INDR3,IFILE)-RF7)
        RF9=HFTR3(INDE,INDW,INDR1,INDR2,INDR3P,IFILE)
        RF9=RF9+RO1*(HFTR3(INDEP,INDW,INDR1,INDR2,INDR3P,IFILE)-RF9)
        RF=HFTR3(INDE,INDW,INDR1P,INDR2,INDR3P,IFILE)
        RF11=RF+RO1*(HFTR3(INDEP,INDW,INDR1P,INDR2,INDR3P,IFILE)-RF)
        RF=HFTR3(INDE,INDW,INDR1,INDR2P,INDR3P,IFILE)
        RF13=RF+RO1*(HFTR3(INDEP,INDW,INDR1,INDR2P,INDR3P,IFILE)-RF)
        RF=HFTR3(INDE,INDW,INDR1P,INDR2P,INDR3P,IFILE)
        RF15=RF+RO1*(HFTR3(INDEP,INDW,INDR1P,INDR2P,INDR3P,IFILE)-RF)
      ENDIF
C
      RF2=HFTR3(INDE,INDWP,INDR1,INDR2,INDR3,IFILE)
      RF2=RF2+RO1*(HFTR3(INDEP,INDWP,INDR1,INDR2,INDR3,IFILE)-RF2)
      RF4=HFTR3(INDE,INDWP,INDR1P,INDR2,INDR3,IFILE)
      RF4=RF4+RO1*(HFTR3(INDEP,INDWP,INDR1P,INDR2,INDR3,IFILE)-RF4)
      RF6=HFTR3(INDE,INDWP,INDR1,INDR2P,INDR3,IFILE)
      RF6=RF6+RO1*(HFTR3(INDEP,INDWP,INDR1,INDR2P,INDR3,IFILE)-RF6)
      RF8=HFTR3(INDE,INDWP,INDR1P,INDR2P,INDR3,IFILE)
      RF8=RF8+RO1*(HFTR3(INDEP,INDWP,INDR1P,INDR2P,INDR3,IFILE)-RF8)
      RF10=HFTR3(INDE,INDWP,INDR1,INDR2,INDR3P,IFILE)
      RF10=RF10+RO1*(HFTR3(INDEP,INDWP,INDR1,INDR2,INDR3P,IFILE)-RF10)
      RF12=HFTR3(INDE,INDWP,INDR1P,INDR2,INDR3P,IFILE)
      RF12=RF12+RO1*(HFTR3(INDEP,INDWP,INDR1P,INDR2,INDR3P,IFILE)-RF12)
      RF14=HFTR3(INDE,INDWP,INDR1,INDR2P,INDR3P,IFILE)
      RF14=RF14+RO1*(HFTR3(INDEP,INDWP,INDR1,INDR2P,INDR3P,IFILE)-RF14)
      RF16=HFTR3(INDE,INDWP,INDR1P,INDR2P,INDR3P,IFILE)
      RF16=RF16+RO1*(HFTR3(INDEP,INDWP,INDR1P,INDR2P,INDR3P,IFILE)-RF16)
C
      RFF1=RF1+RO2*(RF2-RF1)
      RFF2=RF3+RO2*(RF4-RF3)
      RFF3=RF5+RO2*(RF6-RF5)
      RFF4=RF7+RO2*(RF8-RF7)
      RFF5=RF9+RO2*(RF10-RF9)
      RFF6=RF11+RO2*(RF12-RF11)
      RFF7=RF13+RO2*(RF14-RF13)
      RFF8=RF15+RO2*(RF16-RF15)
C
      RFFF1=RFF1+RO3*(RFF2-RFF1)
      RFFF2=RFF3+RO3*(RFF4-RFF3)
      RFFF3=RFF5+RO3*(RFF6-RFF5)
      RFFF4=RFF7+RO3*(RFF8-RFF7)
C
      RFFFF1=RFFF1+RO4*(RFFF2-RFFF1)
      RFFFF2=RFFF3+RO4*(RFFF4-RFFF3)
C
      ZCTHET=RFFFF1+RO5*(RFFFF2-RFFFF1)
      ZCTHET=MAX(-.999999_DP,MIN(0.999999_DP,ZCTHET))
      ZSTHET=SQRT(1.-ZCTHET*ZCTHET)
      ZSTHET=ZSTHET*SIGN(1._DP,(RANF_EIRENE( )-0.5_DP))
C
      VX=-ZCPHI
      VY=ZSPHI*ZSTHET
      VZ=ZSPHI*ZCTHET
      IF (COSIN.GT.0.999999) THEN
        CALL ROTATF (VELX,VELY,VELZ,VX,VY,VZ,CRTX,CRTY,CRTZ)
      ELSE
        CALL ROTATE (VELX,VELY,VELZ,VX,VY,VZ,CRTX,CRTY,CRTZ,COSIN)
      ENDIF
      RETURN
C
C  MODIFIED BEHRISCH MATRIX MODEL STARTS HERE
C
200   CONTINUE
C
      E0=E0*EREDUC
C
C  DETERMINE INTERVAL FOR INCIDENT ENERGY: IRM, ED
C
      DO 201 J=1,IDIM
        IRANGE=J
        IF (ZENGY(J).GE.E0) GO TO 202
201   CONTINUE
202   CONTINUE
      IRM=IRANGE-1
      ED=E0-ZENGY(IRM)
C
C   REFLECTION PROBABILITY FOR FAST PARTICLE REFLECTION MODEL: RPROB
C
      IF (RINTG.GT.0.D0) THEN
        RPROB=MIN(PRFCT,RINTG)
      ELSEIF (RINTG.LT.0.D0) THEN
        RPROB=1.D0
      ELSE
        PRBRF=MIN(1._DP,MAX(0._DP,ZR(IRM)+QUOTR(IRM)*ED))
        RPROB=1.-(1.-PRBRF)*(COSIN**EXPP)
        RPROB=MIN(RPROB*PRFCF,PRFCT)
      ENDIF
C
C  RELATIVE FRACTION OF COSINE VS. SPECULAR REFLECTION
      IF (EXPI.EQ.0.D0.OR.EXPI.GE.100.D0) THEN
        F1=1.
        F2=0.
      ELSE
        F1=MAX(0.015_DP,MIN(1._DP,COSIN**EXPI))
        F2=SQRT(1.-F1*F1)
      ENDIF
C
      WFAC=1.
      FR1=RANF_EIRENE( )
C
C  THERMAL PARTICLE MODEL
      IF (FR1.GE.RPROB) THEN
        IF (IGAST) 500,700,600
      ENDIF
C
C  FAST PARTICLE REFLECTION MODEL
C
C  SPECIES OF REFLECTED PARTICLE
      IATM=IGASF
      ISPZ=NSPH+IATM
      ITYP=1
C
C   ENERGY-REFLECTION COEFFICIENT
C   EPROB=1.-(1.-ERBRF)*(COSIN**EXPE)
C
      EFAC=COSIN**EXPE
      ESUM=E0-E0*EFAC
C
      IF (EINTG.GT.0.D0) THEN
        E0=E0*EINTG
C     ELSEIF (EINTG.LT.0.D0) THEN
C  E0 FROM MEAN ENERGY MODEL
C       E0=ESUM+(E0AV(IRM)+QUOTE(IRM)*ED)*EFAC
      ELSE
C  E0 FROM STOCHASTIC BEHRISCH MATRIX MODEL
C   REFLECTION ENERGY, "BEHRISCH MATRIX"
C   NUMBER OF BOXES IN THIS RANGE: IRANGE
C   DISTRIBUTION ZIDE(...,IRANGE)
C
        ZEP1=RANF_EIRENE( )
C
        DO 305 J=1,IRM
          IBOX=J
          ZDELTA=ZDE(J)
          ZE=ZRANGE(J)
          ZA=ZIDE(J,IRANGE)
          IF (ZA.GT.ZEP1) GO TO 307
305     CONTINUE
C  LAST BOX
        IBOX=IRANGE
        ZDELTA=ZDEL(IRANGE)
        ZE=ZENGY(IRANGE)
        ZA=1.
C
C   REFLECTION ENERGY, LINEAR INTERPOLATION
307     CONTINUE
        ZE0=ZE-(ZA-ZEP1)*ZDELTA/ZIDED(IBOX,IRANGE)
        ZE0=ZE0*E0/ZENGY(IRANGE)
        E0=ESUM+ZE0*EFAC
      ENDIF
C
C  E0 IS FOUND NOW. NEXT:
C  NEW WEIGHT, RESCALE ENERGY, SET VELOCITY
C
350   WEIGHT=WEIGHT*WFAC
      E0=E0/EREDUC
      VEL=RSQDVA(IATM)*SQRT(E0)
C     GOTO 400
C
400   CONTINUE
C
C  ANGULAR DISTRIBUTION
C
      IF (EXPI.LT.100.) THEN
        IF (F1.GT.0.999999) THEN
C  NO SPECULAR CONTRIBUTION (F2 = 0., F1 = 1.)
          IF (INIV4.LE.0) CALL FCOSIN
          VX=FC1(INIV4)
          VY=FC2(INIV4)
          VZ=FC3(INIV4)
          INIV4=INIV4-1
          CALL ROTATF (VELX,VELY,VELZ,VX,VY,VZ,CRTX,CRTY,CRTZ)
        ELSE
C  INCLUDE SPECULAR CONTRIBUTION (F2 > 0., F1 < 1.)
          ZTHET=PI2A*RANF_EIRENE( )
          ZSTHET=SIN(ZTHET)
          ZCTHET=COS(ZTHET)
          A=RANF_EIRENE( )
          ZCPHI=SQRT(A)
          ZSPHI=SQRT(1.-A)
C
          ZSPHI=ZSPHI*F1
          ZCPHI=SQRT(1.-ZSPHI*ZSPHI)
C
          VX=-ZCPHI*F1+        ZSPHI*ZSTHET*F2
          VY= ZSPHI*ZCTHET
          VZ= ZSPHI*ZSTHET*F1+ ZCPHI*F2
C
          CALL ROTATE (VELX,VELY,VELZ,VX,VY,VZ,CRTX,CRTY,CRTZ,COSIN)
        ENDIF
      ELSE
C   PURELY SPECULAR REFLECTION :EXPI .GE. 100 .
C   EXPI.GE.100 MEANS: INELASTIC+SPECULAR
        COSI2=-(COSIN+COSIN)
        VELX=VELX+COSI2*CRTX
        VELY=VELY+COSI2*CRTY
        VELZ=VELZ+COSI2*CRTZ
      ENDIF
      RETURN
C
C  "THERMAL MOLECULE MODEL"
C
C  CREATE MOLECULE OF SPECIES IMOL
C  WITH PROBABILITY PRFCT-RPROB, WHERE RPROB IS THE
C  PROBABILITY FOR BACKSCATTERING OF HOT ATOMS (.LE. PRFCT)
C  THE CONDITION FR1.GE.RPROB IS FULLFILLED AT THIS POINT
C
500   CONTINUE
      ITYP=2
      IMOL=-IGAST
      IF (IMOL.LT.1.OR.IMOL.GT.NMOLI) THEN
        FR2=RANF_EIRENE( )
        DO 501 I=1,NMOLI
          IMOL=I
          IF (FR2.LE.DMOL(IMOL)) GOTO 502
501     CONTINUE
        GOTO 992
502     CONTINUE
      ENDIF
      ISPZ=NSPA+IMOL
C
C  FAST FRACTION
C     RPROBF=RPROB
C  THERMAL MOLECULE FRACTION
      RPROBM=PRFCT-RPROB
C  LOST FRACTION
      RPROBL=1.D0-PRFCT
C
      IF (WEIGHT.LT.WMIN.OR.RPROBM.LE.0.D0) THEN
C  NO SUPRESSION OF ABSORPTION
        PRTEST=RPROB+RPROBM
C  AT THIS POINT: 1.D0.GE.FR1.GE.RPROB
        IF (FR1.GT.PRTEST) GOTO 700
      ELSE
C  SUPRESSION OF ABSORPTION
        WMOLEC=RPROBM/(1.D0-RPROB)
        WLOSS =RPROBL/(1.D0-RPROB)
        IF (WLOSS.GT.0.D0) THEN
          WABS=WEIGHT*WLOSS
          IF (MSURF.GT.0) SPUMP(ISPZO,MSURF)=SPUMP(ISPZO,MSURF)+WABS
        ENDIF
        WEIGHT=WEIGHT*WMOLEC
      ENDIF
C
C  NUMBER OF MOLECULES PER INCIDENT PARTICLE
C  NOTE: ABSORPTION DUE TO RECOMBINATION OF ATOMS (ONLY A FRACTION OF
C  A MOLECULE IS RE-EMITTED PER INCIDENT ATOM) IS ALWAYS SUPRESSED
C
      FLPRT=DBLE(NPRIN)/DBLE(NPRT(ISPZ))
      WEIGHT=WEIGHT*FLPRT
C
C  REFLECT THERMAL MOLECULE
      IF (E0TERM.GT.0.D0) THEN
C  MONOENERGETIC, E0 (EV),  COSINE
        E0=E0TERM
        VEL=RSQDVM(IMOL)*SQRT(E0)
        F1=1.
        GOTO 400
      ELSEIF (E0TERM.LT.0.D0) THEN
C  SAMPLE FROM MAXWELLIAN FLUX AROUND INNER (!) NORMAL AT TEMP. TW (EV)
        TW=-E0TERM
        CALL VELOCS (TW,0._DP,0._DP,0._DP,0._DP,0._DP,RSQDVM(IMOL),
     .                CVRSSM(IMOL),
     .               -CRTX,-CRTY,-CRTZ,
     .               E0,VELX,VELY,VELZ,VEL)
      ELSE
        GOTO 991
      ENDIF
      RETURN
C
C  "THERMAL ATOM MODEL"
C
C    ONE ATOM IS BORN,
C    WITH PROBABILITY PRFCT-RPROB, WHERE RPROB IS THE
C    PROBABILITY FOR BACKSCATTERING OF HOT ATOMS (.LE. PRFCT)
C    THE CONDITION FR1.GE.RPROB IS FULLFILLED AT THIS POINT
C
C    E0TERM > 0: COSINE DISTRIBUTED, E0=E0TERM,
C    E0TERM < 0: MAXWELLIAN AT TEMP. T=-E0TERM
C    E0TERM = 0: THOMPSON DISTRIBUTION WITH SURF. BIND. EN.= EBIND
C                UNTIL NOW: ONLY FOR THERMAL ATOM REFLECTION MODEL
C
600   CONTINUE
      ITYP=1
      IATM=IGAST
      IF (IATM.GT.NATMI) THEN
        FR2=RANF_EIRENE( )
        DO 610 I=1,NATMI
          IATM=I
          IF (FR2.LE.DATM(IATM)) GOTO 611
610     CONTINUE
        GOTO 992
611     CONTINUE
      ENDIF
      ISPZ=NSPH+IATM
C
C  FAST FRACTION
C     RPROBF=RPROB
C  THERMAL ATOM FRACTION
      RPROBA=PRFCT-RPROB
C  LOST FRACTION
      RPROBL=1.D0-PRFCT
C
      IF (WEIGHT.LT.WMIN.OR.RPROBA.LE.0.D0) THEN
C  NO SUPRESSION OF ABSORPTION
        PRTEST=RPROB+RPROBA
C  AT THIS POINT: 1.D0.GE.FR1.GE.RPROB
        IF (FR1.GE.PRTEST) GOTO 700
      ELSE
C  SUPRESSION OF ABSORPTION
        WATOM=RPROBA/(1.D0-RPROB)
        WLOSS=RPROBL/(1.D0-RPROB)
        IF (WLOSS.GT.0.D0) THEN
          WABS=WEIGHT*WLOSS
          IF (MSURF.GT.0) SPUMP(ISPZO,MSURF)=SPUMP(ISPZO,MSURF)+WABS
        ENDIF
        WEIGHT=WEIGHT*WATOM
      ENDIF
C
C  REFLECT THERMAL ATOM
      IF (E0TERM.GT.0.D0) THEN
C  MONOENERGETIC, E0 (EV), +  STANDARD, COSINE LIKE
        E0=E0TERM
        E0_MEAN=E0TERM
        VEL=RSQDVA(IATM)*SQRT(E0)
        F1=1.
        GOTO 400
      ELSEIF (E0TERM.LT.0.D0) THEN
C  SAMPLE FROM MAXWELLIAN FLUX AROUND INNER (!) NORMAL AT TEMP. TW (EV)
        TW=-E0TERM
        CALL VELOCS (TW,0._DP,0._DP,0._DP,0._DP,0._DP,RSQDVA(IATM),
     .                CVRSSA(IATM),
     .               -CRTX,-CRTY,-CRTZ,
     .               E0,VELX,VELY,VELZ,VEL)
        RETURN
      ELSEIF (E0TERM.EQ.0.D0) THEN
C  SAMPLE FROM ENERGY FROM THOMPSON DISTRIBUTION + STAND. ANGULAR DISTR.
        E0=FTHOMP(EBIND,EMAXR)
        VEL=RSQDVA(IATM)*SQRT(E0)
        F1=1.
        GOTO 400
      ENDIF
C
C  ABSORB PARTICLE AT THIS SURFACE
C
700   CONTINUE
      IF (MSURF.GT.0) SPUMP(ISPZO,MSURF)=SPUMP(ISPZO,MSURF)+WEIGHT
      LGPART=.FALSE.
      WEIGHT=0.
      ITYP=-1
      RETURN
C
C  ERROR MESSAGES FROM SUBR. REFLEC
C
991   CONTINUE
      WRITE (iunout,*) 'ERROR IN SUBR. REFLEC '
      MSS=MSURF
      IF (MSS.GT.NLIM) MSS=-(MSURF-NLIM)
      WRITE (iunout,*) 'MSURF = ',MSS
      WRITE (iunout,*) 'E0TERM=0 '
      WRITE (iunout,*) 'STOP HISTORY NO. NPANU= ',NPANU
      GOTO 999
C
992   CONTINUE
      WRITE (iunout,*) 'ERROR IN SUBR. REFLEC '
      MSS=MSURF
      IF (MSS.GT.NLIM) MSS=-(MSURF-NLIM)
      WRITE (iunout,*) 'MSURF = ',MSS
      WRITE (iunout,*) 'IGASF, IGAST ?? '
      WRITE (iunout,*) 'STOP HISTORY NO. NPANU= ',NPANU
      GOTO 999
c
993   CONTINUE
      WRITE (iunout,*) 'ERROR IN SUBR. REFLEC '
      MSS=MSURF
      IF (MSS.GT.NLIM) MSS=-(MSURF-NLIM)
      WRITE (iunout,*) 'MSURF = ',MSS
      WRITE (iunout,*) 'COSIN.LT.0. ', COSIN
      WRITE (iunout,*) 'STOP HISTORY NO. NPANU= ',NPANU
      GOTO 999
C
999   IF (NLTRC)  CALL CHCTRC(X0,Y0,Z0,16,18)
      LGPART=.FALSE.
      WEIGHT=0.
      RETURN
C
      END
C ===== SOURCE: sheath.f
C
C
      FUNCTION SHEATH(TE,DPP,VP,NZP,GAMMA,CUR,NP,MS)

C  JAN.93: NEW VERSION, NOW CORRECTLY ACCOUNTING
C          FOR MULTISPECIES PLASMA BACKGROUND
C  SHEATH POTENTIAL -E*DPHI (EV) FOR AN NP COMPONENT
C  PLASMA AS FUNCTION OF:
C  TE ELECTRON TEMPERATUR (EV)
C  DP(J),J=1,NP  BULK ION DENSITIES (#/CM**3)
C  VP(J),J=1,NP  BULK ION DRIFT VELOCITIES (CM/SEC)
C                COMPONENT PARALLEL TO MAGNETIC FIELD B
C                (ASSUME: MOBILITY OF ELECTRONS MUCH LARGER
C                 THAN OF IONS, AND ELECTRONS OBEY A
C                 MAXWELL-BOLTZMANN DISTRIBUTION
C  NZP(J),J+1,NP CHARGE NUMBERS OF BULK IONS
C  GAMMA         SECONDARY ELECTRON EMISSION COEF.
C                SHEATH VOLTAGE
C                "SHEATH" DECREASES WITH INCREASING GAMMA
C  CUR           NET ELECTR. CURRENT DENSITY OF BULK PLASMA TO TARGET
C                CUR=(J-ION) - (J-ELECTR.) (AMP/CM**2)
C                "SHEATH" DECREASES FOR NEGATIVE CURRENTS, AND
C                         INCREASES FOR POSITIVE CURRENTS
C
      USE PRECISION
      USE PARMMOD
      USE CCONA
      USE COMPRT, ONLY: IUNOUT

      IMPLICIT NONE

      REAL(DP), INTENT(IN) :: DPP(*),VP(*), TE, GAMMA, CUR
      INTEGER, INTENT(IN) :: NZP(*), NP, MS
      REAL(DP) :: SUM, DE, CE, SHEATH
      INTEGER :: J, I, MSS, ICOUNT

      SAVE ICOUNT
      DATA ICOUNT/0/
C
      SHEATH=0.
      DE=0.
      DO 10 J=1,NP
        DE=DE+DPP(J)*NZP(J)
10    CONTINUE
      DE=DE+EPS60
C  UNITS OF SUM: VELOCITY (CM/SEC)
      SUM=0.
      DO 100 J=1,NP
        SUM=SUM+NZP(J)*DPP(J)/DE*VP(J)
100   CONTINUE
      CE=CVEL2A*SQRT(TE/PMASSE)
      SUM=1./CE*SQRT(PI2A)/(1.-GAMMA)*(SUM-CUR/ELCHA/DE)
      IF (SUM.GT.0.D0) THEN
        SHEATH=-TE*LOG(SUM)
      ELSEIF (ICOUNT.LE.10) THEN
        MSS=MS
        IF (MSS.GT.NLIM) MSS=-(MSS-NLIM)
        WRITE (iunout,*) 'WARNING FROM FCT. SHEATH: INVALID ARGUMENTS '
        WRITE (iunout,*) 'NP,NZP,DPP,VP ',NP
        WRITE (iunout,*) 'SHEATH RETURNED FOR SURFACE ', MSS,': 2.8*TE'
        DO I=1,NP
          WRITE (iunout,*) I,NZP(I),DPP(I),VP(I)
        ENDDO
        WRITE (iunout,*) 'SUM ',SUM
        ICOUNT=ICOUNT+1
        SHEATH = 2.8*TE
      ELSE
        SHEATH = 2.8*TE
      ENDIF
      RETURN
      END
C ===== SOURCE: sputer.f
c
c june 05:  new: modchm=6: Haasz/Davis 1998 formula (no flx. dep)
c           new: modchm=7: Haasz/Davis 1998 formula with flux. dep
c           user sputer model: modpys/modchm=9 (was: =3)
c
c           merging of flx. dep A6/A7 in roth formula form chem. sput. removed a
c           now modchm=2 is back to "flux dep option A6" (Roth) (as it already
c           was the case in all eirene version up to 2004)
c           modchm=3 is the "flux dep option A7" (Roth, 1999)
c           modchm=4 is the "flux dep option A8" (Roth, Nucl.Fus 44 (2004) L21-L
c
c
C cvs repository jan.05  bug fix, ispz--> ispz+nsph in several places,
C                        due to photon species offset nsph
C cvs repository sept.04
C
C phys sputtering:
C still to be done:
C new formula and fitting parameters (file SPUTER_2001):
C Eckstein, 2001, ATOMIC AND PLASMA-MATERIAL INTERACTION DATA FOR FUSION,
C VOL 7B, IAEA 2001, P18 ff
C Current phys. sputter model file is SPUTER_1993, ref. see below
C
C chem sputtering:
C roth formula, revisions in aug.04 (no change in results):
C
C test integration over gaussian Etherm, as in original roth-routine 1998.
C test q=0.1 for D on C, as in original roth paper psi98 and in "warrier code"
C (this appears in 2 places !!)
C      Comp. Phys. Communic. 160 (2004) 46
C      Data file "SPUTER", stream 33, has q=0.08 for D on C
C      (seems to be more recent than phys. sputter data quoted by Roth 1998,
C       so we use this q=0.08 here)
C
C jan 05: (E.Tsitrone)
C test flux dependence, two expressions for low and high flux, A6 and A7, loc.ci
C and connect both to provide smooth dependence as ftc. of flux,
C now same as in Warrier code and in E.Tsitrone's code
C
C june 05: connecting the flux dep. A6 and A7 removed again.
C          keep again as independent options for flx dep. sputtering yield
C          as in all previous versions (and as in Roth's original code).
C
C sept 05: use database name for opening SPUTER database
c may 06:  modifications for: photons do not sputter !

      SUBROUTINE SPUTER
C
C  GIVEN A PARTICLE: E0,VELX,VELY,VELZ,   HITS A SURFACE
C  MSURF, CRTX,CRTY,CRTZ (NORMAL UNIT VECTOR AT POINT OF
C  INCIDENCE) THEN THIS ROUTINE RETURNS DATA FOR THE
C  A) PHYSICAL SPUTTERED PARTICLE  (YIELD=YIELD1)
C  B) CHEMICALLY ERODED  PARTICLE  (YIELD=YIELD2)
C
C
C  ENTRY SPUTR0:  INITIALIZE ARRAYS
C  ENTRY SPUTR1:  CARRY OUT SPUTTERING (CALLED FROM LOCATE AND ESCAPE)
C
C  INPUT:
C    STREAM FORT.33: FILE SPUTER
C
C    WMIN:  NOT IN USE
C    FMASS: MASS NUMBER OF PROJECTILE
C    FCHAR: NUCLEAR CHARGE NUMBER OF PROJECTILE
C    FLXSP: INCIDENT FLUX (FOR FLUX DEP. CHEM.YIELD) #/CM^2/S
C    ISPZ : SPECIES INDEX OF PROJECTILE
C    MSURF : SURFACE NUMBER, needed for surface flags:
C    COSIN : CRTX*VELX+CRTY*VELY+CRTZ*VELZ
C            recys(ispz,msurf)
C            recyc(ispz,msurf)
C            itsput(1,msurf) = MODPYS
C                 MODPYS = 0:  NO PHYS. SPUTTERING (DEFAULT)
C                 MODPYS = 1:  CONSTANT YIELD: RECYCS
C                 MODPYS = 2:  ROTH/BOHDANSKY/ECKSTEIN MODEL:
C                              "REVISED BOHDANSKY FORMULAR",
C                              ECKSTEIN, W., et.al., IPP 9/117 (Garching, 1993)
C                              FITTING PARAMETERS READ FROM FILE "sputer",
C                              STREAM 33, LOC.CIT.
C                 MODPYS = 9:  USER SUPPLIED SPUTTER MODEL, CALL SPTUSR
C
C            itsput(2,msurf) = MODCHM
C                 MODCHM = 0:  NO CHEM. SPUTTERING (DEFAULT)
C                 MODCHM = 1:  CONSTANT YIELD: RECYCC
C                 MODCHM = 2:  ROTH FORMULA, PSI 1998, SAN DIEGO
C                              J.ROTH, J.NUCL.MAT 266-269 (1999) 51-57
C                              FLUX DEP. OPTION A6
C                 MODCHM = 6:  HAASZ/DAVIS FORMULA w/o flux dep.
C                 MODCHM = 7:  HAASZ/DAVIS FORMULA with flux dep.
C                 MODCHM = 9:  USER SUPPLIED SPUTTER MODEL, CALL SPTUSR
C            EWALL(MSURF)= ENWALL
C    IGASP: SPECIES INDEX FLAG FOR PHYS. SPUTTERED PARTICLE
C    IGASC: SPECIES INDEX FLAG FOR CHEM. SPUTTERED PARTICLE
C  OUTPUT:
C      YIELD1: THE PHYSICAL SPUTTERING YIELD PER INCIDENT PARTICLE
C      YIELD2: THE CHEMICAL SPUTTERING YIELD PER INCIDENT PARTICLE
C      ISPZP: SPECIES INDEX ISPZ OF PHYSICALLY SPUTTERED PARTICLE
C      ISPZC: SPECIES INDEX ISPZ OF CHEMICALLY SPUTTERED PARTICLE
C    ESPTP: ENERGY OF PHYS. SPUTTERED PARTICLE
C    VSPTP: VELOCITY OF PHYS. SPUTTERED PARTICLE
C    VXSPTP:
C    VYSPTP:   UNIT SPEED VECTOR OF PHYS. SPUTTERED PARTICLE
C    VZSPTP:
C    ESPTC: ENERGY OF CHEM. SPUTTERED PARTICLE
C    VSPTC: VELOCITY OF CHEM. SPUTTERED PARTICLE
C    VXSPTC:
C    VYSPTC:   UNIT SPEED VECTOR OF CHEM. SPUTTERED PARTICLE
C    VZSPTC:
C
      USE PRECISION
      USE PARMMOD
      USE COMUSR
      USE CADGEO
      USE CCONA
      USE CRAND
      USE CZT1
      USE CTRCEI
      USE COMPRT
      USE CLGIN
      USE CINIT
      USE CPES

      IMPLICIT NONE

      REAL(DP), INTENT(IN) :: WMIN, FMASS, FCHAR, FLXSP
      REAL(DP), INTENT(OUT) :: YIELD1, YIELD2, ESPTC, VSPTC, ESPTP,
     .                         VSPTP, VXSPTP, VYSPTP, VZSPTP,
     .                         VXSPTC, VYSPTC, VZSPTC
      INTEGER, INTENT(IN) :: IGASC, IGASP
      INTEGER, INTENT(OUT) :: ISPZC, ISPZP
C
C  DATA FOR PHYSICAL SPUTTERING: IDENTIFY TARGET-PROJECTIL
      REAL(DP), SAVE :: ETH(28,11),Q(28,11),M2M1(28,11),ES(28)
      REAL(DP), SAVE :: D(3),EDAM(3),EDES(3)
      REAL(DP) :: RSQDV, CVRSS, RT, FTHOMP, VX, UB, GAMMA, EMAX,
     .          F1, F2, F3, SQE, QQP, ANGFAC, CAOPT, F, VY, VZ, YDES,
     .          EDESE0, EDAME0, QSE, YDAM, YSURF, ETHERM, ETHEKT,
     .          PRFCC, FLX, G2, G3, YTHERM, ERELKT, C, EREL,
     .          ENWALL, TWALL, PRFCS, ETHE0, E0ETF, SE, COSIN, QQS
      REAL(DP), EXTERNAL :: RANF_EIRENE
      INTEGER, SAVE :: ETF(28,11)
      INTEGER, SAVE :: NPROJ(11),NTARG(28),NTAMU(28)
      INTEGER, ALLOCATABLE, SAVE :: IPROJ(:),IPROJS(:),ITARG(:),
     .                              ISPZSP_DEF(:)
      INTEGER :: MS, ITYPP, IATMP, IATMC, MSS, IMOLC, ITYPC,
     .           I28, I11, IT, MODCHM, IPS, IPR,
     .           MODPYS, IIO, IPL, ILIM, ISP, IAT, IP, ISTSI, ISURF,
     .           ITA, NT, IA, NA, IFILE
      integer :: isam
      real(dp) :: wg(5),pm(5),final,flxlim
      real(dp) :: YHAASZ97M, YHAASZ97
      CHARACTER(20), SAVE :: TTARG(28)
      CHARACTER(8) :: TEXT

      DATA NPROJ/1,2,3,4,12,16,0,20,40,84,131/
      DATA NTARG/703,904,1105,1206,2713,2814,4822,5123,
     .           5224,5525,5626,5927,5928,6429,7031,7332,
     .           9140,9341,9642,10646,10847,11549,18173,
     .           18474,19578,19779,20782,23892/
      DATA TTARG/'LITHIUM             ', 'BERYLLIUM           ',
     .           'BOR                 ', 'GRAPHITE            ',
     .           'ALUMINIUM           ', 'SILIZIUM            ',
     .           'TITANIUM            ', 'VANADIUM            ',
     .           'CHROMIUM            ', 'MANGANESE           ',
     .           'IRON                ', 'COBALT              ',
     .           'NICKEL              ', 'COPPER              ',
     .           'GALLIUM             ', 'GERMANIUM           ',
     .           'ZIRCONIUM           ', 'NIOBIUM             ',
     .           'MOLYBDENUM          ', 'PALADIUM            ',
     .           'SILVER              ', 'INDIUM              ',
     .           'TANTALUM            ', 'TUNGSTEN            ',
     .           'PLATINUM            ', 'GOLD                ',
     .           'LEAD                ', 'URANIUM             '/
C  CHEMICAL EROSION DATA
      DATA D /250.,125.,83./
      DATA EDAM /15.,15.,15./
      DATA EDES /2.,2.,2./
C  PURE CARBON
      DATA EREL /1.8/
C  SI,TI,W DOPED CARBON
C     DATA EREL /1.5/
C  B DOPED CARBON
C     DATA EREL /1.2/
C
      ENTRY SPUTR0
C
C  INITIALIZE SPUTER OPTION MODPYS=2
C
      IF (MY_PE == 0) THEN
        DO IFILE=1, NDBNAMES
          IF (INDEX(DBHANDLE(IFILE),'SPUTER') /= 0) EXIT
        END DO

        IF (IFILE > NDBNAMES) THEN
          WRITE (IUNOUT,*) ' NO DATABASENAME FOR SPUTTERING DEFINED '
          WRITE (IUNOUT,*) ' CALCULATION ABANDONNED '
          CALL EXIT_OWN(1)
        END IF

        OPEN (UNIT=33,FILE=DBFNAME(IFILE))
        READ(33,*)
        READ(33,*)
        READ(33,*)
        READ(33,*)
        READ(33,*)
        READ(33,*)
        READ(33,*)
        DO I28=1,28
          READ(33,*)
          READ(33,*)
          READ(33,'(4X,E5.2)') ES(I28)
          READ(33,'(12X,11(E8.2,1X))') (M2M1(I28,I11),I11=1,11)
          READ(33,'(12X,11(I8,  1X))') (ETF(I28,I11),I11=1,11)
          READ(33,'(12X,11(E8.2,1X))') (ETH(I28,I11),I11=1,11)
          READ(33,'(12X,11(E8.2,1X))') (Q(I28,I11),I11=1,11)
        ENDDO
        CLOSE (UNIT=33)
      END IF

      if (nprs > 1) call broadsput(es,m2m1,etf,eth,q,28,11)

C  ASSIGN SPUTER DATA TO EIRENE PROJECTILE-TARGET COMBINATIONS
C  FOR THIS PARTICULAR RUN
C
C  SELF SPUTTERING: IDENTIFY TARGET ATOMIC MASS NUMBER
      DO IT=1,28
        NTAMU(IT)=NTARG(IT)/100
      ENDDO
C
      IF (.NOT.ALLOCATED(IPROJ)) THEN
        ALLOCATE (IPROJ(NSPZ))
        ALLOCATE (IPROJS(NSPZ))
        ALLOCATE (ITARG(NLIMPS))
        ALLOCATE (ISPZSP_DEF(NLIMPS))
      END IF

C  SPUTTERING BY PHOTONS
      DO 1 ISP=1,NSPH
        IPROJ(ISP)=0
        IPROJS(ISP)=0
1     CONTINUE
C
C  SPUTTERING BY ATOMS
      DO 10 ISP=NSPH+1,NSPA
        IAT=ISP-NSPH
        IPROJ(ISP)=0
        IPROJS(ISP)=0
        DO IP=1,11
          IF (NMASSA(IAT).EQ.NPROJ(IP)) IPROJ(ISP)=IP
        ENDDO
C  ANY TARGET DATA FOR SELF SPUTTERING WITH IAT?
        DO IT=1,28
          IF (NMASSA(IAT).EQ.NTAMU(IT)) IPROJS(ISP)=IT
        ENDDO
10    CONTINUE
C
C  SPUTTERING BY MOLECULES
      DO 20 ISP=NSPA+1,NSPAM
        IPROJ(ISP)=0
        IPROJS(ISP)=0
20    CONTINUE
C
C  SPUTTERING BY TEST IONS
      DO 30 ISP=NSPAM+1,NSPAMI
        IIO=ISP-NSPAM
        IPROJ(ISP)=0
        IPROJS(ISP)=0
C  TEST: MOLECULAR OR ATOMIC ION?
        IF (NPRT(ISP).NE.1) GOTO 30
        DO IP=1,11
          IF (NMASSI(IIO).EQ.NPROJ(IP)) IPROJ(ISP)=IP
        ENDDO
C  ANY TARGET DATA FOR SELF SPUTTERING WITH IIO?
        DO IT=1,28
          IF (NMASSI(IIO).EQ.NTAMU(IT)) IPROJS(ISP)=IT
        ENDDO
30    CONTINUE
C
C  SPUTTERING BY BULK IONS
      DO 40 ISP=NSPAMI+1,NSPTOT
        IPL=ISP-NSPAMI
        IPROJ(ISP)=0
        IPROJS(ISP)=0
C  TEST: MOLECULAR OR ATOMIC ION?
        IF (NPRT(ISP).NE.1) GOTO 40
        DO IP=1,11
          IF (NMASSP(IPL).EQ.NPROJ(IP))
     .    IPROJ(ISP)=IP
        ENDDO
C  ANY TARGET DATA FOR SELF SPUTTERING WITH IPL?
        DO IT=1,28
          IF (NMASSP(IPL).EQ.NTAMU(IT))
     .    IPROJS(ISP)=IT
        ENDDO
40    CONTINUE

      ITARG=0
      ISPZSP_DEF=0
      DO ILIM=1,NLIMI
        NT=100.*ZNML(ILIM)+ZNCL(ILIM)+EPS10
        ITARG(ILIM)=0
        DO IT=1,28
          IF (NT.EQ.NTARG(IT)) ITARG(ILIM)=IT
        ENDDO
        DO IA=1,NATMI
          NA=100*NMASSA(IA)+NCHARA(IA)
          IF (NT.EQ.NA) ISPZSP_DEF(ILIM)=IA
        ENDDO
      ENDDO
      DO ILIM=NLIM+1,NLIM+NSTSI
        NT=100.*ZNML(ILIM)+ZNCL(ILIM)+EPS10
        ITARG(ILIM)=0
        DO IT=1,28
          IF (NT.EQ.NTARG(IT)) ITARG(ILIM)=IT
        ENDDO
        DO IA=1,NATMI
          NA=100*NMASSA(IA)+NCHARA(IA)
          IF (NT.EQ.NA) ISPZSP_DEF(ILIM)=IA
        ENDDO
      ENDDO
C
      IF (TRCREF) THEN
        WRITE (iunout,*) 
     .    'PRINTOUT FROM SUBR. SPUTER, AFTER INITIALISATION'
C
        WRITE (iunout,*)
        WRITE (iunout,*) 'ISPZ,IPROJ(ISPZ),IPROJS(ISPZ)'
        DO ISP=1,NSPTOT
          WRITE (iunout,*) TEXTS(ISP),IPROJ(ISP),IPROJS(ISP)
        ENDDO
        WRITE (iunout,*)
        WRITE (iunout,*) 
     .    'SURFACE NUMBER, TARGET MATERIAL, SPUTTERED ATOM'
        DO ILIM=1,NLIMI
          IF (ILIIN(ILIM).LE.0) THEN
            WRITE (iunout,*) ILIM, ' TRANSPARENT SURFACE '
          ELSEIF (ILIIN(ILIM).GE.3) THEN
            WRITE (iunout,*) ILIM, ' PERIODICITY- OR MIRROR SURFACE '
          ELSEIF (IGJUM0(ILIM).EQ.1) THEN
            WRITE(iunout,*) ILIM, ' SURFACE OUT '
          ELSEIF (ITARG(ILIM).GT.0.AND.ITARG(ILIM).LE.28) THEN
            WRITE(iunout,*) ILIM,' ',TTARG(ITARG(ILIM)),ISPZSP_DEF(ILIM)
          ELSE
            WRITE(iunout,*) ILIM, ' TARGET MATERIAL NOT IDENTIFIED '
          ENDIF
        ENDDO
        DO ISTSI=1,NSTSI
          ISURF=NLIM+ISTSI
          IF (ILIIN(ISURF).LE.0) THEN
            WRITE(iunout,*) -ISTSI,' TRANSPARENT SURFACE '
          ELSEIF (ILIIN(ISURF).GE.3) THEN
            WRITE(iunout,*) -ISTSI,' PERIODICITY- OR MIRROR SURFACE '
          ELSEIF (ITARG(ISURF).GT.0.AND.ITARG(ISURF).LE.28) THEN
            WRITE(iunout,*) -ISTSI,' ',TTARG(ITARG(ISURF)),
     .                      ISPZSP_DEF(ISURF)
          ELSE
            WRITE(iunout,*) -ISTSI,' TARGET MATERIAL NOT IDENTIFIED '
          ENDIF
        ENDDO
        WRITE (iunout,*)
C       DO I28=1,28
C         DO I11=1,11
C           WRITE (iunout,*) NTARG(I28),NPROJ(I11)
C           WRITE (iunout,*) 'ES   ',ES(I28)
C           WRITE (iunout,*) 'M2M1 ',M2M1(I28,I11)
C           WRITE (iunout,*) 'ETF  ',ETF(I28,I11)
C           WRITE (iunout,*) 'ETH  ',ETH(I28,I11)
C           WRITE (iunout,*) 'Q    ',Q(I28,I11)
C           WRITE (iunout,*)
C         ENDDO
C       ENDDO
      ENDIF
C
      CALL SP0USR
C
      RETURN
C
      ENTRY SPUTR1(WMIN,FMASS,FCHAR,FLXSP,
     .             IGASP,
     .             YIELD1,
     .             ISPZP,ESPTP,VSPTP,VXSPTP,VYSPTP,VZSPTP,
     .             IGASC,
     .             YIELD2,
     .             ISPZC,ESPTC,VSPTC,VXSPTC,VYSPTC,VZSPTC)

C  TENTATIVELY ASSUME: NO SPUTTERED PARTICLES
      YIELD1=0.D0
      YIELD2=0.D0
      ISPZP=0
      ISPZC=0

C  CURRENTLY: PHOTONS DO NOT SPUTTER
      IF (ISPZ.LE.NSPH) RETURN
C
C
C  SURFACE NUMBER :  MSURF  (MSURF=0: DEFAULT MODEL)
C  SPECIES INDEX  :  ISPZ   (INCIDENT SPECIES)
C  IDENTIFY PROJECTILE AND TARGET
C
      ITA=ITARG(MSURF)
      IPS=IPROJS(ISPZ)
      IF (IPS.GT.0.AND.IPS.EQ.ITA) THEN
        IPR=7
      ELSE
        IPR=IPROJ(ISPZ)
      ENDIF
C
      MODPYS=ISPUT(1,MSURF)
      MODCHM=ISPUT(2,MSURF)
      ENWALL=EWALL(MSURF)
      IF (ENWALL.GT.0.D0) THEN
        TWALL=ENWALL*0.66667
      ELSE
        TWALL=-ENWALL
      ENDIF
      SE=0.D0
C
      COSIN=CRTX*VELX+CRTY*VELY+CRTZ*VELZ
      IF (COSIN.LE.0.D0) GOTO 999
C
C  NO PHYSICAL SPUTTERING?
C
      IF (MODPYS.LE.0) GOTO 5000
C
C  FIRST: PHYSICAL SPUTTERING AND SUBLIMATION
C
      IF (MODPYS.EQ.1) THEN
C
C  CONSTANT SPUTTER YIELD: RECYCS
        YIELD1=RECYCS(ISPZ,MSURF)
C  NO SUBLIMATION YIELD IN THIS MODEL:
        QQS=0.
C
      ELSEIF (MODPYS.EQ.2) THEN
C
C   ECKSTEIN/ROTH/BOHDANSKY/MODEL: IPP 9/82, FEB. 1993
C
        IF (IPR.GT.0.AND.ITA.GT.0) THEN
          PRFCS=RECYCS(ISPZ,MSURF)
C  NO SPUTTERING BELOW THRESHOLD
          IF (E0.LE.ETH(ITA,IPR).OR.PRFCS.LE.0.D0) GOTO 5000
          ETHE0=ETH(ITA,IPR)/E0
          E0ETF=E0/ETF(ITA,IPR)
          SQE=SQRT(E0ETF)
C  YIELD FACTOR FOR PHYS. SPUTTERING
          QQP=Q(ITA,IPR)
C  YIELD FACTOR FOR SUBLIMATION
          QQS=0.
c         IF (IFLAG.EQ.2) THEN
c           QQS=54.*FMASS**1.2*EXP(-0.78/TWALL)
c         ENDIF
          F1=(QQP+QQS)*(1.-ETHE0**0.666667)*(1.-ETHE0)*(1.-ETHE0)
c  replace Thomas-Fermi potential by Kr-C potential
c  Thomas-Fermi potential
c         F2=3.441*SQE*LOG(E0ETF+2.718)
c         F3=1.+6.355*SQE+E0ETF*(6.882*SQE-1.708)
c  Kr-C potential
          F2=0.5*LOG(1.+1.2288*E0ETF)
          F3=E0ETF+0.1728*SQE+0.008*E0ETF**0.1504
C
          SE=F2/F3
          YIELD1=F1*SE
          YIELD1=MAX(0._DP,YIELD1)*PRFCS
C INCIDENT ANGULAR DEPENDENCE OF YIELD: YAMAMURA FIT: LOC.CIT.,P 10
C MAXIMUM (ABOUT: 3.36) AT COSIN=0.26.
C ANGFAC -->0. FOR COSIN -->0.
C ANGFAC -->1. FOR COSIN -->1.
C         AOPT=75.
C         CAOPT=COS(AOPT*PIA/180.D0)
          CAOPT=0.26
          F=2.
          ANGFAC=COSIN**(-F)*EXP(F*(1.-1./COSIN)*CAOPT)
          YIELD1=YIELD1*ANGFAC
        ENDIF
C
      ELSEIF (MODPYS.EQ.9) THEN
C  USER SUPPLIED SPUTER MODEL
        CALL SP1USR
C
      ENDIF
C
C  FIND TYPE AND SPECIES INDEX OF SPUTTERED PARTICLE
C  ONLY ATOMS
C
      IF (YIELD1.GT.0.D0) THEN
        IF (IGASP.GT.0.AND.IGASP.LE.NATMI) THEN
          ITYPP=1
          IATMP=IGASP
          ISPZP=IATMP+NSPH
        ELSEIF (IGASP.GT.NATMI) THEN
          WRITE (iunout,*) 'ERROR: ISPZP OUT OF RANGE IN SPUTER ?'
          ISPZP=0
          GOTO 5000
        ELSEIF (IGASP.LT.0) THEN
C  DEFAULT: TRY TO FIND SPECIES INDEX OF SPUTTERED PARTICLE AUTOMATICALLY
          ISPZP=ISPZSP_DEF(MSURF)
          IF (ISPZP.LE.0) THEN
            MS=MSURF
            IF (MSURF.GT.NLIM) MS=-(MSURF-NLIM)
            WRITE (iunout,*) 'WARNING FROM SPUTER '
            WRITE (iunout,*) 'SPECIES INDEX, PHYS. SPUTER ? MSURF ',MS
            ISPZP=0
            GOTO 5000
          ENDIF
          ITYPP=1
          IATMP=ISPZP
          ISPZP=IATMP+NSPH
        ELSE
C  IGASP=0 :
C  RETURN ONLY SPUTTER YIELD, NOT THE COORDINATES OF SPUTTERED PARTICLE
          ISPZP=0
          GOTO 5000
        ENDIF
      ELSE
        GOTO 5000
      ENDIF
C
C  SAMPLE ENERGY FROM THOMPSON DISTRIBUTION IN CASE OF PHYS. SPUTTERING
C  USE ENERGY AND ANGULAR DISTRIBUTION SAME AS FOR CHEMICAL SPUTTERING
C  IN CASE OF RADIATION ENHANCED SUBLIMATION
C
      IF (QQS.GT.0.D0) THEN
        RT=QQS/(QQS+QQP)
        IF (RANF_EIRENE( ).LE.RT) THEN
          RSQDV=RSQDVA(IATMP)
          CVRSS=CVRSSA(IATMP)
          ESPTP=ENWALL
          GOTO 1000
        ENDIF
      ENDIF
C
C  COMPUTE SURFACE BINDING ENERGY U0(IFLAG) FROM ETH(IFLAG) FOR THOMPSON
C  DISTRIBUTION
C
      GAMMA=4.*FMASS*ZNML(MSURF)/(FMASS+ZNML(MSURF))**2
      EMAX=GAMMA*E0
      UB=ES(ITA)
      ESPTP=FTHOMP(UB,EMAX)
      RSQDV=RSQDVA(IATMP)
      GOTO 1000
C
C  ANGULAR DISTRIBUTIONS
C
1000  CONTINUE
C
      IF (ESPTP.LE.0.D0) GOTO 1100
C
      VSPTP=RSQDV*SQRT(ESPTP)
C
C  SAMPLE SPEED VECTOR FROM COSINE
C
      IF (INIV4.LE.0) CALL FCOSIN
      VX=FC1(INIV4)
      VY=FC2(INIV4)
      VZ=FC3(INIV4)
      INIV4=INIV4-1
      CALL ROTATF (VXSPTP,VYSPTP,VZSPTP,VX,VY,VZ,CRTX,CRTY,CRTZ)
      GOTO 5000
C
1100  CONTINUE
C  SAMPLE FROM MAXWELLIAN FLUX AROUND INNER (!) NORMAL AT TEMP. TW (EV)
      CALL VELOCS (TWALL,0._DP,0._DP,0._DP,0._DP,0._DP,RSQDV,CVRSS,
     .             -CRTX,-CRTY,-CRTZ,
     .             ESPTP,VXSPTP,VYSPTP,VZSPTP,VSPTP)
C
2000  CONTINUE
C
C   PHYSICAL SPUTTERING DONE
C
C   CHEMICAL SPUTTERING, REEMITTED PARTICLES ARE COSINE DISTRIBUTED AND
C   THERMAL
C
5000  CONTINUE
C
C  NO CHEMICAL SPUTTERING?
C
      IF (MODCHM.LE.0) RETURN
C
      SELECT CASE (MODCHM)

      CASE(1)
C  CONSTANT SPUTTER YIELD: RECYCS
C  IS INCIDENT PARTICLE "HYDROGENIC" AND "ATOMIC"?
C  IS TARGET SURFACE CARBON?
C
        IF (IPR.GT.0.AND.IPR.LE.3.AND.ITA.EQ.4) THEN
          YIELD2=RECYCC(ISPZ,MSURF)
        ELSE
C  NO CHEM. SPUTTERING DATA FOR THIS TARGET-PROJECTILE COMBINATION
          GOTO 20000
        ENDIF
C
      CASE(2,3,4)
C
C   ROTH/PACHER MODEL: PSI 1998, SAN DIEGO (J.NUCL.MAT)
C
        IF (IPR.GT.0.AND.IPR.LE.3.AND.ITA.EQ.4) THEN
C  FLXSP IS IN #/CM^2/S. CONVERT TO #/M^2/S
          FLX=FLXSP*1.D4
          FLX=MAX(1.E4_DP,FLX)
C
          PRFCC=RECYCC(ISPZ,MSURF)
C  TO BE WRITTEN
C    ROTH, J.NUCL.MAT 99: SAMPLE ETHERM FROM GAUSSIAN, MEAN: 1.7, SIGMA 0.3
C  THIS PRESENT IMPLEMENTATION:
C    ROTH, NUCL.FUS. 96 (P1647): USE ONLY THE MEAN OF ETHERM
cdr june 2004:
cdr test integration expression from original roth-code
cdr       pm(1)=1.865
cdr       pm(2)=1.7
cdr       pm(3)=1.535
cdr       pm(4)=1.38
cdr       pm(5)=1.26
cdr       wg(1)=1./4.5
cdr       wg(2)=1./4.5
cdr       wg(3)=1./4.5
cdr       wg(4)=1./9.
cdr       wg(5)=1./9.
cdr       final=0.
cdr       do 6000 isam=1,5
cdr
cdr no, take only mean value pm=1.7, same as e.g. in
cdr all older eirene versions and warrier-code
          pm(2)=1.7
          wg(2)=1.
          isam=2
          final=0.
cdr
          ETHERM=pm(isam)
          ETHEKT=EXP(-ETHERM/TWALL)
C
          ERELKT=EXP(-EREL/TWALL)

cdr  continuous merging of option A6 and A7, as in Warrier code. Out!
cdr        FLXLIM=1.D30*EXP(-1.4/TWALL)
cdr        IF (FLX.LE.FLXLIM) THEN ! A6,  else: A7

C  EXPRESSION A.6 FOR C, WEAK-FLUX DEPENDENCE
            IF (MODCHM.EQ.2) C=1._DP/(1._DP+3.E7_DP*EXP(-1.4_DP/TWALL))
C  EXPRESSION A.7 FOR C, STRONG-FLUX DEPENDENCE
            IF (MODCHM.EQ.3) C=1._DP/(1._DP+3.E-23_DP*FLX)
C  EXPRESSION A.8 FOR C, new FLUX DEPENDENCE, roth, itpa 2003 st. petersburg
            IF (MODCHM.EQ.4) C=1._DP/(1._DP+(1.67E-22_DP*FLX)**0.54)
cdr       ENDIF
C
          G2=2.D-32*FLX+ETHEKT
          G3=2.D-32*FLX+(1._DP+2.D+29/FLX*ERELKT)*ETHEKT
          YTHERM=C/G3*0.033_DP*ETHEKT
          IF (SE.GT.0.) THEN
cdr in warrier code: qqp=0.1, for D on C
cdr         qqp=0.1
cdr
            QSE=QQP*SE
          ELSE
c  Kr-C potential
            E0ETF=E0/ETF(ITA,IPR)
            SQE=SQRT(E0ETF)
            QQP=Q(ITA,IPR)
            F2=0.5_DP*LOG(1._DP+1.2288_DP*E0ETF)
            F3=E0ETF+0.1728_DP*SQE+0.008_DP*E0ETF**0.1504_DP
            SE=F2/F3
cdr in warrier code: qqp=0.1, for D on C
cdr         qqp=0.1
cdr
            QSE=QQP*SE
          ENDIF
c
          YDAM=0.
          IF (E0.GE.EDAM(IPR)) THEN
            EDAME0=EDAM(IPR)/E0
            YDAM=QSE*(1._DP-EDAME0**0.666667_DP)*
     .               (1._DP-EDAME0)*(1._DP-EDAME0)
           ENDIF
C
          YDES=0.
          IF (E0.GE.EDES(IPR)) THEN
            EDESE0=EDES(IPR)/E0
            YDES=QSE*(1._DP-EDESE0**0.666667_DP)*
     .               (1._DP-EDESE0)*(1._DP-EDESE0)
          ENDIF
C
          YSURF=0._DP
          IF (E0 < 1000._DP) YSURF=C*G2/G3*YDES/
     .                             (1._DP+EXP((E0-65._DP)/40._DP))
          YIELD2=YTHERM*(1._DP+D(IPR)*YDAM)+YSURF
          YIELD2=MAX(0._DP,YIELD2)*PRFCC
cdr
          final=final+yield2*wg(isam)
cdr
6000      continue
          yield2=final
cdr
        ELSE
C  NO CHEM. SPUTTERING DATA FOR THIS TARGET-PROJECTILE COMBINATION
          GOTO 20000
        ENDIF
C
      CASE(6)
C  Haasz-Davis formula, 1998
         yield2=yhaasz97m(e0,twall)
      CASE(7)
C  Haasz-Davis formula, 1998, with flx. dep from Roth, Nucl.Fus 2004
         C=1._DP/(1._DP+(1.67E-22_DP*FLX)**0.54)
         yield2=C * yhaasz97m(e0,twall)
      CASE(9)
C  USER SUPPLIED SPUTER MODEL
        CALL SP1USR
      CASE DEFAULT
        write (iunout,*) 'error in sputer.f. modchm ?? ',modchm
        call exit_own(1)
      END SELECT
C
C  FIND TYPE AND SPECIES OF CHEM. SPUTTERED MOLECULE
C  ATOMS OR MOLECULES
C
      IF (YIELD2.GT.0.D0) THEN
        IF (IGASC.GT.0.AND.IGASC.LE.NATMI+NMOLI) THEN
          ISPZC=IGASC
          IF (ISPZC.GT.NATMI) THEN
            ITYPC=2
            IMOLC=IGASC-NATMI
          ELSE
            ITYPC=1
            IATMC=IGASC
          ENDIF
          ISPZC=ISPZC+NSPH
        ELSEIF (IGASC.GT.NATMI+NMOLI) THEN
          WRITE (iunout,*) 'ERROR: ISPZC OUT OF RANGE IN SPUTER ?'
          ISPZC=0
          GOTO 20000
        ELSEIF (IGASC.LT.0) THEN
C  DEFAULT: TRY TO FIND SPECIES INDEX OF SPUTTERED PARTICLE AUTOMATICALLY
          ISPZC=ISPZSP_DEF(MSURF)
          IF (ISPZC.LE.0) THEN
            MS=MSURF
            IF (MSURF.GT.NLIM) MS=-(MSURF-NLIM)
            WRITE (iunout,*) 'WARNING FROM SPUTER '
            WRITE (iunout,*) 'SPECIES INDEX, CHEM. SPUTER ? MSURF ',MS
            ISPZC=0
            GOTO 20000
          ENDIF
          ITYPC=1
          IATMC=ISPZC
          ISPZC=ISPZC+NSPH
        ELSE
C  IGASC=0 :
C  RETURN ONLY SPUTTER YIELD, NOT THE COORDINATES OF SPUTTERED PARTICLE
          ISPZC=0
          GOTO 20000
        ENDIF
      ELSE
        GOTO 20000
      ENDIF
C
      ESPTC=ENWALL
      IF (ITYPC.EQ.1) THEN
        RSQDV=RSQDVA(IATMC)
        CVRSS=CVRSSA(IATMC)
      ELSE
        RSQDV=RSQDVM(IMOLC)
        CVRSS=CVRSSM(IMOLC)
      ENDIF
C
C  ANGULAR DISTRIBUTIONS
C
10000 CONTINUE
C
      IF (ESPTC.LE.0.D0) GOTO 11000
C
      VSPTC=RSQDV*SQRT(ESPTC)
C
C  SAMPLE SPEED VECTOR FROM COSINE
C
      IF (INIV4.LE.0) CALL FCOSIN
      VX=FC1(INIV4)
      VY=FC2(INIV4)
      VZ=FC3(INIV4)
      INIV4=INIV4-1
      CALL ROTATF (VXSPTC,VYSPTC,VZSPTC,VX,VY,VZ,CRTX,CRTY,CRTZ)
      RETURN
C
11000 CONTINUE
C  SAMPLE FROM MAXWELLIAN FLUX AROUND INNER (!) NORMAL AT TEMP. TW (EV)
      CALL VELOCS (TWALL,0._DP,0._DP,0._DP,0._DP,0._DP,RSQDV,CVRSS,
     .             -CRTX,-CRTY,-CRTZ,
     .             ESPTC,VXSPTC,VYSPTC,VZSPTC,VSPTC)
C
20000 RETURN
C
999   CONTINUE
      WRITE (iunout,*) 'ERROR IN SUBR. SPUTER '
      MSS=MSURF
      IF (MSS.GT.NLIM) MSS=-(MSURF-NLIM)
      WRITE (iunout,*) 'MSURF = ',MSS
      WRITE (iunout,*) 'COSIN.LT.0. ', COSIN
      WRITE (iunout,*) 'DO NOT SPUTTER FOR PARTICLE NO. NPANU= ',NPANU
      RETURN
      END



      FUNCTION YHAASZ97(E0,TEMP_eV)
c  this is the haasz/davis chemical sputtering yield (1997).
c  program provided via Toronto group (p.c. stangeby/d. elder)
c  d.reiter: single--> double prec.
C
C  *********************************************************************
C  *                                                                   *
C  *  CHEMICAL SPUTTERING FROM Haasz's NEW DATA (February 1997)        *
C  *  - poly. fit: Y = a0 + a1*log(E) + a2*log(E)^2 + a3*log(E)^3      *
C  *  E0  (eV)       -  Ion or neutral incident energy                 *
C  *  TEMP (K)       -  Temperature at target or wall                  *
C  *  D.REITER: MODIFIED: TEMP_EV (EV)                                 *
C  *                                                                   *
C  *********************************************************************
C
      use precision
      IMPLICIT NONE

      REAL(DP), INTENT(IN) :: E0, TEMP_EV
      REAL(DP) ::TEMP
      REAL(DP) ::FITC300(4),FITC350(4),FITC400(4),FITC450(4),FITC500(4),
     >           FITC550(4),FITC600(4),FITC650(4),FITC700(4),FITC750(4),
     >           FITC800(4),FITC850(4),FITC900(4),FITC950(4),FITC1000(4)
      REAL(DP) :: POLY_C(4),YFIT,FITE0
      REAL(DP) :: YHAASZ97
      INTEGER I
C
C     Poly. fit c. /       a0,      a1,      a2,      a3
C
      DATA FITC300 / -0.03882, 0.07432,-0.03470, 0.00486/
      DATA FITC350 / -0.05185, 0.10126,-0.05065, 0.00797/
      DATA FITC400 / -0.06089, 0.12186,-0.06240, 0.01017/
      DATA FITC450 / -0.08065, 0.16884,-0.09224, 0.01625/
      DATA FITC500 / -0.08872, 0.19424,-0.10858, 0.01988/
      DATA FITC550 / -0.08728, 0.20002,-0.11420, 0.02230/
      DATA FITC600 / -0.05106, 0.13146,-0.07514, 0.01706/
      DATA FITC650 /  0.07373,-0.13263, 0.09571,-0.01672/
      DATA FITC700 /  0.02722,-0.03599, 0.02064, 0.00282/
      DATA FITC750 /  0.09052,-0.18253, 0.12362,-0.02109/
      DATA FITC800 /  0.02604,-0.05480, 0.04025,-0.00484/
      DATA FITC850 /  0.03478,-0.08537, 0.06883,-0.01404/
      DATA FITC900 /  0.02173,-0.06399, 0.05862,-0.01380/
      DATA FITC950 / -0.00086,-0.01858, 0.02897,-0.00829/
      DATA FITC1000/ -0.01551, 0.01359, 0.00600,-0.00353/
C
C in calling program (eirene), temp_EV is in eV
c convert to K
      TEMP=TEMP_EV*11604.
c
C Find right polynomial fit coefficients for a given temperature
C
c
      IF      (TEMP.LE.300.0) THEN
         DO I = 1,4
           POLY_C(I) = FITC300(I)
         ENDDO
      ELSE IF (TEMP.GT.300.0 .AND. TEMP.LE.350.0) THEN
         DO I = 1,4
           POLY_C(I) = FITC350(I)
         ENDDO
      ELSE IF (TEMP.GT.350.0 .AND. TEMP.LE.400.0) THEN
         DO I = 1,4
           POLY_C(I) = FITC400(I)
         ENDDO
      ELSE IF (TEMP.GT.400.0 .AND. TEMP.LE.450.0) THEN
         DO I = 1,4
           POLY_C(I) = FITC450(I)
         ENDDO
      ELSE IF (TEMP.GT.450.0 .AND. TEMP.LE.500.0) THEN
         DO I = 1,4
           POLY_C(I) = FITC500(I)
         ENDDO
      ELSE IF (TEMP.GT.500.0 .AND. TEMP.LE.550.0) THEN
         DO I = 1,4
           POLY_C(I) = FITC550(I)
         ENDDO
      ELSE IF (TEMP.GT.550.0 .AND. TEMP.LE.600.0) THEN
         DO I = 1,4
           POLY_C(I) = FITC600(I)
         ENDDO
      ELSE IF (TEMP.GT.600.0 .AND. TEMP.LE.650.0) THEN
         DO I = 1,4
           POLY_C(I) = FITC650(I)
         ENDDO
      ELSE IF (TEMP.GT.650.0 .AND. TEMP.LE.700.0) THEN
         DO I = 1,4
           POLY_C(I) = FITC700(I)
         ENDDO
      ELSE IF (TEMP.GT.700.0 .AND. TEMP.LE.750.0) THEN
         DO I = 1,4
           POLY_C(I) = FITC750(I)
         ENDDO
      ELSE IF (TEMP.GT.750.0 .AND. TEMP.LE.800.0) THEN
         DO I = 1,4
           POLY_C(I) = FITC800(I)
         ENDDO
      ELSE IF (TEMP.GT.800.0 .AND. TEMP.LE.850.0) THEN
         DO I = 1,4
           POLY_C(I) = FITC850(I)
         ENDDO
      ELSE IF (TEMP.GT.850.0 .AND. TEMP.LE.900.0) THEN
         DO I = 1,4
           POLY_C(I) = FITC900(I)
         ENDDO
      ELSE IF (TEMP.GT.900.0 .AND. TEMP.LE.950.0) THEN
         DO I = 1,4
           POLY_C(I) = FITC950(I)
         ENDDO
      ELSE IF (TEMP.GT.950.0) THEN
         DO I = 1,4
           POLY_C(I) = FITC1000(I)
         ENDDO
      ENDIF
C
C Calculate chemical yield according to the 3th poly. fit
C
      IF      (E0.LT.10.0)  THEN
         FITE0 = 10.
      ELSE IF (E0.GT.200.0) THEN
         FITE0 = 200.
      ELSE
         FITE0 = E0
      ENDIF
C
      YFIT = 0.0
      DO I = 1,4
        YFIT = YFIT + POLY_C(I)*LOG10(FITE0)**(I-1)
      ENDDO

      YHAASZ97 = YFIT

CW    WRITE(iunout,*) 'YHAASZ97 = ',YHAASZ97

      RETURN
      END
c
c
c
      FUNCTION YHAASZ97M(E0,TEMP_eV)
c  this is the haasz/davis chemical sputtering yield (1998).
c  program provided via Toronto group (p.c. stangeby/d. elder)
c  d.reiter: single--> double prec.
C
C  *********************************************************************
C  *                                                                   *
C  *  CHEMICAL SPUTTERING FROM Haasz's NEW DATA (February 1997)        *
C  *  - poly. fit: Y = a0 + a1*log(E) + a2*log(E)^2 + a3*log(E)^3      *
C  *  with the addition of a new fit below 10 eV as suggested by       *
C  *  J.Davis and parameterized by G. Porter; now interpolates between *
C  *  5 and 10 eV to lower value (YDAVIS98), and is fixed below 5 eV   *
C  *  E0  (eV)       -  Ion or neutral incident energy                 *
C  *  TEMP (K)       -  Temperature at target or wall                  *
C  *  D.REITER: MODIFIED: TEMP_EV (EV)                                 *
C  *                                                                   *
C  *********************************************************************
C
      use precision
      IMPLICIT NONE

      REAL(DP), INTENT(IN) :: E0, TEMP_EV
      real(dp) :: TEMP
      real(dp) :: YHAASZ97M, YDAVIS98, YHAASZ97
      real(dp) :: m1,m2,m3,reducf,FRAC

      DATA m1/602.39/, m2/202.24/, m3/43.561/, reducf/0.2/
C
C in calling program (eirene), TEMP_EV is in eV
c convert to K
      TEMP=TEMP_EV*11604.

      IF (E0 .GE. 10) THEN
         YHAASZ97M = YHAASZ97(E0,TEMP_eV)
      ELSEIF (E0 .LT. 10. .AND. E0 .GE. 5.) THEN
         FRAC = (E0-5.)/5.
         YDAVIS98 = reducf/(m2*((TEMP/m1)**2 - 1)**2 + m3)
         YHAASZ97M = FRAC*YHAASZ97(E0,TEMP_eV)+ (1.-FRAC)*YDAVIS98
      ELSEIF (E0 .LT. 5.) THEN
         YDAVIS98 = reducf/(m2*((TEMP/m1)**2 - 1)**2 + m3)
         YHAASZ97M = YDAVIS98
      ENDIF

      RETURN
      END
