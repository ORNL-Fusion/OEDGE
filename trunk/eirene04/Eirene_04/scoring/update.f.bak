C
C
      SUBROUTINE UPDATE
C
C ESTIMATORS ARE UPDATED FOR EACH TRACK TAKING T/VEL SEC.
C T (CM) IS STORED ON CLPD ARRAY FOR ONE OR MORE CELLS, THAT HAVE
C BEEN CROSSED WITHOUT COLLISION.
C
      USE PRECISION
      USE PARMMOD
      USE COMUSR
      USE CESTIM
      USE CUPD
      USE CGRID
      USE CSPEZ
      USE CGEOM
      USE COMPRT
      USE CSDVI
      USE COMXS
      USE PHOTON

      IMPLICIT NONE
C
      REAL(DP), INTENT(IN OUT) :: XSTOR2(MSTOR1,MSTOR2,N2ND+N3RD),
     .                            XSTORV2(NSTORV,N2ND+N3RD)
      INTEGER, INTENT(IN OUT) :: IFLAG
      REAL(DP) :: WTRSIG, DIST, WTR, WTRE0, WV, VELQ
!pb      REAL(DP), SAVE :: COLPARTS=0._DP, COLEN=0._DP
!pb      INTEGER, SAVE :: NSTBRK=-1
      INTEGER :: IRD,  I, IRDO, INUM, 
     .           IPL, IAT, IA,
     .           IM,  IIO, IP, IML, II, NPBGK,
     .           IBGK, I1, I2
C SECONDARY SPECIES IDENTIFIERS
      INTEGER ::  IAT1,IAT2,IML1,IML2,IIO1,IIO2,IPH1,IPH2,IPL1,IPL2
C EL PROCESSES
      INTEGER ::      IAEL,IREL
      INTEGER ::      IMEL
C CX PROCESSES
      INTEGER ::      IACX,IRCX   
      INTEGER ::      IMCX         
      INTEGER ::      IICX         
C OT PROCESSES
      INTEGER :: IADD,IAOT,IROT,UPDF
C PI PROCESSES (to be done)
      INTEGER ::      IAPI,IRPI
C EI PROCESSES
      INTEGER ::      IAEI,IREI
      INTEGER ::      IMEI
      INTEGER ::      IIEI
C
C  ESTIMATORS FOR ATOMS
C
      ENTRY UPDATM (XSTOR2,XSTORV2,IFLAG)
C
      WV=WEIGHT/VEL
      NPBGK=NPBGKA(IATM)
C
      IF (NADVI.GT.0) CALL UPTUSR(XSTOR2,XSTORV2,WV,IFLAG)
      IF (NCPVI.GT.0) CALL UPTCOP(XSTOR2,XSTORV2,WV,IFLAG)
      IF ((NPBGK.GT.0).AND.LBGKV) 
     .   CALL UPTBGK(XSTOR2,XSTORV2,WV,NPBGK,IFLAG)

      IF (IUPDTE == 2) RETURN
C
      VELQ=VEL*VEL
C
      DO 51 I=1,NCOU
        DIST=CLPD(I)
        WTR=WV*DIST
        WTRE0=WTR*E0
        IRDO=NRCELL+NUPC(I)*NR1P2+NBLCKA
        IRD=NCLTAL(IRDO)
        IF (IMETCL(IRD) == 0) THEN
          NCLMT = NCLMT+1
          ICLMT(NCLMT) = IRD
          IMETCL(IRD) = NCLMT
        END IF
C
C  PARTICLE AND ENERGY DENSITY ESTIMATORS
C
        IF (LEDENA) EDENA(IATM,IRD)=EDENA(IATM,IRD)+WTRE0
        IF (LPDENA) PDENA(IATM,IRD)=PDENA(IATM,IRD)+WTR
        IF (LEDENA.OR.LPDENA) LMETSP(NSPH+IATM)=.TRUE.
C
C  ESTIMATORS FOR SOURCES AND SINKS
C  NEGATIVE SIGN MEANS: LOSS FOR PARTICLES
C  POSITIVE SIGN MEANS: GAIN FOR PARTICLES
C
        IF (LGVAC(IRDO,0)) GOTO 51
C
!       XSTOR(:,:) = XSTOR2(:,:,I)
!       XSTORV(:)  = XSTORV2(:,I)
        XSTOR(1:mstor1,1:mstor2) = XSTOR2(1:mstor1,1:mstor2,I)
        XSTORV(1:nstorv)  = XSTORV2(1:nstorv,I)
c        DO I2=1,MSTOR2
c          DO I1=1,MSTOR1
c            XSTOR(I1,I2) = XSTOR2(I1,I2,I)
c          END DO
c        END DO
c        DO I1=1,NSTORV
c          XSTORV(I1) = XSTORV2(I1,I)
c        END DO
C
C  PRE COLLISION RATES, ASSUME: TEST PARTICLES ARE LOST
C
        WTRSIG=WTR*(SIGTOT-SIGBGK)
        IF (LPAAT) PAAT(IATM,IRD)=PAAT(IATM,IRD)-WTRSIG
        IF (LEAAT) EAAT(IRD)     =EAAT(IRD)     -WTRSIG*E0
C
C  CHARGE EXCHANGE CONTRIBUTION
C
        IF (LGACX(IATM,0,0).EQ.0) GOTO 43
C  DEFAULT TRACKLENGTH ESTIMATOR
        DO 44  IACX=1,NACXI(IATM)
          IRCX=LGACX(IATM,IACX,0)
          IPLS=LGACX(IATM,IACX,1)
          LOGPLS(IPLS,ISTRA)=.TRUE.
C
          WTRSIG=WTR*SIGVCX(IRCX)
C
C  COLLISION ESTIMATOR IN SUBR. COLLIDE ?
C  COMPENSATE PRE COLLISION RATES HERE
C
          IF (IESTCX(IRCX,1).NE.0) THEN
            IF (LPAAT) PAAT(IATM,IRD)=PAAT(IATM,IRD)+WTRSIG
          ELSE
C
C  PRE COLLISION RATES, BULK IONS
C
            IF (LPAPL) THEN
              PAPL(IPLS,IRD)=PAPL(IPLS,IRD)-WTRSIG
              LMETSP(NSPAMI+IPLS)=.TRUE.
            END IF
C
C  POST COLLISION RATES, ALL SECONDARIES (TEST AND BULK PARTICLES)
C  FIRST SECONDARY: PREVIOUS BULK ION IPL
            IF (N1STX(IRCX,1).EQ.1) THEN
              IAT1=N1STX(IRCX,2)
              LOGATM(IAT1,ISTRA)=.TRUE.
              IF (LPAAT) THEN
                PAAT(IAT1,IRD)= PAAT(IAT1,IRD)+WTRSIG
                LMETSP(NSPH+IAT1)=.TRUE.
              END IF
C           ELSEIF (N1STX(IRCX,1).EQ.2) THEN
C             IML1=N1STX(IRCX,2)
C             LOGMOL(IML1,ISTRA)=.TRUE.
C             IF (LPAML) THEN 
C               PAML(IML1,IRD)= PAML(IML1,IRD)+WTRSIG
C               LMETSP(NSPA+IML1)=.TRUE.
C             END IF
            ELSEIF (N1STX(IRCX,1).EQ.3) THEN
              IIO1=N1STX(IRCX,2)
              LOGION(IIO1,ISTRA)=.TRUE.
              IF (LPAIO) THEN
                PAIO(IIO1,IRD)= PAIO(IIO1,IRD)+WTRSIG
                LMETSP(NSPAM+IIO1)=.TRUE.
              END IF
            ELSEIF (N1STX(IRCX,1).EQ.4) THEN
              IPL1=N1STX(IRCX,2)
              LOGPLS(IPL1,ISTRA)=.TRUE.
              IF (LPAPL) THEN
                PAPL(IPL1,IRD)= PAPL(IPL1,IRD)+WTRSIG
                LMETSP(NSPAMI+IPL1)=.TRUE.
              END IF
            ENDIF
C  SECOND SECONDARY: PREVIOUS ATOM IATM
            IF (N2NDX(IRCX,1).EQ.1) THEN
              IAT2=N2NDX(IRCX,2)
              LOGATM(IAT2,ISTRA)=.TRUE.
              IF (LPAAT) THEN
                PAAT(IAT2,IRD)= PAAT(IAT2,IRD)+WTRSIG
                LMETSP(NSPH+IAT2)=.TRUE.
              END IF
C           ELSEIF (N2NDX(IRCX,1).EQ.2) THEN
C             IML2=N2NDX(IRCX,2)
C             LOGMOL(IML2,ISTRA)=.TRUE.
C             IF (LPAML) THEN
C               PAML(IML2,IRD)= PAML(IML2,IRD)+WTRSIG
C               LMETSP(NSPA+IML2)=.TRUE.
C             END IF
            ELSEIF (N2NDX(IRCX,1).EQ.3) THEN
              IIO2=N2NDX(IRCX,2)
              LOGION(IIO2,ISTRA)=.TRUE.
              IF (LPAIO) THEN
                PAIO(IIO2,IRD)= PAIO(IIO2,IRD)+WTRSIG
                LMETSP(NSPAM+IIO2)=.TRUE.
              END IF
            ELSEIF (N2NDX(IRCX,1).EQ.4) THEN
              IPL2=N2NDX(IRCX,2)
              LOGPLS(IPL2,ISTRA)=.TRUE.
              IF (LPAPL) THEN
                PAPL(IPL2,IRD)= PAPL(IPL2,IRD)+WTRSIG
                LMETSP(NSPAMI+IPL2)=.TRUE.
              END IF
            ENDIF
          ENDIF
C
C  COLLISION ESTIMATOR IN SUBR. COLLIDE ?
C  COMPENSATE PRE COLLISION RATES HERE
C
          IF (IESTCX(IRCX,3).NE.0) THEN
            IF (LEAAT) EAAT(IRD)   = EAAT(IRD) + WTRSIG*E0
          ELSE
C
C  PRE COLLISION RATES, BULK IONS
C
            IF (LEAPL) EAPL(IRD)   = EAPL(IRD) - WTRSIG*ESIGCX(IRCX,1)
C
C  POST COLLISION RATES, ALL SECONDARIES (TEST AND BULK PARTICLES)
C  FIRST SECONDARY: PREVIOUS BULK ION IPL
            IF (N1STX(IRCX,1).EQ.1) THEN
              IAT1=N1STX(IRCX,2)
              LOGATM(IAT1,ISTRA)=.TRUE.
              IF (LEAAT) EAAT(IRD) = EAAT(IRD) + WTRSIG*ESIGCX(IRCX,1)
C           ELSEIF (N1STX(IRCX,1).EQ.2) THEN
C             IML1=N1STX(IRCX,2)
C             LOGMOL(IML1,ISTRA)=.TRUE.
C             IF (LEAML) EAML(IRD) = EAML(IRD) + WTRSIG*ESIGCX(IRCX,1)
            ELSEIF (N1STX(IRCX,1).EQ.3) THEN
              IIO1=N1STX(IRCX,2)
              LOGION(IIO1,ISTRA)=.TRUE.
              IF (LEAIO) EAIO(IRD) = EAIO(IRD) + WTRSIG*ESIGCX(IRCX,1)
            ELSEIF (N1STX(IRCX,1).EQ.4) THEN
              IPL1=N1STX(IRCX,2)
              LOGPLS(IPL1,ISTRA)=.TRUE.
              IF (LEAPL) EAPL(IRD) = EAPL(IRD) + WTRSIG*ESIGCX(IRCX,1)
            ENDIF
C  SECOND SECONDARY: PREVIOUS ATOM IATM
            IF (N2NDX(IRCX,1).EQ.1) THEN
              IAT2=N2NDX(IRCX,2)
              LOGATM(IAT2,ISTRA)=.TRUE.
              IF (LEAAT) EAAT(IRD) = EAAT(IRD) + WTRSIG*E0
C           ELSEIF (N2NDX(IRCX,1).EQ.2) THEN
C             IML2=N2NDX(IRCX,2)
C             LOGMOL(IML2,ISTRA)=.TRUE.
C             IF (LEAML) EAML(IRD) = EAML(IRD) + WTRSIG*E0
            ELSEIF (N2NDX(IRCX,1).EQ.3) THEN
              IIO2=N2NDX(IRCX,2)
              LOGION(IIO2,ISTRA)=.TRUE.
              IF (LEAIO) EAIO(IRD) = EAIO(IRD) + WTRSIG*E0
            ELSEIF (N2NDX(IRCX,1).EQ.4) THEN
              IPL2=N2NDX(IRCX,2)
              LOGPLS(IPL2,ISTRA)=.TRUE.
              IF (LEAPL) EAPL(IRD) = EAPL(IRD) + WTRSIG*E0
            ENDIF
          ENDIF
C
44      CONTINUE
43      CONTINUE
C
C  ELASTIC NEUTRAL BULK-ION COLLISION CONTRIBUTION
C
        IF (LGAEL(IATM,0,0).EQ.0) GOTO 60
C  DEFAULT TRACKLENGTH ESTIMATOR
        DO 61  IAEL=1,NAELI(IATM)
          IREL=LGAEL(IATM,IAEL,0)
          IPLS=LGAEL(IATM,IAEL,1)
C  DO NOT UPDATE BGK TALLIES HERE
          IBGK=NPBGKP(IPLS,1)
          IF (IBGK.NE.0) GOTO 61
          LOGPLS(IPLS,ISTRA)=.TRUE.
C
          WTRSIG=WTR*SIGVEL(IREL)
C
C  COLLISION ESTIMATOR IN SUBR. COLLIDE ?
C  COMPENSATE PRE COLLISION RATES HERE
C
          IF (IESTEL(IREL,1).NE.0) THEN
            IF (LPAAT) PAAT(IATM,IRD)=PAAT(IATM,IRD)+WTRSIG
          ELSE
C  UPDATE TRACKLENGTH ESTIMATOR
C           IF (LPAPL) THEN
C             PAPL(IPLS,IRD)=PAPL(IPLS,IRD)-WTRSIG
C             PAPL(IPLS,IRD)=PAPL(IPLS,IRD)+WTRSIG
C             LMETSP(NSPAMI+IPLS)=.TRUE.
C           END IF
            IF (LPAAT) THEN
              PAAT(IATM,IRD)=PAAT(IATM,IRD)+WTRSIG
              LMETSP(NSPH+IATM)=.TRUE.
            END IF
          ENDIF
C
          IF (IESTEL(IREL,3).NE.0) THEN
C  COLLISION ESTIMATOR IN SUBR. COLLIDE ?
C  COMPENSATE PRE COLLISION RATES HERE
            IF (LEAAT) EAAT(IRD)=EAAT(IRD)+WTRSIG*E0
          ELSE
C
C  PRE COLLISION RATES, BULK IONS
C
            IF (LEAPL) EAPL(IRD)=EAPL(IRD)-WTRSIG*ESIGEL(IREL,1)
C
C  FIRST SECONDARY: = INCIDENT ION. REMAINS SAME PARTICLE BY DEFAULT
            IF (LEAPL) EAPL(IRD)=EAPL(IRD)+WTRSIG*E0
C  SECOND SECONDARY: = INCIDENT ATOM. REMAINS SAME PARTICLE BY DEFAULT
            IF (LEAAT) EAAT(IRD)=EAAT(IRD)+WTRSIG*ESIGEL(IREL,1)
          ENDIF
C
61      CONTINUE
60      CONTINUE
C
C  ELECTRON IMPACT COLLISION CONTRIBUTION
C
        IF (LGAEI(IATM,0).EQ.0) GOTO 57
C
        DO 55 IAEI=1,NAEII(IATM)
          IREI=LGAEI(IATM,IAEI)
          IF (SIGVEI(IREI).LE.0.D0) GOTO 55
C
          WTRSIG=WTR*SIGVEI(IREI)
C
C  COLLISION ESTIMATOR:
C  NOT AVAILABLE, HENCE: NO NEED FOR COMPENSATION HERE
C
C  ELECTRONS: DO NOT SEPARATE PRE AND POST COLLISION. UPDATE NET RATES
C
          PAEL(IRD)=PAEL(IRD)+WTRSIG*PELDS(IREI)
C
C  POST COLLISION CONTRIBUTIONS
          DO IA=1,IPATDS(IREI,0)
            IAT=IPATDS(IREI,IA)
            LOGATM(IAT,ISTRA)=.TRUE.
            IF (LPAAT) THEN
              PAAT(IAT,IRD)=PAAT(IAT,IRD)+PATDS(IREI,IAT)*WTRSIG
              LMETSP(NSPH+IAT)=.TRUE.
            END IF
          END DO
          DO IM=1,IPMLDS(IREI,0)
            IML=IPMLDS(IREI,IM)
            LOGMOL(IML,ISTRA)=.TRUE.
            IF (LPAML) THEN
              PAML(IML,IRD)=PAML(IML,IRD)+PMLDS(IREI,IML)*WTRSIG
              LMETSP(NSPA+IML)=.TRUE.
            END IF
          END DO
          DO II=1,IPIODS(IREI,0)
            IIO=IPIODS(IREI,II)
            LOGION(IIO,ISTRA)=.TRUE.
            IF (LPAIO) THEN
              PAIO(IIO,IRD)=PAIO(IIO,IRD)+PIODS(IREI,IIO)*WTRSIG
              LMETSP(NSPAM+IIO)=.TRUE.
            END IF
          END DO
          DO IP=1,IPPLDS(IREI,0)
            IPL=IPPLDS(IREI,IP)
            LOGPLS(IPL,ISTRA)=.TRUE.
            IF (LPAPL) THEN
              PAPL(IPL,IRD)=PAPL(IPL,IRD)+PPLDS(IREI,IPL)*WTRSIG
              LMETSP(NSPAMI+IPL)=.TRUE.
            END IF
          END DO
C
          IF (IESTEI(IREI,3).NE.0) THEN
C
C  COLLISION ESTIMATOR
C  COMPENSATE PRE COLLISION CONTRIBUTION
C
            EAAT(IRD)=EAAT(IRD)+WTRSIG*E0
C
          ELSE
C
            IF (LEAEL) EAEL(IRD)=EAEL(IRD)+WTRSIG*ESIGEI(IREI,5)
            IF (LEAAT) EAAT(IRD)=EAAT(IRD)+WTRSIG*ESIGEI(IREI,1)
            IF (LEAML) EAML(IRD)=EAML(IRD)+WTRSIG*ESIGEI(IREI,2)
            iF (LEAIO) EAIO(IRD)=EAIO(IRD)+WTRSIG*ESIGEI(IREI,3)
            IF (LEAPL) EAPL(IRD)=EAPL(IRD)+WTRSIG*ESIGEI(IREI,4)
C
          ENDIF
55      CONTINUE
57      CONTINUE
C
C  PLASMA ION IMPACT CONTRIBUTION
C
        IF (LGAPI(IATM,0,0).EQ.0) GOTO 59
        DO 58  IAPI=1,NAPII(IATM)
          IRPI=LGAPI(IATM,IAPI,0)
          IPLS=LGAPI(IATM,IAPI,1)
          LOGPLS(IPLS,ISTRA)=.TRUE.

          WTRSIG=WTR*SIGVPI(IRPI)
C
C  PRE COLLISION BULK ION CONTRIBUTION, ASSUME: INCIDENT ION IS LOST
C
          IF (LPAPL) THEN
            PAPL(IPLS,IRD)=PAPL(IPLS,IRD)-WTRSIG
            LMETSP(NSPAMI+IPLS)=.TRUE.
          END IF
          IF (LEAPL) EAPL(IRD)     =EAPL(IRD)     +WTRSIG*ESIGPI(IRPI,1)
C
C  ELECTRONS: DO NOT SEPARATE PRE AND POST COLLISION
C
          IF (LEAEL) EAEL(IRD)=EAEL(IRD)+WTRSIG*ESIGPI(IRPI,2)
          IF (LPAEL) PAEL(IRD)=PAEL(IRD)+WTRSIG*PELPI(IRPI)
C
C SO NICHT  EAIO(IRD)     = EAIO(IRD)     +WTRSIG*E0
          DO II=1,IPIOPI(IRPI,0)
            IIO=IPIOPI(IRPI,II)
            LOGION(IIO,ISTRA)=.TRUE.
            IF (LPAIO) THEN
              PAIO(IIO,IRD)= PAIO(IIO,IRD)+WTRSIG*PIOPI(IRPI,IIO)
              LMETSP(NSPAM+IIO)=.TRUE.
            END IF
          ENDDO
C SO NICHT  EAPL(IRD)     = EAPL(IRD)     +WTRSIG*E0
          DO IP=1,IPPLPI(IRPI,0)
            IPL=IPPLPI(IRPI,IP)
            LOGPLS(IPL,ISTRA)=.TRUE.
            IF (LPAPL) THEN
              PAPL(IPL,IRD)= PAPL(IPL,IRD)+WTRSIG*PPLPI(IRPI,IPL)
              LMETSP(NSPAMI+IPL)=.TRUE.
            END IF
          ENDDO
58      CONTINUE
59      CONTINUE
csw
csw OTHER (OT) collisions (background-photons) for atoms
csw
        IF (PHV_LGAOT(IATM,0,0).EQ.0) GOTO 123
        write (6,*) '26-a: not checked, call exit'
        CALL EXIT(1)
C  DEFAULT TRACKLENGTH ESTIMATOR
        DO IAOT=1,PHV_NAOTI(IATM)
           IROT=PHV_LGAOT(IATM,IAOT,0)
           if(irot == 0) cycle
           
           IPLS=PHV_LGAOT(IATM,IAOT,1)
           UPDF=PHV_LGAOT(IATM,IAOT,4)
           LOGPLS(IPLS,ISTRA)=.TRUE.
C
           WTRSIG=WTR*SIGVOT(IROT)
C
C  COLLISION ESTIMATOR IN SUBR. COLLIDE ?
C  COMPENSATE PRE COLLISION RATES HERE
C
           IF (PHV_IESTOTat(iatm,IROT,1).NE.0) THEN
             IF (LPAAT) PAAT(IATM,IRD)=PAAT(IATM,IRD)+WTRSIG
           ELSE
C
C  PRE COLLISION RATES, BULK IONS
C
              if(LPAPL.AND.(ipls > 0)) then 
                 PAPL(IPLS,IRD)=PAPL(IPLS,IRD)-WTRSIG
                 LMETSP(NSPAMI+IPLS)=.TRUE.
              endif
C
C  POST COLLISION RATES, ALL SECONDARIES (TEST AND BULK PARTICLES)
C  FIRST SECONDARY: PREVIOUS BULK ION IPL
              IF (PHV_N1STOTat(iatm,IROT,1).EQ.1) THEN
                 IAT1=PHV_N1STOTat(iatm,IROT,2)
                 INUM=PHV_N1STOTat(iatm,IROT,3)
                 LOGATM(IAT1,ISTRA)=.TRUE.
                 IF (LPAAT) THEN
                   PAAT(IAT1,IRD)= PAAT(IAT1,IRD)+WTRSIG*INUM
                   LMETSP(NSPH+IAT1)=.TRUE.
                 END IF
C           ELSEIF (PHV_N1STOTat(iatm,IROT,1).EQ.2) THEN
C             IML1=PHV_N1STOTat(iatm,IROT,2)
C             LOGMOL(IML1,ISTRA)=.TRUE.
C             IF (LPAML) THEN
C               PAML(IML1,IRD)= PAML(IML1,IRD)+WTRSIG
C               LMETSP(NSPA+IML1)=.TRUE.
C             END IF
c            ELSEIF (PHV_N1STOTat(iatm,IROT,1).EQ.3) THEN
c              IIO1=PHV_N1STOTat(iatm,IROT,2)
c              LOGION(IIO1,ISTRA)=.TRUE.
C              IF (LPAIO) THEN 
c                PAIO(IIO1,IRD)= PAIO(IIO1,IRD)+WTRSIG
c                LMETSP(NSPAM+IIO1)=.TRUE.
C              END IF
              ELSEIF (PHV_N1STOTat(iatm,IROT,1).EQ.4) THEN
                 IPL1=PHV_N1STOTat(iatm,IROT,2)
                 INUM=PHV_N1STOTat(iatm,IROT,3)
                 LOGPLS(IPL1,ISTRA)=.TRUE.
                 IF (LPAPL) THEN
                   PAPL(IPL1,IRD)= PAPL(IPL1,IRD)+WTRSIG*INUM
                   LMETSP(NSPAMI+IPL1)=.TRUE.
                 END IF
csw added branch
              ELSEIF (PHV_N1STOTat(iatm,IROT,1).EQ.0) then
                 iph1=phv_n1stotat(iatm,irot,2)
                 inum=phv_n1stotat(iatm,irot,3)
                 logphot(iph1,istra)=.true.
                 IF (LPAPHT) THEN
                   PAPHT(iph1,ird)=PAPHT(iph1,ird)+wtrsig*inum
                   LMETSP(iph1)=.true.
                 END IF
              ENDIF
C  SECOND SECONDARY: PREVIOUS ATOM IATM
              IF (PHV_N2NDOTat(iatm,IROT,1).EQ.1) THEN
                 IAT2=PHV_N2NDOTat(iatm,IROT,2)
                 INUM=PHV_N2NDOTat(iatm,IROT,3)
                 LOGATM(IAT2,ISTRA)=.TRUE.
                 IF (LPAAT) THEN
                   PAAT(IAT2,IRD)= PAAT(IAT2,IRD)+WTRSIG*INUM
                   LMETSP(NSPH+IAT2)=.TRUE.
                 END IF
C           ELSEIF (PHV_N2NDOTat(iatm,IROT,1).EQ.2) THEN
C             IML2=PHV_N2NDOTat(iatm,IROT,2)
C             LOGMOL(IML2,ISTRA)=.TRUE.
C             IF (LPAML) THEN
C               PAML(IML2,IRD)= PAML(IML2,IRD)+WTRSIG
C               LMETSP(NSPA+IML2)=.TRUE.
C             END IF    
c            ELSEIF (PHV_N2NDOTat(iatm,IROT,1).EQ.3) THEN
c              IIO2=PHV_N2NDOTat(iatm,IROT,2)
c              LOGION(IIO2,ISTRA)=.TRUE.
C              IF (LPAIO) THEN
c                PAIO(IIO2,IRD)= PAIO(IIO2,IRD)+WTRSIG
c                LMETSP(NSPAM+IIO2)=.TRUE.
C              END IF
              ELSEIF (PHV_N2NDOTat(iatm,IROT,1).EQ.4) THEN
                 IPL2=PHV_N2NDOTat(iatm,IROT,2)
                 INUM=PHV_N2NDOTat(iatm,IROT,3)
                 LOGPLS(IPL2,ISTRA)=.TRUE.
                 IF (LPAPL) THEN
                   PAPL(IPL2,IRD)= PAPL(IPL2,IRD)+WTRSIG*INUM
                   LMETSP(NSPAMI+IPL2)=.TRUE.
                 END IF
csw added branch
              ELSEIF (PHV_N2NDOTat(iatm,IROT,1).EQ.0) then
                 iph2=phv_n2ndotat(iatm,irot,2)
                 inum=phv_n2ndotat(iatm,irot,3)
                 logphot(iph2,istra)=.true.
                 IF (LPAPHT) THEN
                   PAPHT(iph2,ird)=PAPHT(iph2,ird)+wtrsig*inum
                   LMETSP(iph2)=.true.
                 END IF
              ENDIF
           ENDIF
C
C  COLLISION ESTIMATOR IN SUBR. COLLIDE ?
C  COMPENSATE PRE COLLISION RATES HERE
C
           IF (PHV_IESTOTat(iatm,IROT,3).NE.0) THEN
              IF (LEAAT) EAAT(IRD)    = EAAT(IRD) + WTRSIG*E0
           ELSE
C
C  PRE COLLISION RATES, BULK IONS
C
c            EAPL(IRD)     =EAPL(IRD)     -WTRSIG*ESIGOT(IROT,1)
              if(LEAPL.AND.(ipls > 0)) then
                 EAPL(IRD)     =EAPL(IRD)     -WTRSIG*E0
              endif
C
C  POST COLLISION RATES, ALL SECONDARIES (TEST AND BULK PARTICLES)
C  FIRST SECONDARY: PREVIOUS BULK ION IPL
              IF (PHV_N1STOTat(iatm,IROT,1).EQ.1) THEN
                 IAT1=PHV_N1STOTat(iatm,IROT,2)
                 INUM=PHV_N1STOTat(iatm,IROT,3)
                 LOGATM(IAT1,ISTRA)=.TRUE.
c              IF (LEAAT) EAAT(IRD)     = EAAT(IRD)   +WTRSIG*ESIGOT(IROT,1)
                 IF (LEAAT) EAAT(IRD) = EAAT(IRD) + WTRSIG*E0*INUM
C           ELSEIF (PHV_N1STOTat(iatm,IROT,1).EQ.2) THEN
C             IML1=PHV_N1STOTat(iatm,IROT,2)
C             LOGMOL(IML1,ISTRA)=.TRUE.
C             IF (LEAML) THEN
C               EAML(IRD)     = EAML(IRD)   +WTRSIG*ESIGOT(IROT,1)
C               EAML(IRD)     = EAML(IRD)   +WTRSIG*E0
C             END IF
c            ELSEIF (PHV_N1STOTat(iatm,IROT,1).EQ.3) THEN
c              IIO1=PHV_N1STOTat(iatm,IROT,2)
c              LOGION(IIO1,ISTRA)=.TRUE.
C              IF (LEAIO) THEN   
c                EAIO(IRD)     = EAIO(IRD)     +WTRSIG*ESIGOT(IROT,1)
c                EAIO(IRD)     = EAIO(IRD)     +WTRSIG*E0
C              END IF
              ELSEIF (PHV_N1STOTat(iatm,IROT,1).EQ.4) THEN
                 IPL1=PHV_N1STOTat(iatm,IROT,2)
                 INUM=PHV_N1STOTat(iatm,IROT,3)
                 LOGPLS(IPL1,ISTRA)=.TRUE.
c              IF (LEAPL) EAPL(IRD)     = EAPL(IRD)     +WTRSIG*ESIGOT(IROT,1)
                 IF (LEAPL) EAPL(IRD) = EAPL(IRD) + WTRSIG*E0*INUM
csw added branch
              ELSEIF (PHV_N1STOTat(iatm,IROT,1).EQ.0) THEN
                 IPH1=PHV_N1STOTat(iatm,IROT,2)
                 INUM=PHV_N1STOTat(iatm,IROT,3)
                 LOGPHOT(IPH1,ISTRA)=.TRUE.
c                 IF (LEAPHT) EAPHT(IRD)     = EAPHT(IRD)  +WTRSIG*ESIGOT(IROT,1)
                 IF (LEAPHT) EAPHT(IRD) = EAPHT(IRD) + WTRSIG*E0*INUM
              ENDIF
C  SECOND SECONDARY: PREVIOUS ATOM IATM
              IF (PHV_N2NDOTat(iatm,IROT,1).EQ.1) THEN
                 IAT2=PHV_N2NDOTat(iatm,IROT,2)
                 INUM=PHV_N2NDOTat(iatm,IROT,3)
                 LOGATM(IAT2,ISTRA)=.TRUE.
                 IF (LEAAT) EAAT(IRD) = EAAT(IRD) + WTRSIG*E0*INUM
C           ELSEIF (PHV_N2NDOTat(iatm,IROT,1).EQ.2) THEN
C             IML2=PHV_N2NDOTat(iatm,IROT,2)
C             LOGMOL(IML2,ISTRA)=.TRUE.
C             IF (LEAML) EAML(IRD)     = EAML(IRD)     +WTRSIG*E0
c            ELSEIF (PHV_N2NDOTat(iatm,IROT,1).EQ.3) THEN
c              IIO2=PHV_N2NDOTat(iatm,IROT,2)
c              LOGION(IIO2,ISTRA)=.TRUE.
c            IF (LEAIO) EAIO(IRD)     = EAIO(IRD)     +WTRSIG*E0
              ELSEIF (PHV_N2NDOTat(iatm,IROT,1).EQ.4) THEN
                 IPL2=PHV_N2NDOTat(iatm,IROT,2)
                 INUM=PHV_N2NDOTat(iatm,IROT,3)
                 LOGPLS(IPL2,ISTRA)=.TRUE.
                 IF (LEAPL) EAPL(IRD) = EAPL(IRD) + WTRSIG*E0*INUM
csw added branch
              ELSEIF (PHV_N2NDOTat(iatm,IROT,1).EQ.0) THEN
                 IPH2=PHV_N2NDOTat(iatm,IROT,2)
                 INUM=PHV_N2NDOTat(iatm,IROT,3)
                 LOGPHOT(IPH2,ISTRA)=.TRUE.
                 IF (LEAPHT) EAPHT(IRD) = EAPHT(IRD) + WTRSIG*E0*INUM
              ENDIF
           ENDIF
C     
        ENDDO
123     CONTINUE
csw
csw end added OT processes
csw
51    CONTINUE
      RETURN

C  ESTIMATORS FOR MOLECULES
C
      ENTRY UPDMOL (XSTOR2,XSTORV2,IFLAG)
C
      WV=WEIGHT/VEL
      NPBGK=NPBGKM(IMOL)
C
      IF (NADVI.GT.0) CALL UPTUSR(XSTOR2,XSTORV2,WV,IFLAG)
      IF (NCPVI.GT.0) CALL UPTCOP(XSTOR2,XSTORV2,WV,IFLAG)
      IF ((NPBGK.GT.0).AND.LBGKV)
     .   CALL UPTBGK(XSTOR2,XSTORV2,WV,NPBGK,IFLAG)

      IF (IUPDTE == 2) RETURN
C
      VELQ=VEL*VEL
C
      DO 71 I=1,NCOU
        DIST=CLPD(I)
        WTR=WV*DIST
        WTRE0=WTR*E0
        IRDO=NRCELL+NUPC(I)*NR1P2+NBLCKA
        IRD=NCLTAL(IRDO)
        IF (IMETCL(IRD) == 0) THEN
          NCLMT = NCLMT+1
          ICLMT(NCLMT) = IRD
          IMETCL(IRD) = NCLMT
        END IF
C
C  PARTICLE AND ENERGY DENSITY ESTIMATORS
C
        IF (LEDENM) EDENM(IMOL,IRD)=EDENM(IMOL,IRD)+WTRE0
        IF (LPDENM) PDENM(IMOL,IRD)=PDENM(IMOL,IRD)+WTR
        IF (LEDENM.OR.LPDENM) LMETSP(NSPA+IMOL)=.TRUE.
C
C    ESTIMATORS FOR SOURCES AND SINKS
C    NEGATIVE SIGN MEANS: LOSS FOR PARTICLES
C    POSITIVE SIGN MEANS: GAIN FOR PARTICLES
C
        IF (LGVAC(IRDO,0)) GOTO 71
C
!        XSTOR(:,:) = XSTOR2(:,:,I)
!        XSTORV(:)  = XSTORV2(:,I)
        XSTOR(1:mstor1,1:mstor2) = XSTOR2(1:mstor1,1:mstor2,I)
        XSTORV(1:nstorv)  = XSTORV2(1:nstorv,I)
c        DO I2=1,MSTOR2
c          DO I1=1,MSTOR1
c            XSTOR(I1,I2) = XSTOR2(I1,I2,I)
c          END DO
c        END DO
c        DO I1=1,NSTORV
c          XSTORV(I1) = XSTORV2(I1,I)
c        END DO
C
C  PRE COLLISION RATES, ASSUME: TEST PARTICLES ARE LOST
C
        WTRSIG=WTR*(SIGTOT-SIGBGK)
        IF (LPMML) PMML(IMOL,IRD)=PMML(IMOL,IRD)-WTRSIG
        IF (LEMML) EMML(IRD)     =EMML(IRD)     -WTRSIG*E0
C
C  CHARGE EXCHANGE CONTRIBUTION
C
        IF (LGMCX(IMOL,0,0).EQ.0) GOTO 79
C  DEFAULT TRACKLENGTH ESTIMATOR
        DO 76  IMCX=1,NMCXI(IMOL)
          IRCX=LGMCX(IMOL,IMCX,0)
          IPLS=LGMCX(IMOL,IMCX,1)
          LOGPLS(IPLS,ISTRA)=.TRUE.
C
          WTRSIG=WTR*SIGVCX(IRCX)
C
C  COLLISION ESTIMATOR IN SUBR. COLLIDE ?
C  COMPENSATE PRE COLLISION RATES HERE
C
          IF (LPMML.AND.(IESTCX(IRCX,1).NE.0)) THEN
            PMML(IMOL,IRD)=PMML(IMOL,IRD)+WTRSIG
          ELSE
C
C  PRE COLLISION RATES, BULK IONS
C
            IF (LPMPL) THEN
              PMPL(IPLS,IRD)=PMPL(IPLS,IRD)-WTRSIG
              LMETSP(NSPAMI+IPLS)=.TRUE.
            END IF
C
C  POST COLLISION RATES, ALL SECONDARIES (TEST AND BULK PARTICLES)
C  FIRST SECONDARY: PREVIOUS BULK ION IPL
            IF (N1STX(IRCX,1).EQ.1) THEN
              IAT1=N1STX(IRCX,2)
              LOGATM(IAT1,ISTRA)=.TRUE.
              IF (LPMAT) THEN
                PMAT(IAT1,IRD)= PMAT(IAT1,IRD)+WTRSIG
                LMETSP(NSPH+IAT1)=.TRUE.
              END IF
            ELSEIF (N1STX(IRCX,1).EQ.2) THEN
              IML1=N1STX(IRCX,2)
              LOGMOL(IML1,ISTRA)=.TRUE.
              IF (LPMML) THEN
                PMML(IML1,IRD)= PMML(IML1,IRD)+WTRSIG
                LMETSP(NSPA+IML1)=.TRUE.
              END IF 
            ELSEIF (N1STX(IRCX,1).EQ.3) THEN
              IIO1=N1STX(IRCX,2)
              LOGION(IIO1,ISTRA)=.TRUE.
              IF (LPMIO) THEN
                PMIO(IIO1,IRD)= PMIO(IIO1,IRD)+WTRSIG
                LMETSP(NSPAM+IIO1)=.TRUE.
              END IF
            ELSEIF (N1STX(IRCX,1).EQ.4) THEN
              IPL1=N1STX(IRCX,2)
              LOGPLS(IPL1,ISTRA)=.TRUE.
              IF (LPMPL) THEN
                PMPL(IPL1,IRD)= PMPL(IPL1,IRD)+WTRSIG
                LMETSP(NSPAMI+IPL1)=.TRUE.
              END IF
            ENDIF
C  SECOND SECONDARY: PREVIOUS ATOM IATM
            IF (N2NDX(IRCX,1).EQ.1) THEN
              IAT2=N2NDX(IRCX,2)
              LOGATM(IAT2,ISTRA)=.TRUE.
              IF (LPMAT) THEN
                PMAT(IAT2,IRD)= PMAT(IAT2,IRD)+WTRSIG
                LMETSP(NSPH+IAT2)=.TRUE.
              END IF
            ELSEIF (N2NDX(IRCX,1).EQ.2) THEN
              IML2=N2NDX(IRCX,2)
              LOGMOL(IML2,ISTRA)=.TRUE.
              IF (LPMML) THEN
                PMML(IML2,IRD)= PMML(IML2,IRD)+WTRSIG
                LMETSP(NSPA+IML2)=.TRUE.
              END IF 
            ELSEIF (N2NDX(IRCX,1).EQ.3) THEN
              IIO2=N2NDX(IRCX,2)
              LOGION(IIO2,ISTRA)=.TRUE.
              IF (LPMIO) THEN
                PMIO(IIO2,IRD)= PMIO(IIO2,IRD)+WTRSIG
                LMETSP(NSPAM+IIO2)=.TRUE.
              END IF
            ELSEIF (N2NDX(IRCX,1).EQ.4) THEN
              IPL2=N2NDX(IRCX,2)
              LOGPLS(IPL2,ISTRA)=.TRUE.
              IF (LPMPL) THEN
                PMPL(IPL2,IRD)= PMPL(IPL2,IRD)+WTRSIG
                LMETSP(NSPAMI+IPL2)=.TRUE.
              END IF
            ENDIF
          ENDIF
C
C  COLLISION ESTIMATOR IN SUBR. COLLIDE ?
C  COMPENSATE PRE COLLISION RATES HERE
C
          IF (IESTCX(IRCX,3).NE.0) THEN
            IF (LEMML) EMML(IRD) = EMML(IRD) + WTRSIG*E0
          ELSE
C
C  PRE COLLISION RATES, BULK IONS
C
            IF (LEMPL) EMPL(IRD) = EMPL(IRD) - WTRSIG*ESIGCX(IRCX,1)
C
C  POST COLLISION RATES, ALL SECONDARIES (TEST AND BULK PARTICLES)
C  FIRST SECONDARY: PREVIOUS BULK ION IPL
            IF (N1STX(IRCX,1).EQ.1) THEN
              IAT1=N1STX(IRCX,2)
              LOGATM(IAT1,ISTRA)=.TRUE.
              IF (LEMAT) EMAT(IRD) = EMAT(IRD) + WTRSIG*ESIGCX(IRCX,1)
            ELSEIF (N1STX(IRCX,1).EQ.2) THEN
              IML1=N1STX(IRCX,2)
              LOGMOL(IML1,ISTRA)=.TRUE.
              IF (LEMML) EMML(IRD) = EMML(IRD) + WTRSIG*ESIGCX(IRCX,1)
            ELSEIF (N1STX(IRCX,1).EQ.3) THEN
              IIO1=N1STX(IRCX,2)
              LOGION(IIO1,ISTRA)=.TRUE.
              IF (LEMIO) EMIO(IRD) = EMIO(IRD) + WTRSIG*ESIGCX(IRCX,1)
            ELSEIF (N1STX(IRCX,1).EQ.4) THEN
              IPL1=N1STX(IRCX,2)
              LOGPLS(IPL1,ISTRA)=.TRUE.
              IF (LEMPL) EMPL(IRD) = EMPL(IRD) + WTRSIG*ESIGCX(IRCX,1)
            ENDIF
C  SECOND SECONDARY: PREVIOUS MOLECULE IMOL
            IF (N2NDX(IRCX,1).EQ.1) THEN
              IAT2=N2NDX(IRCX,2)
              LOGATM(IAT2,ISTRA)=.TRUE.
              IF (LEMAT) EMAT(IRD) = EMAT(IRD) + WTRSIG*E0
            ELSEIF (N2NDX(IRCX,1).EQ.2) THEN
              IML2=N2NDX(IRCX,2)
              LOGMOL(IML2,ISTRA)=.TRUE.
              IF (LEMML) EMML(IRD) = EMML(IRD) + WTRSIG*E0
            ELSEIF (N2NDX(IRCX,1).EQ.3) THEN
              IIO2=N2NDX(IRCX,2)
              LOGION(IIO2,ISTRA)=.TRUE.
              IF (LEMIO) EMIO(IRD) = EMIO(IRD) + WTRSIG*E0
            ELSEIF (N2NDX(IRCX,1).EQ.4) THEN
              IPL2=N2NDX(IRCX,2)
              LOGPLS(IPL2,ISTRA)=.TRUE.
              IF (LEMPL) EMPL(IRD) = EMPL(IRD) + WTRSIG*E0
            ENDIF
          ENDIF
C
76      CONTINUE
79      CONTINUE
C
C  ELASTIC NEUTRAL BULK-ION COLLISION CONTRIBUTION
C
        IF (LGMEL(IMOL,0,0).EQ.0) GOTO 80
C  DEFAULT TRACKLENGTH ESTIMATOR
        DO 81  IMEL=1,NMELI(IMOL)
          IREL=LGMEL(IMOL,IMEL,0)
          IPLS=LGMEL(IMOL,IMEL,1)
C  DO NOT UPDATE BGK TALLIES HERE
          IBGK=NPBGKP(IPLS,1)
          IF (IBGK.NE.0) GOTO 81
          LOGPLS(IPLS,ISTRA)=.TRUE.
C
          WTRSIG=WTR*SIGVEL(IREL)
C
C  COLLISION ESTIMATOR IN SUBR. COLLIDE ?
C  COMPENSATE PRE COLLISION RATES HERE
C
          IF (LPMML.AND.(IESTEL(IREL,1)).NE.0) THEN
            PMML(IMOL,IRD)=PMML(IMOL,IRD)+WTRSIG
          ELSE
C  UPDATE TRACKLENGTH ESTIMATOR
C           IF (LPMPL) THEN
C           PMPL(IPLS,IRD)=PMPL(IPLS,IRD)-WTRSIG
C           PMPL(IPLS,IRD)=PMPL(IPLS,IRD)+WTRSIG
C           LMETSP(NSPAMI+IPLS)=.TRUE.
C           END IF
            IF (LPMML) THEN
              PMML(IMOL,IRD)=PMML(IMOL,IRD)+WTRSIG
              LMETSP(NSPA+IMOL)=.TRUE.
            END IF
          ENDIF
C
          IF (IESTEL(IREL,3).NE.0) THEN
C  COLLISION ESTIMATOR IN SUBR. COLLIDE ?
C  COMPENSATE PRE COLLISION RATES HERE
            IF (LEMML) EMML(IRD)=EMML(IRD)+WTRSIG*E0
          ELSE
            IF (LEMPL) THEN
              EMPL(IRD)=EMPL(IRD)-WTRSIG*ESIGEL(IREL,1)
              EMPL(IRD)=EMPL(IRD)+WTRSIG*E0
            END IF
            IF (LEMML) EMML(IRD)=EMML(IRD)+WTRSIG*ESIGEL(IREL,1)
          ENDIF
C
81      CONTINUE
80      CONTINUE
C
C  ELECTRON IMPACT COLLISION CONTRIBUTION
C
        IF (LGMEI(IMOL,0).EQ.0) GOTO 100
C
        DO 90 IMEI=1,NMDSI(IMOL)
          IREI=LGMEI(IMOL,IMEI)
          IF (SIGVEI(IREI).LE.0.D0) GOTO 90
C
          WTRSIG=WTR*SIGVEI(IREI)
C
C  COLLISION ESTIMATOR:
C  NOT AVAILABLE, HENCE: NO NEED FOR COMPENSATION HERE
C
C  ELECTRONS: DO NOT SEPARATE PRE AND POST COLLISION. UPDATE NET RATES
C
          IF (LPMEL) PMEL(IRD)=PMEL(IRD)+WTRSIG*PELDS(IREI)
C
C  POST COLLISION CONTRIBUTIONS
          DO IA=1,IPATDS(IREI,0)
            IAT=IPATDS(IREI,IA)
            LOGATM(IAT,ISTRA)=.TRUE.
            IF (LPMAT) THEN
              PMAT(IAT,IRD)=PMAT(IAT,IRD)+PATDS(IREI,IAT)*WTRSIG
              LMETSP(NSPH+IAT)=.TRUE.
            END IF
          END DO
          DO IM=1,IPMLDS(IREI,0)
            IML=IPMLDS(IREI,IM)
            LOGMOL(IML,ISTRA)=.TRUE.
            IF (LPMML) THEN
              PMML(IML,IRD)=PMML(IML,IRD)+PMLDS(IREI,IML)*WTRSIG
              LMETSP(NSPA+IML)=.TRUE.
            END IF
          END DO
          DO II=1,IPIODS(IREI,0)
            IIO=IPIODS(IREI,II)
            LOGION(IIO,ISTRA)=.TRUE.
            IF (LPMIO) THEN
              PMIO(IIO,IRD)=PMIO(IIO,IRD)+PIODS(IREI,IIO)*WTRSIG
              LMETSP(NSPAM+IIO)=.TRUE.
            END IF
          END DO
          DO IP=1,IPPLDS(IREI,0)
            IPL=IPPLDS(IREI,IP)
            LOGPLS(IPL,ISTRA)=.TRUE.
            IF (LPMPL) THEN
              PMPL(IPL,IRD)=PMPL(IPL,IRD)+PPLDS(IREI,IPL)*WTRSIG
              LMETSP(NSPAMI+IPL)=.TRUE.
            END IF
          END DO
C
          IF (IESTEI(IREI,3).NE.0) THEN
C
C  COLLISION ESTIMATOR
C  COMPENSATE PRE COLLISION CONTRIBUTION
C
            IF (LEMML) EMML(IRD)=EMML(IRD)+WTRSIG*E0
C
          ELSE
C
            IF (LEMEL) EMEL(IRD)=EMEL(IRD)+WTRSIG*ESIGEI(IREI,5)
            IF (LEMAT) EMAT(IRD)=EMAT(IRD)+WTRSIG*ESIGEI(IREI,1)
            IF (LEMML) EMML(IRD)=EMML(IRD)+WTRSIG*ESIGEI(IREI,2)
            IF (LEMIO) EMIO(IRD)=EMIO(IRD)+WTRSIG*ESIGEI(IREI,3)
            IF (LEMPL) EMPL(IRD)=EMPL(IRD)+WTRSIG*ESIGEI(IREI,4)
C
          ENDIF
90      CONTINUE
100     CONTINUE
C
71    CONTINUE
      RETURN
C
C
C  ESTIMATORS FOR TEST IONS
C
      ENTRY UPDION (XSTOR2,XSTORV2,IFLAG)
C
      WV=WEIGHT/VEL
      NPBGK=NPBGKI(IION)
C
      IF (NADVI.GT.0) CALL UPTUSR(XSTOR2,XSTORV2,WV,IFLAG)
      IF (NCPVI.GT.0) CALL UPTCOP(XSTOR2,XSTORV2,WV,IFLAG)
      IF ((NPBGK.GT.0).AND.LBGKV) 
     .   CALL UPTBGK(XSTOR2,XSTORV2,WV,NPBGK,IFLAG)

      IF (IUPDTE == 2) RETURN
C
      VELQ=VEL*VEL
C
      DO 111 I=1,NCOU
        DIST=CLPD(I)
        WTR=WV*DIST
        WTRE0=WTR*E0
        IRDO=NRCELL+NUPC(I)*NR1P2+NBLCKA
        IRD=NCLTAL(IRDO)
        IF (IMETCL(IRD) == 0) THEN
          NCLMT = NCLMT+1
          ICLMT(NCLMT) = IRD
          IMETCL(IRD) = NCLMT
        END IF
C
C  PARTICLE AND ENERGY DENSITY ESTIMATORS
C
        IF (LEDENI) EDENI(IION,IRD)=EDENI(IION,IRD)+WTRE0
        IF (LPDENI) PDENI(IION,IRD)=PDENI(IION,IRD)+WTR
        IF (LEDENI.OR.LPDENI) LMETSP(NSPAM+IION)=.TRUE.
C
C    ESTIMATORS FOR SOURCES AND SINKS
C    NEGATIVE SIGN MEANS: LOSS FOR PARTICLES
C    POSITIVE SIGN MEANS: GAIN FOR PARTICLES
C
        IF (LGVAC(IRDO,0)) GOTO 111
C
!        XSTOR(:,:) = XSTOR2(:,:,I)
!        XSTORV(:)  = XSTORV2(:,I)
        XSTOR(1:mstor1,1:mstor2) = XSTOR2(1:mstor1,1:mstor2,I)
        XSTORV(1:nstorv)  = XSTORV2(1:nstorv,I)
c        DO I2=1,MSTOR2
c          DO I1=1,MSTOR1
c            XSTOR(I1,I2) = XSTOR2(I1,I2,I)
c          END DO
c        END DO
c        DO I1=1,NSTORV
c          XSTORV(I1) = XSTORV2(I1,I)
c        END DO
C
C  PRE COLLISION RATES, ASSUME: TEST PARTICLES ARE LOST
C
        WTRSIG=WTR*(SIGTOT-SIGBGK)
        IF (LPIIO) PIIO(IION,IRD)=PIIO(IION,IRD)-WTRSIG
        IF (LEIIO) EIIO(IRD)     =EIIO(IRD)     -WTRSIG*E0
C
C  CHARGE EXCHANGE CONTRIBUTION
C
        IF (LGICX(IION,0,0).EQ.0) GOTO 119
C  DEFAULT TRACKLENGTH ESTIMATOR
        DO 116  IICX=1,NICXI(IION)
          IRCX=LGICX(IION,IICX,0)
          IPLS=LGICX(IION,IICX,1)
          LOGPLS(IPLS,ISTRA)=.TRUE.
C
          WTRSIG=WTR*SIGVCX(IRCX)
C
C  COLLISION ESTIMATOR IN SUBR. COLLIDE ?
C  COMPENSATE PRE COLLISION RATES HERE
C
          IF (LPIIO.AND.(IESTCX(IRCX,1).NE.0)) THEN
            PIIO(IION,IRD)=PIIO(IION,IRD)+WTRSIG
          ELSE
C
C  PRE COLLISION RATES, BULK IONS
C
            IF (LPIPL) PIPL(IPLS,IRD)=PIPL(IPLS,IRD)-WTRSIG
C
C  POST COLLISION RATES, ALL SECONDARIES (TEST AND BULK PARTICLES)
C  FIRST SECONDARY: PREVIOUS BULK ION IPL
            IF (N1STX(IRCX,1).EQ.1) THEN
              IAT1=N1STX(IRCX,2)
              LOGATM(IAT1,ISTRA)=.TRUE.
              IF (LPIAT) THEN
                PIAT(IAT1,IRD)= PIAT(IAT1,IRD)+WTRSIG
                LMETSP(NSPH+IAT1)=.TRUE.
              END IF
            ELSEIF (N1STX(IRCX,1).EQ.2) THEN
              IML1=N1STX(IRCX,2)
              LOGMOL(IML1,ISTRA)=.TRUE.
              IF (LPIML) THEN
                PIML(IML1,IRD)= PIML(IML1,IRD)+WTRSIG
                LMETSP(NSPA+IML1)=.TRUE.
              END IF
            ELSEIF (N1STX(IRCX,1).EQ.3) THEN
              IIO1=N1STX(IRCX,2)
              LOGION(IIO1,ISTRA)=.TRUE.
              IF (LPIIO) THEN
                PIIO(IIO1,IRD)= PIIO(IIO1,IRD)+WTRSIG
                LMETSP(NSPAM+IIO1)=.TRUE.
              END IF
            ELSEIF (N1STX(IRCX,1).EQ.4) THEN
              IPL1=N1STX(IRCX,2)
              LOGPLS(IPL1,ISTRA)=.TRUE.
              IF (LPIPL) THEN
                PIPL(IPL1,IRD)= PIPL(IPL1,IRD)+WTRSIG
                LMETSP(NSPAMI+IPL1)=.TRUE.
              END IF
            ENDIF
C  SECOND SECONDARY: PREVIOUS ATOM IATM
            IF (N2NDX(IRCX,1).EQ.1) THEN
              IAT2=N2NDX(IRCX,2)
              LOGATM(IAT2,ISTRA)=.TRUE.
              IF (LPIAT) THEN
                PIAT(IAT2,IRD)= PIAT(IAT2,IRD)+WTRSIG
                LMETSP(NSPH+IAT2)=.TRUE.
              END IF
            ELSEIF (N2NDX(IRCX,1).EQ.2) THEN
              IML2=N2NDX(IRCX,2)
              LOGMOL(IML2,ISTRA)=.TRUE.
              IF (LPIML) THEN
                PIML(IML2,IRD)= PIML(IML2,IRD)+WTRSIG
                LMETSP(NSPA+IML2)=.TRUE.
              END IF
            ELSEIF (N2NDX(IRCX,1).EQ.3) THEN
              IIO2=N2NDX(IRCX,2)
              LOGION(IIO2,ISTRA)=.TRUE.
              IF (LPIIO) THEN
                PIIO(IIO2,IRD)= PIIO(IIO2,IRD)+WTRSIG
                LMETSP(NSPAM+IIO2)=.TRUE.
              END IF
            ELSEIF (N2NDX(IRCX,1).EQ.4) THEN
              IPL2=N2NDX(IRCX,2)
              LOGPLS(IPL2,ISTRA)=.TRUE.
              IF (LPIPL) THEN
                PIPL(IPL2,IRD)= PIPL(IPL2,IRD)+WTRSIG
                LMETSP(NSPAMI+IPL2)=.TRUE.
              END IF
            ENDIF
          ENDIF
C
C  COLLISION ESTIMATOR IN SUBR. COLLIDE ?
C  COMPENSATE PRE COLLISION RATES HERE
C
          IF (LEIIO.AND.(IESTCX(IRCX,3).NE.0)) THEN
            EIIO(IRD) = EIIO(IRD) + WTRSIG*E0
          ELSE
C
C  PRE COLLISION RATES, BULK IONS
C
            EIPL(IRD)     =EIPL(IRD)     -WTRSIG*ESIGCX(IRCX,1)
C
C  POST COLLISION RATES, ALL SECONDARIES (TEST AND BULK PARTICLES)
C  FIRST SECONDARY: PREVIOUS BULK ION IPL
            IF (N1STX(IRCX,1).EQ.1) THEN
              IAT1=N1STX(IRCX,2)
              LOGATM(IAT1,ISTRA)=.TRUE.
              IF (LEIAT) EIAT(IRD) = EIAT(IRD) + WTRSIG*ESIGCX(IRCX,1)
            ELSEIF (N1STX(IRCX,1).EQ.2) THEN
              IML1=N1STX(IRCX,2)
              LOGMOL(IML1,ISTRA)=.TRUE.
              IF (LEIML) EIML(IRD) = EIML(IRD) + WTRSIG*ESIGCX(IRCX,1)
            ELSEIF (N1STX(IRCX,1).EQ.3) THEN
              IIO1=N1STX(IRCX,2)
              LOGION(IIO1,ISTRA)=.TRUE.
              IF (LEIIO) EIIO(IRD) = EIIO(IRD) + WTRSIG*ESIGCX(IRCX,1)
            ELSEIF (N1STX(IRCX,1).EQ.4) THEN
              IPL1=N1STX(IRCX,2)
              LOGPLS(IPL1,ISTRA)=.TRUE.
              IF (LEIPL) EIPL(IRD) = EIPL(IRD) + WTRSIG*ESIGCX(IRCX,1)
            ENDIF
C  SECOND SECONDARY: PREVIOUS ATOM IATM
            IF (N2NDX(IRCX,1).EQ.1) THEN
              IAT2=N2NDX(IRCX,2)
              LOGATM(IAT2,ISTRA)=.TRUE.
              IF (LEIAT) EIAT(IRD) = EIAT(IRD) + WTRSIG*E0
            ELSEIF (N2NDX(IRCX,1).EQ.2) THEN
              IML2=N2NDX(IRCX,2)
              LOGMOL(IML2,ISTRA)=.TRUE.
              IF (LEIML) EIML(IRD) = EIML(IRD) + WTRSIG*E0
            ELSEIF (N2NDX(IRCX,1).EQ.3) THEN
              IIO2=N2NDX(IRCX,2)
              LOGION(IIO2,ISTRA)=.TRUE.
              IF (LEIIO) EIIO(IRD) = EIIO(IRD) + WTRSIG*E0
            ELSEIF (N2NDX(IRCX,1).EQ.4) THEN
              IPL2=N2NDX(IRCX,2)
              LOGPLS(IPL2,ISTRA)=.TRUE.
              IF (LEIPL) EIPL(IRD) = EIPL(IRD) + WTRSIG*E0
            ENDIF
          ENDIF
C
116     CONTINUE
119     CONTINUE
C
C  ELECTRON IMPACT COLLISION CONTRIBUTION
C
        IF (LGIEI(IION,0).EQ.0) GOTO 130
C
        DO 120 IIEI=1,NIDSI(IION)
          IREI=LGIEI(IION,IIEI)
          IF (SIGVEI(IREI).LE.0.D0) GOTO 120
C
          WTRSIG=WTR*SIGVEI(IREI)
C
C  ELECTRONS: DO NOT SEPARATE PRE AND POST COLLISION. UPDATE NET RATES
C
          IF (LPIEL) PIEL(IRD)=PIEL(IRD)+WTRSIG*PELDS(IREI)
C
C  POST COLLISION CONTRIBUTIONS
          DO IA=1,IPATDS(IREI,0)
            IAT=IPATDS(IREI,IA)
            LOGATM(IAT,ISTRA)=.TRUE.
            IF (LPIAT) THEN
              PIAT(IAT,IRD)=PIAT(IAT,IRD)+PATDS(IREI,IAT)*WTRSIG
              LMETSP(NSPH+IAT)=.TRUE.
            END IF
          END DO
          DO IM=1,IPMLDS(IREI,0)
            IML=IPMLDS(IREI,IM)
            LOGMOL(IML,ISTRA)=.TRUE.
            IF (LPIML) THEN
              PIML(IML,IRD)=PIML(IML,IRD)+PMLDS(IREI,IML)*WTRSIG
              LMETSP(NSPA+IML)=.TRUE.
            END IF
          END DO
          DO II=1,IPIODS(IREI,0)
            IIO=IPIODS(IREI,II)
            LOGION(IIO,ISTRA)=.TRUE.
            IF (LPIIO) THEN
              PIIO(IIO,IRD)=PIIO(IIO,IRD)+PIODS(IREI,IIO)*WTRSIG
              LMETSP(NSPAM+IIO)=.TRUE.
            END IF
          END DO
          DO IP=1,IPPLDS(IREI,0)
            IPL=IPPLDS(IREI,IP)
            LOGPLS(IPL,ISTRA)=.TRUE.
            IF (LPIPL) THEN
              PIPL(IPL,IRD)=PIPL(IPL,IRD)+PPLDS(IREI,IPL)*WTRSIG
              LMETSP(NSPAMI+IPL)=.TRUE.
            END IF
          END DO
C
          IF (IESTEI(IREI,3).NE.0) THEN
C
C  COLLISION ESTIMATOR
C  COMPENSATE PRE COLLISION CONTRIBUTION
C
            IF (LEIIO) EIIO(IRD)=EIIO(IRD)+WTRSIG*E0
C
          ELSE
C
            IF (LEIEL) EIEL(IRD)=EIEL(IRD)+WTRSIG*ESIGEI(IREI,5)
            IF (LEIAT) EIAT(IRD)=EIAT(IRD)+WTRSIG*ESIGEI(IREI,1)
            IF (LEIML) EIML(IRD)=EIML(IRD)+WTRSIG*ESIGEI(IREI,2)
            IF (LEIIO) EIIO(IRD)=EIIO(IRD)+WTRSIG*ESIGEI(IREI,3)
            IF (LEIPL) EIPL(IRD)=EIPL(IRD)+WTRSIG*ESIGEI(IREI,4)
C
          ENDIF
120     CONTINUE
130     CONTINUE
C
111   CONTINUE
      RETURN
C
C
C  ESTIMATORS FOR PHOTONS
C
      ENTRY UPDPHOT (XSTOR2,XSTORV2,IFLAG)
C
      WV=WEIGHT/VEL
c     NPBGK=NPBGKPH(IPHOT)
csw added n line
      iadd = phv_nrota
C
      IF (NADVI.GT.0) CALL UPTUSR(XSTOR2,XSTORV2,WV,IFLAG)
      IF (NCPVI.GT.0) CALL UPTCOP(XSTOR2,XSTORV2,WV,IFLAG)
cdr generalise flag NPBGK to mean: model collision term for bi-linear collision
cdr noly in this case: set backgound radiation intensity profiles.
cdr   IF (NPBGK.GT.0) CALL PH_UPDATE_SPECTRUM(WV) ! SPECTRUM CORR. BGK-TALLIES
C
      IF (IUPDTE == 2) RETURN

      VELQ=VEL*VEL
C
      DO 131 I=1,NCOU
        DIST=CLPD(I)
        WTR=WV*DIST
        WTRE0=WTR*E0
        IRDO=NRCELL+NUPC(I)*NR1P2+NBLCKA
        IRD=NCLTAL(IRDO)
        IF (IMETCL(IRD) == 0) THEN
          NCLMT = NCLMT+1
          ICLMT(NCLMT) = IRD
          IMETCL(IRD) = NCLMT
        END IF
C
C  PARTICLE AND ENERGY DENSITY ESTIMATORS
C
        IF (LEDENPH) EDENPH(IPHOT,IRD)=EDENPH(IPHOT,IRD)+WTRE0
        IF (LPDENPH) PDENPH(IPHOT,IRD)=PDENPH(IPHOT,IRD)+WTR
        IF (LEDENPH.OR.LPDENPH) LMETSP(IPHOT)=.TRUE.
C
C  ESTIMATORS FOR SOURCES AND SINKS
C  NEGATIVE SIGN MEANS: LOSS FOR PARTICLES
C  POSITIVE SIGN MEANS: GAIN FOR PARTICLES
C
        IF (LGVAC(IRDO,0)) GOTO 131
C
!        XSTOR(:,:) = XSTOR2(:,:,I)
!        XSTORV(:)  = XSTORV2(:,I)
        XSTOR(1:mstor1,1:mstor2) = XSTOR2(1:mstor1,1:mstor2,I)
        XSTORV(1:nstorv)  = XSTORV2(1:nstorv,I)
C
C  PRE COLLISION RATES, ASSUME: TEST PARTICLES ARE LOST
C
        IF ((LAST_EVENT%IFLAG == 1) .AND.
     .      (LAST_EVENT%NCELL == IRD)) THEN

! collision estimator for first cell ("brick") along the track
! in case of a collision sample 1 (the whole weight)
! in case of no collision sample 0 
          IF ((IFLAG == 4).OR.(IFLAG == 5)) THEN
            IF (LPPHPHT) PPHPHT(IPHOT,IRD)=PPHPHT(IPHOT,IRD)-WEIGHT
            IF (LEPHPHT) EPHPHT(IRD)      =EPHPHT(IRD)      -WEIGHT*E0
!pb            NSTBRK = -1
!pb            COLPARTS = 0._DP
!pb            COLEN = 0._DP
          ELSE      
!  nothing to be done, sample a 0    
!pb            NSTBRK = IRD
!pb            WTRSIG=WTR*(SIGTOT-SIGBGK)
!pb            COLPARTS = COLPARTS + WTRSIG
!pb            COLEN = COLEN + WTRSIG*E0            
          END IF

        ELSE  

!pb          IF (NSTBRK > 0) THEN
!pb            IF (LPPHPHT) PPHPHT(IPHOT,NSTBRK)=PPHPHT(IPHOT,NSTBRK)-
!pb     .                                        COLPARTS
!pb            IF (LEPHPHT) EPHPHT(NSTBRK)=EPHPHT(NSTBRK)-COLEN
!pb            NSTBRK = -1
!pb            COLPARTS = 0._DP
!pb            COLEN = 0._DP
!pb          END IF  

          WTRSIG=WTR*(SIGTOT-SIGBGK)
          IF (LPPHPHT) PPHPHT(IPHOT,IRD)=PPHPHT(IPHOT,IRD)-WTRSIG
          IF (LEPHPHT) EPHPHT(IRD)      =EPHPHT(IRD)      -WTRSIG*E0
        END IF
C
C  OTHER (OT) CONTRIBUTION for photons
cdr  in analogy to CX processes. better: analogy to PI ? wg. stim emission ?
C
        IF (PHV_LGPHOT(IPHOT,0,0).EQ.0) GOTO 133
C  DEFAULT TRACKLENGTH ESTIMATOR
        iadd=phv_nrota
        DO IAOT=1,PHV_NPHOTI(IPHOT)
          IROT=PHV_LGPHOT(IPHOT,IAOT,0)
cdr  check irot=0 in initialisation phase only once
cdr       if(irot == 0) cycle
cdr
          IPLS=PHV_LGPHOT(IPHOT,IAOT,1)
          UPDF=PHV_LGPHOT(IPHOT,IAOT,4)
          LOGPLS(IPLS,ISTRA)=.TRUE.
C
          WTRSIG=WTR*SIGVOT(IROT+iadd)
C
C  COLLISION ESTIMATOR IN SUBR. COLLIDE ?
C  COMPENSATE PRE COLLISION RATES HERE
C
          IF (PHV_IESTOTph(iphot,IROT,1).NE.0) THEN
            IF (LPPHPHT) PPHPHT(IPHOT,IRD)=PPHPHT(IPHOT,IRD)+WTRSIG
cdr         if(updf==1) PPHPHT(IPHOT,IRD)=PPHPHT(IPHOT,IRD)+WTRSIG !prob. wrong
          ELSE
C
C  PRE COLLISION RATES, BULK IONS
C
cdr  if(ipls > 0) then
cdr  do this check in initialisation, only once
            IF (LPPHPL) THEN 
              PPHPL(IPLS,IRD)=PPHPL(IPLS,IRD)-WTRSIG
              LMETSP(NSPAMI+IPLS)=.TRUE.
            END IF
C
C  POST COLLISION RATES, ALL SECONDARIES (TEST AND BULK PARTICLES)
C
!pb         IF (PHV_N1STOTph(iphot,IROT,3).NE.0) THEN
!pb PHV_N1STOTph(iphot,IROT,3) does not include bulk
C  FIRST SECONDARY: 
              IF (PHV_N1STOTph(iphot,IROT,1).EQ.1) THEN
                IAT1=PHV_N1STOTph(iphot,IROT,2)
                INUM=PHV_N1STOTph(iphot,IROT,3)
                LOGATM(IAT1,ISTRA)=.TRUE.
                IF (LPPHAT) THEN
                  PPHAT(IAT1,IRD)= PPHAT(IAT1,IRD)+WTRSIG*INUM
                  LMETSP(NSPH+IAT1)=.TRUE.
                END IF
              ELSEIF (PHV_N1STOTph(iphot,IROT,1).EQ.2) THEN
                IML1=PHV_N1STOTph(iphot,IROT,2)
                LOGMOL(IML1,ISTRA)=.TRUE.
                IF (LPPHML) THEN
                  PPHML(IML1,IRD)= PPHML(IML1,IRD)+WTRSIG
                  LMETSP(NSPA+IML1)=.TRUE.
                END IF
              ELSEIF (PHV_N1STOTph(iphot,IROT,1).EQ.3) THEN
                IIO1=PHV_N1STOTph(iphot,IROT,2)
                INUM=PHV_N1STOTph(iphot,IROT,3)
                LOGION(IIO1,ISTRA)=.TRUE.
                IF (LPPHIO) THEN
                  PPHIO(IIO1,IRD)= PPHIO(IIO1,IRD)+WTRSIG*INUM
                  LMETSP(NSPAM+IIO1)=.TRUE.
                END IF
              ELSEIF (PHV_N1STOTph(iphot,IROT,1).EQ.4) THEN
                IPL1=PHV_N1STOTph(iphot,IROT,2)
C               INUM=PHV_N1STOTph(iphot,IROT,3)
                INUM=1
                LOGPLS(IPL1,ISTRA)=.TRUE.
                IF (LPPHPL) THEN
                  PPHPL(IPL1,IRD)= PPHPL(IPL1,IRD)+WTRSIG*INUM
csw added updf check (stim.em)
cdr  stim emission: am besten: 2 secondaries in group 1. hier jedoch:
cdr  dazu PI-process vervollstandigen.
cdr  test photon + ipls --> ipl2 (bulk particle)
cdr  if this bulk is a photon (same as iphot), dann noch eins raus auf tally
                  LMETSP(NSPAMI+IPL1)=.TRUE.
                END IF
csw added branch
              ELSEIF (PHV_N1STOTph(iphot,IROT,1).EQ.0) then
                iph1=phv_n1stotph(iphot,irot,2)
                inum=phv_n1stotph(iphot,irot,3)
cdr  test iph1 > 0 only once, in initialisation. here: removed
                if ((inum > 0) .and. (iph1 > 0)) then
                  logphot(iph1,istra)=.true.
                  IF (LPPHPHT) THEN
                    PPHPHT(iph1,ird)=PPHPHT(iph1,ird)+wtrsig*inum
                    LMETSP(IPH1)=.TRUE.
                  END IF
                end if
              ENDIF
!pb         END IF

!pb         IF (PHV_N2NDOTph(iphot,IROT,3).NE.0) THEN
!pb PHV_N2NDOTph(iphot,IROT,3) does not include bulk
C  SECOND SECONDARY: 
              IF (PHV_N2NDOTph(iphot,IROT,1).EQ.1) THEN
                IAT2=PHV_N2NDOTph(iphot,IROT,2)
                INUM=PHV_N2NDOTph(iphot,IROT,3)
                LOGATM(IAT2,ISTRA)=.TRUE.
                IF (LPPHAT) THEN
                  PPHAT(IAT2,IRD)= PPHAT(IAT2,IRD)+WTRSIG*INUM
                  LMETSP(NSPH+IAT2)=.TRUE.
                END IF
              ELSEIF (PHV_N2NDOTph(iphot,IROT,1).EQ.2) THEN
                IML2=PHV_N2NDOTph(iphot,IROT,2)
                LOGMOL(IML2,ISTRA)=.TRUE.
                IF (LPPHML) THEN
                  PPHML(IML2,IRD)= PPHML(IML2,IRD)+WTRSIG
                  LMETSP(NSPA+IML2)=.TRUE.
                END IF
              ELSEIF (PHV_N2NDOTph(iphot,IROT,1).EQ.3) THEN
                IIO2=PHV_N2NDOTph(iphot,IROT,2)
                INUM=PHV_N2NDOTph(iphot,IROT,3)
                LOGION(IIO2,ISTRA)=.TRUE.
                IF (LPPHIO) THEN
                  PPHIO(IIO2,IRD)= PPHIO(IIO2,IRD)+WTRSIG*INUM
                  LMETSP(NSPAM+IIO2)=.TRUE.
                END IF 
              ELSEIF (PHV_N2NDOTph(iphot,IROT,1).EQ.4) THEN
                IPL2=PHV_N2NDOTph(iphot,IROT,2)
C               INUM=PHV_N2NDOTph(iphot,IROT,3)
                INUM=1
                LOGPLS(IPL2,ISTRA)=.TRUE.
                IF (LPPHPL) THEN
                  PPHPL(IPL2,IRD)= PPHPL(IPL2,IRD)+WTRSIG*INUM
csw added updf check (stim.em)
cdr  stim emission: am besten: 2 secondaries in group 2. 
cdr  dazu PI-process vervollstandigen.
cdr  test photon + ipls --> ipl2 (bulk particle)
cdr  if this bulk is a photon (same as iphot), dann noch eins rauf auf tally
                  LMETSP(NSPAMI+IPL2)=.TRUE.
                END IF
csw added branch
              ELSEIF (PHV_N2NDOTph(iphot,IROT,1).EQ.0) then
                iph2=phv_n2ndotph(iphot,irot,2)
                inum=phv_n2ndotph(iphot,irot,3)
cdr test iph2 > 0 removed, to be done only once in initialisation
                if ((inum > 0) .and. (iph2 > 0)) then
                  logphot(iph2,istra)=.true.
                  IF (LPPHPHT) THEN
                    PPHPHT(iph2,ird)=PPHPHT(iph2,ird)+wtrsig*inum
                    LMETSP(iph2)=.true.
                  END IF
                END IF
              ENDIF
            ENDIF
!pb       ENDIF
C
C  PARTICLE ESTIMATORS DONE. NEXT: ENERGY ESTIMATORS
C
C  COLLISION ESTIMATOR IN SUBR. COLLIDE ?
C  COMPENSATE PRE COLLISION RATES HERE
C
          IF (LEPHPHT.AND.(PHV_IESTOTph(iphot,IROT,3).NE.0)) THEN
            EPHPHT(IRD)=EPHPHT(IRD)          +WTRSIG*E0
cdr         if(updf==1) EPHPHT(IRD)=EPHPHT(IRD)+WTRSIG*E0 ! verm. falsch
          ELSE
C
C  PRE COLLISION RATES, BULK IONS
C
cdr if(ipls > 0) then : this check only once in initialisation. removed
cdr         IF (LEPHEL) EPHPL(IRD)    =EPHPL(IRD)  -WTRSIG*E0  vermutl. falsch
cdr  gibt es schon ESIGOT ? ist dann IROR+IADD das richtge argument ?
cdr         IF (LEPHPL) EPHPL(IRD)    =EPHPL(IRD)  -WTRSIG*ESIGOT(IROT+IADD)
C
C  POST COLLISION RATES, ALL SECONDARIES (TEST AND BULK PARTICLES)

!dr        IF (PHV_N1STOTph(iphot,IROT,3).NE.0) THEN
!dr PHV_N1STOTph(iphot,IROT,3) does not include bulk
C  FIRST SECONDARY: 
cdr: erstmal raus. vermutlich muss hier die energie des
cdr  neuen schwerteilchens stehen, nicht die E0 des IPHOT.
cdr         IF (PHV_N1STOTph(iphot,IROT,1).EQ.1) THEN
cdr           IAT1=PHV_N1STOTph(iphot,IROT,2)
cdr           LOGATM(IAT1,ISTRA)=.TRUE.
cdr           IF (LEPHAT) EPHAT(IRD)     = EPHAT(IRD)  +WTRSIG*E0
C           ELSEIF (PHV_N1STOTph(iphot,IROT,1).EQ.2) THEN
C             IML1=PHV_N1STOTph(iphot,IROT,2)
C             LOGMOL(IML1,ISTRA)=.TRUE.
C             IF (LEPHML) EPHML(IRD)     = EPHML(IRD)     +WTRSIG*E0
cdr         ELSEIF (PHV_N1STOTph(iphot,IROT,1).EQ.3) THEN
cdr           IIO1=PHV_N1STOTph(iphot,IROT,2)
cdr           LOGION(IIO1,ISTRA)=.TRUE.
cdr           IF (LEPHIO) EPHIO(IRD)     = EPHIO(IRD)     +WTRSIG*E0
cdr         ELSEIF (PHV_N1STOTph(iphot,IROT,1).EQ.4) THEN
cdr           IPL1=PHV_N1STOTph(iphot,IROT,2)
cdr           LOGPLS(IPL1,ISTRA)=.TRUE.
cdr           IF (LEPHPL) EPHPL(IRD)     = EPHPL(IRD)   +WTRSIG*E0
csw added updf check (stim.em)
cdr           if(LEPHPL.AND.(updf==1.and.phv_is_plsphot(ipl1)>0)) then
cdr              EPHPL(IRD)     = EPHPL(IRD)+WTRSIG*E0
cdr           endif
csw added branch
cdr: photon scattering, e0_in = e0_out, also: delta scattering,
cdr  mit eventuell teilchenmultiplikation
cdr         ELSEIF (PHV_N1STOTph(iphot,IROT,1).EQ.0) THEN
              IF (PHV_N1STOTph(iphot,IROT,1).EQ.0) THEN
                IPH1=PHV_N1STOTph(iphot,IROT,2)
                INUM=PHV_N1STOTph(iphot,IROT,2)
cdr  if(iph1 > 0) then abfrage hier raus, nur in initialisation
                LOGPHOT(IPH1,ISTRA)=.TRUE.
                IF (LEPHPHT) EPHPHT(IRD)=EPHPHT(IRD) +WTRSIG*E0*INUM
              ENDIF
            ENDIF

            IF (PHV_N2NDOTph(iphot,IROT,3).NE.0) THEN
C  SECOND SECONDARY: 
cdr : gleiches problem wie oben E0_out ? bei test photon impact mit E0 ?
cdr         IF (PHV_N2NDOTph(iphot,IROT,1).EQ.1) THEN
cdr           IAT2=PHV_N2NDOTph(iphot,IROT,2)
cdr           LOGATM(IAT2,ISTRA)=.TRUE.
cdr           IF (LEPHAT) EPHAT(IRD)     = EPHAT(IRD)     +WTRSIG*E0
C           ELSEIF (PHV_N2NDOTph(iphot,IROT,1).EQ.2) THEN
C             IML2=PHV_N2NDOTph(iphot,IROT,2)
C             LOGMOL(IML2,ISTRA)=.TRUE.
C             IF (LEPHML) EPHML(IRD)     = EPHML(IRD)     +WTRSIG*E0
cdr         ELSEIF (PHV_N2NDOTph(iphot,IROT,1).EQ.3) THEN
cdr           IIO2=PHV_N2NDOTph(iphot,IROT,2)
cdr           LOGION(IIO2,ISTRA)=.TRUE.
cdr           IF (LEPHIO) EPHIO(IRD)     = EPHIO(IRD)     +WTRSIG*E0
cdr         ELSEIF (PHV_N2NDOTph(iphot,IROT,1).EQ.4) THEN
cdr           IPL2=PHV_N2NDOTph(iphot,IROT,2)
cdr           LOGPLS(IPL2,ISTRA)=.TRUE.
cdr           IF (LEPHPL) EPHPL(IRD)     = EPHPL(IRD)     +WTRSIG*E0
csw added updf check (stim.em)
cdr           if(updf==1.and.phv_is_plsphot(ipl2)>0) then
cdr              IF (LEPHPL) EPHPL(IRD)     = EPHPL(IRD)     +WTRSIG*E0
cdr           endif
csw added branch
cdr         ELSEIF (PHV_N2NDOTph(iphot,IROT,1).EQ.0) THEN
              IF (PHV_N2NDOTph(iphot,IROT,1).EQ.0) THEN
                IPH2=PHV_N2NDOTph(iphot,IROT,2)
                INUM=PHV_N2NDOTph(iphot,IROT,3)
cdr if(iph2 > 0) then  ! dieser test nur in initialisation phase
                if ((inum > 0) .and. (iph2 > 0)) then
                  LOGPHOT(IPH2,ISTRA)=.TRUE.
                  IF (LEPHPHT) EPHPHT(IRD) = EPHPHT(IRD)+WTRSIG*E0*INUM
                end if
              ENDIF
            ENDIF
          ENDIF
C
       ENDDO
133    CONTINUE
131    CONTINUE
      RETURN
      END
