*DK DIAGNO
C
C
      SUBROUTINE DIAGNO
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      INCLUDE 'PARMMOD'
      INCLUDE 'COMSIG'
      INCLUDE 'CLOGAU'
      INCLUDE 'COMUSR'
      INCLUDE 'CTRCEI'
      INCLUDE 'CPLOT'
      DIMENSION ENSAVE(NCHOR,NCHEN)
      LOGICAL PLSAVE
C
C  INITIALISE LINE INTEGRATION ROUTINE
C
      PLSAVE=PLHST
      PLHST=PLCHOR
C
      NSPNEW(1)=1
      NCHNI=IABS(NCHENI)
      FMXENM=DBLE(NCHNI-1)
C
C  SET ENERGY ARRAY IN CASE OF LINE INTEGRATED SPECTRA
C
      DO 100 ICHORI=1,NCHORI
        IF (NCHENI.LT.-1) THEN
C  LOG. ENERGY SCALE
          ALEMN=LOG10(EMIN1(ICHORI))
          ALEMX=LOG10(EMAX1(ICHORI))
          EQUOT=(ALEMX-ALEMN)/FMXENM
          DO 10 J=1,NCHNI
            EN=ALEMN+(J-1)*EQUOT
            ENERGY(J)=10.**EN
10          ENSAVE(ICHORI,J)=ENERGY(J)
        ELSEIF (NCHENI.GT.1) THEN
C  LIN. ENERGY SCALE
          EQUOT=(EMAX1(ICHORI)-EMIN1(ICHORI))/FMXENM
          DO 20 J=1,NCHNI
            ENERGY(J)=EMIN1(ICHORI)+(J-1)*EQUOT
20          ENSAVE(ICHORI,J)=ENERGY(J)
        ELSEIF (NCHENI.EQ.1) THEN
C  NO ENERGY DEPENDENCE
          NCHENI=1
          NCHNI=1
          ENERGY(1)=0.
          ENSAVE(ICHORI,1)=0.
        ELSEIF (NCHENI.EQ.0) THEN
C  NO CALL TO SUBR. SGNAL
          GOTO 100
        ENDIF
C
C  CARRY OUT LINE INTEGRATION
C
        ISTR=NSPSTR(ICHORI)
        IAT=NSPSPZ(ICHORI)
        CALL SGNAL(ICHORI,ISTR,IAT)
C
100   CONTINUE
C
C  OUTPUT
C
      IF (NCHNI.NE.0) CALL OUTSIG(ENSAVE)
C
      PLHST=PLSAVE
      RETURN
      END
C
      SUBROUTINE SGNAL(ICHORI,ISTR,IAT)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
C  THIS SUBROUTINE CALCULATES LINE INTEGRATED SIGNALS, USING THE EIRENE
C  VOLUME AVERAGED TALLIES AND THE PLASMA BACKGROUND DATA.
C
      INCLUDE 'PARMMOD'
      INCLUDE 'COMPRT'
      INCLUDE 'COMSOU'
      INCLUDE 'COMXS'
      INCLUDE 'CSPEI'
      INCLUDE 'CESTIM'
      INCLUDE 'COUTAU'
      INCLUDE 'CGRID'
      INCLUDE 'COMUSR'
      INCLUDE 'CLOGAU'
      INCLUDE 'CPLOT'
      INCLUDE 'COMSIG'
      INCLUDE 'CTRCEI'
      INCLUDE 'CCONA'
      INCLUDE 'CSDVI'
      INCLUDE 'CCOUPL'
C
      DIMENSION C1(3),C2(3),PSIG(0:NSPZ+1),
     .          BUFFER(NCHOR,NCHEN),ESTART(NCHOR),ENDFIT(NCHOR)
      DIMENSION RECADD(0:NATM,NRAD)
      DIMENSION ESTIM(NESTIM),SDVI(NSDVI)
      LOGICAL NLVL
      EQUIVALENCE (ESTIM(1),PDENA(1,1))
      EQUIVALENCE (SDVI(1),SIGMA(1,1))
C
      ISTRA=ISTR
      NCHNI=IABS(NCHENI)
      CALL ZEROA2(RECADD,NATM,NRAD)
C
      IF ((NFILEN.EQ.1.OR.NFILEN.EQ.2).AND.ISTRA.NE.IESTR) THEN
        IESTR=ISTRA
c slmod begin
          CALL RSTRT(ISTRAI,NSTRAI,NESTIM,NSDVI,ESTIM,SDVI,
     .               NSBGK,SDVI_BGK,NSCOP,SDVI_COP,TRCFLE)
c
c        CALL RSTRT(ISTRA,NSTRAI,NESTIM,NSDVI,ESTIM,SDVI,TRCFLE)
c slmod end
        IF (NLSYMP(ISTRA).OR.NLSYMT(ISTRA)) THEN
          CALL SYMET(ESTIM,NTALV,NRAD,NR1ST,NP2ND,NT3RD,
     .               NADDV,NFIRST,NLSYMP(ISTRA),NLSYMT(ISTRA))
c slmod begin - bug?
c Missing ENDIF.
        ENDIF
c slmod end
      ELSEIF ((NFILEN.EQ.6.OR.NFILEN.EQ.7).AND.ISTRA.EQ.0) THEN
        IESTR=ISTRA
c slmod begin
          CALL RSTRT(ISTRAI,NSTRAI,NESTIM,NSDVI,ESTIM,SDVI,
     .               NSBGK,SDVI_BGK,NSCOP,SDVI_COP,TRCFLE)
c
c        CALL RSTRT(ISTRA,NSTRAI,NESTIM,NSDVI,ESTIM,SDVI,TRCFLE)
c slmod end
        IF (NLSYMP(ISTRA).OR.NLSYMT(ISTRA)) THEN
          CALL SYMET(ESTIM,NTALV,NRAD,NR1ST,NP2ND,NT3RD,
     .               NADDV,NFIRST,NLSYMP(ISTRA),NLSYMT(ISTRA))
        ENDIF
      ELSEIF (NFILEN.EQ.0.AND.ISTRA.EQ.IESTR) THEN
C  NOTHING TO BE DONE
      ELSE
        WRITE (6,*) 'ERROR IN DIAGNO: DATA FOR STRATUM ISTRA= ',ISTRA
        WRITE (6,*) 'ARE NOT AVAILABLE. LINE INTEGRATION ABANDONNED'
        RETURN
      ENDIF
C
      IF (ISTRA.EQ.0) THEN
        NLVL=.FALSE.
        DO 10 ISTRA=1,NSTRAI
          NLVL=NLVL.OR.NLVOL(ISTRA)
10      CONTINUE
      ELSE
        NLVL=NLVOL(ISTRA)
      ENDIF
      IF (NLVL) THEN
        WRITE (6,*) 'WARNING:'
        WRITE (6,*) 'VOLUME RECOMBINATION CONTRIBUTION TO CX SIGNAL:'
        WRITE (6,*) 'FIRST GENERATION CONTRIBUTION: TO BE WRITTEN'
C  RECADD: #/S/CM**3
C  RECADD*ELCHA*VOL: AMP/CELL
        DO 100 IPLS=1,NPLSI
          DO 100 KREC=1,NPRCI(IPLS)
c slmod begin - bug?
c...bug?
c This subroutine is called from USER.F and I suspect that it is out of
c date, since I am using a USER.F file from EIRENE 3/97, and this is
c EIRENE 1/99.  Anyway,I doubt that this routine will even be called.
            IATM=NATPRC(KREC)
c
c            IATM=NATPRC(IPLS,KREC)
c slmod end
            IF (IATM.LE.0.OR.IATM.GT.NATMI) GOTO 100
            DO 101 IR=1,NSBOX
              RECADD(IATM,IR)=RECADD(IATM,IR)+
     .                        TABPRC(IPLS,KREC,IR)*DIIN(IPLS,IR)*ELCHA
101         CONTINUE
100     CONTINUE
      ENDIF
C
C     CALCULATE SIGNAL STRENGTHS
C
      C1(1)=XPIVOT(ICHORI)
      C1(2)=YPIVOT(ICHORI)
      C1(3)=ZPIVOT(ICHORI)
      C2(1)=XCHORD(ICHORI)
      C2(2)=YCHORD(ICHORI)
      C2(3)=ZCHORD(ICHORI)
      NBC2=NSPBLC(ICHORI)
      NAC2=NSPADD(ICHORI)
C
C  ENERGY LOOP (IF ANY)
C
      PMA=-1.E30
      PMI=1.E30
      XMA=-1.E30
      XMI=1.E30
      IF (NCHTAL(ICHORI).EQ.1) NSPI=NATMI
      IF (NCHTAL(ICHORI).EQ.2) NSPI=5
      IF (NCHTAL(ICHORI).EQ.3) NSPI=NSPZ
      IFIRST=0
      DO 231 JEN=1,NCHNI
        ZE=ENERGY(JEN)
        CALL LININT (IFIRST,ICHORI,C1,C2,NBC2,NAC2,ZE,
     .               PSIG,TIMAX,PMI,PMA,XMI,XMA)
        IFIRST=1
        IF (IAT.GT.0.AND.IAT.LE.NSPI) THEN
C  SINGLE SPECIES INDEX ISPZ=IAT
          BUFFER(ICHORI,JEN)=PSIG(IAT)
        ELSEIF (IAT.EQ.0) THEN
C  SUM OVER SPECIES INDEX
          ZSI=0.
          DO 239 ISPZ=1,NSPI
            ZSI=ZSI+PSIG(ISPZ)
239       CONTINUE
          BUFFER(ICHORI,JEN)=ZSI
        ELSE
          WRITE (6,*) 'ERROR IN SUBR. SGNAL: IAT= ',IAT
          CALL EXIT
        ENDIF
C
C  PROCESS DATA FROM LINE INTEGRAL ROUTINES INTO REQUESTED DATA & UNITS
C
        IF (NCHTAL(ICHORI).EQ.1) THEN
C  LINE INTEGRAL: CX ATOMS/SEC/CM**2/EV/STERAD
C  THE NUMERICAL FACTOR 1./11.137 ARISES FROM A TRANSFORMATION
C  OF A MAXWELLIAN VELOCITY DISTRIBUTION TO A MAXW. ENERGY DISTR.
C  1./11.137=0.5*(1./PI)**1.5
          FUFFER(ICHORI,JEN)=BUFFER(ICHORI,JEN)*SQRT(ZE)/11.137
        ELSEIF (NCHTAL(ICHORI).EQ.2) THEN
C  LINE INTEGRAL: PHOTONS/SEC/CM**2/STERAD
          FUFFER(ICHORI,JEN)=BUFFER(ICHORI,JEN)/(4.*PIA)
        ELSEIF (NCHTAL(ICHORI).EQ.3) THEN
          FUFFER(ICHORI,JEN)=BUFFER(ICHORI,JEN)
        ENDIF
231   CONTINUE
C
C  ENERGY LOOP FINISHED
C
C  PLOT ENERGY SPECTRUM, IF AVAILABLE AND IF REQUESTED
C
      IF (NCHNI.LE.1) RETURN
C
      IF (PLSPEC) THEN
        CALL GRNXTB(2)
        IF (NSPSCL(ICHORI).EQ.0) THEN
          ISK=101
          JSK=101
        ELSEIF (NSPSCL(ICHORI).EQ.1) THEN
          ISK=101
          JSK=-101
        ELSEIF (NSPSCL(ICHORI).EQ.2) THEN
          ISK=-101
          JSK=101
        ELSEIF (NSPSCL(ICHORI).EQ.3) THEN
          ISK=-101
          JSK=-101
        ENDIF
        CALL GRBLD(33.,24.,ISK,JSK,SNGL(XMI),SNGL(XMA),SNGL(PMI),
     .             SNGL(PMA),NCHNI)
      ENDIF
C
C  FIT A STRAIGHT LINE TO SPECTRUM, BETWEEN ESTART AND ENDFIT
C
      ESTART(ICHORI)=NSPINI(ICHORI)*TIMAX
      ENDFIT(ICHORI)=NSPEND(ICHORI)*TIMAX
      TINP(ICHORI)=TIMAX
      IF (TRCSIG) THEN
        WRITE (6,*) 'FITTING RANGE: E1--E2, TIMAX'
        WRITE (6,*) ESTART(ICHORI),'--',ENDFIT(ICHORI),'  ',TIMAX
      ENDIF
C
C  FIND MAX. VALUE OF SIGNAL
      CALL MAXMN2(BUFFER,NCHOR,ICHORI,ICHORI,1,NCHNI,XMIN,XMAX)
C  SCALE RESULT
      IF (XMAX.GT.0.) GOTO 235
      CALL MASAGE ('NO SLOPE IN SIGNAL, BECAUSE MAX(BUFFER).LE.0   ')
      PLSPEC=.FALSE.
      RETURN
235   ZSCALE=1./XMAX
      DO 233 I=1,NCHNI
        BUFFER(ICHORI,I)=BUFFER(ICHORI,I)*ZSCALE
        ZZ=MAX(1.D-10,BUFFER(ICHORI,I))
233     BUFFER(ICHORI,I)=LOG(ZZ)
C
C  CURVE FITTING
C
C  MIN. ENERGY FOR FIT
      ZE1=ESTART(ICHORI)
C  MAX. ENERGY
      ZE2=ENDFIT(ICHORI)
C
C  FIND ELEMENTS
      DO 241 JEN=2,NCHNI
        I1=JEN
        IF (ENERGY(I1).GE.ZE1) GO TO 242
241   CONTINUE
242   CONTINUE
C
      DO 243 JEN=I1,NCHNI
        I2=JEN
        IF (ENERGY(I2).GE.ZE2) GO TO 244
243   CONTINUE
244   CONTINUE
C
C   NUMBER OF POINTS FOR FITTING
      IN=I2-I1+1
      IF (IN.LT.2) THEN
        CALL MASAGE ('WRONG ENERGY RANGE FOR CURVE FITTING IN SIGNAL ')
        CALL MASJ1 ('CHORD.NO. I=           ',ICHORI)
        WRITE (6,*) 'I1,I2,IN ',I1,I2,IN
        TILINE(ICHORI)=0.
      ELSE
C  FITTED RESULT
        STEIG=SLOPE(IN,ICHORI,I1,ENERGY,BUFFER,NCHOR,NCHNI)
        IF (STEIG.GE.0.) THEN
          TILINE(ICHORI)=0.
        ELSE
          TILINE(ICHORI)=-1./STEIG
        ENDIF
      ENDIF
C
      IF (TRCSIG) THEN
        WRITE (6,*) 'ICHORI,TILINE(ICHORI) ',ICHORI,TILINE(ICHORI)
      ENDIF
C
      RETURN
      END
C
C*DK LININT
      SUBROUTINE LININT (IFIRST,ICHORI,C1,C2,NBC2,NAC2,PEN,
     .                   PSIG,TIMAX,PMI,PMA,XMI,XMA)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C  THE LINE INTEGRATION IS CARRIED OUT ALONG A STRAIGHT LINE, STARTING
C  FROM P1 AND ENDING AT P2.
C  P1 IS FOUND AS FOLLOWS: CONSIDER THE STRAIGHT LINE C2+T*(C1-C2)
C  THE NEAREST INTERSECTION OF THIS LINE  WITH A NON-TRANSPARENT SURFACE
C  IS P1. IN ORDER TO FIND THIS P1, C2 MUST BE INSIDE THE COMPUTATIONAL
C  VOLUME (STANDARD OR ADDITIONAL MESH REGION)
C  P2 IS FOUND BY INTEGRATING THE TALLY FROM P1, IN THE DIRECTION
C  (C2-C1), IE. OPPOSITE TO THE DIRECTION USED ABOVE,
C  UNTIL THE NEXT INTERSECTION WITH ANY NON-TRANSPARENT
C  SURFACE (P2) IS FOUND.
      INCLUDE 'PARMMOD'
      INCLUDE 'COMPRT'
      INCLUDE 'CUPD'
      INCLUDE 'CPLOT'
      INCLUDE 'CSPEI'
      INCLUDE 'CESTIM'
      INCLUDE 'COMUSR'
      INCLUDE 'CLOGAU'
      INCLUDE 'COMXS'
      INCLUDE 'COMSIG'
      INCLUDE 'CZT1'
      INCLUDE 'CTRCEI'
      INCLUDE 'CGRID'
      INCLUDE 'CCONA'
      INCLUDE 'CADGEO'
      INCLUDE 'CLGIN'
      DIMENSION PSIG(0:NSPZ+1),C1(3),C2(3),
     .          ARGST(0:NSPZ+1,NRAD)
C   ARRAYS FOR PLOTTING
      REAL*4    AA(NRAD),XNTG(NRAD)
      LOGICAL TRCSAV
      SAVE
      NLTRC=TRCSIG.AND.IFIRST.EQ.0.AND.TRCHST
      NPANU=0
      SCOS=1.
      IPOLG=1
C
C  COMPUTE LINE INTEGRATED SIGNAL
C
      IF (IFIRST.GT.0) GOTO 100
C
C  FIND STARTING POINT FOR LINE INTEGRATION:
C
C  INTERSECTION POINT OF LINE OF SIGHT WITH
C  NEAREST NON-TRANSPARENT STANDARD MESH SURFACE OR NON-TRANSPARENT
C  ADDITIONAL SURFACE,
C  STARTING FROM C2, SEARCHING IN THE DIRECTION C1-C2
C
      IF (NLTRA) THEN
C  IF ICHORD=0, IPIVOT=0:
C  C1(1) AND C2(1) R COORDINATES IN THE TORUS SYSTEM (INCL. R0A!)
C  C1(2) AND C2(2) Y COORDINATES
C  C1(3) AND C2(3) ARE TOROIDAL ANGLES IN DEGREES
C
C  STARTING POINT C2:
        X0=C2(1)
        Y0=C2(2)
        Z0=C2(3)
        W22=C2(3)*PIA/180.
        IF (W22.LT.0..OR.W22.GT.PI2A) THEN
          CALL MASAGE ('ERROR IN SUBR. LININT, WRONG INPUT FOR CHORDS ')
          CALL EXIT
        ENDIF
C  FIND TOROIDAL BLOCK NUMBER OF P2
        NN2=MIN(NTTRAM,IDINT(W22*DPHI)+1)
C  FIND LOCAL CO-ORDINATES IN NN2 FOR C2: XN22,ZN22
        WLOC=W22-ZZONE(NN2)
        PHIT2=W22
        XN2=X0*COS(WLOC)
        CALL FZRTRI(XN22,ZN22,NN2,XN2,W22,NN2)
        XX2=C2(1)
        ZZ2=XX2*SIN(W22)
        XX2=XX2*COS(W22)
C
C  PIVOT POINT C1:
        XX1=C1(1)
        W11=C1(3)*PIA/180.
        ZZ1=XX1*SIN(W11)
        XX1=XX1*COS(W11)
C
C  DIRECTION COSINUS OF CHORD
        VELX=XX2-XX1
        VELY=C2(2)-C1(2)
        VELZ=ZZ2-ZZ1
C ROTATE VELOCITY VECTOR FROM TORUS SYSTEM INTO LOCAL SYSTEM NN2
        ROT=-(2*NN2-1)*ALPHA
        SAVE=VELX
        VELX=COS(ROT)*SAVE-SIN(ROT)*VELZ
        VELZ=SIN(ROT)*SAVE+COS(ROT)*VELZ
C
      ELSEIF (NLTRZ) THEN
C
C  C1(1) AND C2(1) X COORDINATES (CM)
C  C1(2) AND C2(2) Y COORDINATES (CM)
C  C1(3) AND C2(3) Z COORDINATES (CM)
        X0=C2(1)
        Y0=C2(2)
        Z0=C2(3)
        VELX=C2(1)-C1(1)
        VELY=C2(2)-C1(2)
        VELZ=C2(3)-C1(3)
C
      ELSEIF (NLTRT) THEN
C
C  C1(1) AND C2(1) R COORDINATES IN CYLINDRICAL CO-ORDINATES
C  C1(2) AND C2(2) Z COORDINATES IN CYLINDRICAL CO-ORDINATES
C  C1(3) AND C2(3) ARE TOROIDAL ANGLES IN DEGREES
C
        W11=C1(3)*PIA/180.
        W22=C2(3)*PIA/180.
        IF (W11.LT.0..OR.W11.GT.PI2A.OR.W22.LT.0..OR.W22.GT.PI2A) THEN
          CALL MASAGE ('ERROR IN SUBR. LININT, WRONG INPUT FOR CHORDS ')
          CALL EXIT
        ENDIF
        RR1=C1(1)
C
        XX1=RR1*COS(W11)
        ZZ1=-RR1*SIN(W11)
C
        RR2=C2(1)
C
        XX2=RR2*COS(W22)
        ZZ2=-RR2*SIN(W22)
C
        VELX=XX2-XX1
        VELY=C2(2)-C1(2)
        VELZ=ZZ2-ZZ1
      ENDIF
C
      VEL=SQRT(VELX*VELX+VELY*VELY+VELZ*VELZ)
      VELX=-VELX/VEL
      VELY=-VELY/VEL
      VELZ=-VELZ/VEL
      VEL=1.
C
      TIME=0.
C
      ISAVE=0
      ITYP=1
C
C NEXT: FIND STARTING POINT FOR INTEGRATION, CELL NUMBERS
C       START SEARCH AT C2. CELL NUMBERS OF C2:
C
      NBLOCK=NBC2
      NACELL=NAC2
      NBLCKA=NSTRD*(NBLOCK-1)+NACELL
C
      NLSRFX=.FALSE.
      NLSRFY=.FALSE.
      NLSRFZ=.FALSE.
      MRSURF=0
      MPSURF=0
      MTSURF=0
      MASURF=0
      MSURF=0
      IPOLG=1
      ITIME=1
      IFPATH=1
      IUPDTE=1
      ICOL=0
C
      IF (NLTRA) THEN
        X0=XN22
        Y0=C2(2)
        Z0=ZN22
        PHI=PHIT2
      ELSEIF (NLTRZ) THEN
        X0=C2(1)
        Y0=C2(2)
        Z0=C2(3)
      ELSEIF (NLTRT) THEN
C  to be written
      ENDIF
C
      NRCELL=0
      IF (NLRAD.AND.NACELL.EQ.0) THEN
          NRCELL=LEARC1 (X0,Y0,Z0,IPOLG,1,NR1STM,.FALSE.,.FALSE.,0,
     .                  'LININT      ')
      ENDIF
C
      NTCELL=1
      IF (NLTOR.AND.NACELL.EQ.0) THEN
        IF (NLTRZ) NTCELL=LEARCA(Z0,ZSURF,1,NT3RD,1,'LININT      ')
        IF (NLTRA) NTCELL=NN2
      ENDIF
C
      NPCELL=1
      IF (NLPOL.AND.NACELL.EQ.0) THEN
        IF (LEVGEO.EQ.1) THEN
          NPCELL=LEARCA(Y0,PSURF,1,NP2ND,1,'LININT')
        ELSEIF (LEVGEO.EQ.2) THEN
          IF (NLCRC) THEN
            WINK=MOD(ATAN2(Y0,X0)+PI2A,PI2A)
            NPCELL=LEARCA(WINK,PSURF,1,NP2ND,1,'LININT')
          ELSE
            NPCELL=LEARC2(X0,Y0,NRCELL,NPANU,'LININT  ')
          ENDIF
        ELSEIF (LEVGEO.EQ.3) THEN
          NPCELL=IPOLG
        ELSE
          WRITE (6,*) 'ERROR EXIT FROM DIAGNO. NLPOL ',LEVGEO
        ENDIF
      ENDIF
C
      IF (TRCSIG.AND.IFIRST.EQ.0) THEN
        TRCSAV=TRCHST
        TRCHST=.TRUE.
        CALL LEER(2)
        WRITE (6,*) 'INIT. POINT IN LININT: '
        CALL CHCTRC(X0,Y0,Z0,0,1)
        CALL LEER(1)
        TRCHST=TRCSAV
      ENDIF
C
11    CONTINUE
      IF (NLTRA) X01=X0+RMTOR
      X00=X0
      Y00=Y0
      Z00=Z0
      Z01=Z0
C  CLEAR WORK VARIABLES AND: CONTINUE FLIGHTS THROUGH TRANSPARENT
C                            SURFACES FROM THIS POINT
14    CONTINUE
      NCELL=NRCELL+((NPCELL-1)+(NTCELL-1)*NP2T3)*NR1P2+NBLCKA
      NJUMP=0
      DO 12 J=1,NR1ST
12      TIMINT(J)=0.0
      TT=1.D30
      TL=1.D30
      TS=1.D30
      ZTST=1.D30
      ZT=0.0
C
      NCOU=1
      NUPC(1)=0
      NCOUNT(1)=1
      NCOUNP(1)=1
      ISRFCL=-1
C
C TL: DISTANCE TO NEXT ADDITIONAL SURFACE
      IF (NLIMII(NCELL).LE.NLIMIE(NCELL)) THEN
        CALL TIMEA1 (MSURF,NCELL,NTCELL,X0,Y0,Z0,TIME,
     .               VELX,VELY,VELZ,VEL,
c slmod begin
     .               MASURF,XLI,YLI,ZLI,SG,TL,NLTRC,NACELL)
c
c     .               MASURF,XLI,YLI,ZLI,SG,TL,NLTRC)
c slmod end
C       NLPR.....
        ZDT1=TL
        ZTST=TL
        CLPD(1)=ZDT1
        IF (MASURF.NE.0) ISRFCL=1
      ENDIF
C
C  SCAN OVER SEGMENT
C
21    CONTINUE
C
C  TS:   DISTANCE TO NEXT SURFACE OF STANDARD MESH
C  ZDT1: DISTANCE TRAVELLED IN CURRENT RADIAL CELL
C
      IF (ITIME.EQ.1) THEN
        IF (NLRAD) THEN
          CALL TIMER(TS)
C
          IF (TL.LT.TS.OR.TT.LT.TS) THEN
            MRSURF=0
            IPOLGN=0
C  COLLISION WITH ADDITIONAL SURFACE
            IF (TL.LE.TT) THEN
              ZDT1=TL-ZT
              TL=ZT+ZDT1
              ZTST=TL
              ISRFCL=1
C  COLLISION WITH TIME SURFACE
C           ELSEIF (TT.LT.TL) THEN
C             ZDT1=TT-ZT
C             TT=ZT+ZDT1
C             ZTST=TT
C             ISRFCL=2
            ENDIF
          ELSE
C  COLLISION WITH RADIAL SURFACE
            ISRFCL=0
            ZDT1=TS-ZT
            ZTST=TS
          ENDIF
        ENDIF
C
        NCOU=1
        NUPC(1)=0
        CLPD(1)=ZDT1
        NCOUNT(1)=1
        NCOUNP(1)=1
C
        IF (NLTOR.OR.NLTRA) THEN
          CALL TIMET (ZDT1)
          TS=ZT+ZDT1
          ZTST=TS
        ENDIF
C
        IF (NLPOL) THEN
          CALL TIMEP(ZDT1)
          TS=ZT+ZDT1
          ZTST=TS
        ENDIF
C
        IF (ZDT1.LE.0.) GOTO 990
      ENDIF
      IF (ZTST.GE.1.D30) GOTO 990
C
      IF (NLPOL) NPCELL=NCOUNP(NCOU)
      IF (NLTOR) NTCELL=NCOUNT(NCOU)
      ZT=ZTST
C
C  STOP TRACK ?
C
      IF (ISRFCL.EQ.1) CALL ADDCOL (XLI,YLI,ZLI,SG,*14  ,*38 )
C     IF (ISRFCL.EQ.2) CALL TIMCOL (...                          )
      IF (ISRFCL.EQ.3) CALL TORCOL (               *14 )
C
C  NO, CONTINUE TRACK
C
26    CONTINUE
C
C  NEXT CELL - CHECK FOR ESCAPE OR NON DEFAULT ACTING STANDARD SURFACE
      ISTS=INMP1I(MRSURF,IPCELL,ITCELL)
      IF (NLRAD.AND.ISTS.NE.0) THEN
        SG=ISIGN(1,NINCX)
        NLSRFX=.TRUE.
        CALL STDCOL (ISTS,1,SG,*14,*38)
      ENDIF
      ISTS=INMP3I(IRCELL,IPCELL,MTSURF)
      IF (NLTOR.AND.ISTS.NE.0) THEN
        SG=ISIGN(1,NINCZ)
        NLSRFZ=.TRUE.
        CALL STDCOL (ISTS,3,SG,*14,*38)
      ENDIF
      ISTS=INMP2I(IRCELL,MPSURF,ITCELL)
      IF (NLPOL.AND.ISTS.NE.0) THEN
        SG=ISIGN(1,NINCY)
        NLSRFY=.TRUE.
        CALL STDCOL (ISTS,2,SG,*14,*38)
      ENDIF
C
      NRCELL=NRCELL+NINCX
      IF (NRCELL.GT.NR1STM.OR.NRCELL.LT.1) GOTO 991
      GOTO 21
C
38    CONTINUE
      IF (ILIIN(MSURF).LE.0) GOTO 14
C
C  STARTING POINT FOR INTEGRATION FOUND:  SURFACE MSURF
16    VELX=-VELX
      VELY=-VELY
      VELZ=-VELZ
C
C  SAVE STARTING POINT FOR FURTHER LINE INTEGRALS ALONG SAME CHORD
C
      NRCLLS=NRCELL
      IPOLGS=IPOLG
      MRSRFS=MRSURF
      MPSRFS=MPSURF
      MTSRFS=MTSURF
      NPCLLS=NPCELL
      NTCLLS=NTCELL
      MSURFS=MSURF
      NACLLS=NACELL
      NBOCKS=NBLOCK
      NBCKAS=NBLCKA
      IF (NLTRA) PHIS=MOD(PHI-ATAN2(Z01,X01)+ATAN2(Z0,X0+RMTOR),PI2A)
      X0S=X0
      Y0S=Y0
      Z0S=Z0
      VELXS=VELX
      VELYS=VELY
      VELZS=VELZ
C
C  INTERSECTION POINT WITH NEAREST NON-TRANSPARENT SURFACE
C  IS NOW CALCULATED
C  TAKE THIS AS STARTING POINT FOR LINE INTEGRATION
C
100   CONTINUE
C
C  INITIALIZE *TIMER*,*TIMEP*,*TIMET*,*TIMEA* AND SIGNAL DATA
C
      MSURF=MSURFS
      IPOLG=IPOLGS
      MRSURF=MRSRFS
      MPSURF=MPSRFS
      MTSURF=MTSRFS
      NLSRFX=MRSURF.GT.0
      NLSRFY=MPSURF.GT.0
      NLSRFZ=MTSURF.GT.0
      NRCELL=NRCLLS
      NPCELL=NPCLLS
      NTCELL=NTCLLS
      NACELL=NACLLS
      NBLOCK=NBOCKS
      NBLCKA=NBCKAS
      X0=X0S
      Y0=Y0S
      Z0=Z0S
      VELX=VELXS
      VELY=VELYS
      VELZ=VELZS
      VEL=1.
      TIME=0.
      IF (NLTRA) PHI=PHIS
C
      IF (TRCSIG.AND.IFIRST.EQ.0) THEN
        TRCSAV=TRCHST
        TRCHST=.TRUE.
        CALL LEER(2)
        WRITE (6,*) 'SIGNAL: STARTING POINT ON CHORD'
        CALL CHCTRC(X0,Y0,Z0,16,6)
        CALL LEER(1)
        TRCHST=TRCSAV
      ENDIF
C
C  INITIALISE LINE INTEGRATION
C
      JJJ=1
      XNTG(1)=0.
      TRACKS=0.
      IF (NCHTAL(ICHORI).EQ.1) THEN
        CALL SIGCX (0,JJJ,ZDS,PEN,PSIG,TIMAX,ARGST)
      ELSEIF (NCHTAL(ICHORI).EQ.2) THEN
        CALL SIGHA (0,JJJ,ZDS,PEN,PSIG,TIMAX,ARGST)
      ELSEIF (NCHTAL(ICHORI).EQ.3) THEN
        CALL SIGUSR(0,JJJ,ZDS,PEN,PSIG,TIMAX,ARGST)
      ELSE
        CALL SIGTST(0,JJJ,ZDS,PEN,PSIG,TIMAX,ARGST)
      ENDIF
C
101   CONTINUE
      IF (NLTRA) X01=X0+RMTOR
      X00=X0
      Y00=Y0
      Z00=Z0
      Z01=Z0
C  CLEAR WORK VARIABLES AND: CONTINUE FLIGHTS THROUGH TRANSPARENT
C                            SURFACES FROM THIS POINT
104   CONTINUE
      NCELL=NRCELL+((NPCELL-1)+(NTCELL-1)*NP2T3)*NR1P2+NBLCKA
      NJUMP=0
      DO 102 J=1,NR1ST
102     TIMINT(J)=0.0
      TT=1.D30
      TL=1.D30
      TS=1.D30
      ZTST=1.D30
      ZT=0.0
C
      NCOU=1
      NUPC(1)=0
      NCOUNT(1)=1
      NCOUNP(1)=1
      ISRFCL=-1
C
C TL: DISTANCE TO NEXT ADDITIONAL SURFACE
      IF (NLIMII(NCELL).LE.NLIMIE(NCELL)) THEN
        CALL TIMEA1 (MSURF,NCELL,NTCELL,X0,Y0,Z0,TIME,
     .               VELX,VELY,VELZ,VEL,
c slmod begin
     .               MASURF,XLI,YLI,ZLI,SG,TL,NLTRC,NACELL)
c
c     .               MASURF,XLI,YLI,ZLI,SG,TL,NLTRC)
c slmod end
C       NLPR.....
        ZDT1=TL
        ZTST=TL
        CLPD(1)=ZDT1
        IF (MASURF.NE.0) ISRFCL=1
      ENDIF
C
C  SCAN OVER SEGMENT
C
210   CONTINUE
C
C  TS:   DISTANCE TO NEXT SURFACE OF STANDARD MESH
C  ZDT1: DISTANCE TRAVELLED IN CURRENT RADIAL CELL
C
      IF (ITIME.EQ.1) THEN
        IF (NLRAD) THEN
          CALL TIMER(TS)
C
          IF (TL.LT.TS.OR.TT.LT.TS) THEN
            MRSURF=0
            IPOLGN=0
C  COLLISION WITH ADDITIONAL SURFACE
            IF (TL.LE.TT) THEN
              ZDT1=TL-ZT
              TL=ZT+ZDT1
              ZTST=TL
              ISRFCL=1
C  COLLISION WITH TIME SURFACE
C           ELSEIF (TT.LT.TL) THEN
C             ZDT1=TT-ZT
C             TT=ZT+ZDT1
C             ZTST=TT
C             ISRFCL=2
            ENDIF
          ELSE
C  COLLISION WITH RADIAL SURFACE
            ISRFCL=0
            ZDT1=TS-ZT
            ZTST=TS
          ENDIF
        ENDIF
C
        NCOU=1
        NUPC(1)=0
        CLPD(1)=ZDT1
        NCOUNT(1)=1
        NCOUNP(1)=1
        ZDS=ZDT1
C
        IF (NLTOR.OR.NLTRA) THEN
          CALL TIMET (ZDT1)
          TS=ZT+ZDT1
          ZTST=TS
        ENDIF
C
        IF (NLPOL) THEN
          CALL TIMEP(ZDT1)
          TS=ZT+ZDT1
          ZTST=TS
        ENDIF
C
        IF (ZDT1.LE.0.) GOTO 990
      ENDIF
      IF (ZTST.GE.1.D30) GOTO 990
C
      DO 250 J=1,NCOU
        JJ=J
        NCELL=NRCELL+NUPC(J)*NR1ST+NBLCKA
        ZT=ZT+CLPD(J)
        ZDS=CLPD(J)
        IF (ZDS.LT.0.) GOTO 990
        JJJ=JJJ+1
        IF (JJJ.GT.NRAD) GOTO 995
        XNTG(JJJ)=TRACKS+ZDS*0.5
        TRACKS=TRACKS+ZDS
C
        IF (NCHTAL(ICHORI).EQ.1) THEN
          CALL SIGCX (1,JJJ,ZDS,PEN,PSIG,TIMAX,ARGST)
        ELSEIF (NCHTAL(ICHORI).EQ.2) THEN
          CALL SIGHA (1,JJJ,ZDS,PEN,PSIG,TIMAX,ARGST)
        ELSEIF (NCHTAL(ICHORI).EQ.3) THEN
          CALL SIGUSR(1,JJJ,ZDS,PEN,PSIG,TIMAX,ARGST)
        ELSE
          CALL SIGTST(1,JJJ,ZDS,PEN,PSIG,TIMAX,ARGST)
        ENDIF
C
250   CONTINUE
C
C  STOP TRACK ?
C
      IF (ISRFCL.EQ.1) CALL ADDCOL (XLI,YLI,ZLI,SG,*104,*380)
C     IF (ISRFCL.EQ.2) CALL TIMCOL (...            *104,*800)
      IF (ISRFCL.EQ.3) CALL TORCOL (               *104)
C
C  NO, CONTINUE TRACK
C
C  NEXT CELL - CHECK FOR ESCAPE OR NON DEFAULT ACTING STANDARD SURFACE
      ISTS=INMP1I(MRSURF,IPCELL,ITCELL)
      IF (NLRAD.AND.ISTS.NE.0) THEN
        SG=ISIGN(1,NINCX)
        NLSRFX=.TRUE.
        CALL STDCOL (ISTS,1,SG,*104,*380)
      ENDIF
      ISTS=INMP3I(IRCELL,IPCELL,MTSURF)
      IF (NLTOR.AND.ISTS.NE.0) THEN
        SG=ISIGN(1,NINCZ)
        NLSRFZ=.TRUE.
        CALL STDCOL (ISTS,3,SG,*104,*380)
      ENDIF
      ISTS=INMP2I(IRCELL,MPSURF,ITCELL)
      IF (NLPOL.AND.ISTS.NE.0) THEN
        SG=ISIGN(1,NINCY)
        NLSRFY=.TRUE.
        CALL STDCOL (ISTS,2,SG,*104,*380)
      ENDIF
C
      NRCELL=NRCELL+NINCX
      IF (NRCELL.GT.NR1STM.OR.NRCELL.LT.1) GOTO 991
C
      GOTO 210
C
C   CELL LOOP FINISHED
C
380   CONTINUE
      IF (ILIIN(MSURF).LE.0) GOTO 104
C
      IF (TRCSIG.AND.IFIRST.EQ.0) THEN
        TRCSAV=TRCHST
        TRCHST=.TRUE.
        CALL LEER(2)
        WRITE (6,*) 'SIGNAL: END POINT ON CHORD'
        CALL CHCTRC(X0,Y0,Z0,16,6)
        CALL LEER(2)
        TRCHST=TRCSAV
      ENDIF
C
500   CONTINUE
C
      JJJ=JJJ+1
      XNTG(JJJ)=TRACKS
C
      IF (PLSPEC) THEN
        XMI=0.
        DO 520 IATM=1,NATMI
          DO 510 J=1,JJJ
            AA(J)=MAX(1.D0,ARGST(IATM,J))
            PMI=MIN(PMI,DBLE(AA(J)))
            PMA=MAX(PMA,DBLE(AA(J)))
            XMA=MAX(XMA,DBLE(XNTG(J)))
510       CONTINUE
          IF (IATM.EQ.1) ISY=14
          IF (IATM.GE.2) ISY=113+IATM
          CALL KURVEF (XNTG,AA,JJJ,ISY)
520     CONTINUE
      ENDIF
C
      IF (TRCSIG) THEN
        WRITE (6,*) 'ENERGY (EV): ',PEN
        WRITE (6,*)  'J,XNTG(J),(ARGST(IATM,J),IATM=1,NATMI)'
        DO 530 J=1,JJJ
530       WRITE (6,*) J,XNTG(J),(ARGST(IATM,J),IATM=1,NATMI)
      ENDIF
C
      RETURN
C
990   CONTINUE
      CALL MASAGE ('ERROR IN LININT, STEP SIZE.LE.0. OR UNDEFINED  ')
      CALL MASR3 ('ZDT1,ZTST,ZDS=     ',ZDT1,ZTST,ZDS)
      CALL MASAGE ('INTEGRATION IN LININT IS STOPPED               ')
      CALL MASJ1 ('CHORD   ',ICHORI)
      GOTO 380
991   CONTINUE
      CALL MASAGE ('ERROR IN LININT, NRCELL OUT OF RANGE           ')
      CALL MASJ1 ('CHORD   ',ICHORI)
      CALL EXIT
995   CONTINUE
      CALL MASAGE ('ERROR IN LININT, NOT ENOUGH STORAGE FOR LINE   ')
      CALL MASAGE ('INTEGRATION. INCREASE ARRAYS XNTG,ARGST,       ')
      CALL MASAGE ('AA AND ZWORK. EXIT CALLED                      ')
      CALL EXIT
      RETURN
      END
C
      SUBROUTINE SIGCX(IFIRST,JJJ,ZDS,PEN,PSIG,TIMAX,ARGST)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C  INPUT:
C          IFIRST: FLAG FOR INITIALISATION
C          NCELL:  INDEX IN TALLY ARRAYS FOR CURRENT ZONE
C          JJJ:    INDEX OF SEGMENT ALONG CHORD
C          ZDS:    LENGTH OF SEGMENT NO. JJJ
C          PEN:    ENERGY (EV) AT WHICH CX FLUXES ARE TO BE EVALUATED
C  OUTPUT: CONTRIB. FROM CELL NCELL AND CHORD SEGMENT JJJ TO:
C          THE CX FLUX PSIG(IATM),IATM=0,NATMI OF ENERGY PEN (EV)
C          THE MAX. ION TEMP. TIMAX ALONG LINE OF SIGHT
C          THE INTEGRANT ARGST SUCH THAT INTEGR.(ARGST*DL) = PSIG
      INCLUDE 'PARMMOD'
      INCLUDE 'COMPRT'
      INCLUDE 'COMXS'
      INCLUDE 'COMSIG'
      INCLUDE 'CSPEI'
      INCLUDE 'CESTIM'
      INCLUDE 'COMUSR'
      INCLUDE 'CLOGAU'
      INCLUDE 'CUPD'
      INCLUDE 'CZT1'
      INCLUDE 'CTRCEI'
      INCLUDE 'CGRID'
      INCLUDE 'CCONA'
      INCLUDE 'CADGEO'
      INCLUDE 'CLGIN'
c slmod begin - bug?
c Line linger than 72 characters.
      DIMENSION PSIG(0:NSPZ+1),ZLAMB(0:NATM),ZARG2(0:NATM),ZARG3(0:NATM)
     .          ,
c
c      DIMENSION PSIG(0:NSPZ+1),ZLAMB(0:NATM),ZARG2(0:NATM),ZARG3(0:NATM),
c slmod end
     .          SIGTTT(0:NATM,NPLS),ARGST(0:NSPZ+1,NRAD)
      DIMENSION CFLAG(6,3)
C
      SAVE
      DATA ZMAX/40./
      IF (IFIRST.EQ.0) THEN
        TIMAX=0.
        DO 100 IATM=0,NATMI
          PSIG(IATM)=0.
          ZARG2(IATM)=0.
          ZARG3(IATM)=0.
          DO 101 ICELL=1,NSBOX
            ARGST(IATM,ICELL)=0.
101       CONTINUE
100     CONTINUE
      ELSE
C
C  MEAN FREE PATH LENGTH FOR ATTENUATION FACTOR
C  IONS IPLS WITH  (SHIFTED, VXIN,VYIN,VZIN) MAXWELLIAN
C  AT KT=TIIN(IPLS,NCELL),
C  ALL SPECIES IN PLASMA
C  ELECTRONS WITH  MAXWELLIAN AT KT=TEIN(NCELL),
C  MONOENERGETIC NEUTRAL BEAM, VELOCITY VEL (CM/SEC), SPECIES IATM
C  WITH SPEED UNIT VECTOR (-VELX,-VELY,-VELZ)
C
        DO 200 IATM=1,NATMI
          VEL=SQRT(PEN/RMASSA(IATM))*CVELAA
          VXS=VELX
          VYS=VELY
          VZS=VELZ
          VELX=-VELX
          VELY=-VELY
          VELZ=-VELZ
          ZLAMB(IATM)=FPATHA(NCELL,CFLAG)
          VELX=VXS
          VELY=VYS
          VELZ=VZS
200     CONTINUE
C
C  CX-COLLISION FREQUENCY (1/SEC)
C  MONOENERGETIC ION BEAM, ENERGY PEN (EV), SPEED UNIT VECTOR:
C  -(VELX,VELY,VELZ) AND SPECIES IPLS=1,NPLSI
C  NEUTRALS WITH MAXWELLIAN KT=2/3*EDENA/PDENA, SPECIES IATM=1,NATMI
C
        DO 300 IATM=0,NATMI
          DO 300 IPLS=1,NPLSI
            SIGTTT(IATM,IPLS)=0.
300     CONTINUE
C
        DO 311 IATM=1,NATMI
          IF (LGACX(IATM,0,0).EQ.0) GOTO 311
          IF (LGVAC(NCELL,0).OR.PDENA(IATM,NCELL).LE.0.) GOTO 311
C  DRIFTEN HIER NOCH NICHT DRIN, DAZU MITTLERE NEUTRAL DRIFTEN NOETIG
          TTARG=2./3.*EDENA(IATM,NCELL)/PDENA(IATM,NCELL)
          ZTI=TTARG*8./PIA*CVEL2A*CVEL2A
          DO 310 IACX=1,NACXI(IATM)
            IRCX=LGACX(IATM,IACX,0)
            IPLS=LGACX(IATM,IACX,1)
C
C  LOCAL ION TEMPERATURE
C
            ZTI=TIIN(IPLS,NCELL)
            TIMAX=MAX(TIMAX,ZTI)
            ZTI32=1.0/(ZTI*SQRT(ZTI))
            ZARG1=PEN/ZTI
            ZEXP1=0.
            IF(ZARG1.LE.ZMAX) ZEXP1=EXP(-ZARG1)
            ZNI=(ZEXP1*ZTI32)
C
            VEL=SQRT(PEN/RMASSP(IPLS))*CVELAA
            PVELQ0=VEL*VEL
            HEB=LOG10(PVELQ0*CVELI2)
C
            VRELQ=ZTI/RMASSA(IATM)+PVELQ0
            VREL=SQRT(VRELQ)
C  IS CX CROSS SECTION AVAILABLE ?
            IREAC=MODCOL(3,1,IATM,IPLS)
            IF (IREAC.EQ.-1.OR.IREAC.GT.0) THEN
              ELAB=LOG(VRELQ)+DEFCX(IRCX)
              CXS=CROSS(ELAB,IREAC)
              CXRATE=CXS*VREL
C
              SIGTTT(IATM,IPLS)=CXRATE*PDENA(IATM,NCELL)
            ELSE
              WRITE (6,*) 'CROSS SECTION NOT AVAILABLE IN SIGCX  '
            ENDIF
310       CONTINUE
C
311     CONTINUE
C
C  ATTENUATION FACTOR:
C  FOR ALL ATOMS WITH SPECIES INDEX IATM
        DO 400 IATM=1,NATMI
          ZARG3(IATM)=ZARG3(IATM)+ZARG2(IATM)
          ZARG2(IATM)=ZDS/ZLAMB(IATM)
          ZEXP2=0.0
          ZEXP3=0.0
          IF(ZARG2(IATM).LT.ZMAX) ZEXP2=EXP(-ZARG2(IATM))
          IF(ZARG3(IATM).LT.ZMAX) ZEXP3=EXP(-ZARG3(IATM))
          ATTENU=ZLAMB(IATM)*ZEXP3*(1-ZEXP2)
C
C  SOURCE-TERM FOR ATOMS IATM
C
C  1.) WEGEN CX  VON IONEN DER SPECIES IPLS MIT ATOMEN IAT=1,NATMI
C  2.) DIREKT  VON PRIMAERER QUELLE (Z.B.RECADD: REKOMBINATION)
C  3.) DIREKT  VON SEKUNDAERER QUELLE (Z.B. DURCH WANDREKOMBINATION
C                                           HIERHER GESTREUT)
C
          SIGADD=0.
CVL       SIGADD=RECADD(IATM,NCELL)
          DO 410 IPLS=1,NPLSI
c slmod begin - bug?
c Should IAT be IATM?
            SIGADD=SIGTTT(IATM,IPLS)*DIIN(IPLS,NCELL)+SIGADD
c
c            SIGADD=SIGTTT(IAT,IPLS)*DIIN(IPLS,NCELL)+SIGADD
c slmod end
410       CONTINUE
          ARGU=ZNI*SIGADD
          PSIG(IATM)=PSIG(IATM)+ARGU*ATTENU
          ARGST(IATM,JJJ)=ARGU*ZEXP3*SQRT(ZEXP2*PEN)/11.137
400     CONTINUE
C
      ENDIF
      RETURN
      END
C
      SUBROUTINE SIGHA(IFIRST,JJJ,ZDS,DUMMY1,PSIG,DUMMY2,ARGST)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C  INPUT:
C          IFIRST: FLAG FOR INITIALISATION
C          NCELL:   INDEX IN TALLY ARRAYS FOR CURRENT ZONE
C          JJJ:    INDEX OF SEGMENT ALONG CHORD
C          ZDS:    LENGTH OF SEGMENT NO. JJJ
C  OUTPUT: CONTRIB. FROM CELL NCELL AND CHORD SEGMENT JJJ TO:
C          THE H ALPHA FLUX PSIG(I),I=0,4 CONTRIBUTIONS
C          FROM ATOMS, MOLECULES, TEST IONS AND BULK IONS
C          THE INTEGRANT ARGST SUCH THAT INTEGR.(ARGST*DL) = PSIG
      INCLUDE 'PARMMOD'
      INCLUDE 'COMPRT'
      INCLUDE 'CSPEI'
      INCLUDE 'CESTIM'
      INCLUDE 'COMUSR'
      INCLUDE 'COMSOU'
      INCLUDE 'CLOGAU'
      INCLUDE 'COMXS'
      INCLUDE 'COMSIG'
      INCLUDE 'CUPD'
      INCLUDE 'CZT1'
      INCLUDE 'CTRCEI'
      INCLUDE 'CGRID'
      INCLUDE 'CCONA'
      INCLUDE 'CADGEO'
      INCLUDE 'CLGIN'
      INCLUDE 'CSDVI'
      INCLUDE 'CSDVI_BGK'
      INCLUDE 'CSDVI_COP'
      INCLUDE 'COUTAU'
      DIMENSION PSIG(0:NSPZ+1),ARGST(0:NSPZ+1,NRAD)
      DIMENSION OUTAU(NOUTAU),ESTIM(NESTIM),SDVI(NSDVI),
     .          SDVI_BGK(NSBGK),SDVI_COP(NSCOP)
      EQUIVALENCE
     .  (OUTAU(1),PDENAI(0,0)),
     .  (ESTIM(1),PDENA(1,1)),
     .  (SDVI(1),SIGMA(1,1)),
     .  (SDVI_BGK(1),SIGMA_BGK(1,1)),
     .  (SDVI_COP(1),SIGMA_COP(1,1))
C
      DIMENSION DA31(0:8,0:8)
      DIMENSION DP31(0:8,0:8)
      DIMENSION DM31(0:8,0:8)
      DIMENSION DI31(0:8,0:8)
      DIMENSION DN31(0:8,0:8)
      CHARACTER FILNAM*8,H123*4,REAC*9,CRC*3
      CHARACTER*6 CISTRA
C
      SAVE
C
      IF (IFIRST.EQ.0) THEN
        DO 100 ISPZ=0,NSPZ+1
          PSIG(ISPZ)=0.
          DO 100 ICELL=1,NSBOX
            ARGST(ISPZ,ICELL)=0.
100     CONTINUE
        IFIRST=1
        IERROR=0
C
C  READ REDUCED POPULATION COEFFICIENT FOR HYDR. ATOMS FROM FILE AMJUEL
C
        IR=NREACI+4
        IF (IR.GT.NREAC) THEN
          WRITE (6,*) 'FROM SUBROUTINE SIGHA: '
          CALL MASPRM('NREAC',5,NREAC,'IR',2,IR,IERROR)
          CALL EXIT
        ENDIF
C
        FILNAM='AMJUEL  '
        H123='H.12'
        CRC='OT '
C
        REAC='2.1.5a   '
        CALL SLREAC(NREACI+1,FILNAM,H123,REAC,CRC)
        REAC='2.1.8a   '
        CALL SLREAC(NREACI+2,FILNAM,H123,REAC,CRC)
        REAC='2.2.5a   '
        CALL SLREAC(NREACI+3,FILNAM,H123,REAC,CRC)
        REAC='2.2.14a  '
        CALL SLREAC(NREACI+4,FILNAM,H123,REAC,CRC)
C
        DO 123 J=1,9
        DO 123 I=1,9
          DA31(J-1,I-1)=CREAC(J,I,NREACI+1)
          DP31(J-1,I-1)=CREAC(J,I,NREACI+2)
          DM31(J-1,I-1)=CREAC(J,I,NREACI+3)
          DI31(J-1,I-1)=CREAC(J,I,NREACI+4)
123     CONTINUE
C
      ELSE
C
C  LOCAL PLASMA DATA
C
        TE=TEIN(NCELL)
        DE=DEIN(NCELL)
        SIGADD1=0.
        SIGADD2=0.
        SIGADD3=0.
        SIGADD4=0.
        IF (LGVAC(NCELL,0)) GOTO 500
        DEF=LOG(DE*1.D-8)
        TEF=LOG(TE)
        DATM3=0.
        DPLS3=0.
        DMOL3=0.
        DION3=0.
        DO 150 J=0,8
          DEJ=DEF**J
          DO 150 I=0,8
            TEI=TEF**I
            DATM3=DATM3+DA31(I,J)*TEI*DEJ
            DPLS3=DPLS3+DP31(I,J)*TEI*DEJ
            DMOL3=DMOL3+DM31(I,J)*TEI*DEJ
            DION3=DION3+DI31(I,J)*TEI*DEJ
150     CONTINUE
        DATM3=EXP(DATM3)
        DPLS3=EXP(DPLS3)
        DMOL3=EXP(DMOL3)
        DION3=EXP(DION3)
C
        DO 200 IATM=1,NATMI
C  HYDROGENIC SPECIES?
          IF (NCHARA(IATM).NE.1) GOTO 200
C
C  H ALPHA SOURCE RATE:  PHOTONS/SEC/CM**3
C  LINEAR IN PDENA (IONIZATION)
C
          DA=DATM3*PDENA(IATM,NCELL)
C  RADIATIVE TRANSITION PROB. LEVEL 3-->2 (1/SEC)
          FAC32=4.410E7
C  SIGADD: PHOTONS/SEC/CM**3
          SIGADD1=SIGADD1+DA*FAC32
200     CONTINUE
C
C  H ALPHA SOURCE RATE:  PHOTONS/SEC/CM**3
C  LINEAR IN DIIN (RECOMBINATION)
C
        DO 205 IPLS=1,NPLSI
          IF (NCHARP(IPLS).NE.1) GOTO 205
          DP=DPLS3*DIIN(IPLS,NCELL)
C  RADIATIVE TRANSITION PROB. LEVEL 3-->2 (1/SEC)
          FAC32=4.410E7
C  SIGADD: PHOTONS/SEC/CM**3
          SIGADD2=SIGADD2+DP*FAC32
205     CONTINUE
C
C  H ALPHA SOURCE RATE:  PHOTONS/SEC/CM**3
C  LINEAR IN PDENM:
C
        DO 210 IMOL=1,NMOLI
          IF (NCHARM(IMOL).NE.2) GOTO 210
          DM=DMOL3*PDENM(IMOL,NCELL)
C  RADIATIVE TRANSITION PROB. LEVEL 3-->2 (1/SEC)
          FAC32=4.410E7
C  SIGADD: PHOTONS/SEC/CM**3
          SIGADD3=SIGADD3+DM*FAC32
210     CONTINUE
C
C  H ALPHA SOURCE RATE:  PHOTONS/SEC/CM**3
C  LINEAR IN PDENI:
C
        DO 215 IION=1,NIONI
          IF (NCHARI(IION).NE.2) GOTO 215
          DI=DION3*PDENI(IION,NCELL)
C  RADIATIVE TRANSITION PROB. LEVEL 3-->2 (1/SEC)
          FAC32=4.410E7
C  SIGADD: PHOTONS/SEC/CM**3
          SIGADD4=SIGADD4+DI*FAC32
215     CONTINUE
C
500     CONTINUE
C
C  LINE INTEGRAL: PHOTONS/SEC/CM**2
C
        PSIG(1)=PSIG(1)+ZDS*SIGADD1
        PSIG(2)=PSIG(2)+ZDS*SIGADD2
        PSIG(3)=PSIG(3)+ZDS*SIGADD3
        PSIG(4)=PSIG(4)+ZDS*SIGADD4
        PSIG(0)=PSIG(0)+ZDS*(SIGADD1+SIGADD2+SIGADD3+SIGADD4)
        ARGST(1,JJJ)=SIGADD1
        ARGST(2,JJJ)=SIGADD2
        ARGST(3,JJJ)=SIGADD3
        ARGST(4,JJJ)=SIGADD4
        ARGST(0,JJJ)=SIGADD1+SIGADD2+SIGADD3+SIGADD4
C
      ENDIF
      RETURN
      END
C
      SUBROUTINE SIGTST(IFIRST,JJJ,ZDS,DUMMY1,PSIG,DUMMY2,ARGST)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C  ONLY FOR TESTING LINE INTEGRAL ROUTINES
C  INPUT:
C          IFIRST: FLAG FOR INITIALISATION
C          JJJ:    INDEX OF SEGMENT ALONG CHORD
C          ZDS:    LENGTH OF SEGMENT NO. JJJ
      INCLUDE 'PARMMOD'
      INCLUDE 'COMPRT'
      DIMENSION PSIG(0:NSPZ+1),ARGST(0:NSPZ+1,NRAD)
      SAVE
C
      DO 100 ISPZ=0,NSPZ+1
        PSIG(ISPZ)=0.
        DO 100 ICELL=1,NRAD
          ARGST(ISPZ,ICELL)=0.
100   CONTINUE
C
      WRITE (6,*) 'FROM SIGTST ',JJJ,ZDS,NRCELL,NPCELL,NTCELL,NACELL
      RETURN
      END
C
C*DK SLOPE
      FUNCTION SLOPE(KN,JCH,NN,EN,BU,N,M)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
C     CALCULATE SLOPE OF STRAIGHT LINE
      DIMENSION EN(M),BU(N,M)
C
      ZSUM1=0.0
      ZSUM2=0.0
      ZSUM3=0.0
      ZSUM4=0.0
C
      FKN=KN
      DO 101 J=1,KN
        ZX=EN(NN+J-1)
        ZY=BU(JCH,NN+J-1)
C
        ZSUM1=ZSUM1+ZX*ZY
        ZSUM2=ZSUM2+ZX
        ZSUM3=ZSUM3+ZY
        ZSUM4=ZSUM4+ZX*ZX
101   CONTINUE
C
      SLOPE=(FKN*ZSUM1-ZSUM2*ZSUM3)/(FKN*ZSUM4-ZSUM2*ZSUM2)
C
      RETURN
      END
C
C
C*DK OUTSIG
      SUBROUTINE OUTSIG(ENSAVE)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      INCLUDE 'PARMMOD'
      INCLUDE 'COMSIG'
      INCLUDE 'CLOGAU'
      INCLUDE 'CPLOT'
      INCLUDE 'COMUSR'
      INCLUDE 'CTEXT'
      DIMENSION ENSAVE(NCHOR,NCHEN)
      REAL*4 XPLEN(NCHEN),DUMFFS(NCHEN)
      DIMENSION           DUMFFD(NCHEN)
c slmod begin - bug?
c TEXTS is already declaired in COMUSR.  TEXTA is not declaired as an array
c anywhere.
      CHARACTER*8 TSAFE,TEXTS2,TEXTA
      DATA TEXTS2,TEXTA /'SUM     ','        '/
c
c      CHARACTER*8 TSAFE,TEXTS
c      DATA TEXTS /'SUM     '/
c slmod end
C
      CALL PAGE
      NCHNI=IABS(NCHENI)
c slmod begin - bug?
      TSAFE=TEXTA
c
c      TSAFE=TEXTA(1)
c slmod end
      IDET=0
      ICURV=0
      DO 100  ICHORI=1,NCHORI
C
C  NEW HEADING ?
        IF (NCHTAL(ICHORI).EQ.IDET) GOTO 102
        IDET=NCHTAL(ICHORI)
        CALL LEER(2)
        IF (NCHTAL(ICHORI).EQ.1) THEN
          CALL HEADNG('CX-DETECTOR SIGNALS, MAXW. NEUTRL. DISTR.',41)
        ELSEIF (NCHTAL(ICHORI).EQ.2) THEN
          CALL HEADNG('H ALPHA-DETECTOR SIGNALS',24)
        ELSEIF (NCHTAL(ICHORI).EQ.3) THEN
          CALL HEADNG('USER DEFINED LINE INTEGRAL (SUBR. SIGUSR)',41)
        ELSE
          CALL HEADNG('LINE INTEGRAL TESTING OPTION: NO SIGNALS)',41)
        ENDIF
        CALL LEER(2)
C
102     CONTINUE
        CALL MASAGE ('NUMBER OF DETECTOR                           ')
        CALL MASJ1 ('ICHORI =',ICHORI)
        WRITE (6,*) TXTSIG(ICHORI)
        CALL LEER(1)
        CALL MASR3 ('1ST POINT,"PIVOT POINT" ',
     .               XPIVOT(ICHORI),YPIVOT(ICHORI),ZPIVOT(ICHORI))
        CALL MASR3 ('2ND POINT, INSIDE VOLUME',
     .               XCHORD(ICHORI),YCHORD(ICHORI),ZCHORD(ICHORI))
        DO 30 I=1,NCHNI
          ENERGY(I)=ENSAVE(ICHORI,I)
30      CONTINUE
C
C
        IF (NCHTAL(ICHORI).EQ.1.OR.NCHTAL(ICHORI).EQ.3) THEN
C
          IF (NSPSPZ(ICHORI).EQ.0) THEN
c slmod begin - bug?
            TEXTA=TEXTS2
c
c            TEXTA(1)=TEXTS
c slmod end
          ENDIF
C
          DUMTIL=TILINE(ICHORI)
          DO 70 I=1,NCHNI
            AH=FUFFER(ICHORI,I)
            DUMFFS(I)=MAX(1.D-10,AH)
            DUMFFD(I)=MAX(1.D-10,AH)
            XPLEN(I)=ENERGY(I)
70        CONTINUE
          CALL MASRR2('ENERGY,CXFLUX         ',ENERGY,DUMFFD,NCHNI)
          CALL MASR1('INP. TEM.',TINP(ICHORI))
          CALL MASR1('DT. TMP.',DUMTIL)
          CALL MASAGE ('FITTING RANGE:  TIMIN,TIMAX=                 ')
          TIMI=NSPINI(ICHORI)*TINP(ICHORI)
          TIMA=NSPEND(ICHORI)*TINP(ICHORI)
          CALL MASR2 ('TIMIN,TIMAX=    ',TIMI,TIMA)
          CALL LEER(2)
C
C  PREPARE DATA FOR PLOT OF SPECTRUM NO ICHORI
          IF (PLSPEC) THEN
C  CLOSE OLD PICTURE
            IF (NSPNEW(ICHORI).EQ.1.AND.ICURV.GT.0) THEN
              CALL GRBLD(33.,24.,ISK,JSK,666.,666.,666.,666.,ICURV)
              ICURV=0
            ENDIF
C  INITALIZE NEW PICTURE
            IF (NSPNEW(ICHORI).EQ.1) THEN
              IF (NSPSCL(ICHORI).EQ.0) THEN
                ISK=101
                JSK=101
              ELSEIF (NSPSCL(ICHORI).EQ.1) THEN
                ISK=101
                JSK=-101
              ELSEIF (NSPSCL(ICHORI).EQ.2) THEN
                ISK=-101
                JSK=101
              ELSEIF (NSPSCL(ICHORI).EQ.3) THEN
                ISK=-101
                JSK=-101
              ENDIF
              CALL GRNXTB(2)
            ENDIF
C  PLOT
            ICURV=ICURV+1
            CALL KURVEF(XPLEN,DUMFFS,NCHNI,116)
          ENDIF
C
c slmod begin - bug?
          TEXTA=TSAFE
c
c          TEXTA(1)=TSAFE
c slmod end
C
        ELSEIF (NCHTAL(ICHORI).EQ.2) THEN
C
          DUMTIL=FUFFER(ICHORI,1)
          CALL MASR1('H ALPHA ',DUMTIL)
          CALL LEER(2)
        ENDIF
100   CONTINUE
      CALL LEER(2)
C
C  FINISH PLOT
C
      IF (PLSPEC.AND.ICURV.GT.0) THEN
        CALL GRBLD(33.,24.,ISK,JSK,666.,666.,666.,666.,ICURV)
      ENDIF
      RETURN
      END
C
      SUBROUTINE HALDIS(TE,FRACT)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C  INPUT: TE(EV)
C  OUTPUT: FRACT = FRACTION OF H ALPHA EMISSIONS PER PRODUCTION
C                  OF H+ THROUGH DISSOCIATION OF H2 MOLECULES
C                  FRACT= H+/PHOTON
C                  TAKEN FROM:
C                  D.HEIFETZ, ROLES OF THE ATOMIC PHYSICS OF H AND HE
C                             IN EDGE PLASMAS
C                  SPECIALISTS MEETING ON ATOMIC AND MOLECULAR DATA
C                  FOR PLASMA EDGE STUDIES; IAEA, VIENNA, 1987
      DIMENSION TED(13),FCD(13)
      DATA TED/0.,1.,2.,3.,4.,5.,10.,20.,50.,100.,200.,500.,1000./
      DATA FCD/0.,0.,17.,30.,37.,40.,45.,47.,48.5,49.,49.5,49.5,49.5/
      DO 10 J=2,13
        II=J
        IF (TED(II).GT.TE) GOTO 20
10    CONTINUE
20    IIM=II-1
      Q=(FCD(II)-FCD(IIM))/(TED(II)-TED(IIM))
      FRACT=Q*(TE-TED(IIM))+FCD(IIM)
C
      RETURN
      END
C
      FUNCTION H2ALPH(TE,LREACT)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
C  DEGAS MODEL FOR H ALPHA PRODUCTION VIA H2 DISSOCIATION
C  INPUT: TE IN EV
C
      DIMENSION  ITEMPS(2),ZA(6,2),ZB(6,2),ZTEMPS(6,2)
      SAVE
      DATA ITEMPS/6,4/
C                          LREACT=1: E + H20 -> 2H0
      DATA (ZTEMPS(I,1),I=1,6)/
     .      2.7,4.8,10.0,25.0,100.0,1.0E10/
      DATA (ZA(I,1),I=1,6)/
     .      5.1E-5,2.57E-4,5.52E-4,1.7E-3,3.57E-3,1.06E-2/
      DATA (ZB(I,1),I=1,6)/
     .      2.994,1.368,0.881,0.389,0.161,-0.076/
C                          LREACT=2: E + H2+ -> H0 + H+ +E
      DATA (ZTEMPS(I,2),I=1,4)/
     .      3.5,6.3,30.0,1.0E10/
      DATA (ZA(I,2),I=1,4)/
     .      2.1E-2,1.07E-2,3.2E-3,1.2E-2/
      DATA (ZB(I,2),I=1,4)/
     .     -0.822,-0.243,0.392,1.0E-10/
C
      ZTE=MAX(1.D0,TE)
      ZTE=MIN(ZTE,1.0D10)
      IINDEX=0
      DO 15 IT=1,ITEMPS(LREACT)
        IINDEX=IINDEX+1
        IF (ZTE.LE.ZTEMPS(IT,LREACT)) GOTO 20
15    CONTINUE
C
20    H2ALPH=ZA(IINDEX,LREACT)*ZTE**ZB(IINDEX,LREACT)
      RETURN
      END
