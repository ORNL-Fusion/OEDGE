***** Multicharge:
# dimension variables and arrays for INEL multi-charge model rates
ntev		integer	/101/	# number of temperature values
nz		integer		# number of charge states
tevb(ntev)		_real   # temperatures for rate arrays
rsi(ntev,0:nz-1)	_real	# ionization rate
rre(ntev,1:nz)		_real	# recombination rate
rpwr(ntev,0:nz)		_real	# radiative power rate
rrcx(ntev,1:nz)		_real	# CX recombination rate

c----------------------------------------------------------------------c
c----------------------------------------------------------------------c
      call inelinput
c----------------------------------------------------------------------c
c----------------------------------------------------------------------c

      subroutine inelinput
c
c     This subroutine reads INEL impurity rate information
c
      implicit none
c
c ... Common blocks:
      Use(Input)       # inelmc
      Use(Multicharge) # ntev,nz,tevb,rsi,rre,rpwr,rrcx
c
c ... Local variables:
      integer us, ios
      integer i, j, k
c
c     read in multi charge state data (e.g., file 'carbmc.dat')
c
      call gallot("Multicharge",0)
c
      call freeus (us)
      open (us, file=inelmc, form='formatted', iostat=ios,
     .      status='old')
      if (ios .ne. 0) then
         write (*,*) '*** Input file inelmc=', inelmc, ' not found'
         call kaboom(0)
      endif
c
c     ionization rate
c
      do 200 i = 1,ntev
          read(us,1000) tevb(i),(rsi(i,k),k=0,nz-1)
          do 201 k = 0,nz-1
 201         rsi(i,k) = rsi(i,k)
 200  continue
c
c     recombination rate
c
      do 210 i = 1,ntev
         read(us,1000) tevb(i),(rre(i,k),k=1,nz)
         do 211 k = 1,nz
 211        rre(i,k) = rre(i,k)
 210  continue
c
c     radiative power rate
c
      do 220 i = 1,ntev
         read(us,1001) tevb(i),(rpwr(i,k),k=0,nz)
         do 221 k = 0,nz
            rpwr(i,k) = rpwr(i,k)*1.602e-19/1.5
 221     continue
 220  continue
c
c   CX recomb. rate
c
      do 230 i = 1,ntev
         read(us,1000) tevb(i),(rrcx(i,k),k=1,nz)
         do 231 k = 1,nz
 231        rrcx(i,k) = rrcx(i,k)
 230  continue
c
c ... Scale temperature scale for multi-charge rates to code units.
      do i = 1, ntev
         tevb(i)=tevb(i)*1.602e-19
      enddo
c
      close (us)

 1000 format(7(1pe12.4))
 1001 format(8(1pe12.4))

      return
      end

c----------------------------------------------------------------------c
c----------------------------------------------------------------------c
      call imprates(te(ix,iy), izch, nzsp, kionz, krecz, kcxrz) 
c----------------------------------------------------------------------c
c----------------------------------------------------------------------c

      subroutine imprates(temp,kk,nzarg,rioniz,rrecomb,rcxrecom)
      real temp
      integer kk, nzarg
      real rioniz, rrecomb, rcxrecom
c ... Given temperature "temp" and a charge state "kk", which is less
c     than or equal to the highest state "nzarg", interpolate from
c     tabulated rates for a particular impurity of ionization,
c     recombination, and charge-exchange recombination.
c     Note:  no scaling of temperatures is done here, so temp and tevb
c     must be provided in the same set of units.
c
      Use(Multicharge)       # tevb,rsi,rre,rrcx

      integer itemp
      real xltemn, dlogte
c
      rrecomb = 0.
      rcxrecom = 0.
c
      xltemn = log10(tevb(1))
      dlogte = log10(tevb(2)) - xltemn
c
c ... Find index itemp into table such that
c        tevb(itemp) .le. temp .lt. tevb(itemp+1)
c
      itemp = int( ( log10( temp ) - xltemn ) / dlogte + 1. )
c
c ... For temperatures below minimum table temperature, extrapolate
c     downwards from table entries 1 and 2.

      itemp = max(1, itemp)
c
c ... For temperatures above maximum table temperature, extrapolate
c     upwards from table entries ntev-1 and ntev.

      itemp = min(ntev-1, itemp)
c
       if(kk .lt. nzarg)then
          rioniz = rsi(itemp,kk) + ( temp - tevb(itemp) )
     .   * ( rsi(itemp+1,kk) - rsi(itemp,kk) )
     .   / ( tevb(itemp+1) - tevb(itemp) )
          if(kk .eq. 0) return
       else
          rioniz = 0.0
       endif
c
          rrecomb = rre(itemp,kk) + ( temp - tevb(itemp) )
     .   * ( rre(itemp+1,kk) - rre(itemp,kk) )
     .   / ( tevb(itemp+1) - tevb(itemp) )
c
          rcxrecom = rrcx(itemp,kk) + ( temp - tevb(itemp) )
     .   * ( rrcx(itemp+1,kk) - rrcx(itemp,kk) )
     .   / ( tevb(itemp+1) - tevb(itemp) )

      return
      end

