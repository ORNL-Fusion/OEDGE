c     Krieger IPP 2012 - fixed INTEL name conflict: ranf->ranf_eirene
C
      SUBROUTINE REFANG (COSP,COSM,CRTXR,CRTYR,CRTZR,NMODEL,SNORM)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
C   ANGLE OF REFLECTION, GAUSSIAN, COSINE LIKE, SPECULAR OR MIXED
C   THIS ROUTINE IS USED FOR SPECIAL ANGULAR SOURCE DISTRIBUTIONS
C   FOR PRIMARY SOURCE PARTICLES (CALLED FROM SUBR. LOCATE)
C   INPUT : VELX,VELY,VELZ VIA COMPRT
C           COSP:
C           COSM:
C           CRTXR,CRTYR,CRTZR: SURFACE NORMAL VECTOR
C   OUTPUT: VELX,VELY,VELZ VIA COMPRT, AND VELX_MEAN,....,VELZ_MEAN
C
      INCLUDE 'PARMMOD'
      INCLUDE 'COMPRT'
      INCLUDE 'CCONA'
      INCLUDE 'CRAND'
      CRTXL=CRTXR
      CRTYL=CRTYR
      CRTZL=CRTZR
      IF (SNORM.GE.EPS10) THEN
        COSIN=CRTXL*VELX+CRTYL*VELY+CRTZL*VELZ
      ELSE
        COSIN=CRTX*VELX+CRTY*VELY+CRTZ*VELZ
        CRTXL=CRTX
        CRTYL=CRTY
        CRTZL=CRTZ
      ENDIF
C   AZIMUTAL ANGLE: EQUIDISTRIBUTION
      ZTHET=PI2A*RANF_EIRENE( )
      ZSTHET=SIN(ZTHET)
      ZCTHET=COS(ZTHET)
C
      IF (NMODEL.EQ.1) THEN
C   POLAR ANGLE: MODIFIED COSINE WITH CUT OFF COSM
        A=RANF_EIRENE( )
        ZCPHI=(1.-A*COSM)**COSP
      ELSE
C   POLAR ANGLE: FROM GAUSSIAN WITH CUT OFF COSM
        ICOUNT=0
410     IF (INIV2.EQ.0) CALL FGAUSS
        ZPHI=COSP*FG1(INIV2)
        INIV2=INIV2-1
        ICOUNT=ICOUNT+1
C   CUT OFF ANGLE: COSM (RADIANS)
        IF (ICOUNT.GT.1000) THEN
          WRITE (6,*) 'WARNING FROM REFANG: ICOUNT=1000 '
          GOTO 420
        ENDIF
        IF (ABS(ZPHI).GT.COSM) GOTO 410
420     ZCPHI=COS(ZPHI)
      ENDIF
C
      ZSPHI=SQRT(1.-ZCPHI*ZCPHI)
C
C  NO SPECULAR CONTRIBUTION IN MODIFIED COSINE
      VX=-ZCPHI
      VY=ZSPHI*ZCTHET
      VZ=ZSPHI*ZSTHET
C
      IF (ABS(COSIN).LT.EPS10) THEN
C  NO SPECIFIED DIRECTION, EG. POINT ISOTROPIC SOURCE
        VELX=VX
        VELY=VY
        VELZ=VZ
      ELSE
C  ROTATE, TO ACCOUNT FOR SURFACE NORMAL VECTOR CRTXL,CRTYL,CRTZL
        CALL ROTATF (VELX,VELY,VELZ,VX,VY,VZ,CRTXL,CRTYL,CRTZL)
      ENDIF
C
      VELX_MEAN=VELX
      VELY_MEAN=VELY
      VELZ_MEAN=VELZ
C
      RETURN
      END
C
      SUBROUTINE SPUTER
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C  INPUT:
C    FMASS: MASS NUMBER OF PROJECTILE
C    FCHAR: NUCLEAR CHARGE NUMBER OF PROJECTILE
C    ISPZ : SPECIES INDEX OF PROJECTILE
C    IGASS: SPECIES INDEX FLAG FOR SPUTTERED PARTICLE
C  OUTPUT:
C      YIELD1: THE PHYSICAL SPUTTERING YIELD PER INCIDENT PARTICLE
C      MODPYS = 1:  TRIM (TO BE WRITTEN)
C      MODPYS = 2:  ROTH/BOHDANSKY/HARRISON MODEL: TARGET: CARBON
C                   J.ROTH IN: PHYS. OF PLASMA WALL INTERACTIONS IN
C      MODPYS = 3:  USER SUPPLIED SPUTTER MODEL, CALL SPTUSR
C
C      YIELD2: THE CHEMICAL SPUTTERING YIELD PER INCIDENT PARTICLE
C      MODCHM = 1:  TO BE WRITTEN
C
C    ITSPUT: TYPE OF SPUTTERED PARTICLE
C    ISSPUT: SPECIES OF SPUTTERED PARTICLE
C    ESPUT: ENERGY OF SPUTTERED PARTICLE
C    VSPUT: VELOCITY OF SPUTTERED PARTICLE
C    VXSPUT:
C    VYSPUT:   UNIT SPEED VECTOR OF SPUTTERED PARTICLE
C    VZSPUT:
C
      INCLUDE 'PARMMOD'
      INCLUDE 'COMPRT'
      INCLUDE 'CADGEO'
      INCLUDE 'COMUSR'
      INCLUDE 'CZT1'
      INCLUDE 'CLGIN'
      INCLUDE 'CCONA'
      INCLUDE 'CTRCEI'
C
C  DATA FOR PHYSICAL SPUTTERING: IDENTIFY TARGET-PROJECTIL
      REAL      ETH(28,11),Q(28,11),M2M1(28,11),ES(28)
      INTEGER   ETF(28,11)
      REAL      D(3),EDAM(3),EDES(3)
      INTEGER   NPROJ(11),NTARG(28),NTAMU(28)
      INTEGER   IPROJ(NSPZ),IPROJS(NSPZ),ITARG(NLIMPS)
      CHARACTER*20 TTARG(28)
      CHARACTER*8 TEXT
      DATA NTARG/703,904,1105,1206,2713,2814,4822,5123,
     .           5224,5525,5626,5927,5928,6429,7031,7332,
     .           9140,9341,9642,10646,10847,11549,18173,
     .           18474,19578,19779,20782,23892/
      DATA NPROJ/1,2,3,4,12,16,0,20,40,84,131/
      DATA TTARG/'LITHIUM             ','BERYLLIUM           ',
     .           'BOR                 ','GRAPHITE            ',
     .           'ALUMINIUM           ','SILIZIUM            ',
     .           'TITANIUM            ','VANADIUM            ',
     .           'CHROMIUM            ','MANGANESE           ',
     .           'IRON                ','COBALT              ',
     .           'NICKEL              ','COPPER              ',
     .           'GALLIUM             ','GERMANIUM           ',
     .           'ZIRCONIUM           ','NIOBIUM             ',
     .           'MOLYBDENUM          ','PALADIUM            ',
     .           'SILVER              ','INDIUM              ',
     .           'TANTALUM            ','TUNGSTEN            ',
     .           'PLATINUM            ','GOLD                ',
     .           'LEAD                ','URANIUM             '/
c
c      DATA TTARG/'LITHIUM             ',
c     .           'BERYLLIUM           ',
c     .           'BOR                 ',
c     .           'GRAPHITE            ',
c     .           'ALUMINIUM           ',
c     .           'SILIZIUM            ',
c     .           'TITANIUM            ',
c     .           'VANADIUM            ',
c     .           'CHROMIUM            ',
c     .           'MANGANESE           ',
c     .           'IRON                ',
c     .           'COBALT              ',
c     .           'NICKEL              ',
c     .           'COPPER              ',
c     .           'GALLIUM             ',
c     .           'GERMANIUM           ',
c     .           'ZIRCONIUM           ',
c     .           'NIOBIUM             ',
c     .           'MOLYBDENUM          ',
c     .           'PALADIUM            ',
c     .           'SILVER              ',
c     .           'INDIUM              ',
c     .           'TANTALUM            ',
c     .           'TUNGSTEN            ',
c     .           'PLATINUM            ',
c     .           'GOLD                ',
c     .           'LEAD                ',
c     .           'URANIUM             '/
c slmod end
      DATA D /250.,125.,83./
      DATA EDAM /15.,15.,15./
      DATA EDES /2.,2.,2./
C  PURE CARBON
      DATA EREL /1.8/
C  SI,TI,W DOPED CARBON
C     DATA EREL /1.5/
C  B DOPED CARBON
C     DATA EREL /1.2/
      SAVE
C
      ENTRY SPUTR0
C
C  INITIALIZE SPUTER OPTION MODPYS=2
C
      OPEN (UNIT=33,FILE='SPUTER')
      READ(33,*)
      READ(33,*)
      READ(33,*)
      READ(33,*)
      READ(33,*)
      READ(33,*)
      READ(33,*)
      DO I28=1,28
        READ(33,*)
        READ(33,*)
        READ(33,'(4X,E5.2)') ES(I28)
        READ(33,'(12X,11(E8.2,1X))') (M2M1(I28,I11),I11=1,11)
        READ(33,'(12X,11(I8,  1X))') (ETF(I28,I11),I11=1,11)
        READ(33,'(12X,11(E8.2,1X))') (ETH(I28,I11),I11=1,11)
        READ(33,'(12X,11(E8.2,1X))') (Q(I28,I11),I11=1,11)
      ENDDO
      CLOSE (UNIT=33)

C  ASSIGN SPUTER DATA TO EIRENE PROJECTILE-TARGET COMBINATIONS
C  FOR THIS PARTICULAR RUN
C
C  SELF SPUTTERING: IDENTIFY TARGET ATOMIC MASS NUMBER
      DO IT=1,28
        NTAMU(IT)=NTARG(IT)/100
      ENDDO
C
C  SPUTTERING BY ATOMS
      DO 10 ISP=1,NATMI
        IAT=ISP
        IPROJ(ISP)=0
        IPROJS(ISP)=0
C  TEST: MOLECULE OR SINGLE ATOM?
        IF (NPRT(ISP).NE.1) GOTO 10
        DO IP=1,11
          IF (NMASSA(IAT).EQ.NPROJ(IP)) IPROJ(ISP)=IP
        ENDDO
C  ANY TARGET DATA FOR SELF SPUTTERING WITH IAT?
        DO IT=1,28
          IF (NMASSA(IAT).EQ.NTAMU(IT)) IPROJS(ISP)=IT
        ENDDO
10    CONTINUE
C
C  SPUTTERING BY MOLECULES
      DO 20 ISP=NATMI+1,NATMI+NMOLI
        IPROJ(ISP)=0
        IPROJS(ISP)=0
20    CONTINUE
C
C  SPUTTERING BY TEST IONS
      DO 30 ISP=NATMI+NMOLI+1,NATMI+NMOLI+NIONI
        IIO=ISP-NATMI-NMOLI
        IPROJ(ISP)=0
        IPROJS(ISP)=0
C  TEST: MOLECULE OR SINGLE ATOM?
        IF (NPRT(ISP).NE.1) GOTO 30
        DO IP=1,11
          IF (NMASSI(IIO).EQ.NPROJ(IP)) IPROJ(ISP)=IP
        ENDDO
C  ANY TARGET DATA FOR SELF SPUTTERING WITH IIO?
        DO IT=1,28
          IF (NMASSI(IIO).EQ.NTAMU(IT)) IPROJS(ISP)=IT
        ENDDO
30    CONTINUE
C
C  SPUTTERING BY BULK IONS
      DO 40 ISP=NATMI+NMOLI+NIONI+1,NATMI+NMOLI+NIONI+NPLSI
        IPL=ISP-NATMI-NMOLI-NIONI
        IPROJ(ISP)=0
        IPROJS(ISP)=0
C  TEST: MOLECULE OR SINGLE ATOM?
        IF (NPRT(ISP).NE.1) GOTO 40
        DO IP=1,11
          IF (NMASSP(IPL).EQ.NPROJ(IP))
     .    IPROJ(ISP)=IP
        ENDDO
C  ANY TARGET DATA FOR SELF SPUTTERING WITH IPL?
        DO IT=1,28
          IF (NMASSP(IPL).EQ.NTAMU(IT))
     .    IPROJS(ISP)=IT
        ENDDO
40    CONTINUE

      DO ILIM=1,NLIMI
        NT=100.*ZNML(ILIM)+ZNCL(ILIM)+EPS10
        ITARG(ILIM)=0
        DO IT=1,28
          IF (NT.EQ.NTARG(IT)) ITARG(ILIM)=IT
        ENDDO
      ENDDO
      DO ILIM=NLIM+1,NLIM+NSTSI
        NT=100.*ZNML(ILIM)+ZNCL(ILIM)+EPS10
        ITARG(ILIM)=0
        DO IT=1,28
          IF (NT.EQ.NTARG(IT)) ITARG(ILIM)=IT
        ENDDO
      ENDDO
C
      IF (TRCREF) THEN
        WRITE (6,*) 'PRINTOUT FROM SUBR. SPUTER, AFTER INITIALISATION'
C
        WRITE (6,*)
        WRITE (6,*) 'ISPZ,IPROJ(ISPZ),IPROJS(ISPZ)'
        DO ISP=1,NSPTOT
          WRITE (6,*) TEXTS(ISP),IPROJ(ISP),IPROJS(ISP)
        ENDDO
        WRITE (6,*)
        WRITE (6,*) 'SURFACE NUMBER, TARGET MATERIAL'
        DO ILIM=1,NLIMI
          WRITE (6,*) ILIM,TTARG(ITARG(ILIM))
        ENDDO
        DO ISTSI=1,NSTSI
          WRITE (6,*) -ISTSI,TTARG(ITARG(NLIM+ISTSI))
        ENDDO
        WRITE (6,*)
C       DO I28=1,28
C         DO I11=1,11
C           WRITE (6,*) NTARG(I28),NPROJ(I11)
C           WRITE (6,*) 'ES   ',ES(I28)
C           WRITE (6,*) 'M2M1 ',M2M1(I28,I11)
C           WRITE (6,*) 'ETF  ',ETF(I28,I11)
C           WRITE (6,*) 'ETH  ',ETH(I28,I11)
C           WRITE (6,*) 'Q    ',Q(I28,I11)
C           WRITE (6,*)
C         ENDDO
C       ENDDO
      ENDIF
C
      CALL SP0USR
C
      RETURN
C
      ENTRY SPUTR1(WMIN,FMASS,FCHAR,FLX,
     .             IGASP,
     .             YIELD1,
     .             ISPZP,ESPTP,VSPTP,VXSPTP,VYSPTP,VZSPTP,
     .             IGASC,
     .             YIELD2,
     .             ISPZC,ESPTC,VSPTC,VXSPTC,VYSPTC,VZSPTC)
C
C  SURFACE NUMBER :  MSURF  (MSURF=0: DEFAULT MODEL)
C  SPECIES INDEX  :  ISPZ
C  IDENTIFY PROJECTILE AND TARGET
C
      ITA=ITARG(MSURF)
      IPS=IPROJS(ISPZ)
      IF (IPS.GT.0.AND.IPS.EQ.ITA) THEN
        IPR=7
      ELSE
        IPR=IPROJ(ISPZ)
      ENDIF
C
      MODPYS=ISPUT(1,MSURF)
      MODCHM=ISPUT(2,MSURF)
      ENWALL=EWALL(MSURF)
      IF (ENWALL.GT.0.D0) THEN
        TWALL=ENWALL*0.66667
      ELSE
        TWALL=-ENWALL
      ENDIF
C  TENTATIVELY ASSUME: NO SPUTTERED PARTICLES
      YIELD1=0.D0
      YIELD2=0.D0
      ISPZP=0
      ISPZC=0
C
      SE=0.D0
C
      COSIN=CRTX*VELX+CRTY*VELY+CRTZ*VELZ
      IF (COSIN.LE.0.D0) GOTO 999
C
C  NO PHYSICAL SPUTTERING?
C
      IF (MODPYS.LE.0) GOTO 5000
C
C  FIRST: PHYSICAL SPUTTERING AND SUBLIMATION
C
      IF (MODPYS.EQ.1) THEN
C
C  CONSTANT SPUTTER YIELD: RECYCS
        YIELD1=RECYCS(ISPZ,MSURF)
C
C  FIND TYPE AND SPECIES INDEX OF SPUTTERED PARTICLE
C
        IF (YIELD1.GT.0.D0.AND.IGASP.GT.0.AND.IGASP.LE.NATMI) THEN
          ITYPP=1
          IATMP=IGASP
          ISPZP=IATMP
        ELSE
          GOTO 5000
        ENDIF
C
C  COMPUTE SURFACE BINDING ENERGY U0(IFLAG) FROM ETH(IFLAG) FOR THOMPSON
C  DISTRIBUTION
C
        GAMMA=4.*FMASS*ZNML(MSURF)/(FMASS+ZNML(MSURF))**2
        EMAX=GAMMA*E0
        UB=ES(ITA)
        ESPTP=THOMP(UB,EMAX)
        RSQDV=RSQDVA(IATMP)
        GOTO 1000
C
      ELSEIF (MODPYS.EQ.2) THEN
C
C   ECKSTEIN/ROTH/BOHDANSKY/MODEL: IPP 9/82, FEB. 1993
C
        IF (IPR.GT.0.AND.ITA.GT.0) THEN
          PRFCS=RECYCS(ISPZ,MSURF)
          ETHE0=ETH(ITA,IPR)/E0
C  NO SPUTTERING BELOW THRESHOLD
          IF (E0.LE.ETH(ITA,IPR).OR.PRFCS.LE.0.D0) GOTO 5000
          E0ETF=E0/ETF(ITA,IPR)
          SQE=SQRT(E0ETF)
C  YIELD FACTOR FOR PHYS. SPUTTERING
          QQP=Q(ITA,IPR)
C  YIELD FACTOR FOR SUBLIMATION
          QQS=0.
c         IF (IFLAG.EQ.2) THEN
c           QQS=54.*FMASS**1.2*EXP(-0.78/TWALL)
c         ENDIF
          F1=(QQP+QQS)*(1.-ETHE0**0.666667)*(1.-ETHE0)**2
c  replace Thomas-Fermi potential by Kr-C potential
c  Thomas-Fermi potential
c         F2=3.441*SQE*LOG(E0ETF+2.718)
c         F3=1.+6.355*SQE+E0ETF*(6.882*SQE-1.708)
c  Kr-C potential
          F2=0.5*LOG(1.+1.2288*E0ETF)
          F3=E0ETF+0.1728*SQE+0.008*E0ETF**0.1504
C
          SE=F2/F3
          YIELD1=F1*SE
          YIELD1=MAX(0.D0,YIELD1)*PRFCS
C INCIDENT ANGULAR DEPENDENCE OF YIELD: YAMAMURA FIT: LOC.CIT.,P 10
C MAXIMUM (ABOUT: 3.36) AT COSIN=0.26.
C ANGFAC -->0. FOR COSIN -->0.
C ANGFAC -->1. FOR COSIN -->1.
C         AOPT=75.
C         CAOPT=COS(AOPT*PIA/180.D0)
          CAOPT=0.26
          F=2.
          ANGFAC=COSIN**(-F)*EXP(F*(1.-1./COSIN)*CAOPT)
          YIELD1=YIELD1*ANGFAC
        ENDIF
C
C  FIND TYPE AND SPECIES INDEX OF SPUTTERED PARTICLE
C
        IF (YIELD1.GT.0.D0.AND.IGASP.GT.0.AND.IGASP.LE.NATMI) THEN
          ITYPP=1
          IATMP=IGASP
          ISPZP=IATMP
        ELSE
          GOTO 5000
        ENDIF
C
C  SAMPLE ENERGY FROM THOMPSON DISTRIBUTION IN CASE OF PHYS. SPUTTERING
C  USE ENERGY AND ANGULAR DISTRIBUTION SAME AS FOR CHEMICAL SPUTTERING
C  IN CASE OF RADIATION ENHANCED SUBLIMATION
C
        IF (QQS.GT.0.D0) THEN
          RT=QQS/(QQS+QQP)
          IF (RANF_EIRENE( ).LE.RT) THEN
            RSQDV=RSQDVA(IATMP)
            CVRSS=CVRSSA(IATMP)
            ESPTP=ENWALL
            GOTO 1000
          ENDIF
        ENDIF
C
C  COMPUTE SURFACE BINDING ENERGY U0(IFLAG) FROM ETH(IFLAG) FOR THOMPSON
C  DISTRIBUTION
C
        GAMMA=4.*FMASS*ZNML(MSURF)/(FMASS+ZNML(MSURF))**2
        EMAX=GAMMA*E0
        UB=ES(ITA)
        ESPTP=THOMP(UB,EMAX)
        RSQDV=RSQDVA(IATMP)
        GOTO 1000
C
      ELSEIF (MODPYS.EQ.3) THEN
C  USER SUPPLIED SPUTER MODEL
        CALL SP1USR
C
      ENDIF
C
C  ANGULAR DISTRIBUTIONS
C
1000  CONTINUE
C
      IF (ESPTP.LE.0.D0) GOTO 1100
C
      VSPTP=RSQDV*SQRT(ESPTP)
C
C  SAMPLE SPEED VECTOR FROM COSINE
C
C  AZIMUTAL ANGLE: EQUIDISTRIBUTION
      ZTHET=PI2A*RANF_EIRENE( )
      ZSTHET=SIN(ZTHET)
      ZCTHET=COS(ZTHET)
C  POLAR ANGLE: COSINE
      A=RANF_EIRENE( )
      ZCPHI=SQRT(A)
      ZSPHI=SQRT(1.-A)
      VX=-ZCPHI
      VY=ZSPHI*ZSTHET
      VZ=ZSPHI*ZCTHET
      CALL ROTATF (VXSPTP,VYSPTP,VZSPTP,VX,VY,VZ,CRTX,CRTY,CRTZ)
      GOTO 5000
C
1100  CONTINUE
C  SAMPLE FROM MAXWELLIAN FLUX AROUND INNER (!) NORMAL AT TEMP. TW (EV)
      CALL VELOCS (TWALL,0.D0,0.D0,0.D0,0.D0,0.D0,RSQDV,CVRSS,
     .             -CRTX,-CRTY,-CRTZ,
     .             ESPTP,VXSPTP,VYSPTP,VZSPTP,VSPTP)
C
2000  CONTINUE
C
C   PHYSICAL SPUTTERING DONE
C
C   CHEMICAL SPUTTERING, REEMITTED PARTICLES ARE COSINE DISTRIBUTED AND
C   THERMAL
C
5000  CONTINUE
C
C  NO CHEMICAL SPUTTERING?
C
      IF (MODCHM.LE.0) RETURN
C
      IF (MODCHM.EQ.1) THEN
C
C  CONSTANT SPUTTER YIELD: RECYCS
        YIELD2=RECYCC(ISPZ,MSURF)
C
C  FIND TYPE AND SPECIES OF CHEM. SPUTTERED MOLECULE
C
        IS=IGASC
        IF (IS.LT.0.AND.IS.GE.-NMOLI) IS=NATMI-IS
        IF (YIELD2.GT.0.D0.AND.IS.GT.0.AND.IS.LE.NATMI+NMOLI) THEN
          ISPZC=IS
          IF (ISPZC.GT.NATMI) THEN
            ITYPC=2
            IMOLC=IS-NATMI
          ELSE
            ITYPC=1
            IATMC=IS
          ENDIF
        ELSE
          GOTO 20000
        ENDIF
C
      ELSEIF (MODCHM.EQ.2) THEN
C
C   ROTH/PACHER MODEL: PSI 1998, SAN DIEGO (J.NUCL.MAT)
C
        IF (IPR.GT.0.AND.IPR.LE.3.AND.ITA.EQ.4) THEN
          PRFCC=RECYCC(ISPZ,MSURF)
C  TO BE WRITTEN: SAMPLE ETHERM FROM GAUSSIAN, MEAN: 1.7, SIGMA 0.3
          ETHERM=1.7
          ETHEKT=EXP(-ETHERM/TWALL)
C
          ERELKT=EXP(-EREL/TWALL)
C  EXPRESSION 1 FOR C
          C=1./(1.+3.D+7*EXP(-1.4/TWALL))
C  EXPRESSION 2 FOR C
C         C=1./(1.+3.D-23*FLX)
C
          YTHERM=0.
          G2=ETHEKT
          G3=ETHEKT
          IF (FLX.GT.0.) THEN
            G2=2.D-32*FLX+ETHEKT
            G3=2.D-32*FLX+(1.+2.D+29/FLX*ERELKT)*ETHEKT
            YTHERM=C/G3*0.033*ETHEKT
          ENDIF
          IF (SE.GT.0.) THEN
            QSE=QQP*SE
          ELSE
c  Kr-C potential
            E0ETF=E0/ETF(ITA,IPR)
            F2=0.5*LOG(1.+1.2288*E0ETF)
            F3=E0ETF+0.1728*SQE+0.008*E0ETF**0.1504
            QSE=Q(ITA,IPR)*F2/F3
          ENDIF
          EDAME0=EDAM(IPR)/E0
          EDESE0=EDES(IPR)/E0
          YDAM=0.
          IF (E0.GE.EDAM(IPR))
     .    YDAM=QSE*(1.-EDAME0**0.666667)*(1.-EDAME0)*(1.-EDAME0)
C
          YDES=0.
          IF (E0.GE.EDES(IPR))
     .    YDES=QSE*(1.-EDESE0**0.666667)*(1.-EDESE0)*(1.-EDESE0)
C
          YSURF=C*G2/G3*YDES/(1.+EXP((E0-65.)/40.))
          YIELD2=YTHERM*(1.+D(IPR)*YDAM)+YSURF
          YIELD2=MAX(0.D0,YIELD2)*PRFCC
        ELSE
C  NO CHEM. SPUTTERING DATA FOR THIS TARGET-PROJECTILE COMBINATION
          GOTO 20000
        ENDIF
C
C  FIND TYPE AND SPECIES OF CHEM. SPUTTERED MOLECULE
C
        IS=IGASC
        IF (IS.LT.0.AND.IS.GE.-NMOLI) IS=NATMI-IS
        IF (YIELD2.GT.0.D0.AND.IS.GT.0.AND.IS.LE.NATMI+NMOLI) THEN
          ISPZC=IS
          IF (ISPZC.GT.NATMI) THEN
            ITYPC=2
            IMOLC=IS-NATMI
          ELSE
            ITYPC=1
            IATMC=IS
          ENDIF
        ELSE
          GOTO 20000
        ENDIF
C
      ELSEIF (MODCHM.EQ.3) THEN
C  USER SUPPLIED SPUTER MODEL
        CALL SP1USR
      ENDIF
C
      ESPTC=ENWALL
      IF (ITYPC.EQ.1) THEN
        RSQDV=RSQDVA(IATMC)
        CVRSS=CVRSSA(IATMC)
      ELSE
        RSQDV=RSQDVM(IMOLC)
        CVRSS=CVRSSM(IMOLC)
      ENDIF
C
C  ANGULAR DISTRIBUTIONS
C
10000 CONTINUE
C
      IF (ESPTC.LE.0.D0) GOTO 11000
C
      VSPTC=RSQDV*SQRT(ESPTC)
C
C  SAMPLE SPEED VECTOR FROM COSINE
C
C  AZIMUTAL ANGLE: EQUIDISTRIBUTION
      ZTHET=PI2A*RANF_EIRENE( )
      ZSTHET=SIN(ZTHET)
      ZCTHET=COS(ZTHET)
C  POLAR ANGLE: COSINE
      A=RANF_EIRENE( )
      ZCPHI=SQRT(A)
      ZSPHI=SQRT(1.-A)
      VX=-ZCPHI
      VY=ZSPHI*ZSTHET
      VZ=ZSPHI*ZCTHET
      CALL ROTATF (VXSPTC,VYSPTC,VZSPTC,VX,VY,VZ,CRTX,CRTY,CRTZ)
      RETURN
C
11000 CONTINUE
C  SAMPLE FROM MAXWELLIAN FLUX AROUND INNER (!) NORMAL AT TEMP. TW (EV)
      CALL VELOCS (TWALL,0.D0,0.D0,0.D0,0.D0,0.D0,RSQDV,CVRSS,
     .             -CRTX,-CRTY,-CRTZ,
     .             ESPTC,VXSPTC,VYSPTC,VZSPTC,VSPTC)
C
20000 RETURN
C
999   CONTINUE
      WRITE (6,*) 'ERROR IN SUBR. SPUTER: COSIN = ',COSIN
      WRITE (6,*) 'MSURF,NPANU ',MSURF,NPANU
      RETURN
      END
C
C
C       FUNCTION FPATHA(K)
C       FUNCTION FPATHM(K)
C       FUNCTION FPATHI(K)
C       FUNCTION EXTRAP(....)
C       SUBROUTINE CDEF(.....)
C       SUBROUTINE SETAMD
C       SUBROUTINE XSECTA
C       SUBROUTINE XSECTM
C       SUBROUTINE XSECTI
C       SUBROUTINE XSECTP
C
      FUNCTION FPATHA (K,CFLAG)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
C   CALCULATE MEAN FREE PATH AND REACTION RATES FOR NEUTRAL
C   "BEAM ATOMS" OF VELOCITY VEL IN MAXWELLIAN PLASMA-BACKGROUND
C   IN CELL K
C   OUTPUT: COMMON COMLCA
C           CFLAG: FLAG FOR SAMPLING OF POST COLLISION STATES
C           CFLAG(1,...): EI
C           CFLAG(3,...): CX
C           CFLAG(4,...): II
C           CFLAG(5,...): EL
C           CFLAG(6,...): RC
C
C  CFLAG(...,1):
C      =0:   VI: DELTA COLLISION IN VELOCITY SPACE (BUT DIFFERENT
C                                       SPECIES ALLOWED)
C      =1:   VI: MONOENERGETIC
C      =2:   VI: MAXWELL PLUS DRIFT
C      =3:   VI: SIGMA-V-WEIGHTED MAXWELLIAN PLUS DRIFT
      INCLUDE 'PARMMOD'
      INCLUDE 'COMPRT'
      INCLUDE 'CZT1'
      INCLUDE 'COMXS'
      INCLUDE 'COMUSR'
      INCLUDE 'CCONA'
      INCLUDE 'CLOGAU'
      INCLUDE 'CSPEI'
      DIMENSION CFLAG(6,3)
      DIMENSION XSTOR(NSTOR),DENIO(NPLS),ZTI(NPLS)
      DIMENSION TBPI3(9),TBCX3(9),TBEL3(9)
      DIMENSION EPPI3(9),EPCX3(9),EPEL3(9)
      EQUIVALENCE (XSTOR(1),SIGVCX(1))
C
      DIMENSION PVELQ(NPLS)
C
C  SET DEFAULTS: NO REACTIONS
C
      DO 1 J=1,NSTOR
1       XSTOR(J)=0.
      FPATHA=1.D10
C
      IF (LGVAC(K,0)) RETURN
C
C   LOCAL PLASMA PARAMETERS
C
      DENEL=DEIN(K)
      DO 2 IPLS=1,NPLSI
        ZTI(IPLS)=ZT1(IPLS,K)
2       DENIO(IPLS)=DIIN(IPLS,K)
C
      PVELQ0=VEL*VEL
      DO 3 IPLS=1,NPLSI
        IF (NLDRFT) THEN
          PVELQ(IPLS)=(VELX*VEL-VXIN(IPLS,K))**2+
     .                (VELY*VEL-VYIN(IPLS,K))**2+
     .                (VELZ*VEL-VZIN(IPLS,K))**2
        ELSE
          PVELQ(IPLS)=PVELQ0
        ENDIF
3     CONTINUE
C
C
C  ELECTRON IMPACT COLLISION - RATE - COEFFICIENT
C  NO MASS SCALING NEEDED FOR BULK ELECTRONS
C
20    IF (LGAEI(IATM,0).EQ.0.OR.LGVAC(K,NPLS+1)) GOTO 30
      DO 10 IAEI=1,NAEII(IATM)
        IRDS=LGAEI(IATM,IAEI)
        IF (MODCOL(1,2,IATM,1).EQ.1) THEN
          IF (NSTORDR >= NRAD) THEN
            SIGVEI(IRDS)=TABDS1(IRDS,K)
          ELSE
            SIGVEI(IRDS)=FTABEI1(IRDS,K)
          END IF
        ELSE
          GOTO 990
        ENDIF
C
        IF (NSTORDR >= NRAD) THEN
          ESIGEI(IRDS,0)=EELDS1(IRDS,K)
          EHEAVY=EHVDS1(IRDS,K)
        ELSE
          ESIGEI(IRDS,0)=FEELEI1(IRDS,K)
          EHEAVY=FEHVDS1(IRDS,K)
        END IF
C
        ESIGEI(IRDS,1)=EATDS(IRDS,0,1)*E0+EATDS(IRDS,0,2)*EHEAVY
        ESIGEI(IRDS,2)=EMLDS(IRDS,0,1)*E0+EMLDS(IRDS,0,2)*EHEAVY
        ESIGEI(IRDS,3)=EIODS(IRDS,0,1)*E0+EIODS(IRDS,0,2)*EHEAVY
        ESIGEI(IRDS,4)=EPLDS(IRDS,  1)*E0+EPLDS(IRDS,  2)*EHEAVY

        SIGEIT=SIGEIT+SIGVEI(IRDS)
10    CONTINUE
C
C  ION IMPACT ON ATOM IATM, ION SPEZIES IPLS=1,NPLSI
C  30--->40
C
30    IF (LGAPI(IATM,0,0).EQ.0.OR.LGVAC(K,0)) GOTO 40
      DO 36 IAPI=1,NAPII(IATM)
        IRPI=LGAPI(IATM,IAPI,0)
        IPLS=LGAPI(IATM,IAPI,1)
        IF (LGVAC(K,IPLS)) GOTO 36
C
C  1.) RATE COEFFICIENT
C
        IF (MODCOL(4,2,IATM,IPLS).EQ.1) THEN
C  MAXWELL
          IF (NSTORDR >= NRAD) THEN
            SIGVPI(IRPI)=TABPI3(IRPI,K,1)
          ELSE
            KK=NREAPI(IRPI)
            PLS=TIINL(IPLS,K)+ADDPI(IRPI,IPLS)
            TBPI = CREAC(9,1,KK)
            DO II=8,1,-1
              TBPI = TBPI*PLS + CREAC(II,1,KK)
            END DO
            TBPI=EXP(MAX(-100.D0,TBPI))*DIIN(IPLS,K)
            SIGVPI(IRPI)=TBPI
          END IF
        ELSEIF (MODCOL(4,2,IATM,IPLS).EQ.2) THEN
C  BEAM - MAXWELL
C
C  MINIMUM PROJECTILE ENERGY: 0.1 EV
          ELB=MAX(-2.3D0,LOG(PVELQ(IPLS))+EEFPI(IRPI))
          IF (NSTORDR >= NRAD) THEN
            TBPI3(1:NSTORDT) = TABPI3(IRPI,K,1:NSTORDT)
            JAN=NSTORDT
          ELSE
            JAN=0
          END IF
          IF (JAN < 9) THEN
            KK=NREAPI(IRPI)
            PLS=TIINL(IPLS,K)+ADDPI(IRPI,IPLS)
            DO J=JAN+1,9
              TBPI3(J)=CREAC(9,J,KK)
              DO II=8,1,-1
                TBPI3(J)=TBPI3(J)*PLS+CREAC(II,J,KK)
              END DO
            END DO
          END IF
          IF (JAN < 1) TBPI3(1)=TBPI3(1)+DIINL(IPLS,K)
          EXPO=TBPI3(9)
          DO 33 II=1,8
            IF8=9-II
            EXPO=EXPO*ELB+TBPI3(IF8)
33        CONTINUE
          SIGVPI(IRPI)=EXP(EXPO)
        ELSEIF (MODCOL(4,2,IATM,IPLS).EQ.3) THEN
C  BEAM - BEAM
          VRELQ=ZTI(IPLS)+PVELQ(IPLS)
          VREL=SQRT(VRELQ)
          ELAB=LOG(VRELQ)+DEFPI(IRPI)
          IREAC=MODCOL(4,1,IATM,IPLS)
          CII=CROSS(ELAB,IREAC)
          SIGVPI(IRPI)=CII*VREL*DENIO(IPLS)
        ELSE
          GOTO 991
        ENDIF
C
C  2.A ELECTRON ENERGY LOSS / COLLISION (EV)
C
        ESIGPI(IRPI,0)=0.D0
C
        SIGPIT=SIGPIT+SIGVPI(IRPI)
C
C  2.B BULK ION ENERGY LOSS / COLLISION (EV)
C
        IF (NSTORDR >= NRAD) THEN
          ESIGPI(IRPI,1)=EPLPI3(IRPI,K,1)
        ELSE
          ESIGPI(IRPI,1)=FEPLPI3(IRPI,K)
        END IF
        CFLAG(4,1)=2
36    CONTINUE
C
C
C  CHARGE EXCHANGE OF ATOMS IATM  WITH IONS OF SPEZIES IPLS=1,NPLSI
C  40--->50
C
40    CONTINUE
      IF (LGACX(IATM,0,0).EQ.0.OR.LGVAC(K,0)) GOTO 50
      DO 41 IACX=1,NACXI(IATM)
        IRCX=LGACX(IATM,IACX,0)
        IPLS=LGACX(IATM,IACX,1)
        IF (LGVAC(K,IPLS)) GOTO 41
C
C  1.) RATE COEFFICIENT
C
        IF (MODCOL(3,2,IATM,IPLS).EQ.1) THEN
C  MAXWELL
          IF (NSTORDR >= NRAD) THEN
c            IF (output) THEN
c            WRITE(0,*) 'MARK: SIGVX LOCATION A'
c            WRITE(6,*) 'MARK: SIGVX LOCATION A ',ircx,sigvcx(ircx)
c            ENDIF
            SIGVCX(IRCX)=TABCX3(IRCX,K,1)
          ELSE
            KK=NREACX(IRCX)
            PLS=TIINL(IPLS,K)+ADDCX(IRCX,IPLS)
            TBCX = CREAC(9,1,KK)
            DO II=8,1,-1
              TBCX = TBCX*PLS + CREAC(II,1,KK)
            END DO
            TBCX=EXP(MAX(-100.D0,TBCX))*DIIN(IPLS,K)
            SIGVCX(IRCX)=TBCX
          END IF
        ELSEIF (MODCOL(3,2,IATM,IPLS).EQ.2) THEN
C  BEAM - MAXWELL
          IF (TIIN(IPLS,K).LT.TVAC) THEN
            VEFFQ=PVELQ(IPLS)
            VEFF=SQRT(VEFFQ)
            ELAB=LOG(VEFFQ)+DEFCX(IRCX)
            IREAC=MODCOL(3,1,IATM,IPLS)
            CXS=CROSS(ELAB,IREAC)
c            IF (output) THEN
c            WRITE(0,*) 'MARK: SIGVCX LOCATION B'
c            WRITE(6,*) 'MARK: SIGVCX LOCATION B'
c            ENDIF
            SIGVCX(IRCX)=CXS*VEFF*DENIO(IPLS)
          ELSE
            IF (NSTORDR >= NRAD) THEN
              TBCX3(1:NSTORDT) = TABCX3(IRCX,K,1:NSTORDT)
              JAN=NSTORDT
            ELSE
              JAN=0
            END IF
            IF (JAN < 9) THEN
              KK=NREACX(IRCX)
              PLS=TIINL(IPLS,K)+ADDCX(IRCX,IPLS)
              DO J=JAN+1,9
                TBCX3(J)=CREAC(9,J,KK)
                DO II=8,1,-1
                  TBCX3(J)=TBCX3(J)*PLS+CREAC(II,J,KK)
                END DO
              END DO
            END IF
c            IF (output)
c     .      WRITE(6,*) 'MARK: TBCX3(J) = ',9,tbcx3(9)
            IF (JAN < 1) TBCX3(1)=TBCX3(1)+DIINL(IPLS,K)
C  MINIMUM PROJECTILE ENERGY: 0.1 EV
            ELB=MAX(-2.3D0,LOG(PVELQ(IPLS))+EEFCX(IRCX))
            EXPO=TBCX3(9)
            DO 43 II=1,8
              IF8=9-II
              EXPO=EXPO*ELB+TBCX3(IF8)
43          CONTINUE
            SIGVCX(IRCX)=EXP(EXPO)
c            IF (output) THEN
c            WRITE(0,*) 'MARK: SIGVCX LOCATION C',ircx,sigvcx(ircx)
c            WRITE(6,*) 'MARK: SIGVCX LOCATION C',ircx,sigvcx(ircx)
c            ENDIF
          ENDIF
        ELSEIF (MODCOL(3,2,IATM,IPLS).EQ.3) THEN
C  BEAM - BEAM
          VEFFQ=ZTI(IPLS)+PVELQ(IPLS)
          VEFF=SQRT(VEFFQ)
          ELAB=LOG(VEFFQ)+DEFCX(IRCX)
          IREAC=MODCOL(3,1,IATM,IPLS)
          CXS=CROSS(ELAB,IREAC)
c          IF (output) THEN
c          WRITE(0,*) 'MARK: SIGVCX LOCATION D'
c          WRITE(6,*) 'MARK: SIGVCX LOCATION D'
c          ENDIF
          SIGVCX(IRCX)=CXS*VEFF*DENIO(IPLS)
        ELSE
          GOTO 992
        ENDIF
        SIGCXT=SIGCXT+SIGVCX(IRCX)
C
C  2.) BULK ION ENERGY LOSS RATE:
C
        IF (MODCOL(3,4,IATM,IPLS).EQ.1) THEN
          IF (NSTORDR >= NRAD) THEN
            ESIGCX(IRCX,1)=EPLCX3(IRCX,K,1)
          ELSE
            ESIGCX(IRCX,1)=FEPLCX3(IRCX,K)
          END IF
          CFLAG(3,1)=2
        ELSEIF (MODCOL(3,4,IATM,IPLS).EQ.2) THEN
          IF (NSTORDR >= NRAD) THEN
            EPCX3(1:NSTORDT) = EPLCX3(IRCX,K,1:NSTORDT)
            JAN=NSTORDT
          ELSE
            JAN=0
          END IF
          IF (JAN < 9) THEN
            KK=NELRCX(IRCX)
            PLS=TIINL(IPLS,K)+ADDCX(IRCX,IPLS)
            DO J=JAN+1,9
              EPCX3(J)=CREAC(9,J,KK)
              DO II=8,1,-1
                EPCX3(J)=EPCX3(J)*PLS+CREAC(II,J,KK)
              END DO
            END DO
          END IF
          IF (JAN < 1) EPCX3(1)=EPCX3(1)+DIINL(IPLS,K)
C  MINIMUM PROJECTILE ENERGY: 0.1 EV
          ELB=MAX(-2.3D0,LOG(PVELQ(IPLS))+EEFCX(IRCX))
          EXPO=EPCX3(9)
          DO 45 II=1,8
            IF8=9-II
            EXPO=EXPO*ELB+EPCX3(IF8)
45        CONTINUE
          ESIGCX(IRCX,1)=EXP(EXPO)/SIGVCX(IRCX)
          ESIGCX(IRCX,1)=ESIGCX(IRCX,1)+EDRIFT(IPLS,K)
          CFLAG(3,1)=3
        ELSE
          GOTO 992
        ENDIF
41    CONTINUE
C
C
C  ELASTIC COLLISIONS OF ATOMS IATM  WITH IONS OF SPEZIES IPLS=1,NPLSI
C  50--->60
C
50    CONTINUE
      IF (LGAEL(IATM,0,0).EQ.0.OR.LGVAC(K,0)) GOTO 60
      DO 51 IAEL=1,NAELI(IATM)
        IREL=LGAEL(IATM,IAEL,0)
        IPLS=LGAEL(IATM,IAEL,1)
        IBGK=NPBGKP(IPLS,1)
        IF (LGVAC(K,IPLS)) GOTO 51
C
C  1.) RATE COEFFICIENT
C
        IF (MODCOL(5,2,IATM,IPLS).EQ.1) THEN
C  MAXWELL
          IF (NSTORDR >= NRAD) THEN
            SIGVEL(IREL)=TABEL3(IREL,K,1)
          ELSE
            KK=NREAEL(IREL)
            PLS=TIINL(IPLS,K)+ADDEL(IREL,IPLS)
            TBEL = CREAC(9,1,KK)
            DO II=8,1,-1
              TBEL = TBEL*PLS + CREAC(II,1,KK)
            END DO
            TBEL=EXP(MAX(-100.D0,TBEL))*DIIN(IPLS,K)
            SIGVEL(IREL)=TBEL
          END IF
        ELSEIF (MODCOL(5,2,IATM,IPLS).EQ.2) THEN
C  BEAM - MAXWELL
          IF (TIIN(IPLS,K).LT.TVAC) THEN
            VRELQ=PVELQ(IPLS)
            VREL=SQRT(VRELQ)
            ELAB=LOG(VRELQ)+DEFEL(IREL)
            IREAC=MODCOL(5,1,IATM,IPLS)
            CEL=CROSS(ELAB,IREAC)
            SIGVEL(IREL)=CEL*VREL*DENIO(IPLS)
          ELSE
            IF (NSTORDR >= NRAD) THEN
              TBEL3(1:NSTORDT) = TABEL3(IREL,K,1:NSTORDT)
              JAN=NSTORDT
            ELSE
              JAN=0
            END IF
            IF (JAN < 9) THEN
              KK=NREAEL(IREL)
              PLS=TIINL(IPLS,K)+ADDEL(IREL,IPLS)
              DO J=JAN+1,9
                TBEL3(J)=CREAC(9,J,KK)
                DO II=8,1,-1
                  TBEL3(J)=TBEL3(J)*PLS+CREAC(II,J,KK)
                END DO
              END DO
            END IF
            IF (JAN < 1) TBEL3(1)=TBEL3(1)+DIINL(IPLS,K)
C  MINIMUM PROJECTILE ENERGY: 0.1 EV
            ELB=MAX(-2.3D0,LOG(PVELQ(IPLS))+EEFEL(IREL))
            EXPO=TBEL3(9)
            DO 53 II=1,8
              IF8=9-II
              EXPO=EXPO*ELB+TBEL3(IF8)
53          CONTINUE
            SIGVEL(IREL)=EXP(EXPO)
          ENDIF
        ELSEIF (MODCOL(5,2,IATM,IPLS).EQ.3) THEN
C  BEAM - BEAM
          VRELQ=ZTI(IPLS)+PVELQ(IPLS)
          VREL=SQRT(VRELQ)
          ELAB=LOG(VRELQ)+DEFEL(IREL)
          IREAC=MODCOL(5,1,IATM,IPLS)
          CEL=CROSS(ELAB,IREAC)
          SIGVEL(IREL)=CEL*VREL*DENIO(IPLS)
        ELSE
          GOTO 995
        ENDIF
        SIGELT=SIGELT+SIGVEL(IREL)
        IF (IBGK.NE.0) SIGBGK=SIGBGK+SIGVEL(IREL)
C
C  2.) BULK ION ENERGY LOSS RATE:
C
        IF (MODCOL(5,4,IATM,IPLS).EQ.1) THEN
          IF (NSTORDR >= NRAD) THEN
            ESIGEL(IREL,1)=EPLEL3(IREL,K,1)
          ELSE
            ESIGEL(IREL,1)=FEPLEL3(IREL,K)
          END IF
          CFLAG(5,1)=2
        ELSEIF (MODCOL(5,4,IATM,IPLS).EQ.2) THEN
          IF (NSTORDR >= NRAD) THEN
            EPEL3(1:NSTORDT) = EPLEL3(IREL,K,1:NSTORDT)
            JAN=NSTORDT
          ELSE
            JAN=0
          END IF
          IF (JAN < 9) THEN
            KK=NELREL(IREL)
            PLS=TIINL(IPLS,K)+ADDEL(IREL,IPLS)
            DO J=JAN+1,9
              EPEL3(J)=CREAC(9,J,KK)
              DO II=8,1,-1
                EPEL3(J)=EPEL3(J)*PLS+CREAC(II,J,KK)
              END DO
            END DO
          END IF
          IF (JAN < 1) EPEL3(1)=EPEL3(1)+DIINL(IPLS,K)
C  MINIMUM PROJECTILE ENERGY: 0.1 EV
          ELB=MAX(-2.3D0,LOG(PVELQ(IPLS))+EEFEL(IREL))
          EXPO=EPEL3(9)
          DO 55 II=1,8
            IF8=9-II
            EXPO=EXPO*ELB+EPEL3(IF8)
55        CONTINUE
          ESIGEL(IREL,1)=EXP(EXPO)/SIGVEL(IREL)
          ESIGEL(IREL,1)=ESIGEL(IREL,1)+EDRIFT(IPLS,K)
          CFLAG(5,1)=3
        ELSE
          GOTO 995
        ENDIF
51    CONTINUE
C
60    CONTINUE
C
C     TOTAL
C
100   CONTINUE
C
      SIGMAX=MAXVAL(XSTOR(1:NSTOR1))
      DO I=1,NSTOR1
        IF (XSTOR(I).LE.SIGMAX*1.D-10) XSTOR(I)=0.D0
      ENDDO
C
      SIGTOT=SIGEIT+SIGPIT+SIGCXT+SIGELT
      IF (SIGTOT.GT.1.D-20) THEN
        FPATHA=VEL/SIGTOT
        ZMFPI=1./FPATHA
      ENDIF
C
      RETURN
990   CONTINUE
      IAT=IATM
      WRITE (6,*) 'ERROR IN FPATHA: INCONSISTENT ELEC. IMP. IONIZ. DATA'
      WRITE (6,*) 'IAT,MODCOL(1,J,IAT,1) '
      WRITE (6,*) IATM,(MODCOL(1,J,IAT,1),J=1,4)
      CALL EXIT
991   CONTINUE
      IAT=IATM
      WRITE (6,*) 'ERROR IN FPATHA: INCONSISTENT ION IMP. IONIZ. DATA'
      WRITE (6,*) 'IAT,IPL,MODCOL(4,J,IAT,IPL) '
      DO 993 IPL=1,NPLSI
        WRITE (6,*) IATM,IPL,(MODCOL(4,J,IATM,IPL),J=1,4)
993   CONTINUE
      CALL EXIT
992   CONTINUE
      WRITE (6,*) 'ERROR IN FPATHA: INCONSISTENT CHARGE EXCHANGE DATA'
      WRITE (6,*) 'IAT,IPL,MODCOL(3,J,IAT,IPL) '
      DO 994 IPL=1,NPLSI
        WRITE (6,*) IATM,IPL,(MODCOL(3,J,IATM,IPL),J=1,4)
994   CONTINUE
      CALL EXIT
995   CONTINUE
      WRITE (6,*) 'ERROR IN FPATHA: INCONSISTENT ELASTIC COLL. DATA'
      WRITE (6,*) 'IAT,IPL,MODCOL(5,J,IAT,IPL) '
      DO 996 IPL=1,NPLSI
        WRITE (6,*) IATM,IPL,(MODCOL(5,J,IATM,IPL),J=1,4)
996   CONTINUE
      CALL EXIT
      END
C
      FUNCTION FPATHM (K,CFLAG)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
C   CALCULATE MEAN FREE PATH AND REACTION RATES FOR NEUTRAL
C   "BEAM MOLECULES" OF VELOCITY VEL IN MAXWELLIAN PLASMA-BACKGROUND
C   IN CELL K
C   CFLAG:  AS IN FUNCTION FPATHA
C
      INCLUDE 'PARMMOD'
      INCLUDE 'COMPRT'
      INCLUDE 'CZT1'
      INCLUDE 'COMXS'
      INCLUDE 'COMUSR'
      INCLUDE 'CCONA'
      INCLUDE 'CLOGAU'
      DIMENSION CFLAG(6,3)
      DIMENSION XSTOR(NSTOR),DENIO(NPLS),ZTI(NPLS)
      DIMENSION PVELQ(NPLS)
      DIMENSION TBCX3(9),TBPI3(9),TBEL3(9)
      DIMENSION EPCX3(9),EPPI3(9),EPEL3(9)
      EQUIVALENCE (XSTOR(1),SIGVCX(1))
C
C  SET DEFAULTS: NO REACTIONS
C
      DO 1 J=1,NSTOR
1       XSTOR(J)=0.
      FPATHM=1.D10
C
      IF (LGVAC(K,0)) RETURN
C
C
C   LOCAL PLASMA PARAMETERS
C
      DENEL=DEIN(K)
      DO 2 IPLS=1,NPLSI
        ZTI(IPLS)=ZT1(IPLS,K)
2       DENIO(IPLS)=DIIN(IPLS,K)
      TEEI=TEIN(K)
      PVELQ0=VEL*VEL
      DO 3 IPLS=1,NPLSI
        IF (NLDRFT) THEN
          PVELQ(IPLS)=(VELX*VEL-VXIN(IPLS,K))**2+
     .                (VELY*VEL-VYIN(IPLS,K))**2+
     .                (VELZ*VEL-VZIN(IPLS,K))**2
        ELSE
          PVELQ(IPLS)=PVELQ0
        ENDIF
3     CONTINUE
C
C
C  ELECTRON IMPACT RATE COEFFICIENT
C
      IF (LGMEI(IMOL,0).EQ.0.OR.LGVAC(K,NPLS+1)) GOTO 25
      DO 10 IMDS=1,NMDSI(IMOL)
        IRDS=LGMEI(IMOL,IMDS)
        IF (MODCOL(1,2,NATMI+IMOL,1).EQ.1) THEN
          IF (NSTORDR >= NRAD) THEN
            SIGVEI(IRDS)=TABDS1(IRDS,K)
          ELSE
            SIGVEI(IRDS)=FTABEI1(IRDS,K)
          END IF
        ELSE
          GOTO 990
        ENDIF
C
        IF (NSTORDR >= NRAD) THEN
          ESIGEI(IRDS,0)=EELDS1(IRDS,K)
          EHEAVY=EHVDS1(IRDS,K)
        ELSE
          ESIGEI(IRDS,0)=FEELEI1(IRDS,K)
          EHEAVY=FEHVDS1(IRDS,K)
        ENDIF
C
        ESIGEI(IRDS,1)=EATDS(IRDS,0,1)*E0+EATDS(IRDS,0,2)*EHEAVY
        ESIGEI(IRDS,2)=EMLDS(IRDS,0,1)*E0+EMLDS(IRDS,0,2)*EHEAVY
        ESIGEI(IRDS,3)=EIODS(IRDS,0,1)*E0+EIODS(IRDS,0,2)*EHEAVY
        ESIGEI(IRDS,4)=EPLDS(IRDS,  1)*E0+EPLDS(IRDS,  2)*EHEAVY
C
        SIGEIT=SIGEIT+SIGVEI(IRDS)
10    CONTINUE
C
C
C  IONIZATION OF MOLECULE BY ION IMPACT, ION SPEZIES IPLS=1,NPLSI
C
25    CONTINUE
      DO 30 IMPI=1,NMPII(IMOL)
        SIGVPI(IMPI)=0.
        SIGPIT=SIGPIT+SIGVPI(IMPI)
30    CONTINUE
C
C   CHARGE EXCHANGE RATE COEFFICIENT FOR MOLECULE IMOL
C   WITH BULK IONS OF SPEZIES IPLS=1,NPLSI
C
      IF (LGMCX(IMOL,0,0).EQ.0.AND.LGVAC(K,0)) GOTO 50
40    CONTINUE
      DO 41 IMCX=1,NMCXI(IMOL)
        IRCX=LGMCX(IMOL,IMCX,0)
        IPLS=LGMCX(IMOL,IMCX,1)
        IF (LGVAC(K,IPLS)) GOTO 41
C
        IF (MODCOL(3,2,NATMI+IMOL,IPLS).EQ.1) THEN
C  MAXWELL
          IF (NSTORDR >= NRAD) THEN
            SIGVCX(IRCX)=TABCX3(IRCX,K,1)
          ELSE
            KK=NREACX(IRCX)
            PLS=TIINL(IPLS,K)+ADDCX(IRCX,IPLS)
            TBCX = CREAC(9,1,KK)
            DO II=8,1,-1
              TBCX = TBCX*PLS + CREAC(II,1,KK)
            END DO
            TBCX=EXP(MAX(-100.D0,TBCX))*DIIN(IPLS,K)
            SIGVCX(IRCX)=TBCX
          END IF
        ELSEIF (MODCOL(3,2,NATMI+IMOL,IPLS).EQ.2) THEN
C  BEAM - MAXWELL
          IF (TIIN(IPLS,K).LT.TVAC) THEN
            VEFFQ=PVELQ(IPLS)
            VEFF=SQRT(VEFFQ)
            ELAB=LOG(VEFFQ)+DEFCX(IRCX)
            IREAC=MODCOL(3,1,NATMI+IMOL,IPLS)
            CXS=CROSS(ELAB,IREAC)
            SIGVCX(IRCX)=CXS*VEFF*DENIO(IPLS)
          ELSE
            IF (NSTORDR >= NRAD) THEN
              TBCX3(1:NSTORDT) = TABCX3(IRCX,K,1:NSTORDT)
              JAN=NSTORDT
            ELSE
              JAN=0
            END IF
            IF (JAN < 9) THEN
              KK=NREACX(IRCX)
              PLS=TIINL(IPLS,K)+ADDCX(IRCX,IPLS)
              DO J=JAN+1,9
                TBCX3(J)=CREAC(9,J,KK)
                DO II=8,1,-1
                  TBCX3(J)=TBCX3(J)*PLS+CREAC(II,J,KK)
                END DO
              END DO
            END IF
            IF (JAN < 1) TBCX3(1)=TBCX3(1)+DIINL(IPLS,K)
C  MINIMUM ENERGY: 0.1EV
            ELB=MAX(-2.3D0,LOG(PVELQ(IPLS))+EEFCX(IRCX))
            EXPO=TBCX3(9)
            DO 43 II=1,8
              IF8=9-II
              EXPO=EXPO*ELB+TBCX3(IF8)
43          CONTINUE
            SIGVCX(IRCX)=EXP(EXPO)
          ENDIF
        ELSEIF (MODCOL(3,2,NATMI+IMOL,IPLS).EQ.3) THEN
C  BEAM  - BEAM
          VEFFQ=ZTI(IPLS)+PVELQ(IPLS)
          VEFF=SQRT(VEFFQ)
          ELAB=LOG(VEFFQ)+DEFCX(IRCX)
          IREAC=MODCOL(3,1,NATMI+IMOL,IPLS)
          CXS=CROSS(ELAB,IREAC)
          SIGVCX(IRCX)=CXS*VEFF*DENIO(IPLS)
        ELSE
          GOTO 992
        ENDIF
C
        SIGCXT=SIGCXT+SIGVCX(IRCX)
C
        IF (MODCOL(3,4,NATMI+IMOL,IPLS).EQ.1) THEN
          IF (NSTORDR >= NRAD) THEN
            ESIGCX(IRCX,1)=EPLCX3(IRCX,K,1)
          ELSE
            ESIGCX(IRCX,1)=FEPLCX3(IRCX,K)
          END IF
          CFLAG(3,1)=2
        ELSEIF (MODCOL(3,4,NATMI+IMOL,IPLS).EQ.2) THEN
          IF (NSTORDR >= NRAD) THEN
            EPCX3(1:NSTORDT) = EPLCX3(IRCX,K,1:NSTORDT)
            JAN=NSTORDT
          ELSE
            JAN=0
          END IF
          IF (JAN < 9) THEN
            KK=NELRCX(IRCX)
            PLS=TIINL(IPLS,K)+ADDCX(IRCX,IPLS)
            DO J=JAN+1,9
              EPCX3(J)=CREAC(9,J,KK)
              DO II=8,1,-1
                EPCX3(J)=EPCX3(J)*PLS+CREAC(II,J,KK)
              END DO
            END DO
          END IF
          IF (JAN < 1) EPCX3(1)=EPCX3(1)+DIINL(IPLS,K)
C  MINIMUM PROJECTILE ENERGY: 0.1 EV
          ELB=MAX(-2.3D0,LOG(PVELQ(IPLS))+EEFCX(IRCX))
          EXPO=EPCX3(9)
          DO 45 II=1,8
            IF8=9-II
            EXPO=EXPO*ELB+EPCX3(IF8)
45        CONTINUE
          ESIGCX(IRCX,1)=EXP(EXPO)/SIGVCX(IRCX)
          ESIGCX(IRCX,1)=ESIGCX(IRCX,1)+EDRIFT(IPLS,K)
          CFLAG(3,1)=3
        ELSE
          GOTO 992
        ENDIF
41    CONTINUE
C
C  ELASTIC COLLISIONS OF MOLECULE IMOL WITH IONS OF SPEZIES IPLS=1,NPLS
C  50--->60
C
50    CONTINUE
      IF (LGMEL(IMOL,0,0).EQ.0.OR.LGVAC(K,0)) GOTO 60
      DO 51 IMEL=1,NMELI(IMOL)
        IREL=LGMEL(IMOL,IMEL,0)
        IPLS=LGMEL(IMOL,IMEL,1)
        IBGK=NPBGKP(IPLS,1)
        IF (LGVAC(K,IPLS)) GOTO 51
C
C  1.) RATE COEFFICIENT
C
        IF (MODCOL(5,2,NATMI+IMOL,IPLS).EQ.1) THEN
C  MAXWELL
          IF (NSTORDR >= NRAD) THEN
            SIGVEL(IREL)=TABEL3(IREL,K,1)
          ELSE
            KK=NREAEL(IREL)
            PLS=TIINL(IPLS,K)+ADDEL(IREL,IPLS)
            TBEL = CREAC(9,1,KK)
            DO II=8,1,-1
              TBEL = TBEL*PLS + CREAC(II,1,KK)
            END DO
            TBEL=EXP(MAX(-100.D0,TBEL))*DIIN(IPLS,K)
            SIGVEL(IREL)=TBEL
          END IF
        ELSEIF (MODCOL(5,2,NATMI+IMOL,IPLS).EQ.2) THEN
C  BEAM - MAXWELL
          IF (TIIN(IPLS,K).LT.TVAC) THEN
            VRELQ=PVELQ(IPLS)
            VREL=SQRT(VRELQ)
            ELAB=LOG(VRELQ)+DEFEL(IREL)
            IREAC=MODCOL(5,1,NATMI+IMOL,IPLS)
            CEL=CROSS(ELAB,IREAC)
            SIGVEL(IREL)=CEL*VREL*DENIO(IPLS)
          ELSE
            IF (NSTORDR >= NRAD) THEN
              TBEL3(1:NSTORDT) = TABEL3(IREL,K,1:NSTORDT)
              JAN=NSTORDT
            ELSE
              JAN=0
            END IF
            IF (JAN < 9) THEN
              KK=NREAEL(IREL)
              PLS=TIINL(IPLS,K)+ADDEL(IREL,IPLS)
              DO J=JAN+1,9
                TBEL3(J)=CREAC(9,J,KK)
                DO II=8,1,-1
                  TBEL3(J)=TBEL3(J)*PLS+CREAC(II,J,KK)
                END DO
              END DO
            END IF
            IF (JAN < 1) TBEL3(1)=TBEL3(1)+DIINL(IPLS,K)
C  MINIMUM PROJECTILE ENERGY: 0.1 EV
            ELB=MAX(-2.3D0,LOG(PVELQ(IPLS))+EEFEL(IREL))
            EXPO=TBEL3(9)
            DO 53 II=1,8
              IF8=9-II
              EXPO=EXPO*ELB+TBEL3(IF8)
53          CONTINUE
            SIGVEL(IREL)=EXP(EXPO)
          ENDIF
        ELSEIF (MODCOL(5,2,NATMI+IMOL,IPLS).EQ.3) THEN
C  BEAM - BEAM
          VRELQ=ZTI(IPLS)+PVELQ(IPLS)
          VREL=SQRT(VRELQ)
          ELAB=LOG(VRELQ)+DEFEL(IREL)
          IREAC=MODCOL(5,1,NATMI+IMOL,IPLS)
          CEL=CROSS(ELAB,IREAC)
          SIGVEL(IREL)=CEL*VREL*DENIO(IPLS)
        ELSE
          GOTO 995
        ENDIF
        SIGELT=SIGELT+SIGVEL(IREL)
        IF (IBGK.NE.0) SIGBGK=SIGBGK+SIGVEL(IREL)
C
C  2.) BULK ION ENERGY LOSS RATE:
C
        IF (MODCOL(5,4,NATMI+IMOL,IPLS).EQ.1) THEN
          IF (NSTORDR >= NRAD) THEN
            ESIGEL(IREL,1)=EPLEL3(IREL,K,1)
          ELSE
            ESIGEL(IREL,1)=FEPLEL3(IREL,K)
          END IF
          CFLAG(5,1)=2
        ELSEIF (MODCOL(5,4,NATMI+IMOL,IPLS).EQ.2) THEN
          IF (NSTORDR >= NRAD) THEN
            EPEL3(1:NSTORDT) = EPLEL3(IREL,K,1:NSTORDT)
            JAN=NSTORDT
          ELSE
            JAN=0
          END IF
          IF (JAN < 9) THEN
            KK=NELREL(IREL)
            PLS=TIINL(IPLS,K)+ADDEL(IREL,IPLS)
            DO J=JAN+1,9
              EPEL3(J)=CREAC(9,J,KK)
              DO II=8,1,-1
                EPEL3(J)=EPEL3(J)*PLS+CREAC(II,J,KK)
              END DO
            END DO
          END IF
          IF (JAN < 1) EPEL3(1)=EPEL3(1)+DIINL(IPLS,K)
C  MINIMUM PROJECTILE ENERGY: 0.1 EV
          ELB=MAX(-2.3D0,LOG(PVELQ(IPLS))+EEFEL(IREL))
          EXPO=EPEL3(9)
          DO 55 II=1,8
            IF8=9-II
            EXPO=EXPO*ELB+EPEL3(IF8)
55        CONTINUE
          ESIGEL(IREL,1)=EXP(EXPO)/SIGVEL(IREL)
          ESIGEL(IREL,1)=ESIGEL(IREL,1)+EDRIFT(IPLS,K)
          CFLAG(5,1)=3
        ELSE
          GOTO 995
        ENDIF
51    CONTINUE
C
60    CONTINUE
C
C     TOTAL
C
      SIGMAX=MAXVAL(XSTOR(1:NSTOR1))
      DO I=1,NSTOR1
        IF (XSTOR(I).LE.SIGMAX*1.D-10) XSTOR(I)=0.D0
      ENDDO
C
100   CONTINUE
      SIGTOT=SIGPIT+SIGCXT+SIGEIT+SIGELT
      IF (SIGTOT.GT.1.D-20) THEN
        FPATHM=VEL/SIGTOT
        ZMFPI=1./FPATHM
      ENDIF
C
      RETURN
990   CONTINUE
      IML=NATMI+IMOL
      WRITE (6,*) 'ERROR IN FPATHM: INCONSISTENT ELEC. IMP. DATA'
      WRITE (6,*) 'IML,MODCOL(1,J,IML,1) '
      WRITE (6,*) IMOL,(MODCOL(1,J,IML,1),J=1,4)
      CALL EXIT
991   CONTINUE
      IML=NATMI+IMOL
      WRITE (6,*) 'ERROR IN FPATHM: INCONSISTENT ION IMP. IONIZ. DATA'
      WRITE (6,*) 'IML,IPL,MODCOL(4,J,IML,IPL) '
      DO 993 IPL=1,NPLSI
        WRITE (6,*) IMOL,IPL,(MODCOL(4,J,IML,IPL),J=1,4)
993   CONTINUE
      CALL EXIT
992   CONTINUE
      IML=NATMI+IMOL
      WRITE (6,*) 'ERROR IN FPATHM: INCONSISTENT CHARGE EXCHANGE DATA'
      WRITE (6,*) 'IML,IPL,MODCOL(3,J,IML,IPL) '
      DO 994 IPL=1,NPLSI
        WRITE (6,*) IMOL,IPL,(MODCOL(3,J,IML,IPL),J=1,4)
994   CONTINUE
995   CONTINUE
      IML=NATMI+IMOL
      WRITE (6,*) 'ERROR IN FPATHM: INCONSISTENT ELASTIC COLL. DATA'
      WRITE (6,*) 'IML,IPL,MODCOL(5,J,IML,IPL) '
      DO 996 IPL=1,NPLSI
        WRITE (6,*) IMOL,IPL,(MODCOL(5,J,IML,IPL),J=1,4)
996   CONTINUE
      CALL EXIT
      END
C
      FUNCTION FPATHI (K,CFLAG)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
C   CALCULATE MEAN FREE PATH AND REACTION RATES FOR
C   "BEAM TEST IONS" OF VELOCITY VEL IN MAXWELLIAN PLASMA-BACKGROUND
C
      INCLUDE 'PARMMOD'
      INCLUDE 'COMPRT'
      INCLUDE 'CZT1'
      INCLUDE 'COMXS'
      INCLUDE 'COMUSR'
      INCLUDE 'CCONA'
      INCLUDE 'CLOGAU'
      DIMENSION CFLAG(6,3)
      DIMENSION XSTOR(NSTOR),DENIO(NPLS),ZTI(NPLS)
      DIMENSION PVELQ(NPLS)
      DIMENSION TBCX3(9),TBPI3(9),TBEL3(9)
      DIMENSION EPCX3(9),EPPI3(9),EPEL3(9)
      EQUIVALENCE (XSTOR(1),SIGVCX(1))
C
C  SET DEFAULTS: NO REACTIONS
C
      DO 1 J=1,NSTOR
1       XSTOR(J)=0.
      FPATHI=1.D10
C
      IF (LGVAC(K,0)) RETURN
C
C
C   LOCAL PLASMA PARAMETERS
C
      DENEL=DEIN(K)
      DO 2 IPLS=1,NPLSI
        ZTI(IPLS)=ZT1(IPLS,K)
2       DENIO(IPLS)=DIIN(IPLS,K)
      TEEI=TEIN(K)
      PVELQ0=VEL*VEL
      DO 3 IPLS=1,NPLSI
        IF (NLDRFT) THEN
          PVELQ(IPLS)=(VELX*VEL-VXIN(IPLS,K))**2+
     .                (VELY*VEL-VYIN(IPLS,K))**2+
     .                (VELZ*VEL-VZIN(IPLS,K))**2
        ELSE
          PVELQ(IPLS)=PVELQ0
        ENDIF
3     CONTINUE
C
C
C
C  TEST ION ELECTR. IMP. RATE COEFFICIENT
C
      IF (LGIEI(IION,0).EQ.0.OR.LGVAC(K,NPLS+1)) GOTO 25
      DO 10 IIDS=1,NIDSI(IION)
        IRDS=LGIEI(IION,IIDS)
        IF (MODCOL(1,2,NSPAM+IION,1).EQ.1) THEN
          IF (NSTORDR >= NRAD) THEN
            SIGVEI(IRDS)=TABDS1(IRDS,K)
          ELSE
            SIGVEI(IRDS)=FTABEI1(IRDS,K)
          END IF
        ELSE
          GOTO 990
        ENDIF
C
        IF (NSTORDR >= NRAD) THEN
          ESIGEI(IRDS,0)=EELDS1(IRDS,K)
          EHEAVY=EHVDS1(IRDS,K)
        ELSE
          ESIGEI(IRDS,0)=FEELEI1(IRDS,K)
          EHEAVY=FEHVDS1(IRDS,K)
        END IF
C
        ESIGEI(IRDS,1)=EATDS(IRDS,0,1)*E0+EATDS(IRDS,0,2)*EHEAVY
        ESIGEI(IRDS,2)=EMLDS(IRDS,0,1)*E0+EMLDS(IRDS,0,2)*EHEAVY
        ESIGEI(IRDS,3)=EIODS(IRDS,0,1)*E0+EIODS(IRDS,0,2)*EHEAVY
        ESIGEI(IRDS,4)=EPLDS(IRDS,  1)*E0+EPLDS(IRDS,  2)*EHEAVY
C
        SIGEIT=SIGEIT+SIGVEI(IRDS)
10    CONTINUE
C
C  IONIZATION OF TEST ION BY BULK ION IMPACT, ION SPEZIES IPLS=1,NPLSI
C
25    CONTINUE
      DO 30 IIPI=1,NIPII(IION)
        SIGVPI(IIPI)=0.
        SIGPIT=SIGPIT+SIGVPI(IIPI)
30    CONTINUE
C
C   CHARGE EXCHANGE RATE COEFFICIENT FOR TEST ION IION
C   WITH BULK IONS OF SPEZIES IPLS=1,NPLSI
C
      IF (LGICX(IION,0,0).EQ.0.OR.LGVAC(K,0)) GOTO 50
40    CONTINUE
      DO 41 IICX=1,NICXI(IION)
        IRCX=LGICX(IION,IICX,0)
        IPLS=LGICX(IION,IICX,1)
        IF (LGVAC(K,IPLS)) GOTO 41
C
        IF (MODCOL(3,2,NSPAM+IION,IPLS).EQ.1) THEN
C  MAXWELL
          IF (NSTORDR >= NRAD) THEN
            SIGVCX(IRCX)=TABCX3(IRCX,K,1)
          ELSE
            KK=NREACX(IRCX)
            PLS=TIINL(IPLS,K)+ADDCX(IRCX,IPLS)
            TBCX = CREAC(9,1,KK)
            DO II=8,1,-1
              TBCX = TBCX*PLS + CREAC(II,1,KK)
            END DO
            TBCX=EXP(MAX(-100.D0,TBCX))*DIIN(IPLS,K)
            SIGVCX(IRCX)=TBCX
          END IF
        ELSEIF (MODCOL(3,2,NSPAM+IION,IPLS).EQ.2) THEN
C  BEAM - MAXWELL
          IF (TIIN(IPLS,K).LT.TVAC) THEN
            VEFFQ=PVELQ(IPLS)
            VEFF=SQRT(VEFFQ)
            ELAB=LOG(VEFFQ)+DEFCX(IRCX)
            IREAC=MODCOL(3,1,NSPAM+IION,IPLS)
            CXS=CROSS(ELAB,IREAC)
            SIGVCX(IRCX)=CXS*VEFF*DENIO(IPLS)
          ELSE
            IF (NSTORDR >= NRAD) THEN
              TBCX3(1:NSTORDT) = TABCX3(IRCX,K,1:NSTORDT)
              JAN=NSTORDT
            ELSE
              JAN=0
            END IF
            IF (JAN < 9) THEN
              KK=NREACX(IRCX)
              PLS=TIINL(IPLS,K)+ADDCX(IRCX,IPLS)
              DO J=JAN+1,9
                TBCX3(J)=CREAC(9,J,KK)
                DO II=8,1,-1
                  TBCX3(J)=TBCX3(J)*PLS+CREAC(II,J,KK)
                END DO
              END DO
            END IF
            IF (JAN < 1) TBCX3(1)=TBCX3(1)+DIINL(IPLS,K)
C  MINIMUM ENERGY: 0.1EV
            ELB=MAX(-2.3D0,LOG(PVELQ(IPLS))+EEFCX(IRCX))
            EXPO=TBCX3(9)
            DO 43 II=1,8
              IF8=9-II
              EXPO=EXPO*ELB+TBCX3(IF8)
43          CONTINUE
            SIGVCX(IRCX)=EXP(EXPO)
          ENDIF
        ELSEIF (MODCOL(3,2,NSPAM+IION,IPLS).EQ.3) THEN
C  BEAM - BEAM
          VEFFQ=ZTI(IPLS)+PVELQ(IPLS)
          VEFF=SQRT(VEFFQ)
          ELAB=LOG(VEFFQ)+DEFCX(IRCX)
          IREAC=MODCOL(3,1,NSPAM+IION,IPLS)
          CXS=CROSS(ELAB,IREAC)
          SIGVCX(IRCX)=CXS*VEFF*DENIO(IPLS)
        ELSE
          GOTO 992
        ENDIF
C
        SIGCXT=SIGCXT+SIGVCX(IRCX)
C
        IF (MODCOL(3,4,NSPAM+IION,IPLS).EQ.1) THEN
          IF (NSTORDR >= NRAD) THEN
            ESIGCX(IRCX,1)=EPLCX3(IRCX,K,1)
          ELSE
            ESIGCX(IRCX,1)=FEPLCX3(IRCX,K)
          END IF
          CFLAG(3,1)=2
        ELSEIF (MODCOL(3,4,NSPAM+IION,IPLS).EQ.2) THEN
          IF (NSTORDR >= NRAD) THEN
            EPCX3(1:NSTORDT) = EPLCX3(IRCX,K,1:NSTORDT)
            JAN=NSTORDT
          ELSE
            JAN=0
          END IF
          IF (JAN < 9) THEN
            KK=NELRCX(IRCX)
            PLS=TIINL(IPLS,K)+ADDCX(IRCX,IPLS)
            DO J=JAN+1,9
              EPCX3(J)=CREAC(9,J,KK)
              DO II=8,1,-1
                EPCX3(J)=EPCX3(J)*PLS+CREAC(II,J,KK)
              END DO
            END DO
          END IF
          IF (JAN < 1) EPCX3(1)=EPCX3(1)+DIINL(IPLS,K)
C  MINIMUM PROJECTILE ENERGY: 0.1 EV
          ELB=MAX(-2.3D0,LOG(PVELQ(IPLS))+EEFCX(IRCX))
          EXPO=EPCX3(9)
          DO 45 II=1,8
            IF8=9-II
            EXPO=EXPO*ELB+EPCX3(IF8)
45        CONTINUE
          ESIGCX(IRCX,1)=EXP(EXPO)/SIGVCX(IRCX)
          ESIGCX(IRCX,1)=ESIGCX(IRCX,1)+EDRIFT(IPLS,K)
          CFLAG(3,1)=3
        ELSE
          GOTO 992
        ENDIF
41    CONTINUE
C
C
50    CONTINUE
C
C     TOTAL
C
      SIGMAX=MAXVAL(XSTOR(1:NSTOR1))
      DO I=1,NSTOR1
        IF (XSTOR(I).LE.SIGMAX*1.D-10) XSTOR(I)=0.D0
      ENDDO
C
100   CONTINUE
      SIGTOT=SIGPIT+SIGCXT+SIGEIT
      IF (SIGTOT.GT.1.D-20) THEN
        FPATHI=VEL/SIGTOT
        ZMFPI=1./FPATHI
      ENDIF
C
      RETURN
990   CONTINUE
      IIO=NSPAM+IION
      WRITE (6,*) 'ERROR IN FPATHI: INCONSISTENT ELEC. IMP. DATA'
      WRITE (6,*) 'IIO,MODCOL(1,J,IIO,1) '
      WRITE (6,*) IION,(MODCOL(1,J,IIO,1),J=1,4)
      CALL EXIT
992   CONTINUE
      IIO=NSPAM+IION
      WRITE (6,*) 'ERROR IN FPATHI: INCONSISTENT CHARGE EXCHANGE DATA'
      WRITE (6,*) 'IIO,IPL,MODCOL(3,J,IIO,IPL) '
      DO 994 IPL=1,NPLSI
        WRITE (6,*) IION,IPL,(MODCOL(3,J,IIO,IPL),J=1,4)
994   CONTINUE
      CALL EXIT
      END
C
      FUNCTION EXTRAP(ELAB,IFLAG,FP1,FP2,FP3)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C  NOTE:
C  INPUT:  ELAB IS LOG OF RELATIVE ENERGY, OR LOG OF TEMP
C  OUTPUT: EXTRAP IS NOT LOG, BUT THE TRUE VALUE
C
C  FUNCTION FOR EXTRAPOLATING SINGLE PARAMETER FITS BEYOND THEIR
C  RANGE OF VALIDITY
C  TYPE  IFLAG=1--4: JANEV ET AL. , SPRINGER, 1987, P13
C  TYPE  IFLAG=5  BACHMANN ET AL., IPP-REPORT, .....ELASTIC
      IF (IFLAG.EQ.1) THEN
C  NON ZERO THRESHOLD
        EXTRAP=0.
      ELSEIF (IFLAG.EQ.2) THEN
C  EXTRAPOLATION AT HIGH ENERGY END FOR REACTIONS WITH NON ZERO THRESHOLD
C  FP1 SHOULD BE = E_THRESHOLD (EV)
        EL=EXP(ELAB)
        X=EL/FP1
        EXTRAP=FP2*X**FP3*LOG(X)
      ELSEIF (IFLAG.EQ.3) THEN
        EXTRAP=EXP(FP1+FP2*ELAB)
      ELSEIF (IFLAG.EQ.4) THEN
C
C  OUT
C       EXTRAP=EXP((FP1+FP2*ELAB)**2)
C
      ELSEIF (IFLAG.EQ.5) THEN
C  LINEAR OR QUADRATIC EXTRAPOLATION IN LN(SIGMA)
        EXTRAP=EXP(FP1+FP2*ELAB+FP3*ELAB**2)
      ELSE
        GOTO 999
      ENDIF
      RETURN
999   CONTINUE
      WRITE (6,*) 'ERROR IN EXTRAP. EXIT CALLED '
      CALL EXIT
      END
C
      SUBROUTINE CDEF(AL,JI,JE,K,COU,NTE,CF,LEXP,LTEST,LSUM)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      INCLUDE 'PARMMOD'
      INCLUDE 'COMXS'
      INCLUDE 'CCONA'
      LOGICAL LEXP,LTEST,LSUM
C
C  EIRENE ATOMIC DATA , DEFAULT OR FROM FILE: POLYNOM FIT FORMAT
C
C  INPUT:
C    AL(J),J=1,NTE
C  OUTPUT:
C    MAXWELLIAN RATES, AL=LN(KT), KT IN (EV)
C  K
C       K>0: A&M DATA FROM FILES HYDHEL, METHANE OR AMJUEL
C           K:  NUMBER OF REACTION IN EIRENE "CREAC"-ARRAY
C
C       K<0: HARD WIRED EIRENE DEFAULT ATOMIC AND MOLECULAR DATA PACKAGE
C       EACH NUMBER ABS(K) CORRESPONDS TO ONE SPECIFIC REACTION DATA FIT
C       (SEE COMMENTS BELOW)
C  JI,JE
C  FOR JI<=J<=JE RETURN:
C       1<=J<=9:  JTH ENERGY COEFFICIENT OF TWO PARAM. FITS
C                 AT TEMPERATUR KT (EV)
C                 (E.G.: RATES FOR HEAVY PARTICLE INTERACTIONS)
C                 IF ONLY ONE FIT AVAILABLE, ITS INDEX IS J=1
C                 E.Q. FOR ELECT. IMP. RATES AS FUNCTION OF TE
C
C  FIT FROM JANEV ET AL, PPPL-TM-368, 1985  (PREPRINT) OR:
C           SPRINGER SERIES ON ATOMS AND PLASMAS, VOL 4, 1987
      DIMENSION AL(*),COU(0:9,*),CF(9,0:9)
      DIMENSION CFP(9,11)
      DIMENSION CF1(9),CF2(9),CF3(9),
     .          CF4(9),CF5(9),CF6(9),CF7(9),
     .          CF8(9),CF9(9),CF10(9),CF11(9)
C
      EQUIVALENCE (CFP(1,1),CF1(1)),(CFP(1,2),CF2(1)),
     .            (CFP(1,3),CF3(1)),(CFP(1,4),CF4(1)),
     .            (CFP(1,5),CF5(1)),(CFP(1,6),CF6(1)),
     .            (CFP(1,7),CF7(1)),(CFP(1,8),CF8(1)),
     .            (CFP(1,9),CF9(1)),(CFP(1,10),CF10(1)),
     .            (CFP(1,11),CF11(1))
C
C  K>0:
C  DATA FROM ARRAY CREAC(9,0:9,K)
C
C -K=1:   E + HE --> 2E + HE+
C  RATE COEFFICIENT, JANEV, 2.3.9
      DATA CF1
     ./-4.409865E+01,2.391597E+01,-1.075323E+01,3.058039,
     . -5.685119E-01,6.795391E-02,-5.009056E-03,2.067236E-04,
     . -3.649161E-06/
C -K=2:   FREE
C -K=3:   FREE
C -K=4:   E + H --> H+ + 2E
C  RATE COEFFICIENT, JANEV, 2.1.5
      DATA CF4
     ./-3.271397E+01,1.353656E+01,-5.739329E 00,1.563155E 00,
     . -2.877056E-01,3.482560E-02,-2.631976E-03,1.119544E-04,
     . -2.039150E-06/
C -K=5:  E + H2 --> H + H + E
C  RATE COEFFICIENT, JANEV, 2.2.5, PREPRINT (CORRECT), NOT "BOOK"
      DATA CF5
     ./-2.7872175E+01,1.0522527E+01,-4.9732123E+00,
     .  1.4511982E+00,-3.0627906E-01,4.4333795E-02,
     . -4.0963442E-03, 2.1596703E-04,-4.9285453E-06/
C -K=6:  E + H2 --> H+ + H + 2E
C  RATE COEFFICIENT, JANEV, 2.2.10
      DATA CF6
     ./-3.834597E+01,1.426322E+01,-5.826467E+00,
     .  1.727941E+00,-3.598121E-01,4.822199E-02,
     . -3.909403E-03,1.738777E-04,-3.252845E-06/
C -K=7: E + H2 --> H2+(VIB) + 2E
C  RATE COEFFICIENT, JANEV, 2.2.9
      DATA CF7
     ./-3.568640E+01,1.733469E+01,-7.767469E+00,
     .  2.211579E+00,-4.169840E-01,5.088290E-02,
     . -3.832738E-03,1.612863E-04,-2.893392E-06/
C -K=8: E + H2+(VIB) --> H + H+ + E
C  RATE COEFFICIENT, JANEV, 2.2.12
      DATA CF8
     ./-1.781416E+01,2.277799E+00,-1.266868E+00,
     .  4.296170E-01,-9.609908E-02,1.387958E-02,
     . -1.231349E-03,6.042383E-05,-1.247521E-06/
C -K=9: E + H2+(VIB) --> H+ + H+ + 2E
C  RATE COEFFICIENT, JANEV, 2.2.11
      DATA CF9
     ./-3.746192E+01,1.559355E+01,-6.693238E+00,
     .  1.981700E+00,-4.044820E-01,5.352392E-02,
     . -4.317452E-03,1.918499E-04,-3.591779E-06/
C -K=10: E + H2+(VIB) --> H + H(N)
C  RATE COEFFICIENT, JANEV, 2.2.14
      DATA CF10
     ./-1.670436E+01,-6.035645E-01,-1.942746E-08,
     . -2.005952E-07,2.962996E-08,2.134293E-08,
     . -6.353973E-09,6.152557E-10,-2.025362E-11/
C -K=11:  FREE
C
      IF (K.LT.0) THEN
C  EIRENE DEFAULT DATA, JI=JE, LEXP=TRUE,LSUM=FALSE,LTEST=FALSE
        DO 10 J=JI,JE
          DO 10 II=1,9
            CF(II,J)=CFP(II,-K+J-JI)
10      CONTINUE
C
      ELSEIF (K.GT.0) THEN
C  DATA FROM A&M DATA FILES
        DO 11 J=JI,JE
          DO 12 II=1,9
            CF(II,J)=CREAC(II,J,K)
12        CONTINUE
11      CONTINUE
        IF (LTEST) THEN
          DO 13 J=JI,JE
            CTEST=0.
            DO 14 II=1,9
              CTEST=CTEST+ABS(CF(II,J))
14          CONTINUE
            IF (CTEST.LE.EPS60) GOTO 990
13        CONTINUE
        ENDIF
      ENDIF
C
      IF (LSUM) THEN
        DO 20 J=JI,JE
          DO 20 ICELL=1,NTE
            COU(J,ICELL)=CF(9,J)
20      CONTINUE
C
        DO 21 J=JI,JE
          DO 22 II=8,1,-1
            DO 23 ICELL=1,NTE
              COU(J,ICELL)=COU(J,ICELL)*AL(ICELL)+CF(II,J)
23          CONTINUE
22        CONTINUE
21      CONTINUE
      ENDIF
C
      IF (LEXP) THEN
        DO 24 ICELL=1,NTE
          COU(JE,ICELL)=EXP(MAX(-100.D0,COU(JE,ICELL)))
24      CONTINUE
      ENDIF
C
      RETURN
C
C
990   CONTINUE
      WRITE (6,*) 'ERROR IN SUBROUTINE CDEF: ZERO FIT COEFFICIENTS'
      WRITE (6,*) 'J,K = ',J,K,'  EXIT CALLED!'
      CALL EXIT
      END
C
      SUBROUTINE CDEFN(AL,PL,K,COU,NTE,CF,LEXP,LTEST,LSUM)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      INCLUDE 'PARMMOD'
      INCLUDE 'COMXS'
      INCLUDE 'CCONA'
      LOGICAL LEXP,LTEST,LSUM
C
C  EIRENE DEFAULT ATOMIC DATA FOR INTERACTION WITH HYDROGEN
C  SAME AS CDEF, BUT FOR 2 PARAMETER FITTING EXPRESSIONS
C
C  INPUT:
C    AL(J),J=1,NTE, PL(I),I=1,NTE
C  OUTPUT:
C    MAXWELLIAN RATES, AL=LN(KT), KT IN (EV)
C                      PL=LN(NE), NE IN (1/CM**3)
C  K
C       K>0: A&M DATA FROM FILES HYDHEL, METHANE OR AMJUEL
C           K:  NUMBER OF REACTION IN EIRENE "CREAC"-ARRAY
C
      DIMENSION AL(*),PL(*),COU(0:9,*),CF(9,0:9), DUMMP(9)
C
C  K>0:
C  DATA FROM ARRAY CREAC(9,0:9,K)
C
      IF (K.GT.0) THEN
C  DATA FROM A&M DATA FILES
        DO 11 J=1,9
          DO 12 II=1,9
            CF(II,J)=CREAC(II,J,K)
            IF (output.AND.k.EQ.15)
     .      WRITE(6,*) 'MARK: CF= ',j,ii,creac(ii,j,k)
12        CONTINUE
11      CONTINUE
        IF (LTEST) THEN
          DO 13 J=1,9
            CTEST=0.
            DO 14 II=1,9
              CTEST=CTEST+ABS(CF(II,J))
14          CONTINUE
            IF (CTEST.LE.EPS60) GOTO 990
13        CONTINUE
        ENDIF
      ELSE
        GOTO 990
      ENDIF
C
      IF (LSUM) THEN
        DO 20 ICELL=1,NTE
          COU(1,ICELL)=0.
20      CONTINUE
C
        DO 25 ICELL=1,NTE
          IF (AL(ICELL).LT.RCMN(K,2)) THEN
C  DETERMINE EXTRAPOLATION COEFFICIENTS FOR LINEAR EXTRAP. IN LN(<S*V>)
            S01=RCMN(K,2)
            S02=ALOG(2.)+RCMN(K,2)
            DS12=S02-S01
            EXPO1=0.
            EXPO2=0.
            DO 1 J=1,9
              JJ=J-1
              DO 1 I=1,9
                II=I-1
                EXPO1=EXPO1+S01**II*PL(ICELL)**JJ*CF(I,J)
                EXPO2=EXPO2+S02**II*PL(ICELL)**JJ*CF(I,J)
1           CONTINUE
            CCXM1=EXPO1
            CCXM2=EXPO2
            FPAR1=CCXM1+(CCXM2-CCXM1)/DS12*(-S01)
            FPAR2=      (CCXM2-CCXM1)/DS12
            FPAR3=0.D0
C
            IFEX=5
            COU(1,ICELL)=EXTRAP(AL(ICELL),IFEX,FPAR1,FPAR2,FPAR3)
            if (.not.lexp) cou(1,icell)=dlog(cou(1,icell))
C
          ELSE
C
            DO 22 JJ=9,1,-1
              DUMMP(JJ)=CF(9,JJ)
              DO 23 KK=8,1,-1
                DUMMP(JJ)=DUMMP(JJ)*AL(ICELL)+CF(kk,jj)
23            CONTINUE
22          CONTINUE
            cou(1,icell)=dummp(9)
            DO 24 JJ=8,1,-1
              cou(1,icell)=cou(1,icell)*PL(icell)+DUMMP(JJ)
24          CONTINUE
c            IF (output.AND.k.EQ.15)
c     .      WRITE(6,*) 'MARK: CFV=',al(icell),pl(icell),cou(1,icell),
c     .        exp(al(icell)),exp(pl(icell)),rcmn(k,2)
C
C           DO 22 J=1,9
C             JJ=J-1
C             DO 22 I=1,9
C               II=I-1
C               COU(1,ICELL)=COU(1,ICELL)+AL(ICELL)**II*
C    .                                    PL(ICELL)**JJ*CF(I,J)
C22          CONTINUE
C
            if (lexp) COU(1,ICELL)=EXP(MAX(-100.D0,COU(1,ICELL)))
          ENDIF
25      CONTINUE
      ENDIF
C
C
      RETURN
C
C
990   CONTINUE
      WRITE (6,*) 'ERROR IN SUBROUTINE CDEFN: ZERO FIT COEFFICIENTS'
      WRITE (6,*) 'J,K = ',J,K,'  EXIT CALLED!'
      CALL EXIT
      END
C
      FUNCTION CROSS(AL,K)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      INCLUDE 'PARMMOD'
      INCLUDE 'COMXS'
c slmod begin - not tr (yet?)
      INCLUDE 'COMPRT'
c slmod end
C  CROSS SECTION
C    AL=LN(ELAB), ELAB IN (EV)
C    RETURN CROSS SECTION IN CM**2
      DIMENSION CF1(9)
C  K>0 :  DATA FROM ARRAY CREAC(9,0:9,K)
C
C  K<0 :  DEFAULT MODEL
C
C  K=-1:  H + H+ --> H+ + H   CROSS SECTION, JANEV, 3.1.8
C         LINEAR EXTRAPOLATION AT LOW ENERGY END FOR LN(SIGMA)
      DATA CF1
     ./-3.274124E+01,-8.916457E-02,-3.016991E-02,
     .  9.205482E-03, 2.400267E-03,-1.927122E-03,
     .  3.654750E-04,-2.788866E-05, 7.422296E-07/
      DATA RMIN
     ./-2.3025851E+00/
      DATA FP1,FP2
     ./-3.2945896E+01,-1.713112E-01/
C
      IF (K.EQ.-1) THEN
C  ELAB BELOW MIMINUM ENERGY FOR FIT:
        IF (AL.LT.RMIN) THEN
C  USE ASYMPTOTIC EXPRESSION NO. IFMN=5
          CROSS=EXTRAP(AL,5,FP1,FP2,0.D0)
C  ELAB ABOVE MAXIMUM ENERGY FOR FIT: NOT IN USE FOR K=-1
C       ELSEIF (ELAB.GT.RMAX) THEN
C  USE ASYMPTOTIC EXPRESSION NO. IFMX=5
C         CROSS=EXTRAP(AL,5,FP4,FP5,0.D0)
C
        ELSE
          EXPO=CF1(9)
          DO 10 II=1,8
            IF8=9-II
            EXPO=EXPO*AL+CF1(IF8)
10        CONTINUE
          CROSS=EXP(MAX(-100.D0,EXPO))
        ENDIF
C
      ELSEIF (K.GT.0) THEN
C  ELAB BELOW MINIMUM ENERGY FOR FIT:
        IF (AL.LT.RCMN(K,1)) THEN
C  USE ASYMPTOTIC EXPRESSION NO. IFEXMN(K)
          IF (IFEXMN(K,1).LT.0) THEN
C  DETERMINE EXTRAPOLATION COEFFICIENTS FOR LINEAR EXTRAP. IN LN(SIGMA)
            S01=RCMN(K,1)
            S02=ALOG(2.)+RCMN(K,1)
            DS12=S02-S01
            EXPO1=CREAC(9,0,K)
            EXPO2=CREAC(9,0,K)
            DO 1 II=1,8
              IF8=9-II
              EXPO1=EXPO1*S01+CREAC(IF8,0,K)
              EXPO2=EXPO2*S02+CREAC(IF8,0,K)
1           CONTINUE
            CCXM1=EXPO1
            CCXM2=EXPO2
            FPARM(K,1,1)=CCXM1+(CCXM2-CCXM1)/DS12*(-S01)
            FPARM(K,2,1)=      (CCXM2-CCXM1)/DS12
            FPARM(K,3,1)=0.D0
C
            IFEXMN(K,1)=5
          ENDIF
          CROSS=EXTRAP(AL,IFEXMN(K,1),FPARM(K,1,1),FPARM(K,2,1),
     .                                             FPARM(K,3,1))
C  ELAB ABOVE MAXIMUM ENERGY FOR FIT:
        ELSEIF (AL.GT.RCMX(K,1)) THEN
C  USE ASYMPTOTIC EXPRESSION NO. IFEXMX(K,1)
          CROSS=EXTRAP(AL,IFEXMX(K,1),FPARM(K,4,1),FPARM(K,5,1),
     .                                             FPARM(K,6,1))
        ELSE
          EXPO=CREAC(9,0,K)
          DO 100 II=1,8
            IF8=9-II
            EXPO=EXPO*AL+CREAC(IF8,0,K)
100       CONTINUE
          CROSS=EXP(EXPO)
        ENDIF
      ELSE
        WRITE (6,*) 'ERROR IN CROSS: K= ',K,npanu
c slmod begin - tr
        WRITE (0,*) 'ERROR IN CROSS: K= ',K,npanu
        CALL CHCTRC(X0,Y0,Z0,16,-1)
        CROSS=1.0D-30
c
c        CALL EXIT
c slmod end
      ENDIF
      RETURN
      END
C
      SUBROUTINE SETAMD
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C  SET ATOMIC AND MOLECULAR DATA: DRIVER
C
      INCLUDE 'PARMMOD'
      INCLUDE 'COMXS'
      DIMENSION RCMDTA(NMDTA),ICMDTA(MMDTA)
      EQUIVALENCE (RCMDTA(1),TABDS1(1,1))
      EQUIVALENCE (ICMDTA(1),MODCOL(1,1,1,0))
C
      DO 110 J=1,NMDTA
110     RCMDTA(J)=0.
      DO 120 J=1,MMDTA
120     ICMDTA(J)=0
C
      NRCXI=0
      NRELI=0
      NRPII=0
      NREII=0
      NRRCI=0
      NRBGI=0
      CALL XSECTA
      CALL XSECTM
      CALL XSECTI
      CALL XSECTP
      CALL CONDENSE
      RETURN
      END
C
      SUBROUTINE XSECTA
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
C       SET UP TABLES (E.G. OF REACTION RATE ) FOR ATOMIC SPECIES
C
      INCLUDE 'PARMMOD'
      INCLUDE 'CLOGAU'
      INCLUDE 'CTRCEI'
      INCLUDE 'CZT1'
      INCLUDE 'COMXS'
      INCLUDE 'CTEXT'
      INCLUDE 'COMUSR'
      INCLUDE 'COMSOU'
      INCLUDE 'CGRID'
      INCLUDE 'CCONA'
      INCLUDE 'CSPEI'
C
      DIMENSION PLS(NRAD),COUN(0:9,NRAD),CF(9,0:9)
      CHARACTER*8 TEXTS1,TEXTS2
      SAVE
C
C
C   ELECTRON IMPACT COLLISIONS:
C
C  FIND SPECIES INDEX OF ION AFTER IONIZATION EVENT FOR THE DEFAULT
C  ELECTRON IMPACT IONIZATION MODELS FROM INPUT MASS AND
C  AND CHARGE NUMBER
C
C
      DSUB=LOG(1.D8)
      DEIMIN=LOG(1.D8)
      DO 70 J=1,NSBOX
        PLS(J)=MAX(DEIMIN,DEINL(J))-DSUB
70    CONTINUE
C
      DO 100 IATM=1,NATMI
        IDSC1=0
        LGAEI(IATM,0)=0
C
        IF (NRCA(IATM).EQ.0.AND.NCHARA(IATM).LE.2) THEN
C
C  DEFAULT H,D,T OR HE ELEC. IMP. IONIZATION MODEL
C
          IION1=0
          IPLS1=0
          DO 52 IPLS=1,NPLSI
            IF (NCHARP(IPLS).EQ.NCHARA(IATM).AND.
     .          NMASSP(IPLS).EQ.NMASSA(IATM).AND.
     .          NCHRGP(IPLS).EQ.1) THEN
              IPLS1=IPLS
C
              IDSC1=IDSC1+1
              NREII=NREII+1
              IF (output) THEN
              WRITE(0,*) 'MARK: ASSIGNING IPLS,IATM,NREII,NRDS= ',
     .                   IPLS,IATM,NREII
              WRITE(6,*) 'MARK: ASSIGNING IPLS,IATM,NREII,NRDS= ',
     .                   IPLS,IATM,NREII
              ENDIF
              IF (NREII.GT.NRDS) GOTO 993
              IREI=NREII
              LGAEI(IATM,IDSC1)=IREI
C
              PELDS(IREI)=1.
              PPLDS(IREI,IPLS1)=1.
              EPLDS(IREI,1)=1.D0
              EPLDS(IREI,2)=0.D0
              GOTO 50
            ENDIF
52        CONTINUE
          GOTO 100
C
50        IF (NCHARA(IATM).EQ.1) THEN
            ISTORE=-4
            EELEC=-EIONH
            CALL CDEF (TEINL,1,1,ISTORE,COUN,NSBOX,CF,.TRUE.,.FALSE.,
     .                .TRUE.)
          ELSEIF (NCHARA(IATM).EQ.2) THEN
            ISTORE=-1
            EELEC=-EIONHE
            CALL CDEF (TEINL,1,1,ISTORE,COUN,NSBOX,CF,.TRUE.,.FALSE.,
     .                .TRUE.)
          ENDIF
C
          IF (NSTORDR >= NRAD) THEN
            DO 80 J=1,NSBOX
              STOP 'MARK: TABDS1 01'
              TABDS1(IREI,J)=COUN(1,J)*DEIN(J)
80          CONTINUE
C  NO RADIATION LOSS INCLUDED
            EELDS1(IREI,1:NSBOX)=EELEC
          ELSE
            CREAC(1:9,1,ISTORE) = CF(1:9,1)
            NREAEI(IREI) = ISTORE
            JEREAEI(IREI) = 1
            NELREI(IREI) = ISTORE
          ENDIF
          MODCOL(1,2,IATM,1)=1
          MODCOL(1,4,IATM,1)=1
C
C  TRACKLENGTH ESTIMATOR FOR ALL COLLISION RATE CONTRIBUTIONS
C
          IESTEI(IREI,1)=0
          IESTEI(IREI,2)=0
          IESTEI(IREI,3)=0
C
          NAEII(IATM)=IDSC1
C
C  NON DEFAULT ELEC. IMP. COLLISION MODEL,
C
        ELSEIF (NRCA(IATM).GT.0) THEN
          DO 90 NRC=1,NRCA(IATM)
            KK=IREACA(IATM,NRC)
            FACTKK=FREACA(IATM,NRC)
            IF (FACTKK.EQ.0.D0) FACTKK=1.
            IF (output)
     .      WRITE(0,*) 'MARK: KK,NRCA,ISWR= ',KK,NRCA(IATM),ISWR(KK)
            IF (ISWR(KK).NE.1) GOTO 90
            CHRDF0=0.D0
            IAT=IATM
            RMASS=RMASSA(IATM)
            IFRST=ISCD1A(IATM,NRC)
            ISCND=ISCD2A(IATM,NRC)
            ISCDE=ISCDEA(IATM,NRC)
            IESTM=IESTMA(IATM,NRC)
            EHEAVY=ESCD1A(IATM,NRC)+ESCD2A(IATM,NRC)
            EELEC=EELECA(IATM,NRC)
            IDSC1=IDSC1+1
            NREII=NREII+1
            IF (NREII.GT.NRDS) GOTO 993
            IREI=NREII
            LGAEI(IATM,IDSC1)=IREI
            CALL XSTEI(RMASS,IREI,IAT,
     .                 IFRST,ISCND,EHEAVY,CHRDF0,
     .                 ISCDE,EELEC,IESTM,KK,FACTKK,PLS)
90        CONTINUE
          NAEII(IATM)=IDSC1
        ENDIF
C
        NAEIIM(IATM)=NAEII(IATM)-1
        LGAEI(IATM,0)=NAEII(IATM)
C
        DO 95 IAEI=1,NAEII(IATM)
          IREI=LGAEI(IATM,IAEI)
          CALL XSTEI_1(IREI)
95      CONTINUE
C
100   CONTINUE
C
C
C   CHARGE EXCHANGE:
C
      DO 200 IATM=1,NATMI
        IDSC=0
        LGACX(IATM,0,0)=0
        LGACX(IATM,0,1)=0
C
C   HYDROGENIC AND HELIUM DEFAULT MODEL 100 --- 140
C
        IF (NRCA(IATM).EQ.0) THEN
          DO 122 IPLS=1,NPLSI
C  TENTATIVELY ASSUME: NO CHARGE EXCHANGE BETWEEN IATM AND IPLS
C  NEUTRAL HYDROGENIC PARTICLE WITH HYDROGENIC ION
            IF (NCHARA(IATM).EQ.1.AND.NCHARP(IPLS).EQ.1) THEN
              DO 121 IPL=1,NPLSI
                IF (NMASSA(IATM).EQ.NMASSP(IPL).AND.NCHRGP(IPL).EQ.1)
     .          GOTO 123
121           CONTINUE
              GOTO 122
123           DO 124 IAT=1,NATMI
                IF (NMASSA(IAT).EQ.NMASSP(IPLS).AND.NCHRGP(IPLS).EQ.1)
     .          GOTO 125
124           CONTINUE
              GOTO 122
C  CHARGE EXCHANGE BETWEEN IATM AND IPLS RESULTS IN IPL AND IAT
125           CONTINUE
              IDSC=IDSC+1
              NRCXI=NRCXI+1
              IF (NRCXI.GT.NRCX) GOTO 997
              IRCX=NRCXI
              LGACX(IATM,IDSC,0)=IRCX
              LGACX(IATM,IDSC,1)=IPLS
              N1STX(IRCX,1)=1
              N1STX(IRCX,2)=IAT
              N1STX(IRCX,3)=1
              N2NDX(IRCX,1)=4
              N2NDX(IRCX,2)=IPL
              N2NDX(IRCX,3)=1
C  PROJECTILE MASS IS 1.
C  TARGET     MASS IS 1.
              PMASS=1.*PMASSA
              TMASS=1.*PMASSA
C
C  CROSS SECTION (E-LAB): IN FUNCTION CROSS, K=-1
              MODCOL(3,1,IATM,IPLS)=-1
              MODCOL(3,2,IATM,IPLS)=3
C
C             TABCX3(IRCX,...)= NOT AVAILABLE FOR DEFAULT MODEL
C
              DEFCX(IRCX)=LOG(CVELI2*PMASS)
              EEFCX(IRCX)=LOG(CVELI2*TMASS)
C
C  TRACKLENGTH ESTIMATOR FOR ALL COLLISION RATE CONTRIBUTIONS
C
              IESTCX(IRCX,1)=0
              IESTCX(IRCX,2)=0
              IESTCX(IRCX,3)=0
C
C  DEFAULT BULK ION ENERGY LOSS RATE = 1.5*TI+EDRIFT PER COLLISION
C
              IF (NSTORDR >= NRAD) THEN
              DO 127 J=1,NSBOX
                EPLCX3(IRCX,J,1)=1.5*TIIN(IPLS,J)+EDRIFT(IPLS,J)
127           CONTINUE
              ELSE
                NELRCX(IRCX) = -1
              END IF
              MODCOL(3,4,IATM,IPLS)=1
C
            ENDIF
122       CONTINUE
C
          NACXI(IATM)=IDSC
C
C  NON DEFAULT CX MODEL:
        ELSEIF (NRCA(IATM).GT.0) THEN
          DO 130 NRC=1,NRCA(IATM)
            KK=IREACA(IATM,NRC)
            FACTKK=FREACA(IATM,NRC)
            IF (FACTKK.EQ.0.D0) FACTKK=1.
            IF (ISWR(KK).NE.3) GOTO 130
            IPLS=IDEZ(IBULKA(IATM,NRC),3,3)
            IDSC=IDSC+1
            NRCXI=NRCXI+1
            IF (NRCXI.GT.NRCX) GOTO 997
            IRCX=NRCXI
            LGACX(IATM,IDSC,0)=IRCX
            LGACX(IATM,IDSC,1)=IPLS
            IAT=IATM
            IPL=IPLS
            RMASS=RMASSA(IATM)
            IFRST=ISCD1A(IATM,NRC)
            ISCND=ISCD2A(IATM,NRC)
            ISCDE=ISCDEA(IATM,NRC)
            IESTM=IESTMA(IATM,NRC)
            EBULK=EBULKA(IATM,NRC)
            CALL XSTCX(RMASS,IRCX,IAT,IPL,
     .                 IFRST,ISCND,EBULK,ISCDE,IESTM,KK,FACTKK)
C
130       CONTINUE
C
          NACXI(IATM)=IDSC
C  NO CX MODEL DEFINED
        ELSE
          NACXI(IATM)=0
        ENDIF
C
        NACXIM(IATM)=NACXI(IATM)-1
C
        LGACX(IATM,0,0)=0.
        DO 180 IACX=1,NACXI(IATM)
          LGACX(IATM,0,0)=LGACX(IATM,0,0)+LGACX(IATM,IACX,0)
180     CONTINUE
C
200   CONTINUE
C
C
C   ELASTIC COLLISIONS
C
      DO 300 IATM=1,NATMI
C
        IDSC=0
        LGAEL(IATM,0,0)=0
        LGAEL(IATM,0,1)=0
C
C   AT PRESENT NO DEFAULT MODEL
C
        IF (NRCA(IATM).EQ.0) THEN
          NAELI(IATM)=0
C
C  NON DEFAULT EL MODEL:  240--
C
        ELSEIF (NRCA(IATM).GT.0) THEN
          DO 230 NRC=1,NRCA(IATM)
            KK=IREACA(IATM,NRC)
            FACTKK=FREACA(IATM,NRC)
            IF (FACTKK.EQ.0.D0) FACTKK=1.
            IF (ISWR(KK).NE.5) GOTO 230
C  BULK PARTICLE INDEX
            IPLS=IDEZ(IBULKA(IATM,NRC),3,3)
            IF (IPLS.LE.0.OR.IPLS.GT.NPLSI) GOTO 991
            IF (MASSP(KK).LE.0.OR.MASST(KK).LE.0) GOTO 992
            IDSC=IDSC+1
            NRELI=NRELI+1
            IF (output) THEN
            WRITE(0,*) 'MARK: BULK PARTICLE INDEX'
            WRITE(6,*) 'MARK: BULK PARTICLE INDEX'
            ENDIF
            IF (NRELI.GT.NREL) GOTO 998
            IREL=NRELI
            LGAEL(IATM,IDSC,0)=IREL
            LGAEL(IATM,IDSC,1)=IPLS
C  SPECIAL TREATMENT: BGK-SELF COLLISIONS AMONGST TESTPARTICLES
            IF (IBGKA(IATM,NRC).NE.0) THEN
              IF (NPBGKA(IATM).EQ.0) THEN
                NRBGI=NRBGI+3
                IF (NRBGI.GT.NBGV) GOTO 998
                IBGK=NRBGI/3
                NPBGKA(IATM)=IBGK
              ENDIF
              IF (NPBGKP(IPLS,1).EQ.0) THEN
                NPBGKP(IPLS,1)=NPBGKA(IATM)
              ELSE
                GOTO 999
              ENDIF
C  SELF OR CROSS COLLISION?
              ITYPB=IDEZ(IBGKA(IATM,NRC),1,3)
              ISPZB=IDEZ(IBGKA(IATM,NRC),3,3)
              IF (ITYPB.NE.1.OR.ISPZB.NE.IATM) THEN
C  CROSS COLLISION !
c                WRITE(0,*) 'MARK: CROSS!'
                IF (NPBGKP(IPLS,2).EQ.0) THEN
                  NPBGKP(IPLS,2)=IBGKA(IATM,NRC)
                ELSE
                  GOTO 999
                ENDIF
              ENDIF
            ENDIF
            IAT=IATM
            IPL=IPLS
            ISCDE=ISCDEA(IATM,NRC)
            IESTM=IESTMA(IATM,NRC)
            EBULK=EBULKA(IATM,NRC)
            CALL XSTEL(IREL,IAT,IPL,EBULK,
     .                 ISCDE,IESTM,KK,FACTKK)
C
230       CONTINUE

          NAELI(IATM)=IDSC
C
C  NO EL MODEL DEFINED
        ELSE
          NAELI(IATM)=0
        ENDIF
C
        NAELIM(IATM)=NAELI(IATM)-1
C
        LGAEL(IATM,0,0)=0.
        DO 280 IAEL=1,NAELI(IATM)
          LGAEL(IATM,0,0)=LGAEL(IATM,0,0)+LGAEL(IATM,IAEL,0)
280     CONTINUE
C
300   CONTINUE
C
      CALL XSTAPI(COUN,PLS)
C
C
      DO 1000 IATM=1,NATMI
C
        IF (TRCAMD) THEN
          CALL MASBOX ('ATOMIC SPECIES IATM = '//TEXTS(IATM))
          CALL LEER(1)
C
          IF (LGAEI(IATM,0).EQ.0) THEN
            CALL LEER(1)
            WRITE (6,*) 'NO ELECTRON IMPACT COLLISIONS '
            CALL LEER(1)
          ELSE
            DO 870 IAEI=1,NAEII(IATM)
              IREI=LGAEI(IATM,IAEI)
              CALL XSTEI_2(IREI)
870         CONTINUE
          ENDIF
C
          CALL LEER(2)
          IF (LGAPI(IATM,0,0).EQ.0) THEN
            CALL LEER(1)
C           WRITE (6,*) 'NO ION IMPACT COLLISIONS '
C           CALL LEER(1)
          ELSE
            DO 885 IAPI=1,NAPII(IATM)
              IRPI=LGAPI(IATM,IAPI,0)
              IPLS=LGAPI(IATM,IAPI,1)
              CALL LEER(1)
              WRITE (6,*) 'ION IMPACT REACTION NO. IRPI= ',IRPI
              CALL LEER(1)
              WRITE (6,*) 'INCIDENT BULK ION: IPLS:'
              WRITE (6,*) 'IPLS= ',TEXTS(NSPAMI+IPLS)
              CALL LEER(1)
              WRITE (6,*) 'ELECTRONS: PELPI,EELPI'
              WRITE (6,*) 'EL      ', PELPI(IRPI),0.D0
              CALL LEER(1)
              WRITE (6,*) 'BULK ION SECONDARIES:'
              IF (PPLPI(IRPI,0).GT.0.D0) THEN
                WRITE (6,*) 'BULK IONS: PPLPI,EPLPI '
                DO IPL=1,NPLSI
                  IF (PPLPI(IRPI,IPL).GT.0.D0)
     .            WRITE (6,*) TEXTS(NSPAMI+IPL),PPLPI(IRPI,IPL),
     .                                          EPLPI(IRPI,IPL)
                ENDDO
              ELSE
                WRITE (6,*) 'NONE'
              ENDIF
              CALL LEER(1)
              WRITE (6,*) 'TEST PARTICLE SECONDARIES:'
              IF (P2NPI(IRPI).EQ.0.D0) THEN
                WRITE (6,*) 'NONE'
              ENDIF
              IF (PATPI(IRPI,0).GT.0) THEN
                DO IAT=1,NATMI
                  ISP=IAT
                  P=PATPI(IRPI,IAT)
                  IF (P.GT.0) WRITE (6,*) 'ATOM     IATM= ',TEXTS(ISP),P
                ENDDO
              ENDIF
              IF (PMLPI(IRPI,0).GT.0) THEN
                DO IML=1,NMOLI
                  ISP=NSPA+IML
                  P=PMLPI(IRPI,IML)
                  IF (P.GT.0) WRITE (6,*) 'MOLECULE IMOL= ',TEXTS(ISP),P
                ENDDO
              ENDIF
              IF (PIOPI(IRPI,0).GT.0) THEN
                DO IIO=1,NIONI
                  ISP=NSPAM+IIO
                  P=PIOPI(IRPI,IIO)
                  IF (P.GT.0) WRITE (6,*) 'TEST ION IION= ',TEXTS(ISP),P
                ENDDO
              ENDIF
            CALL LEER(1)
885         CONTINUE
          ENDIF
C
          CALL LEER(2)
          IF (LGACX(IATM,0,0).EQ.0) THEN
            CALL LEER(1)
            WRITE (6,*) 'NO CHARGE EXCHANGE WITH BULK IONS'
            CALL LEER(1)
          ELSE
            DO 890 IACX=1,NACXI(IATM)
              IRCX=LGACX(IATM,IACX,0)
              IPL =LGACX(IATM,IACX,1)
              CALL XSTCX_2(IRCX,IPL)
890         CONTINUE
          ENDIF
          IF (LGAEL(IATM,0,0).EQ.0) THEN
            CALL LEER(1)
            WRITE (6,*) 'NO ELASTIC COLLISIONS WITH BULK IONS'
            CALL LEER(1)
          ELSE
            DO 895 IAEL=1,NAELI(IATM)
              IREL=LGAEL(IATM,IAEL,0)
              IPL =LGAEL(IATM,IAEL,1)
              CALL XSTEL_2(IREL,IPL)
895         CONTINUE
          ENDIF
        ENDIF
1000  CONTINUE
C
      RETURN
C
991   CONTINUE
      WRITE (6,*) 'ERROR IN XSECTA: EXIT CALLED  '
      WRITE (6,*) 'INVALID SPECIES INDEX FOR ELASTIC COLLISION '
      CALL EXIT
992   CONTINUE
      WRITE (6,*) 'ERROR IN XSECTA: EXIT CALLED  '
      WRITE (6,*) 'MASS NUMBERS OF INTERACTING PARTICLES INCONSISTENT'
      WRITE (6,*) 'KK,IATM,IPLS ',KK,IATM,IPLS
993   CONTINUE
      WRITE (6,*) 'ERROR DETECTED IN XSECTA.'
      WRITE (6,*) 'PARAMETER NRDS IS TOO SMALL.'
      WRITE (6,*) 'I.E. TOO MANY DISS. REACTIONS REQUIRED. '
      WRITE (6,*) 'EXIT CALLED      '
      CALL EXIT
997   CONTINUE
      WRITE (6,*) 'INSUFFICIENT STORAGE FOR CX: NRCX=',NRCX
      CALL EXIT
998   CONTINUE
      WRITE (6,*) 'INSUFFICIENT STORAGE FOR EL: NREL=',NREL
      CALL EXIT
999   CONTINUE
      WRITE (6,*) 'SPECIES CONFLICT FOR BGK COLLISIONS. IATM,IREL '
      WRITE (6,*) IATM,IREL,IPLS
      CALL EXIT
      END
C
