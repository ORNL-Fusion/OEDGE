C
C
      SUBROUTINE XSTCX(RMASS,IRCX,ISP,IPL,ISCD1,ISCD2,
     .                 EBULK,ISCDE,IESTM,KK,FACTKK)

      USE PRECISION
      USE PARMMOD
      USE COMUSR
      USE CCONA
      USE CGRID
      USE CZT1
      USE COMXS

      IMPLICIT NONE

      REAL(DP), INTENT(IN) :: RMASS, EBULK, FACTKK
      INTEGER, INTENT(IN) :: IRCX, ISP, IPL, ISCD1, ISCD2, ISCDE,
     .                       IESTM, KK
      REAL(DP) :: PLS(NSTORDR), COUN(0:9,NSTORDR), CF(9,0:9)
      REAL(DP) :: ADD, ADDL, RMTEST, RMBULK, FCTKKL, ADDTL, CHRDIF,
     .            ADDT, TMASS, PMASS
      INTEGER :: ITYP1, ITYP2, ISPZ1, IERR, ISPZ2, IATM, IPLS, KREAD,
     .           J, NEND, MODC, NSECX4, I, IPL2, IIO2, IPLTI
      INTEGER, EXTERNAL :: IDEZ
      CHARACTER(8) :: TEXTS1, TEXTS2

      SAVE
C
C  SET NON DEFAULT CHARGE EXCHANGE COLLISION PROCESS NO. IRCX
C
      IF (IPL.LE.0.OR.IPL.GT.NPLSI) GOTO 990
      IF (MASSP(KK).LE.0.OR.MASST(KK).LE.0) GOTO 992
      RMBULK=RMASSP(IPL)
      RMTEST=RMASS
      IPLTI=MPLSTI(IPL)
C
C  1ST SECONDARY INDEX
      N1STX(IRCX,1)=IDEZ(ISCD1,1,3)
      N1STX(IRCX,2)=IDEZ(ISCD1,3,3)
      N1STX(IRCX,3)=0
      IF (N1STX(IRCX,1).LT.4) N1STX(IRCX,3)=1
C
      IF (N1STX(IRCX,1).EQ.1) THEN
        IF (RMBULK.NE.RMASSA(N1STX(IRCX,2))) GOTO 992
      ELSEIF (N1STX(IRCX,1).EQ.2) THEN
        IF (RMBULK.NE.RMASSM(N1STX(IRCX,2))) GOTO 992
      ELSEIF (N1STX(IRCX,1).EQ.3) THEN
        IF (RMBULK.NE.RMASSI(N1STX(IRCX,2))) GOTO 992
      ELSEIF (N1STX(IRCX,1).EQ.4) THEN
        IF (RMBULK.NE.RMASSP(N1STX(IRCX,2))) GOTO 992
      ENDIF
C  2ND SECONDARY INDEX
      N2NDX(IRCX,1)=IDEZ(ISCD2,1,3)
      N2NDX(IRCX,2)=IDEZ(ISCD2,3,3)
      N2NDX(IRCX,3)=N1STX(IRCX,3)
      IF (N2NDX(IRCX,1).LT.4) N2NDX(IRCX,3)=N2NDX(IRCX,3)+1
C
      IF (N2NDX(IRCX,1).EQ.1) THEN
        IF (RMTEST.NE.RMASSA(N2NDX(IRCX,2))) GOTO 992
      ELSEIF (N2NDX(IRCX,1).EQ.2) THEN
        IF (RMTEST.NE.RMASSM(N2NDX(IRCX,2))) GOTO 992
      ELSEIF (N2NDX(IRCX,1).EQ.3) THEN
        IF (RMTEST.NE.RMASSI(N2NDX(IRCX,2))) GOTO 992
      ELSEIF (N2NDX(IRCX,1).EQ.4) THEN
        IF (RMTEST.NE.RMASSP(N2NDX(IRCX,2))) GOTO 992
      ENDIF
C
      CHRDIF=-NCHRGP(IPL)
      IF (N1STX(IRCX,1).EQ.3) THEN
        IIO2=N1STX(IRCX,2)
        CHRDIF=CHRDIF+NCHRGI(IIO2)
      ENDIF
      IF (N1STX(IRCX,1).EQ.4) THEN
        IPL2=N1STX(IRCX,2)
        CHRDIF=CHRDIF+NCHRGP(IPL2)
      ENDIF
      IF (N2NDX(IRCX,1).EQ.3) THEN
        IIO2=N2NDX(IRCX,2)
        CHRDIF=CHRDIF+NCHRGI(IIO2)
      ENDIF
      IF (N2NDX(IRCX,1).EQ.4) THEN
        IPL2=N2NDX(IRCX,2)
        CHRDIF=CHRDIF+NCHRGP(IPL2)
      ENDIF
      IF (CHRDIF.NE.0) GOTO 990
C
C  TARGET MASS IN <SIGMA*V> FORMULA: MAXW. BULK PARTICLE
C  (= PROJECTILE MASS IN CROSS SECTION MEASUREMENT: TARGET AT REST)
      PMASS=MASSP(KK)*PMASSA
C  PROJECTILE MASS IN <SIGMA*V> FORMULA: MONOENERG. TEST PARTICLE
C  (= TARGET PARTICLE IN CROSS SECTION MEASUREMENT; TARGET AT REST)
      TMASS=MASST(KK)*PMASSA
      ADDT=PMASS/RMASSP(IPL)
      ADDTL=LOG(ADDT)
      NREACX(IRCX) = KK
      ADDCX(IRCX,IPL) = ADDTL
C
C CROSS SECTION (E-LAB)
      IF (IDEZ(MODCLF(KK),2,5).EQ.1) THEN
        MODCOL(3,1,ISP,IPL)=KK
        MODCOL(3,2,ISP,IPL)=3
        IF (FACTKK.NE.1.D0)
     .  WRITE (6,*) 'FREAC NOT READY FOR CROSS SECTION IN XSTCX'
      ENDIF
C
C RATE COEFFICIENT
      MODC=IDEZ(MODCLF(KK),3,5)
      IF (MODC.GE.1.AND.MODC.LE.2) THEN
        MODCOL(3,2,ISP,IPL)=MODC
        IF (MODC.EQ.1) NEND=1
        IF (MODC.EQ.2) NEND=NSTORDT
        IF (NSTORDR >= NRAD) THEN
          DO 242 J=1,NSBOX
            PLS(J)=TIINL(IPLTI,J)+ADDTL
242       CONTINUE
          IF (MODC.EQ.1) THEN
            CALL CDEF (PLS,1,NEND,KK,COUN,NSBOX,CF,.TRUE.,
     .                .FALSE.,.TRUE.)
            DO 245 J=1,NSBOX
              TABCX3(IRCX,J,1)=COUN(1,J)*DIIN(IPL,J)*FACTKK
245         CONTINUE
          ELSEIF (MODC.EQ.2) THEN
            CALL CDEF (PLS,1,NEND,KK,COUN,NSBOX,CF,.FALSE.,
     .                .FALSE.,.TRUE.)
            FCTKKL=LOG(FACTKK)
            DO 246 J=1,NSBOX
              TABCX3(IRCX,J,1)=COUN(1,J)+DIINL(IPL,J)+FCTKKL
246         CONTINUE
          ENDIF
          DO 244 I=2,NEND
            DO 243 J=1,NSBOX
              TABCX3(IRCX,J,I)=COUN(I,J)
243         CONTINUE
244       CONTINUE
        ELSE
          FACREA(KK) = LOG(FACTKK)
        END IF
      ELSE
C  NO RATE COEFFICIENT. IS THERE A CROSS SECTION AT LEAST?
        IF (MODCOL(3,2,ISP,IPL).NE.3) GOTO 996
      ENDIF
      DEFCX(IRCX)=LOG(CVELI2*PMASS)
      EEFCX(IRCX)=LOG(CVELI2*TMASS)
C
C  3. BULK PARTICLE MOMENTUM LOSS RATE
C
C
C  4. BULK PARTICLE ENERGY LOSS RATE
C
      NSECX4=IDEZ(ISCDE,4,5)
      IF (NSECX4.EQ.0) THEN
C  4.A)  ENERGY LOSS RATE OF IMP. BULK PARTICLE = CONST.*RATECOEFF.
C        SAMPLE COLLIDING ION FROM DRIFTING MONOENERGETIC ISOTROPIC DISTRIBUTION
        IF (EBULK.LE.0.D0) THEN
          IF (NSTORDR >= NRAD) THEN
            DO J=1,NSBOX
              EPLCX3(IRCX,J,1)=1.5*TIIN(IPLTI,J)+EDRIFT(IPL,J)
            ENDDO
            NELRCX(IRCX) = -3
          ELSE
            NELRCX(IRCX) = -3
          END IF
        ELSE
          IF (NSTORDR >= NRAD) THEN
            DO 251 J=1,NSBOX
              EPLCX3(IRCX,J,1)=EBULK+EDRIFT(IPL,J)
251         CONTINUE
            NELRCX(IRCX) = -2
          ELSE
            NELRCX(IRCX) = -2
            EPLCX3(IRCX,1,1)=EBULK
          END IF
        ENDIF
        MODCOL(3,4,ISP,IPL)=3
      ELSEIF (NSECX4.EQ.1) THEN
C  4.B) ENERGY LOSS RATE OF IMP. ION = 1.5*TI* RATECOEFF.
C       SAMPLE COLLIDING ION FROM DRIFTING MAXWELLIAN
        IF (EBULK.LE.0.D0) THEN
          IF (NSTORDR >= NRAD) THEN
            DO 252 J=1,NSBOX
              EPLCX3(IRCX,J,1)=1.5*TIIN(IPLTI,J)+EDRIFT(IPL,J)
252         CONTINUE
            NELRCX(IRCX) = -3
          ELSE
            NELRCX(IRCX) = -3
          END IF
        ELSE
          WRITE (6,*) 'WARNING FROM SUBR. XSTCX '
          WRITE (6,*) 'MODIFIED TREATMENT OF CHARGE EXCHANGE '
          WRITE (6,*) 'SAMPLE FROM MAXWELLIAN WITH T = ',EBULK/1.5
          WRITE (6,*) 'RATHER THEN WITH T = TIIN '
          CALL LEER(1)
          IF (NSTORDR >= NRAD) THEN
            DO 2511 J=1,NSBOX
              EPLCX3(IRCX,J,1)=EBULK+EDRIFT(IPL,J)
2511        CONTINUE
            NELRCX(IRCX) = -2
          ELSE
            NELRCX(IRCX) = -2
            EPLCX3(IRCX,1,1)=EBULK
          END IF
        ENDIF
        MODCOL(3,4,ISP,IPL)=1
C     ELSEIF (NSECX4.EQ.2) THEN
C  use i-integral expressions. to be written
      ELSEIF (NSECX4.EQ.3) THEN
C  4.B)  ENERGY LOSS RATE OF IMP. ION = EN.WEIGHTED RATE
C  4.C)  ENERGY LOSS RATE OF IMP. ION = EN.WEIGHTED RATE
        KREAD=EBULK
        IF (KREAD.EQ.0) THEN
c  data for mean ion energy loss are not available
c  use collision estimator for energy balance
          IF (IDEZ(IESTM,3,3).NE.1) THEN
            WRITE (6,*) 'COLLISION ESTIMATOR ENFORCED FOR ION ENERGY '
            WRITE (6,*) 'IN CX COLLISION IRCX= ',IRCX
            WRITE (6,*) 'BECAUSE NO ENERGY WEIGHTED RATE AVAILABLE'
            WRITE (6,*) 'OOPS: '
            WRITE (6,*) 'COLLISION ESTIMATOR NOT READY '
            WRITE (6,*) 'CALL EXIT '
            CALL EXIT_OWN(1)
          ENDIF
          IESTCX(IRCX,3)=1
          MODCOL(3,4,ISP,IPL)=2
        ELSE  ! ION ENERGY AVERAGED RATE AVAILABLE AS REACTION NO. "KREAD"
        NELRCX(IRCX) = KREAD
        MODC=IDEZ(MODCLF(KREAD),5,5)
        IF (MODC.GE.1.AND.MODC.LE.2) THEN
          MODCOL(3,4,ISP,IPL)=MODC
          IF (MODC.EQ.1) NEND=1
          IF (MODC.EQ.2) NEND=NSTORDT
          IF (NSTORDR >= NRAD) THEN
            DO 253 J=1,NSBOX
              PLS(J)=TIINL(IPLTI,J)+ADDTL
253         CONTINUE
            CALL CDEF (PLS,1,NEND,KREAD,COUN,NSBOX,CF,.FALSE.,
     .                 .FALSE.,.TRUE.)
            IF (MODC.EQ.1) THEN
              ADD=FACTKK/ADDT
              DO 254 J=1,NSBOX
                EPLCX3(IRCX,J,1)=COUN(1,J)*DIIN(IPL,J)*ADD
254           CONTINUE
            ELSEIF (MODC.EQ.2) THEN
              ADDL=LOG(FACTKK)-ADDTL
              DO 257 J=1,NSBOX
                EPLCX3(IRCX,J,1)=COUN(1,J)+DIINL(IPL,J)+ADDL
257           CONTINUE
            ENDIF
            DO 256 I=2,NEND
              DO 255 J=1,NSBOX
                EPLCX3(IRCX,J,I)=COUN(I,J)
255           CONTINUE
256         CONTINUE
          ELSE
            IF (MODC.EQ.1) THEN
              ADD=FACTKK/ADDT
              EPLCX3(IRCX,1,1)=ADD
            ELSEIF (MODC.EQ.2) THEN
              ADDL=LOG(FACTKK)-ADDTL
              FACREA(KREAD) = ADDL
            END IF
          END IF
        ENDIF
        ENDIF
      ELSE
        IERR=5
        GOTO 996
      ENDIF

C  ESTIMATOR FOR CONTRIBUTION TO COLLISION RATES FROM THIS REACTION
      IESTCX(IRCX,1)=IDEZ(IESTM,1,3)
      IESTCX(IRCX,2)=IDEZ(IESTM,2,3)
      IF (IESTCX(IRCX,3).EQ.0) IESTCX(IRCX,3)=IDEZ(IESTM,3,3)
C
      ITYP1=N1STX(IRCX,1)
      ITYP2=N2NDX(IRCX,1)
      IF (IESTCX(IRCX,1).NE.0.AND.(ITYP1.NE.1.OR.ITYP2.NE.4)) THEN
        CALL LEER(1)
        WRITE (6,*) 'WARNING: COLL.EST NOT AVAILABLE FOR PART.-BALANCE '
        WRITE (6,*) 'IRCX = ',IRCX
        WRITE (6,*) 'AUTOMATICALLY RESET TO TRACKLENGTH ESTIMATOR '
        IESTCX(IRCX,1)=0
      ENDIF
      IF (IESTCX(IRCX,2).NE.0.AND.(ITYP1.NE.1.OR.ITYP2.NE.4)) THEN
        CALL LEER(1)
        WRITE (6,*) 'WARNING: COLL.EST NOT AVAILABLE FOR MOM.-BALANCE '
        WRITE (6,*) 'IRCX = ',IRCX
        WRITE (6,*) 'AUTOMATICALLY RESET TO TRACKLENGTH ESTIMATOR '
        IESTCX(IRCX,2)=0
      ENDIF
      IF (IESTCX(IRCX,3).NE.0.AND.(ITYP1.NE.1.OR.ITYP2.NE.4)) THEN
        CALL LEER(1)
        WRITE (6,*) 'WARNING: COLL.EST NOT AVAILABLE FOR EN.-BALANCE '
        WRITE (6,*) 'IRCX = ',IRCX
        WRITE (6,*) 'AUTOMATICALLY RESET TO TRACKLENGTH ESTIMATOR '
        IESTCX(IRCX,3)=0
      ENDIF
      RETURN
C
      ENTRY XSTCX_2(IRCX,IPL)
C
      CALL LEER(1)
      WRITE (6,*) 'CHARGE EXCHANGE REACTION NO. IRCX= ',IRCX
      CALL LEER(1)
      WRITE (6,*) 'CHARGE EXCHANGE WITH BULK IONS IPLS:'
      WRITE (6,*) '1ST AND 2ND NEXT GEN. SPECIES I2ND1, I2ND2:'
      ITYP1=N1STX(IRCX,1)
      ITYP2=N2NDX(IRCX,1)
      ISPZ1=N1STX(IRCX,2)
      ISPZ2=N2NDX(IRCX,2)
      IF (ITYP1.EQ.1) TEXTS1=TEXTS(NSPH+ISPZ1)
      IF (ITYP1.EQ.2) TEXTS1=TEXTS(NSPA+ISPZ1)
      IF (ITYP1.EQ.3) TEXTS1=TEXTS(NSPAM+ISPZ1)
      IF (ITYP1.EQ.4) TEXTS1=TEXTS(NSPAMI+ISPZ1)
      IF (ITYP2.EQ.1) TEXTS2=TEXTS(NSPH+ISPZ2)
      IF (ITYP2.EQ.2) TEXTS2=TEXTS(NSPA+ISPZ2)
      IF (ITYP2.EQ.3) TEXTS2=TEXTS(NSPAM+ISPZ2)
      IF (ITYP2.EQ.4) TEXTS2=TEXTS(NSPAMI+ISPZ2)
      WRITE (6,*) 'IPLS= ',TEXTS(NSPAMI+IPL),'I2ND1= ',TEXTS1,
     .                    'I2ND2= ',TEXTS2
      CALL LEER(1)
      RETURN
C
990   CONTINUE
      WRITE (6,*) 'ERROR IN XSTACX: EXIT CALLED  '
      WRITE (6,*) 'INVALID SPECIES INDEX FOR CHARGE EXCHANGE '
      CALL EXIT_OWN(1)
992   CONTINUE
      WRITE (6,*) 'ERROR IN XSTACX: EXIT CALLED  '
      WRITE (6,*) 'MASS NUMBERS OF INTERACTING PARTICLES INCONSISTENT'
!pb      WRITE (6,*) 'KK,IATM,IPLS ',KK,IATM,IPLS
      WRITE (6,*) 'KK ',KK
      CALL EXIT_OWN(1)
993   CONTINUE
      WRITE (6,*) 'ERROR IN XSTACX: EXIT CALLED  '
      WRITE (6,*) 'EBULK_ION .LE.0, BUT MONOENERGETIC DISTRIBUTION?'
      WRITE (6,*) 'CHECK ENERGY FLAG ISCDEA'
!pb      WRITE (6,*) 'KK,IATM,IPLS,ISCDEA ',KK,IATM,IPLS,ISCDEA
      WRITE (6,*) 'KK,ISCDEA ',KK,ISCDEA
      CALL EXIT_OWN(1)
996   CONTINUE
      WRITE (6,*) 'ERROR IN XSTACX: EXIT CALLED  '
      WRITE (6,*) 'NO CROSS SECTION AVAILABLE FOR NON DEFAULT CX'
!pb      WRITE (6,*) 'KK,IATM,IPLS ',KK,IATM,IPLS
      WRITE (6,*) 'KK ',KK
      WRITE (6,*) 'EITHER PROVIDE CROSS SECTION OR USE DIFFERENT '
      WRITE (6,*) 'POST COLLISION SAMPLING FLAG ISCDEA'
      CALL EXIT_OWN(1)
      END
