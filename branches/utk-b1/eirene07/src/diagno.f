C EIRENE07 COMPILATION
C ===== SOURCE: diagno.f
*DK DIAGNO
C
C  CALLED IN POST PROCESSING PHASE:
C  CALCULATE A NUMBER OF (ICHORI=1,NCHORI) LINE INTEGRALS ALONG LINES-OF-SIGHT
C  USING THE INPUT DATA OF INPUT BLOCK 12, AND THE INPUT AND OUTPUT
C  TALLIES FROM THE EIRENE RUN.
C  THE LINE INTEGRALS CAN BE TOTAL EMISSIVITIES, OR THEY CAN HAVE
C  HAVE A SPECTRAL RESOLUTION (ENERGY-RESOLUTION), DEPENDING ON THE VALUE
C  OF INPUT FLAG NCHENI(ICHORD).
C  THIS ROUTINE SETS THE ENERGY ARRAYS AND THEN CALLS SUBR. SGNAL FOR
C  EACH LINE OF SIGHT ICHORI, THE SELECTED STRATUM ISTR AND THE SELECTED
C  INDEX OF THE TEST PARTICLE SPECIES ISP
C  AFTER ALL LINES OF SIGHT ARE DONE, THE OUTPUT ROUTINE OUTSIG IS CALLED
C  FOR PRINTING AND PLOTTING.
C
      SUBROUTINE DIAGNO

      USE PRECISION
      USE PARMMOD
      USE COMUSR
      USE CLOGAU
      USE CPLOT
      USE COMSIG
      USE CTRCEI
      USE COMPRT, ONLY: IUNOUT

      IMPLICIT NONE

      REAL(DP) :: ENSAVE(NCHOR,NCHEN)
      REAL(DP) :: EN, EQUOT, FMXENM, ALEMX, ALEMN
      INTEGER :: J, ISTR, ISP, NCHNI, ICHORI
      LOGICAL :: PLSAVE,L_CHOR(NCHOR)
C
C  INITIALISE LINE INTEGRATION ROUTINE
C
      PLSAVE=PLHST
      PLHST=PLCHOR
C
      NSPNEW(1)=1
      NCHNI=IABS(NCHENI)
      FMXENM=DBLE(NCHNI-1)
C
C  SET ENERGY ARRAY IN CASE OF SPECTRALLY RESOLVED LINE INTEGRATED
C
      DO 100 ICHORI=1,NCHORI
        IF (NCHENI.LT.-1) THEN
C  LOG. ENERGY SCALE
          ALEMN=LOG10(EMIN1(ICHORI))
          ALEMX=LOG10(EMAX1(ICHORI))
          EQUOT=(ALEMX-ALEMN)/FMXENM
          DO 10 J=1,NCHNI
            EN=ALEMN+(J-1)*EQUOT
            ENERGY(J)=10.**EN
10          ENSAVE(ICHORI,J)=ENERGY(J)
        ELSEIF (NCHENI.GT.1) THEN
C  LIN. ENERGY SCALE
          EQUOT=(EMAX1(ICHORI)-EMIN1(ICHORI))/FMXENM
          DO 20 J=1,NCHNI
            ENERGY(J)=EMIN1(ICHORI)+(J-1)*EQUOT
20          ENSAVE(ICHORI,J)=ENERGY(J)
        ELSEIF (NCHENI.EQ.1) THEN
C  NO ENERGY DEPENDENCE
          NCHNI=1
          ENERGY(1)=EMIN1(ICHORI)
          ENSAVE(ICHORI,1)=ENERGY(1)
        ELSEIF (NCHENI.EQ.0) THEN
C  NO CALL TO SUBR. SGNAL
          WRITE (IUNOUT,*) 'NO LOS SIGNALS COMPUTED, BECAUSE NCHENI = 0'
          L_CHOR(ICHORI)=.FALSE.
          GOTO 100
        ENDIF
C
C  CARRY OUT LINE INTEGRATION
C
        ISTR=NSPSTR(ICHORI)
        ISP=NSPSPZ(ICHORI)
C  TENTATIVELY ASSUME: THIS LINE OF SIGHT IS ACTIVE
        L_CHOR(ICHORI)=.TRUE.
        CALL SGNAL(ICHORI,ISTR,ISP,L_CHOR(ICHORI))
C
100   CONTINUE
C
C  OUTPUT
C
      IF (NCHNI.NE.0) CALL OUTSIG(ENSAVE,L_CHOR)
C
      PLHST=PLSAVE
      RETURN
      END
C ===== SOURCE: h2alph.f
C
C
      FUNCTION H2ALPH(TE,LREACT)
C
C  DEGAS MODEL FOR H ALPHA PRODUCTION VIA H2 DISSOCIATION
C  INPUT: TE IN EV
C
      USE PRECISION

      IMPLICIT NONE

      REAL(DP), INTENT(IN) :: TE
      INTEGER, INTENT(IN) :: LREACT

      INTEGER :: ITEMPS(2)
      REAL(DP) :: ZA(6,2), ZB(6,2), ZTEMPS(6,2)
      REAL(DP) :: H2ALPH, ZTE
      INTEGER :: IT, IINDEX, I
      SAVE
      DATA ITEMPS/6,4/
C                          LREACT=1: E + H20 -> 2H0
      DATA (ZTEMPS(I,1),I=1,6)/
     .      2.7,4.8,10.0,25.0,100.0,1.0E10/
      DATA (ZA(I,1),I=1,6)/
     .      5.1E-5,2.57E-4,5.52E-4,1.7E-3,3.57E-3,1.06E-2/
      DATA (ZB(I,1),I=1,6)/
     .      2.994,1.368,0.881,0.389,0.161,-0.076/
C                          LREACT=2: E + H2+ -> H0 + H+ +E
      DATA (ZTEMPS(I,2),I=1,4)/
     .      3.5,6.3,30.0,1.0E10/
      DATA (ZA(I,2),I=1,4)/
     .      2.1E-2,1.07E-2,3.2E-3,1.2E-2/
      DATA (ZB(I,2),I=1,4)/
     .     -0.822,-0.243,0.392,1.0E-10/
C
      ZTE=MAX(1._DP,TE)
      ZTE=MIN(ZTE,1.0E10_DP)
      IINDEX=0
      DO 15 IT=1,ITEMPS(LREACT)
        IINDEX=IINDEX+1
        IF (ZTE.LE.ZTEMPS(IT,LREACT)) GOTO 20
15    CONTINUE
C
20    H2ALPH=ZA(IINDEX,LREACT)*ZTE**ZB(IINDEX,LREACT)
      RETURN
      END
C ===== SOURCE: haldis.f
C
C
      SUBROUTINE HALDIS(TE,FRACT)
C
C  INPUT: TE(EV)
C  OUTPUT: FRACT = FRACTION OF H ALPHA EMISSIONS PER PRODUCTION
C                  OF H+ THROUGH DISSOCIATION OF H2 MOLECULES
C                  FRACT= H+/PHOTON
C                  TAKEN FROM:
C                  D.HEIFETZ, ROLES OF THE ATOMIC PHYSICS OF H AND HE
C                             IN EDGE PLASMAS
C                  SPECIALISTS MEETING ON ATOMIC AND MOLECULAR DATA
C                  FOR PLASMA EDGE STUDIES; IAEA, VIENNA, 1987
C
      USE PRECISION

      IMPLICIT NONE

      REAL(DP), INTENT(IN) :: TE
      REAL(DP), INTENT(OUT) :: FRACT

      REAL(DP) :: TED(13), FCD(13)
      REAL(DP) :: Q
      INTEGER :: II, IIM, J

      DATA TED/0.,1.,2.,3.,4.,5.,10.,20.,50.,100.,200.,500.,1000./
      DATA FCD/0.,0.,17.,30.,37.,40.,45.,47.,48.5,49.,49.5,49.5,49.5/

      DO 10 J=2,13
        II=J
        IF (TED(II).GT.TE) GOTO 20
10    CONTINUE
20    IIM=II-1
      Q=(FCD(II)-FCD(IIM))/(TED(II)-TED(IIM))
      FRACT=Q*(TE-TED(IIM))+FCD(IIM)
C
      RETURN
      END
C ===== SOURCE: linint.f
C
C
C*DK LININT
      SUBROUTINE LININT (IFIRST,ICHORI,C1,C2,ICHRD,IPVOT,NBC2,NAC2,PEN,
     .                   PSIG,TIMAX,ISP,NSPI,JEN,NCHNI)
C
C  THE LINE INTEGRATION IS CARRIED OUT ALONG A STRAIGHT LINE, STARTING
C  FROM P1 AND ENDING AT P2.
C
C  P1 IS FOUND AS FOLLOWS: CONSIDER THE STRAIGHT LINE C2+T*(C1-C2).
C  THE POINTS C1 ("PIVOT") AND C2 ("CHORD") ARE INPUT (INPUT BLOCK 12).
C  THE NEAREST INTERSECTION OF THIS LINE  WITH A NON-TRANSPARENT SURFACE
C  IS P1. IN ORDER TO FIND THIS P1, C2 MUST BE INSIDE THE COMPUTATIONAL
C  VOLUME (STANDARD OR ADDITIONAL MESH REGION)
C
C  P2 IS FOUND BY INTEGRATING THE TALLY FROM P1, IN THE DIRECTION
C  (C2-C1), IE. OPPOSITE TO THE DIRECTION USED ABOVE,
C  UNTIL THE NEXT INTERSECTION WITH ANY NON-TRANSPARENT
C  SURFACE (P2) IS FOUND.
C
      USE PRECISION
      USE PARMMOD
      USE COMUSR
      USE CESTIM
      USE CADGEO
      USE CCONA
      USE CLOGAU
      USE CPLOT
      USE CUPD
      USE COMSIG
      USE CGRID
      USE CGEOM
      USE CZT1
      USE CTRCEI
      USE CTETRA
      USE COMPRT
      USE CLGIN
      USE COMXS
      USE CSPEI
      USE CTRIG
      USE CTEXT
      USE CPLMSK

      IMPLICIT NONE

      INTEGER, INTENT(IN) :: IFIRST,ICHORI, ICHRD,IPVOT,NBC2,NAC2,ISP,
     .                       NSPI, JEN, NCHNI
      REAL(DP), INTENT(IN) :: C1(3),C2(3),PEN
      REAL(DP), INTENT(OUT) :: PSIG(0:NSPZ+10)
      REAL(DP), INTENT(IN OUT) :: TIMAX
      INTEGER :: IPLOTS, IERR
c      REAL(DP) :: ARGST(0:NSPZ+10,NRAD)
      REAL(DP),allocatable :: ARGST(:,:)
      REAL(DP) :: PMI,PMA,XMI,XMA
      REAL(DP) :: X0S, PHIS, Y0S, VELXS, VELYS, VELZS, Z0S, ZD1, YD1,
     .          TRACKS, ZDS, XD0, YD0, ZD0, X22, PHI22, XLI, YLI, ZLI,
     .          ZTST, SG, XPIV, X11, PHI11, ZPIV, YPIV, WINK, XD1,
     .          PPMI, PPMA
      INTEGER :: NBCKAS, NBOCKS, MRSRFS, MPSRFS, MTSRFS, NPCLLS, NACLLS,
     .           MSURFS, NTCLLS, J, JJ, ISY, JJJ, IPOLGS, IPERID_2,
     .           LEARCA, NLE, NLI, ISTS, NRCLLS, LEARC2, IPERID_1,
     .           LEARC1, ISAVE, K, I, IM, IC, NCELLT, IAT, NCH
      TYPE(CELL_INFO), POINTER :: NEW_CELL
C   ARRAYS FOR PLOTTING
c      REAL(DP) :: AA(NRAD),XNTG(NRAD),VPLOT(NRAD,1)
      REAL(DP),allocatable :: AA(:),XNTG(:),VPLOT(:,:)
      REAL(DP), ALLOCATABLE :: YPLOT(:,:),
     .                         YMN2(:), YMX2(:), 
     .                         YMNLG2(:), YMXLG2(:)
      INTEGER, ALLOCATABLE :: IR1(:), IR2(:), IRS(:)
      LOGICAL, ALLOCATABLE :: LPLOT2(:), LSDVI(:)
      LOGICAL :: TRCSAV, LCNDEXP, L_SAME
c      CHARACTER(72) :: TXHEAD, TXTALL(NCHENI)
      CHARACTER(72) :: TXHEAD
      CHARACTER(72),allocatable :: TXTALL(:)
      CHARACTER(24),allocatable :: TXUNIT(:), TXSPEC(:)

      SAVE
      
      NLTRC=TRCSIG.AND.IFIRST.EQ.0.AND.TRCHST
      NPANU=0
      SCOS=1.
      IPOLG=1
C
C  COMPUTE LINE INTEGRATED SIGNAL
C
      IF (IFIRST.GT.0) GOTO 100


      ! jdemod - these variables should have been declared allocatable and allocated appropriately

      if (.not.allocated(aa)) then 
          allocate(aa(nrad))
          aa = 0.0
          allocate(xntg(nrad))
          xntg = 0.0
          allocate(vplot(nrad,1))
          vplot = 0.0
          allocate(argst(0:NSPZ+10,NRAD))
          argst = 0.0
          allocate(txtall(ncheni))
          allocate(txunit(ncheni))
          allocate(txspec(ncheni))
      endif

      
      IF (PLSPEC) THEN
        IF (.NOT.ALLOCATED(YPLOT)) THEN
          NCH = 1
          IF (ANY(NCHTAL(1:NCHORI) == 1)) NCH=IABS(NCHENI)
          ALLOCATE (YPLOT(NRAD,NCH))
          ALLOCATE (YMN2(NCH))
          ALLOCATE (YMX2(NCH))
          ALLOCATE (YMNLG2(NCH))
          ALLOCATE (YMXLG2(NCH))
          ALLOCATE (IR1(NCH))
          ALLOCATE (IR2(NCH))
          ALLOCATE (IRS(NCH))
          ALLOCATE (LPLOT2(NCH))
          ALLOCATE (LSDVI(NCH))

        END IF
        YPLOT = 0._DP
        YMN2 = 1.E30_DP  
        YMX2 = -1.E30_DP  
        YMNLG2 = 1.E30_DP  
        YMXLG2 = -1.E30_DP  
        LPLOT2 = .FALSE.
        LSDVI = .FALSE.
        IR1 = 0
        IR2 = 0
        IRS = 0
        IPLOTS = 0
        L_SAME = .FALSE.
        XMA = 0._DP
C
C  NULLPUNKT AUF DEM PAPIER

        X0PL=10.
        Y0PL=3.
C  ACHSENLAENGEN
        LENX=25.
        LENY=20.
C  ACHSENUNTERTEILUNG VORGEGEBEN?
C  NEIN!
        STPSZX=0.
        STPSZY=0.
        INTNRX=0
        INTNRY=0
C  ACHSE LOGARITHMISCH?
        LOGX=.FALSE.
C     LOGY VIA INPUT
C  LOG. ACHSE MIN
        MINLY=0
C  LOG. ACHSE MAX
C     MAXLY WERDEN BERECHNET IN ANPSGL
C  ZEICHNE NETZLINIEN EIN
        GRIDX=.TRUE.
        GRIDY=.TRUE.
C  MACHE GRADE GRENZEN, X-ACHSE (Y ACHSE, NUR WENN TALZMI=TALZMA=666.)
        FITX=.TRUE.
      END IF
C
C  FIND STARTING POINT FOR LINE INTEGRATION:
C
C  INTERSECTION POINT OF LINE OF SIGHT WITH
C  NEAREST NON-TRANSPARENT STANDARD MESH SURFACE OR NON-TRANSPARENT
C  ADDITIONAL SURFACE,
C  STARTING FROM C2, SEARCHING IN THE DIRECTION C1-C2
C
      IF (NLTRA) THEN
C  IF ICHRD=0:
C  C2(1) R COORDINATES IN THE TORUS SYSTEM (INCL. R0A!)
C  C2(2) Z COORDINATES (REFERRED TO AS Y-COORDIANTE IN EIRENE)
C  C2(3) ARE TOROIDAL ANGLES IN DEGREES
C  ELSE
C  C2 IS A VECTOR GIVEN IN THE LOCAL TOROIDAL CELL IPERID=ICHRD
C
C  IPVOT, C1 SAME AS FOR ICHRD AND C2
C
C  STARTING POINT C2:
C
        IF (ICHRD.EQ.0) THEN
          X22  =C2(1)
          PHI22=C2(3)*PIA/180.D0
          IF (PHI22.LT.ZSURF(1).OR.PHI22.GT.ZSURF(NTTRA)) THEN
            CALL MASAGE ('ERROR IN LININT, WRONG INPUT FOR CHORDS ')
            CALL EXIT_OWN(1)
          ENDIF
C  FIND TOROIDAL BLOCK NUMBER OF P2
          IPERID_2=LEARCA(PHI22,ZSURF,1,NTTRA,1,'LININT 1 ')
C  FIND LOCAL CO-ORDINATES IN IPERID_2 FOR C2: X0,Z0
          CALL FZRTRI(X0,Z0,IPERID_2,X22,PHI22,IPERID_2)
          Y0=C2(2)
        ELSE
          WRITE (iunout,*) 'ERROR IN LININT, 1'
          CALL EXIT_OWN(1)
        ENDIF
C
C  PIVOT POINT C1:
        IF (IPVOT.EQ.0) THEN
          X11=C1(1)
          PHI11=C1(3)*PIA/180.D0
          IF (PHI11.LT.ZSURF(1).OR.PHI11.GT.ZSURF(NTTRA)) THEN
            CALL MASAGE ('ERROR IN LININT, WRONG INPUT FOR CHORDS ')
            CALL EXIT_OWN(1)
          ENDIF
C  FIND TOROIDAL BLOCK NUMBER OF P1
          IPERID_1=LEARCA(PHI11,ZSURF,1,NTTRA,1,'LININT 2 ')
C  FIND LOCAL CO-ORDINATES IN IPERID_2 FOR C1: X0_2,Z0_2
          CALL FZRTRI(XPIV,ZPIV,IPERID_2,X11,PHI11,IPERID_1)
          YPIV=C1(2)
C
C  DIRECTION COSINUS OF CHORD, IN IPERID_2
          VELX=X0-XPIV
          VELY=Y0-YPIV
          VELZ=Z0-ZPIV
        ELSE
          WRITE (iunout,*) 'ERROR IN LININT, 2'
          CALL EXIT_OWN(1)
        ENDIF
C
      ELSEIF (NLTRZ) THEN
C
C  C1(1) AND C2(1) X COORDINATES (CM)
C  C1(2) AND C2(2) Y COORDINATES (CM)
C  C1(3) AND C2(3) Z COORDINATES (CM)
        X0=C2(1)
        Y0=C2(2)
        Z0=C2(3)
        VELX=C2(1)-C1(1)
        VELY=C2(2)-C1(2)
        VELZ=C2(3)-C1(3)
C
      ELSEIF (NLTRT) THEN
C
C  C1(1) AND C2(1) R COORDINATES IN CYLINDRICAL CO-ORDINATES
C  C1(2) AND C2(2) Z COORDINATES IN CYLINDRICAL CO-ORDINATES
C  C1(3) AND C2(3) ARE TOROIDAL ANGLES IN DEGREES
C
C  TO BE WRITTEN
        WRITE (iunout,*) 'ERROR IN LININT, 3'
        CALL EXIT_OWN(1)
      ENDIF
C
      VEL=SQRT(VELX*VELX+VELY*VELY+VELZ*VELZ)
      VELX=-VELX/VEL
      VELY=-VELY/VEL
      VELZ=-VELZ/VEL
      VEL=1.
C
      TIME=0.
C
      ITYP=0
      IPHOT=0
      ISPZ=0
      NPANU=0
      ISAVE=0
C
C NEXT: FIND STARTING POINT FOR INTEGRATION, CELL NUMBERS
C       START SEARCH AT C2. CELL NUMBERS OF C2:
C
      NBLOCK=NBC2
      NACELL=NAC2
      NBLCKA=NSTRD*(NBLOCK-1)+NACELL
C
      NLSRFX=.FALSE.
      NLSRFY=.FALSE.
      NLSRFZ=.FALSE.
      MRSURF=0
      MPSURF=0
      MTSURF=0
      MASURF=0
      MSURF=0
      IPOLG=1
      ITIME=1
      IFPATH=1
      IUPDTE=1
      ICOL=0
C
      IF (NLTRA) THEN
        X01=X0+RMTOR
        PHI=PHI22
        IPERID=IPERID_2
      ELSEIF (NLTRZ) THEN
C  NOTHING TO BE DONE
      ELSEIF (NLTRT) THEN
C  to be written
      ENDIF
C
      NRCELL=0
      IF (NLRAD.AND.NACELL.EQ.0) THEN
          NRCELL=LEARC1 (X0,Y0,Z0,IPOLG,1,NR1STM,.FALSE.,.FALSE.,0,
     .                  'LININT      ')
      ENDIF
C
      NTCELL=1
      IF (NLTOR.AND.NACELL.EQ.0) THEN
        IF (NLTRZ) NTCELL=LEARCA(Z0,ZSURF,1,NT3RD,1,'LININT      ')
        IF (NLTRA) NTCELL=IPERID
      ENDIF
C
      NPCELL=1
      IF (NLPOL.AND.NACELL.EQ.0) THEN
        IF (LEVGEO.EQ.1) THEN
          NPCELL=LEARCA(Y0,PSURF,1,NP2ND,1,'LININT')
        ELSEIF (LEVGEO.EQ.2) THEN
          IF (NLCRC) THEN
            WINK=MOD(ATAN2(Y0,X0)+PI2A,PI2A)
            NPCELL=LEARCA(WINK,PSURF,1,NP2ND,1,'LININT')
          ELSE
            NPCELL=LEARC2(X0,Y0,NRCELL,NPANU,'LININT  ')
          ENDIF
        ELSEIF (LEVGEO.EQ.3) THEN
          NPCELL=IPOLG
        ELSE
          WRITE (iunout,*) 'ERROR EXIT FROM DIAGNO. NLPOL ',LEVGEO
        ENDIF
      ENDIF
C
      IF (TRCSIG.AND.IFIRST.EQ.0) THEN
        TRCSAV=TRCHST
        TRCHST=.TRUE.
        NPANU=ICHORI
        ISPZ=0
        CALL LEER(2)
        WRITE (iunout,*) 'INIT. POINT C2 IN LININT: '
        CALL CHCTRC(X0,Y0,Z0,0,1)
        CALL LEER(1)
        TRCHST=TRCSAV
      ENDIF
C
11    CONTINUE
      IF (NLTRA) X01=X0+RMTOR
      X00=X0
      Y00=Y0
      Z00=Z0
      Z01=Z0
C  CLEAR WORK VARIABLES AND: CONTINUE FLIGHTS THROUGH TRANSPARENT
C                            SURFACES FROM THIS POINT
14    CONTINUE
      NCELL=NRCELL+((NPCELL-1)+(NTCELL-1)*NP2T3)*NR1P2+NBLCKA
      NJUMP=0
      DO I=1,NIMINT
        IM=IIMINT(I)
        TIMINT(IM)=0._DP
        IIMINT(I)=0
      END DO
      NIMINT = 0
      TT=1.D30
      TL=1.D30
      TS=1.D30
      ZTST=1.D30
      ZT=0.0
C
      NCOU=1
      NUPC(1)=0
      NCOUNT(1)=1
      NCOUNP(1)=1
      ISRFCL=-1
C
C TL: DISTANCE TO NEXT ADDITIONAL SURFACE
      IF (NCELL.LE.NOPTIM) THEN
        NLI=NLIMII(NCELL)
        NLE=NLIMIE(NCELL)
      ELSE
        NLI=1
        NLE=NLIMI
      ENDIF
      IF (NLI.LE.NLE) THEN
        CALL TIMEA1 (MSURF,NCELL,NLI,NLE,NTCELL,IPERID,X0,Y0,Z0,TIME,
     .               VELX,VELY,VELZ,VEL,
     .               MASURF,XLI,YLI,ZLI,SG,TL,NLTRC,LCNDEXP)
C       NLPR.....
        ZDT1=TL
        ZTST=TL
        CLPD(1)=ZDT1
        IF (MASURF.NE.0) ISRFCL=1
      ENDIF
C
C  SCAN OVER SEGMENT
C
21    CONTINUE
C
C  TS:   DISTANCE TO NEXT SURFACE OF STANDARD MESH
C  ZDT1: DISTANCE TRAVELLED IN CURRENT RADIAL CELL
C
      IF (ITIME.EQ.1) THEN
        IF (NLRAD) THEN
          CALL TIMER(TS)
C
          IF (TL.LT.TS.OR.TT.LT.TS) THEN
            MRSURF=0
            IPOLGN=0
C  COLLISION WITH ADDITIONAL SURFACE
            IF (TL.LE.TT) THEN
              ZDT1=TL-ZT
              TL=ZT+ZDT1
              ZTST=TL
              ISRFCL=1
C  COLLISION WITH TIME SURFACE
C           ELSEIF (TT.LT.TL) THEN
C             ZDT1=TT-ZT
C             TT=ZT+ZDT1
C             ZTST=TT
C             ISRFCL=2
            ENDIF
          ELSE
C  COLLISION WITH RADIAL SURFACE
            ISRFCL=0
            ZDT1=TS-ZT
            ZTST=TS
          ENDIF
        ENDIF
C
        NCOU=1
        NUPC(1)=0
        CLPD(1)=ZDT1
        NCOUNT(1)=1
        NCOUNP(1)=1
C
        IF (NLTOR.OR.NLTRA) THEN
          CALL TIMET (ZDT1)
          TS=ZT+ZDT1
          ZTST=TS
        ENDIF
C
        IF (NLPOL) THEN
          CALL TIMEP(ZDT1)
          TS=ZT+ZDT1
          ZTST=TS
        ENDIF
C
        IF (ZDT1.LE.0.) GOTO 990
      ENDIF
      IF (ZTST.GE.1.D30) GOTO 990
C
      IF (NLPOL) NPCELL=NCOUNP(NCOU)
      IF (NLTOR) NTCELL=NCOUNT(NCOU)
      ZT=ZTST
C
C  STOP TRACK ?
C
      IF (ISRFCL.EQ.1) CALL ADDCOL (XLI,YLI,ZLI,SG,*14  ,*38 )
C     IF (ISRFCL.EQ.2) CALL TIMCOL (...                          )
      IF (ISRFCL.EQ.3) CALL TORCOL (               *14 )
C
C  NO, CONTINUE TRACK
C
26    CONTINUE
C
C  NEXT CELL - CHECK FOR ESCAPE OR NON DEFAULT ACTING STANDARD SURFACE
C
      IF (LEVGEO.LE.3) THEN
C
        ISTS=INMP1I(MRSURF,IPCELL,ITCELL)
        IF (NLRAD.AND.ISTS.NE.0) THEN
          SG=ISIGN(1,NINCX)
          NLSRFX=.TRUE.
          MSURFG=NPCELL+(NTCELL-1)*NP2T3
          CALL STDCOL (ISTS,1,SG,*14,*38)
        ENDIF
        ISTS=INMP2I(IRCELL,MPSURF,ITCELL)
        IF (NLPOL.AND.ISTS.NE.0) THEN
          SG=ISIGN(1,NINCY)
          NLSRFY=.TRUE.
          MSURFG=NRCELL+(NTCELL-1)*NR1P2
          CALL STDCOL (ISTS,2,SG,*14,*38)
        ENDIF
        ISTS=INMP3I(IRCELL,IPCELL,MTSURF)
        IF (NLTOR.AND.ISTS.NE.0) THEN
          SG=ISIGN(1,NINCZ)
          NLSRFZ=.TRUE.
          MSURFG=NRCELL+(NPCELL-1)*NR1P2
          CALL STDCOL (ISTS,3,SG,*14,*38)
        ENDIF
C
      ELSEIF (LEVGEO.EQ.4) THEN
        ISTS=ABS(INMTI(IPOLGN,MRSURF))
        IF (NLRAD.AND.ISTS.NE.0) THEN
          SG=ISIGN(1,NINCX)
          NLSRFX=.TRUE.
          MSURFG=INSPAT(IPOLGN,MRSURF)
          CALL STDCOL (ISTS,1,SG,*14,*38)
        ENDIF
C
      ELSEIF (LEVGEO.EQ.5) THEN
        ISTS=ABS(INMTIT(IPOLGN,MRSURF))
        IF (NLRAD.AND.ISTS.NE.0) THEN
          SG=ISIGN(1,NINCX)
          IF (NRCELL == 0) SG = -1.D0
          NLSRFX=.TRUE.
C         MSURFG= ??
          CALL STDCOL (ISTS,1,SG,*14,*38)
        ENDIF
C
      ELSEIF (LEVGEO.EQ.6) THEN
        ISTS=INMP1I(MRSURF,IPCELL,ITCELL)
        IF (NLRAD.AND.ISTS.NE.0) THEN
          SG=ISIGN(1,NINCX)
          NLSRFX=.TRUE.
          CALL STDCOL (ISTS,1,SG,*14,*38)
        ENDIF
      ENDIF
C
      NRCELL=NRCELL+NINCX
      IF (NRCELL.GT.NR1STM.OR.NRCELL.LT.1) GOTO 991
      GOTO 21
C
38    CONTINUE
      IF (ILIIN(MSURF).LE.0) GOTO 14
C
C  STARTING POINT FOR INTEGRATION FOUND:  SURFACE MSURF
C
16    VELX=-VELX
      VELY=-VELY
      VELZ=-VELZ
C
C  SAVE STARTING POINT FOR FURTHER LINE INTEGRALS ALONG SAME CHORD
C
      NRCLLS=NRCELL
      IPOLGS=IPOLG
      MRSRFS=MRSURF
      MPSRFS=MPSURF
      MTSRFS=MTSURF
      NPCLLS=NPCELL
      NTCLLS=NTCELL
      MSURFS=MSURF
      NACLLS=NACELL
      NBOCKS=NBLOCK
      NBCKAS=NBLCKA
      IF (NLTRA) PHIS=MOD(PHI-ATAN2(Z01,X01)+ATAN2(Z0,X0+RMTOR),PI2A)
      X0S=X0
      Y0S=Y0
      Z0S=Z0
      VELXS=VELX
      VELYS=VELY
      VELZS=VELZ
C
C  INTERSECTION POINT WITH NEAREST NON-TRANSPARENT SURFACE
C  HAS NOW BEEN CALCULATED
C  TAKE THIS AS STARTING POINT FOR LINE INTEGRATION
C  THE END POINT FOR LINE INTEGRATION WILL BE FOUND DURING INTEGRATION
C  LOOP, SEE STATEMENT 380 FF, BELOW
C
100   CONTINUE
C
C  INITIALIZE *TIMER*,*TIMEP*,*TIMET*,*TIMEA* AND SIGNAL DATA
C
      MSURF=MSURFS
      IPOLG=IPOLGS
      MRSURF=MRSRFS
      MPSURF=MPSRFS
      MTSURF=MTSRFS
      NLSRFX=MRSURF.GT.0
      NLSRFY=MPSURF.GT.0
      NLSRFZ=MTSURF.GT.0
      NRCELL=NRCLLS
      NPCELL=NPCLLS
      NTCELL=NTCLLS
      NACELL=NACLLS
      NBLOCK=NBOCKS
      NBLCKA=NBCKAS
      X0=X0S
      Y0=Y0S
      Z0=Z0S
      VELX=VELXS
      VELY=VELYS
      VELZ=VELZS
      VEL=1.
      TIME=0.
      IF (NLTRA) PHI=PHIS
C
      IF (TRCSIG.AND.IFIRST.EQ.0) THEN
        TRCSAV=TRCHST
        TRCHST=.TRUE.
        NPANU=ICHORI
        ISPZ=0
        CALL LEER(2)
        WRITE (iunout,*) 'SIGNAL: STARTING POINT ON CHORD'
        CALL CHCTRC(X0,Y0,Z0,16,8)
        CALL LEER(1)
        TRCHST=TRCSAV
      ENDIF
C
C  INITIALISE LINE INTEGRATION
C
      JJJ=1
      XNTG(1)=0.
      TRACKS=0.
      IF (IFIRST >= 0) THEN
        IF (NCHTAL(ICHORI).EQ.1) THEN
          CALL SIGCX (0,JJJ,ZDS,PEN,PSIG,TIMAX,ARGST)
        ELSEIF (NCHTAL(ICHORI).EQ.2) THEN
          CALL SIGHA (0,JJJ,ZDS,PEN,PSIG,TIMAX,ARGST)
        ELSEIF (NCHTAL(ICHORI).EQ.3) THEN
          CALL SIGRAD(0,JJJ,ZDS,PEN,PSIG,TIMAX,ARGST)
        ELSEIF (NCHTAL(ICHORI).EQ.10) THEN
          CALL SIGUSR(0,JJJ,ZDS,PEN,PSIG,TIMAX,ARGST,XD0,YD0,ZD0,
     .                XD1,YD1,ZD1)
        ELSE
          CALL SIGTST(0,JJJ,ZDS,PEN,PSIG,TIMAX,ARGST)
        ENDIF
      END IF

      IF (IFIRST < 0) THEN
        TRAJ(ICHORI)%TRJ%VX = VELX
        TRAJ(ICHORI)%TRJ%VY = VELY
        TRAJ(ICHORI)%TRJ%VZ = VELZ
      END IF
C
101   CONTINUE
      IF (NLTRA) X01=X0+RMTOR
      X00=X0
      Y00=Y0
      Z00=Z0
      Z01=Z0
C  CLEAR WORK VARIABLES AND: CONTINUE FLIGHTS THROUGH TRANSPARENT
C                            SURFACES FROM THIS POINT
104   CONTINUE
      NCELL=NRCELL+((NPCELL-1)+(NTCELL-1)*NP2T3)*NR1P2+NBLCKA
      NJUMP=0
      DO I=1,NIMINT
        IM=IIMINT(I)
        TIMINT(IM)=0._DP
        IIMINT(I)=0
      END DO
      NIMINT = 0
      TT=1.D30
      TL=1.D30
      TS=1.D30
      ZTST=1.D30
      ZT=0.0
C
      NCOU=1
      NUPC(1)=0
      NCOUNT(1)=1
      NCOUNP(1)=1
      ISRFCL=-1
C
C TL: DISTANCE TO NEXT ADDITIONAL SURFACE
      IF (NCELL.LE.NOPTIM) THEN
        NLI=NLIMII(NCELL)
        NLE=NLIMIE(NCELL)
      ELSE
        NLI=1
        NLE=NLIMI
      ENDIF
      IF (NLI.LE.NLE) THEN
        CALL TIMEA1 (MSURF,NCELL,NLI,NLE,NTCELL,IPERID,X0,Y0,Z0,TIME,
     .               VELX,VELY,VELZ,VEL,
     .               MASURF,XLI,YLI,ZLI,SG,TL,NLTRC,LCNDEXP)
C       NLPR.....
        ZDT1=TL
        ZTST=TL
        CLPD(1)=ZDT1
        IF (MASURF.NE.0) ISRFCL=1
      ENDIF
C
C  SCAN OVER SEGMENT
C
210   CONTINUE
C
C  TS:   DISTANCE TO NEXT SURFACE OF STANDARD MESH
C  ZDT1: DISTANCE TRAVELLED IN CURRENT RADIAL CELL
C
      IF (ITIME.EQ.1) THEN
        IF (NLRAD) THEN
          CALL TIMER(TS)
C
          IF (TL.LT.TS.OR.TT.LT.TS) THEN
            MRSURF=0
            IPOLGN=0
C  COLLISION WITH ADDITIONAL SURFACE
            IF (TL.LE.TT) THEN
              ZDT1=TL-ZT
              TL=ZT+ZDT1
              ZTST=TL
              ISRFCL=1
C  COLLISION WITH TIME SURFACE
C           ELSEIF (TT.LT.TL) THEN
C             ZDT1=TT-ZT
C             TT=ZT+ZDT1
C             ZTST=TT
C             ISRFCL=2
            ENDIF
          ELSE
C  COLLISION WITH RADIAL SURFACE
            ISRFCL=0
            ZDT1=TS-ZT
            ZTST=TS
          ENDIF
        ENDIF
C
        NCOU=1
        NUPC(1)=0
        CLPD(1)=ZDT1
        NCOUNT(1)=1
        NCOUNP(1)=1
        ZDS=ZDT1
C
        IF (NLTOR.OR.NLTRA) THEN
          CALL TIMET (ZDT1)
          TS=ZT+ZDT1
          ZTST=TS
        ENDIF
C
        IF (NLPOL) THEN
          CALL TIMEP(ZDT1)
          TS=ZT+ZDT1
          ZTST=TS
        ENDIF
C
        IF (ZDT1.LE.0.) GOTO 990
      ENDIF
      IF (ZTST.GE.1.D30) GOTO 990
C

      IF (IFIRST < 0) THEN
        TRAJ(ICHORI)%TRJ%NCOU_CELL = TRAJ(ICHORI)%TRJ%NCOU_CELL + NCOU
        DO J=1,NCOU
          NCELL=NRCELL+NUPC(J)*NR1P2+NBLCKA
          NCELLT=NCLTAL(NCELL)
C         WRITE (IUNOUT,*) NCELL, NCELLT
          ALLOCATE(NEW_CELL)
          NEW_CELL%NO_CELL = NCELL
          NEW_CELL%FLIGHT = CLPD(J)
          CALL CELL_INSERT(ICHORI,NEW_CELL)
        END DO 
      END IF

      DO 250 J=1,NCOU
        JJ=J
        NCELL=NRCELL+NUPC(J)*NR1ST+NBLCKA
        XD0 = X0 + ZT*VELX
        YD0 = Y0 + ZT*VELY
        ZD0 = Z0 + ZT*VELZ
        ZT=ZT+CLPD(J)
        ZDS=CLPD(J)
        XD1 = X0 + ZT*VELX
        YD1 = Y0 + ZT*VELY
        ZD1 = Z0 + ZT*VELZ
        IF (ZDS.LT.0.) GOTO 990
        JJJ=JJJ+1
        IF (JJJ.GT.NRAD) GOTO 995
        XNTG(JJJ)=TRACKS+ZDS*0.5
        TRACKS=TRACKS+ZDS
C
        IF (IFIRST >= 0) THEN
          IF (NCHTAL(ICHORI).EQ.1) THEN
            CALL SIGCX (1,JJJ,ZDS,PEN,PSIG,TIMAX,ARGST)
          ELSEIF (NCHTAL(ICHORI).EQ.2) THEN
            CALL SIGHA (1,JJJ,ZDS,PEN,PSIG,TIMAX,ARGST)
          ELSEIF (NCHTAL(ICHORI).EQ.3) THEN
            CALL SIGRAD (1,JJJ,ZDS,PEN,PSIG,TIMAX,ARGST)
          ELSEIF (NCHTAL(ICHORI).EQ.10) THEN
            CALL SIGUSR(1,JJJ,ZDS,PEN,PSIG,TIMAX,ARGST,XD0,YD0,ZD0,
     .                  XD1,YD1,ZD1)
          ELSE
            CALL SIGTST(1,JJJ,ZDS,PEN,PSIG,TIMAX,ARGST)
          ENDIF
        ENDIF
C
250   CONTINUE
C
C  STOP TRACK ?
C
      IF (ISRFCL.EQ.1) CALL ADDCOL (XLI,YLI,ZLI,SG,*104,*380)
C     IF (ISRFCL.EQ.2) CALL TIMCOL (...            *104,*800)
      IF (ISRFCL.EQ.3) CALL TORCOL (               *104)
C
C  NO, CONTINUE TRACK
C
C  NEXT CELL - CHECK FOR ESCAPE OR NON DEFAULT ACTING STANDARD SURFACE
C
      IF (LEVGEO.LE.3) THEN
C
        ISTS=INMP1I(MRSURF,IPCELL,ITCELL)
        IF (NLRAD.AND.ISTS.NE.0) THEN
          SG=ISIGN(1,NINCX)
          NLSRFX=.TRUE.
          MSURFG=NPCELL+(NTCELL-1)*NP2T3
          CALL STDCOL (ISTS,1,SG,*104,*380)
        ENDIF
        ISTS=INMP2I(IRCELL,MPSURF,ITCELL)
        IF (NLPOL.AND.ISTS.NE.0) THEN
          SG=ISIGN(1,NINCY)
          NLSRFY=.TRUE.
          MSURFG=NRCELL+(NTCELL-1)*NR1P2
          CALL STDCOL (ISTS,2,SG,*104,*380)
        ENDIF
        ISTS=INMP3I(IRCELL,IPCELL,MTSURF)
        IF (NLTOR.AND.ISTS.NE.0) THEN
          SG=ISIGN(1,NINCZ)
          NLSRFZ=.TRUE.
          MSURFG=NRCELL+(NPCELL-1)*NR1P2
          CALL STDCOL (ISTS,3,SG,*104,*380)
        ENDIF
C
      ELSEIF (LEVGEO.EQ.4) THEN
        ISTS=ABS(INMTI(IPOLGN,MRSURF))
        IF (NLRAD.AND.ISTS.NE.0) THEN
          SG=ISIGN(1,NINCX)
          NLSRFX=.TRUE.
          MSURFG=INSPAT(IPOLGN,MRSURF)
          CALL STDCOL (ISTS,1,SG,*104,*380)
        ENDIF
C
      ELSEIF (LEVGEO.EQ.5) THEN
        ISTS=ABS(INMTIT(IPOLGN,MRSURF))
        IF (NLRAD.AND.ISTS.NE.0) THEN
          SG=ISIGN(1,NINCX)
          IF (NRCELL == 0) SG = -1.D0
          NLSRFX=.TRUE.
C         MSURFG= ??
          CALL STDCOL (ISTS,1,SG,*104,*380)
        ENDIF
C
      ELSEIF (LEVGEO.EQ.6) THEN
        ISTS=INMP1I(MRSURF,IPCELL,ITCELL)
        IF (NLRAD.AND.ISTS.NE.0) THEN
          SG=ISIGN(1,NINCX)
          NLSRFX=.TRUE.
          CALL STDCOL (ISTS,1,SG,*104,*380)
        ENDIF
      ENDIF
C
      NRCELL=NRCELL+NINCX
      IF (NRCELL.GT.NR1STM.OR.NRCELL.LT.1) GOTO 991
C
      GOTO 210
C
C   CELL LOOP FINISHED
C
380   CONTINUE
      IF (ILIIN(MSURF).LE.0) GOTO 104
C
      IF (TRCSIG.AND.IFIRST.EQ.0) THEN
        TRCSAV=TRCHST
        TRCHST=.TRUE.
        NPANU=ICHORI
        ISPZ=0
        CALL LEER(2)
        WRITE (iunout,*) 'SIGNAL: END POINT ON CHORD'
        CALL CHCTRC(X0,Y0,Z0,16,8)
        CALL LEER(2)
        TRCHST=TRCSAV
      ENDIF
C
500   CONTINUE
C
C  LINE OF SIGHT INTEGRATION IS DONE NOW.
C  DEALLOCATE ARRAYS IN SIGCX, SIGRAD, ETC...
C

      IF (IFIRST < 0) RETURN

      IF (NCHTAL(ICHORI).EQ.1) THEN
        CALL SIGCX (2,JJJ,ZDS,PEN,PSIG,TIMAX,ARGST)
      ELSEIF (NCHTAL(ICHORI).EQ.2) THEN
C       CALL SIGHA (2,JJJ,ZDS,PEN,PSIG,TIMAX,ARGST)
      ELSEIF (NCHTAL(ICHORI).EQ.3) THEN
        CALL SIGRAD (2,JJJ,ZDS,PEN,PSIG,TIMAX,ARGST)
      ELSEIF (NCHTAL(ICHORI).EQ.10) THEN
C       CALL SIGUSR(2,JJJ,ZDS,PEN,PSIG,TIMAX,ARGST,XD0,YD0,ZD0,
C    .              XD1,YD1,ZD1)
      ELSE
C       CALL SIGTST(2,JJJ,ZDS,PEN,PSIG,TIMAX,ARGST)
      ENDIF
C
      JJJ=JJJ+1
      XNTG(JJJ)=TRACKS
C
C  PLOT INDIVIDUAL CONTRIBUTIONS ALONG LINE OF SIGHT.
C  ACTIVATION OF THIS PLOT DISABLES FURTHER LINE OF SIGHTS TO BE
C  PLOTTED INTO GEOMETRY PLOT.
C
      IF (PLSPEC.AND.TRCSIG) THEN
        IF (PLHST) THEN
          WRITE (IUNOUT,*) 'FROM LININT: '
          WRITE (IUNOUT,*) 'PLOTTING OF FURTHER LINE OF SIGHTS DISABLED'
          WRITE (IUNOUT,*) 'BECAUSE NEW FRAME FOR CONTRIBUTIONS ALONG  '
          WRITE (IUNOUT,*) 'LINE OF SIGHT                              '
          PLHST=.FALSE.
        ENDIF
        IF (ISP.GT.0.AND.ISP.LE.NSPI) THEN
          AA(1:JJJ) = ARGST(ISP,1:JJJ)
        ELSEIF (ISP.EQ.0) THEN
          AA(1:JJJ) = SUM(ARGST(1:NSPI,1:JJJ),1)
        ELSE
          WRITE (iunout,*) 'ERROR IN SUBR. LININT: ISP= ',ISP
          CALL EXIT_OWN(1)
        ENDIF
        PPMA = MAXVAL(AA(1:JJJ))
        IF (NCHTAL(ICHORI).EQ.1) AA(1:JJJ) = MAX(1._DP,AA(1:JJJ)) 
        IF (PPMA.GT.0._DP) THEN
          IPLOTS = IPLOTS + 1
          write (iunout,*) 'iplots,jen,nchni,ppma ',
     .     iplots,jen,nchni,ppma
          YPLOT(1:JJJ,IPLOTS) = AA(1:JJJ)
          YMN2(IPLOTS) = MINVAL(AA(1:JJJ))
          YMX2(IPLOTS) = MAXVAL(AA(1:JJJ))
          IF (ABS(YMX2(IPLOTS)-YMN2(IPLOTS)) < EPS30) 
     .        YMX2(IPLOTS) = YMN2(IPLOTS) + 1._dp
          YMNLG2(IPLOTS)=YMN2(IPLOTS)
          YMXLG2(IPLOTS)=YMX2(IPLOTS)
          LSDVI(IPLOTS)=.FALSE.
          LPLOT2(IPLOTS)=.TRUE.
          IR1(IPLOTS)=1
          IR2(IPLOTS)=JJJ
          IRS(IPLOTS)=1
          TXTALL(IPLOTS) = TXTSIG(ICHORI)
          TXSPEC(IPLOTS)=REPEAT(' ',24)
          TXUNIT(IPLOTS)=REPEAT(' ',24)
          TXSPEC(IPLOTS)(1:8)='ENERGY ='
          WRITE (TXSPEC(IPLOTS)(9:),'(ES12.4)') PEN
        END IF

        IF (JEN == NCHNI) THEN    ! last energy for this present chord?
C  INITALIZE NEW PICTURE FOR NEW CHORD
          IF (NSPSCL(ICHORI).EQ.0) THEN
            LOGX=.FALSE.
            LOGY=.FALSE.
          ELSEIF (NSPSCL(ICHORI).EQ.1) THEN
            LOGX=.FALSE.
            LOGY=.TRUE.
          ELSEIF (NSPSCL(ICHORI).EQ.2) THEN
            LOGX=.TRUE.
            LOGY=.FALSE.
          ELSEIF (NSPSCL(ICHORI).EQ.3) THEN
            LOGX=.TRUE.
            LOGY=.TRUE.
          ENDIF
          XMI = 0._DP
          XMA = XNTG(JJJ)
          FITY=.FALSE.
          TXHEAD=REPEAT(' ',72)
          IF (NCHTAL(ICHORI) == 1) 
     .      TXHEAD(1:58) = 
     .      'NET SOURCE DISTRIBUTION ALONG LINE OF SIGHT FOR CX SPECTRA'
          IF (NCHTAL(ICHORI) == 2) 
     .      TXHEAD(1:58) = 
     .      'EMISSIVITY DISTRIBUTION ALONG LINE OF SIGHT               '
          IF (NCHTAL(ICHORI) == 3)
     .      TXHEAD(1:58) = 
     .      'SPECTRAL EMISSIVITY DISTRIBUTION ALONG LINE OF SIGHT      '

          CALL PLTTLY (XNTG,YPLOT,VPLOT,YMN2,YMX2,
     .         IR1,IR2,IRS,
     .         IPLOTS,TXTALL,TXSPEC,TXUNIT,TXTRUN,TXHEAD,
     .         LSDVI,XMI,XMA,YMNLG2,YMXLG2,LPLOT2,.FALSE.,IERR,
     .         NRAD,NRAD,L_SAME)
        END IF
      END IF
C
      IF (TRCSIG) THEN
        IF (NCHTAL(ICHORI).EQ.1) THEN
          WRITE (iunout,*) 'ENERGY (EV): ',PEN
          WRITE (iunout,*)  'J,XNTG(J),ARGST(J), FOR IATM= ',ISP
          DO 530 J=1,JJJ
530         WRITE (iunout,*) J,XNTG(J),AA(J)
        ELSEIF (NCHTAL(ICHORI).EQ.2) THEN
          WRITE (iunout,*)  'J,XNTG(J),ARGST(J), CONTRIBUTION ISP= ',ISP
          DO 540 J=1,JJJ
540         WRITE (iunout,*) J,XNTG(J),AA(J)
        ELSEIF (NCHTAL(ICHORI).EQ.3) THEN
          WRITE (iunout,*) 'ENERGY (EV): ',PEN
          WRITE (iunout,*)  'J,XNTG(J),ARGST(J), FOR IPHOT = ',ISP
          DO 550 J=1,JJJ
550         WRITE (iunout,*) J,XNTG(J),AA(J)
        ENDIF
      ENDIF
C
      RETURN
C
990   CONTINUE
      CALL MASAGE ('ERROR IN LININT, STEP SIZE.LE.0. OR UNDEFINED  ')
      CALL MASR3 ('ZDT1,ZTST,ZDS=     ',ZDT1,ZTST,ZDS)
      CALL MASAGE ('INTEGRATION IN LININT IS STOPPED               ')
      CALL MASJ1 ('CHORD   ',ICHORI)
      GOTO 380
991   CONTINUE
      CALL MASAGE ('ERROR IN LININT, NRCELL OUT OF RANGE           ')
      CALL MASJ1 ('CHORD   ',ICHORI)
      CALL EXIT_OWN(1)
995   CONTINUE
      CALL MASAGE ('ERROR IN LININT, NOT ENOUGH STORAGE FOR LINE   ')
      CALL MASAGE ('INTEGRATION. INCREASE ARRAYS XNTG,ARGST,       ')
      CALL MASAGE ('AA AND ZWORK. EXIT CALLED                      ')
      CALL EXIT_OWN(1)
      RETURN
      END
C ===== SOURCE: outsig.f
C
C
C*DK OUTSIG
      SUBROUTINE OUTSIG(ENSAVE,L_CHOR)

      USE PRECISION
      USE PARMMOD
      USE COMUSR
      USE CCONA
      USE COMPRT, ONLY: IUNOUT
      USE CLOGAU
      USE CPLOT
      USE COMSIG
      USE CTEXT
      USE PHOTON
      USE CPLMSK

      IMPLICIT NONE

      REAL(DP), INTENT(IN) :: ENSAVE(NCHOR,NCHEN)
      LOGICAL, INTENT(IN) :: L_CHOR(NCHOR)

      REAL(DP) :: XPLEN(NCHEN)
      REAL(DP) :: DUMFFD(NCHEN),WLDUMFFD(NCHEN),
     .            DELENE(NCHEN),DELWL(NCHEN),
     .            DEL_HELP(NCHEN), VSPEC(NCHEN)
      REAL(DP) :: YMN2(1), YMX2(1), YMNLG2(1), YMXLG2(1), XMI, XMA
      REAL(DP) :: TIMA, DUMTIL, AH, TIMI, DEL1, DEL2, SUM,WLSHFT
      INTEGER :: ICURV, ICHORI, I, NCHNI, ISK, JSK, IERR
      INTEGER :: IR1(1), IR2(1), IRS(1)
      LOGICAL :: LPLOT2(1), LSDVI(1), L_SAME
      CHARACTER(8) :: TSAFE, TEXTSS
      DATA TEXTSS /'SUM     '/
      CHARACTER(72) :: TXHEAD, TXTALL(1)
      CHARACTER(24) :: TXUNIT(1), TXSPEC(1)
C
      CALL PAGE
      NCHNI=IABS(NCHENI)
      TSAFE=TEXTS(1)
      ICURV=0
C
C  NULLPUNKT AUF DEM PAPIER

      X0PL=10.
      Y0PL=3.
C  ACHSENLAENGEN
      LENX=25.
      LENY=20.
C  ACHSENUNTERTEILUNG VORGEGEBEN?
C  NEIN!
      STPSZX=0.
      STPSZY=0.
      INTNRX=0
      INTNRY=0
C  ACHSE LOGARITHMISCH?
      LOGX=.FALSE.
C     LOGY VIA INPUT
C  LOG. ACHSE MIN
      MINLY=0
C  LOG. ACHSE MAX
C     MAXLY WERDEN BERECHNET IN ANPSGL
C  ZEICHNE NETZLINIEN EIN
      GRIDX=.TRUE.
      GRIDY=.TRUE.
C  MACHE GRADE GRENZEN, X-ACHSE (Y ACHSE, NUR WENN TALZMI=TALZMA=666.)
      FITX=.TRUE.
C  NEW FRAME FOR EACH PICTURE IN PLTTLY
      L_SAME=.FALSE.

      DO 100  ICHORI=1,NCHORI
        IF (.NOT.L_CHOR(ICHORI)) GOTO 100
C
        CALL LEER(2)
        WRITE (iunout,*) 'NUMBER OF DETECTOR = ',ICHORI
        WRITE (iunout,*) TXTSIG(ICHORI)
        CALL LEER(1)
        TXHEAD=REPEAT(' ',72)
        IF (NCHTAL(ICHORI).EQ.1) THEN
          CALL HEADNG('CX-DETECTOR SIGNAL, MAXW. NEUTRL. DISTR. ',41)
          TXHEAD(1:41) = 
     .      'CX-DETECTOR SIGNALS, MAXW. NEUTRL. DISTR.'
        ELSEIF (NCHTAL(ICHORI).EQ.2) THEN
          CALL HEADNG('H ALPHA-DETECTOR SIGNAL: #/S/CM2/STERAD  ',41)
          TXHEAD(1:41) = 
     .      'H ALPHA-DETECTOR SIGNALS: #/S/CM2/STERAD '
        ELSEIF (NCHTAL(ICHORI).EQ.3) THEN
          CALL HEADNG('SIDE ON SPECTRAL RADIANCE: #/S/CM2/NM/STERAD',44)
          TXHEAD(1:44) =
     .      'SIDE ON SPECTRAL RADIANCE                   '
        ELSEIF (NCHTAL(ICHORI).EQ.10) THEN
          CALL HEADNG('USER DEFINED LINE INTEGRAL (SUBR. SIGUSR)',41)
          TXHEAD(1:41) = 
     .      'USER DEFINED LINE INTEGRAL (SUBR. SIGUSR)'
        ELSE
          CALL HEADNG('LINE INTEGRAL TESTING OPTION: NO SIGNALS)',41)
          TXHEAD(1:41) = 
     .      'LINE INTEGRAL TESTING OPTION: NO SIGNALS)'
        ENDIF
        CALL LEER(2)
C
        TXTALL(1) = TXTSIG(ICHORI)
        CALL LEER(1)
        CALL MASR3 ('1ST POINT,"PIVOT POINT" ',
     .               XPIVOT(ICHORI),YPIVOT(ICHORI),ZPIVOT(ICHORI))
        CALL MASR3 ('2ND POINT, INSIDE VOLUME',
     .               XCHORD(ICHORI),YCHORD(ICHORI),ZCHORD(ICHORI))
        DO 30 I=1,NCHNI
          ENERGY(I)=ENSAVE(ICHORI,I)
30      CONTINUE
C
C  CX SPECTRA, ATOMS.  100 -- 199
C
        IF (NCHTAL(ICHORI).EQ.1) THEN
          IF (NSPSPZ(ICHORI).EQ.0) THEN
            TEXTS(1)=TEXTSS
          ENDIF
C
          DUMTIL=TILINE(ICHORI)
          DO 70 I=1,NCHNI
            AH=FUFFER(ICHORI,I)
            DUMFFD(I)=MAX(1.E-10_DP,AH)
            XPLEN(I)=ENERGY(I)
70        CONTINUE
          CALL MASRR2('ENERGY,CXFLUX         ',ENERGY,DUMFFD,NCHNI)
          CALL MASR1('INP. TEM.',TINP(ICHORI))
          CALL MASR1('DT. TMP.',DUMTIL)
          CALL MASAGE ('FITTING RANGE:  TIMIN,TIMAX=                 ')
          TIMI=NSPINI(ICHORI)*TINP(ICHORI)
          TIMA=NSPEND(ICHORI)*TINP(ICHORI)
          CALL MASR2 ('TIMIN,TIMAX=    ',TIMI,TIMA)
          CALL LEER(2)
C
C  PREPARE DATA FOR PLOT OF SPECTRUM NO ICHORI
          IF (PLSPEC) THEN
            L_SAME = NSPNEW(ICHORI).NE.1
C  INITALIZE NEW PICTURE
            IF (NSPNEW(ICHORI).EQ.1) THEN
              IF (NSPSCL(ICHORI).EQ.0) THEN
                LOGX=.FALSE.
                LOGY=.FALSE.
              ELSEIF (NSPSCL(ICHORI).EQ.1) THEN
                LOGX=.FALSE.
                LOGY=.TRUE.
              ELSEIF (NSPSCL(ICHORI).EQ.2) THEN
                LOGX=.TRUE.
                LOGY=.FALSE.
              ELSEIF (NSPSCL(ICHORI).EQ.3) THEN
                LOGX=.TRUE.
                LOGY=.TRUE.
              ENDIF
            ENDIF
C  PLOT
            YMN2(1)=MINVAL(DUMFFD(1:NCHNI))
            YMX2(1)=MAXVAL(DUMFFD(1:NCHNI))
            IF (ABS(YMX2(1)-YMN2(1)) < EPS30) YMX2(1) = YMN2(1) + 1._dp
            YMNLG2(1)=YMN2(1)
            YMXLG2(1)=YMX2(1)
            LSDVI(1)=.FALSE.
            LPLOT2(1)=.TRUE.
            IR1(1)=1
            IR2(1)=NCHNI
            IRS(1)=1
            XMI=ENERGY(1)
            XMA=ENERGY(NCHNI)
            FITY=.FALSE.
            TXSPEC=REPEAT(' ',24)
            TXUNIT=REPEAT(' ',24)
            ICURV=ICURV+1
            CALL PLTTLY (ENERGY,DUMFFD,VSPEC,YMN2,YMX2,
     .           IR1,IR2,IRS,
     .           1,TXTALL,TXSPEC,TXUNIT,TXTRUN,TXHEAD,
     .           LSDVI,XMI,XMA,YMNLG2,YMXLG2,LPLOT2,.TRUE.,IERR,
     .           NCHNI,NCHNI,L_SAME)
          ENDIF
C
          TEXTS(1)=TSAFE
C
C  PHOTONS, LINE INTENSITY.  200-- 299
C
        ELSEIF (NCHTAL(ICHORI).EQ.2) THEN
C
          DUMTIL=FUFFER(ICHORI,1)
          CALL MASR1('H ALPHA ',DUMTIL)
          CALL LEER(2)

C  PHOTONS, SIDE ON SPECTRA.  300-- 399

        ELSEIF (NCHTAL(ICHORI).EQ.3) THEN
          IF (NSPSPZ(ICHORI).EQ.0) THEN
            TEXTS(1)=TEXTSS
          ENDIF

          DO I=2,NCHNI-1
            DEL1=ENERGY(I+1)-ENERGY(I)
            DEL2=ENERGY(I)-ENERGY(I-1)
            DELENE(I)=0.5_DP*(DEL1+DEL2)
          ENDDO
          IF (NCHNI > 1) THEN
C  FIRST INTERVAL (HALF SIZE)
            DELENE(1)=0.5*(ENERGY(2)-ENERGY(1))
C  LAST INTERVAL (HALF SIZE)
            DELENE(NCHNI)=0.5*(ENERGY(NCHNI)-ENERGY(NCHNI-1))

          ELSE
            DELENE(1) = 0._DP
          END IF

C  INTEGRATE SPECTRA, IN ENERGY PICTURE: SUM
C  SET ORDINATES, FOR PLOT AND PRINTOUT: DUMFFD
          SUM=0._DP
          DO 310 I=1,NCHNI
            AH=FUFFER(ICHORI,I)
            DUMFFD(NCHNI-I+1)=MAX(1.E-30_DP,AH)
            SUM=SUM+AH*DELENE(I)
310       CONTINUE

C  CONVERT FROM ENERGY TO WAVELENGTH

C  1.) INVERT SCALE, FOR CONVERSION TO WAVELENGTH:
          DEL_HELP=DELENE
          DO I=1,NCHNI
            DELENE(I)=DEL_HELP(NCHNI-I+1)
            DUMFFD(NCHNI-I+1)=MAX(1.E-30_DP,FUFFER(ICHORI,I))
          ENDDO
C  2.)  CONVERT FROM EV TO NM
          WLSHFT=0._DP
          IF (ABS(ESHIFT(ICHORI)).GT.1E-20)
     .            WLSHFT=HPCL/ESHIFT(ICHORI)*1.D7
          DO 370 I=1,NCHNI
            XPLEN(NCHNI-I+1)=HPCL/ENERGY(I)*1.D7-WLSHFT
370       CONTINUE

          DO I=2,NCHNI-1
            DEL1=XPLEN(I+1)-XPLEN(I)
            DEL2=XPLEN(I)-XPLEN(I-1)
            DELWL(I)=0.5_DP*(DEL1+DEL2)
          ENDDO
C  FIRST INTERVAL (HALF SIZE)
          DELWL(1)=0.5*(XPLEN(2)-XPLEN(1))
C  LAST INTERVAL (HALF SIZE)
          DELWL(NCHNI)=0.5*(XPLEN(NCHNI)-XPLEN(NCHNI-1))

C  3.)  CONVERT SPECTRAL DENSITY FROM EV TO NM
          WLDUMFFD=DUMFFD*DELWL/DELENE
C
          CALL MASRR2('WAVEL. ,RADIATIVE FLUX ',XPLEN,WLDUMFFD,NCHNI)
          CALL MASR1('INTEGR. ',SUM)
          CALL LEER(2)
C
C  PREPARE DATA FOR PLOT OF SPECTRUM NO ICHORI
          IF (PLSPEC) THEN
            L_SAME = NSPNEW(ICHORI).NE.1
C  INITALIZE NEW PICTURE
            IF (NSPNEW(ICHORI).EQ.1) THEN
              IF (NSPSCL(ICHORI).EQ.0) THEN
                LOGX=.FALSE.
                LOGY=.FALSE.
              ELSEIF (NSPSCL(ICHORI).EQ.1) THEN
                LOGX=.FALSE.
                LOGY=.TRUE.
              ELSEIF (NSPSCL(ICHORI).EQ.2) THEN
                LOGX=.TRUE.
                LOGY=.FALSE.
              ELSEIF (NSPSCL(ICHORI).EQ.3) THEN
                LOGX=.TRUE.
                LOGY=.TRUE.
              ENDIF
            ENDIF
C  PLOT, IN WAVELENGTH SCALE
            YMN2(1)=MINVAL(WLDUMFFD(1:NCHNI))
            YMX2(1)=MAXVAL(WLDUMFFD(1:NCHNI))
            IF (ABS(YMX2(1)-YMN2(1)) < EPS30) YMX2(1) = YMN2(1) + 1._dp
            YMNLG2(1)=YMN2(1)
            YMXLG2(1)=YMX2(1)
            LSDVI(1)=.FALSE.
            LPLOT2(1)=.TRUE.
            IR1(1)=1
            IR2(1)=NCHNI
            IRS(1)=1
            XMI=XPLEN(1)
            XMA=XPLEN(NCHNI)
            FITY=.FALSE.
            TXSPEC=REPEAT(' ',24)
            TXUNIT=REPEAT('PHOTONS/S/CM2/NM/STERAD ',24)
            ICURV=ICURV+1
            CALL PLTTLY (XPLEN,WLDUMFFD,VSPEC,YMN2,YMX2,
     .           IR1,IR2,IRS,
     .           1,TXTALL,TXSPEC,TXUNIT,TXTRUN,TXHEAD,
     .           LSDVI,XMI,XMA,YMNLG2,YMXLG2,LPLOT2,.FALSE.,IERR,
     .           NCHNI,NCHNI,L_SAME)
          ENDIF
C
          TEXTS(1)=TSAFE
C

        ELSEIF (NCHTAL(ICHORI).EQ.10) THEN
          write (iunout,*) 'printout for user defined line integral '
          write (iunout,*) 'still to be written in subr. outsig '
        ENDIF

100   CONTINUE
      CALL LEER(2)

      RETURN
      END
C ===== SOURCE: sgnal.f
c april05:  *sqrt(ze) moved from here (for cx spectra) into sigcx
c april06:  restriction to iphot.eq.isp in case of los-radiances
C
C
      SUBROUTINE SGNAL(ICHORI,IISTR,ISP,LCHOR)
C
C  THIS SUBROUTINE CALCULATES LINE INTEGRATED SIGNALS, USING THE EIRENE
C  VOLUME AVERAGED TALLIES AND THE PLASMA BACKGROUND DATA.
C  THERE MAY BE A CONTRIBUTION DIRECTLY FROM A PRIMARY SOURCE,
C  DUE TO DIRECT EMISSION FROM SOURCE INTO LINE OF SIGHT,
C  AS WELL AS A SECONDARY SOURCE (POST COLLISION) CONTRIBUTION, DUE TO
C  SCATTERING INTO THE LINE OF SIGHT
C
      USE PRECISION
      USE PARMMOD
      USE COMUSR
      USE CESTIM
      USE CCONA
      USE CLOGAU
      USE CPLOT
      USE COMSIG
      USE CGRID
      USE CTRCEI
      USE CSDVI
      USE CSDVI_COP
      USE CSDVI_BGK
      USE COMPRT
      USE COMSOU
      USE COUTAU
      USE COMXS
      USE CSPEI
      USE CGEOM
      USE CTEXT

      IMPLICIT NONE
C
      INTEGER, INTENT(IN) :: ICHORI, IISTR, ISP
      REAL(DP) :: C1(3),C2(3),PSIG(0:NSPZ+10),
     .          BUFFER(NCHOR,NCHEN),ESTART(NCHOR),ENDFIT(NCHOR)
      REAL(DP) :: ZE1, ZE2, ZSCALE, ZZ, SLOPE, STEIG, PMI, PMA, XMA,
     .            XMI, XMAX, XMIN, ZSI, TIMAX, ZE, SUMM, ADD
      REAL(DP) :: FTABRC1
      INTEGER :: I1, I2, IN, I, IS, NAC2, NBC2, ICHRD, IPVOT, NCHNI,
     .           ISK, JSK, IFIRST, JEN, NSPI, ISTR, ICOUNT,KK, IR, KREC,
     .           IRRC, MAXREC, IFLAG, IPLOTS, ILTXT
      LOGICAL :: NLVL(0:NSTRAI),LCHOR
      CHARACTER(48) :: TX(14)
C
      ISTRA=IISTR
      NCHNI=IABS(NCHENI)
      IF (NCHTAL(ICHORI).EQ.2) NCHNI=1
C

C
      IF (NCHTAL(ICHORI) .NE. 3) THEN
      IF (ISTRA.EQ.IESTR) THEN
C  NOTHING TO BE DONE
      ELSEIF (NFILEN.EQ.1.OR.NFILEN.EQ.2) THEN
        IESTR=ISTRA
        CALL RSTRT(ISTRA,NSTRAI,NESTM1,NESTM2,NADSPC,
     .             ESTIMV,ESTIMS,ESTIML,
     .             NSDVI1,SDVI1,NSDVI2,SDVI2,
     .             NSDVC1,SIGMAC,NSDVC2,SGMCS,
     .             NSBGK,SIGMA_BGK,NBGV_STAT,SGMS_BGK,
     .             NSCOP,SIGMA_COP,NCPV_STAT,SGMS_COP,
     .             NSIGI_SPC,TRCFLE)
        IF (NLSYMP(ISTRA).OR.NLSYMT(ISTRA)) THEN
          CALL SYMET(ESTIMV,NTALV,NRAD,NR1ST,NP2ND,NT3RD,
     .               NADDV,NFIRST,NLSYMP(ISTRA),NLSYMT(ISTRA))
        ENDIF
      ELSEIF ((NFILEN.EQ.6.OR.NFILEN.EQ.7).AND.ISTRA.EQ.0) THEN
        IESTR=ISTRA
        CALL RSTRT(ISTRA,NSTRAI,NESTM1,NESTM2,NADSPC,
     .             ESTIMV,ESTIMS,ESTIML,
     .             NSDVI1,SDVI1,NSDVI2,SDVI2,
     .             NSDVC1,SIGMAC,NSDVC2,SGMCS,
     .             NSBGK,SIGMA_BGK,NBGV_STAT,SGMS_BGK,
     .             NSCOP,SIGMA_COP,NCPV_STAT,SGMS_COP,
     .             NSIGI_SPC,TRCFLE)
        IF (NLSYMP(ISTRA).OR.NLSYMT(ISTRA)) THEN
          CALL SYMET(ESTIMV,NTALV,NRAD,NR1ST,NP2ND,NT3RD,
     .               NADDV,NFIRST,NLSYMP(ISTRA),NLSYMT(ISTRA))
        ENDIF
      ELSE
        WRITE (iunout,*) 'ERROR IN DIAGNO: DATA FOR STRATUM ISTRA= ',
     .                   ISTRA
        WRITE (iunout,*) 
     .    'ARE NOT AVAILABLE. LINE INTEGRATION ABANDONNED'
        RETURN
      ENDIF
      END IF
C
C  PREPARE DIRECT (PRIMARY) EMISSIVITY FROM SOURCE, INTO LINE OF SIGHT
C  (SCATTERED (SECONDARY) CONTRIBUTION WILL BE DONE IN SUBR. SIGCX, SIGRAD, SIGH

      NLVL=.FALSE.
      DO 10 ISTR=1,NSTRAI
C  PRIMARY SOURCE CONTRIBUTION, REFERE TO INPUT BLOCK 7
C  HOWEVER, THIS STRATUM NEED NOT NECESSARILY HAVE TO ACTIVE
        NLVL(ISTR)=NLVOL(ISTR).AND.NLPLS(ISTR)
10    CONTINUE
      NLVL(0)=ANY(NLVL(1:NSTRAI))
C
      IF (NCHTAL(ICHORI).EQ.1) THEN
C  FOR CX SIGNAL:  TO BE WRITTEN
C     CALL ZEROA2(RECADD,NATM,NRAD)
C     IF (NLVL) THEN
C       WRITE (iunout,*) 'WARNING:'
C       WRITE (iunout,*) 'VOLUME RECOMBINATION CONTRIBUTION TO SIGNAL:'
C       WRITE (iunout,*) 'FIRST GENERATION CONTRIBUTION: TO BE WRITTEN'
C  RECADD: #/S/CM**3
C  RECADD*ELCHA*VOL: AMP/CELL
C       DO 100 IPLS=1,NPLSI
C         DO 100 KREC=1,NPRCI(IPLS)
C           IATM=NATPRC(KREC)
C           IF (IATM.LE.0.OR.IATM.GT.NATMI) GOTO 100
C           DO 101 IR=1,NSBOX
C             RECADD(IATM,IR)=RECADD(IATM,IR)+
C    .                        TABRC1(KREC,IR)*DIIN(IPLS,IR)*ELCHA
101         CONTINUE
100     CONTINUE
        write (iunout,*) 'sgnal, cx: ichord,istra,sum ',
     .                      ichori,istra
        write (iunout,*) 'volumetric emission to be written'
C     ENDIF

C  FOR RADIANCE OF LINE ISP=IPHOT, IN STRATUM ISTR
      ELSEIF (NCHTAL(ICHORI).EQ.3) THEN
        MAXREC=SUM(NPRCI(1:NPLSI))
        ALLOCATE(RECADD(MAXREC,NRAD))
        ALLOCATE(INTADD(3,MAXREC))
        RECADD=0._DP
        INTADD=0
        ICOUNT=0
        NCTSIG=0
        IF (NLVL(ISTRA)) THEN
C  RECADD: #/S/CM**3
C  RECADD*ELCHA*VOL: AMP/CELL
          IF (ISTRA.EQ.0) THEN
            WRITE (iunout,*) 'ISTRA=0 NOT READY IN SUBR. SGNAL '
            DEALLOCATE(RECADD)
            DEALLOCATE(INTADD)
            LCHOR=.FALSE.
            RETURN
          ENDIF
          IF (NSPEZ(ISTRA).LE.0.OR.NSPEZ(ISTRA).GT.NPLSI) THEN
            WRITE (iunout,*) 'NSPEZ(ISTRA) OUT OF RANGE IN SUBR. SGNAL '
            WRITE (iunout,*) 'ISTRA, NSPEZ ', ISTRA, NSPEZ(ISTRA)
            DEALLOCATE(RECADD)
            DEALLOCATE(INTADD)
            LCHOR=.FALSE.
            RETURN
          ENDIF
          IPLS=NSPEZ(ISTRA)
          IFLAG=0
          DO 130 KREC=1,NPRCI(IPLS)
            IRRC=LGPRC(IPLS,KREC)
            IPHOT=NPHPRC(IRRC)
            IF (IPHOT.EQ.0) IPHOT=NPHPRC_2(IRRC)
            IF (IPHOT.LE.0.OR.IPHOT.GT.NPHOTI) GOTO 130
            IF (IPHOT.NE.ISP) THEN
              WRITE (IUNOUT,*) 'IN SGNAL: IPHOT.NE.ISP '
              WRITE (IUNOUT,*) 'ICHORD, IRRC, IPHOT, ISP ',
     .                          ICHORD, IRRC,IPHOT,ISP 
              WRITE (IUNOUT,*) 'EMISSION FROM THIS LINE IS SKIPPED'
              GOTO 130
            ENDIF
            KK=NREARC(IRRC)
            ICOUNT=ICOUNT+1
            INTADD(1,ICOUNT)=KK
            INTADD(2,ICOUNT)=IPLS
            INTADD(3,ICOUNT)=IPHOT
            SUMM=0._DP
            DO 131 IR=1,NSBOX
              ADD=0._DP
              IF (NSTGRD(IR).EQ.0.AND..NOT.LGVAC(IR,IPLS)) THEN
                IF (NSTORDR >= NRAD) THEN
                  ADD=TABRC1(IRRC,IR)*DIIN(IPLS,IR)
                ELSE
                  ADD=FTABRC1(IRRC,IR)*DIIN(IPLS,IR)
                END IF
              END IF
              RECADD(ICOUNT,IR)=ADD
              SUMM=SUMM+ADD*VOL(IR)*ELCHA
131         CONTINUE
            IFLAG=1
            write (iunout,*) 'sgnal, rad: ichord,istra,icount,sum ',
     .                               ichori,istra,icount,summ
            write (iunout,*) 'iphot, isp ',texts(iphot),' ',texts(isp)
130       CONTINUE
          IF (IFLAG.EQ.0) THEN
C  NO EMMISION FOUND FOR THIS STRATUM, turn off this chord
            LCHOR=.FALSE.
            write (iunout,*) 'sgnal, rad: ichord, istra, is turned off',
     .                               ichori, istra
            write (iunout,*) 'no photon emission rate found '
            DEALLOCATE(RECADD)
            DEALLOCATE(INTADD)
            return
          ENDIF
          NCTSIG=ICOUNT
        ELSE
c  nlvl is not true:
          LCHOR=.FALSE.
          write (iunout,*) 'sgnal, rad: ichord, istra, is turned off',
     .                               ichori, istra
          write (iunout,*) 'specified stratum is not a volume source '
          DEALLOCATE(RECADD)
          DEALLOCATE(INTADD)
          return
        ENDIF
      ELSEIF (NCHTAL(ICHORI).EQ.2) THEN
        write (iunout,*) 'sgnal, emis: ichord,istra ',
     .                            ichori,istra
        write (iunout,*) 'volumetric line emission from subr. halpha'
        write (iunout,*) 'contribution no. isp ',isp
      ENDIF
C
C     CALCULATE SIGNAL STRENGTHS
C
      IPVOT=IPIVOT(ICHORI)
      C1(1)=XPIVOT(ICHORI)
      C1(2)=YPIVOT(ICHORI)
      C1(3)=ZPIVOT(ICHORI)
C
      ICHRD=ICHORD(ICHORI)
      C2(1)=XCHORD(ICHORI)
      C2(2)=YCHORD(ICHORI)
      C2(3)=ZCHORD(ICHORI)
C
      NBC2=NSPBLC(ICHORI)
      NAC2=NSPADD(ICHORI)
C
C  ENERGY LOOP (IF ANY)
C
      PMA=-1.E30
      PMI=1.E30
      XMA=-1.E30
      XMI=1.E30
      IF (NCHTAL(ICHORI).EQ.1) NSPI=NATMI
      IF (NCHTAL(ICHORI).EQ.2) NSPI=10
      IF (NCHTAL(ICHORI).EQ.3) NSPI=NPHOTI
      IF (NCHTAL(ICHORI).EQ.10) NSPI=NSPZ
      IFIRST=0
      DO 231 JEN=1,NCHNI
        ZE=ENERGY(JEN)
        CALL LININT (IFIRST,ICHORI,C1,C2,ICHRD,IPVOT,NBC2,NAC2,ZE,
     .               PSIG,TIMAX,ISP,NSPI,JEN,NCHNI)
        IFIRST=1
        IF (ISP.GT.0.AND.ISP.LE.NSPI) THEN
C  SINGLE SPECIES INDEX ISP
          BUFFER(ICHORI,JEN)=PSIG(ISP)
        ELSEIF (ISP.EQ.0) THEN
C  SUM OVER SPECIES INDEX
          ZSI=0.
          DO 239 IS=1,NSPI
            ZSI=ZSI+PSIG(IS)
239       CONTINUE
          BUFFER(ICHORI,JEN)=ZSI
          WRITE (80,'(I6,3ES12.4)') ICHORI,C2
          WRITE (80,'(6ES12.4)') PSIG(0:NSPI)
        ELSE
          WRITE (iunout,*) 'ERROR IN SUBR. SGNAL: ISP= ',ISP
          CALL EXIT_OWN(1)
        ENDIF
C
C  PROCESS DATA FROM LINE INTEGRAL ROUTINES INTO REQUESTED DATA & UNITS
C
        IF (NCHTAL(ICHORI).EQ.1) THEN
C  LINE INTEGRAL: CX ATOMS/SEC/CM**2/EV/STERAD
C  THE NUMERICAL FACTOR 1./11.137 ARISES FROM A TRANSFORMATION
C  OF A MAXWELLIAN VELOCITY DISTRIBUTION TO A MAXW. ENERGY DISTR.
C  1./11.137=0.5*(1./PI)**1.5, IN SIGCX
          FUFFER(ICHORI,JEN)=BUFFER(ICHORI,JEN)/11.137
        ELSEIF (NCHTAL(ICHORI).EQ.2) THEN
C  LINE INTEGRAL: PHOTONS/SEC/CM**2/STERAD (EMISSIVITY)
          FUFFER(ICHORI,JEN)=BUFFER(ICHORI,JEN)/(4.*PIA)
        ELSEIF (NCHTAL(ICHORI).EQ.3) THEN
C  LINE INTEGRAL: PHOTONS/SEC/CM**2/EV/STERAD (SPECTRAL RADIANCE)
          FUFFER(ICHORI,JEN)=BUFFER(ICHORI,JEN)/(4.*PIA)
C  LINE INTEGRAL: USER SUPPLIED INTEGAND ALONG LINE OF SIGHT
        ELSEIF (NCHTAL(ICHORI).EQ.10) THEN
          FUFFER(ICHORI,JEN)=BUFFER(ICHORI,JEN)
        ENDIF
231   CONTINUE
C
C  ENERGY LOOP FINISHED
C
C
C  FIT A STRAIGHT LINE TO SPECTRUM, BETWEEN ESTART AND ENDFIT
C  TO BE DONE ONLY FOR NCHTAL=1
C
      IF ((NCHTAL(ICHORI).NE.1) .OR. (NCHENI == 1)) GOTO 300

      ESTART(ICHORI)=NSPINI(ICHORI)*TIMAX
      ENDFIT(ICHORI)=NSPEND(ICHORI)*TIMAX
      TINP(ICHORI)=TIMAX
      IF (TRCSIG) THEN
        WRITE (iunout,*) 'FITTING RANGE: E1--E2, TIMAX'
        WRITE (iunout,*) ESTART(ICHORI),'--',ENDFIT(ICHORI),'  ',TIMAX
      ENDIF
C
C  FIND MAX. VALUE OF SIGNAL
      CALL MAXMN2(BUFFER,NCHOR,ICHORI,ICHORI,1,NCHNI,XMIN,XMAX)
C  SCALE RESULT
      IF (XMAX.GT.0.) GOTO 235
      CALL MASAGE ('NO SLOPE IN SIGNAL, BECAUSE MAX(BUFFER).LE.0   ')
      PLSPEC=.FALSE.
      RETURN
235   ZSCALE=1./XMAX
      DO 233 I=1,NCHNI
        BUFFER(ICHORI,I)=BUFFER(ICHORI,I)*ZSCALE
        ZZ=MAX(1.E-10_DP,BUFFER(ICHORI,I))
233     BUFFER(ICHORI,I)=LOG(ZZ)
C
C  CURVE FITTING
C
C  MIN. ENERGY FOR FIT
      ZE1=ESTART(ICHORI)
C  MAX. ENERGY
      ZE2=ENDFIT(ICHORI)
C
C  FIND ELEMENTS
      DO 241 JEN=2,NCHNI
        I1=JEN
        IF (ENERGY(I1).GE.ZE1) GO TO 242
241   CONTINUE
242   CONTINUE
C
      DO 243 JEN=I1,NCHNI
        I2=JEN
        IF (ENERGY(I2).GE.ZE2) GO TO 244
243   CONTINUE
244   CONTINUE
C
C   NUMBER OF POINTS FOR FITTING
      IN=I2-I1+1
      IF (IN.LT.2) THEN
        CALL MASAGE ('WRONG ENERGY RANGE FOR CURVE FITTING IN SIGNAL ')
        CALL MASJ1 ('CHORD.NO. I=           ',ICHORI)
        WRITE (iunout,*) 'I1,I2,IN ',I1,I2,IN
        TILINE(ICHORI)=0.
      ELSE
C  FITTED RESULT
        STEIG=SLOPE(IN,ICHORI,I1,ENERGY,BUFFER,NCHOR,NCHNI)
        IF (STEIG.GE.0.) THEN
          TILINE(ICHORI)=0.
        ELSE
          TILINE(ICHORI)=-1./STEIG
        ENDIF
      ENDIF
C
      IF (TRCSIG) THEN
        WRITE (iunout,*) 'ICHORI,TILINE(ICHORI) ',ICHORI,TILINE(ICHORI)
      ENDIF

300   CONTINUE
C
      IF (NCHTAL(ICHORI).EQ.3) THEN
        DEALLOCATE(RECADD)
        DEALLOCATE(INTADD)
      ENDIF
      RETURN
      END
C ===== SOURCE: sigcx.f
C
C
      SUBROUTINE SIGCX(IFIRST,JJJ,ZDS,PEN,PSIG,TIMAX,ARGST)
C
C  INPUT:
C          IFIRST: FLAG FOR INITIALISATION
C          NCELL:  INDEX IN TALLY ARRAYS FOR CURRENT ZONE
C          JJJ:    INDEX OF SEGMENT ALONG CHORD
C          ZDS:    LENGTH OF SEGMENT NO. JJJ
C          PEN:    ENERGY (EV) AT WHICH CX FLUXES ARE TO BE EVALUATED
C  OUTPUT: CONTRIB. FROM CELL NCELL AND CHORD SEGMENT JJJ TO:
C          THE CX FLUX PSIG(IATM),IATM=0,NATMI OF ENERGY PEN (EV)
C          THE MAX. ION TEMP. TIMAX ALONG LINE OF SIGHT
C          THE INTEGRANT ARGST SUCH THAT INTEGR.(ARGST*DL) = PSIG
C
      USE PRECISION
      USE PARMMOD
      USE COMUSR
      USE CESTIM
      USE CADGEO
      USE CCONA
      USE CLOGAU
      USE CUPD
      USE COMSIG
      USE CGRID
      USE CZT1
      USE CTRCEI
      USE CGEOM
      USE COMPRT
      USE CLGIN
      USE COMXS
      USE CSPEI

      IMPLICIT NONE

      INTEGER, INTENT(IN) :: IFIRST, JJJ
      REAL(DP), INTENT(IN) :: ZDS, PEN
      REAL(DP), INTENT(IN OUT) :: PSIG(0:NSPZ+10), TIMAX
      REAL(DP), INTENT(IN OUT) :: ARGST(0:NSPZ+10,NRAD)
      REAL(DP), ALLOCATABLE, SAVE :: ZARG2(:), ZARG3(:)
      REAL(DP) :: ZLAMB(0:NATM),
     .          SIGTTT(0:NATM,NPLS), CFLAG(7,3), ZNI(NRCX)
      REAL(DP) :: ELAB, CXS, CXRATE, CROSS, PVELQ0, HEB, VREL,
     .          VRELQ, ZEXP2, ATTENU, ZEXP3, SIGADD, ARGU, ZEXP1,
     .          ZMAX, VXS, VYS, VZS, ZTII, ZARG1, ZTI32, FPATHA, ZTI,
     .          TTARG, EDR
      INTEGER :: IREAC, IAT, NCELC, ICELL, IRCX, IACX, IPLSTI
C
      DATA ZMAX/40./

      IF (IFIRST.EQ.0) THEN
        ALLOCATE (ZARG2(0:NATM))
        ALLOCATE (ZARG3(0:NATM))
        TIMAX=0.
        DO 100 IATM=0,NATMI
          PSIG(IATM)=0.
          ZARG2(IATM)=0.
          ZARG3(IATM)=0.
          DO 101 ICELL=1,NSBOX
            ARGST(IATM,ICELL)=0.
101       CONTINUE
100     CONTINUE
      ELSEIF (IFIRST.EQ.1) THEN
C
C  MEAN FREE PATH LENGTH FOR ATTENUATION FACTOR
C  IONS IPLS WITH  (SHIFTED, VXIN,VYIN,VZIN) MAXWELLIAN
C  AT KT=TIIN(IPLS,NCELL),
C  ALL SPECIES IN PLASMA
C  ELECTRONS WITH  MAXWELLIAN AT KT=TEIN(NCELL),
C  MONOENERGETIC NEUTRAL BEAM, VELOCITY VEL (CM/SEC), SPECIES IATM
C  WITH SPEED UNIT VECTOR (-VELX,-VELY,-VELZ)
C
        NCELC=NCLTAL(NCELL)

        DO 200 IATM=1,NATMI
          VEL=SQRT(PEN/RMASSA(IATM))*CVELAA
          VXS=VELX
          VYS=VELY
          VZS=VELZ
          VELX=-VELX
          VELY=-VELY
          VELZ=-VELZ
          ZLAMB(IATM)=FPATHA(NCELL,CFLAG,1,1)
          VELX=VXS
          VELY=VYS
          VELZ=VZS
200     CONTINUE
C
C  CX-COLLISION FREQUENCY (1/SEC)
C  MONOENERGETIC ION BEAM, ENERGY PEN (EV), SPEED UNIT VECTOR:
C  -(VELX,VELY,VELZ) AND SPECIES IPLS=1,NPLSI
C  NEUTRALS WITH MAXWELLIAN KT=2/3*EDENA/PDENA, SPECIES IATM=1,NATMI
C  ASSUME: POST COLLISION NEUTRAL = PRE COLLISION ION: PEN, -(VELX,VELY,VELZ)
C
        DO 300 IATM=0,NATMI
          DO 300 IPLS=1,NPLSI
            SIGTTT(IATM,IPLS)=0.
300     CONTINUE
        ZNI = 0._DP
C
        DO 311 IATM=1,NATMI
          IF (LGACX(IATM,0,0).EQ.0) GOTO 311
          IF (LGVAC(NCELL,0).OR.PDENA(IATM,NCELC).LE.0.) GOTO 311
C  NEUTRAL DRIFT VELOCITIES (XDR,YDR,ZDR) NOT YET ACCOUNTED FOR.
C  INCIDENT ION BEAM (PEN) MUST BE CONVERTED INTO A FRAME IN WHICH
C  NEUTRAL DRIFT=0. NEXT LINE MUST CONTAIN NEUTRAL DRIFT ENERGY.
          EDR=0.
          TTARG=2./3.*(EDENA(IATM,NCELC)-EDR)/PDENA(IATM,NCELC)
          ZTI=TTARG*8./PIA*CVEL2A*CVEL2A
          DO 310 IACX=1,NACXI(IATM)
            IRCX=LGACX(IATM,IACX,0)
            IPLS=LGACX(IATM,IACX,1)
C           IAT_IN = IATM
C           IPL_IN = IPLS
C           IAT_OUT= N1STX(IRCX,2)
C           IPL_OUT= N2NDX(IRCX,2)
C
C  LOCAL ION TEMPERATURE
C
            IPLSTI = MPLSTI(IPLS)
            ZTII=TIIN(IPLSTI,NCELL)
            TIMAX=MAX(TIMAX,ZTII)
C
C  ZNI=PROBABLILITY FOR EMISSION OF ATOMS IAT_OUT WITH E=PEN:
C          FROM MAXW. ENERGY DISTR. OF IONS IPL_IN GOING INTO CX
C  ZNI: 1/EV
            ZTI32=1.0/(ZTII*SQRT(ZTII))
            ZARG1=PEN/ZTII
            ZEXP1=0.
            IF(ZARG1.LE.ZMAX) ZEXP1=EXP(-ZARG1)
            ZNI(IRCX)=(ZEXP1*ZTI32)*SQRT(PEN)
C  cx process data for ircx assume: beam iatm, ions: ipls
            VEL=SQRT(PEN/RMASSA(IATM))*CVELAA
            PVELQ0=VEL*VEL
            HEB=LOG10(PVELQ0*CVELI2)
C
            VRELQ=ZTI/RMASSP(IPLS)+PVELQ0
            VREL=SQRT(VRELQ)
C  STRICTLY: A BEAM (ION, IPL_IN) MAXWELLIAN (NEUTRAL, IAT_OUT)
C  RATE COEFFICIENT SHOULD BE COMPUTED
C  this should be obtained from <sigma v>(IRCX) with proper
c  choice of Ti_scaled and E_scaled
C  USE APPROXIMATION: <SIGMA V> APPROX SIGMA(V_EFF)*V_EFF
C  IS CX CROSS SECTION AVAILABLE ?
            IREAC=MODCOL(3,1,IRCX)
            IF (IREAC.EQ.-1.OR.IREAC.GT.0) THEN
              ELAB=LOG(VRELQ)+DEFCX(IRCX)

              CXS=CROSS(ELAB,IREAC,IRCX,'SIGCX ')
              CXRATE=CXS*VREL
C
              SIGTTT(IATM,IPLS)=CXRATE*PDENA(IATM,NCELC)
            ELSE
              WRITE (iunout,*) 'CROSS SECTION NOT AVAILABLE IN SIGCX  '
            ENDIF
310       CONTINUE
C
311     CONTINUE
C
C  UP TO THIS POINT, IATM IS THE SPECIES INDEX OF THE ATOM GOING INTO
C  CX WITH BULK ION IPLS, AND SIGTTT(IATM,IPLS) IS THE CORRESPONDING RATE.
C  FOR THE SPECTRUM, NOW, THE ATOM SPECIES AFTER CX MATTERS 
C  (E.G., IF : H + D+ --> D + H+
C  THEN, UP TO NOW, IATM WAS H.  FROM NOW ON IT MUST STAND FOR D.)
C
C  ATTENUATION FACTOR:
C  FOR ALL CX ATOMS WITH SPECIES INDEX IATM, TRAVELLING IN IPLS
        DO 400 IATM=1,NATMI
          ZARG3(IATM)=ZARG3(IATM)+ZARG2(IATM)
          ZARG2(IATM)=ZDS/ZLAMB(IATM)
          ZEXP2=0.0
          ZEXP3=0.0
          IF(ZARG2(IATM).LT.ZMAX) ZEXP2=EXP(-ZARG2(IATM))
          IF(ZARG3(IATM).LT.ZMAX) ZEXP3=EXP(-ZARG3(IATM))
          ATTENU=ZLAMB(IATM)*ZEXP3*(1-ZEXP2)
C
C  SOURCE-TERM FOR ATOMS IATM
C
C  1.) CX OF IONS IPLS WITH ATOMS IAT_IN, RESULTING IN IATM=IAT_OUT
C  2.) DIRECT  FROM PRIMARY SOURCE (E.G. RECADD: RECOMBINATION)
C  3.) DIRECT  FROM NON-CX  SECUNDARY SOURCE (E.G.  WALL REFLECTION INTO PEN, LINE)
C
          SIGADD=0.
C  CONTRIBUTION 1:
	  DO IRCX = 1, NRCX
	    IF ( N1STX(IRCX,2) /= IATM ) CYCLE
            IF (ANY(LGACX(:,:,0)==IRCX)) THEN
C  IAT IS THAT ATOM SPECIES, WHICH RESULTS IN IATM AFTER CX WITH IPLS
C  FIND PRE-COLLISION ATOM INDEX IAT:
              DO IAT=1,NATMI
                DO IACX=1,NACXI(IAT)
                  IF (LGACX(IAT,IACX,0) == IRCX) THEN
                    IPLS = LGACX(IAT,IACX,1)
                    SIGADD=SIGTTT(IAT,IPLS)*DIIN(IPLS,NCELL)+SIGADD
                  END IF
	 	END DO
	      END DO
            END IF	
            ARGU=ZNI(IRCX)*SIGADD
            PSIG(IATM)=PSIG(IATM)+ARGU*ATTENU
            ARGST(IATM,JJJ)=ARGU*ZEXP3*SQRT(ZEXP2)/11.137
	  END DO
C  CONTRIBUTION 2: TO BE WRITTEN
C         SIGADD=RECADD(IATM,NCELL)  ......
C  CONTRIBUTION 3: TO BE WRITTEN
C         SIGADD= .............
400     CONTINUE
C
      ELSEIF (IFIRST.EQ.2) THEN
        DEALLOCATE (ZARG2)
        DEALLOCATE (ZARG3)
      ENDIF
      RETURN
      END
C ===== SOURCE: sigha.f
!pb  100107 ENTRY SIGHA_REINIT added
C
C
      SUBROUTINE SIGHA(INIT,JJJ,ZDS,DUMMY1,PSIG,DUMMY2,ARGST)
C
C  INPUT:
C          INIT: FLAG FOR INITIALISATION (DO NOT CHANGE!)
C          NCELL (COMPRT): INDEX IN TALLY ARRAYS FOR CURRENT ZONE
C          JJJ:    INDEX OF SEGMENT ALONG CHORD
C          ZDS:    LENGTH OF SEGMENT NO. JJJ
C  OUTPUT: CONTRIB. FROM CELL NCELL AND CHORD SEGMENT JJJ TO:
C          THE H ALPHA FLUX PSIG(I),I=0,5 CONTRIBUTIONS
C          FROM ATOMS, MOLECULES, TEST IONS, BULK IONS AND NEGATIV IONS
C          THE INTEGRANT ARGST SUCH THAT INTEGR.(ARGST*DL) = PSIG
C
      USE PRECISION
      USE PARMMOD
      USE CESTIM
      USE CGRID
      USE CGEOM
      USE COMPRT
      USE COMUSR

      IMPLICIT NONE

      INTEGER, INTENT(IN) :: INIT, JJJ
      REAL(DP), INTENT(IN) :: ZDS, DUMMY1, DUMMY2
      REAL(DP), INTENT(IN OUT) :: PSIG(0:NSPZ+10), ARGST(0:NSPZ+10,NRAD)
      INTEGER :: ISTOLD, ISP, NCELC, ICELL, ITROLD
      DATA ISTOLD/-1/
      DATA ITROLD/-1/
C
      SAVE
C
      IF (INIT.EQ.0) THEN
        DO 100 ISP=0,NSPZ+10
          PSIG(ISP)=0.
          DO 100 ICELL=1,NSBOX
            ARGST(ISP,ICELL)=0.
100     CONTINUE
C  INITIALISE H-ALPHA ARRAYS FOR CURRENT STRATUM ?
        IF ((ISTRA .NE. ISTOLD) .OR. (IITER .NE. ITROLD))
     .     CALL HALPHA(ISTRA,NADVI+1,NADVI+2,NADVI+3,NADVI+4,NADVI+5,
     .                 NADVI+6,NADVI+7)
        ISTOLD=ISTRA
        RETURN
      ENDIF
C
C  LINE INTEGRAL: PHOTONS/SEC/CM**2
C
      IF (NSPZ+2.LT.6) THEN
        WRITE (iunout,*) 'ERROR EXIT FROM SIGHA '
        CALL EXIT_OWN(1)
      ENDIF
C
      ncelc=ncltal(ncell)
      PSIG(1)=PSIG(1)+ZDS*ADDV(NADVI+1,NCELC)
      PSIG(2)=PSIG(2)+ZDS*ADDV(NADVI+2,NCELC)
      PSIG(3)=PSIG(3)+ZDS*ADDV(NADVI+3,NCELC)
      PSIG(4)=PSIG(4)+ZDS*ADDV(NADVI+4,NCELC)
      PSIG(5)=PSIG(5)+ZDS*ADDV(NADVI+5,NCELC)
      PSIG(0)=PSIG(0)+ZDS*ADDV(NADVI+6,NCELC)
      PSIG(6)=PSIG(6)+ZDS*ADDV(NADVI+7,NCELC)
      ARGST(1,JJJ)=ADDV(NADVI+1,NCELC)
      ARGST(2,JJJ)=ADDV(NADVI+2,NCELC)
      ARGST(3,JJJ)=ADDV(NADVI+3,NCELC)
      ARGST(4,JJJ)=ADDV(NADVI+4,NCELC)
      ARGST(5,JJJ)=ADDV(NADVI+5,NCELC)
      ARGST(0,JJJ)=ADDV(NADVI+6,NCELC)
      ARGST(6,JJJ)=ADDV(NADVI+7,NCELC)
C
      RETURN

C     Following lines for reinitialisation of eirene (DMH)

      ENTRY SIGHA_REINIT
      ISTOLD = -1
      ITROLD = -1
      RETURN
      END
C ===== SOURCE: sigrad.f
C  28.6.05:  Zexp2=1. for ARGST, in transparent cells with infinit mfp.
c  10.4.06:  use ipht rather than iphot, in order not to spoil ISPZ for
c            chctrc output.
C
      SUBROUTINE SIGRAD(IFIRST,JJJ,ZDS,PEN,PSIG,TIMAX,ARGST)
C
C  INPUT:
C          IFIRST: FLAG FOR INITIALISATION
C          NCELL:  INDEX IN TALLY ARRAYS FOR CURRENT ZONE
C          JJJ:    INDEX OF SEGMENT ALONG CHORD
C          ZDS:    LENGTH OF SEGMENT NO. JJJ
C          PEN:    ENERGY (EV) AT WHICH CX FLUXES ARE TO BE EVALUATED
C  OUTPUT: CONTRIB. FROM CELL NCELL AND CHORD SEGMENT JJJ TO:
C          THE RAD. FLUX PSIG(IATM),IATM=0,NATMI OF ENERGY PEN (EV)
C          THE INTEGRANT ARGST SUCH THAT INTEGR.(ARGST*DL) = PSIG
C
      USE PRECISION
      USE PARMMOD
      USE COMUSR
      USE CESTIM
      USE CADGEO
      USE CCONA
      USE CLOGAU
      USE CUPD
      USE COMSIG
      USE CGRID
      USE CZT1
      USE CTRCEI
      USE CGEOM
      USE COMPRT
      USE CLGIN
      USE COMXS
      USE CSPEI
      USE PHOTON

      IMPLICIT NONE

      INTEGER, INTENT(IN) :: IFIRST, JJJ
      REAL(DP), INTENT(IN) :: ZDS, PEN
      REAL(DP), INTENT(IN OUT) :: PSIG(0:NSPZ+10), TIMAX
      REAL(DP), INTENT(IN OUT) :: ARGST(0:NSPZ+10,NRAD)
      REAL(DP), ALLOCATABLE, SAVE :: ZARG2(:), ZARG3(:)
      REAL(DP) :: ZLAMB(0:NPHOT),EM_RATE(0:NPHOT),
     .            SIGTTT(0:NPHOT), CFLAG(7,3)
      REAL(DP) :: ELAB, CXS, CXRATE, CROSS, PVELQ0, ZNI, HEB, VREL, 
     .          VRELQ, ZEXP2, ATTENU, ZEXP3, SIGADD, ARGU, ZEXP1, 
     .          ZMAX, VXS, VYS, VZS, ZTII, ZARG1, ZTI32, FPATHPH, ZTI,
     .          TTARG, FAC, RES
      INTEGER :: IREAC, NCELC, ICELL, IIPL, IPLSTI, KK,ICOUNT,IPHT,ISAVE
c
c
      DATA ZMAX/40./

      IF (IFIRST.EQ.0) THEN
        ALLOCATE (ZARG2(0:NPHOT))
        ALLOCATE (ZARG3(0:NPHOT))
        DO 100 IPHT=0,NPHOTI
          ZARG2(IPHT)=0.
          ZARG3(IPHT)=0.
          PSIG(IPHT)=0.
          DO 101 ICELL=1,NSBOX
            ARGST(IPHT,ICELL)=0.
101       CONTINUE
100     CONTINUE
      ELSEIF (IFIRST.EQ.1) THEN
C
C
        NCELC=NCLTAL(NCELL)

C
C  RADIATION EMISSION FREQUENCY (1/SEC)
C  MONOENERGETIC BEAM, ENERGY PEN (EV), SPEED UNIT VECTOR:
C  -(VELX,VELY,VELZ) AND SPECIES IPHT=1,NPHOTI
C
C
C  ZNI=PROBABLILITY FOR EMISSION WITH E=PEN: 
C                                            
        E0=PEN
        EM_RATE=0._DP
        ZLAMB=1.E10_DP
        DO 300 ICOUNT=1,NCTSIG
C  kk: reaction card for emission of photons (i.e., with processtyp =6)
          KK   = INTADD(1,ICOUNT)
          IIPL = INTADD(2,ICOUNT)
          IPHT= INTADD(3,ICOUNT)
          CALL PH_GETCOEFF(KK,IPHT,0,NCELL,IIPL,FAC,RES)
          ZNI=FAC
C  EMISSION RATE IN PHOTONS/S/CM**3/EV
          EM_RATE(IPHT)=EM_RATE(IPHT)+RECADD(ICOUNT,NCELL)*ZNI
C  MEAN FREE PATH LENGTH FOR ATTENUATION FACTOR
C  MONOENERGETIC PHOTON BEAM, VELOCITY VEL=CLIGHT (CM/SEC), SPECIES IPHT
C  WITH SPEED UNIT VECTOR (-VELX,-VELY,-VELZ)
          VEL=CLIGHT
          VXS=VELX
          VYS=VELY
          VZS=VELZ
          VELX=-VELX
          VELY=-VELY
          VELZ=-VELZ
          E0=PEN
C  FPATHPH EXPECTS SPECIES INDEX IPHOT IN COMPRT.F
          ISAVE=IPHOT
          IPHOT=IPHT
          ZLAMB(IPHT)=FPATHPH(NCELL,CFLAG,1,1)
          IPHOT=ISAVE
          VELX=VXS
          VELY=VYS
          VELZ=VZS
300     CONTINUE
C
C  ATTENUATION FACTOR:
C  FOR ALL PHOTONS WITH SPECIES INDEX IPHT
        DO 400 IPHT=1,NPHOTI
          ATTENU=1._DP
          ZARG3(IPHT)=ZARG3(IPHT)+ZARG2(IPHT)
C  IS THERE A FINITE MFP FOR THIS PHOTON?
          IF (ZLAMB(IPHT).LT.1.E10_DP) THEN
            ZARG2(IPHT)=ZDS/ZLAMB(IPHT)
            ZEXP2=0._DP
            IF (ZARG2(IPHT).LT.ZMAX) ZEXP2=EXP(-ZARG2(IPHT))
            ZEXP3=0.0
            IF (ZARG3(IPHT).LT.ZMAX) ZEXP3=EXP(-ZARG3(IPHT))
            ATTENU=ZLAMB(IPHT)*ZEXP3*(1._DP-ZEXP2)
          ELSE
C  NO ABSORPTION IN THIS CELL, ZLAMB= INFTY.
            ZARG2(IPHT)=0._DP
            ZEXP2=1.0       ! ZEXP2=EXP(-ZARG2(IPHT))
            ZEXP3=0.0
            IF (ZARG3(IPHT).LT.ZMAX) ZEXP3=EXP(-ZARG3(IPHT))
            ATTENU=ZDS*ZEXP3
          ENDIF
C
C  SOURCE-TERM FOR PHOTONS IPHT
C
C  1.) WEGEN STREUUNG VON PHOTONEN DER SPECIES IPHT 
C  2.) DIREKT  VON PRIMAERER QUELLE (Z.B.RECADD: SPONT. EMISSION)
C  3.) DIREKT  VON SEKUNDAERER QUELLE (Z.B. DURCH WANDREKOMBINATION
C                                           HIERHER GESTREUT)
C
          SIGADD=0.
C  CONTRIBUTION 1: TO BE WRITTEN
C         SIGADD= .............
C  CONTRIBUTION 2: TO BE WRITTEN
          SIGADD=EM_RATE(IPHT)
C  CONTRIBUTION 3: TO BE WRITTEN
C         SIGADD= .............
          ARGU=SIGADD
          PSIG(IPHT)=PSIG(IPHT)+ARGU*ATTENU
          ARGST(IPHT,JJJ)=ARGU*ZEXP3*SQRT(ZEXP2)/4./PIA
400     CONTINUE
C
      ELSEIF (IFIRST.EQ.2) THEN
        DEALLOCATE (ZARG2)
        DEALLOCATE (ZARG3)
      ENDIF
      RETURN
      END
C ===== SOURCE: sigtst.f
C
C
      SUBROUTINE SIGTST(IFIRST,JJJ,ZDS,DUMMY1,PSIG,DUMMY2,ARGST)
C
C  ONLY FOR TESTING LINE INTEGRAL ROUTINES
C  INPUT:
C          IFIRST: FLAG FOR INITIALISATION
C          JJJ:    INDEX OF SEGMENT ALONG CHORD
C          ZDS:    LENGTH OF SEGMENT NO. JJJ
C
      USE PRECISION
      USE PARMMOD
      USE COMPRT
      IMPLICIT NONE
      INTEGER, INTENT(IN) :: IFIRST, JJJ
      REAL(DP), INTENT(IN) :: ZDS, DUMMY1, DUMMY2
      REAL(DP), INTENT(OUT) :: PSIG(0:NSPZ+10), ARGST(0:NSPZ+10,NRAD)
      INTEGER :: ISP, ICELL
      SAVE
C
      DO 100 ISP=0,NSPZ+10
        PSIG(ISP)=0.
        DO 100 ICELL=1,NRAD
          ARGST(ISP,ICELL)=0.
100   CONTINUE
C
      WRITE (iunout,*) 'FROM SIGTST ',
     .                 JJJ,ZDS,NRCELL,NPCELL,NTCELL,NACELL
      RETURN
      END
C ===== SOURCE: slope.f
C
C
C*DK SLOPE
      FUNCTION SLOPE(KN,JCH,NN,EN,BU,N,M)
C
C     CALCULATE SLOPE OF STRAIGHT LINE
C
      USE PRECISION
      IMPLICIT NONE
      INTEGER, INTENT(IN) :: KN, JCH, NN, N, M
      REAL(DP), INTENT(IN) :: EN(M), BU(N,M)
      REAL(DP) :: ZSUM1, ZSUM2, ZSUM3, ZSUM4, ZX, ZY, FKN, SLOPE
      INTEGER :: J
C
      ZSUM1=0.0
      ZSUM2=0.0
      ZSUM3=0.0
      ZSUM4=0.0
C
      FKN=KN
      DO 101 J=1,KN
        ZX=EN(NN+J-1)
        ZY=BU(JCH,NN+J-1)
C
        ZSUM1=ZSUM1+ZX*ZY
        ZSUM2=ZSUM2+ZX
        ZSUM3=ZSUM3+ZY
        ZSUM4=ZSUM4+ZX*ZX
101   CONTINUE
C
      SLOPE=(FKN*ZSUM1-ZSUM2*ZSUM3)/(FKN*ZSUM4-ZSUM2*ZSUM2)
C
      RETURN
      END
