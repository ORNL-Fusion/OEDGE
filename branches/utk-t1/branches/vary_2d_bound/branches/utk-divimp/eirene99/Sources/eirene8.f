      SUBROUTINE OUTPLA
C
C  PRINT INPUT TALLIES ONTO OUTPUT FILE IUNOUT=6
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      INCLUDE 'PARMMOD'
      INCLUDE 'CSPEZ'
      INCLUDE 'CSPEI'
      INCLUDE 'CGEOM'
      INCLUDE 'CTRCEI'
      INCLUDE 'CTEXT'
      INCLUDE 'CGRID'
      INCLUDE 'COMUSR'
      INCLUDE 'CLOGAU'
      INCLUDE 'CCONA'
      INCLUDE 'COUTAU'
      DIMENSION PLPRM(NPLPRM)
      DIMENSION HELPP(NRAD),HELPW(NRAD)
      EQUIVALENCE (PLPRM(1),TEIN(1))
      DIMENSION TALTYP(NTALI)
C
C  TYPE OF TALLY: TALTYP=0: #              (#-UNITS)
C                 TALTYP=1: #-DENSITY      (#-UNITS/CM**3)
C                 TALTYP=2: VOLUME         (CM**3)
C                 TALTYP=3: DIMENSIONLESS  (1)
C                 TALTYP=4: UNKNOWN        (?)
      TALTYP(1)=0
      TALTYP(2)=0
      TALTYP(3)=1
      TALTYP(4)=1
      TALTYP(5)=0
      TALTYP(6)=0
      TALTYP(7)=0
      TALTYP(8)=3
      TALTYP(9)=3
      TALTYP(10)=3
      TALTYP(11)=4
      TALTYP(12)=0
      TALTYP(13)=2
      TALTYP(14)=3
C
C  PRINT INPUT VOLUME AVERAGED TALLIES, WHICH HAVE BEEN SELECTED
      NXM=MAX(1,NR1STM)
      NYM=MAX(1,NP2NDM)
      NZM=MAX(1,NT3RDM)
      DO 100 IPRV=1,NVOLPR
        ITAL=NPRTLV(IPRV)
        IF (ITAL.LT.0) THEN
          ITALI=-ITAL
          NF=NFRSTP(ITALI)
          NFTI=1
          NFTE=NFSTPI(ITALI)
          IF (NSPEZV(IPRV,1).GT.0) THEN
            NFTI=NSPEZV(IPRV,1)
            NFTE=NSPEZV(IPRV,2)
          ENDIF
          DO 119 K=NFTI,NFTE
            IF (K.GT.NFSTPI(ITALI)) THEN
              CALL LEER(1)
              WRITE (6,*) 'SPECIES INDEX OUT OF RANGE IN SUBR. OUTPLA'
              WRITE (6,*) 'ITALI, K, ',ITALI,K
              CALL LEER(1)
              GOTO 119
            ENDIF
            DO 110 I=1,NSBOX
              IINDEX=NADDP(ITALI)*NRAD+(I-1)*NF+K
              HELPP(I)=PLPRM(IINDEX)
110         CONTINUE
C
            TOTAL=0.D0
            DO 121 IB=1,NBMLT
            NBLCKA=NSTRD*(IB-1)
            DO 121 IR=1,NXM
            DO 121 IP=1,NYM
            DO 121 IT=1,NZM
              I=IR + ((IP-1)+(IT-1)*NP2T3)*NR1P2 + NBLCKA
              IF (ITALI.EQ.1) THEN
C  ELECTR. TEMPERATURE: NE*VOLUME WEIGHTED AVERAGES
                HELPW(I)=DEIN(I)*VOL(I)
              ELSEIF (ITALI.EQ.2) THEN
C  ION TEMPERTURE: NI(K)*VOLUME WEIGHTED AVERAGES
                HELPW(I)=DIIN(K,I)*VOL(I)
              ELSEIF (ITALI.EQ.3.OR.ITALI.EQ.4) THEN
C  PARTICLE DENSITY PROFILES: VOLUME WEIGHTED AVERAGES
                HELPW(I)=VOL(I)
              ELSEIF (ITALI.EQ.5.OR.ITALI.EQ.6.OR.ITALI.EQ.7) THEN
C  ION DRIFT VELOCITY: NI(K)*VOLUME WEIGHTED AVERAGES
                HELPW(I)=DIIN(K,I)*VOL(I)
              ELSEIF (ITALI.EQ.8.OR.ITALI.EQ.9.OR.ITALI.EQ.10) THEN
C  B-FIELD UNIT VECTOR   " 1 - WEIGHTED" AVERAGES
                HELPW(I)=1.D0
              ELSEIF (ITALI.GT.10) THEN
C  ADDITIONAL TALLY, CELL VOLUME ,WEIGHT FUNCTION " 1 - WEIGHTED" AVERAGES
                HELPW(I)=1.D0
              ENDIF
              TOTAL=TOTAL+HELPW(I)
121         CONTINUE
C
C  SAME LOOP AGAIN, OVER ADDITIONAL CELL REGION
            DO 122 I=NSURF+1,NSURF+NRADD
              IF (ITALI.EQ.1) THEN
C  ELECTR. TEMPERATURE: NE*VOLUME WEIGHTED AVERAGES
                HELPW(I)=DEIN(I)*VOL(I)
              ELSEIF (ITALI.EQ.2) THEN
C  ION TEMPERTURE: NI(K)*VOLUME WEIGHTED AVERAGES
                HELPW(I)=DIIN(K,I)*VOL(I)
              ELSEIF (ITALI.EQ.3.OR.ITALI.EQ.4) THEN
C  PARTICLE DENSITY PROFILES: VOLUME WEIGHTED AVERAGES
                HELPW(I)=VOL(I)
              ELSEIF (ITALI.EQ.5.OR.ITALI.EQ.6.OR.ITALI.EQ.7) THEN
C  ION DRIFT VELOCITY: NI(K)*VOLUME WEIGHTED AVERAGES
                HELPW(I)=DIIN(K,I)*VOL(I)
              ELSEIF (ITALI.EQ.8.OR.ITALI.EQ.9.OR.ITALI.EQ.10) THEN
C  B-FIELD UNIT VECTOR   " 1 - WEIGHTED" AVERAGES
                HELPW(I)=1.D0
              ELSEIF (ITALI.EQ.11.OR.ITALI.EQ.13.OR.ITALI.EQ.14) THEN
C  ADDITIONAL TALLY, CELL VOLUME ,WEIGHT FUNCTION " 1 - WEIGHTED" AVERAGES
                HELPW(I)=1.D0
              ELSEIF (ITALI.EQ.12) THEN
C  ION DRIFT ENERGY
                HELPW(I)=DIIN(K,I)*VOL(I)
              ENDIF
              TOTAL=TOTAL+HELPW(I)
122         CONTINUE
            IF (ITALI.NE.13) THEN
              CALL INTTAL (HELPP,HELPW,1,1,NSBOX,HELPI,
     .                     NR1ST,NP2ND,NT3RD,NBMLT)
            ELSEIF (ITALI.EQ.13) THEN
              CALL INTVOL (HELPP,      1,1,NSBOX,HELPI,
     .                     NR1ST,NP2ND,NT3RD,NBMLT)
            ENDIF
            TALTOT=HELPI
            TALAV=HELPI/(TOTAL+EPS60)
C
            IF (TALTOT.EQ.0.D0) GOTO 118
C
            IF (ITALI.NE.13) THEN
              CALL PRTTAL(TXTPLS(K,ITALI),TXTPSP(K,ITALI),
     .                    TXTPUN(K,ITALI),
     .                    HELPP,NR1ST,NP2ND,NT3RD,NBMLT,NSBOX,
     .                    NFLAGV(IPRV))
            ELSEIF (ITALI.EQ.13) THEN
              CALL PRTVOL(TXTPLS(K,ITALI),TXTPSP(K,ITALI),
     .                    TXTPUN(K,ITALI),
     .                    HELPP,NR1ST,NP2ND,NT3RD,NBMLT,NSBOX,
     .                    NFLAGV(IPRV))
            ENDIF
            CALL LEER(2)
            IF (TALTYP(ITALI).EQ.0) THEN
              CALL MASAGE
     .        ('WEIGHTED MEAN VALUE ("UNITS")               ')
              CALL MASR1 ('MEAN:   ',TALAV)
              CALL LEER(3)
            ELSEIF (TALTYP(ITALI).EQ.1) THEN
              CALL MASAGE
     .        ('WEIGHTED TOTAL ("UNITS*CM**3"), MEAN ("UNITS")')
              CALL MASR2 ('TOTAL, MEAN:    ',TALTOT,TALAV)
              CALL LEER(3)
            ELSEIF (TALTYP(ITALI).EQ.2) THEN
              CALL MASAGE
     .        ('ARITHMETIC TOTAL ("UNITS")                         ')
              CALL MASR1 ('TOTAL:  ',TALTOT)
              CALL LEER(3)
            ELSEIF (TALTYP(ITALI).EQ.3) THEN
              CALL MASAGE
     .        ('ARITHMETIC MEAN ("UNITS")                          ')
              CALL MASR1 ('MEAN:   ',TALAV)
              CALL LEER(3)
            ELSEIF (TALTYP(ITALI).EQ.4) THEN
              CALL MASAGE
     .        ('ARITHMETIC TOTAL ("UNITS"), MEAN ("UNITS")')
              CALL MASR2 ('TOTAL, MEAN:    ',TALTOT,TALAV)
              CALL LEER(3)
            ENDIF
            GOTO 119
C
118         CONTINUE
            CALL PRTTAL(TXTPLS(K,ITALI),TXTPSP(K,ITALI),TXTPUN(K,ITALI),
     .                  HELPP,NR1ST,NP2ND,NT3RD,NBMLT,NSBOX,-1)
            CALL MASAGE('IDENTICAL ZERO, NOT PRINTED                  ')
            CALL LEER(2)
119       CONTINUE
        ENDIF
100   CONTINUE
      CALL LEER(2)
C
      RETURN
      END
C
      SUBROUTINE OUTEIR(INDOUT)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      INCLUDE 'PARMMOD'
      INCLUDE 'COMSOU'
      INCLUDE 'CADGEO'
      INCLUDE 'CSPEZ'
      INCLUDE 'CSPEI'
      INCLUDE 'CSDVI'
      INCLUDE 'CSDVI_BGK'
      INCLUDE 'CSDVI_COP'
      INCLUDE 'CGEOM'
      INCLUDE 'CTRCEI'
      INCLUDE 'CESTIM'
      INCLUDE 'CTEXT'
      INCLUDE 'COUTAU'
      INCLUDE 'CGRID'
      INCLUDE 'COMPRT'
      INCLUDE 'COMUSR'
      INCLUDE 'CLOGAU'
      INCLUDE 'CCONA'
      INCLUDE 'COMNNL'
C
      CHARACTER*72 TXTTL
      CHARACTER*24 TXTSP,TXTUN
      CHARACTER*6 CISTRA
C
      DIMENSION ESTIM(NESTIM),OUTAU(NOUTAU),SDVI(NSDVI),
     .          SDVI_BGK(NSBGK),SDVI_COP(NSCOP)
      DIMENSION VECTOR(NRAD)
      DIMENSION TOTA(0:NATM),DIFA(0:NATM,0:NSTRA),DIFRA(0:NATM,0:NSTRA)
      DIMENSION TOTM(0:NMOL),DIFM(0:NMOL,0:NSTRA),DIFRM(0:NMOL,0:NSTRA)
      DIMENSION TOTI(0:NION),DIFI(0:NION,0:NSTRA),DIFRI(0:NION,0:NSTRA)
      LOGICAL LCOVN(NCV)
C
C
      EQUIVALENCE
     .  (RWK(NID3P),VECTOR(1))
      EQUIVALENCE
     .  (ESTIM(1),PDENA(1,1)),
     .  (SDVI(1),SIGMA(1,1)),
     .  (SDVI_BGK(1),SIGMA_BGK(1,1)),
     .  (SDVI_COP(1),SIGMA_COP(1,1)),
     .  (OUTAU(1),PDENAI(0,0))
c slmod begin - not tr
      COMMON /TRASHCOM/ NLOST
      INTEGER           NLOST
c slmod end
C
C ISTRA IS THE STRATUM NUMBER. ISTRA=0 STANDS FOR: SUM OVER STRATA
      ISTRA=INDOUT
C
C MAKE SURE TO PRINT COVARIANCE TALLIES ONLY ONCE
      DO N=1,NSIGCI
        LCOVN(N)=.FALSE.
      ENDDO
C
      IF (XMCP(ISTRA).LT.1.) GOTO 1000
C
C
      IF (ISTRA.EQ.IESTR) THEN
C  NOTHING TO BE DONE
      ELSEIF (NFILEN.EQ.1.OR.NFILEN.EQ.2) THEN
        IESTR=ISTRA
        CALL RSTRT(ISTRA,NSTRAI,NESTIM,NSDVI,ESTIM,SDVI,
     .             NSBGK,SDVI_BGK,NSCOP,SDVI_COP,TRCFLE)
        IF (NLSYMP(ISTRA).OR.NLSYMT(ISTRA)) THEN
          CALL SYMET(ESTIM,NTALV,NRAD,NR1ST,NP2ND,NT3RD,
     .               NADDV,NFIRST,NLSYMP(ISTRA),NLSYMT(ISTRA))
        ENDIF
      ELSEIF ((NFILEN.EQ.6.OR.NFILEN.EQ.7).AND.ISTRA.EQ.0) THEN
        IESTR=ISTRA
        CALL RSTRT(ISTRA,NSTRAI,NESTIM,NSDVI,ESTIM,SDVI,
     .             NSBGK,SDVI_BGK,NSCOP,SDVI_COP,TRCFLE)
        IF (NLSYMP(ISTRA).OR.NLSYMT(ISTRA)) THEN
          CALL SYMET(ESTIM,NTALV,NRAD,NR1ST,NP2ND,NT3RD,
     .               NADDV,NFIRST,NLSYMP(ISTRA),NLSYMT(ISTRA))
        ENDIF
      ELSE
        WRITE (6,*) 'ERROR IN OUTEIR: DATA FOR STRATUM ISTRA= ',ISTRA
        WRITE (6,*) 'ARE NOT AVAILABLE. PRINTOUT ABANDONNED'
        RETURN
      ENDIF
C
C
      CALL PAGE
      IF (ISTRA.NE.0) THEN
        CALL FTCRI(ISTRA,CISTRA)
        CALL MASBOX ('THIS IS STRATUM NUMBER ISTRA='//CISTRA)
        WRITE (6,*) TXTSOU(ISTRA)
        CALL LEER(1)
        CALL MASAGE ('TYPE OF PRIMARY SOURCE:                      ')
        CALL MASL4('NLPNT,NLLNE,NLSRF,NLVOL         ',
     .              NLPNT(ISTRA),NLLNE(ISTRA),NLSRF(ISTRA),NLVOL(ISTRA))
        CALL MASL4('NLATM,NLMOL,NLION,NLPLS         ',
     .              NLATM(ISTRA),NLMOL(ISTRA),NLION(ISTRA),NLPLS(ISTRA))
        CALL MASAGE ('SPECIES INDEX OF SOURCE PARTICLES             ')
        CALL MASJ1 ('NSPEZ=  ',NSPEZ(ISTRA))
      ELSE
        CALL MASBOX ('THIS IS THE SUM OVER THE STRATA')
        CALL LEER(1)
      ENDIF
      CALL MASAGE ('NUMBER OF MONTE-CARLO HISTORIES               ')
      CALL MASR1('NHIST=  ',XMCP(ISTRA))
      CALL LEER(3)
C
C  PRINT THOSE VOLUME AVERAGED TALLIES, WHICH HAVE BEEN SELECTED
C  AND WHICH ARE DIFFERENT FROM ZERO
      IALG=0
      DO 100 IPRV=1,NVOLPR
        ITAL=NPRTLV(IPRV)
        IF (ITAL.GT.0.AND.ITAL.NE.NTALR) THEN
          I0=0
          IF (NFRSTI(ITAL).GT.1) I0=1
          NFTI=1
          NFTE=NFSTVI(ITAL)
          IF (NSPEZV(IPRV,1).GT.0) THEN
            NFTI=NSPEZV(IPRV,1)
            NFTE=NSPEZV(IPRV,2)
          ENDIF
          NF=NFIRST(ITAL)
          DO 119 K=NFTI,NFTE
            IF (K.GT.NFSTVI(ITAL)) GOTO 106
            INDEXI=NADDI(ITAL)*NSTRAP+NFRSTI(ITAL)*ISTRA+I0+K
            IF (OUTAU(INDEXI).EQ.0.D0) GOTO 118
C
            DO 110 I=1,NSBOX
              IINDEX=NADDV(ITAL)*NRAD+(I-1)*NF+K
              VECTOR(I)=ESTIM(IINDEX)
110         CONTINUE
            TALTOT=OUTAU(INDEXI)
            TALAV=TALTOT/VOLTOT
C
            CALL PRTTAL(TXTTAL(K,ITAL),TXTSPC(K,ITAL),TXTUNT(K,ITAL),
     .                  VECTOR,NR1ST,NP2ND,NT3RD,NBMLT,NSBOX,
     .                  NFLAGV(IPRV))
            CALL LEER(2)
            CALL MASAGE
     .      ('TOTAL ("UNITS*CM**3), AND MEAN VALUE ("UNITS") ')
            CALL MASR2 ('TOTAL, MEAN:    ',TALTOT,TALAV)
            CALL LEER(3)
C
C  CHECK IF STANDARD DEVIATION IS AVAILABLE FOR THIS TALLY
            DO 101 N=1,NSIGVI
              IF (IIH(N).NE.ITAL) GOTO 101
              IF (IGH(N).NE.K.AND.IGH(N).NE.0) GOTO 101
              GOTO 111
101         CONTINUE
            GOTO 106
111         CONTINUE
            DO 112 I=1,NSBOX
              VECTOR(I)=SIGMA(N,I)
112         CONTINUE
            SMEAN=SGMS(N)
C
            CALL MASAGE
     .      ('RELATIVE STANDARD DEVIATION                   ')
            IF (IGH(N).GT.0) TXTSP=TXTSPC(K,ITAL)
            IF (IGH(N).EQ.0) TXTSP='TOTAL                   '
            CALL PRTTAL(TXTTAL(K,ITAL),TXTSP,'%                       ',
     .                  VECTOR,NR1ST,NP2ND,NT3RD,NBMLT,NSBOX,
     .                  NFLAGV(IPRV))
            CALL LEER(2)
            CALL MASAGE
     .      ('STANDARD DEVIATION OF MEAN VALUE (%)          ')
            CALL MASR1 ('MEAN    ',SMEAN)
            CALL LEER(3)
C
106         CONTINUE
            IF (ITAL.EQ.NTALB.AND.NSIGI_BGK.GT.0) THEN
              IF (K.GT.NBGVI_STAT) GOTO 119
              DO I=1,NSBOX
                VECTOR(I)=SIGMA_BGK(K,I)
              ENDDO
              SMEAN=SGMS_BGK(K)
C
              CALL MASAGE
     .        ('RELATIVE STANDARD DEVIATION (BGK)              ')
              TXTSP=TXTSPC(K,ITAL)
              CALL PRTTAL(TXTTAL(K,ITAL),TXTSP,'%                     ',
     .                    VECTOR,NR1ST,NP2ND,NT3RD,NBMLT,NSBOX,
     .                    NFLAGV(IPRV))
              CALL LEER(2)
              CALL MASAGE
     .        ('STANDARD DEVIATION OF MEAN VALUE (%)          ')
              CALL MASR1 ('MEAN    ',SMEAN)
              CALL LEER(3)
              GOTO 119
            ENDIF
C
            IF (ITAL.EQ.NTALM.AND.NSIGI_COP.GT.0) THEN
              IF (K.GT.NCPVI_STAT) GOTO 119
              DO I=1,NSBOX
                VECTOR(I)=SIGMA_COP(K,I)
              ENDDO
              SMEAN=SGMS_COP(K)
C
              CALL MASAGE
     .        ('RELATIVE STANDARD DEVIATION (COPV)             ')
              TXTSP=TXTSPC(K,ITAL)
              CALL PRTTAL(TXTTAL(K,ITAL),TXTSP,'%                     ',
     .                    VECTOR,NR1ST,NP2ND,NT3RD,NBMLT,NSBOX,
     .                    NFLAGV(IPRV))
              CALL LEER(2)
              CALL MASAGE
     .        ('STANDARD DEVIATION OF MEAN VALUE (%)          ')
              CALL MASR1 ('MEAN    ',SMEAN)
              CALL LEER(3)
              GOTO 119
            ENDIF
C
C  CHECK IF COVARIANCE IS AVAILABLE
            DO 103 N=1,NSIGCI
              IF (LCOVN(N)) GOTO 103
              IF  (IIHC(1,N).NE.ITAL.AND.IIHC(2,N).NE.ITAL) GOTO 103
              IF  (IGHC(1,N).NE.K.AND.IGHC(1,N).NE.0.AND.
     .             IGHC(2,N).NE.K.AND.IGHC(2,N).NE.0) GOTO 103
              LCOVN(N)=.TRUE.
              GOTO 113
103         CONTINUE
            GOTO 119
113         CONTINUE
C
            DO 114 I=1,NSBOX
              VECTOR(I)=SIGMAC(0,N,I)
114         CONTINUE
            SMEAN=SGMCS(0,N)
C
            CALL MASAGE
     .      ('COVARIANCE                                    ')
            IF (IGHC(1,N).GT.0) TXTSP=TXTSPC(IGHC(1,N),IIHC(1,N))
            IF (IGHC(1,N).EQ.0) TXTSP='TOTAL                   '
            WRITE (6,*) 'BETWEEN ESTIMATOR: '
            ISPZ=MAX(1,IGHC(1,N))
            CALL PRTTAL(TXTTAL(ISPZ,IIHC(1,N)),TXTSP,
     .                  TXTUNT(ISPZ,IIHC(1,N)),
     .                  VECTOR,NR1ST,NP2ND,NT3RD,NBMLT,NSBOX,-1)
            WRITE (6,*) 'AND ESTIMATOR: '
            ISPZ=MAX(1,IGHC(2,N))
            CALL PRTTAL(TXTTAL(ISPZ,IIHC(2,N)),TXTSP,
     .                  TXTUNT(ISPZ,IIHC(2,N)),
     .                  VECTOR,NR1ST,NP2ND,NT3RD,NBMLT,NSBOX,
     .                  NFLAGV(IPRV))
            CALL LEER(2)
            CALL MASAGE
     .      ('COVARIANCE OF MEAN VALUES                      ')
            CALL MASR1 ('MEAN    ',SMEAN)
            CALL LEER(3)
C
            DO 115 I=1,NSBOX
              VECTOR(I)=SIGMAC(1,N,I)
115         CONTINUE
            SMEAN=SGMCS(1,N)
C
            CALL MASAGE
     .      ('STANDARD DEVIATION FOR 1ST TALLY               ')
            IF (IGHC(1,N).GT.0) TXTSP=TXTSPC(IGHC(1,N),IIHC(1,N))
            IF (IGHC(1,N).EQ.0) TXTSP='TOTAL                   '
            ISPZ=MAX(1,IGHC(1,N))
            CALL PRTTAL(TXTTAL(ISPZ,IIHC(1,N)),TXTSP,
     .                  TXTUNT(ISPZ,IIHC(1,N)),
     .                  VECTOR,NR1ST,NP2ND,NT3RD,NBMLT,NSBOX,
     .                  NFLAGV(IPRV))
            CALL LEER(2)
            CALL MASAGE
     .      ('STANDARD DEVIATION OF MEAN VALUE              ')
            CALL MASR1 ('MEAN    ',SMEAN)
            CALL LEER(3)
C
            DO 116 I=1,NSBOX
              VECTOR(I)=SIGMAC(2,N,I)
116         CONTINUE
            SMEAN=SGMCS(2,N)
C
            CALL MASAGE
     .      ('STANDARD DEVIATION FOR 2ND TALLY              ')
            IF (IGHC(2,N).GT.0) TXTSP=TXTSPC(IGHC(2,N),IIHC(2,N))
            IF (IGHC(2,N).EQ.0) TXTSP='TOTAL                   '
            ISPZ=MAX(1,IGHC(2,N))
            CALL PRTTAL(TXTTAL(ISPZ,IIHC(2,N)),TXTSP,
     .                  TXTUNT(ISPZ,IIHC(2,N)),
     .                  VECTOR,NR1ST,NP2ND,NT3RD,NBMLT,NSBOX,
     .                  NFLAGV(IPRV))
            CALL LEER(2)
            CALL MASAGE
     .      ('STANDARD DEVIATION OF MEAN VALUE              ')
            CALL MASR1 ('MEAN    ',SMEAN)
            CALL LEER(3)
            GOTO 119
C
118         CONTINUE
            CALL PRTTAL(TXTTAL(K,ITAL),TXTSPC(K,ITAL),TXTUNT(K,ITAL),
     .                  VECTOR,NR1ST,NP2ND,NT3RD,NBMLT,NSBOX,-1)
            CALL MASAGE('IDENTICAL ZERO, NOT PRINTED                  ')
            CALL LEER(2)
119       CONTINUE
C
C  USER SUPPLIED POST PROCESSED TALLY, ITAL=0
C
        ELSEIF (ITAL.EQ.0) THEN
C   CALL TO TALUSR: A POST PROCESSED USER SUPPLIED TALLY
          ICOUNT=1
120       CALL TALUSR(ICOUNT,VECTOR,TALTOT,TALAV,
     .                TXTTL,TXTSP,TXTUN,ILAST,*121)
          WRITE (6,*) 'USER SUPPLIED POST PROCESSED TALLY NO. ',
     .                ICOUNT
          CALL PRTTAL(TXTTL,TXTSP,TXTUN,
     .                VECTOR,NR1ST,NP2ND,NT3RD,NBMLT,NSBOX,NFLAGV(IPRV))
          CALL LEER(2)
          CALL MASAGE
     .       ('TOTAL ("UNITS*CM**3), AND MEAN VALUE ("UNITS") ')
              CALL MASR2 ('TOTAL, MEAN:    ',TALTOT,TALAV)
          CALL LEER(3)
121       ICOUNT=ICOUNT+1
          IF (ICOUNT.LE.ILAST) GOTO 120
C
C  ALGEBRAIC TALLY, ITAL=NTALR
C
        ELSEIF (ITAL.EQ.NTALR) THEN
C
C   REDO ALGEBRAIC EXPRESSION IN TALLIES, IN CASE NFILEN=2
          IF ((NFILEN.EQ.2..OR.NFILEN.EQ.7).AND.IALG.EQ.0) THEN
            IALG=1
            CALL ALGTAL
C
            DO 130 IALV=1,NALVI
              CALL INTTAL (ALGV,VOL,IALV,NALV,NSBOX,ALGVI(IALV,ISTRA),
     .                     NR1ST,NP2ND,NT3RD,NBMLT)
130         CONTINUE
C
            DO 132 IALS=1,NALSI
              ALGSI(IALS,ISTRA)=0.
              DO 131 J=1,NLIMPS
                ALGSI(IALS,ISTRA)=ALGSI(IALS,ISTRA)+ALGS(IALS,J)
131           CONTINUE
132         CONTINUE
          ENDIF
C
          I0=0
          IF (NFRSTI(ITAL).GT.1) I0=1
          NFTI=1
          NFTE=NFSTVI(ITAL)
          IF (NSPEZV(IPRV,1).GT.0) THEN
            NFTI=NSPEZV(IPRV,1)
            NFTE=NSPEZV(IPRV,2)
          ENDIF
          NF=NFIRST(ITAL)
          DO 159 K=NFTI,NFTE
            INDEXI=NADDI(ITAL)*NSTRAP+NFRSTI(ITAL)*ISTRA+I0+K
            IF (OUTAU(INDEXI).EQ.0.D0) GOTO 158
C
            DO 155 I=1,NSBOX
              IINDEX=NADDV(ITAL)*NRAD+(I-1)*NF+K
              VECTOR(I)=ESTIM(IINDEX)
155         CONTINUE
            TALTOT=OUTAU(INDEXI)
            TALAV=TALTOT/VOLTOT
            CALL PRTTAL(TXTTAL(K,ITAL),TXTSPC(K,ITAL),TXTUNT(K,ITAL),
     .                  VECTOR,NR1ST,NP2ND,NT3RD,NBMLT,NSBOX,
     .                  NFLAGV(IPRV))
            CALL LEER(2)
            CALL MASAGE
     .         ('TOTAL ("UNITS*CM**3), AND MEAN VALUE ("UNITS") ')
                CALL MASR2 ('TOTAL, MEAN:    ',TALTOT,TALAV)
            CALL LEER(3)
            GOTO 159
C
158         CONTINUE
            CALL PRTTAL(TXTTAL(K,ITAL),TXTSPC(K,ITAL),TXTUNT(K,ITAL),
     .                  VECTOR,NR1ST,NP2ND,NT3RD,NBMLT,NSBOX,-1)
            CALL MASAGE('IDENTICAL ZERO, NOT PRINTED                  ')
            CALL LEER(2)
159       CONTINUE
C
        ENDIF
C
100   CONTINUE
C
C   OUTPUT OF VOLUME AVERAGED TALLIES FINISHED
C
      IF (TRCBLA.OR.TRCBLM.OR.TRCBLI.OR.TRCBLP.OR.TRCBLE) THEN
        CALL LEER (3)
        CALL HEADNG('                               ',31)
        CALL HEADNG('= GLOBAL BALANCES (AMP/WATT) =',31)
        CALL LEER (3)
      ENDIF
C
C
C  TEST PARTICLE FLUX BALANCE - AND ENERGY FLUX BALANCE
C
      CALL MASAGE ('TEST PARTICLE INFLUX FROM  SOURCE (AMP)       ')
      CALL MASAGE ('INFLUX/(1.602*10**-19) IS THE FLUX IN PART./SEC')
      CALL MASR1 ('INFLUX= ',FLUXT(ISTRA))
      CALL LEER(2)
C
C  NEUTRAL ATOMS PARTICLE BALANCE
C
      DIFA(0,ISTRA)=0.
      TOTA(0)=0.
      IF (.NOT.TRCBLA) GOTO 410
      IF (.NOT.LOGATM(0,ISTRA)) GOTO 410
      CALL HEADNG('PARTICLE FLUX BALANCE (AMP), NEUTRAL ATOMS',43)
      CALL LEER(1)
C   ATOMS FROM PRIMARY SOURCE
      IF (WTOTA(0,ISTRA).NE.0.D0) THEN
        CALL MASAGE ('ATOMIC INFLUX FROM PRIMARY SOURCE              ')
        CALL MASYR1 ('WTOTA  = ',
     .                WTOTA,LOGATM,ISTRA,0,NATM,0,NSTRA,TEXTS)
        CALL MASAGE ('SUM OVER SPECIES                               ')
        CALL MASR1 ('TOTAL=  ',WTOTA(0,ISTRA))
      ENDIF
C
      IF (PPATI(0,ISTRA).NE.0.D0) THEN
        CALL MASAGE ('ATOMS FROM RECOMBINING BULK IONS               ')
        CALL MASYR1 ('PPATI  = ',
     .                PPATI,LOGATM,ISTRA,0,NATM,0,NSTRA,TEXTS)
        CALL MASAGE ('SUM OVER SPECIES                               ')
        CALL MASR1 ('TOTAL=  ',PPATI(0,ISTRA))
      ENDIF
C
      IF (LOGATM(0,ISTRA)) THEN
        CALL MASAGE ('ATOMS BORN BY ATOM - PLASMA INTERACTIONS       ')
        CALL MASYR1 ('PAATI  = ',
     .                PAATI,LOGATM,ISTRA,0,NATM,0,NSTRA,TEXTS)
        CALL MASAGE ('SUM OVER SPECIES                               ')
        CALL MASR1 ('TOTAL=  ',PAATI(0,ISTRA))
      ENDIF
      IF (LOGMOL(0,ISTRA)) THEN
        CALL MASAGE ('ATOMS BORN BY MOLECULE - PLASMA INTERACTIONS   ')
        CALL MASYR1 ('PMATI  = ',
     .                PMATI,LOGATM,ISTRA,0,NATM,0,NSTRA,TEXTS)
        CALL MASAGE ('SUM OVER SPECIES                               ')
        CALL MASR1 ('TOTAL=  ',PMATI(0,ISTRA))
      ENDIF
      IF (LOGION(0,ISTRA)) THEN
        CALL MASAGE ('ATOMS BORN BY TEST ION - PLASMA INTERACTIONS   ')
        CALL MASYR1 ('PIATI  = ',
     .                PIATI,LOGATM,ISTRA,0,NATM,0,NSTRA,TEXTS)
        CALL MASAGE ('SUM OVER SPECIES                               ')
        CALL MASR1 ('TOTAL=  ',PIATI(0,ISTRA))
      ENDIF
C   GENERATION LIMIT
      IF (PGENAI(0,ISTRA).NE.0.D0) THEN
        CALL MASAGE ('ATOMS ABSORBED DUE TO GENERATION LIMIT         ')
        CALL MASYR1 ('PGENAI = ',
     .                PGENAI,LOGATM,ISTRA,0,NATM,0,NSTRA,TEXTS)
        CALL MASAGE ('SUM OVER SPECIES                               ')
        CALL MASR1 ('TOTAL=  ',PGENAI(0,ISTRA))
      ENDIF
C   ESCAPING FLUX
      CALL MASAGE ('ATOMIC EFFLUX ONTO THE SURFACES                ')
      CALL MASYR1 ('POTATI = ',
     .              POTATI,LOGATM,ISTRA,0,NATM,0,NSTRA,TEXTS)
      CALL MASAGE ('SUM OVER SPECIES                               ')
      CALL MASR1 ('TOTAL=  ',POTATI(0,ISTRA))
C   REFLECTED FLUX
      IF (PRFAAI(0,ISTRA).NE.0.D0) THEN
        CALL MASAGE ('ATOMIC INFLUX FROM SURFACES, ORIG: ATOMS       ')
        CALL MASYR1 ('PRFAAI = ',
     .                PRFAAI,LOGATM,ISTRA,0,NATM,0,NSTRA,TEXTS)
        CALL MASAGE ('SUM OVER SPECIES                               ')
        CALL MASR1 ('TOTAL=  ',PRFAAI(0,ISTRA))
      ENDIF
      IF (PRFMAI(0,ISTRA).NE.0.D0) THEN
        CALL MASAGE ('ATOMIC INFLUX FROM SURFACES, ORIG: MOLECULES   ')
        CALL MASYR1 ('PRFMAI = ',
     .                PRFMAI,LOGATM,ISTRA,0,NATM,0,NSTRA,TEXTS)
        CALL MASAGE ('SUM OVER SPECIES                               ')
        CALL MASR1 ('TOTAL=  ',PRFMAI(0,ISTRA))
      ENDIF
      IF (PRFIAI(0,ISTRA).NE.0.D0) THEN
        CALL MASAGE ('ATOMIC INFLUX FROM SURFACES, ORIG: TEST IONS   ')
        CALL MASYR1 ('PRFIAI = ',
     .                PRFIAI,LOGATM,ISTRA,0,NATM,0,NSTRA,TEXTS)
        CALL MASAGE ('SUM OVER SPECIES                               ')
        CALL MASR1 ('TOTAL=  ',PRFIAI(0,ISTRA))
      ENDIF
      IF (SPTATI(0,ISTRA).NE.0.D0) THEN
        CALL MASAGE ('FLUX SPUTTERED BY ATOMS:                       ')
        CALL MASYR1 ('SPTATI = ',
     .                SPTATI,LOGATM,ISTRA,0,NATM,0,NSTRA,TEXTS)
        CALL MASAGE ('SUM OVER SPECIES                               ')
        CALL MASR1 ('TOTAL=  ',SPTATI(0,ISTRA))
      ENDIF
      DO 405 IATM=0,NATMI
        DIFA(IATM,ISTRA)=
     +  POTATI(IATM,ISTRA)+PAATI(IATM,ISTRA)+PPATI(IATM,ISTRA)+
     +       PMATI(IATM,ISTRA)+PIATI(IATM,ISTRA)+PGENAI(IATM,ISTRA)+
     +       WTOTA(IATM,ISTRA)+PRFAAI(IATM,ISTRA)+PRFMAI(IATM,ISTRA)+
     +       PRFIAI(IATM,ISTRA)
        TOTA(IATM)=
     +  ABS(POTATI(IATM,ISTRA))+ABS(PAATI(IATM,ISTRA))+
     +       ABS(PPATI(IATM,ISTRA))+ABS(PMATI(IATM,ISTRA))+
     +       ABS(PIATI(IATM,ISTRA))+ABS(WTOTA(IATM,ISTRA))+
     +       ABS(PRFAAI(IATM,ISTRA))+ABS(PRFMAI(IATM,ISTRA))+
     +       ABS(PRFIAI(IATM,ISTRA))+ABS(PGENAI(IATM,ISTRA))
        TOTA(IATM)=TOTA(IATM)+EPS60
        DIF=SIGN (1.D0,DIFA(IATM,ISTRA))*
     .      MAX(0.D0,ABS(DIFA(IATM,ISTRA))/TOTA(IATM)-EPS10)
        DIFRA(IATM,ISTRA)=DIF*100.
        DIFA(IATM,ISTRA)=DIF*TOTA(IATM)
405   CONTINUE
      CALL MASAGE ('ABSOLUTE ERRORS IN PARTICLE BALANCE            ')
      CALL MASYR1 ('DIFA =   ',
     .              DIFA,LOGATM,ISTRA,0,NATM,0,NSTRA,TEXTS)
      CALL MASAGE ('SUM OVER SPECIES                               ')
      CALL MASR1 ('TOTAL=  ',DIFA(0,ISTRA))
      CALL MASAGE ('RELATIVE ERRORS IN PARTICLE BALANCE (%)        ')
      CALL MASYR1 ('DIFRA =  ',
     .              DIFRA,LOGATM,ISTRA,0,NATM,0,NSTRA,TEXTS)
      CALL MASAGE ('SUM OVER SPECIES                               ')
      CALL MASR1 ('TOTAL=  ',DIFRA(0,ISTRA))
      CALL LEER(2)
C
C  NEUTRAL MOLECULES PARTICLE BALANCE
C
410   CONTINUE
      DIFM(0,ISTRA)=0.
      TOTM(0)=0.
      IF (.NOT.TRCBLM) GOTO 420
      IF (.NOT.LOGMOL(0,ISTRA)) GOTO 420
      CALL LEER (2)
      CALL HEADNG('PARTICLE FLUX BALANCE (AMP), NEUTRAL MOLECULES',47)
      CALL LEER(1)
C  MOLECULES FROM PRIMARY SOURCE
      IF (WTOTM(0,ISTRA).NE.0.D0) THEN
        CALL MASAGE ('MOLECULAR INFLUX FROM PRIMARY SOURCE          ')
        CALL MASYR1 ('WTOTM  = ',
     .                WTOTM,LOGMOL,ISTRA,0,NMOL,0,NSTRA,TEXTS(NSPA+1))
        CALL MASAGE ('SUM OVER SPECIES                               ')
        CALL MASR1 ('TOTAL=  ',WTOTM(0,ISTRA))
      ENDIF
C
      IF (PPMLI(0,ISTRA).NE.0.D0) THEN
        CALL MASAGE ('MOLECULES FROM RECOMBINING BULK IONS          ')
        CALL MASYR1 ('PPMLI  = ',
     .                PPMLI,LOGMOL,ISTRA,0,NMOL,0,NSTRA,TEXTS(NSPA+1))
        CALL MASAGE ('SUM OVER SPECIES                               ')
        CALL MASR1 ('TOTAL=  ',PPMLI(0,ISTRA))
      ENDIF
C
      IF (PAMLI(0,ISTRA).NE.0.D0) THEN
        CALL MASAGE ('MOLECULES BORN BY ATOM - PLASMA INTERACTIONS    ')
        CALL MASYR1 ('PAMLI  = ',
     .                PAMLI,LOGMOL,ISTRA,0,NMOL,0,NSTRA,TEXTS(NSPA+1))
        CALL MASAGE ('SUM OVER SPECIES                               ')
        CALL MASR1 ('TOTAL=  ',PMMLI(0,ISTRA))
      ENDIF
      IF (PMMLI(0,ISTRA).NE.0.D0) THEN
        CALL MASAGE ('MOLECULES BORN BY MOLECULE - PLASMA INTERACTIONS')
        CALL MASYR1 ('PMMLI  = ',
     .                PMMLI,LOGMOL,ISTRA,0,NMOL,0,NSTRA,TEXTS(NSPA+1))
        CALL MASAGE ('SUM OVER SPECIES                               ')
        CALL MASR1 ('TOTAL=  ',PMMLI(0,ISTRA))
      ENDIF
      IF (PIMLI(0,ISTRA).NE.0.D0) THEN
        CALL MASAGE ('MOLECULES BORN BY TEST ION - PLASMA INTERACTIONS')
        CALL MASYR1 ('PIMLI  = ',
     .                PIMLI,LOGMOL,ISTRA,0,NMOL,0,NSTRA,TEXTS(NSPA+1))
        CALL MASAGE ('SUM OVER SPECIES                               ')
        CALL MASR1 ('TOTAL=  ',PIMLI(0,ISTRA))
      ENDIF
C  ESCAPING MOLECULES
      CALL MASAGE ('MOLECULAR EFFLUX ONTO THE SURFACES             ')
      CALL MASYR1 ('POTMLI = ',
     .              POTMLI,LOGMOL,ISTRA,0,NMOL,0,NSTRA,TEXTS(NSPA+1))
      CALL MASAGE ('SUM OVER SPECIES                               ')
      CALL MASR1 ('TOTAL=  ',POTMLI(0,ISTRA))
C  REFLECTED MOLECULES
      IF (PRFAMI(0,ISTRA).NE.0.D0) THEN
        CALL MASAGE ('MOLECULAR INFLUX FROM SURFACES, ORIG: ATOMS    ')
        CALL MASYR1 ('PRFAMI = ',
     .                PRFAMI,LOGMOL,ISTRA,0,NMOL,0,NSTRA,TEXTS(NSPA+1))
        CALL MASAGE ('SUM OVER SPECIES                               ')
        CALL MASR1 ('TOTAL=  ',PRFAMI(0,ISTRA))
      ENDIF
      IF (PRFMMI(0,ISTRA).NE.0.D0) THEN
        CALL MASAGE ('MOLECULAR INFLUX FROM SURFACES, ORIG: MOLECULES')
        CALL MASYR1 ('PRFMMI = ',
     .                PRFMMI,LOGMOL,ISTRA,0,NMOL,0,NSTRA,TEXTS(NSPA+1))
        CALL MASAGE ('SUM OVER SPECIES                               ')
        CALL MASR1 ('TOTAL=  ',PRFMMI(0,ISTRA))
      ENDIF
      IF (PRFIMI(0,ISTRA).NE.0.D0) THEN
        CALL MASAGE ('MOLECULAR INFLUX FROM SURFACES, ORIG: TEST IONS')
        CALL MASYR1 ('PRFIMI = ',
     .                PRFIMI,LOGMOL,ISTRA,0,NMOL,0,NSTRA,TEXTS(NSPA+1))
        CALL MASAGE ('SUM OVER SPECIES                               ')
        CALL MASR1 ('TOTAL=  ',PRFIMI(0,ISTRA))
      ENDIF
      IF (SPTMLI(0,ISTRA).NE.0.D0) THEN
        CALL MASAGE ('FLUX SPUTTERED BY MOLECULES:                   ')
        CALL MASYR1 ('SPTMLI = ',
     .                SPTMLI,LOGMOL,ISTRA,0,NMOL,0,NSTRA,TEXTS(NSPA+1))
        CALL MASAGE ('SUM OVER SPECIES                               ')
        CALL MASR1 ('TOTAL=  ',SPTMLI(0,ISTRA))
      ENDIF
      DO 415 IMOL=0,NMOLI
        DIFM(IMOL,ISTRA)=
     +     POTMLI(IMOL,ISTRA)+PMMLI(IMOL,ISTRA)+PPMLI(IMOL,ISTRA)+
     +     WTOTM(IMOL,ISTRA)+PIMLI(IMOL,ISTRA)+
     +     PRFAMI(IMOL,ISTRA)+PRFMMI(IMOL,ISTRA)+
     +     PRFIMI(IMOL,ISTRA)
        TOTM(IMOL)=
     +     ABS(POTMLI(IMOL,ISTRA))+ABS(PMMLI(IMOL,ISTRA))+
     +     ABS(PPMLI(IMOL,ISTRA))+ABS(WTOTM(IMOL,ISTRA))+
     +     ABS(PIMLI(IMOL,ISTRA))+
     +     ABS(PRFAMI(IMOL,ISTRA))+ABS(PRFMMI(IMOL,ISTRA))+
     +     ABS(PRFIMI(IMOL,ISTRA))
        TOTM(IMOL)=TOTM(IMOL)+EPS60
        DIF=SIGN (1.D0,DIFM(IMOL,ISTRA))*
     .      MAX(0.D0,ABS(DIFM(IMOL,ISTRA))/TOTM(IMOL)-EPS10)
        DIFRM(IMOL,ISTRA)=DIF*100.
        DIFM(IMOL,ISTRA)=DIF*TOTM(IMOL)
415   CONTINUE
      CALL MASAGE ('ABSOLUTE ERRORS IN PARTICLE BALANCE            ')
      CALL MASYR1 ('DIFM =   ',
     .              DIFM,LOGMOL,ISTRA,0,NMOL,0,NSTRA,TEXTS(NSPA+1))
      CALL MASAGE ('SUM OVER SPECIES                               ')
      CALL MASR1 ('TOTAL=  ',DIFM(0,ISTRA))
      CALL MASAGE ('RELATIVE ERRORS IN PARTICLE BALANCE (%)        ')
      CALL MASYR1 ('DIFRM =  ',
     .              DIFRM,LOGMOL,ISTRA,0,NMOL,0,NSTRA,TEXTS(NSPA+1))
      CALL MASAGE ('SUM OVER SPECIES                               ')
      CALL MASR1 ('TOTAL=  ',DIFRM(0,ISTRA))
      CALL LEER(2)
C
C  TEST IONS PARTICLE BALANCE
C
420   CONTINUE
      DIFI(0,ISTRA)=0.
      TOTI(0)=0.
      IF (.NOT.TRCBLI) GOTO 430
      IF (.NOT.LOGION(0,ISTRA)) GOTO 430
      CALL LEER (2)
      CALL HEADNG('PARTICLE FLUX BALANCE (AMP), TEST IONS',39)
      CALL LEER(1)
C  TEST IONS FROM PRIMARY SOURCE
      IF (WTOTI(0,ISTRA).NE.0.D0) THEN
        CALL MASAGE ('TEST IONS INFLUX FROM PRIMARY SOURCE          ')
        CALL MASYR1 ('IOFLUX = ',
     .                WTOTI,LOGION,ISTRA,0,NION,0,NSTRA,TEXTS(NSPAM+1))
        CALL MASAGE ('SUM OVER SPECIES                               ')
        CALL MASR1 ('TOTAL=  ',WTOTI(0,ISTRA))
      ENDIF
C
      IF (PPIOI(0,ISTRA).NE.0.D0) THEN
        CALL MASAGE ('TEST IONS FROM RECOMBINING BULK IONS          ')
        CALL MASYR1 ('PPIOI  = ',
     .                PPIOI,LOGION,ISTRA,0,NION,0,NSTRA,TEXTS(NSPAM+1))
        CALL MASAGE ('SUM OVER SPECIES                               ')
        CALL MASR1 ('TOTAL=  ',PPIOI(0,ISTRA))
      ENDIF
C
      IF (PIIOI(0,ISTRA).NE.0.D0) THEN
        CALL MASAGE ('TEST IONS BORN BY TEST ION - PLASMA INTERACTIONS')
        CALL MASYR1 ('PIIOI  = ',
     .                PIIOI,LOGION,ISTRA,0,NION,0,NSTRA,TEXTS(NSPAM+1))
        CALL MASAGE ('SUM OVER SPECIES                               ')
        CALL MASR1 ('TOTAL=  ',PIIOI(0,ISTRA))
      ENDIF
      IF (PAIOI(0,ISTRA).NE.0.D0) THEN
        CALL MASAGE ('TEST IONS BORN BY ATOM - PLASMA INTERACTIONS')
        CALL MASYR1 ('PAIOI  = ',
     .                PAIOI,LOGION,ISTRA,0,NION,0,NSTRA,TEXTS(NSPAM+1))
        CALL MASAGE ('SUM OVER SPECIES                               ')
        CALL MASR1 ('TOTAL=  ',PAIOI(0,ISTRA))
      ENDIF
      IF (PMIOI(0,ISTRA).NE.0.D0) THEN
        CALL MASAGE ('TEST IONS BORN BY MOLECULE - PLASMA INTERACTIONS')
        CALL MASYR1 ('PMIOI  = ',
     .                PMIOI,LOGION,ISTRA,0,NION,0,NSTRA,TEXTS(NSPAM+1))
        CALL MASAGE ('SUM OVER SPECIES                               ')
        CALL MASR1 ('TOTAL=  ',PMIOI(0,ISTRA))
      ENDIF
C  ESCAPING TEST IONS
      IF (POTIOI(0,ISTRA).NE.0.D0) THEN
        CALL MASAGE ('TEST IONS EFFLUX ONTO THE SURFACES             ')
        CALL MASYR1 ('POTIOI = ',
     .                POTIOI,LOGION,ISTRA,0,NION,0,NSTRA,TEXTS(NSPAM+1))
        CALL MASAGE ('SUM OVER SPECIES                               ')
        CALL MASR1 ('TOTAL=  ',POTIOI(0,ISTRA))
      ENDIF
C  REFLECTED TEST IONS
      IF (PRFAII(0,ISTRA).NE.0.D0) THEN
        CALL MASAGE ('TEST ION INFLUX FROM SURFACES, ORIG: ATOMS     ')
        CALL MASYR1 ('PRFAII = ',
     .                PRFAII,LOGION,ISTRA,0,NION,0,NSTRA,TEXTS(NSPAM+1))
        CALL MASAGE ('SUM OVER SPECIES                               ')
        CALL MASR1 ('TOTAL=  ',PRFAII(0,ISTRA))
      ENDIF
      IF (PRFMII(0,ISTRA).NE.0.D0) THEN
        CALL MASAGE ('TEST ION INFLUX FROM SURFACES, ORIG: MOLECULES ')
        CALL MASYR1 ('PRFMII = ',
     .                PRFMII,LOGION,ISTRA,0,NION,0,NSTRA,TEXTS(NSPAM+1))
        CALL MASAGE ('SUM OVER SPECIES                               ')
        CALL MASR1 ('TOTAL=  ',PRFMII(0,ISTRA))
      ENDIF
      IF (PRFIII(0,ISTRA).NE.0.D0) THEN
        CALL MASAGE ('TEST ION INFLUX THE SURFACES, ORIG: TEST IONS  ')
        CALL MASYR1 ('PRFIII = ',
     .                PRFIII,LOGION,ISTRA,0,NION,0,NSTRA,TEXTS(NSPAM+1))
        CALL MASAGE ('SUM OVER SPECIES                               ')
        CALL MASR1 ('TOTAL=  ',PRFIII(0,ISTRA))
      ENDIF
      IF (SPTIOI(0,ISTRA).NE.0.D0) THEN
        CALL MASAGE ('FLUX SPUTTERED BY TEST IONS:                   ')
        CALL MASYR1 ('SPTIOI = ',
     .                SPTIOI,LOGION,ISTRA,0,NION,0,NSTRA,TEXTS(NSPAM+1))
        CALL MASAGE ('SUM OVER SPECIES                               ')
        CALL MASR1 ('TOTAL=  ',SPTIOI(0,ISTRA))
      ENDIF
      DIFI(0,ISTRA)=0.
      TOTI(0)=0.
      DO 425 IION=0,NIONI
        DIFI(IION,ISTRA)=
     +     PIIOI(IION,ISTRA)+POTIOI(IION,ISTRA)+PPIOI(IION,ISTRA)+
     +     WTOTI(IION,ISTRA)+PMIOI(IION,ISTRA)+PAIOI(IION,ISTRA)+
     +     PRFAII(IION,ISTRA)+PRFMII(IION,ISTRA)+
     +     PRFIII(IION,ISTRA)
        TOTI(IION)=
     +     ABS(PIIOI(IION,ISTRA))+ABS(POTIOI(IION,ISTRA))+
     +     ABS(PPIOI(IION,ISTRA))+ABS(WTOTI(IION,ISTRA))+
     +     ABS(PMIOI(IION,ISTRA))+ABS(PAIOI(IION,ISTRA))+
     +     ABS(PRFAII(IION,ISTRA))+ABS(PRFMII(IION,ISTRA))+
     +     ABS(PRFIII(IION,ISTRA))
        TOTI(IION)=TOTI(IION)+EPS60
        DIF=SIGN (1.D0,DIFI(IION,ISTRA))*
     .      MAX(0.D0,ABS(DIFI(IION,ISTRA))/TOTI(IION)-EPS10)
        DIFRI(IION,ISTRA)=DIF*100.
        DIFI(IION,ISTRA)=DIF*TOTI(IION)
425   CONTINUE
      CALL MASAGE ('ABSOLUTE ERRORS IN PARTICLE BALANCE            ')
      CALL MASYR1 ('DIFI =   ',
     .              DIFI,LOGION,ISTRA,0,NION,0,NSTRA,TEXTS(NSPAM+1))
      CALL MASAGE ('SUM OVER SPECIES                               ')
      CALL MASR1 ('TOTAL=  ',DIFI(0,ISTRA))
      CALL MASAGE ('RELATIVE ERRORS IN PARTICLE BALANCE (%)        ')
      CALL MASYR1 ('DIFRI =  ',
     .              DIFRI,LOGION,ISTRA,0,NION,0,NSTRA,TEXTS(NSPAM+1))
      CALL MASAGE ('SUM OVER SPECIES                               ')
      CALL MASR1 ('TOTAL=  ',DIFRI(0,ISTRA))
      CALL LEER(2)
C
C  TOTAL TEST PARTICLE BALANCE
C
430   CONTINUE
      CALL MASAGE ('TRASH: TEST PARTICLES KILLED DUE TO ERRORS     ')
      CALL MASR1 ('PTRASH= ',PTRASH(ISTRA))
c slmod begin - tr
c      IF (DEBUGOPT.NE.0.OR.PTRASH(ISTRA).NE.0.0) THEN
c        WRITE(0,*)
c        WRITE(0,'(A,F12.5)') ' PTRASH: ',PTRASH(ISTRA)
c        WRITE(0,'(A,F12.5)') ' ETRASH: ',ETRASH(ISTRA)
c      ENDIF

      WRITE(0,'(A,I12  )') '  NHIST: ',INT(XMCP(ISTRA))

      IF (DEBUGOPT.NE.0.OR.NLOST.NE.0.OR.
     .    PTRASH(ISTRA).NE.0.0.OR.ETRASH(ISTRA).NE.0.0) THEN
        WRITE(0,'(A,I12  )') '  NLOST: ',NLOST
        WRITE(0,'(A,F12.5)') ' PTRASH: ',PTRASH(ISTRA)
        WRITE(0,'(A,F12.5)') ' ETRASH: ',ETRASH(ISTRA)
        WRITE(0,*)
        WRITE(6,'(A,I12  )') '  NLOST: ',NLOST
        WRITE(6,'(A,F12.5)') ' PTRASH: ',PTRASH(ISTRA)
        WRITE(6,'(A,F12.5)') ' ETRASH: ',ETRASH(ISTRA)
        WRITE(6,*)
      ENDIF

      IF (ISTRA.EQ.0) THEN
        WRITE(99,*) '''STRATA DATA:'' ''NUMBER OF TRACKS'' '' '' '' '''
        WRITE(99,*) NSTRAI
        DO I1 = 1, NSTRAI
          WRITE(99,*) I1,INT(XMCP(I1)),PTRASH(I1),ETRASH(I1)
        ENDDO
      ENDIF
c slmod end
      CALL LEER(3)
      IF (TRCBLA.OR.TRCBLM.OR.TRCBLI) THEN
        CALL MASAGE ('TOTAL ERROR IN PARTICLE FLUXBALANCE            ')
        DIFT=DIFA(0,ISTRA)+DIFM(0,ISTRA)+DIFI(0,ISTRA)+PTRASH(ISTRA)
        TOTT=TOTA(0)+TOTM(0)+TOTI(0)+ABS(PTRASH(ISTRA))+EPS60
        DIFR=DIFT/TOTT*100.
        CALL MASR2 ('DIF: ABS, REL(%)',DIFT,DIFR)
        CALL LEER(2)
      ENDIF
C
C
C   ENERGY FLUX BALANCE,  ATOMS
C
      DIFA(0,ISTRA)=0.
      TOTA(0)=0.
      IF (.NOT.TRCBLA) GOTO 440
      IF (.NOT.LOGATM(0,ISTRA)) GOTO 440
      CALL HEADNG ('ENERGY FLUX BALANCE (WATT), NEUTRAL ATOMS',41)
      CALL LEER(1)
      CALL MASAGE ('ENERGY FLUX FROM PRIMARY SOURCE                ')
      CALL MASR1 ('ETOTA=  ',ETOTA(ISTRA))
      CALL MASAGE ('ENERGY FLUX FROM RECOMBINING BULK IONS         ')
      CALL MASR1 ('EPATI=  ',EPATI(ISTRA))
      IF (LOGATM(0,ISTRA)) THEN
        CALL MASAGE ('ENERGY FLUX FROM ATOM PLASMA INTERACTION       ')
        CALL MASR1 ('EAATI=  ',EAATI(ISTRA))
      ENDIF
      IF (LOGMOL(0,ISTRA)) THEN
        CALL MASAGE ('ENERGY FLUX FROM MOLECULE PLASMA INTERACTIONS  ')
        CALL MASR1 ('EMATI=  ',EMATI(ISTRA))
      ENDIF
      IF (LOGION(0,ISTRA)) THEN
        CALL MASAGE ('ENERGY FLUX FROM TEST ION PLASMA INTERACTIONS  ')
        CALL MASR1 ('EIATI=  ',EIATI(ISTRA))
      ENDIF
C   GENERATION LIMIT
      IF (EGENAI(0,ISTRA).NE.0.D0) THEN
        CALL MASAGE ('ENERGY ABSORBED DUE TO GENERATION LIMIT        ')
        CALL MASR1 ('EGENAI= ',EGENAI(0,ISTRA))
      ENDIF
      CALL MASAGE ('ENERGY FLUX ONTO NON TRANSPARENT SURFACES       ')
      CALL MASR1 ('EOTATI= ',EOTATI(0,ISTRA))
      CALL MASAGE ('REFLECTED FROM NON TRANSPARENT SURFACES         ')
      CALL MASR1 ('ERFATI= ',ERFAAI(0,ISTRA)+ERFMAI(0,ISTRA)+
     +                       ERFIAI(0,ISTRA))
      CALL MASAGE ('ABSOLUTE AND RELATIVE ERROR IN BALANCE          ')
      DIFA(0,ISTRA)=EOTATI(0,ISTRA)+EPATI(ISTRA)+EAATI(ISTRA)+
     +     ETOTA(ISTRA)+EMATI(ISTRA)+EIATI(ISTRA)+EGENAI(0,ISTRA)+
     +     ERFAAI(0,ISTRA)+ERFMAI(0,ISTRA)+ERFIAI(0,ISTRA)
      TOTA(0)=ABS(EOTATI(0,ISTRA))+ABS(EPATI(ISTRA))+ABS(EAATI(ISTRA))+
     +     ABS(ETOTA(ISTRA))+ABS(EMATI(ISTRA))+ABS(EIATI(ISTRA))+
     +     ABS(EGENAI(0,ISTRA))+
     +     ABS(ERFAAI(0,ISTRA)+ERFMAI(0,ISTRA)+ERFIAI(0,ISTRA))
      TOTA(0)=TOTA(0)+EPS60
      DIFRA(0,ISTRA)=SIGN(1.D0,DIFA(0,ISTRA))*
     *        MAX(0.D0,ABS(DIFA(0,ISTRA))/TOTA(0)*100.D0-1.D-5)
      DIFA(0,ISTRA)=DIFRA(0,ISTRA)/100.*TOTA(0)
      CALL MASR2 ('DIF: ABS, REL(%)',DIFA(0,ISTRA),DIFRA(0,ISTRA))
      CALL LEER(2)
C
440   CONTINUE
C   ENERGY FLUX BALANCE,  MOLECULES
      DIFM(0,ISTRA)=0.
      TOTM(0)=0.
      IF (.NOT.TRCBLM) GOTO 450
      IF (.NOT.LOGMOL(0,ISTRA)) GOTO 450
C
      CALL HEADNG ('ENERGY FLUX BALANCE (WATT), NEUTRAL MOLECULES',45)
      CALL LEER(1)
      CALL MASAGE ('FROM PRIMARY SOURCE                            ')
      CALL MASR1 ('ETOTM = ',ETOTM(ISTRA))
      CALL MASAGE ('FROM RECOMBINING BULK IONS                     ')
      CALL MASR1 ('EPMLI=  ',EPMLI(ISTRA))
      IF (EAMLI(ISTRA).NE.0.D0) THEN
        CALL MASAGE ('ENERGY FLUX FROM ATOM PLASMA INTERACTIONS     ')
        CALL MASR1 ('EAMLI = ',EAMLI(ISTRA))
      ENDIF
      CALL MASAGE ('ENERGY FLUX FROM MOLECULE PLASMA INTERACTIONS  ')
      CALL MASR1 ('EMMLI = ',EMMLI(ISTRA))
      IF (EIMLI(ISTRA).NE.0.D0) THEN
        CALL MASAGE ('ENERGY FLUX FROM TEST ION PLASMA INTERACTIONS ')
        CALL MASR1 ('EIMLI = ',EIMLI(ISTRA))
      ENDIF
      CALL MASAGE ('ENERGY FLUX ONTO NON TRANSPARENT SURFACES      ')
      CALL MASR1 ('EOTMLI= ',EOTMLI(0,ISTRA))
      CALL MASAGE ('REFLECTED FROM NON TRANSPARENT SURFACES        ')
      CALL MASR1 ('ERFMLI= ',ERFAMI(0,ISTRA)+ERFMMI(0,ISTRA)+
     +                       ERFIMI(0,ISTRA))
      CALL MASAGE ('ABSOLUTE AND RELATIVE ERROR IN BALANCE          ')
      DIFM(0,ISTRA)=
     +     EAMLI(ISTRA)+EOTMLI(0,ISTRA)+EIMLI(ISTRA)+EMMLI(ISTRA)+
     +     ETOTM(ISTRA)+EPMLI(ISTRA)+
     +     ERFAMI(0,ISTRA)+ERFMMI(0,ISTRA)+ERFIMI(0,ISTRA)
      TOTM(0)=ABS(EAMLI(ISTRA))+ABS(EOTMLI(0,ISTRA))+ABS(EIMLI(ISTRA))+
     +        ABS(EMMLI(ISTRA))+ABS(ETOTM(ISTRA))+ABS(EPMLI(ISTRA))+
     +        ABS(ERFAMI(0,ISTRA)+ERFMMI(0,ISTRA)+ERFIMI(0,ISTRA))
      TOTM(0)=TOTM(0)+EPS60
      DIFRM(0,ISTRA)=SIGN(1.D0,DIFM(0,ISTRA))*
     *               MAX(0.D0,ABS(DIFM(0,ISTRA))/TOTM(0)*100.D0-1.D-5)
      DIFM(0,ISTRA)=DIFRM(0,ISTRA)/100.*TOTM(0)
      CALL MASR2 ('DIF: ABS, REL(%)',DIFM(0,ISTRA),DIFRM(0,ISTRA))
      CALL LEER(2)
C
450   CONTINUE
C   ENERGY FLUX BALANCE,  TEST IONS
      DIFI(0,ISTRA)=0.
      TOTI(0)=0.
      IF (.NOT.TRCBLI) GOTO 460
      IF (.NOT.LOGION(0,ISTRA)) GOTO 460
C
      CALL HEADNG ('ENERGY FLUX BALANCE (WATT), TEST IONS',37)
      CALL LEER(1)
      CALL MASAGE ('FROM PRIMARY SOURCE                            ')
      CALL MASR1 ('ETOTI = ',ETOTI(ISTRA))
      CALL MASAGE ('FROM RECOMBINING BULK IONS                     ')
      CALL MASR1 ('EPIOI=  ',EPIOI(ISTRA))
      IF (EAIOI(ISTRA).NE.0.D0) THEN
        CALL MASAGE ('ENERGY GAINED FROM ATOM PLASMA INTERACTIONS   ')
        CALL MASR1 ('EAIOI = ',EAIOI(ISTRA))
      ENDIF
      CALL MASAGE ('ENERGY GAINED FROM MOLECULE PLASMA INTERACTIONS')
      CALL MASR1 ('EMIOI = ',EMIOI(ISTRA))
      IF (EIIOI(ISTRA).NE.0.D0) THEN
        CALL MASAGE ('ENERGY GAINED FROM TEST ION PLASMA INTERACTIONS')
        CALL MASR1 ('EIIOI = ',EIIOI(ISTRA))
      ENDIF
      IF (EELFI(0,ISTRA).NE.0.D0) THEN
        CALL MASAGE ('ENERGY GAINED FROM ELECTRIC FIELDS')
        CALL MASR1 ('EELFI = ',EELFI(0,ISTRA))
      ENDIF
      IF (EOTIOI(0,ISTRA).NE.0.D0) THEN
        CALL MASAGE ('ENERGY FLUX ONTO NON TRANSPARENT SURFACES      ')
        CALL MASR1 ('EOTIOI= ',EOTIOI(0,ISTRA))
      ENDIF
      CALL MASAGE ('REFLECTED FROM NON TRANSPARENT SURFACES        ')
      CALL MASR1 ('ERFIOI= ',ERFAII(0,ISTRA)+ERFMII(0,ISTRA)+
     +                       ERFIII(0,ISTRA))
      CALL MASAGE ('ABSOLUTE AND RELATIVE ERROR IN BALANCE          ')
      DIFI(0,ISTRA)=
     +     EAIOI(ISTRA)+EOTIOI(0,ISTRA)+EIIOI(ISTRA)+EMIOI(ISTRA)+
     +     ETOTI(ISTRA)+EPIOI(ISTRA)+
     +     ERFAII(0,ISTRA)+ERFMII(0,ISTRA)+ERFIII(0,ISTRA)
      TOTI(0)=ABS(EAIOI(ISTRA))+ABS(EOTIOI(0,ISTRA))+ABS(EIIOI(ISTRA))+
     +        ABS(EMIOI(ISTRA))+ABS(ETOTI(ISTRA))+ABS(EPIOI(ISTRA))+
     +        ABS(ERFAII(0,ISTRA)+ERFMII(0,ISTRA)+ERFIII(0,ISTRA))
      TOTI(0)=TOTI(0)+EPS60
      DIFRI(0,ISTRA)=SIGN(1.D0,DIFI(0,ISTRA))*
     *              MAX(0.D0,ABS(DIFI(0,ISTRA))/TOTI(0)*100.-1.D-5)
      DIFI(0,ISTRA)=DIFRI(0,ISTRA)/100.*TOTI(0)
      CALL MASR2 ('DIF: ABS, REL(%)',DIFI(0,ISTRA),DIFRI(0,ISTRA))
      CALL LEER(2)
C
C  TOTAL TEST PARTICLE ENERGY FLUX BALANCE
C
460   CONTINUE
      CALL MASAGE ('ETRASH: ENERGY ABSORBED DUE TO ERRORS          ')
      CALL MASR1 ('ETRASH= ',ETRASH(ISTRA))
      CALL LEER(3)
      IF (TRCBLA.OR.TRCBLM.OR.TRCBLI) THEN
        CALL MASAGE ('TOTAL ERROR IN ENERGY FLUXBALANCE              ')
        DIFT=DIFA(0,ISTRA)+DIFM(0,ISTRA)+DIFI(0,ISTRA)+ETRASH(ISTRA)
        TOTT=TOTA(0)+TOTM(0)+TOTI(0)+ABS(ETRASH(ISTRA))+EPS60
        DIFR=DIFT/TOTT*100.
        CALL MASR2 ('DIF: ABS, REL(%)',DIFT,DIFR)
        CALL LEER(2)
      ENDIF
C
600   CONTINUE
C
C  INTEGRATED BULK ION SOURCE TERMS
C
      IF (.NOT.TRCBLP) GOTO 700
      IF (.NOT.LOGPLS(0,ISTRA)) GOTO 700
      CALL HEADNG ('PARTICLE FLUX BALANCE (AMP), BULK IONS',39)
      CALL LEER(1)
C  PRIMARY SOURCE
      IF (WTOTP(0,ISTRA).NE.0.D0) THEN
        CALL MASAGE ('BULK ION PARTICLE FLUX  BEING                  ')
        CALL MASAGE ('NEUTRALIZED  (DEFINING THE TEST PARTICLE SOURCE')
        CALL MASAGE ('STRENGTH (AMP))                               ')
        CALL MASYR1 ('WTOTP  = ',
     .                WTOTP,LOGPLS,ISTRA,0,NPLS,0,NSTRA,TEXTS(NSPAMI+1))
        CALL MASAGE ('SUM OVER SPECIES                               ')
        CALL MASR1 ('TOTAL=  ',WTOTP(0,ISTRA))
      ENDIF
C  ATOMS PLASMA INTERACTION
      CALL MASAGE ('BULK IONS BORN BY ATOM PLASMA INTERACTIONS')
      CALL MASYR1 ('PAPLI  = ',
     .              PAPLI,LOGPLS,ISTRA,0,NPLS,0,NSTRA,TEXTS(NSPAMI+1))
      CALL MASR1 ('TOTAL=  ',PAPLI(0,ISTRA))
C  MOLECULE PLASMA INTERACTION
      CALL MASAGE ('BULK IONS BORN BY MOLECULE PLASMA INTERACTIONS')
      CALL MASYR1 ('PMPLI  = ',
     .              PMPLI,LOGPLS,ISTRA,0,NPLS,0,NSTRA,TEXTS(NSPAMI+1))
      CALL MASAGE ('SUM OVER SPECIES                               ')
      CALL MASR1 ('TOTAL=  ',PMPLI(0,ISTRA))
C  TEST ION PLASMA INTERACTION
      CALL MASAGE ('BULK IONS BORN BY TEST ION PLASMA INTERACTIONS')
      CALL MASYR1 ('PIPLI  = ',
     .              PIPLI,LOGPLS,ISTRA,0,NPLS,0,NSTRA,TEXTS(NSPAMI+1))
      CALL MASAGE ('SUM OVER SPECIES                               ')
      CALL MASR1 ('TOTAL=  ',PIPLI(0,ISTRA))
      IF (SPTPLI(0,ISTRA).NE.0.D0) THEN
        CALL MASAGE ('FLUX SPUTTERED BY BULK IONS:                   ')
        CALL MASYR1 ('SPTPLI = ',
     .                SPTPLI,LOGPLS,ISTRA,0,NPLS,0,NSTRA,
     .                TEXTS(NSPAMI+1))
        CALL MASAGE ('SUM OVER SPECIES                               ')
        CALL MASR1 ('TOTAL=  ',SPTPLI(0,ISTRA))
      ENDIF
      CALL LEER(2)
      PLOSSP=WTOTP(0,ISTRA)
      PGAINP=PAPLI(0,ISTRA)+PMPLI(0,ISTRA)+PIPLI(0,ISTRA)
      CALL MASAGE ('TOTAL LOSS  ---  TOTAL GAIN                    ')
      CALL MASR2 ('LOSS--GAIN      ',PLOSSP,PGAINP)
      CALL LEER(2)
C
      CALL HEADNG ('ENERGY FLUX BALANCE (WATT), BULK IONS',37)
      CALL LEER(1)
      CALL MASAGE ('BULK ION ENERGY FLUX  BEING                    ')
      CALL MASAGE ('NEUTRALIZED  (DEFINING THE TEST PARTICLES      ')
      CALL MASAGE ('SOURCE ENERGY DISTRIBUTION                     ')
      CALL MASR1 ('ETOTP=  ',ETOTP(ISTRA))
      CALL MASAGE ('ENERGY GAIN DUE TO ATOM PLASMA INTERACTIONS  ')
      CALL MASR1 ('EAPLI=  ',EAPLI(ISTRA))
      CALL MASAGE ('ENERGY GAIN FROM MOLECULE PLASMA INTERACTIONS  ')
      CALL MASR1 ('EMPLI=  ',EMPLI(ISTRA))
      CALL MASAGE ('ENERGY GAIN FROM TEST ION PLASMA INTERACTIONS  ')
      CALL MASR1 ('EIPLI=  ',EIPLI(ISTRA))
      CALL LEER(2)
      ELOSSP=ETOTP(ISTRA)
      EGAINP=EAPLI(ISTRA)+EMPLI(ISTRA)+EIPLI(ISTRA)
      CALL MASAGE ('TOTAL LOSS  ---   TOTAL GAIN                   ')
      CALL MASR2 ('LOSS--GAIN      ',ELOSSP,EGAINP)
      CALL LEER(2)
C
700   CONTINUE
C
C  INTEGRATED ELECTRON SOURCE TERMS
C
      IF (.NOT.TRCBLE) GOTO 800
C
      CALL HEADNG ('PARTICLE FLUX BALANCE (AMP), ELECTRONS',39)
      CALL LEER(1)
      IF (WTOTP(0,ISTRA).NE.0.D0) THEN
        CALL MASAGE ('BULK ELECTRON PARTICLE FLUX BEING NEUTRALIZED  ')
        CALL MASR1 ('PTOTE=  ',WTOTP(0,ISTRA))
      ENDIF
C  ATOMS PLASMA INTERACTION
      CALL MASAGE ('ELECTRONS BORN BY ATOM PLASMA INTERACTIONS')
      CALL MASR1 ('PAELI=  ',PAELI(ISTRA))
C  MOLECULE PLASMA INTERACTION
      CALL MASAGE ('ELECTRONS BORN BY MOLECULE PLASMA INTERACTIONS')
      CALL MASR1 ('PMELI=  ',PMELI(ISTRA))
C  TEST ION PLASMA INTERACTION
      CALL MASAGE ('ELECTRONS BORN BY TEST ION PLASMA INTERACTIONS')
      CALL MASR1 ('PIELI=  ',PIELI(ISTRA))
      CALL LEER(2)
      PLOSSE=WTOTP(0,ISTRA)
      PGAINE=PAELI(ISTRA)+PMELI(ISTRA)+PIELI(ISTRA)
      CALL MASAGE ('TOTAL LOSS  ---  TOTAL GAIN                    ')
      CALL MASR2 ('LOSS--GAIN      ',PLOSSE,PGAINE)
      CALL LEER(2)
C
      CALL HEADNG ('ENERGY FLUX BALANCE (WATT), ELECTRONS',37)
      CALL LEER(1)
C  TO BE WRITTEN: ETOTE FOR RECOMBINATION
C     CALL MASAGE ('BULK ELECTRON ENERGY FLUX BEING LOST           ')
C     CALL MASAGE ('UPON RECOMBINATION                             ')
C     CALL MASR1 ('ETOTE=  ',ETOTE(ISTRA))
      CALL MASAGE ('ENERGY GAIN DUE TO ATOM PLASMA INTERACTIONS')
      CALL MASR1 ('EAELI=  ',EAELI(ISTRA))
      CALL MASAGE ('ENERGY GAIN DUE TO MOLECULE PLASMA INTERACTIONS')
      CALL MASR1 ('EMELI=  ',EMELI(ISTRA))
      CALL MASAGE ('ENERGY GAIN DUE TO TEST ION PLASMA INTERACTIONS')
      CALL MASR1 ('EIELI=  ',EIELI(ISTRA))
      ELOSSE=EMELI(ISTRA)+EAELI(ISTRA)+EIELI(ISTRA)
      EGAINE=0.
      CALL MASAGE ('TOTAL LOSS  ---   TOTAL GAIN                   ')
      CALL MASR2 ('LOSS--GAIN      ',ELOSSE,EGAINE)
      CALL LEER(2)
800   CONTINUE
C
      WRITE (6,*) 'SURFACES, AT WHICH TEST PARTICLES FLUXES ARE REDUCED'
      WRITE (6,'(1X,A3,1X,A8,A12)') 'NO.','SPECIES ',' PUMPED FLUX'
      DO J=1,NLIMPS
        JJ=J
        IF (J.GT.NLIM) JJ=-(J-NLIM)
        SPA=0.D0
        DO IS=1,NSPTOT
          IF (SPUMP(IS,J).GT.0.) THEN 
            WRITE (6,'(1X,I4,1X,A8,1PE12.4)') JJ,TEXTS(IS),SPUMP(IS,J)
            SPA=SPA+SPUMP(IS,J)*NPRT(IS)
          ENDIF
        ENDDO
        IF (SPA.GT.0.D0) CALL LEER(1)
      ENDDO
C
C   DETAILED OUTPUT OF FLUXES ONTO AND FROM SURFACES
      IF (NSURPR.GT.0) THEN
        CALL OUTFLX('FLUXES AT SURFACES              ',ISTRA)
      ENDIF
C
      CALL PAGE
C
1000  CONTINUE
6666  FORMAT (3X,1A8,8X,12(A4,2X,A8,3X))
7777  FORMAT (1X,3A8)
      RETURN
      END
C
C
      SUBROUTINE OUTFLX(A,ISTRA)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      INCLUDE 'PARMMOD'
      INCLUDE 'CTEXT'
      INCLUDE 'COMUSR'
      INCLUDE 'CESTIM'
      INCLUDE 'CSDVI'
      INCLUDE 'CSPEZ'
      INCLUDE 'CTRCEI'
      INCLUDE 'CLGIN'
      INCLUDE 'CGRID'
      INCLUDE 'CTRIG'
      DIMENSION
     .  SUMA1(0:NATM,0:NSTRA),VARA1(0:NATM,0:NSTRA),
     .  SUMM1(0:NMOL,0:NSTRA),VARM1(0:NMOL,0:NSTRA),
     .  SUMI1(0:NION,0:NSTRA),VARI1(0:NION,0:NSTRA),
     .  SUMP1(0:NPLS,0:NSTRA),VARP1(0:NPLS,0:NSTRA),
     .  SUMA2(0:NATM,0:NSTRA),VARA2(0:NATM,0:NSTRA),
     .  SUMM2(0:NMOL,0:NSTRA),VARM2(0:NMOL,0:NSTRA),
     .  SUMI2(0:NION,0:NSTRA),VARI2(0:NION,0:NSTRA),
     .  SUMS(0:NADS,0:NSTRA),VARS(0:NADS,0:NSTRA),
     .  SUML(0:NALS,0:NSTRA),VARL(0:NALS,0:NSTRA)
      LOGICAL LGVRA1(0:NATM,0:NSTRA),
     .        LGVRM1(0:NMOL,0:NSTRA),
     .        LGVRI1(0:NION,0:NSTRA),
     .        LGVRP1(0:NPLS,0:NSTRA)
      LOGICAL LGVRA2(0:NATM,0:NSTRA),
     .        LGVRM2(0:NMOL,0:NSTRA),
     .        LGVRI2(0:NION,0:NSTRA)
      LOGICAL LGVARS(0:NADS,0:NSTRA),
     .        LGVARL(0:NALS,0:NSTRA)
      LOGICAL LOGADS(0:NADS,0:NSTRA),
     .        LOGALS(0:NALS,0:NSTRA)
      CHARACTER*8 TEXTA(NADS),TEXTL(NALS)
      CHARACTER*32 A
      CALL LEER(1)
      WRITE (6,9999) A
c slmod begin - not tr
c...bug: Loop to set LGVRA1,2 to .FALSE. is over NATMI, but call to
c        MASRY1 is over NATM.  This is a problem for compliers that do
c        not initialize variables to nil, such as the one I am presently
c        using (NAG-SALFORD).
      CALL LSET(LGVRA1(0,0),(NATM+1)*(NSTRA+1),.FALSE.)
      CALL LSET(LGVRA2(0,0),(NATM+1)*(NSTRA+1),.FALSE.)
      CALL LSET(LGVRM1(0,0),(NMOL+1)*(NSTRA+1),.FALSE.)
      CALL LSET(LGVRM2(0,0),(NMOL+1)*(NSTRA+1),.FALSE.)
      CALL LSET(LGVRI1(0,0),(NION+1)*(NSTRA+1),.FALSE.)
      CALL LSET(LGVRI2(0,0),(NION+1)*(NSTRA+1),.FALSE.)
c slmod end
C
C  SURFACE LOOP
C
      DO 10000 ISPR=1,NSURPR
C
C
        ITEXT=0
        I=NPRTLS(ISPR)
c slmod begin - temp - not tr

        WRITE(6,*) 'MARK: NPRTLS(ISPR)= ',ispr,nprtls(ispr),
     .             nprtls(ispr)-nlim

c slmod end
C  ISP TO BE WRITTEN
C       ISP=NSPEZS(I,1)
        CALL LEER(2)
        IF (IGJUM0(I).NE.0) THEN
C  CHECK, IF SURFACE IS STILL THERE AS ONE SIDE OF A TRIANGLE
          IF (LEVGEO.EQ.4) THEN
            DO ITRII=1,NTRII
            DO IPLGN=1,3
              ISTS=ABS(INMTI(IPLGN,ITRII))
              IF (ISTS.EQ.I) GOTO 5
            ENDDO
            ENDDO
          ENDIF
          WRITE (6,*) ' SURFACE NO. ',I,' : OUT '
          GOTO 10000
        ENDIF
5       CONTINUE
C  PRINT SURFACE AREA (NOT FOR "TIME SURFACE")
        CALL MASBOX(TXTSFL(I))
        IF (NTIME.GE.1.AND.I.EQ.NLIM+NSTSI) GOTO 1
        IF (SAREA(I).NE.666.) THEN
          WRITE (6,'(A22,1P,1E12.4)') ' SURFACE AREA (CM**2) ',SAREA(I)
          WRITE(6,*) 'MARK: I= ',I
        ELSE
          WRITE (6,*) 'SURFACE AREA (CM**2) ','?'
        ENDIF
1       CONTINUE
C
C   INCIDENT FLUXES
C
C   SURFACE AVERAGED TALLY NO.1 AND NO.17
C
        write (6,*) 'plasma fluxes '
        do ipls=1,nplsi
          write (6,*) 'ipls,potpl, eotpl ',potpl(ipls,I),eotpl(ipls,I)
          write (6,*) '    prfpat,erfpat ',prfpat(1,I),erfpat(1,I)
          write (6,*) '    prfpml,erfpml ',prfpml(1,I),erfpml(1,I)
c slmod begin - juelich - not tr (code re-written in 02)
          if (i.gt.nlim.AND.NLMPGS.GT.NLIMPS) then
c          if (i.gt.nlim) then
c slmod end
C
C  SPATIAL RESOLUTION ON NON DEFAULT STANDARD SURFACE?
          ISTS=I-NLIM
          IF (INUMP(ISTS,2).NE.0) then
C  POLOIDAL SURFACE
            icou=0
            sum1=0
            sum2=0
            sum3=0
            sum4=0
            sum5=0
            sum6=0
c slmod begin - debug - not tr
c            IF (DEBUGOPT.NE.0) THEN
c              WRITE(0,*) 'ESCAPE: ASSIGNING MSURFG 02 =',msurfg
c              WRITE(6,*) 'ESCAPE: ASSIGNING MSURFG 02 =',msurfg
c            ENDIF
c slmod end
            do nr=1,nr1st
            do nt=1,nt3rd
              MSURFG=NR+(NT-1)*NR1P2
              MSURFG=NLIM+NSTSI+MSURFG+(ISTS-1)*NGITT
              icou=icou+1
              sum1=sum1+potpl(1,msurfg)
              sum2=sum2+eotpl(1,msurfg)
              sum3=sum3+prfpat(1,msurfg)
              sum4=sum4+erfpat(1,msurfg)
              sum5=sum5+PrfpML(1,msurfg)
              sum6=sum6+erfpML(1,msurfg)
              if (potpl(1,msurfg).gt.0.) then
              write (6,*) 'nr,ms, potpl,eotpl ',nr,icou,
     .                         potpl(ipls,msurfg),eotpl(ipls,msurfg)
              write (6,*) 'nr,ms, prfpa,erfpa ',nr,icou,
     .                         prfpat(1,msurfg),erfpat(1,msurfg)
              write (6,*) 'nr,ms, prfpM,erfpM ',nr,icou,
     .                         prfpML(1,msurfg),erfpML(1,msurfg)
              endif
            ENDDO
            ENDDO
            write (6,*) 'test ',sum1,sum2,sum3,sum4,sum5,sum6
          ENDIF
          IF (INUMP(ISTS,1).NE.0) then
C  RADIAL SURFACE
c slmod begin - debug - not tr
c            IF (DEBUGOPT.NE.0) THEN
c              WRITE(0,*) 'ESCAPE: ASSIGNING MSURFG 03 =',msurfg
c              WRITE(6,*) 'ESCAPE: ASSIGNING MSURFG 03 =',msurfg
c            ENDIF
c slmod end
            icou=0
            sum1=0
            sum2=0
            sum3=0
            sum4=0
            sum5=0
            sum6=0
            do np=1,np2nd
            do nt=1,nt3rd
              MSURFG=NP+(NT-1)*NP2T3
              MSURFG=NLIM+NSTSI+MSURFG+(ISTS-1)*NGITT
              icou=icou+1
              sum1=sum1+potpl(1,msurfg)
              sum2=sum2+eotpl(1,msurfg)
              sum3=sum3+prfpat(1,msurfg)
              sum4=sum4+erfpat(1,msurfg)
              sum5=sum5+PrfpML(1,msurfg)
              sum6=sum6+erfpML(1,msurfg)
              if (potpl(1,msurfg).gt.0.) then
              write (6,*) 'np,ms, potpl,eotpl ',np,icou,
     .                         potpl(ipls,msurfg),eotpl(ipls,msurfg)
              write (6,*) 'np,ms, prfpa,erfpa ',np,icou,
     .                         prfpat(1,msurfg),erfpat(1,msurfg)
              write (6,*) 'np,ms, prfpm,erfpm ',np,icou,
     .                         prfpml(1,msurfg),erfpml(1,msurfg)
              endif
            ENDDO
            ENDDO
            write (6,*) 'test ',sum1,sum2,sum3,sum4,sum5,sum6
          ENDIF
          IF (INUMP(ISTS,3).NE.0) then
C  toroidal SURFACE
c slmod begin - debug - not tr
c            IF (DEBUGOPT.NE.0) THEN
c              WRITE(0,*) 'ESCAPE: ASSIGNING MSURFG 04 =',msurfg
c              WRITE(6,*) 'ESCAPE: ASSIGNING MSURFG 04 =',msurfg
c            ENDIF
c slmod end
            icou=0
            sum1=0
            sum2=0
            sum3=0
            sum4=0
            sum5=0
            sum6=0
            do nr=1,nr1st
            do np=1,np2nd
              MSURFG=Nr+(Np-1)*Nr1p2
              MSURFG=NLIM+NSTSI+MSURFG+(ISTS-1)*NGITT
              icou=icou+1
              sum1=sum1+potpl(1,msurfg)
              sum2=sum2+eotpl(1,msurfg)
              sum3=sum3+prfpat(1,msurfg)
              sum4=sum4+erfpat(1,msurfg)
              sum5=sum5+PrfpML(1,msurfg)
              sum6=sum6+erfpML(1,msurfg)
              if (potpl(1,msurfg).gt.0.) then
              write (6,*) 'nr,ms, potpl,eotpl ',nr,icou,
     .                         potpl(ipls,msurfg),eotpl(ipls,msurfg)
              write (6,*) 'nr,ms, prfpa,erfpa ',nr,icou,
     .                         prfpat(1,msurfg),erfpat(1,msurfg)
              write (6,*) 'nr,ms, prfpm,erfpm ',nr,icou,
     .                         prfpml(1,msurfg),erfpml(1,msurfg)
              endif
            ENDDO
            ENDDO
            write (6,*) 'test ',sum1,sum2,sum3,sum4,sum5,sum6
          ENDIF
C
          endif
        enddo
        SUMMT=0.
        SUMME=0.
        SUMA=0.
        SUMM=0.
        SUMI=0.
        DO 20 IATM=1,NATMI
          LGVRA1(IATM,ISTRA)=.FALSE.
          LGVRA2(IATM,ISTRA)=.FALSE.
          SUMA1(IATM,ISTRA)=POTAT(IATM,I)
          SUMMT=SUMMT+SUMA1(IATM,ISTRA)*NPRT(IATM)
          SUMA=SUMA+SUMA1(IATM,ISTRA)
          SUMA2(IATM,ISTRA)=EOTAT(IATM,I)
          SUMME=SUMME+SUMA2(IATM,ISTRA)
20      CONTINUE
C
        DO 21 N=1,NSIGSI
          IF (IIHW(N).EQ.1) THEN
            DO 22 IATM=1,NATMI
              IF (IGHW(N).NE.IATM) GOTO 22
              VARA1(IATM,ISTRA)=SIGMAW(N,I)
              LGVRA1(IATM,ISTRA)=LOGATM(IATM,ISTRA)
22          CONTINUE
          ELSEIF (IIHW(N).EQ.17) THEN
            DO 522 IATM=1,NATMI
              IF (IGHW(N).NE.IATM) GOTO 522
              VARA2(IATM,ISTRA)=SIGMAW(N,I)
              LGVRA2(IATM,ISTRA)=LOGATM(IATM,ISTRA)
522         CONTINUE
          ENDIF
21      CONTINUE
C
C   SURFACE AVERAGED TALLY NO.6 AND NO.22
C
        DO 30 IMOL=1,NMOLI
          LGVRM1(IMOL,ISTRA)=.FALSE.
          LGVRM2(IMOL,ISTRA)=.FALSE.
          SUMM1(IMOL,ISTRA)=POTML(IMOL,I)
          SUMMT=SUMMT+SUMM1(IMOL,ISTRA)*NPRT(NSPA+IMOL)
          SUMM=SUMM+SUMM1(IMOL,ISTRA)
          SUMM2(IMOL,ISTRA)=EOTML(IMOL,I)
          SUMME=SUMME+SUMM2(IMOL,ISTRA)
30      CONTINUE
C
        DO 23 N=1,NSIGSI
          IF (IIHW(N).EQ.6) THEN
            DO 24 IMOL=1,NMOLI
              IF (IGHW(N).NE.IMOL) GOTO 24
              VARM1(IMOL,ISTRA)=SIGMAW(N,I)
              LGVRM1(IMOL,ISTRA)=LOGMOL(IMOL,ISTRA)
24          CONTINUE
          ELSEIF (IIHW(N).EQ.22) THEN
            DO 524 IMOL=1,NMOLI
              IF (IGHW(N).NE.IMOL) GOTO 524
              VARM2(IMOL,ISTRA)=SIGMAW(N,I)
              LGVRM2(IMOL,ISTRA)=LOGMOL(IMOL,ISTRA)
524         CONTINUE
          ENDIF
23      CONTINUE
C
C   SURFACE AVERAGED TALLY NO.11 AND NO.27
C
      DO 40 IION=1,NIONI
        LGVRI1(IION,ISTRA)=.FALSE.
        LGVRI2(IION,ISTRA)=.FALSE.
        SUMI1(IION,ISTRA)=POTIO(IION,I)
        SUMMT=SUMMT+SUMI1(IION,ISTRA)*NPRT(NSPAM+IION)
        SUMI=SUMI+SUMI1(IION,ISTRA)
        SUMI2(IION,ISTRA)=EOTIO(IION,I)
        SUMME=SUMME+SUMI2(IION,ISTRA)
40    CONTINUE
C
      DO 25 N=1,NSIGSI
        IF (IIHW(N).EQ.11) THEN
          DO 26 IION=1,NIONI
            IF (IGHW(N).NE.IION) GOTO 26
            VARI1(IION,ISTRA)=SIGMAW(N,I)
            LGVRI1(IION,ISTRA)=LOGION(IION,ISTRA)
26        CONTINUE
        ELSEIF (IIHW(N).EQ.27) THEN
          DO 526 IION=1,NIONI
            IF (IGHW(N).NE.IION) GOTO 526
            VARI2(IION,ISTRA)=SIGMAW(N,I)
            LGVRI2(IION,ISTRA)=LOGION(IION,ISTRA)
526       CONTINUE
        ENDIF
25    CONTINUE
C
C
C
      TTTT=ABS(SUMA)+ABS(SUMM)+ABS(SUMI)
      IF (TTTT.EQ.0.D0) THEN
        CALL LEER(1)
        CALL MASAGE ('NO FLUXES INCIDENT ON THIS SURFACE             ')
        CALL LEER(1)
      ELSE
        CALL LEER(1)
C
        IF (ILIIN(I).GT.0) THEN
          WRITE (6,*) 'FLUX INCIDENT ON SURFACE:'
C  SURFACE AVERAGED TALLY NO. 1
          IF (SUMA.NE.0.D0) THEN
            WRITE (6,*) 'INCIDENT: ATOMS'
            CALL MASYR1('P-FLUX:  ',SUMA1,LOGATM,ISTRA,0,NATM,0,NSTRA,
     .                   TEXTS)
            CALL MASYR1('ST.DEV.% ',VARA1,LGVRA1,ISTRA,0,NATM,0,NSTRA,
     .                   TEXTS)
C  SURFACE AVERAGED TALLY NO. 17
            CALL MASYR1('E-FLUX:  ',SUMA2,LOGATM,ISTRA,0,NATM,0,NSTRA,
     .                   TEXTS)
            CALL MASYR1('ST.DEV.% ',VARA2,LGVRA2,ISTRA,0,NATM,0,NSTRA,
     .                   TEXTS)
          ENDIF
C  SURFACE AVERAGED TALLY NO. 6
          IF (SUMM.NE.0.D0) THEN
            WRITE (6,*) 'INCIDENT: MOLECULES'
            CALL MASYR1('P-FLUX:  ',SUMM1,LOGMOL,ISTRA,0,NMOL,0,NSTRA,
     .                   TEXTS(NSPA+1))
            CALL MASYR1('ST.DEV.% ',VARM1,LGVRM1,ISTRA,0,NMOL,0,NSTRA,
     .                   TEXTS(NSPA+1))
C  SURFACE AVERAGED TALLY NO. 22
            CALL MASYR1('E-FLUX:  ',SUMM2,LOGMOL,ISTRA,0,NMOL,0,NSTRA,
     .                   TEXTS(NSPA+1))
            CALL MASYR1('ST.DEV.% ',VARM2,LGVRM2,ISTRA,0,NMOL,0,NSTRA,
     .                   TEXTS(NSPA+1))
          ENDIF
C  SURFACE AVERAGED TALLY NO. 11
          IF (SUMI.NE.0.D0) THEN
            WRITE (6,*) 'INCIDENT: TEST IONS'
            CALL MASYR1('P-FLUX:  ',SUMI1,LOGION,ISTRA,0,NION,0,NSTRA,
     .                   TEXTS(NSPAM+1))
            CALL MASYR1('ST.DEV.% ',VARI1,LGVRI1,ISTRA,0,NION,0,NSTRA,
     .                   TEXTS(NSPAM+1))
C  SURFACE AVERAGED TALLY NO. 27
            CALL MASYR1('E-FLUX:  ',SUMI2,LOGION,ISTRA,0,NION,0,NSTRA,
     .                   TEXTS(NSPAM+1))
            CALL MASYR1('ST.DEV.% ',VARI2,LGVRI2,ISTRA,0,NION,0,NSTRA,
     .                   TEXTS(NSPAM+1))
          ENDIF
          CALL LEER (1)
          WRITE (6,*) 'TOTAL INCIDENT FLUXES, AMPERE AND WATT'
          CALL LEER (1)
          CALL MASR1 ('TOT.PFLX',SUMMT)
          CALL MASR1 ('TOT.EFLX',SUMME)
C
        ELSEIF (ILIIN(I).LT.0) THEN
          WRITE (6,*) 'PARTIAL PARTICLE AND ENERGY CURRENTS, POSITIVE '
C  SURFACE AVERAGED TALLY NO. 1
          IF (SUMA.NE.0.D0) THEN
            WRITE (6,*) 'ATOMS'
            CALL MASYR1('P-FLUX:  ',SUMA1,LOGATM,ISTRA,0,NATM,0,NSTRA,
     .                   TEXTS)
            CALL MASYR1('ST.DEV.% ',VARA1,LGVRA1,ISTRA,0,NATM,0,NSTRA,
     .                   TEXTS)
C  SURFACE AVERAGED TALLY NO. 17
            CALL MASYR1('E-FLUX:  ',SUMA2,LOGATM,ISTRA,0,NATM,0,NSTRA,
     .                   TEXTS)
            CALL MASYR1('ST.DEV.% ',VARA2,LGVRA2,ISTRA,0,NATM,0,NSTRA,
     .                   TEXTS)
          ENDIF
C  SURFACE AVERAGED TALLY NO. 6
          IF (SUMM.NE.0.D0) THEN
            WRITE (6,*) 'MOLECULES'
            CALL MASYR1('P-FLUX:  ',SUMM1,LOGMOL,ISTRA,0,NMOL,0,NSTRA,
     .                   TEXTS(NSPA+1))
            CALL MASYR1('ST.DEV.% ',VARM1,LGVRM1,ISTRA,0,NMOL,0,NSTRA,
     .                   TEXTS(NSPA+1))
C  SURFACE AVERAGED TALLY NO. 22
            CALL MASYR1('E-FLUX:  ',SUMM2,LOGMOL,ISTRA,0,NMOL,0,NSTRA,
     .                   TEXTS(NSPA+1))
            CALL MASYR1('ST.DEV.% ',VARM2,LGVRM2,ISTRA,0,NMOL,0,NSTRA,
     .                   TEXTS(NSPA+1))
          ENDIF
C  SURFACE AVERAGED TALLY NO. 11
          IF (SUMI.NE.0.D0) THEN
            WRITE (6,*) 'TEST IONS'
            CALL MASYR1('P-FLUX:  ',SUMI1,LOGION,ISTRA,0,NION,0,NSTRA,
     .                   TEXTS(NSPAM+1))
            CALL MASYR1('ST.DEV.% ',VARI1,LGVRI1,ISTRA,0,NION,0,NSTRA,
     .                   TEXTS(NSPAM+1))
C  SURFACE AVERAGED TALLY NO. 27
            CALL MASYR1('E-FLUX:  ',SUMI2,LOGION,ISTRA,0,NION,0,NSTRA,
     .                   TEXTS(NSPAM+1))
            CALL MASYR1('ST.DEV.% ',VARI2,LGVRI2,ISTRA,0,NION,0,NSTRA,
     .                   TEXTS(NSPAM+1))
          ENDIF
          CALL LEER (1)
          WRITE (6,*) 'TOTAL POSITIVE FLUXES, AMPERE AND WATT'
          CALL LEER (1)
          CALL MASR1 ('POS.PFLX',SUMMT)
          CALL MASR1 ('POS.EFLX',SUMME)
        ENDIF
      ENDIF
C
C   REEMITTED FLUXES, FIRST: FROM INCIDENT ATOMS
C
      SUMMTA=0.
      SUMMEA=0.
      SUMA=0.
      SUMM=0.
      SUMI=0.
C
C   SURFACE AVERAGED TALLY NO.2 AND NO.18
C
      DO 102 IATM=1,NATMI
        LGVRA1(IATM,ISTRA)=.FALSE.
        LGVRA2(IATM,ISTRA)=.FALSE.
        SUMA1(IATM,ISTRA)=PRFAAT(IATM,I)
        SUMMTA=SUMMTA+SUMA1(IATM,ISTRA)*NPRT(IATM)
        SUMA=SUMA+SUMA1(IATM,ISTRA)
        SUMA2(IATM,ISTRA)=ERFAAT(IATM,I)
        SUMMEA=SUMMEA+SUMA2(IATM,ISTRA)
102   CONTINUE
C
      DO 121 N=1,NSIGSI
        IF (IIHW(N).EQ.2) THEN
          DO 122 IATM=1,NATMI
            IF (IGHW(N).NE.IATM) GOTO 122
            VARA1(IATM,ISTRA)=SIGMAW(N,I)
            LGVRA1(IATM,ISTRA)=LOGATM(IATM,ISTRA)
122       CONTINUE
        ELSEIF (IIHW(N).EQ.18) THEN
          DO 622 IATM=1,NATMI
            IF (IGHW(N).NE.IATM) GOTO 622
            VARA2(IATM,ISTRA)=SIGMAW(N,I)
            LGVRA2(IATM,ISTRA)=LOGATM(IATM,ISTRA)
622       CONTINUE
        ENDIF
121   CONTINUE
C
C
C   SURFACE AVERAGED TALLY NO.7 AND NO.23
C
      DO 103 IMOL=1,NMOLI
        LGVRM1(IMOL,ISTRA)=.FALSE.
        LGVRM2(IMOL,ISTRA)=.FALSE.
        SUMM1(IMOL,ISTRA)=PRFAML(IMOL,I)
        SUMMTA=SUMMTA+SUMM1(IMOL,ISTRA)*NPRT(NSPA+IMOL)
        SUMM=SUMM+SUMM1(IMOL,ISTRA)
        SUMM2(IMOL,ISTRA)=ERFAML(IMOL,I)
        SUMMEA=SUMMEA+SUMM2(IMOL,ISTRA)
103   CONTINUE
C
      DO 123 N=1,NSIGSI
        IF (IIHW(N).EQ.7) THEN
          DO 124 IMOL=1,NMOLI
            IF (IGHW(N).NE.IMOL) GOTO 124
            VARM1(IMOL,ISTRA)=SIGMAW(N,I)
            LGVRM1(IMOL,ISTRA)=LOGMOL(IMOL,ISTRA)
124       CONTINUE
        ELSEIF (IIHW(N).EQ.23) THEN
          DO 624 IMOL=1,NMOLI
            IF (IGHW(N).NE.IMOL) GOTO 624
            VARM2(IMOL,ISTRA)=SIGMAW(N,I)
            LGVRM2(IMOL,ISTRA)=LOGMOL(IMOL,ISTRA)
624       CONTINUE
        ENDIF
123   CONTINUE
C
C   SURFACE AVERAGED TALLY NO.12 AND NO.28
C
      DO 104 IION=1,NIONI
        LGVRI1(IION,ISTRA)=.FALSE.
        LGVRI2(IION,ISTRA)=.FALSE.
        SUMI1(IION,ISTRA)=PRFAIO(IION,I)
        SUMMTA=SUMMTA+SUMI1(IION,ISTRA)*NPRT(NSPAM+IION)
        SUMI=SUMI+SUMI1(IION,ISTRA)
        SUMI2(IION,ISTRA)=ERFAIO(IION,I)
        SUMMEA=SUMMEA+SUMI2(IION,ISTRA)
104   CONTINUE
C
      DO 125 N=1,NSIGSI
        IF (IIHW(N).EQ.12) THEN
          DO 126 IION=1,NIONI
            IF (IGHW(N).NE.IION) GOTO 126
            VARI1(IION,ISTRA)=SIGMAW(N,I)
            LGVRI1(IION,ISTRA)=LOGION(IION,ISTRA)
126       CONTINUE
        ELSEIF (IIHW(N).EQ.28) THEN
          DO 626 IION=1,NIONI
            IF (IGHW(N).NE.IION) GOTO 626
            VARI2(IION,ISTRA)=SIGMAW(N,I)
            LGVRI2(IION,ISTRA)=LOGION(IION,ISTRA)
626       CONTINUE
        ENDIF
125   CONTINUE
C
C
      TTTT=ABS(SUMA)+ABS(SUMM)+ABS(SUMI)
      IF (TTTT.EQ.0.D0.AND.ILIIN(I).GT.0) THEN
        CALL LEER(1)
        WRITE (6,*) 'NO FLUXES REEMITTED FROM INCIDENT ATOMS '
        CALL LEER(1)
      ELSE
        CALL LEER(1)
C
        IF (ILIIN(I).GT.0) THEN
        WRITE (6,*) 'FLUX REEMITTED FROM INCIDENT ATOMS:'
C  SURFACE AVERAGED TALLY NO. 2
        IF (SUMA.NE.0.D0) THEN
        WRITE (6,*) 'REEMITTED: ATOMS'
        CALL MASYR1('P-FLUX:  ',SUMA1,LOGATM,ISTRA,0,NATM,0,NSTRA,TEXTS)
        CALL MASYR1('ST.DEV.% ',VARA1,LGVRA1,ISTRA,0,NATM,0,NSTRA,TEXTS)
C  SURFACE AVERAGED TALLY NO. 18
        CALL MASYR1('E-FLUX:  ',SUMA2,LOGATM,ISTRA,0,NATM,0,NSTRA,TEXTS)
        CALL MASYR1('ST.DEV.% ',VARA2,LGVRA2,ISTRA,0,NATM,0,NSTRA,TEXTS)
        ENDIF
C  SURFACE AVERAGED TALLY NO. 7
        IF (SUMM.NE.0.D0) THEN
        WRITE (6,*) 'REEMITTED: MOLECULES'
        CALL MASYR1('P-FLUX:  ',SUMM1,LOGMOL,ISTRA,0,NMOL,0,NSTRA,
     .               TEXTS(NSPA+1))
        CALL MASYR1('ST.DEV.% ',VARM1,LGVRM1,ISTRA,0,NMOL,0,NSTRA,
     .               TEXTS(NSPA+1))
C  SURFACE AVERAGED TALLY NO. 23
        CALL MASYR1('E-FLUX:  ',SUMM2,LOGMOL,ISTRA,0,NMOL,0,NSTRA,
     .               TEXTS(NSPA+1))
        CALL MASYR1('ST.DEV.% ',VARM2,LGVRM2,ISTRA,0,NMOL,0,NSTRA,
     .               TEXTS(NSPA+1))
        ENDIF
C  SURFACE AVERAGED TALLY NO. 12
        IF (SUMI.NE.0.D0) THEN
        WRITE (6,*) 'REEMITTED: TEST IONS'
        CALL MASYR1('P-FLUX:  ',SUMI1,LOGION,ISTRA,0,NION,0,NSTRA,
     .               TEXTS(NSPAM+1))
        CALL MASYR1('ST.DEV.% ',VARI1,LGVRI1,ISTRA,0,NION,0,NSTRA,
     .               TEXTS(NSPAM+1))
C  SURFACE AVERAGED TALLY NO. 28
        CALL MASYR1('E-FLUX:  ',SUMI2,LOGION,ISTRA,0,NION,0,NSTRA,
     .               TEXTS(NSPAM+1))
        CALL MASYR1('ST.DEV.% ',VARI2,LGVRI2,ISTRA,0,NION,0,NSTRA,
     .               TEXTS(NSPAM+1))
        ENDIF
        CALL LEER (1)
        CALL MASR1 ('TOT.PFLX',SUMMTA)
        CALL MASR1 ('TOT.EFLX',SUMMEA)
C
        ELSEIF (ILIIN(I).LT.0) THEN
C  SURFACE AVERAGED TALLY NO. 2
        IF (SUMA.NE.0.D0) THEN
        WRITE (6,*) 'PARTIAL PARTICLE AND ENERGY CURRENTS, NEGATIVE '
        ITEXT=1
        WRITE (6,*) 'ATOMS'
        CALL MASYR1('P-FLUX:  ',SUMA1,LOGATM,ISTRA,0,NATM,0,NSTRA,TEXTS)
        CALL MASYR1('ST.DEV.% ',VARA1,LGVRA1,ISTRA,0,NATM,0,NSTRA,TEXTS)
C  SURFACE AVERAGED TALLY NO. 18
        CALL MASYR1('E-FLUX:  ',SUMA2,LOGATM,ISTRA,0,NATM,0,NSTRA,TEXTS)
        CALL MASYR1('ST.DEV.% ',VARA2,LGVRA2,ISTRA,0,NATM,0,NSTRA,TEXTS)
        CALL LEER (1)
        CALL MASR1 ('NEG.PFLX',SUMMTA)
        CALL MASR1 ('NEG.EFLX',SUMMEA)
        ENDIF
        ENDIF
      ENDIF
C
C
C   REEMITTED FLUXES, NEXT: FROM INCIDENT MOLECULES
      SUMMTM=0.
      SUMMEM=0.
      SUMA=0.
      SUMM=0.
      SUMI=0.
C
C   SURFACE AVERAGED TALLY NO.3 AND NO.19
C
      DO 1102 IATM=1,NATMI
        LGVRA1(IATM,ISTRA)=.FALSE.
        LGVRA2(IATM,ISTRA)=.FALSE.
        SUMA1(IATM,ISTRA)=PRFMAT(IATM,I)
        SUMMTM=SUMMTM+SUMA1(IATM,ISTRA)*NPRT(IATM)
        SUMA=SUMA+SUMA1(IATM,ISTRA)
        SUMA2(IATM,ISTRA)=ERFMAT(IATM,I)
        SUMMEM=SUMMEM+SUMA2(IATM,ISTRA)
1102  CONTINUE
C
      DO 1121 N=1,NSIGSI
        IF (IIHW(N).EQ.3) THEN
          DO 1122 IATM=1,NATMI
            IF (IGHW(N).NE.IATM) GOTO 1122
            VARA1(IATM,ISTRA)=SIGMAW(N,I)
            LGVRA1(IATM,ISTRA)=LOGATM(IATM,ISTRA)
1122      CONTINUE
        ELSEIF (IIHW(N).EQ.19) THEN
          DO 1622 IATM=1,NATMI
            IF (IGHW(N).NE.IATM) GOTO 1622
            VARA2(IATM,ISTRA)=SIGMAW(N,I)
            LGVRA2(IATM,ISTRA)=LOGATM(IATM,ISTRA)
1622      CONTINUE
        ENDIF
1121  CONTINUE
C
C   SURFACE AVERAGED TALLY NO.8 AND NO.24
C
      DO 1103 IMOL=1,NMOLI
        LGVRM1(IMOL,ISTRA)=.FALSE.
        LGVRM2(IMOL,ISTRA)=.FALSE.
        SUMM1(IMOL,ISTRA)=PRFMML(IMOL,I)
        SUMMTM=SUMMTM+SUMM1(IMOL,ISTRA)*NPRT(NSPA+IMOL)
        SUMM=SUMM+SUMM1(IMOL,ISTRA)
        SUMM2(IMOL,ISTRA)=ERFMML(IMOL,I)
        SUMMEM=SUMMEM+SUMM2(IMOL,ISTRA)
1103  CONTINUE
C
      DO 1123 N=1,NSIGSI
        IF (IIHW(N).EQ.8) THEN
          DO 1124 IMOL=1,NMOLI
            IF (IGHW(N).NE.IMOL) GOTO 1124
            VARM1(IMOL,ISTRA)=SIGMAW(N,I)
            LGVRM1(IMOL,ISTRA)=LOGMOL(IMOL,ISTRA)
1124      CONTINUE
        ELSEIF (IIHW(N).EQ.24) THEN
          DO 1624 IMOL=1,NMOLI
            IF (IGHW(N).NE.IMOL) GOTO 1624
            VARM2(IMOL,ISTRA)=SIGMAW(N,I)
            LGVRM2(IMOL,ISTRA)=LOGMOL(IMOL,ISTRA)
1624      CONTINUE
        ENDIF
1123  CONTINUE
C
C   SURFACE AVERAGED TALLY NO.13 AND NO.29
C
      DO 1104 IION=1,NIONI
        LGVRI1(IION,ISTRA)=.FALSE.
        LGVRI2(IION,ISTRA)=.FALSE.
        SUMI1(IION,ISTRA)=PRFMIO(IION,I)
        SUMMTM=SUMMTM+SUMI1(IION,ISTRA)*NPRT(NSPAM+IION)
        SUMI=SUMI+SUMI1(IION,ISTRA)
        SUMI2(IION,ISTRA)=ERFMIO(IION,I)
        SUMMEM=SUMMEM+SUMI2(IION,ISTRA)
1104   CONTINUE
C
      DO 1125 N=1,NSIGSI
        IF (IIHW(N).EQ.13) THEN
          DO 1126 IION=1,NIONI
            IF (IGHW(N).NE.IION) GOTO 1126
            VARI1(IION,ISTRA)=SIGMAW(N,I)
            LGVRI1(IION,ISTRA)=LOGION(IION,ISTRA)
1126      CONTINUE
        ELSEIF (IIHW(N).EQ.29) THEN
          DO 1626 IION=1,NIONI
            IF (IGHW(N).NE.IION) GOTO 1626
            VARI2(IION,ISTRA)=SIGMAW(N,I)
            LGVRI2(IION,ISTRA)=LOGION(IION,ISTRA)
1626      CONTINUE
        ENDIF
1125  CONTINUE
C
      TTTT=ABS(SUMA)+ABS(SUMM)+ABS(SUMI)
      IF (TTTT.EQ.0.D0.AND.ILIIN(I).GT.0) THEN
        CALL LEER(1)
        WRITE (6,*) 'NO FLUXES REEMITTED FROM INCIDENT MOLECULES '
        CALL LEER(1)
      ELSE
        CALL LEER(1)
C
        IF (ILIIN(I).GT.0) THEN
        WRITE (6,*) 'FLUX REEMITTED FROM INCIDENT MOLECULES:'
C  SURFACE AVERAGED TALLY NO. 3
        IF (SUMA.NE.0.D0) THEN
        WRITE (6,*) 'REEMITTED: ATOMS'
        CALL MASYR1('P-FLUX:  ',SUMA1,LOGATM,ISTRA,0,NATM,0,NSTRA,TEXTS)
        CALL MASYR1('ST.DEV.% ',VARA1,LGVRA1,ISTRA,0,NATM,0,NSTRA,TEXTS)
C  SURFACE AVERAGED TALLY NO. 19
        CALL MASYR1('E-FLUX:  ',SUMA2,LOGATM,ISTRA,0,NATM,0,NSTRA,TEXTS)
        CALL MASYR1('ST.DEV.% ',VARA2,LGVRA2,ISTRA,0,NATM,0,NSTRA,TEXTS)
        ENDIF
C  SURFACE AVERAGED TALLY NO. 8
        IF (SUMM.NE.0.D0) THEN
        WRITE (6,*) 'REEMITTED: MOLECULES'
        CALL MASYR1('P-FLUX:  ',SUMM1,LOGMOL,ISTRA,0,NMOL,0,NSTRA,
     .               TEXTS(NSPA+1))
        CALL MASYR1('ST.DEV.% ',VARM1,LGVRM1,ISTRA,0,NMOL,0,NSTRA,
     .               TEXTS(NSPA+1))
C  SURFACE AVERAGED TALLY NO. 24
        CALL MASYR1('E-FLUX:  ',SUMM2,LOGMOL,ISTRA,0,NMOL,0,NSTRA,
     .               TEXTS(NSPA+1))
        CALL MASYR1('ST.DEV.% ',VARM2,LGVRM2,ISTRA,0,NMOL,0,NSTRA,
     .               TEXTS(NSPA+1))
        ENDIF
C  SURFACE AVERAGED TALLY NO. 13
        IF (SUMI.NE.0.D0) THEN
        WRITE (6,*) 'REEMITTED: TEST IONS'
        CALL MASYR1('P-FLUX:  ',SUMI1,LOGION,ISTRA,0,NION,0,NSTRA,
     .               TEXTS(NSPAM+1))
        CALL MASYR1('ST.DEV.% ',VARI1,LGVRI1,ISTRA,0,NION,0,NSTRA,
     .               TEXTS(NSPAM+1))
C  SURFACE AVERAGED TALLY NO. 29
        CALL MASYR1('E-FLUX:  ',SUMI2,LOGION,ISTRA,0,NION,0,NSTRA,
     .               TEXTS(NSPAM+1))
        CALL MASYR1('ST.DEV.% ',VARI2,LGVRI2,ISTRA,0,NION,0,NSTRA,
     .               TEXTS(NSPAM+1))
        ENDIF
        CALL LEER (1)
        CALL MASR1 ('TOT.PFLX',SUMMTM)
        CALL MASR1 ('TOT.EFLX',SUMMEM)
C
        ELSEIF (ILIIN(I).LT.0) THEN
C  SURFACE AVERAGED TALLY NO. 8
        IF (SUMM.NE.0.D0) THEN
        IF (ITEXT.EQ.0)
     .  WRITE (6,*) 'PARTIAL PARTICLE AND ENERGY CURRENTS, NEGATIVE '
        ITEXT=1
        WRITE (6,*) 'MOLECULES'
        CALL MASYR1('P-FLUX:  ',SUMM1,LOGMOL,ISTRA,0,NMOL,0,NSTRA,
     .               TEXTS(NSPA+1))
        CALL MASYR1('ST.DEV.% ',VARM1,LGVRM1,ISTRA,0,NMOL,0,NSTRA,
     .               TEXTS(NSPA+1))
C  SURFACE AVERAGED TALLY NO. 24
        CALL MASYR1('E-FLUX:  ',SUMM2,LOGMOL,ISTRA,0,NMOL,0,NSTRA,
     .               TEXTS(NSPA+1))
        CALL MASYR1('ST.DEV.% ',VARM2,LGVRM2,ISTRA,0,NMOL,0,NSTRA,
     .               TEXTS(NSPA+1))
        CALL LEER (1)
        CALL MASR1 ('NEG.PFLX',SUMMTM)
        CALL MASR1 ('NEG.EFLX',SUMMEM)
        ENDIF
        ENDIF
      ENDIF
C
C
C   REEMITTED FLUXES, NEXT: FROM INCIDENT TEST-IONS
      SUMMTI=0.
      SUMMEI=0.
      SUMA=0.
      SUMM=0.
      SUMI=0.
C
C   SURFACE AVERAGED TALLY NO.4 AND NO.20
C
      DO 2102 IATM=1,NATMI
        LGVRA1(IATM,ISTRA)=.FALSE.
        LGVRA2(IATM,ISTRA)=.FALSE.
        SUMA1(IATM,ISTRA)=PRFIAT(IATM,I)
        SUMMTI=SUMMTI+SUMA1(IATM,ISTRA)*NPRT(IATM)
        SUMA=SUMA+SUMA1(IATM,ISTRA)
        SUMA2(IATM,ISTRA)=ERFIAT(IATM,I)
        SUMMEI=SUMMEI+SUMA2(IATM,ISTRA)
2102  CONTINUE
C
      DO 2121 N=1,NSIGSI
        IF (IIHW(N).EQ.4) THEN
          DO 2122 IATM=1,NATMI
            IF (IGHW(N).NE.IATM) GOTO 2122
            VARA1(IATM,ISTRA)=SIGMAW(N,I)
            LGVRA1(IATM,ISTRA)=LOGATM(IATM,ISTRA)
2122      CONTINUE
        ELSEIF (IIHW(N).EQ.20) THEN
          DO 2622 IATM=1,NATMI
            IF (IGHW(N).NE.IATM) GOTO 2622
            VARA2(IATM,ISTRA)=SIGMAW(N,I)
            LGVRA2(IATM,ISTRA)=LOGATM(IATM,ISTRA)
2622      CONTINUE
        ENDIF
2121  CONTINUE
C
C   SURFACE AVERAGED TALLY NO.9 AND NO.25
C
      DO 2103 IMOL=1,NMOLI
        LGVRM1(IMOL,ISTRA)=.FALSE.
        LGVRM2(IMOL,ISTRA)=.FALSE.
        SUMM1(IMOL,ISTRA)=PRFIML(IMOL,I)
        SUMMTI=SUMMTI+SUMM1(IMOL,ISTRA)*NPRT(NSPA+IMOL)
        SUMM=SUMM+SUMM1(IMOL,ISTRA)
        SUMM2(IMOL,ISTRA)=ERFIML(IMOL,I)
        SUMMEI=SUMMEI+SUMM2(IMOL,ISTRA)
2103  CONTINUE
C
      DO 2123 N=1,NSIGSI
        IF (IIHW(N).EQ.9) THEN
          DO 2124 IMOL=1,NMOLI
            IF (IGHW(N).NE.IMOL) GOTO 2124
            VARM1(IMOL,ISTRA)=SIGMAW(N,I)
            LGVRM1(IMOL,ISTRA)=LOGMOL(IMOL,ISTRA)
2124      CONTINUE
        ELSEIF (IIHW(N).EQ.25) THEN
          DO 2624 IMOL=1,NMOLI
            IF (IGHW(N).NE.IMOL) GOTO 2624
            VARM2(IMOL,ISTRA)=SIGMAW(N,I)
            LGVRM2(IMOL,ISTRA)=LOGMOL(IMOL,ISTRA)
2624      CONTINUE
        ENDIF
2123  CONTINUE
C
C   SURFACE AVERAGED TALLY NO.14 AND NO.30
C
      DO 2104 IION=1,NIONI
        LGVRI1(IION,ISTRA)=.FALSE.
        LGVRI2(IION,ISTRA)=.FALSE.
        SUMI1(IION,ISTRA)=PRFIIO(IION,I)
        SUMMTI=SUMMTI+SUMI1(IION,ISTRA)*NPRT(NSPAM+IION)
        SUMI=SUMI+SUMI1(IION,ISTRA)
        SUMI2(IION,ISTRA)=ERFIIO(IION,I)
        SUMMEI=SUMMEI+SUMI2(IION,ISTRA)
2104   CONTINUE
C
      DO 2125 N=1,NSIGSI
        IF (IIHW(N).EQ.14) THEN
          DO 2126 IION=1,NIONI
            IF (IGHW(N).NE.IION) GOTO 2126
            VARI1(IION,ISTRA)=SIGMAW(N,I)
            LGVRI1(IION,ISTRA)=LOGION(IION,ISTRA)
2126      CONTINUE
        ELSEIF (IIHW(N).EQ.30) THEN
          DO 2626 IION=1,NIONI
            IF (IGHW(N).NE.IION) GOTO 2626
            VARI2(IION,ISTRA)=SIGMAW(N,I)
            LGVRI2(IION,ISTRA)=LOGION(IION,ISTRA)
2626      CONTINUE
        ENDIF
2125  CONTINUE
C
      TTTT=ABS(SUMA)+ABS(SUMM)+ABS(SUMI)
      IF (TTTT.EQ.0.D0.AND.ILIIN(I).GT.0) THEN
        CALL LEER(1)
        WRITE (6,*) 'NO FLUXES REEMITTED FROM INCIDENT TEST IONS '
        CALL LEER(1)
      ELSE
        CALL LEER(1)
C
        IF (ILIIN(I).GT.0) THEN
        WRITE (6,*) 'FLUX REEMITTED FROM INCIDENT TEST IONS:'
C  SURFACE AVERAGED TALLY NO. 4
        IF (SUMA.NE.0.D0) THEN
        WRITE (6,*) 'REEMITTED: ATOMS'
        CALL MASYR1('P-FLUX:  ',SUMA1,LOGATM,ISTRA,0,NATM,0,NSTRA,TEXTS)
        CALL MASYR1('ST.DEV.% ',VARA1,LGVRA1,ISTRA,0,NATM,0,NSTRA,TEXTS)
C  SURFACE AVERAGED TALLY NO. 20
        CALL MASYR1('E-FLUX:  ',SUMA2,LOGATM,ISTRA,0,NATM,0,NSTRA,TEXTS)
        CALL MASYR1('ST.DEV.% ',VARA2,LGVRA2,ISTRA,0,NATM,0,NSTRA,TEXTS)
        ENDIF
C  SURFACE AVERAGED TALLY NO. 9
        IF (SUMM.NE.0.D0) THEN
        WRITE (6,*) 'REEMITTED: MOLECULES'
        CALL MASYR1('P-FLUX:  ',SUMM1,LOGMOL,ISTRA,0,NMOL,0,NSTRA,
     .               TEXTS(NSPA+1))
        CALL MASYR1('ST.DEV.% ',VARM1,LGVRM1,ISTRA,0,NMOL,0,NSTRA,
     .               TEXTS(NSPA+1))
C  SURFACE AVERAGED TALLY NO. 25
        CALL MASYR1('E-FLUX:  ',SUMM2,LOGMOL,ISTRA,0,NMOL,0,NSTRA,
     .               TEXTS(NSPA+1))
        CALL MASYR1('ST.DEV.% ',VARM2,LGVRM2,ISTRA,0,NMOL,0,NSTRA,
     .               TEXTS(NSPA+1))
        ENDIF
C  SURFACE AVERAGED TALLY NO. 14
        IF (SUMI.NE.0.D0) THEN
        WRITE (6,*) 'REEMITTED: TEST IONS'
        CALL MASYR1('P-FLUX:  ',SUMI1,LOGION,ISTRA,0,NION,0,NSTRA,
     .               TEXTS(NSPAM+1))
        CALL MASYR1('ST.DEV.% ',VARI1,LGVRI1,ISTRA,0,NION,0,NSTRA,
     .               TEXTS(NSPAM+1))
C  SURFACE AVERAGED TALLY NO. 30
        CALL MASYR1('E-FLUX:  ',SUMI2,LOGION,ISTRA,0,NION,0,NSTRA,
     .               TEXTS(NSPAM+1))
        CALL MASYR1('ST.DEV.% ',VARI2,LGVRI2,ISTRA,0,NION,0,NSTRA,
     .               TEXTS(NSPAM+1))
        ENDIF
        CALL LEER (1)
        CALL MASR1 ('TOT.PFLX',SUMMTI)
        CALL MASR1 ('TOT.EFLX',SUMMEI)
C
        ELSEIF (ILIIN(I).LT.0) THEN
C  SURFACE AVERAGED TALLY NO. 14
        IF (SUMI.NE.0.D0) THEN
        IF (ITEXT.EQ.0)
     .  WRITE (6,*) 'PARTIAL PARTICLE AND ENERGY CURRENTS, NEGATIVE '
        ITEXT=1
        WRITE (6,*) 'TEST IONS'
        CALL MASYR1('P-FLUX:  ',SUMI1,LOGION,ISTRA,0,NION,0,NSTRA,
     .               TEXTS(NSPAM+1))
        CALL MASYR1('ST.DEV.% ',VARI1,LGVRI1,ISTRA,0,NION,0,NSTRA,
     .               TEXTS(NSPAM+1))
C  SURFACE AVERAGED TALLY NO. 30
        CALL MASYR1('E-FLUX:  ',SUMI2,LOGION,ISTRA,0,NION,0,NSTRA,
     .               TEXTS(NSPAM+1))
        CALL MASYR1('ST.DEV.% ',VARI2,LGVRI2,ISTRA,0,NION,0,NSTRA,
     .               TEXTS(NSPAM+1))
        CALL LEER (1)
        CALL MASR1 ('NEG.PFLX',SUMMTI)
        CALL MASR1 ('NEG.EFLX',SUMMEI)
        ENDIF
        ENDIF
      ENDIF
C
      IF (ABS(SUMMTA)+ABS(SUMMTM)+ABS(SUMMTI).NE.0.D0) THEN
        CALL LEER (1)
C
        IF (ILIIN(I).GT.0) THEN
        WRITE (6,*) 'TOTAL REEMITTED FLUXES, EQUIV. FLUX-UNITS AND WATT'
        CALL MASR1 ('TOT.PFLX',SUMMTA+SUMMTM+SUMMTI)
        CALL MASR1 ('TOT.EFLX',SUMMEA+SUMMEM+SUMMEI)
        CALL LEER (1)
C
        ELSEIF (ILIIN(I).LT.0) THEN
        WRITE (6,*) 'TOTAL NEGATIVE FLUXES, EQUIV. FLUX-UNITS AND WATT'
        CALL MASR1 ('TOT.PFLX',SUMMTA+SUMMTM+SUMMTI)
        CALL MASR1 ('TOT.EFLX',SUMMEA+SUMMEM+SUMMEI)
        CALL LEER (1)
        ENDIF
      ENDIF
C
C
C   SPUTTERED FLUXES
C
C   SURFACE AVERAGED TALLY NO.33
C
      SUMMT=0.
      SUMMA=0.
      DO 202 IATM=1,NATMI
        LGVRA1(IATM,ISTRA)=.FALSE.
        SUMA1(IATM,ISTRA)=SPTAT(IATM,I)
        SUMMT=SUMMT+SUMA1(IATM,ISTRA)
        SUMMA=SUMMA+SUMA1(IATM,ISTRA)
202     CONTINUE
C
      DO 221 N=1,NSIGSI
        IF (IIHW(N).EQ.33) THEN
          DO 222 IATM=1,NATMI
            IF (IGHW(N).NE.IATM) GOTO 222
            VARA1(IATM,ISTRA)=SIGMAW(N,I)
            LGVRA1(IATM,ISTRA)=LOGATM(IATM,ISTRA)
222       CONTINUE
        ENDIF
221   CONTINUE
C
C   SURFACE AVERAGED TALLY NO.34
C
      SUMMM=0.
      DO 203 IMOL=1,NMOLI
        LGVRM1(IMOL,ISTRA)=.FALSE.
        SUMM1(IMOL,ISTRA)=SPTML(IMOL,I)
        SUMMT=SUMMT+SUMM1(IMOL,ISTRA)
        SUMMM=SUMMM+SUMM1(IMOL,ISTRA)
203   CONTINUE
C
      DO 223 N=1,NSIGSI
        IF (IIHW(N).EQ.34) THEN
          DO 224 IMOL=1,NMOLI
            IF (IGHW(N).NE.IMOL) GOTO 224
            VARM1(IMOL,ISTRA)=SIGMAW(N,I)
            LGVRM1(IMOL,ISTRA)=LOGMOL(IMOL,ISTRA)
224       CONTINUE
        ENDIF
223   CONTINUE
C
C   SURFACE AVERAGED TALLY NO.35
C
      SUMMI=0.
      DO 204 IION=1,NIONI
        LGVRI1(IION,ISTRA)=.FALSE.
        SUMI1(IION,ISTRA)=SPTIO(IION,I)
        SUMMT=SUMMT+SUMI1(IION,ISTRA)
        SUMMI=SUMMI+SUMI1(IION,ISTRA)
204   CONTINUE
C
      DO 225 N=1,NSIGSI
        IF (IIHW(N).EQ.35) THEN
          DO 226 IION=1,NIONI
            IF (IGHW(N).NE.IION) GOTO 226
            VARI1(IION,ISTRA)=SIGMAW(N,I)
            LGVRI1(IION,ISTRA)=LOGION(IION,ISTRA)
226       CONTINUE
        ENDIF
225   CONTINUE
C
C   SURFACE AVERAGED TALLY NO.36
C
      SUMMP=0.
      DO 205 IPLS=1,NPLSI
        LGVRP1(IPLS,ISTRA)=.FALSE.
        SUMP1(IPLS,ISTRA)=SPTPL(IPLS,I)
        SUMMT=SUMMT+SUMP1(IPLS,ISTRA)
        SUMMP=SUMMP+SUMP1(IPLS,ISTRA)
205   CONTINUE
C
      DO 227 N=1,NSIGSI
        IF (IIHW(N).EQ.36) THEN
          DO 228 IPLS=1,NPLSI
            IF (IGHW(N).NE.IPLS) GOTO 228
            VARP1(IPLS,ISTRA)=SIGMAW(N,I)
            LGVRP1(IPLS,ISTRA)=LOGPLS(IPLS,ISTRA)
228       CONTINUE
        ENDIF
227   CONTINUE
C
      IF (SUMMT.EQ.0.D0) THEN
        CALL LEER(1)
        CALL MASAGE ('NO FLUXES SPUTTERED FROM THIS SURFACE         ')
        CALL LEER(1)
        GOTO 206
      ENDIF
      CALL LEER(1)
      WRITE (6,*) 'FLUX SPUTTERED FROM SURFACE:'
      IF (SUMMA.NE.0.D0) THEN
C  SURFACE AVERAGED TALLY NO. 33
        CALL MASYR1('ATOMS    ',SUMA1,LOGATM,ISTRA,0,NATM,0,NSTRA,TEXTS)
        CALL MASYR1('ST.DEV.% ',VARA1,LGVRA1,ISTRA,0,NATM,0,NSTRA,TEXTS)
      ENDIF
      IF (SUMMM.NE.0.D0) THEN
C  SURFACE AVERAGED TALLY NO. 34
        CALL MASYR1('MOLECULES',SUMM1,LOGMOL,ISTRA,0,NMOL,0,NSTRA,
     .               TEXTS(NSPA+1))
        CALL MASYR1('ST.DEV.% ',VARM1,LGVRM1,ISTRA,0,NMOL,0,NSTRA,
     .               TEXTS(NSPA+1))
      ENDIF
      IF (SUMMI.NE.0.D0) THEN
C  SURFACE AVERAGED TALLY NO. 35
        CALL MASYR1('TEST IONS',SUMI1,LOGION,ISTRA,0,NION,0,NSTRA,
     .               TEXTS(NSPAM+1))
        CALL MASYR1('ST.DEV.% ',VARI1,LGVRI1,ISTRA,0,NION,0,NSTRA,
     .               TEXTS(NSPAM+1))
      ENDIF
      IF (SUMMP.NE.0.D0) THEN
C  SURFACE AVERAGED TALLY NO. 36
        CALL MASYR1('BULK IONS',SUMP1,LOGPLS,ISTRA,0,NPLS,0,NSTRA,
     .               TEXTS(NSPAMI+1))
        CALL MASYR1('ST.DEV.% ',VARP1,LGVRP1,ISTRA,0,NPLS,0,NSTRA,
     .               TEXTS(NSPAMI+1))
      ENDIF
      CALL LEER (1)
      CALL MASR1 ('TOT. FLX',SUMMT)

206   CONTINUE
C
C   ADDITIONAL SURFACE AVERAGED TALLIES
C
C   SURFACE AVERAGED TALLY NO. 38
C
      SUMMS=0.
      DO 302 IADS=1,NADSI
        TEXTA(IADS)=TXTSPS(IADS,NTLSA)
        LGVARS(IADS,ISTRA)=.FALSE.
        SUMS(IADS,ISTRA)=ADDS(IADS,I)
        LOGADS(IADS,ISTRA)=ADDS(IADS,I).NE.0.
        SUMMS=SUMMS+SUMS(IADS,ISTRA)
302   CONTINUE
C
      DO 321 N=1,NSIGSI
        IF (IIHW(N).NE.38) GOTO 321
        IF (IGHW(N).EQ.0) GOTO 321
        DO 322 IADS=1,NADSI
          IF (IGHW(N).NE.IADS) GOTO 322
          VARS(IADS,ISTRA)=SIGMAW(N,I)
          LGVARS(IADS,ISTRA)=LOGADS(IADS,ISTRA)
322     CONTINUE
321   CONTINUE
C
      IF (SUMMS.EQ.0.D0) THEN
        CALL LEER(1)
        CALL MASAGE ('NO ADDITIONAL SURFACE TALLIES AT THIS SURFACE ')
        CALL LEER(1)
        GOTO 305
      ENDIF
      CALL LEER(1)
      WRITE (6,*) 'ADDITIONAL SURFACE TALLIES:'
      IF (SUMMS.NE.0.D0) THEN
C  SURFACE AVERAGED TALLY NO. 38
        CALL MASYR1('ADD.TALLY',SUMS,LOGADS,ISTRA,0,NADS,0,NSTRA,TEXTA)
      ENDIF
      CALL LEER (1)
C
305   CONTINUE
C
C
C   ALGEBRAIC SURFACE AVERAGED TALLIES
C
C   SURFACE AVERAGED TALLY NO. 39
C
      SUMMS=0.
      DO 402 IALS=1,NALSI
        TEXTL(IALS)=TXTSPS(IALS,NTLSR)
        LGVARL(IALS,ISTRA)=.FALSE.
        SUML(IALS,ISTRA)=ALGS(IALS,I)
        LOGALS(IALS,ISTRA)=ALGS(IALS,I).NE.0.
        SUMMS=SUMMS+SUML(IALS,ISTRA)
402   CONTINUE
C
      DO 421 N=1,NSIGSI
        IF (IIHW(N).NE.39) GOTO 421
        IF (IGHW(N).EQ.0) GOTO 421
        DO 422 IALS=1,NALSI
          IF (IGHW(N).NE.IALS) GOTO 422
          VARL(IALS,ISTRA)=SIGMAW(N,I)
          LGVARL(IALS,ISTRA)=LOGALS(IALS,ISTRA)
422     CONTINUE
421   CONTINUE
C
      IF (SUMMS.EQ.0.D0) THEN
        CALL LEER(1)
        CALL MASAGE ('NO ALGEBRAIC SURFACE TALLIES AT THIS SURFACE ')
        CALL LEER(1)
        GOTO 405
      ENDIF
      CALL LEER(1)
      WRITE (6,*) 'ALGEBRAIC SURFACE TALLIES:'
      DO IALS=1,NALSI
        WRITE (6,*) 'NO ',IALS,'  ',TXTTLS(IALS,NTLSR)
      ENDDO
      IF (SUMMS.NE.0.D0) THEN
C  SURFACE AVERAGED TALLY NO. 39
        CALL MASYR1('         ',SUML,LOGALS,ISTRA,0,NALS,0,NSTRA,TEXTL)
      ENDIF
      CALL LEER (1)
C
405   CONTINUE
C
10000 CONTINUE
      RETURN
9999  FORMAT (1X,A32)
      END
C
      SUBROUTINE WRREC
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
C  EVALUATE EIRENE RECOMMENDATIONS FOR A NEXT RUN OF THE SAME MODEL
C
      INCLUDE 'PARMMOD'
      INCLUDE 'COMSOU'
      INCLUDE 'CTRCEI'
      INCLUDE 'CCONA'
      INCLUDE 'COUTAU'
      INCLUDE 'CAI'
C
      DIMENSION WTOTT(NSTRA),WMEAN(NSTRA),WREC(NSTRA),XNEXP(NSTRA),
     .          CPUFAC(NSTRA)
      OPEN (UNIT=14,ACCESS='SEQUENTIAL',FORM='UNFORMATTED')
      REWIND 14
C
C  FIRSTLY: STRATIFIED SOURCE SAMPLING
C
      IF (NSTRAI.EQ.1) THEN
        RATIO(1)=1.
        GOTO 350
      ENDIF
C
      WSUM=0.
      NREQ=0
      FTOT=0.
      DO 100 ISTRA=1,NSTRAI
        IF (XMCP(ISTRA).LE.0.D0) GOTO 100
        WTOTT(ISTRA)=-WTOTP(0,ISTRA)+WTOTA(0,ISTRA)+
     .                WTOTM(0,ISTRA)+WTOTI(0,ISTRA)
        WTOTT(ISTRA)=WTOTT(ISTRA)/(FLXFAC(ISTRA)+EPS60)
        WMEAN(ISTRA)=WTOTT(ISTRA)/(XMCP(ISTRA)+EPS60)
        WSUM=WSUM+WTOTT(ISTRA)
        NREQ=NREQ+NPTS(ISTRA)
        FTOT=FTOT+FLUXT(ISTRA)
100   CONTINUE
C
C  PROPORTIONAL ALLOCATION: RECOMMENDED REL. WEIGHT PER STRATUM: WREC
C                           EXPECTED REL. NO OF PARTICLES NEEDED: XNEXP
C                           RECOMMENDED NO. OF PARTICLES: NRECOM
C  NOT THE NO. OF PARTICLES BUT THE SUM OF BIRTH WEIGHTS PER STRATUM
C  IS ALLOCATED  PROPORTIONAL TO THE RELATIVE STRATUM POPULATION
C
C
      XNSUM=0.
      DO 200 ISTRA=1,NSTRAI
        IF (XMCP(ISTRA).LE.0.D0) GOTO 200
        WREC(ISTRA)=FLUXT(ISTRA)/(FTOT+EPS60)
        XNEXP(ISTRA)=WREC(ISTRA)/(WMEAN(ISTRA)+EPS60)
C  ACCOUNT FOR DIFFERENT COMPUTING SPEED AT DIFFERENT STRATA
C  ASSUME THEREFORE THAT ALLOCATED CPU TIME WAS PROPORTIONAL NPTS(ISTRA)
        CPUFAC(ISTRA)=XMCP(ISTRA)/(DBLE(NPTS(ISTRA))+EPS60)
        XNEXP(ISTRA)=XNEXP(ISTRA)/(CPUFAC(ISTRA)+EPS60)
        XNSUM=XNSUM+XNEXP(ISTRA)
200   CONTINUE
      DO 300 ISTRA=1,NSTRAI
        RATIO(ISTRA)=0.
        IF (XMCP(ISTRA).LE.0.D0) GOTO 300
C  SCALE XNEXP TO CONSERVE TOTAL NUMBER OF REQUESTED TRACKS
        XNEXP(ISTRA)=XNEXP(ISTRA)*DBLE(NREQ)/(XNSUM+EPS60)
C  CONVERT XNEXP TO AN INTERGER
        NRECOM(ISTRA)=IDINT(XNEXP(ISTRA))
        IF (XNEXP(ISTRA)-DBLE(NRECOM(ISTRA)).GT.0.5)
     .      NRECOM(ISTRA)=NRECOM(ISTRA)+1
        RATIO(ISTRA)=WREC(ISTRA)/(WTOTT(ISTRA)/(WSUM+EPS60)+EPS60)
300   CONTINUE
C
350   CONTINUE
      IF (TRCFLE) WRITE (6,*) 'WRITE 14: RATIO,NRECOM '
      WRITE (14) RATIO,NRECOM
C
      IF (.NOT.TRCREC.OR.NSTRAI.EQ.1) GOTO 1000
      CALL PAGE
      WRITE (6,*) '=================================================='
      WRITE (6,*) '= RECOMMENDED INPUT MODIFICATIONS FOR STRATIFIED ='
      WRITE (6,*) '= SOURCE SAMPLING                                ='
      WRITE (6,*) '=================================================='
      CALL LEER(3)
      WRITE (6,*) 'NPTS OLD = OLD INPUT VALUE FOR NPTS '
      WRITE (6,*) 'NPTS REC = EIRENE RECOMMENDATION FOR NEXT RUN '
      WRITE (6,*) 'RATIO    = RECOM. REL.WEIGHT / ACTUAL REL. WEIGHT'
      WRITE (6,*) 'VALUES OF RATIO CLOSE TO ONE MEAN '
      WRITE (6,*) '"ALMOST PROPORTIONAL ALLOCATION OF WEIGHTS"'
      CALL LEER(2)
      WRITE (6,*) 'STRAT. NO, NPTS OLD, NPTS REC, RATIO '
      DO 400 ISTRA=1,NSTRAI
        WRITE (6,'(1X,I2,8X,I6,4X,I6,5X,1P,E12.4)')
     .                ISTRA,NPTS(ISTRA),NRECOM(ISTRA),RATIO(ISTRA)
400   CONTINUE
      CALL LEER(2)
1000  CONTINUE
C
C  STRATIFIED SOURCE SAMPLING ACCESSMENT FINISHED
C
C  SECONDLY: WEIGHT WINDOWS
C
C  TO BE WRITTEN
C
      RETURN
C
      ENTRY RREC
C
      OPEN (UNIT=14,ACCESS='SEQUENTIAL',FORM='UNFORMATTED')
      REWIND 14
      IF (TRCFLE) WRITE (6,*) 'READ 14: RATIO,NRECOM '
      READ (14) RATIO,NRECOM
C
      RETURN
      END
C
      SUBROUTINE WRSNAP
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
C  SAVE SNAPSHOT POPULATION AT END OF TIMESTEP
C
      INCLUDE 'PARMMOD'
      INCLUDE 'COMSOU'
      INCLUDE 'COMPRT'
      INCLUDE 'COMNNL'
      INCLUDE 'CTRCEI'
C
      OPEN (UNIT=15,ACCESS='SEQUENTIAL',FORM='UNFORMATTED')
      REWIND 15
C
      IF (TRCFLE) WRITE (6,*) 'WRITE 15: IPRNL,FLUX,DTIMV '
      WRITE (15) IPRNL,FLUX(NSTRAI),DTIMV
      WRITE (15) ((RPARTC(I,J),J=1,NPARTT),I=1,IPRNL)
      WRITE (15)  (RPARTW(I)              ,I=0,IPRNL)
      WRITE (15) ((IPARTC(I,J),J=1,MPARTT),I=1,IPRNL)
c slmod begin - debug
      WRITE(0,*) 'TIMES WRSNAP:',(IPARTC(I,MPARTT),I=1,IPRNL)
c slmod end
C
      RETURN
C
      ENTRY RSNAP
C
      OPEN (UNIT=15,ACCESS='SEQUENTIAL',FORM='UNFORMATTED')
      REWIND 15
      READ (15) IPRNL,FLUX(NSTRAI),DTIMV
      IF (TRCFLE) WRITE (6,*) 'READ 15: IPRNL,FLUX,DTIMV '
      READ (15) ((RPARTC(I,J),J=1,NPARTT),I=1,IPRNL)
      READ (15)  (RPARTW(I)              ,I=0,IPRNL)
      READ (15) ((IPARTC(I,J),J=1,MPARTT),I=1,IPRNL)
C
      RETURN
      END
C
      SUBROUTINE GETSCL (ISTRA,FA,FM,FI)
C
C  FIND SCALING FACTORS TO ENFORCE PARTICLE BALANCE
C  SIMPLE VERSION: NOT SPLIT BY SPECIES, ONLY BY TYPE
C  MODIFIED JAN/95: INCLUDE SURFACE TALLIES IN MATRIX, NOT IN
C  INHOMOGENITY
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      INCLUDE 'PARMMOD'
      INCLUDE 'CCONA'
      INCLUDE 'COUTAU'
C
      DIMENSION FC(3),P(3,4),B(3)
      LOGICAL LCOLM(3),LROW(3)
C
C
      FC(1)=1.
      FC(2)=1.
      FC(3)=1.
C
C P(..,1)*FC(1)
C P(..,2)*FC(2)
C P(..,3)*FC(3)
C
      P(1,1)=PAATI(0,ISTRA)+POTATI(0,ISTRA)+PRFAAI(0,ISTRA)+
     .       PGENAI(0,ISTRA)
      P(1,2)=PMATI(0,ISTRA)+PRFMAI(0,ISTRA)
      P(1,3)=PIATI(0,ISTRA)+PRFIAI(0,ISTRA)
      P(2,1)=PAMLI(0,ISTRA)+PRFAMI(0,ISTRA)
      P(2,2)=PMMLI(0,ISTRA)+POTMLI(0,ISTRA)+PRFMMI(0,ISTRA)+
     .       PGENMI(0,ISTRA)
      P(2,3)=PIMLI(0,ISTRA)+PRFIMI(0,ISTRA)
      P(3,1)=PAIOI(0,ISTRA)+PRFAII(0,ISTRA)
      P(3,2)=PMIOI(0,ISTRA)+PRFMII(0,ISTRA)
      P(3,3)=PIIOI(0,ISTRA)+POTIOI(0,ISTRA)+PRFIII(0,ISTRA)+
     .       PGENII(0,ISTRA)
C
      B(1)=-(PPATI(0,ISTRA)+WTOTA(0,ISTRA))
      B(2)=-(PPMLI(0,ISTRA)+WTOTM(0,ISTRA))
      B(3)=-(PPIOI(0,ISTRA)+WTOTI(0,ISTRA))
C
      ICOL=0
      IROW=0
      DO 1 I=1,3
        LROW(I)=P(I,1)**2+P(I,2)**2+P(I,3)**2.GT.EPS30
        LCOLM(I)=P(1,I)**2+P(2,I)**2+P(3,I)**2.GT.EPS30
        IF (LROW(I)) IROW=IROW+1
        IF (LCOLM(I)) ICOL=ICOL+1
1     CONTINUE
C
      IF (IROW.EQ.0) THEN
C  NO ROW IS NON ZERO, I.E. NO PARTICLES FOLLOWED
        GOTO 1000
C
      ELSEIF (IROW.EQ.1) THEN
C  ONLY ONE ROW (NO. I) IS NON ZERO, I.E., ONLY ATOMS, ONLY MOLECULES
C                                    OR  ONLY TEST IONS ARE FOLLOWED
         DO 10 I=1,3
           IF (LROW(I)) THEN
             IF (LCOLM(1)) THEN
               FC(1)=(B(1)-P(I,2)-P(I,3))/P(I,1)
             ELSEIF (LCOLM(2)) THEN
               FC(2)=(B(2)-P(I,3))/P(I,2)
             ELSE
C  NOTHING TO BE DONE, ALL FC'S ARE 1.
             ENDIF
           ENDIF
10       CONTINUE
C
C
      ELSEIF (IROW.EQ.2) THEN
C  TWO ROWS ARE NON ZERO
        J1=0
        J2=0
C  DETERMINE THE INDICES FOR THE NON ZERO ROWS
        DO 20 J=1,3
          IF (LROW(J)) THEN
            IF (J1.EQ.0) THEN
              J1=J
            ELSE
              J2=J
            ENDIF
          ENDIF
20      CONTINUE
C
        IF (ICOL.EQ.1) THEN
C  ONLY ONE COLUMN IS NON ZERO
          DO 30 I=1,3
            IF (LCOLM(I)) FC(I)=B(J1)/P(J1,I)
30        CONTINUE
C
        ELSE
C  MORE THAN ONE COLUMN IS NON ZERO
          I1=0
          I2=0
          IF (ICOL.EQ.2) THEN
C  DETERMINE THE INDICES FOR THE NON ZERO COLUMNS
            DO 40 I=1,3
              IF (LCOLM(I)) THEN
                IF (I1.EQ.0) THEN
                  I1=I
                ELSE
                  I2=I
                ENDIF
              ENDIF
40          CONTINUE
C
          ELSE
            I1=1
            I2=2
            B(J1)=B(J1)-P(J1,3)
            B(J2)=B(J2)-P(J2,3)
          ENDIF
C
          FNEN=P(J1,I1)*P(J2,I2)-P(J2,I1)*P(J1,I2)
          IF (ABS(FNEN).GT.EPS12) THEN
            FC(I1)=(B(J1)*P(J2,I2)-B(J2)*P(J1,I2))/FNEN
            IF (ABS(P(J1,I2)).GT.EPS12) THEN
              FC(I2)=(B(J1)-P(J1,I1)*FC(I1))/P(J1,I2)
            ELSEIF (ABS(P(J2,I2)).GT.EPS12) THEN
              FC(I2)=(B(J2)-P(J2,I1)*FC(I1))/P(J2,I2)
            ENDIF
          ENDIF
        ENDIF
C
C
      ELSEIF (IROW.EQ.3) THEN
C
        IF (ICOL.EQ.1) THEN
          DO 50 I=1,3
            IF (LCOLM(I)) FC(I)=B(1)/P(1,I)
50        CONTINUE
C
        ELSEIF (ICOL.EQ.2) THEN
          I1=0
          I2=0
C  DETERMINE THE INDICES FOR THE NON ZERO COLUMNS
          DO 60 I=1,3
            IF (LCOLM(I)) THEN
              IF (I1.EQ.0) THEN
                I1=I
              ELSE
                I2=I
              ENDIF
            ENDIF
60        CONTINUE
C
          FNEN=P(1,I1)*P(2,I2)-P(2,I1)*P(1,I2)
          IF (ABS(FNEN).GT.EPS12) THEN
            FC(I1)=(B(1)*P(2,I2)-B(2)*P(1,I2))/FNEN
            IF (ABS(P(1,I2)).GT.EPS12) THEN
              FC(I2)=(B(1)-P(1,I1)*FC(I1))/P(1,I2)
            ELSEIF (ABS(P(2,I2)).GT.EPS12) THEN
              FC(I2)=(B(2)-P(2,I1)*FC(I1))/P(2,I2)
            ENDIF
          ENDIF
C
        ELSE
C  THE WHOLE MATRIX IS TO BE USED
          dta=deter(p(1,1),p(2,1),p(3,1),
     .              p(1,2),p(2,2),p(3,2),
     .              p(1,3),p(2,3),p(3,3))
          dtb1=deter(b(1),b(2),b(3),
     .               p(1,2),p(2,2),p(3,2),
     .               p(1,3),p(2,3),p(3,3))
          dtb2=deter(p(1,1),p(2,1),p(3,1),
     .               b(1),b(2),b(3),
     .               p(1,3),p(2,3),p(3,3))
          dtb3=deter(p(1,1),p(2,1),p(3,1),
     .               p(1,2),p(2,2),p(3,2),
     .               b(1),b(2),b(3))
          fc(1)=dtb1/(dta+1.d-30)
          fc(2)=dtb2/(dta+1.d-30)
          fc(3)=dtb3/(dta+1.d-30)
        ENDIF
      ENDIF
C
1000  CONTINUE
      CALL LEER(1)
      WRITE (6,*) 'EIRENE RECOMMENDED RESCALING OF VOLUME AVERAGED '
      WRITE (6,*) 'TALLIES DUE TO STATISTICAL ERRORS IN BALANCE '
      CALL MASR3 ('FATM,FMOL,FION          ',FC(1),FC(2),FC(3))
      CALL LEER(2)
C
      FA=FC(1)
      FM=FC(2)
      FI=FC(3)
C
      RETURN
      END
C
C   ****************************
C   *  NONANALOG METHODS, A.I. *
C   ****************************
C
C      SUBROUTINE NANALG
C
      SUBROUTINE NANALG
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
C   SET UP SPLITTING SURFACES
C
      INCLUDE 'PARMMOD'
      INCLUDE 'COMPRT'
      INCLUDE 'CGRID'
      INCLUDE 'COMSPL'
      INCLUDE 'CTRCEI'
      DIMENSION RSPLIT(N1ST)
C---------------------------------------------------------------------
      CALL ZEROI (NODES,15)
      CALL ZEROA1 (RSPLIT,N1ST)
      CALL ZEROL (NLSPLT,0,N1ST+N2ND+N3RD+NLIM)
C
C
100   CONTINUE
C  SET RADIAL SPLITTING SURFACES
      IF(NR1ST.LE.2) GOTO 200
C
C  DEFAULT MODEL: 101--119
C
C  HARD WIRED OPTIONS FOR RADIAL SPLITTING SURFACES
C  USES: MAXRAD, SPLPAR, AND RHOSRF-GRID
C  SETS: RSPLIT(ISURF) : SPLITTING SURFACE RADIA
C  FINDS: JS: RADIAL SURFACE NUMBER TO BE USED AS SPLITTING SURFACE
C
      IF (LEVGEO.LE.3.AND.MAXRAD.LT.0) THEN
        MMXRAD=ABS(MAXRAD)
        MAXR1=MMXRAD+1
        XMAXR1=MMXRAD+1
        DO 101 J=2,MAXR1
          RSPLIT(J-1)=RHOSRF(1)+(J-1)/XMAXR1*(RHOSRF(NR1ST)-RHOSRF(1))
101     CONTINUE
C
C
C
        DO 110 JS=2,NR1ST
          ZR1=RHOSRF(JS-1)
          ZR2=RHOSRF(JS)
          DO 104 JR=1,MMXRAD
            IF(RSPLIT(JR).GE.ZR2.OR.RSPLIT(JR).LT.ZR1) GOTO 104
C  RADIAL SURFACE JS SHOULD BE USED AS SPLITTING SURFACE
            RNUMB(JS)=SPLPAR
            NLSPLT(JS)=.TRUE.
104       CONTINUE
110     CONTINUE
        GOTO 200
      ENDIF
C
C  NON DEFAULT MODEL: 121--199
C
      DO 121 IRD=1,MAXRAD
        DO IR=1,NR1ST
          IF (IR.EQ.NSSPL(IRD)) THEN
            RNUMB(IR)=PRMSPL(IRD)
            NLSPLT(IR)=.TRUE.
          ENDIF
        ENDDO
121   CONTINUE
C
200   CONTINUE
C
C  SET POLOIDAL SPLITTING SURFACES
      IF(NP2ND.LE.2) GOTO 300
C
C  NON DEFAULT MODEL: 221--299
C
      DO 221 IRP=1,MAXPOL
        DO IP=1,NP2ND
          IF (IP.EQ.NSSPL(N1ST+IRP)) THEN
            RNUMB(N1ST+IP)=PRMSPL(N1ST+IRP)
            NLSPLT(N1ST+IP)=.TRUE.
          ENDIF
        ENDDO
221   CONTINUE
C
300   CONTINUE
C
C  SET TOROIDAL SPLITTING SURFACES
      IF(NT3RD.LE.2) GOTO 400
C
C  NON DEFAULT MODEL: 321--399
C
      DO 321 IRT=1,MAXTOR
        DO IT=1,NT3RD
          IF (IT.EQ.NSSPL(N1ST+N2ND+IRT)) THEN
            RNUMB(N1ST+N2ND+IT)=PRMSPL(N1ST+N2ND+IRT)
            NLSPLT(N1ST+N2ND+IT)=.TRUE.
          ENDIF
        ENDDO
321   CONTINUE
C
400   CONTINUE
C  SET ADDITIONAL SPLITTING SURFACES
      IF(NLIMI.LE.0) GOTO 500
C
C  NON DEFAULT MODEL: 421--499
C
      DO 421 IRA=1,MAXADD
        DO IA=1,NLIMI
          IF (IA.EQ.NSSPL(N1ST+N2ND+N3RD+IRA)) THEN
            RNUMB(N1ST+N2ND+N3RD+IA)=PRMSPL(N1ST+N2ND+N3RD+IRA)
            NLSPLT(N1ST+N2ND+N3RD+IA)=.TRUE.
          ENDIF
        ENDDO
421   CONTINUE
C
500   IF (.NOT.TRCNAL) RETURN
      WRITE (6,*) 'SPLITTING SURFACES, BELONGING TO THE STANDARD  MESH '
      CALL LEER(1)
      WRITE (6,*) 'NLSPLT(ISURF)=TRUE INDICATES THAT THE'
      WRITE (6,*) 'SURFACE WITH NUMBER ISURF IS SPLITTING'
      IF (NR1ST.GT.1) THEN
        WRITE (6,*) 'RADIAL SURFACES: '
        CALL MASAL1 ('NLSPLT',NLSPLT(1),NR1ST)
      ENDIF
      IF (NP2ND.GT.1) THEN
        WRITE (6,*) 'POLOIDAL SURFACES: '
        CALL MASAL1 ('NLSPLT',NLSPLT(N1ST+1),NP2ND)
      ENDIF
      IF (NT3RD.GT.1) THEN
        WRITE (6,*) 'TOROIDAL SURFACES: '
        CALL MASAL1 ('NLSPLT',NLSPLT(N1ST+N2ND+1),NT3RD)
      ENDIF
      IF (NLIMI.GE.1) THEN
        WRITE (6,*) 'ADDITIONAL SURFACES: '
        CALL MASAL1 ('NLSPLT',NLSPLT(N1ST+N2ND+N3RD+1),NLIMI)
      ENDIF
      CALL LEER(1)
      RETURN
      END
C
C
      SUBROUTINE ALGTAL
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      INCLUDE 'PARMMOD'
      INCLUDE 'CESTIM'
      INCLUDE 'CSPEI'
      INCLUDE 'CGRID'
      INCLUDE 'CGEOM'
      INCLUDE 'COMUSR'
      INCLUDE 'COMPRT'
      INCLUDE 'COUTAU'
      INCLUDE 'CTEXT'
      INCLUDE 'CCONA'
C
      CHARACTER*72 HCHR
      CHARACTER*1 OPER(20)
      DIMENSION IZIF(4,20),VEC1(NRAD),VEC2(NRAD),RESULT(2,NRAD)
      LOGICAL LLIMPS(NLIMPS),LLMPS
      DIMENSION CONST(20),IIND(20)
      LOGICAL LFREE1,LFREE2
C
      DIMENSION ESTIM(NESTIM),OUTAU(NOUTAU),PLPRM(NPLPRM)
C
      EQUIVALENCE (ESTIM(1),PDENA(1,1))
      EQUIVALENCE (OUTAU(1),PDENAI(0,0))
      EQUIVALENCE (PLPRM(1),TEIN(1))
C
C     CALCULATE ALGEBRAIC VOLUME TALLIES
C
C
      DO 200 IALV=1,NALVI
C
        HCHR=CHRTAL(IALV)
C
        CALL ALGEBR (HCHR,OPER,IZIF,CONST,NOP)
C
        DO 1 IOP=1,NOP
          IIND(IOP)=0
C         WRITE (6,*) IOP,OPER(IOP),(IZIF(J,IOP),J=1,4)
1      CONTINUE
       LFREE1=.TRUE.
       LFREE2=.TRUE.
C
        DO 100 IOP=1,NOP
C
C  1. OPERAND
C
C  TALLY HOLEN
          IF (IZIF(2,IOP).GT.0) THEN
            IF (IZIF(2,IOP).GT.NTALV) GOTO 90
            IF (IZIF(1,IOP).GT.NFSTVI(IZIF(2,IOP))) GOTO 91
            DO 10 I=1,NSBOX
              IINDEX=NADDV(IZIF(2,IOP))*NRAD+(I-1)*NFIRST(IZIF(2,IOP))+
     .              IZIF(1,IOP)
              VEC1(I)=ESTIM(IINDEX)
10          CONTINUE
C
          ELSEIF (IZIF(2,IOP).LT.0) THEN
            ITL=IABS(IZIF(2,IOP))
            IF (ITL.GT.NTALI) GOTO 90
            IF (IZIF(1,IOP).GT.NFRSTP(ITL)) GOTO 91
            DO 11 I=1,NSBOX
              IINDEX=NADDP(ITL)*NRAD+(I-1)*NFRSTP(ITL)+IZIF(1,IOP)
              VEC1(I)=PLPRM(IINDEX)
11          CONTINUE
C
C  KONSTANTE WURDE EINGELESEN
          ELSEIF (IZIF(1,IOP).LT.0) THEN
            DO 15 I=1,NSBOX
              VEC1(I)=CONST(IOP)
15          CONTINUE
C
          ELSE
C  ZWISCHENERGEBNIS HOLEN
            IF (IIND(IZIF(1,IOP)).EQ.1) THEN
              DO 20 I=1,NSBOX
                VEC1(I)=RESULT(1,I)
                IIND(IZIF(1,IOP))=0
20            CONTINUE
              LFREE1=.TRUE.
            ELSEIF (IIND(IZIF(1,IOP)).EQ.2) THEN
              DO 21 I=1,NSBOX
                VEC1(I)=RESULT(2,I)
                IIND(IZIF(1,IOP))=0
21            CONTINUE
              LFREE2=.TRUE.
            ELSE
              GOTO 92
            ENDIF
          ENDIF
C
C  2. OPERAND
C
C  TALLY HOLEN
          IF (IZIF(4,IOP).GT.0) THEN
            IF (IZIF(4,IOP).GT.NTALV) GOTO 90
            IF (IZIF(3,IOP).GT.NFSTVI(IZIF(4,IOP))) GOTO 91
            DO 30 I=1,NSBOX
              IINDEX=NADDV(IZIF(4,IOP))*NRAD+(I-1)*NFIRST(IZIF(4,IOP))+
     .              IZIF(3,IOP)
              VEC2(I)=ESTIM(IINDEX)
30          CONTINUE
C
          ELSEIF (IZIF(4,IOP).LT.0) THEN
            ITL=IABS(IZIF(4,IOP))
            IF (ITL.GT.NTALI) GOTO 90
            IF (IZIF(3,IOP).GT.NFRSTP(ITL)) GOTO 91
            DO 31 I=1,NSBOX
              IINDEX=NADDP(ITL)*NRAD+(I-1)*NFRSTP(ITL)+IZIF(3,IOP)
              VEC2(I)=PLPRM(IINDEX)
31          CONTINUE
C
          ELSEIF (IZIF(3,IOP).LT.0) THEN
            DO 35 I=1,NSBOX
              VEC2(I)=CONST(IOP)
35          CONTINUE
C
          ELSE
C  ZWISCHENERGEBNIS HOLEN
            IF (IIND(IZIF(3,IOP)).EQ.1) THEN
              DO 40 I=1,NSBOX
                VEC2(I)=RESULT(1,I)
                IIND(IZIF(3,IOP))=0
40            CONTINUE
              LFREE1=.TRUE.
            ELSEIF (IIND(IZIF(3,IOP)).EQ.2) THEN
              DO 41 I=1,NSBOX
                VEC2(I)=RESULT(2,I)
                IIND(IZIF(3,IOP))=0
41            CONTINUE
              LFREE2=.TRUE.
            ELSE
              GOTO 92
            ENDIF
          ENDIF
C
C
C  BERECHNE ZWISCHENERGEBNIS UND SPEICHERE AUF RESULT(II,....)
C
          IF (LFREE1) THEN
            II=1
            IIND(IOP)=1
            LFREE1=.FALSE.
          ELSEIF (LFREE2) THEN
            II=2
            IIND(IOP)=2
            LFREE2=.FALSE.
          ELSE
            GOTO 92
          ENDIF
C
          IF (OPER(IOP).EQ.'+') THEN
            DO 50 I=1,NSBOX
              RESULT(II,I)=VEC1(I)+VEC2(I)
50          CONTINUE
          ELSEIF (OPER(IOP).EQ.'-') THEN
            DO 60 I=1,NSBOX
              RESULT(II,I)=VEC1(I)-VEC2(I)
60          CONTINUE
          ELSEIF (OPER(IOP).EQ.'*') THEN
            DO 70 I=1,NSBOX
              RESULT(II,I)=VEC1(I)*VEC2(I)
70          CONTINUE
          ELSEIF (OPER(IOP).EQ.'/') THEN
            DO 81 I=1,NSBOX
              IF (VEC2(I).NE.0.D0) GOTO 82
81          CONTINUE
C  DIVISION BY ZERO TALLY. ALGEBR. TALLY IRRELEVANT. RETURN ZERO TALLY
            DO 83 I=1,NSBOX
              RESULT(II,I)=0.
83          CONTINUE
            GOTO 120
82          DO 80 I=1,NSBOX
              RESULT(II,I)=VEC1(I)/(VEC2(I)+EPS30)
80          CONTINUE
          ELSEIF (OPER(IOP).EQ.'^') THEN
            DO 85 I=1,NSBOX
              RESULT(II,I)=VEC1(I)**VEC2(I)
85          CONTINUE
          ELSE
            GOTO 93
          ENDIF
C
          GOTO 100
C
90        CONTINUE
          WRITE (6,*) ' ERROR IN SUBROUTINE ALGTAL '
          WRITE (6,*) ' TALLY NUMBER OUT OF RANGE '
          WRITE (6,*) ' CHECK INPUT FOR ADDITIONAL VOLUME TALLY NO. ',
     .                 IALV
          WRITE (6,*) CHRTAL(IALV)
          GOTO 200
C
91        CONTINUE
          WRITE (6,*) ' ERROR IN SUBROUTINE ALGTAL '
          WRITE (6,*) ' SPECIES INDEX OUT OF RANGE '
          WRITE (6,*) ' CHECK INPUT FOR ADDITIONAL VOLUME TALLY NO. ',
     .                 IALV
          WRITE (6,*) CHRTAL(IALV)
          GOTO 200
C
92        CONTINUE
          WRITE (6,*) ' ERROR IN SUBROUTINE ALGTAL '
          WRITE (6,*) ' WRONG NUMBER OF INTERMEDIATE RESULT FOUND '
          WRITE (6,*) CHRTAL(IALV)
          WRITE (6,'(1X,A,4I4)') (OPER(J),(IZIF(K,J),K=1,4),J=1,NOP)
          GOTO 200
C
93        CONTINUE
          WRITE (6,*) ' ERROR IN SUBROUTINE ALGTAL '
          WRITE (6,*) ' OPERATOR NOT FORESEEN '
          WRITE (6,*) ' NO CALCULATION IS DONE FOR TALLY NO. ',IALV
          WRITE (6,*) CHRTAL(IALV)
          WRITE (6,'(1X,A,4I4)') (OPER(J),(IZIF(K,J),K=1,4),J=1,NOP)
          GOTO 200
C
C
100     CONTINUE
C
C  STORE RESULT IN ALGV
120     DO 150 J=1,NSBOX
          ALGV(IALV,J)=RESULT(II,J)
150     CONTINUE
C
200   CONTINUE
C
C
C     CALCULATE ALGEBRAIC SURFACE TALLIES
C
      IF (NLIMPS.GT.NRAD) GOTO 999
C
      DO 500 IALS=1,NALSI
C
        HCHR=CHRTLS(IALS)
C
        CALL ALGEBR (HCHR,OPER,IZIF,CONST,NOP)
C
        LLMPS=.FALSE.
        DO J=1,NLIMPS
          VEC1(J)=0.D0
          VEC2(J)=0.D0
          LLIMPS(J)=.FALSE.
        ENDDO
        DO 301 IOP=1,NOP
          IIND(IOP)=0
C         WRITE (6,*) IOP,OPER(IOP),(IZIF(J,IOP),J=1,4)
301    CONTINUE
       LFREE1=.TRUE.
       LFREE2=.TRUE.
C
        DO 400 IOP=1,NOP
C
C  1. OPERAND
C
C  TALLY HOLEN
          IF (IZIF(2,IOP).GT.0) THEN
            IF (IZIF(2,IOP).GT.NTALS) GOTO 390
            IF (IZIF(1,IOP).GT.NFRSTW(IZIF(2,IOP))) THEN
              IZIF(1,IOP)=IZIF(1,IOP)-NFRSTW(IZIF(2,IOP))
              IF (IZIF(1,IOP).GT.NFRSTW(IZIF(2,IOP))*NLIMPS) GOTO 391
              ILIMPS=(IZIF(1,IOP)-1)/NFRSTW(IZIF(2,IOP))+1
              ISPZ=IZIF(1,IOP)-(ILIMPS-1)*NFRSTW(IZIF(2,IOP))
              IINDEX=NADDW(IZIF(2,IOP))*NLMPGS+IZIF(1,IOP)+NESTM1
              IZIF(1,IOP)=ISPZ
              VEC1(1)=ESTIM(IINDEX)
              LLIMPS(ILIMPS)=.TRUE.
              LLMPS=.TRUE.
            ELSE
            DO 310 I=1,NLIMPS
              IINDEX=NADDW(IZIF(2,IOP))*NLMPGS+(I-1)*NFRSTW(IZIF(2,IOP))
     .              +IZIF(1,IOP)+NESTM1
              VEC1(I)=ESTIM(IINDEX)
310         CONTINUE
            ENDIF
C
C
C  KONSTANTE WURDE EINGELESEN
          ELSEIF (IZIF(1,IOP).LT.0) THEN
            DO 315 I=1,NLIMPS
              VEC1(I)=CONST(IOP)
315          CONTINUE
C
          ELSE
C  ZWISCHENERGEBNIS HOLEN
            IF (IIND(IZIF(1,IOP)).EQ.1) THEN
              DO 320 I=1,NLIMPS
                VEC1(I)=RESULT(1,I)
                IIND(IZIF(1,IOP))=0
320           CONTINUE
              LFREE1=.TRUE.
            ELSEIF (IIND(IZIF(1,IOP)).EQ.2) THEN
              DO 321 I=1,NLIMPS
                VEC1(I)=RESULT(2,I)
                IIND(IZIF(1,IOP))=0
321           CONTINUE
              LFREE2=.TRUE.
            ELSE
              GOTO 392
            ENDIF
          ENDIF
C
C  2. OPERAND
C
C  TALLY HOLEN
          IF (IZIF(4,IOP).GT.0) THEN
            IF (IZIF(4,IOP).GT.NTALS) GOTO 390
            IF (IZIF(3,IOP).GT.NFRSTW(IZIF(4,IOP))) THEN
              IZIF(3,IOP)=IZIF(3,IOP)-NFRSTW(IZIF(4,IOP))
              IF (IZIF(3,IOP).GT.NFRSTW(IZIF(4,IOP))*NLIMPS) GOTO 391
              ILIMPS=(IZIF(3,IOP)-1)/NFRSTW(IZIF(4,IOP))+1
              ISPZ=IZIF(3,IOP)-(ILIMPS-1)*NFRSTW(IZIF(4,IOP))
              IINDEX=NADDW(IZIF(4,IOP))*NLMPGS+IZIF(3,IOP)+NESTM1
              IZIF(3,IOP)=ISPZ
              VEC2(1)=ESTIM(IINDEX)
              LLIMPS(ILIMPS)=.TRUE.
              LLMPS=.TRUE.
            ELSE
            DO 330 I=1,NLIMPS
              IINDEX=NADDW(IZIF(4,IOP))*NLMPGS+(I-1)*NFRSTW(IZIF(4,IOP))
     .              +IZIF(3,IOP)+NESTM1
              VEC2(I)=ESTIM(IINDEX)
330         CONTINUE
            ENDIF
C
C
C  KONSTANTE WURDE EINGELESEN
          ELSEIF (IZIF(3,IOP).LT.0) THEN
            DO 335 I=1,NLIMPS
              VEC2(I)=CONST(IOP)
335         CONTINUE
C
          ELSE
C  ZWISCHENERGEBNIS HOLEN
            IF (IIND(IZIF(3,IOP)).EQ.1) THEN
              DO 340 I=1,NLIMPS
                VEC2(I)=RESULT(1,I)
                IIND(IZIF(3,IOP))=0
340            CONTINUE
              LFREE1=.TRUE.
            ELSEIF (IIND(IZIF(3,IOP)).EQ.2) THEN
              DO 341 I=1,NLIMPS
                VEC2(I)=RESULT(2,I)
                IIND(IZIF(3,IOP))=0
341           CONTINUE
              LFREE2=.TRUE.
            ELSE
              GOTO 392
            ENDIF
          ENDIF
C
C  BERECHNE ZWISCHENERGEBNIS UND SPEICHERE AUF RESULT(II,....)
C
          IF (LFREE1) THEN
            II=1
            IIND(IOP)=1
            LFREE1=.FALSE.
          ELSEIF (LFREE2) THEN
            II=2
            IIND(IOP)=2
            LFREE2=.FALSE.
          ELSE
            GOTO 392
          ENDIF
C
          IF (OPER(IOP).EQ.'+') THEN
            DO 350 I=1,NLIMPS
              RESULT(II,I)=VEC1(I)+VEC2(I)
350         CONTINUE
          ELSEIF (OPER(IOP).EQ.'-') THEN
            DO 360 I=1,NLIMPS
              RESULT(II,I)=VEC1(I)-VEC2(I)
360         CONTINUE
          ELSEIF (OPER(IOP).EQ.'*') THEN
            DO 370 I=1,NLIMPS
              RESULT(II,I)=VEC1(I)*VEC2(I)
370         CONTINUE
          ELSEIF (OPER(IOP).EQ.'/') THEN
            DO 381 I=1,NLIMPS
              IF (VEC2(I).NE.0.D0) GOTO 382
381         CONTINUE
C  DIVISION BY ZERO TALLY. ALGEBR. TALLY IRRELEVANT. RETURN ZERO TALLY
            DO 383 I=1,NLIMPS
              RESULT(II,I)=0.
383         CONTINUE
            GOTO 420
382         DO 380 I=1,NLIMPS
              RESULT(II,I)=VEC1(I)/(VEC2(I)+EPS30)
380         CONTINUE
          ELSEIF (OPER(IOP).EQ.'^') THEN
            DO 385 I=1,NLIMPS
              RESULT(II,I)=VEC1(I)**VEC2(I)
385         CONTINUE
          ELSE
            GOTO 393
          ENDIF
C
          GOTO 400
C
390       CONTINUE
          WRITE (6,*) ' TALLY NUMBER OUT OF RANGE '
          WRITE (6,*) ' CHECK INPUT FOR ADDITIONAL SURFACE TALLY NO. ',
     .                 IALS
          WRITE (6,*) CHRTLS(IALS)
          GOTO 500
C
391       CONTINUE
          WRITE (6,*) ' SPECIES INDEX OUT OF RANGE '
          WRITE (6,*) ' CHECK INPUT FOR ADDITIONAL SURFACE TALLY NO. ',
     .                 IALS
          WRITE (6,*) CHRTLS(IALS)
          GOTO 500
C
392       CONTINUE
          WRITE (6,*) ' ERROR IN SUBROUTINE ALGEBR '
          WRITE (6,*) ' WRONG NUMBER OF INTERMEDIATE RESULT FOUND '
          WRITE (6,*) CHRTLS(IALS)
          WRITE (6,'(1X,A,4I4)') (OPER(J),(IZIF(K,J),K=1,4),J=1,NOP)
          GOTO 500
393       CONTINUE
C
          WRITE (6,*) ' OPERATOR NOT FORESEEN '
          WRITE (6,*) ' NO CALCULATION IS DONE FOR TALLY NO. ',IALS
          WRITE (6,*) CHRTLS(IALS)
          WRITE (6,'(1X,A,4I4)') (OPER(J),(IZIF(K,J),K=1,4),J=1,NOP)
          GOTO 500
C
C
400     CONTINUE
C
C  STORE RESULT IN ALGS
420     CONTINUE
        IF (LLMPS) THEN
          DO 440 J=1,NLIMPS
            IF (LLIMPS(J)) ALGS(IALS,J)=RESULT(II,1)
440       CONTINUE
        ELSE
          DO 450 J=1,NLIMPS
            ALGS(IALS,J)=RESULT(II,J)
450       CONTINUE
        ENDIF
C
500   CONTINUE
C
      RETURN
999   CONTINUE
      WRITE (6,*) 'STORAGE CONFLICT IN ALGTAL, BECAUSE NRAD<NLIMPS'
      CALL EXIT
      END
C
      FUNCTION RSTERN (ER,B,IFLAG)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
C     IFLAG=1:  H+ + H
C     IFLAG=2:  H+ + HE
C     IFLAG=3:  H+ + H2
C
C  RSTERN(ER,B) IS THE LARGEST ROOT OF THE EQUATION:
C
C     FI(R):=1.-V(R)/ER-(B/R)**2=0.
C
C   HERE:  ER COLLISION ENERGY (EV)
C          B  IMPACT PARAMETER
C          V  INTERACTION POTENTIAL (EV)
C
      DIMENSION RV0(3),RVM(3),RVW(3),VM(3),VW(3),VSW(3)
      SAVE
      DATA IFIRST /0/
      DATA RV0/0.,0.99699,2.18039/
      DATA RVM/0.,1.4556 ,2.835539/,VM /0.,-2.     ,-2.7/
      DATA RVW/0.,1.99515,3.490687/,VW /0.,-1.5    ,-2.025/,
     .                              VSW/0.,1.284688,1.4283/
C
C
      IF (IFLAG.EQ.1) THEN
C  FIND UPPER AND LOWER BOUND FOR NUMERICAL ROOT FINDER RTSAFE
C  FOR IFLAG=1, RLW=B IS A LOWER BOUND AND RUP=INF IS AN UPPER BOUND.
C  FIRST TRY TO FIND BETTER BOUNDS:
        RUP=B
C
10      RLW=RUP
        RUP=RLW*2.
        FITEST=FI(RUP,ER,B,IFLAG,DFI)
        IF (FITEST.LT.0.D0) GOTO 10
C
        TOL=1.D-7*(RUP-RLW)
        RSTERN=RTSAF(RLW,RUP,TOL,ER,B,IFLAG)
C
      ELSEIF (IFLAG.EQ.2.OR.IFLAG.EQ.3) THEN
C  FIND UPPER AND LOWER BOUND FOR NUMERICAL ROOT FINDER RTSAFE
C  FOR IFLAG=2 AND IFLAG=3, THE FOLLOWING INTERVAL CAN BE USED:
C  RV0 IS THE ROOT OF THE INTERACTION POTENTIAL V(R): V(RV)=0.
C  RVM IS THE RADIUS OF THE MINIMUM OF V(R)           V(RVM)= VM
        BQ=B*B
        RV=RV0(IFLAG)
C
C  CASE 1: B < RV0,
C
        IF (RV.GT.B) THEN
          RLW=B
          RUP=RV
        ENDIF
C
C  CASE 2: RV0 < B,
C
        IF (RV.LT.B) THEN
          RLW=RV
          RUP=B
C  TRY TO IMPROVE LOWER BOUND RLW
          FIW=1.-VW(IFLAG)/ER-BQ/(RVW(IFLAG)**2)
          IF (FIW.LT.0.D0) RLW=RVW(IFLAG)
        ENDIF
C
        TOL=1.D-7*(RUP-RLW)
        RSTERN=RTSAF(RLW,RUP,TOL,ER,B,IFLAG)
      ELSE
        GOTO 990
      ENDIF
C
      RETURN
990   CONTINUE
      WRITE (6,*) 'ERROR IN FUNCTION RSTERN '
      CALL EXIT
      END
C
      FUNCTION FI(R,ER,B,IFLAG,DFI)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C  EVALUATE EFFECTIVE POTENTIAL FUNCTION FI AT R
C  EVALUATE DFI(R)/DR AT R
C  RETURN FI=FI(R), DFI=DFI(R)/DR
C     --------------
C  IFLAG=1:  H+ + H
C  IFLAG=2:  H+ + HE
C  IFLAG=3:  H+ + H2
C
      B2=B*B
      RLOW=1.D-7
C
      IF(IFLAG.EQ.1) THEN
C  INTERACTION POTENTIAL V(R): H+ + H
C  R IN A0, V IN EV
        R2=R*R
        R3=R2*R
C  FIND V=V(R) and DV=DV(R)/DR
        IF (R.GT.160.D0) THEN
          V=0.D0
          DV=0.D0
        ELSEIF (R.LT.RLOW) THEN
          R2=RLOW*RLOW
          R3=R2*RLOW
          EX=EXP(-RLOW)
          EX2=EX*EX
          SS=(1.+RLOW+R2/3.)*EX-1.
          RI=1./RLOW
          V=27.211*((RI-(1.+RI)*EX2-(1.+RLOW)*EX)/SS+RI)
          DV=0.D0
        ELSE
          EX=EXP(-R)
          EX2=EX*EX
          SS=(1.+R+R2/3.)*EX-1.
          RI=1./R
          V=27.211*((RI-(1.+RI)*EX2-(1.+R)*EX)/SS+RI)
          RIQ=RI*RI
          DSS=-R/3.*(1.+R)*EX
          U=RI-(1.+RI)*EX2-(1.+R)*EX
          DU=-RIQ+(RIQ+2.*RI+2.)*EX2+R*EX
          DV=27.211*((DU*SS-U*DSS)/(SS*SS)-RIQ)
        ENDIF
C  FIND FI=FI(R) AND DFI=DFI(R)/DR
        FI=1.-V/ER-B2/R2
        DFI=-DV/ER+2.*B2/R3
C
      ELSEIF (IFLAG.EQ.2) THEN
C  INTERACTION POTENTIAL V(R): H+ + HE
C     R IN A0, V IN EV
        G1=2.2
        R2=R*R
        R3=R2*R
C
        RR=.687*R
        EMRR=1.-RR
C
        G2=1.00+0.15*MAX(0.D0,-EMRR)/EMRR
C
        REFF=-G1*G2*EMRR
        IF (REFF.GT.160.D0) THEN
          V=0.D0
          DV=0.D0
        ELSEIF (REFF.LT.RLOW) THEN
C  SET REFF=RLOW=-G1*G2*(1.-0.687*RLIM)=-G1*G2+G1*G2*0.687*RLIM
          RLIM=(RLOW+G1*G2)/(G1*G2*0.687)
          R2=RLIM*RLIM
          R3=R2*RLIM
          EX=EXP(-RLOW)
          EX2=EX*EX
          V=2.*(EX2-2.*EX)
          DV=0.
        ELSE
          EX=EXP(-REFF)
          EX2=EX*EX
          V=2.*(EX2-2.*EX)
          DV=-4.*0.687*G1*G2*(EX2-EX)
        ENDIF
        FI=1.-V/ER-B2/R2
        DFI=-DV/ER+2.*B2/R3
C
      ELSEIF (IFLAG.EQ.3) THEN
C  INTERACTION POTENTIAL V(R): H+ + H2
C  MASON, PHYS. REV. 114(1959)497
C  2.84 < R < 7.
C
        R2=R*R
        R3=R2*R
        RR=.529*R
        RR1=1.-RR/1.5
        REFF=-3.*RR1
        IF (REFF.GT.160.D0) THEN
          V=0.D0
          DV=0.D0
        ELSEIF (REFF.LT.RLOW) THEN
C  SET REFF=RLOW=-3.*(1.-0.529*RLIM/1.5)=-3.+3.*0.529*RLIM/1.5
          RLIM=(RLOW+3.)/(3.*0.529/1.5)
          R2=RLIM*RLIM
          R3=R2*RLIM
          EX=EXP(-RLOW)
          EX2=EX*EX
          V=2.7*(EX2-2.*EX)
          DV=0.
        ELSE
          EX=EXP(-REFF)
          EX2=EX*EX
          V=2.7*(EX2-2.*EX)
          DV=-10.8*0.529*(EX2-EX)
        ENDIF
        FI=1.-V/ER-B2/R2
        DFI=-DV/ER+2.*B2/R3
C
      ELSE
        WRITE (6,*) 'ERROR IN FUNCTION FI. IFLAG INVALID.'
        WRITE (6,*) 'IFLAG = ',IFLAG
        CALL EXIT
      ENDIF
C
      RETURN
      END
C
      SUBROUTINE FIVEC(ER,B,IFLAG)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C  VECTORIZED VERSION OF FUNCTION FI FOR GAUSS MEHLER QUADRATURE
C  EVALUATE EFFECTIVE POTENTIAL FUNCTION AT AR(I),I=1,NFI
C  NOTE: NFI.LE.128 IS NOT CHECKED, BUT USED
C  RETURN FI(AR(I)) IN THE ARRAY AFI(I),I=1,NFI
C     --------------
C  IFLAG=1:  H+ + H
C  IFLAG=2:  H+ + HE
C  IFLAG=3:  H+ + H2
C
      COMMON /CFI/ AR,AFI,NFI
      DIMENSION AR(128),AFI(128)

      B2=B*B
      RLOW=1.D-7
C
      IF(IFLAG.EQ.1) THEN
C  INTERACTION POTENTIAL V(R): H+ + H
C  R IN A0, V IN EV
        DO 1 IFI=1,NFI
          R=AR(IFI)
          R2=R*R
C  FIND V=V(R)
          IF (R.GT.160.D0) THEN
            V=0.D0
          ELSEIF (R.LT.RLOW) THEN
            R2=RLOW*RLOW
            EX=EXP(-RLOW)
            EX2=EX*EX
            SS=(1.+RLOW+R2/3.)*EX-1.
            RI=1./RLOW
            V=27.211*((RI-(1.+RI)*EX2-(1.+RLOW)*EX)/SS+RI)
          ELSE
            EX=EXP(-R)
            EX2=EX*EX
            SS=(1.+R+R2/3.)*EX-1.
            RI=1./R
            V=27.211*((RI-(1.+RI)*EX2-(1.+R)*EX)/SS+RI)
          ENDIF
          AFI(IFI)=1.-V/ER-B2/R2
1       CONTINUE
C
      ELSEIF(IFLAG.EQ.2) THEN
C  INTERACTION POTENTIAL V(R): H+ + HE
C     R IN A0, V IN EV
        G1=2.2
        DO 2 IFI=1,NFI
          R=AR(IFI)
          R2=R*R
          RR=.687*R
          EMRR=1.-RR

          G2=1.00+0.15*MAX(0.D0,-EMRR)/EMRR
          REFF=-G1*G2*EMRR
C
          IF (REFF.GT.160.D0) THEN
            V=0.D0
          ELSEIF (REFF.LT.RLOW) THEN
C  SET REFF=RLOW=-G1*G2*(1-0.687*RLIM)=-G1*G2+G1*G2*0.687*RLIM
            RLIM=(RLOW+G1*G2)/(G1*G2*0.687)
            R2=RLIM*RLIM
            EX=EXP(-RLOW)
            EX2=EX*EX
            V=2.*(EX2-2.*EX)
          ELSE
            EX=EXP(-REFF)
            EX2=EX*EX
            V=2.*(EX2-2.*EX)
          ENDIF
          AFI(IFI)=1.-V/ER-B2/R2
2       CONTINUE
C
      ELSEIF(IFLAG.EQ.3) THEN
C  INTERACTION POTENTIAL V(R): H+ + H2
C  MASON, PHYS. REV. 114(1959)497
C  2.84 < R < 7.
C
        DO 3 IFI=1,NFI
          R=AR(IFI)
          R2=R*R
          RR=.529*R
          RR1=1.-RR/1.5
          REFF=-3.*RR1
          IF (REFF.GT.160.D0) THEN
            V=0.D0
          ELSEIF (REFF.LT.RLOW) THEN
C  SET REFF=RLOW=-3.*(1.-0.529*RLIM/1.5)=-3.+3.*0.529*RLIM/1.5
            RLIM=(RLOW+3.)/(3.*0.529/1.5)
            R2=RLIM*RLIM
            EX=EXP(-RLOW)
            EX2=EX*EX
            V=2.7*(EX2-2.*EX)
          ELSE
            EX=EXP(-REFF)
            EX2=EX*EX
            V=2.7*(EX2-2.*EX)
          ENDIF
          AFI(IFI)=1.-V/ER-B2/R2
3       CONTINUE
C
      ELSE
        WRITE (6,*) 'ERROR IN FUNCTION FI. IFLAG INVALID.'
        WRITE (6,*) 'IFLAG = ',IFLAG
        CALL EXIT
      ENDIF
C
      RETURN
      END
C
      SUBROUTINE GAUMEH(RS,ER,B,IFLAG,N,IGAUS,RESULT)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      COMMON /CFI/ AR,AFI,NFI
      DIMENSION AR(128),AFI(128)
C
C  IGAUS=1
C  GAUSS MEHLER QUADRATURE, N=5,10,20, W(X)=1./SQRT(1+X)/SQRT(1-X)
C                           INTEGRATION FROM A=-1 TO B=1
C                           TRANSFORMED TO A=0,B=1, AND
C                           W(X)=1./SQRT(X)/SQRT(1-X)
C
      DIMENSION X5A(5),X5B(5),X10A(10),X10B(10),X20A(20),X20B(20)
      DIMENSION X5(5),X10(10),X20(20)
C
      DIMENSION XG10(10),WG10(10),XG10A(10),XG10B(10)
      SAVE
      DATA X5 /0.95105654E+00,0.58778542E+00,0.31391647E-06,
     .       - 0.58778363E+00,-0.95105600E+00/,
     .W5 /0.62831837E+00/
      DATA X10/9.876884E-01, 8.910065E-01,7.071068E-01,4.539905E-01,
     .         1.564344E-01,-1.564345E-01,-4.539905E-01,-7.071068E-01,
     .        -8.910065E-01,-9.876884E-01/,
     .W10/3.141593E-01/
      DATA X20/9.969173E-01,9.723699E-01,9.238795E-01,8.526402E-01,
     .         7.604060E-01,6.494480E-01,5.224985E-01,3.826834E-01,
     .         2.334453E-01,
     .         7.845905E-02,-7.845914E-02,-2.334454E-01,-3.826835E-01,
     .        -5.224986E-01,-6.494481E-01,-7.604060E-01,-8.526402E-01,
     .        -9.238796E-01,-9.723700E-01,-9.969174E-01/,
     .W20/1.570796E-01/
C
C  IGAUS=2
C  GAUSS MEHLER QUADRATURE, N=10, W(X)=1./SQRT(1-X)
C                           INTEGRATION FROM A=0 TO B=1
      DATA XG10/
     .    .013695585480651072296,
     .    .070758123420104485088,
     .    .16782834791297652828,
     .    .29588270759990962383,
     .    .44298868539955669668,
     .    .59543571523425259033,
     .    .73901490631777356542,
     .    .86034375925702257262,
     .    .94811360601967719799,
     .    .99414369156320387287/
      DATA WG10/
     .    .035228014278304236584,
     .    .081202859600773882686,
     .    .12534409666821812627,
     .    .16655348315340949082,
     .    .20386023963448093937,
     .    .23638906392303662412,
     .    .26337727689835336360,
     .    .28419221863676482994,
     .    .29834597294520589473,
     .    .30550677426145261144/
      DATA IFIRST /0/
      IF (IFIRST.EQ.0) THEN
C SET ROOTS AND WEIGHTS FOR GAUSS QUADRATURE RULES
        IFIRST=1
        DO 5 I=1,5
          X=0.5*(1.+X5(I))
          X5A(I)=SQRT(X*(1.-X))
          X5B(I)=1./X
5       CONTINUE
        DO 10 I=1,10
          X=0.5*(1.+X10(I))
          X10A(I)=SQRT(X*(1.-X))
          X10B(I)=1./X
10      CONTINUE
        DO 11 I=1,10
          X=XG10(I)
          XG10A(I)=SQRT(1.-X)
          XG10B(I)=1./X
11      CONTINUE
        DO 20 I=1,20
          X=0.5*(1.+X20(I))
          X20A(I)=SQRT(X*(1.-X))
          X20B(I)=1./X
20      CONTINUE
      ENDIF
C
      NFI=N
      IF (N.EQ.5) THEN
        DO 50 IFI=1,5
          AR(IFI)=RS*X5B(IFI)
50      CONTINUE
C
        CALL FIVEC(ER,B,IFLAG)
        SUM=0.D0
        DO 51 IFI=1,5
          F=AFI(IFI)
          IF (F.GT.0.D0)
     .    SUM=SUM+X5A(IFI)/SQRT(F)
51      CONTINUE
        RESULT=W5*SUM
C
      ELSEIF (N.EQ.10) THEN
        IF (IGAUS.EQ.1) THEN
          DO 100 IFI=1,10
            AR(IFI)=RS*X10B(IFI)
100       CONTINUE
C
          CALL FIVEC(ER,B,IFLAG)
          SUM=0.D0
          DO 101 IFI=1,10
            F=AFI(IFI)
            IF (F.GT.0.D0)
     .      SUM=SUM+X10A(IFI)/SQRT(F)
101       CONTINUE
          RESULT=W10*SUM
        ELSEIF (IGAUS.EQ.2) THEN
          DO 110 IFI=1,10
            AR(IFI)=RS*XG10B(IFI)
110       CONTINUE
C
          CALL FIVEC(ER,B,IFLAG)
          SUM=0.D0
          DO 111 IFI=1,10
            F=AFI(IFI)
            IF (F.GT.0.D0)
     .      SUM=SUM+XG10A(IFI)/SQRT(F)*WG10(IFI)
111       CONTINUE
          RESULT=SUM
        ENDIF
C
      ELSEIF (N.EQ.20) THEN
        DO 200 IFI=1,20
          AR(IFI)=RS*X20B(IFI)
200     CONTINUE
C
        CALL FIVEC(ER,B,IFLAG)
        SUM=0.D0
        DO 201 IFI=1,20
          F=AFI(IFI)
          IF (F.GT.0.D0)
     .    SUM=SUM+X20A(IFI)/SQRT(F)
201     CONTINUE
        RESULT=W20*SUM
C
      ELSE
        WRITE (6,*) 'ERROR IN GAUMEH, WRONG PARAMETER N'
        CALL EXIT
      ENDIF
      RETURN
      END
C
      FUNCTION RTSAF(X1,X2,XACC,ER,B,IFLAG)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C  TAKEN FROM: NUMERICAL RECIPES, W.H.PRESS ET AL.,
C              CAMBRIDGE UNIV. PRESS, 1989, P258
C  MODIFIED, TO FIND LARGEST ROOT, IN CASE MORE THAN ONE ROOTS
C  AND TO SPEED UP
      PARAMETER (MAXIT=100)
      XL=X1
      XH=X2
C
      F=FI(XH,ER,B,IFLAG,DF)
      XDIST=(XH-XL)
      DX=MIN(XDIST,F/DF)
      DXOLD=DX
      RTSAF=XH-DX
C
      F=FI(RTSAF,ER,B,IFLAG,DF)

      IF(F.LT.0.D0) THEN
        XL=RTSAF
      ELSE
        XH=RTSAF
      ENDIF
C
      DO 11 J=1,MAXIT
        IF(((RTSAF-XH)*DF-F)*((RTSAF-XL)*DF-F).GT.0.
     *      .OR. ABS(F+F).GT.ABS(DXOLD*DF) ) THEN
          DXOLD=DX
          DX=0.5*(XH-XL)
          RTSAF=XL+DX
        ELSE
          DXOLD=DX
          DX=F/DF
          TEMP=RTSAF
          RTSAF=RTSAF-DX
        ENDIF
C
        IF(ABS(DX).LT.XACC) RETURN
C
        F=FI(RTSAF,ER,B,IFLAG,DF)
        IF(F.LT.0.D0) THEN
          XL=RTSAF
        ELSE
          XH=RTSAF
        ENDIF
11    CONTINUE
      WRITE (6,*) 'RTSAF EXCEEDING MAXIMUM ITERATIONS'
      RETURN
      END


      FUNCTION FTABEI1 (IREI,K)
      IMPLICIT REAL*8 (A-H,O-Z)

      INCLUDE 'PARMMOD'
      INCLUDE 'COMXS'
      INCLUDE 'COMUSR'
      DIMENSION TBEIC(9)

      TBEI=0.D0
      KK = NREAEI(IREI)
      IF (JEREAEI(IREI) == 1) THEN
        TBEI = CREAC(9,1,KK)
        DO II=8,1,-1
          TBEI = TBEI*TEINL(K) + CREAC(II,1,KK)
        END DO
        TBEI=EXP(MAX(-100.D0,TBEI))*DEIN(K)
      ELSE
        TBEIC(1:JEREAEI(IREI)) = CREAC(9,1:JEREAEI(IREI),KK)
        DSUB=LOG(1.D8)
        DEIMIN=LOG(1.D8)
        PLS=MAX(DEIMIN,DEINL(K))-DSUB
        DO J=1,JEREAEI(IREI)
          DO II=8,1,-1
            TBEIC(J)=TBEIC(J)*TEINL(K)+CREAC(II,J,KK)
          END DO
        END DO
        TBEI = TBEIC(9)
        DO I=8,1,-1
          TBEI=TBEI*PLS+TBEIC(I)
        END DO
        TBEI=MAX(-100.D0,TBEI+DEINL(K))
        TBEI=EXP(TBEI)
      ENDIF

      FTABEI1 = TBEI

      RETURN
      END


      FUNCTION FTABRC1 (IRRC,K)
      IMPLICIT REAL*8 (A-H,O-Z)

      INCLUDE 'PARMMOD'
      INCLUDE 'CCONA'
      INCLUDE 'COMXS'
      INCLUDE 'COMUSR'
      DIMENSION TBRCC(9),PLS(1),COUN(0:9,1),CF(9,0:9)

      TBRC=0.D0
      KK = NREARC(IRRC)

      IF (KK == 0) THEN
        ZX=EIONH/MAX(1.D-5,TEIN(K))
        TBRC=1.27E-13*ZX**1.5/(ZX+0.59)*DEIN(K)
      ELSEIF (JEREARC(IRRC) == 1) THEN
        TBRC = CREAC(9,1,KK)
        DO II=8,1,-1
          TBRC = TBRC*TEINL(K) + CREAC(II,1,KK)
        END DO
        TBRC=EXP(MAX(-100.D0,TBRC))*DEIN(K)
      ELSE
        DSUB=LOG(1.D8)
        DEIMIN=LOG(1.D8)
        PLS(1)=MAX(DEIMIN,DEINL(K))-DSUB
        CALL CDEFN(TEINL(K),PLS,KK,COUN,1,CF,.TRUE.,.FALSE.,
     ,             .TRUE.)
        TBRC=COUN(1,1)*DEIN(K)
      ENDIF

      FTABRC1 = TBRC

      RETURN
      END


      FUNCTION FEELEI1 (IREI,K)
      IMPLICIT REAL*8 (A-H,O-Z)

      INCLUDE 'PARMMOD'
      INCLUDE 'CCONA'
      INCLUDE 'COMXS'
      INCLUDE 'COMUSR'
      REAL*8 ELEIC(9)

      FEELEI1=0.D0
      KK=NELREI(IREI)
      IF (KK < 0) THEN
        SELECT CASE (KK)
        CASE (-1)
            FEELEI1=-EIONHE
        CASE (-2)
            FEELEI1=EELDS1(IREI,1)
        CASE (-3)
            FEELEI1=-1.5*TEIN(K)
        CASE (-4)
            FEELEI1=-EIONH
        CASE (-5)
            FEELEI1=-10.5
        CASE (-6)
            FEELEI1=-25.0
        CASE (-7)
            FEELEI1=EELDS1(IREI,1)
        CASE (-8)
            FEELEI1=-10.5
        CASE (-9)
            FEELEI1=-15.5
        CASE (-10)
C  FOR THE FACTOR -0.88 SEE: EIRENE MANUAL, INPUT BLOCK 4, EXAMPLES
            FEELEI1=-0.88*TEIN(K)
        END SELECT
      ELSE IF (KK > 0) THEN
        IF (JELREI(IREI) == 1) THEN
          ELEI = CREAC(9,1,KK)
          DO II=8,1,-1
            ELEI = ELEI*TEINL(K) + CREAC(II,1,KK)
          END DO
          ELEI=EXP(MAX(-100.D0,ELEI))
          FEELEI1=-ELEI*DEIN(K)/(FTABEI1(IREI,K)+EPS60)
        ELSE
          ELEIC(1:JELREI(IREI)) = CREAC(9,1:JELREI(IREI),KK)
          DSUB=LOG(1.D8)
          DEIMIN=LOG(1.D8)
          PLS=MAX(DEIMIN,DEINL(K))-DSUB
          DO J=1,JELREI(IREI)
            DO II=8,1,-1
              ELEIC(J)=ELEIC(J)*TEINL(K)+CREAC(II,J,KK)
            END DO
          END DO
          ELEI = ELEIC(9)
          DO I=8,1,-1
            ELEI=ELEI*PLS+ELEIC(I)
          END DO
          EE=MAX(-100.D0,ELEI+DEINL(K))
          FEELEI1=-EXP(EE)/(FTABEI1(IREI,K)+EPS60)
        END IF
      END IF

      RETURN
      END


      FUNCTION FEHVDS1 (IREI,K)
      IMPLICIT REAL*8 (A-H,O-Z)

      INCLUDE 'PARMMOD'
      INCLUDE 'CCONA'
      INCLUDE 'COMXS'
      INCLUDE 'COMUSR'

      FEHVDS1=0.D0
      KK=NREAHV(IREI)
      IF (KK < 0) THEN
        SELECT CASE (KK)
        CASE (-1)
            FEHVDS1=EHVDS1(IREI,1)
        CASE (-2)
            FEHVDS1=6.
        CASE (-3)
            FEHVDS1=10.0
        CASE (-4)
            FEHVDS1=8.6
        CASE (-5)
            FEHVDS1=0.5
        CASE (-6)
            FEHVDS1=0.88*TEIN(K)
        END SELECT
      ELSE IF (KK > 0) THEN
        EHVDS = CREAC(9,1,KK)
        DO II=8,1,-1
          EHVDS = EHVDS*TEINL(K) + CREAC(II,1,KK)
        END DO
        EHVDS=EXP(MAX(-100.D0,EHVDS))
        FEHVDS1=EHVDS*DEIN(K)/(FTABEI1(IREI,K)+EPS60)
      END IF

      RETURN
      END


      FUNCTION FEELRC1 (IRRC,K)
      IMPLICIT REAL*8 (A-H,O-Z)

      INCLUDE 'PARMMOD'
      INCLUDE 'CCONA'
      INCLUDE 'COMXS'
      INCLUDE 'COMUSR'
      REAL*8 ELRC1(9)

      FEELRC1=0.D0
      KK=NELRRC(IRRC)
      IF (KK < 0) THEN
        SELECT CASE (KK)
        CASE (-1)
            FEELRC1=-1.5*TEIN(K)*FTABRC1(IRRC,K)
        CASE (-2)
            FEELRC1=EELRC1(IRRC,1)*FTABRC1(IRRC,K)
        CASE (-3)
            FEELRC1=-1.5*TEIN(K)*FTABRC1(IRRC,K)
        END SELECT
      ELSE IF (KK > 0) THEN
        IF (JELRRC(IRRC) == 1) THEN
          ELRC = CREAC(9,1,KK)
          DO II=8,1,-1
            ELRC = ELRC*TEINL(K) + CREAC(II,1,KK)
          END DO
          ELRC=EXP(MAX(-100.D0,ELRC))
          FEELRC1=-ELRC*DEIN(K)
        ELSE
          ELRC1(1:JELRRC(IRRC)) = CREAC(9,1:JELRRC(IRRC),KK)
          DSUB=LOG(1.D8)
          DEIMIN=LOG(1.D8)
          PLS=MAX(DEIMIN,DEINL(K))-DSUB
          DO J=1,JELRRC(IRRC)
            DO II=8,1,-1
              ELRC1(J)=ELRC1(J)*TEINL(K)+CREAC(II,J,KK)
            END DO
          END DO
          ELRC = ELRC1(9)
          DO I=8,1,-1
            ELRC=ELRC*PLS+ELRC1(I)
          END DO
          EE=MAX(-100.D0,ELRC+DEINL(K))
          FEELRC1=-EXP(EE)
        END IF
        IF (DELPOT(KK).NE.0.D0) THEN
          DELE=DELPOT(KK)
          FEELRC1=FEELRC1+DELE*FTABRC1(IRRC,K)
        END IF
      END IF

      RETURN
      END


      FUNCTION FEPLPI3 (IRPI,K)
      IMPLICIT REAL*8 (A-H,O-Z)

      INCLUDE 'PARMMOD'
      INCLUDE 'CCONA'
      INCLUDE 'COMXS'
      INCLUDE 'COMUSR'
      INCLUDE 'COMPRT'

      FEPLPI3=0.D0
      KK=NELRPI(IRPI)
      SELECT CASE (KK)
      CASE (-1)
          FEPLPI3=EPLPI3(IRPI,1,1)
      CASE (-2)
          FEPLPI3=1.5*TIIN(IPLS,K)+EDRIFT(IPLS,K)
      END SELECT

      RETURN
      END




      FUNCTION FEPLCX3 (IRCX,K)
      IMPLICIT REAL*8 (A-H,O-Z)

      INCLUDE 'PARMMOD'
      INCLUDE 'CCONA'
      INCLUDE 'COMXS'
      INCLUDE 'COMUSR'
      INCLUDE 'COMPRT'

      FEPLCX3=0.D0
      KK=NELRCX(IRCX)
      IF (KK < 0) THEN
        SELECT CASE (KK)
        CASE (-1)
            FEPLCX3=1.5*TIIN(IPLS,K)+EDRIFT(IPLS,K)
        CASE (-2)
            FEPLCX3=EPLCX3(IRCX,1,1)
        CASE (-3)
            FEPLCX3=1.5*TIIN(IPLS,K)+EDRIFT(IPLS,K)
        END SELECT
      ELSE
        ELCX = CREAC(9,1,KK)
        PLS=TIINL(IPLS,K)+ADDCX(IRCX,IPLS)
        DO II=8,1,-1
          ELCX = ELCX*PLS + CREAC(II,1,KK)
        END DO
        ADD=EPLCX3(IRCX,1,1)
        FEPLCX3=ELCX*DIIN(IPLS,K)*ADD
      END IF

      RETURN
      END




      FUNCTION FEPLEL3 (IREL,K)
      IMPLICIT REAL*8 (A-H,O-Z)

      INCLUDE 'PARMMOD'
      INCLUDE 'CCONA'
      INCLUDE 'COMXS'
      INCLUDE 'COMUSR'
      INCLUDE 'COMPRT'

      FEPLEL3=0.D0
      KK=NELREL(IREL)
      IF (KK < 0) THEN
        SELECT CASE (KK)
        CASE (-1)
            FEPLEL3=EPLEL3(IREL,1,1)
        CASE (-2)
            FEPLEL3=1.5*TIIN(IPLS,K)+EDRIFT(IPLS,K)
        CASE (-3)
            FEPLEL3=1.5*TIIN(IPLS,K)+EDRIFT(IPLS,K)
        END SELECT
      ELSE
        EPEL = CREAC(9,1,KK)
        PLS=TIINL(IPLS,K)+ADDEL(IREL,IPLS)
        DO II=8,1,-1
          EPEL = EPEL*PLS + CREAC(II,1,KK)
        END DO
        ADD=EPLEL3(IREL,1,1)
        FEPLEL3=EPEL*DIIN(IPLS,K)*ADD
      END IF

      RETURN
      END
