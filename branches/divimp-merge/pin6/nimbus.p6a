
C
C=======================================================================
      SUBROUTINE VNIMB( REQ , ACT , IER )
      IMPLICIT NONE
C
C-----------------------------------------------------------------------
C
C PURPOSE : TO OBTAIN THE VERSION OF THE 'NIMBUS' MODULE.
C
C INPUT   : (C*9) REQ    = REQUIRED VERSION.
C
C OUTPUT  : (C*9) ACT    = ACTUAL VERSION.
C           (I*4) IER    = 0 IF REQ =  ACT
C                        = 1 IF REQ <> ACT
C
C PROGRAM : (C*9) VERSON = VERSION
C
C AUTHOR  : JAMES SPENCE (K1/0/80)  EXT. 4866
C           JET
C
C DATE    : 09-DEC-91
C
C-----------------------------------------------------------------------
C
      CHARACTER*9   REQ , ACT
      INTEGER*4     IER
C
      CALL VERNIM(ACT)
C
C.......................................................................
C
      IF( REQ.EQ.ACT ) THEN
          IER = 0
      ELSE
          IER = 1
      END IF
C
C.......................................................................
C
      RETURN
      END
C
C=======================================================================
      SUBROUTINE NIMBUS
     *          (INT,IOUTT,IUERRT,IARKT,IPNCHT,IGMTT,ITRMTT,ISETUP,
     *           ITAIO1,ITAIO2)
C                                        BASIC VERSION
C                                     ( IBM: LINK WITH CRAYIBM)
C                                     (CRAY: LINK WITH NIMBUS1)
C     *NIMBUS* BEGINS
C
      COMMON/IOFILE/IN,IOUT,IUERR,IARK,IPUNCH,IGMT,ITRMT,ITAPIO(2)
C
C
C                   INPUT TAPE
      IN=INT
C                   OUTPUT TAPE
      IOUT=IOUTT
C                   ERRORS TAPE
      IUERR=IUERRT
C                   ARCHIVE TAPE FOR CONTINUATION
      IARK=IARKT
C                   TAPE FOR GEOMETRY DATA
      IGMT=IGMTT
C                   TAPE FOR LINKAGE TO PLASMA CODE (0 IF STAND-ALONE)
      IPUNCH=IPNCHT
C                   TAPE FOR TRIM REFLECTION DATA
      ITRMT=ITRMTT
C                   TAPES FOR TIME-OUT
      ITAPIO(1)=ITAIO1
      ITAPIO(2)=ITAIO2
C
      CALL INPUT(ISETUP,NSTEP)
      DO 10 I=1,NSTEP
        CALL RUN(I)
        ITRAN=ITAPIO(1)
        ITAPIO(1)=ITAPIO(2)
        ITAPIO(2)=ITRAN
   10 CONTINUE
C
      RETURN
C
      END
C.......................................................................
C.......................................................................
C
C
C     N.B. TO RUN NIMBUS ON CRAY :
C
C     1)  DELETE COMMENTS 'C' IN S.R. 'TODAY','ERRTRA','ERRSET';
C     2)  USE OPTION OFF=P IN COMPILATION(TO ELIMINATE DOUBLE PRECISION)
C     RANDOM GENERATOR RANF WORKS ONLY ON CRAY
C
C     MOREOVER, THE PARAMETER XOVERY( DEFORMATION OF A SQUARE
C     INTRODUCED BY THE LOCAL PRINTER) SHOULD BE SET =0.6 AT
C     BOLOGNA AND 0.66666 AT CULHAM (PRINTING OF THE MAP).
C     NOTE THAT GRAPHICS REQUIRE A 61-LINE PAGE.
C
      BLOCK DATA
C----------------------------------
      INCLUDE 'pnimb'
      PARAMETER (MRG=MRGX ,MZN=MRG-2 ,MCH=41 ,MCC=MCCX, MWAC=13 )
      PARAMETER (MBS=MBSX ,MSD=MBS   ,MSC=2 )
      PARAMETER (MIO=3    ,MCP=6)
      PARAMETER (MEG=5    ,MIXS=10   ,MLEAK=9)
C---------------------------------------------------
C
      COMMON/COMPOS/NION,NCOM,LIGHTW,RNLITE,EWLITE,
     * SYMB(MIO),PERC(MIO),DENSE(MRG),DENSI(MRG,MIO),EATMD,EATMR,
     * TEMPE(MRG),TEMPI(MRG),IBOUND(MRG),ALBEDO(MRG),LIWALL(MRG),COEFMX
     *,IEMIS(MRG),BEXPT(MRG),WEXPT(MRG,3),SHP,DRIFTV(MRG),DRIFTC(MRG,3)
     *,ISTARG(MRG),CHARGE(MCP),PROREQ(4),ALBATO(MRG),ALBENE(MRG),INDHEL
     *,NTSPUT,PSEMIP(MRG,2),IRTRIM(MCP,MCP),NFTRIM,LPVOID,DCUTCX,TCUTCX
     *,ICUTCX,INDEF,IYCHEM,EYCHEM,AYCHEM,NLEAK,XLEAK(4,MLEAK),ILEAK(MRG)
     *,NZREC,NUTRLZ(MCP),MIMP,IGOPT,PRORCL(MIO),UNDEF
     *,NZYIZ,CZYIZ(MCP),AYIZ(MCP),BYIZ(MCP),EYIZ(MCP),IYIZ(MCP),ALFCH7
     *,PARDIR(MRG,3),RECMAT(MIO,MIO,MRG)
      DATA  INDEF/-76543953/,UNDEF/-1.23456E+13/
      DATA IYCHEM/-76543953/
C
      PARAMETER (NCT=24,MKES=4)
      COMMON/CTAB0/TABLE(NCT,11),IZLOZ(0:100)
      COMMON/CTABLE/SPUTAB(NCT,NCT)
     *,LABINT(MCP),LABEXT(NCT),IXS(MIXS),ITRIM
     *,NIONPM,MCX,MOLEC(MCP),IATOM(MCP),EXTSYM(MCP),QESP(NCT,NCT)
     *,EB(NCT),QCOEF(NCT),TLOTZ(NCT,26),CXRMAX(5,MRG),ESRMAX(MKES,MRG)
     *,TBELL(NCT,26),ITAGS(NCT,NCT,2)
C
       DIMENSION IZLOZS(0:100)
       EQUIVALENCE(IZLOZS(0),IZLOZ(0))
C
C     FOR THE PARTICLE DESCRIBED IN THE I-TH ROW OF THE FOLLOWING
C     MATRIX, THE FOLLOWING PARAMETERS ARE GIVEN:
C
C     (1)  SYMBOL,
C     (2)  CHARGE,
C     (3)  A.M.U.,
C     (4)  ATOMIC NUMBER Z,
C     (5)  THE ROW INDEX OF ITS ASSUMED FUNDAMENTAL ISOTOPE,
C     (6)  NEUTRAL SYMBOL,
C     (7)  MOLECULE DISSOCIATION TEMPERATURE,
C     (8)  MOLECULE SYMBOL,
C     (9)  AVERAGE IONIZATION CHARGE,
C     (10) DENSITY OF STRUCTURAL MATERIALS(GR/CM3).
C     (11) GAS(0) OR METAL(1)? (METALS STICK IN THE WALL)
C
C
      DATA IZLOZS/ 101*0 /
C
C                              E-
      DATA TABLE(1,1),TABLE(1,2),TABLE(1,3) /4HE-  ,-1.0,5.447E-4/
     * ,TABLE(1,4),TABLE(1,5) /0.0,1.0/, TABLE(1,6)/4H    /
     * ,IZLOZ(0) /0/
C                              H+
      DATA TABLE(2,1),TABLE(2,2),TABLE(2,3) /4HH+  ,+1.0,1.0/
     *    ,TABLE(2,4),TABLE(2,5) /1.0,2.0/,TABLE(2,6)/4HH   /
     * ,TABLE(2,7)/3.0/,TABLE(2,8)/4H2*H /,TABLE(2,11)/0.0/
     * ,IZLOZ(1) /2/
C                              D+
      DATA TABLE(3,1),TABLE(3,2),TABLE(3,3) /4HD+  ,+1.0,2.0/
     *    ,TABLE(3,4),TABLE(3,5) /1.0,2.0/,TABLE(3,6)/4HD   /
     * ,TABLE(3,7)/3.0/,TABLE(3,8)/4H2*D /,TABLE(3,11)/0.0/
C NO!* ,IZLOZ(1) /2/  (USED FOR LOTZ-BELL TABLES - DEPENDS ON Z ONLY)
C                              DT+
      DATA TABLE(4,1),TABLE(4,2),TABLE(4,3) /4HDT+ ,+1.0,2.5/
     *    ,TABLE(4,4),TABLE(4,5) /1.0,2.0/,TABLE(4,6)/4HDT  /
     * ,TABLE(4,7)/3.0/,TABLE(4,8)/4H2*DT/,TABLE(4,11)/0.0/
C                              T+
C..GC DATA TABLE(5,1),TABLE(5,2),TABLE(5,3) /4HT+  ,+1.0,2.001/
      DATA TABLE(5,1),TABLE(5,2),TABLE(5,3) /4HT+  ,+1.0,3.0/
     *    ,TABLE(5,4),TABLE(5,5) /1.0,2.0/,TABLE(5,6)/4HT   /
     * ,TABLE(5,7)/3.0/,TABLE(5,8)/4H2*T /,TABLE(5,11)/0.0/
C                              HE+
      DATA TABLE(6,1),TABLE(6,2),TABLE(6,3) /4HHE+ ,+1.0,4.0/
     *    ,TABLE(6,4),TABLE(6,5) /2.0,6.0/,TABLE(6,6)/4HHE  /
     * ,TABLE(6,7)/0.0/,TABLE(6,11)/0.0/
     * ,IZLOZ(2) /6/
C                              HE++
      DATA TABLE(7,1),TABLE(7,2),TABLE(7,3) /4HHE++,+2.0,4.0/
     *    ,TABLE(7,4),TABLE(7,5) /2.0,6.0/,TABLE(7,6)/4HHE  /
     * ,TABLE(7,7)/0.0/,TABLE(7,11)/0.0/
C                              FE
      DATA TABLE(8,1),TABLE(8,2),TABLE(8,3) /4HFE  ,0.0,56.0/
     *    ,TABLE(8,4),TABLE(8,5) /26.0,8.0/,TABLE(8,6)/4HFE  /
     * ,TABLE(8,7)/0.0/, TABLE(8,9)/5.0/,TABLE(8,10)/7.86/
     * ,TABLE(8,11)/1.0/
     * ,IZLOZ(26) /8/
C                              CU
      DATA TABLE(9,1),TABLE(9,2),TABLE(9,3) /4HCU  ,0.0,63.5/
     *    ,TABLE(9,4),TABLE(9,5) /29.0,9.0/,TABLE(9,6)/4HCU  /
     * ,TABLE(9,7)/0.0/, TABLE(9,9)/0.0/,TABLE(9,10)/8.96/
     * ,TABLE(9,11)/1.0/
     * ,IZLOZ(29) /9/
C                              C
      DATA TABLE(10,1),TABLE(10,2),TABLE(10,3) /4HC   ,0.0,12.0/
     *    ,TABLE(10,4),TABLE(10,5) /6.0,10.0/,TABLE(10,6)/4HC   /
     * ,TABLE(10,7)/0.0/, TABLE(10,9)/5.0/,TABLE(10,10)/2.26/
     * ,TABLE(10,11)/1.0/
     * ,IZLOZ(6) /10/
C                              MO
      DATA TABLE(11,1),TABLE(11,2),TABLE(11,3) /4HMO  ,0.0,96.0/
     *    ,TABLE(11,4),TABLE(11,5) /42.0,11.0/,TABLE(11,6)/4HMO  /
     * ,TABLE(11,7)/0.0/, TABLE(11,9)/0.0/,TABLE(11,10)/10.2/
     * ,TABLE(11,11)/1.0/
     * ,IZLOZ(42) /11/
C                              NI
      DATA TABLE(12,1),TABLE(12,2),TABLE(12,3) /4HNI  ,0.0,59.0/
     *    ,TABLE(12,4),TABLE(12,5) /28.0,12.0/,TABLE(12,6)/4HNI  /
     * ,TABLE(12,7)/0.0/, TABLE(12,9)/0.0/,TABLE(12,10)/8.9/
     * ,TABLE(12,11)/1.0/
     * ,IZLOZ(28) /12/
C                              W
      DATA TABLE(13,1),TABLE(13,2),TABLE(13,3) /4HW   ,0.0,184.0/
     *    ,TABLE(13,4),TABLE(13,5) /74.0,13.0/,TABLE(13,6)/4HW   /
     * ,TABLE(13,7)/0.0/, TABLE(13,9)/4.0/,TABLE(13,10)/19.3/
     * ,TABLE(13,11)/1.0/
     * ,IZLOZ(74) /13/
C                              AL
      DATA TABLE(14,1),TABLE(14,2),TABLE(14,3) /4HAL  ,0.0,27.0/
     *    ,TABLE(14,4),TABLE(14,5) /13.0,14.0/,TABLE(14,6)/4HAL  /
     * ,TABLE(14,7)/0.0/, TABLE(14,9)/0.0/,TABLE(14,10)/2.7/
     * ,TABLE(14,11)/1.0/
     * ,IZLOZ(13) /14/
C                              AU
      DATA TABLE(15,1),TABLE(15,2),TABLE(15,3) /4HAU  ,0.0,197.0/
     *    ,TABLE(15,4),TABLE(15,5) /79.0,15.0/,TABLE(15,6)/4HAU  /
     * ,TABLE(15,7)/0.0/, TABLE(15,9)/0.0/,TABLE(15,10)/19.3/
     * ,TABLE(15,11)/1.0/
     * ,IZLOZ(79) /15/
C                              BE
      DATA TABLE(16,1),TABLE(16,2),TABLE(16,3) /4HBE  ,0.0,9.0/
     *    ,TABLE(16,4),TABLE(16,5) /4.0,16.0/,TABLE(16,6)/4HBE  /
     * ,TABLE(16,7)/0.0/, TABLE(16,9)/0.0/,TABLE(16,10)/1.85/
     * ,TABLE(16,11)/1.0/
     * ,IZLOZ(4) /16/
C                              SI
      DATA TABLE(17,1),TABLE(17,2),TABLE(17,3) /4HSI  ,0.0,28.0/
     *    ,TABLE(17,4),TABLE(17,5) /14.0,17.0/,TABLE(17,6)/4HSI  /
     * ,TABLE(17,7)/0.0/, TABLE(17,9)/0.0/,TABLE(17,10)/2.33/
     * ,TABLE(17,11)/1.0/
     * ,IZLOZ(14) /17/
C                              TA
      DATA TABLE(18,1),TABLE(18,2),TABLE(18,3) /4HTA  ,0.0,181.0/
     *    ,TABLE(18,4),TABLE(18,5) /73.0,18.0/,TABLE(18,6)/4HTA  /
     * ,TABLE(18,7)/0.0/, TABLE(18,9)/0.0/,TABLE(18,10)/16.6/
     * ,TABLE(18,11)/1.0/
     * ,IZLOZ(73) /18/
C                              TI
      DATA TABLE(19,1),TABLE(19,2),TABLE(19,3) /4HTI  ,0.0,48.0/
     *    ,TABLE(19,4),TABLE(19,5) /22.0,19.0/,TABLE(19,6)/4HTI  /
     * ,TABLE(19,7)/0.0/, TABLE(19,9)/0.0/,TABLE(19,10)/4.51/
     * ,TABLE(19,11)/1.0/
     * ,IZLOZ(22) /19/
C                              V
      DATA TABLE(20,1),TABLE(20,2),TABLE(20,3) /4HV   ,0.0,51.0/
     *    ,TABLE(20,4),TABLE(20,5) /23.0,20.0/,TABLE(20,6)/4HV   /
     * ,TABLE(20,7)/0.0/, TABLE(20,9)/0.0/,TABLE(20,10)/6.1/
     * ,TABLE(20,11)/1.0/
     * ,IZLOZ(23) /20/
C                              ZR
      DATA TABLE(21,1),TABLE(21,2),TABLE(21,3) /4HZR  ,0.0,91.0/
     *    ,TABLE(21,4),TABLE(21,5) /40.0,21.0/,TABLE(21,6)/4HZR  /
     * ,TABLE(21,7)/0.0/, TABLE(21,9)/0.0/,TABLE(21,10)/6.49/
     * ,TABLE(21,11)/1.0/
     * ,IZLOZ(40) /21/
C                              NE
      DATA TABLE(22,1),TABLE(22,2),TABLE(22,3) /4HNE  ,0.0,20.2/
     *    ,TABLE(22,4),TABLE(22,5) /10.0,22.0/,TABLE(22,6)/4HNE  /
     * ,TABLE(22,7)/0.0/, TABLE(22,9)/0.0/,TABLE(22,10)/0.0/
     * ,TABLE(22,11)/0.0/
     * ,IZLOZ(10) /0/
C                              HE IMPURITY
      DATA TABLE(23,1),TABLE(23,2),TABLE(23,3) /4HHE  ,0.0,4.0/
     *    ,TABLE(23,4),TABLE(23,5) /2.0,6.0/,TABLE(23,6)/4HHE  /
     * ,TABLE(23,7)/0.0/,TABLE(23,11)/0.0/
C NO!* ,IZLOZ(2) /6/
C                              N
      DATA TABLE(24,1),TABLE(24,2),TABLE(24,3) /4HN   ,0.0,14.0/
     *    ,TABLE(24,4),TABLE(24,5) /7.0,24.0/,TABLE(24,6)/4HN   /
     * ,TABLE(24,7)/0.0/, TABLE(24,9)/0.0/,TABLE(24,10)/0.0/
     * ,TABLE(24,11)/0.0/
     * ,IZLOZ(7) /0/
C
      END
C.......................................................................
C.......................................................................
      SUBROUTINE INPUT(ISETUP,NSTEP)
C
      SAVE
C     ----
C
      LOGICAL LSETUP
      DATA LSETUP/.FALSE./
C
C---------------------------------------------------
      INCLUDE 'pnimb'
      PARAMETER (MRG=MRGX ,MZN=MRG-2 ,MCH=41 ,MCC=MCCX, MWAC=13 )
      PARAMETER (MBS=MBSX ,MSD=MBS   ,MSC=2 )
      PARAMETER (MIO=3    ,MCP=6)
      PARAMETER (MEG=5    ,MIXS=10   ,MLEAK=9)
C---------------------------------------------------
C
      COMMON/IOFILE/IN,IOUT,IUERR,IARK,IPUNCH,IGMT,ITRMT,ITAPIO(2)
C
      COMMON/MAXIMS/MSCAN,MNTARG
C
C
      PARAMETER (NDEBUG=17,MSPLIT=500,NBANK=25)
      PARAMETER (MDEBWR=30,MDEBPT=200)
      COMMON/CHISTO/KOSE,KOST,NHIST,NST,FNST,NSG,FNSG,
     * INIZ,ICORR,KINDPR,NEDIT,ISTHEL,IHOR,
     * DECIMA,PLIFE,WTHRES,TAGLIO,WCUT,NGEV,EGEV(MEG),TCUT,
     * IDEBIN,IDLOOP,IDEBUG,KODDBG,IHDBG,ICDBG,DEBUG(NDEBUG),
     * NDEBWR,NDEBPT,IDBHST(MDEBWR),
     * NSPLIT,MAXSON,MAXSOH,BANK(MSPLIT,NBANK),WPESO(MRG)
     *,IREAD,IWRITE,IBEAM,IONTOW,IDMC,IDMCO
C
      PARAMETER (MZSOUR=13, MSOUXY=14)
      COMMON/SOURCE/
     * HHESRC,SRECYC,SRECOM,WSOUR1,NSEGS,SOTEMP(MBS),STMOUT,TIMINF,
     * WSOSEG(MBS,MIO),NSEGSO,KORSEG(MBS),LAYSEG(MBS),YTMOUT,
     * X1SOUR(MBS),Y1SOUR(MBS),X2SOUR(MBS),Y2SOUR(MBS),ZSOURC(MCP),
     * FISOU(MBS),SFISOU(MBS),CFISOU(MBS),WDS(MBS,5),IZOENT,
     * NZSOUR,SREGZ(MZSOUR),DREGZ(MZSOUR),WSOIMP(MBS,MCP),
     * NSOUXY,TSOUXY(MSOUXY),WSOUXY(MSOUXY),ISOUXY(MSOUXY),
     * CSOUXY(8,MSOUXY),HSOUXY(MSOUXY),DSOUXY(MSOUXY),ITYSEG(MBS),
     * ICHTAR(MBS),ISCHAN,SOUNEW(MBS),QIMP(MBS,MCP),PUFIMP(MCP),
     * WREG(1),WSEF(1),KOISEF(1),KOSDE(1),NTARG,KO2DIR(MRG),KO3D2D(MRG)
     *,IRECO,IMOMSO,NOZPMP,MODEZR,SNVOL(MRG*MIO),SNV(MRG,MIO)
     *,PUFFRA(MBS,MCP),PUFFXY(MSOUXY),TPUFFH,TPUFFZ
C
      PARAMETER(MSTAB=128)
      COMMON/CSPUT/FLITTM(2,12),STAB(MSTAB+2,MCP),EBIND,Y20,ISP93
C
      COMMON/CGEOM2/IUM1(6),NUMR,LBASE(5),PINF,LKOR,NOA(2)
     *,NOREG,LVOL,LAREA,LNUMR,LAIRC,LVOLTR,LLASTG,IRWGMT,NRTRU
      REAL*8 PINF
C
      PARAMETER ( NWCOMB=NWCOMX )
      COMMON/COMBIN/MASTER(NWCOMB)
      DIMENSION ASTER(NWCOMB)
      EQUIVALENCE(MASTER(1),ASTER(1))
C
      COMMON/CGEOMT/KREG,KREGM1,IR3DST,IR2DST,AREAD(MRG),
     * KONDC,KONDZ,I3D,KREG3D,LREG3D,LQUOTA,LDZETA,KSXY3D,NZETA
C
      COMMON/STOGEO/IR,IREG,IREG3D,ISENT,LEAVES,XIN,YIN,ZIN,
     * COSP,SINP,COST,SINT,TANT,COSKT,DIST,PILX,IRZ,IREGZ,IREG3Z,
     * IZIN,IZ,ISSOU,X,Y,Z
      REAL*8 X,Y,Z
C
C
      COMMON/COMPOS/NION,NCOM,LIGHTW,RNLITE,EWLITE,
     * SYMB(MIO),PERC(MIO),DENSE(MRG),DENSI(MRG,MIO),EATMD,EATMR,
     * TEMPE(MRG),TEMPI(MRG),IBOUND(MRG),ALBEDO(MRG),LIWALL(MRG),COEFMX
     *,IEMIS(MRG),BEXPT(MRG),WEXPT(MRG,3),SHP,DRIFTV(MRG),DRIFTC(MRG,3)
     *,ISTARG(MRG),CHARGE(MCP),PROREQ(4),ALBATO(MRG),ALBENE(MRG),INDHEL
     *,NTSPUT,PSEMIP(MRG,2),IRTRIM(MCP,MCP),NFTRIM,LPVOID,DCUTCX,TCUTCX
     *,ICUTCX,INDEF,IYCHEM,EYCHEM,AYCHEM,NLEAK,XLEAK(4,MLEAK),ILEAK(MRG)
     *,NZREC,NUTRLZ(MCP),MIMP,IGOPT,PRORCL(MIO),UNDEF
     *,NZYIZ,CZYIZ(MCP),AYIZ(MCP),BYIZ(MCP),EYIZ(MCP),IYIZ(MCP),ALFCH7
     *,PARDIR(MRG,3),RECMAT(MIO,MIO,MRG)
C
      PARAMETER (NCT=24,MKES=4)
      COMMON/CTAB0/TABLE(NCT,11),IZLOZ(0:100)
      COMMON/CTABLE/SPUTAB(NCT,NCT)
     *,LABINT(MCP),LABEXT(NCT),IXS(MIXS),ITRIM
     *,NIONPM,MCX,MOLEC(MCP),IATOM(MCP),EXTSYM(MCP),QESP(NCT,NCT)
     *,EB(NCT),QCOEF(NCT),TLOTZ(NCT,26),CXRMAX(5,MRG),ESRMAX(MKES,MRG)
     *,TBELL(NCT,26),ITAGS(NCT,NCT,2)
C
      COMMON/ADASC/IHYR,IZYR,IDYR,USADAS
      CHARACTER*80 USADAS
C
      PARAMETER (MAXZET=12, MH=14, MZADJ=MZN*6, MEIBOR=MZADJ*2)
      PARAMETER (MMACRO=30+1)
      COMMON/SCORE/NAZONE,NDUM,NZONE,IZONA(MRG),VOLZ(MZN),IBOUNZ(MZN),
     * ELAST(MZN,MCP),FLUXZ(MZN,MAXZET),ESCAPE(MZN,MCP),REDP(MZN,MCP),
     * ABSOR(MZN,MCP),ELOST(MCP,MZN),WACOL(MCP,MZN,MWAC),
     * QF(MCH,MCC,8),QI(MCH,MCC,8),AF(MCH,MCC,8),AI(MCH,MCC,8),SAG(MCP),
     * FLUX(MZN,MCP),ENNE(MZN,MCP),EAVER(MZN,MCP,2),ENFLUX(MCP,MZN,MEG),
     * CEXED(MZN,MCP),DISSOC(MZN,MCP),TRAMAT(1,1,1),WBORN(MCP),
     * HISTOR(MCP),COLS,FUGA,ESCEN(MZN,MCP),REDFUE(MSD,MSC,MCP),
     * ZENTRY(MCP,MCH),WNP,WRS,COLW,TRUNC,NLATS,IS,IDELAT(MSD,3),
     * SCALAT(MSD,MSC),SPFUEL(MSD,MSC,MCP),QDEPL(MSD,MSC),SPIN(MCP),
     * ERECYC(MCP,MZN,2),PRECYC(MCP,MZN,3),NCHAN,NZCHAN(MCC),ICHAN(MZN),
     * MZCHAN,IZCHAN(MCH,MCC),SPAREA(MSD,MSC),DENSEZ(MZN),TEMPEZ(MZN),
     * YEARFR,TARLHY(MSD),TARLHE(MSD),REDHEL(MSD,MSC,MCP),PIONW,PINEFW,
     * TLONWI,PIONRE,PMOLR1,PMOLR2,AALB,QALB,AHENR,QHENR,AHETP,QHETP
     *,SPUHEL(MSD,MSC,MCP),ECHBEM(1,1),ELOBEM(1,1),VELOC(MZN,MCP,3)
     *,WPRSP,EPRSP,WTASP,ETASP,SIGMAN(MZN,6),WNBR(MZADJ,2)
     *,NEIBOR(MEIBOR),LOCNBR(MZN),NMACRO,IMACRO(MZN),COSNOR
     *,ISPOFF(MMACRO-1),IPVOID,TSUBD,ITAU,MSPOFF,YNOSP
C
      REAL*8 FLUXZ,ESCAPE,ELAST,REDP,ABSOR,WACOL,SPIN,
     * FLUX,ENNE,EAVER,ENFLUX,CEXED,WNBR,
     * DISSOC,TRAMAT,SAG,WBORN,HISTOR,COLS,FUGA,ESCEN,WNP,WRS,COLW,TRUNC
     *,SPFUEL,ERECYC,PRECYC,REDFUE,QDEPL,ZENTRY,SPUHEL,ECHBEM,ELOST
     *,ELOBEM,REDHEL,TARLHY,TARLHE,VELOC
     *,WPRSP,EPRSP,WTASP,ETASP,SIGMAN
C
      COMMON/CJUNK/MCOLP,MCOLW,NCOLP(2),NCOLW,ICUPR,IERAND,ISEHHE,ISFLAG
     &     ,ITEST,RTEST
C
      PARAMETER (MAXSEF=1000)
C
      PARAMETER (MILLE=10000)
      COMMON/COMUNE/BUFFER(MILLE),IBUFER(MILLE)
C
      COMMON/CHXHP/ ICXTYP
C
      CHARACTER*80 LABRUN(2)
      COMMON /CCHAR/LABRUN
C                                                 LOCAL ARRAYS
      DIMENSION NRZONA(MRG),ICHKR(MRG),KBUFER(MZN)
      PARAMETER (KOMMAX=100)
      CHARACTER*4 COMM(20*KOMMAX),CEOF
      DATA CEOF/'/*  '/
C
      CHARACTER*4 BLANK,QUEST,CEND,CTRAN
      CHARACTER*1 ACHAR,XCHAR,MCHAR
      DATA BLANK /'    '/, QUEST /'   ?'/,JUNK/-14532784/,ACHAR/'A'/
     *,XCHAR/'X'/,HELIUM/4HHE  /,CEND/'*END'/,MCHAR/'M'/
      REAL RBLANK
      DATA RBLANK/4H    /
C
      CHARACTER*1  BCD,EMIS,CONT
C
      DIMENSION SIMBOZ(MCP),ZRECYC(MCP),WSOSMZ(MCP),WSOSUM(MIO)
C     DOVREBBE ESSERE MCP-MIO
C
      LOGICAL LTRAN
C
      CHARACTER*28 ADTEST
      EQUIVALENCE (BUFFER,ADTEST)
C
      CHARACTER*9 VERSIO,VERSON
      DATA VERSIO/'07-SEP-98'/
C
   10 FORMAT(12I6)
   15 FORMAT(24I3)
   20 FORMAT(12E6.0)
   25 FORMAT(6E12.0)
   30 FORMAT(1H1)
C
C
C     DIMENSIONI MASSIME DEL PROGRAMMA
C     --------------------------------
C     MRG=       NO MORE THAN MRG REGIONS.
C                   ARRAYS DEPENDING ON MRG:
C                   ALL THOSE CONTAINING '(MRG' OR ',MRG'
C
C     MZN=       NO MORE THAN MZN ZONES.
C                   ARRAYS DEPENDING ON MZN:
C                   ALL THOSE CONTAINING '(MZN' OR ',MZN'
C
C     MCH=       NO MORE THAN MCH CHANNELS.
C                   ARRAYS DEPENDING ON MCH:
C                   NZCHAN,BUFF,NORDIN,IZCHAN,QF,QI,AF,AI
C                   ALL OF THE FORM (MCH,...
C
C                TRANSITION MATRICES: THE ARRAY TRAMAT, ALSO DEPENDING
C                ON MCH, IS NO LONGER COMPUTED BECAUSE TOO BIG NOW.
C                IF NEEDED, UPDATE DIMENSIONS AND RESET TRAMAT=0.
C
C           N.B. VECTOR CHANNEL IN S.R. RUN HAS DIMENSION > OR = TO
C                       MAX(MCH, MBS, MNTARG)
C
C     MCC=       NO MORE THAN MCC ZONES(CELLS) PER CHANNEL
C                BUT PLOTS WILL NOT BE OBTAINED IF REGIONS/CHANNEL > 35
C                   ( <=35,THE MAX. NUMB.OF CHAR.1,2..A,B..Z IN PLOT).
C                   ARRAYS DEPENDING ON MCC: IZCHAN,BUFF,QF,QI,AF,AI
C                   ALL OF THE FORM ...,MCC
C
C     MSD=          MSD=MAX. NUMBER OF SIDES WHICH CAN BE DIVIDED INTO
C                       INTERVALS (MARCH 1988)
C                   ALL ARRAYS CONTAINING (MSD, AND (MSD)
C                   MOREOVER EROTOT,REDTOT,ERONET,TERTOT(MSC*MSD)
C                     IN FUTURO PORTARE QUESTO 70 A 99 E DIMIN. MSC
C                NO MORE THAN MSD WALLS FOR WALL-DISTRIBUTIONS.
C                   DIMENSIONS DEPENDING ON MSD:
C                   SPUHEL,QDEPL,REDHEL,REDFUE,SCALAT,IDELAT,SPAREA,
C                   TARLHY,TARLHE,VELOC,SPFUEL
C
C     MSC=          MSC=MAX. NUMBER OF SCANNING INTERVALS(MARCH 1988)
C                      IN FUTURO PORTARE QUESTO 25 A 5 E AUMEN. MSD
C                NO MORE THAN MSC INTERVALS FOR DISTRIB. ALONG WALLS
C                   ARRAYS DEPENDING ON MSC:
C                   ALL THOSE CONTAINING ',MSC'
C                   MOREOVER EROTOT,REDTOT,ERONET,TERTOT(MSC*MSD)
C
C     MBS=          MBS=MAX. NUMBER OF BOUNDARY SEGMENTS(MARCH 1988)
C                NO MORE THAN MBS SEGMENTS FOR SOURCE(APPR.=MCH+2MCC)
C                   ARRAYS DEPENDING ON MBS:
C                   ALL THOSE CONTAINING '(MBS'
C
C     MEG=       NO MORE THAN MEG ENERGY GROUPS.
C                   ARRAYS DEPENDING ON MEG:
C                   EGEV,ENFLUX
C     MIO=       NO MORE THAN MIO ION SPECIES IN PLASMA
C     MCP=       NO MORE THAN MCP COMPONENTS (IONS+MOLEC.+WALL MATER.)
C     MZSOUR=    NO MORE THAN MZSOUR LAYERS FOR SOURCE ALONG Z.
C     MSOUXY=    NO MORE THAN MSOUXY SOURCE TARGETS NORMAL TO Z.
C     MAXZET=    NO MORE THAN MAXZET SLABS (SLICES).
C
C
      CALL ERRSET(208,256,-1,1)
C
C     ITEST,RTEST ARE USED FOR TESTING PURPOSES
      ITEST=0
      RTEST=0.0
C
      IF(ISETUP.NE.0) THEN
        IF(.NOT.LSETUP) THEN
          WRITE(IUERR,*) ' NIMBUS NOT YET FULLY SET'
          CALL EXITN(1)
        ENDIF
        CALL WRITIM
        CALL TODAY(ADTEST,ITRAN)
        WRITE(IOUT, 30 )
        WRITE(IOUT, 40 )
        WRITE(IOUT, 50 )
        WRITE(IOUT, 60 )
        WRITE(IOUT, 61 ) VERSIO
        WRITE(IOUT, 62)BUFFER(2),BUFFER(3),BUFFER(5),BUFFER(6),BUFFER(7)
        WRITE(LABRUN(1), 61 ) VERSIO
        WRITE(LABRUN(2), 62 )
     &  BUFFER(2),BUFFER(3),BUFFER(5),BUFFER(6),BUFFER(7)
        IF(IOUT.NE.IUERR) WRITE(IUERR,63) VERSIO
        IF(ISETUP.EQ.-1) THEN
          WRITE(IUERR,'(/'' BY-PASS NIMBUS PRESET'')')
          RETURN
CT
CT           ITIOP E ISETUP=-2 SONO TEMPORANEI TO CHECK TCUT
CT      ELSE IF(ISETUP.EQ.-2) THEN
CT        IF(ITIOP.EQ.1) THEN
CT          ITAPIO(1)=ITAPIO(1)
CT          ITAPIO(2)=ITAPIO(2)
CT          ITIOP=-1
CT        ELSE
CT          ITRAN=ITAPIO(1)
CT          ITAPIO(1)=ITAPIO(2)
CT          ITAPIO(2)=ITRAN
CT          ITIOP=1
CT        ENDIF
CT        WRITE(IUERR,'(/'' BY-PASS NIMBUS PRESET'')')
CT        WRITE(IUERR,1416) TCUT,ITAPIO,NSTEP
CT        RETURN
        ELSE IF(ISETUP.EQ.1) THEN
          WRITE(IUERR,'(/'' READ-IN ONLY PLASMA AND SOURCE'')')
          READ( IN,35,END=3150 ) COMM(1),ITRAN
          IF(COMM(1).EQ.CEOF) GOTO 3150
          READ( IN,90 ) (COMM(I),I=1,20)
          WRITE(IUERR, 180 )(COMM(I),I=1,20)
          IDBUG = 0
          GOTO 1415
        ELSE
          WRITE(IUERR,'(/'' ILLEGAL NIMBUS SET-UP MODE '',I2)') ISETUP
          CALL EXITN(1)
        ENDIF
      ELSE
        LSETUP=.TRUE.
        TIMINF=1.0E+30
CT      ITIOP=-1
      ENDIF
C
      MNTARG=MBS+MSOUXY
      IR2DST=2
C
C     SET TO ZERO QUANTITIES THAT INPUT COULD BYPASS
C     ----------------------------------------------
      NCHAN=0
      NSEGS=0
      NLATS=0
      NZETA=0
      NSOUXY=0
C
C     INGRESSO DATI
C     -------------
      READ(IN,35,END= 3150 ) COMM(1),NSKEDE,ITEST,RTEST
   35 FORMAT(A4,I2,I6,E12.0)
      IF(COMM(1).EQ.CEOF) GOTO 3150
C
      CALL WRITIM
      CALL TODAY(ADTEST,ITRAN)
      WRITE(IOUT, 30 )
      WRITE(IOUT, 40 )
   40 FORMAT(15(/),                                           69H
     *       ****           ****    ****    ****            ****    ,50H
     *************      ****       ****       *******   /     69H
     *       *****          ****    ****    *****          *****    ,50H
     **************     ****       ****     *********** /     69H
     *       ******         ****    ****    ******        ******    ,50H
     *****       ***    ****       ****    ****     *** /     69H
     *       *******        ****    ****    *******      *******    ,50H
     *****       ***    ****       ****    ****     *** /     69H
     *       ********       ****    ****    ********    ********    ,50H
     *****       ***    ****       ****    ****         /     69H
     *       *********      ****    ****    **** ****  **** ****    ,50H
     **************     ****       ****     ****        /     69H
     *       ****  ****     ****    ****    ****  ********  ****    ,50H
     ************       ****       ****      *****      /     69H
     *       ****   ****    ****    ****    ****   ******   ****    ,50H
     **************     ****       ****        *****    )
      WRITE(IOUT, 50 )
   50 FORMAT(                                                 69H
     *       ****    ****   ****    ****    ****    ****    ****    ,50H
     *****      ****    ****       ****          *****  /     69H
     *       ****     ****  ****    ****    ****     **     ****    ,50H
     *****       ****   ****       ****            **** /     69H
     *       ****      **** ****    ****    ****            ****    ,50H
     *****       ****   ****       ****             ****/     69H
     *       ****       ********    ****    ****            ****    ,50H
     *****       ****   ****       ****   ****      ****/     69H
     *       ****        *******    ****    ****            ****    ,50H
     *****       ****   *****     *****   ****      ****/     69H
     *       ****         ******    ****    ****            ****    ,50H
     ***************     *************     ************ /     69H
     *       ****          *****    ****    ****            ****    ,50H
     **************       ***********       **********  /     69H
     *       ****           ****    ****    ****            ****    ,50H
     ************           *******           ******    )
      WRITE(IOUT, 60 )
      WRITE(IOUT, 61 ) VERSIO
      WRITE(IOUT, 62 ) BUFFER(2),BUFFER(3),BUFFER(5),BUFFER(6),BUFFER(7)
   60 FORMAT(/14X,'MONTE CARLO NEUTRAL TRANSPORT IN PLASMA
     *      AUTHORS: E. CUPINI, A. DE MATTEIS, R. SIMONINI')
   61 FORMAT(14X,'VERSION ',A9)
   62 FORMAT(14X,'EXECUTED AT ',2A4,' ON ',3A4)
      WRITE(LABRUN(1), 61 ) VERSIO
      WRITE(LABRUN(2), 62 )
     &BUFFER(2),BUFFER(3),BUFFER(5),BUFFER(6),BUFFER(7)
      IF(IOUT.NE.IUERR) WRITE(IUERR,63) VERSIO
   63 FORMAT(/120('=')/'0NIMBUS VERSION ',A11)
C            ***************
C            *   JOURNAL   *
C            ***************
C   AMENDED 10-DEC-81 VELOCITY COMPOSITION
C      "    10-DEC-81 RELATIVE SPEED BETWEEN FLOW AND NEUTRAL
C      "    11-DEC-81 SHEATH POTENTIAL
C      "    18-DEC-81 REJECTION FOR CHARGE-EXCHANGE (C.X.) SIMULATION
C      "    21-DEC-81 ENERGY CUT FOR C.X. CROSS-SECTION
C      "    12-FEB-82 EXPONENTIAL BIASSING
C      "    18-FEB-82 SPUTTERING CORRECTED
C      "    22-FEB-82 DOUBLE-PRECISION SCORES
C      "    12-MAR-82 SOUND SPEED
C      "    31-MAR-82 H-ISOTOPE MOLECULES
C      "     9-APR-82 RERUN OF ABORTED HISTORIES
C      "    19-APR-82 NEW TARGETS: AL,AU,BE,SI,TA,T,V,ZR
C      "     6-MAY-82 29 ZONES, TRANSITION MATRIX
C      "    10-MAY-82 MORE SURFACE SOURCE SEGMENTS
C      "    14-MAY-82 SPUTTERING SPATIAL DISTRIBUTION
C      "    26-MAY-82 SOURCE IN TRANS.MATR, IONS
C      "     2-JUL-82 EXPER. Q FOR SPUTT. AND C WALLS
C      "    16-JUL-82 THREE-DIMENSIONAL GEOMETRY
C      "    19-JUL-82 ENERGY CUT
C      "    22-JUL-82 RUSSIAN-ROULETTE REVISED
C      "     6-SEP-82 VOID, MONOCHROMATIC SOURCE FOR BEAM INJECTION
C      "    24-SEP-82 M(E) FROM MAXWELL(E)
C      "     9-OCT-82 DOUBLE SEMI-ELLIPSES CONFIGURATION FOR LIMITER
C      "    18-OCT-82 IMPROVED WALL PENETRATION
C      "    26-OCT-82 NEW CORRELATED RANDOM NUMBERS
C      "    15-NOV-82 SPUTT.ENERGY DISTR., NO ANGLE BELOW 300
C      "    23-NOV-82 ION-IMPACT IONIZATION
C      "     7-JAN-83 MAX. C.X.(IREG3D), C.X. CORR.D>15KEV
C      "    26-JAN-83 MOLEC. FROM WALLS, CUTOFF FOR SPUTTER.,
C                     IONIZED HEAVY IMPURITY RECYCLING
C      "    21-FEB-83 ENERGY AND MOMENTUM SOURCE
C      "    30-MAR-83 CROSS SECTION BY GAUSS-HERMITE OR VR* FOR H AND HE
C      "     8-APR-83 COLLISION CUTS, RE,RN FOR CU
C      "    14-APR-83 ELASTIC SCATTERING FOR H, HE
C      "     1-JUN-83 AUTOMATIC INPUT OF PARALLELOGRAM GRID
C      "    15-JUN-83 CHANNEL CONCEPT
C      "     1-JUL-83 GRAPHIC PRESENTATION OF RESULTS
C      "    10-AUG-83 BACKSCATTERED ENERGY SAMPLED
C      "    29-AUG-83 RESULTS REFERRED TO SOURCE INTENSITY
C      "     7-SEP-83 RECOMPUTATION OF THE SOURCE (ABANDONED 1985)
C      "    15-SEP-83 PUMPING REQUIREMENTS
C      "    26-SEP-83 EROSION IN CENTIMETERS
C      "     3-OCT-83 ALBEDO PHYSICS REVISITED
C      "    10-OCT-83 ASSIGN CHARGE OF HEAVY IONS ENTRAINED IN PLASMA
C      "    28-OCT-83 3D SOURCE FOR JET (AND OTHERS) LIMITER
C      "     4-NOV-83 MODIFIED FOR CRAY COMPUTER
C      "    28-NOV-83 FIRST ENTRY INTO REGION & IMP.RECYC. FOR 3D SOURCE
C      "     1-DEC-83 E DEPOSITED IN CHANNELS BEFORE EMIGRATION (ABAND.)
C      "     5-DEC-83 SPUTTERING ORIGINATED BY HELIUM
C      "    13-DEC-83 ELECTRON ENERGY LOSS
C      "     5-JAN-84 ESTIMATION OF ALL AREAS
C      "    18-MAY-84 REFLECTION COEFFICIENTS TEND TO ZERO FOR E.LT.2
C      "    26-JUN-84 GRID OF IRREGULAR QUADRANGLES
C      "    19-JUL-84 GEOMETRY MAP EDITION IMPROVED
C      "    18-SEP-84 ESCAPE THROUGH BOUNDARY & POWER RADIATED
C      "     3-OCT-84 ELECTRON ENERGY LOSS FOR MOLECULAR DISSOCIATIONS
C      "     4-OCT-84 ENERGY GROUPS FROM 4 TO 8
C      "     5-OCT-84 FIRST ENTRY INTO A REGION WITH MANY ENTRIES
C      "    20-NOV-84 SIMPLIFIED FITTING FORMULAS FOR FE,NI REFLECTION
C      "    26-NOV-84 NEW DATA FOR LOW ENERGY REFLECTION (C,NI,FE,W)
C      "     3-DEC-84 IONIZATION AND MOLECULAR RECOMBINATION ENERGIES
C                     DEPOSITED IN THE WALLS
C      "     6-DEC-84 SPECIFIC REFL.COEFF. FOR HIGH ENERGY DEUT. ON AU
C      "    23-JAN-85 CX X-SECTIONS FOR H UPDATED AT LOW ENERGY (LT 200)
C      "     9-AUG-85 NIMBUS AS A SUBROUTINE AND DENSITY RESCALING
C      "    28-JAN-86 SPLITTING + IMPURE PLASMA (IMPURE=NOT NEUTRAL,NOW)
C      "     5-JUN-86 OPTION FOR IONS EFFECTS TO WALLS (IONTOW)
C                     FIRST EXIT OF NEUTRAL FROM WALL:DO NOT SUBTRACT E
C                     IONIS.IMPURITY:SCORE ONLY SPUT,REDEP,COLL.(ALWAYS)
C                     SP. ORIG.FROM HE(&SONS) SEPARATED FROM FUEL(&SONS)
C                     IDEM FOR REDEPOSITIONS
C                     TOTAL THERM.LOAD ON SURF.DUE TO HE SEPAR.FROM FUEL
C                     PLOT TOTAL EROSION,REDEP., THERM.LOAD ON SURFACES
C                     SUMMARY OF CALCULATED IONIZATION SOURCE
C                     IONISATION ENERGY IN WALLS ONLY FOR BEAM PROBLEMS
C                     MODIFIED ELECTRON ENERGY LOSS (HOTSTON, PR.COMM.)
C                     TRANS.MATR,NAT.CHANN,PL.REV,OMITTED(NOT CANCELLED)
C                     USES S.R. RANF OF CRAY
C      "    10-SEP-86 DIMENSIONS ENLARGED FOR LINKAGE TO PLASMA CODES:
C                                              FROM   TO
C                                     REGIONS   255  601
C                                       ZONES   163  599
C                                    CHANNELS    29   69
C                               CELLS/CHANNEL    10   19
C                             SOURCE SEGMENTS    31   71 (PARALLEL TO Z)
C                       TOTAL SOURCE SEGMENTS    45   85 (+NORMAL  TO Z)
C                           SCANNING OF WALLS    17   31
C                       TOT.MEMORY REQUIRED: FROM 220(OLD) TO 370 KWORDS
C      "    18-SEP-86 OUTPUT IN TERMS OF CHANNELS AND CELLS,IF DEFINED.
C                     ORDER OF ZONES IN A CHANNEL REDEFINED.
C      "    24-SEP-86 OUTPUT FOR PLASMA CODE(FUEL AND HELIUM,SEPARATELY)
C      "     9-OCT-86 STANDARD DEVIATIONS COMPUTED
C      "    21-NOV-86 EDIT DATA IN TERMS OF CHANNELS AND CELLS
C                     CONVENT.ON WALL EFFECTS INVERT:IONTOW=1 ONLY NEUTR
C                     EDIT TOTAL WALL EFFECTS (INCLUDING NET EROSION)
C                     AVOID LOG. PLOTS WHEN TOO MANY DECADES
C                     COMPUTE ST. DEV. IN ESCAPE REGIONS
C      "    21-JAN-87 NEW IONIZATION CROSS SECTIONS, FROM BELL ET AL.
C      "    22-JAN-87 NEW, CORRECT, ELASTIC CROSS SECTIONS.
C      "     2-FEB-87 BELL IONISATION X-SECTIONS ACTIVATED (AT JET).
C      "     5-FEB-87 MOLECULAR DISSOCIATION X-SECT.*0.3(SR XSMOL)
C      "              ELECTR.ENERGY LOSS REVISED
C      "              MULTISTEP IONISATIONS AT HIGH DENSITIES  (SR XSI)
C      "              (COLLISIONAL RAD.IONIZ.RATES FOR H,HE)   (AT JET)
C      "    24-FEB-87 AUTOMATIC DEFINITION OF ZONES (NZONE=0) (AT JET)
C      "    26-FEB-87 SR.HOW CORRECT: SOUR.SEGM. NOW CAN BE=SIDE OF WALL
C      "    28-FEB-87 ACCEPT CHANNEL WITHOUT CORRESPONDENCE WITH TARGET
C      "    11-MAR-87 OPTIONS FOR FLEXIBLE OUTPUT(KINDPR,COL.7,CARD 1)
C      "    17-MAR-87 CONSTRUCTS INPUT FILE FROM DATA OF PLASMA CODE
C      "    20-MAR-87 PUNCH RESULTS TO BE FED TO PLASMA CODE. 999 REGION
C      "    30-MAR-87 S.R. CHKPOL STOPS OR WARNS ACCORDING TO ICHKP(0,1)
C                     ICHKP, FIRST CARD OF GEOMETRY, 5-TH PARAM.,COL.25
C      "     3-APR-87 MSD INCREASED FROM 11 TO 15 (WALL STATISTICS)
C      "     6-APR-87 BALANCES: PIONW,TLONWI,PINEFW,PTTOPL,PESCAP,TLONWP
C      "     7-APR-87 MSD=31,MSC=2,MCP=6,MEG=2
C      "     9-APR-87 OMITTED VECT. COMPOSITION OF MAXW. AND FLOW VEL.
C      "     9-APR-87 HELIUM SOURCE DISTRIBUTION DIFFERENT FROM FUEL
C      "    13-APR-87 ASSUMED MCH=41,MCC=49, NO PLOTS IF       MZCHAN>35
C                "    (N.B. MZCHAN ARE EFFECTIVE REG/CHANNEL)OR NCHAN>35
C                "    MOREOVER NO PLOTS IF NLATS*MSCAN> 399
C      "    14-APR-87 IF KINDPR < 2 THEN NO DATA EDITION (EXCEPT SOURCE)
C      "    27-APR-87 SOUND VEL. OF D,T=DT; ALSO HE WITH V AS DT(SR HOW)
C      "    29-APR-87 DISTIN.GAS-METAL FOR DECID.STICK. IN WALLS (TABLE)
C      "    30-APR-87 HEAVY IMPURITIES EXCLUDED FROM ENERGY BALANCES
C      "     1-MAY-87 PLASMA DRIFT DIRECT. COS. IN EACH REGION (DRIFTC)
C      "     2-MAY-87 NEW MODEL FOR IMPUR.RECYCL.(SEE MIKE IN S.R. HOW)
C      "     6-MAY-87 STORE IN PUNZDN IMP.DENS.(ONLY THE LAST) FOR EDGE2
C      "    13-MAY-87 STORE IN PUNADN,PUNMDN DENS.ATOM,MOLEC. FOR EDGE2
C      "    21-MAY-87 COSINES OF DRIFT IMMEDIATELY AFTER # OF COMPONENTS
C      "    22-MAY-87 MBS DA 71 A 98 E GEOM. COMB. DA 40000 A 59999
C      "    27-MAY-87 MSD DA 31 A 53
C      "    12-JUN-87 SHP=2.5,SAMPLE E FROM MAX.(NOT MAX.FLUX) AND *1.66
C      "    15-JUN-87 RECOMB. ELECTR.&MOL. IN WALLS:PIONRE,PMOLR1,PMOLR2
C      "    16-JUN-87 COMPUTE ST.DEV. WITH BATCH NSG DEFINED IN SR INPUT
C      "    18-JUN-87 ASSUMED 6T INVARIANT FOR INIT.ENERGY. SEE IN INPUT
C      "              HOW MAXW. CORRECTED THROUGH COEFMX WHEN SHP GIVEN.
C      "    29-JUN-87 ST.DEV.ALBEDO(AALB,QALB) & HE ENRICH.(AHENR,QHENR)
C      "     9-JUL-87 COMPUTE ST.DEV. OF DENSITY OF FIRST ION PRESENT
C      "              (IF ST.DEV. OF MOL.DESIRED, CHANGE TEST IN REVISE)
C      "    10-AUG-87 ST.DEV. OF HELIUM GOING TO THE PUMP(AHETP,QHETP)
C      "    13-AUG-87 SAVE COMMAND FOR CRAY2, FORTRAN 77
C      "              RE-READ TOT. SOURCE AFTER SEGM./SURF.IF SINTEN<0
C      "    15-SEP-87 COEF. OF MAXWELLIAN=5/2(COEFMX=5/3,COEFMX*3/2=5/2)
C      "    16-SEP-87 ERROR IN DENSITY OF FIRST MOL. AND HELIUM ADDED
C      "    19-OCT-87 RECOMBINATION SOURCE FOR 2D AND 1 SPECIES
C      "    16-DEC-87 RESIDENCE TIME OF PARTICLES IN THE ASSEMBLY REUSED
C      "    12-JAN-88 SLOW MOLECULAR DISSOCIATION (0.3 EV) AFTER JANEV
C      "     2-FEB-88 OUTPUT : INTEGRATED TOTALS OF CELLS * VOLUME
C      "     4-FEB-88 H-ALPHA PACKAGE
C      "    10-FEB-88 LINKED TO BRAAMS PLASMA CODE
C      "    24-FEB-88 TOT.FUEL ESCAPED (TOTFES) AND FUEL ESCAPED THROUGH
C      "              ALBEDO REGIONS (TOTFEA) TRANSMITTED TO PLASMA CODE
C      "     9-MAR-88 OUTPUT SHORTENED WHEN KINDPR=0 (SEE KINDPR). ONLY
C      "              MAP,COMMENTS,INPUT AND OUTPUT IN TERMS OF CELLS
C      "    15-MAR-88 VARIABLE DIMENSIONS FOR MAIN ARRAYS(SEE PARAMETER)
C      "    13-APR-88 VERSION 24-FEB-88 CORRECTED FOR MOLECULE ESCAPE
C      "    28-APR-88 ELASTIC SCATTERING ONLY FOR HELIUM (FIND 'C OLD ')
C      "    13-MAY-88 HARD SPHERE MODEL FOR EL.SC. OF HELIUM (FIND'HARD'
C      "              IN S.R. ELXS, COLES TO ACTIVATE THIS SIMPLE MODEL)
C      "    16-SEP-88 HALRAD(K)=0 MOVED, PUNALF INTRODUCED
C      "    27-OCT-88 NEW H-ALPHA PACKAGE ADDED FOR MOLECULES.
C      "     9-FEB-89 NEW UNIT FOR ERROR MESSAGES
C      "    22-MAY-89 HEAVY IMPURITY SOURCE/ESCAPE
C      "    17-JUL-89 NEUTRAL ENERGY
C      "    29-JAN-90 IF SHP.LT.0, NEITHER FLOW NOR SHEATH POTENTIAL,
C      "              NO FIRST COLLISION WITH WALL
C      "     8-FEB-90 MODIFY CODE THAT CAUSES IBM 3090 WARNINGS,
C      "              CORRECT ALIGNMENT ERRORS IN S.R. COLES,
C      "              MEG=5
C      "     1-MAR-90 CHANNEL STATISTICS FOR IMPURITIES.
C      "    14-AUG-90 CHANGE MCC=49 TO MCC=99
C      "    31-AUG-90 CHANGE FORMAT OF PHYSICAL DESCRIPTION OF REGIONS
C      "    22-OCT-90 NCHAN,NZCHAN(),IZCHAN(,) APPEND TO PUNCH FILE.
C      "    30-APR-91 CORRECTED ESCAPE PRINTOUT.
C      "    28-MAY-92 CORRECTIONS FOR REAL*8/4 (FROM CANADA).
C      "    02-NOV-92 INCREASE MRG FROM 999 TO 1999
C      "    04-NOV-92 (1) GENI - CHANGE FORMATS TO ALLOW FOR MORE THAN
C                                999 POLYGONS.
C                              - READ VERTICES AS E11.4 RATHER THAN
C                                E10.3
C                     (2) GETVOL - KEY VARIABLES TO REAL*8
C                     (3) INCREASE MBS FROM 98 TO 198
C                     (4) INPUT - CHANGE FORMAT OF READING IN WALL
C                                 SEGMENTS FROM F6.0 TO E12.4  AND
C                                 BREAK INFO. INTO TWO LINES.
C                     (5) DON'T HAVE ANY DATA IN COLUMN 1 OF INPUT DATA.
C                         EXCEPT FOR MAP DATA.
C      "    03-MAR-93 CHANGE MCH=51  TO MCH=41
C                     CHANGE MSC=25  TO MSC=2
C                     CHANGE MBS=198 TO MCH=160
C      "    16-MAR-93 CHANGE FORMAT OF PHYSICAL DESCRIPTION OF REGIONS:-
C                     (A) NE,TE,TI,VDRIFT    (F6.0 TO E12.4)
C                     (B) NI                 (F6.0 TO E12.4)
C                     (C) ALBEDO,BEXPT,WEXPT (F6.0 TO E12.4)
C      "    18-MAR-93 VELOCITY OF THE NEUTRAL FLUID
C      "    10-JUN-93 A WALL REGION MAY BE CONSIDERED AN ALBEDO REGION
C                     BY THE NEUTRALS (NOT BY THE PRIMARY IONS).
C      "              CHECK ON SIGT MOVED AFTER 'NUCLIDE URTATO' IN RUN
C      "     5-JUL-93 NEW SPUTTERING DATA (L.HORTON)
C                     AVERAGE ENERGY OF PROJECTILES AND SPLINTERS
C                     THRESHOLD ENERGY FROM NEW SPUTTERING DATA USED
C                     TO GET CONSISTENT CUT-OFF ENERGY (ECUTS)
C      "    16-SEP-93 CORRECTION TO 'SPUTER' I.E EPSKEV ---> EPSKV
C      "    14-OCT-93 ERROR CHECK IN S.R. 'NORMAL'
C                     INCREASE MRG FROM 1999 TO 2499
C      "    26-OCT-93 ENERGY OF NEUTRALS RE-EMITTED AS ATOMS
C                     PRESCRIBED INITIAL ENERGY
C      "     6-DEC-93 COMPARISON WITH LINEARISED SOURCES, IXS, MCX.
C                     X.S FROM S.R. 'NIMBXS'.
C      "    10-DEC-93 CORRECTED PLASMA SOURCES DUE TO MOLECULES
C      "    20-DEC-93 HOT/COLD NEUTRALS, VELOCITY MOMENTA (FOR L.H.)
C      "    31-DEC-93 SWITCH TO TURN OFF NEUTRAL SPUTT. OF IMPURITIES
C      "    11-JAN-94 NEUTRAL FLUXES ONTO WALL PASSED OVER TO EDGE2D
C                     FLUXES THRU ZONE BOUNDARIES, CORRECTION IN
C                     WACOL(IREAC=2) FOR RE-EMISSION
C      "    24-JAN-94 MDSTSR IN S.R. 'PILS' ARGUMENT LIST
C      "    25-JAN-94 NEUTRAL PARTICLE BALANCES.
C                     SEVERAL PARAMETER DECLARATIONS.
C      "              NEUTRAL FLUXES ONTO WALL PASSED OVER TO EDGE2D.
C                     CORRECTION IN WACOL(IREAC=2) FOR RE-EMISSION.
C      "    31-JAN-94 RECYCLING + RECOMBINATION SOURCE (IRECO=2).
C                     SINTEN <-- SRECYC+SRECOM
C                     RECOMBINATION NEUTRALS FROM SHIFTED MAXWELLIAN.
C                     IXS(1)=1: NOT IMPLEMENTED - SET=3
C                     IXS(1)=2: DITTO
C                     IXS(1)=3: MULTI-STAGE IONISATIONS
C                     IXS(1)=4: SINGLE-STAGE IONISATIONS
C      "     7-FEB-94 REVISION OF CORRELATED RANDOM NUMBERS
C                     (ICORR = MAX NO. OF CORRELATED HISTORIES).
C                     RENAMED S.R. NUMER, REMOVED S.R.S FROM MAINNIMB
C      "    14-FEB-94 MSPLIT=100, REVISION OF COLAM
C      "    23-FEB-94 IXS(1)=5: ADAS (H)
C      "     8-MAR-94 IXS(2)=0: GREENLAND/RIVIERE HYBRID CX.EX X-SECTION
C                           =1: JANEV  CX.EX X-SECTION.
C                     IXS(3)=0: JONES  MOLEC RATE COEFF.
C                           =1: JANEV  MOLEC RATE COEFF.
C                     JANEV MOLECULAR RATE COEFF. INTO S.R HMSIG
C      "    10-MAR-94 ANALOG GAME OR R.R. TO TERMINATE FUEL HISTORIES
C                     COMPUTATION OF SPUTTERING FROM NEUTRALS ONLY
C      "    11-MAR-94 ICXTYP = IXS(2)
C                     COMMON /CHXHP/
C                     MERGE JAHXHP INTO HXHP (SELECTION BY ICXTYP)
C      "    18-MAR-94 SPUTTERING FROM PRIMARY IMPURITY IONS
C      "    08-APR-94 ADAS S.R & /CEXTRA/ WITH ADAS FILE DATA
C                     CALL IOSIG WITH ADAS FILE DATA
C                     IXS(4)=0: BELL IMPURITY IONISATION RATE COEFF.
C                           =1: ADAS IMPURITY IONISATION RATE COEFF.
C                           =2: LOTZ IMPURITY IONISATION RATE COEFF.
C      "    13-APR-94 NIMBXS & IOSIG UPGRADED TO NON-HYDROGEN NEUTRAL
C                     PRELOZ & PREBEL REPLACED BY PREIOZ
C      "    15-APR-94 "LIGHT" IMPURITY
C      "    19-APR-94 S.R. 'CHKRXY' CHECKS FOR A GEOMETRY ACCIDENT OF
C                     A PARTICLE BEING OUTSIDE A GIVEN POLYGON.
C                     ZA=TABLE(LABINT(NUTRAL),2-->4).
C      "    20-APR-94 MAX. NON OF GEOMETRY ACCIDENTS.
C                     NON-CONVEX FIGURES ARE FLAGGED (ITYPE<0).
C                     VARIOUS CHECKS ON NO. OF VERTICES.
C                     CHECK FOR REGIONAL INTEGRITY.
C      "     3-MAY-94 MACRO-ZONES
C      "    10-MAY-94 IXS() REARRANGED IN INPUT FILE
C                     IXS(5) = HYDROGEN RECOMBINATION ON (1) IN 'RECSIG'
C      "    13-MAY-94 UPGRADE HORTON() TO INCL. REFL, (AS PRESCRIBED
C                     BY L.HORTON IN D3A04WK6.FORT)
C      "    08-JUN-94 UPGRADE 'RECSIG' FOR JANEV & NRL.
C      "    20-JUN-94 MACRO PROFILES, H-ALPHA, ..
C      "     8-JUL-94 GEOMETRY WRITTEN TO AND READ FROM DRIVE
C      "    13-JUL-94 RESTORED ELASTIC SCATTERING FOR H.
C                     STORED GEOMETRY POINTS
C      "     2-AUG-94 ELASTIC SCATTERING FOR H2.
C      "    14-NOV-94 ELASTIC SCATTERING FOR H, HE.
C                     HORTON VARIABLES MAY NOT BE COMPUTED
C                     (COMMENT OUT NON-APPROPRIATE BLOCK IN S.R. RUN).
C                     CORRECTION FOR JANEV'S  H2 -> H + H
C      "    30-NOV-94 MORE INFORMATION FOR MACRO-REGIONS
C      "     7-DEC-94 WALL LOADING TO EDGE2D.
C                     WACOL(,,7) = NEUTRAL COLLISIONS WITH WALLS.
C                     IEMIS(IR) = 1/2/3.
C      "    13-JAN-95 1) REMOVED ARGUMENT C FROM RANF(C) SINCE THE
C                        FUNCTION IS NOT EXPECTING AN ARGUMENT
C                     2) IN S.R 'RUN' SET ABSORB() AND DISSOC() TO
C                        REAL*4 SCALARS BEFORE PASSING TO 'HALPHA'
C                     3) CHANGED SCALAR 'HRAD' TO 'HRAD0' SINCE
C                        EDGE2D DEFINES A FUNCTION 'HRAD'
C      "    20-JAN-95 CHANGE PARAMETERS FOR EL.SC. (AA(2),AA(4))
C      "    27-JAN-95 RNLITE, EWLITE FOR LIGHT RECYCLABLE IMPURITIES.
C                     HE IMPURITY, N. IZTOJ RENAMED AS IZLOZ TO STRESS
C                     ITS LIMITATIONS.
C                     REC. IMP. CAN USE UNIVERSAL FORMULAS.
C                     TRAPPING OF ERRORS IN S.R. WALINT.
C                     REVISION OF DEBUG FOR CORREL. RAN.NUM..
C      "     1-FEB-95 EATMD ---> EATMD & EATMR
C      "    14-FEB-95 UNIVERSAL FORMULAS FOR LIGHT IMPURITY IONS.
C                     CORRECTIONS IN WALINT: E = TW  -->  E = 3/2 TW.
C                     CHECK FOR SPUTTERED IMP. FOR DEBUG
C      "     2-MAR-95 ADDITIONAL MAP, SEMI-TRANSPARENT WALLS.
C                     NUMR --> NRTRU SOMEWHERE.
C                     A1,A2 ---> A(IPROJ),A(ITARG) IN S.R. WALINT
C      "    14-MAR-95 CHECK W < WCUT AFTER WALL INTERACTION
C                     (WAS W<0 ONLY). W < WCUT -> STORE LOSSES
C      "    24-MAR-95 PUNCH FILE CHANGED FROM INTEGER/DECIMAL
C                     TO INTEGER/HEXADECIMAL FORMAT FOR MACRO-ZONES.
C                     CHANGE VMACRO & PMACRO FROM R*4 TO R*8.
C      "    28-MAR-95 FLUX SCORING DRIVEN BY MACRO-ZONES
C      "     3-APR-95 CORRECTION IN G1 (NBO UNDEFINED WITH 'OR' REG.).
C      "              IDBG<0 ACTIVATES COMPACT GEOMETRIC DEBUG.
C      "              /IOFILE/ COMMON IN FUNCTION 'IBCD'.
C                     BUG FIX - NEUTRAL TRAJECTORIES :-
C                     -------   SET NDBWMX = 0 ON NEXT HISTORY AFTER
C                               THE ONE IN WHICH IDEBWR = NDEBWR.
C                               (I.E NO MORE NEUT. TRAJ.'S COUNTING)
C      "    12-MAY-95 TRIM REFLECTION DATA.
C                     SPUTTERING IS OFF IF NEUTRAL COMES FROM
C                     PUMP VOID MACROREGION (-IPVOID). IRON PUMP WALLS.
C                     LOCAL VARIABLE FOR NDEBWR.
C                     CORRECTION IN CALL TO 'V0RELV' (TE,TI).
C                     PHYSICAL PRESET MOVED FROM 'RUN' INTO 'INPUT'.
C      "    17-MAY-95 SETUP OPTIONS.
C                     CORRECTIONS TO S.R. 'SCORES'.
C      "    18-MAY-95 CORRECTIONS TO S.R. 'SPUTER'  (ECUT, ESPUT).
C                     AREAM IN S.R 'INPUT' FOR UNDEFINED AREAS
C      "    17-JUL-95 TIME-DEPENDENT SIMULATION.
C                     X,Y,Z *8 IN BANKS.
C                     NCOLP >= MCOLP FOR ANALOG GAME.
C                     S.R. 'SCORES' RENAMED AS 'FLXTAU'.
C                     S.R. 'RUN': 1400 FORMAT(1P,6E12.3) --> ...E12.5).
C                     YLD --> A*YLD + B
C      "    19-JUL-95 CORRELATED R.N. FOR T.D.
C      "    22-AUG-95 /GEOM2/, /GEOMET/ & FCT  NAME CONFLICT WITH JETTO
C      "     9-OCT-95 MACROREGIONS 15 --> 30
C                     CORRECTIONS IN PUNCH FILE (IMPURITIES LUMPED TOGET
C      "     6-NOV-95 SEPARATE COLLISION COUNTING FOR FUEL AND IMPUR.
C                     N,T LIMITS FOR CX (D/TCUTCX)
C                     OPTIONS FOR FLUX ESTIMATOR
C      "     6-DEC-95 CORRECTION FOR CORRELATED R.N. WITH TIME DEPEN.
C      "     9-JAN-96 'N0RMAL' --> 'NRMLDC'.
C                     CHEMICAL SPUTTERING FOR CARBON
C                     WACOL(,,9) = COLLISIONS OF IONS WITH WALL
C                     WACOL(,,8) = COLLISIONS OF NEUT WITH WALL (GAMMAN)
C                                  (NOT FROM PUMP REGION - THE TOTAL
C                                   IS WACOL(,,7))
C      "    24-JAN-96 REVISION OF THE TREATMENT OF LEAKS.
C                     TARGET HISTORY FOR NEUTRAL TRAJECTORIES.
C                     REPLACE NDBWMX BY LDEBWR AND ALSO TEST NDEBPT.
C      "    31-JAN-96 EXTRACT Z PUMPING, H,Z LEAKS.
C                     NO PUMPING OF IMPURITIES.
C                     HORTON ARRAYS RE-ACTIVATED
C      "     8-FEB-96 SOURCE NEUTRALS ONLY FROM ACTIVE SOURCE SEGMENTS.
C                     OPTICAL REFLECTIONS IN GAPS.
C                     H ATOMS PUMPED LIKE H MOLECULES.
C                     PUMPING OF IMPURITIES RE-INSTATED.
C      "    14-FEB-96 SOURCE ENERGY ACCORDING TO RELATIVE ABUNDANCE OF
C                     RECYCLING AND PUFF.
C      "     4-MAR-96 PASS (Z) PUMPED, (Z) LEAKED AND (H) LEAKED TO
C                     PUNCH FILE
C      "     6-MAR-96 SINTEN --> HSOURC.
C                     SPUTTERING AND REDEPOSITION PROFILES.
C                     INDEPENDENT FUEL AND IMPUR. SOURCE SEGMENTS.
C                     WACOL(,,10) = SPUTTERED PART. INTO MAIN CHAMBER.
C                     WACOL(,,11) = RE-DEPOSITED PART. FROM MAIN CHAMB.
C                     NO SPUTTERING IN DIVERTOR GAPS
C      "    18-MAR-96 MSPLITS = 100 -> 500
C           25-MAR-96 WACOL(,,12)= W*E OF NEUTRALS WITH WALL SEE -(,,8)
C      "    19-APR-96 SQUEEZING OF SPLITTING BANK
C      "     9-MAY-96 SQUEEZING FROM MSPLIT/5+1-TH PARTICLE ONWARDS.
C                     AFTER A GEOMETRY ACCIDENT, THE HISTORY IS NOT
C                     TERMINATED IF THE SPLITTING BANK IS NOT EMPTY.
C                     SPUTTERING FROM PUFFED H IS OFF.
C                     IRTANK INITIALISED FOR TIME INDEPENDENCE.
C                     INTRODUCE PNIMB INCL. FOR RESIZING NIMBUS.
C      "    22-MAY-96 /CADAS1/ : USERID*6 CHANGED TO USERID*80.
C                     /ADASC/  : USADAS*6 CHANGED TO USADAS*80.
C                     S.R. ADAS MORE ERROR TRAPPING FROM S.R ADASRE
C      "    30-MAY-96 S.R. RECSIG CALLS ADAS IF IXS(5)=4
C      "    11-JUN-96 SWITCH OFF SPUTTERING FOR CERTAIN MACRO-ZONES
C                     GIVEN IN ISPOFF(), STORE ISPOFF() IN /SCORE/.
C                     IN S.R WALINT PERFORM THE SPUTTING SWITCH OFF
C                     IF IMACRO(IRWALL).EQ.ISPOFF()
C                     S.R RUN : BUG FIX!   --- IF(NINCID.LE.MINCID) ...
C                                   CHANGED TO IF(INCID.LE.MINCID) ...
C                     IN FACT, JUST COMMENT OUT THE ENTIRE CHECK AND
C                     REPLACE BY 1060.
C      "    10-JUL-96 PASS H WALL FLUX INTO PUNCH FILE
C      "    19-JUL-96 LPVOID = -LPVOID IF MATERIAL ALREADY PRESENT.
C                     MODEZR=0 NO LONGER SUPPORTED
C                     CORRECTION TO CALCULATE EF (A NOT READY)
C                     MORE THAN ONE IMPURITY
C      "    01-AUG-96 MINCID = INF, MINOR CHANGES IN FORMATS.
C                     ADDITIONAL TESTS ON IR AND IBOUND IN S.R. WALINT.
C      "    09-AUG-96 BUG FIX: IF(DCUTCX ... --> IF(TCUTCX ...
C      "    17-OCT-96 TPUFFH<0 FOR RECYCLING OF AN ION BURST.
C                     H PUFF IN MOLECULAR STATE. ----> NOT YET
C                     FAXSOH INITIALISED TO 0.
C                     AYIZ, ... FUNCTIONS OF SPECIES
C      "    23-OCT-96 INITIALISATION MISSING FOR 'FAXSOH' IN S.R. RUN
C      "    15-NOV-96 OPTION IN S.R. "WALINT" TO SWITCH OFF IMPURITY
C                     PUMPING (NOZPMP=1).
C      "              PLACE NOZPMP INTO /SOURCE/
C      "    21-NOV-96 OPTION ZSOURC<0 REMOVED (BECAUSE INCONSISTENT)
C      "    27-NOV-96 H PUFF IN MOLECULAR STATE. (.FALSE. --> .TRUE.).
C      "              LEAKED H IN MOLECULAR STATE.
C                     BUG FIX IN 'INPUT' (FLUX OF ION IMPURITIES).
C                     BUG FIX IN 'HOW' (PUFR FOR NION>1).
C                     MIMP=0  NO MORE THAN ONE IMPURITY,
C                                NO PUMP REG. SPUTT. IF IPVOID<0,
C                                NO SPUTTERING WITH A RECYCLABLE IMP.
C                          1     MORE THAN ONE IMPURITY,
C                                NO PUMP REG. SPUTT. IF IPVOID<0
C                          2     MORE THAN ONE IMPURITY,
C                                PUMP REG. SPUTT. EVEN IF IPVOID<0
C                     (CAN ALL BE USED IRRESPECTIVE OF EDGE2D,
C                      MIMP=0 IS NOT RECOMMENDED - ONLY FOR COMPATIB.)
C      "    06-MAR-97 NO SPUTTERING BELOW 'YNOSP'
C                     VARIABLE FRACTION OF FUEL/ASH IONS.
C                     GI/G <> NI/N ! ('PERC')
C                     RECOMBINATION REVISED (MORE THAT JUST ONE H).
C                     HSOURC -> HHESRC (TOTAL -H+HE- NEUTRAL SOURCE).
C                     FACTOR FOR CHEMICAL SPUTTERING ONLY (AYCHEM).
C                     LPVOID -> SYMBPW.
C                     PUMP WALL MATERIAL CAN BE ASSIGNED EVEN IF
C                     IPVOID >0 (IN THIS CASE, SPUTTERING IS ALLOWED).
C                     TEMPERATURE IN SUBDIV. REGION (TSUBD)
C                     (OVERRIDES LOCAL INPUT TEMPERATURES).
C                     PUNCH IMPURITIES DIRECTLY (IRRESPECTIVE OF MIMP)
C      "    10-APR-97 REMOVED DECIMA=1 WHEN THERE IS A LIGHT IMPUR.
C                     (WOULD AFFECT CARBON).
C                     TRAP FOR Q<0 IN S.R. HOW.
C                     TRAP FOR EXCEEDING BOUNDS IN S.R. GRU.
C      "    14-APR-97 NEW OPTIONS (5,6) IN S.R. SPUTCHEM.
C      "    14-MAY-97 SNVOL OBSOLETE (WRONG IF NION>1), USE SNV INSTEAD
C                     FUEL RECYCLING<1 WITH CHANGE OF FUEL SPECIES.
C                     BUG FIX IN SMACRO(5) ETC: MOL-->MOLOLD.
C                     IONS FROM VOID ARE 'COLD' ('TVOID')
C      "    18-JUN-97 ESCAPED FRACTION FOR LIGHT IMPURITIES.
C                     TOTFES,TOTFEA --> SUMFES(ION),SUMFEA(ION).
C                     RENAME: PUNENE->PUNENI, PUNEEL->PUNENE.
C                     BUG FIX: NO IDENTITY CHANGE WHEN PUFFED.
C                     TPUFF --> TPUFFH
C                     IMPURITY PUFF AT TPUFFZ (EV).
C                     MACROREGIONS FOR IMPURITIES (NOT YET).
C      "    24-JUN-97 LLCMD() CALL INTRODUCED INTO S.R RANDOM
C      "    08-JUL-97 MACROREGIONS FOR IMPURITIES (IMPLEMENTED).
C                     'PUMPING' MEANS ESCAPING FRORM EVERYWHRE EXCEPT
C                     FROM IBOUND=-2, RESERVED FOR CORE.
C                     ONLY PRINT NON-ZERO FLUXES BETWEEN MACROREGIONS.
C                     NEUTRAL FLUXES FROM CORE (NOT YET).
C                     BUG FIX FOR TRAJECTORIES (KDEBWR COULD EXCEED
C                     MAXIMUMUM WITH LEAKS).
C      "    22-AUG-97 XYREFL FOR OPTICAL/GAP REFLECTION (USING IGOPT).
C                     SUMNLK(ION).
C                     CXSIG(..A,..A,..) --> CXSIG(..A,..AI,..)
C                     (BUT ONE-GROUP STILL AVERAGED OVER ALL H0 AND H+)
C                     WITH DRIFTV(IR) TO BECOME DRIFTV(IR,IHS).
C                     NH IN CALLING SEQUENCE OF ADAS.
C                     S.R. 'ERROR' --> S.R. 'WRINIM'
C      "    09-SEP-97 REMOVE "SAVE IR" FROM S.R. 'PILOTA'.
C                     REMOVE "DF" FROM FUNCTION 'DRANF'.
C      "    29-OCT-97 PERC=1 IF NION=1.
C                     DISTINGUISH TRANSMISSION PROBABILITY
C                     (PSEMIP(IR,IN/OUT)), WHERE IN=PLASMA SIDE.
C                     RTEST, ITEST=1 FOR NION>1 COMMENTED OUT.
C      "    13-NOV-97 OUTFLUXES IN A BIN AROUND NORMAL.
C                     TEMPORARY CHANGE TO TRITIUM MASS TO FAKE DEUTERIUM
C      "    16-DEC-97 FIX BUG IN WRITING OF MACRO-ZONES, FOR IMPURITIES,
C                     TO THE PUNCH FILE.
C      "    13-JAN-98 FIX NOZPMP TO PUMP HELIUM: "A>4" REPLACED BY
C                     "NUTRAL>NIONPM" (M.F.).
C                     NEW OPTION 7 FOR CHEMICAL SPUTTERING.
C      "    15-FEB-98 HOT/TOTAL H ATOMS.
C                     PARALLEL DIRECTION COSINE PARDIR (CFR DRIFTC).
C                     REMOVE PATCH (..GC) FOR TRITIUM MASS
C                     BUG FIX IN S.R.COLES (DEFINE XF AND YF)
C      "    20-MAR-98 'WALL' --> 'REDP'.
C                     DIFFUSION OF H NEUTRALS IN WALLS.
C                     BUG FIX READ (5, 20 ) (EGEV.. -> READ (IN, 20 ) ..
C                     INTRODUCE 'NERELA' AND DO NOT PRINT MESSAGE.
C                     RENAME S.R. "START" TO "STARTN"/
C      "    03-APR-98 S.R "HXHP" --- IF ESCALE > 2.0E+06 THEN SIGCX=0.0
C                                    (THIS AVOIDS FIT TURNING).
C      "    21-APR-98 CHANGES FOR NEW (F95) COMPILER.
C                     S.R. "RUN" --- NSCORE NOW A PARAMETER STATEMENT.
C                     OPTION 8 FOR CHEM.SPUTT.
C      "    24-APR-98 CORRECTIONS TO FUNCTION "YROTH98"
C      "    19-MAY-98 S.R "EXITN" --- "STOP 15" TO "CALL GENEXIT(15)"
C                     DELETE S.R. "RESET4" (AS ALREADY IN SUPPORTZ)
C      "    19-JUN-98 NEW VERSION OF MOMENTUM SOURCE (IMOMSO=1)
C      "    07-SEP-98 REPLACE END & ERR FROM READ'S BY IOSTAT
C
C                         ******************
C                         * END OF JOURNAL *
C                         ******************
      WRITE(IOUT, 70 )
   70 FORMAT('1MONTE CARLO NEUTRAL TRANSPORT IN PLASMA'//)
      CALL LEGEND
      IF(NSKEDE.LE.KOMMAX) GO TO 80
      IDIAGN=19
      GO TO 3140
   80 NCOMM=20*NSKEDE
      READ(IN, 90 )(COMM(I),I=1,NCOMM)
   90 FORMAT(20A4)
      IF(COMM(1).EQ.CEOF) GOTO 3150
      IDEBIN=0
      ISEDBG=0
      IDLOOP=0
      KODDBG=0
      IDEBUG=0
      NDEBWR=0
C
      READ(IN, 100 )
     *  NST,KINDPR,NEDIT,NSB,INIZ,ISEHHE,ISP93,ITAU,MCX,IHOR,
     *  I3D,ISFLAG,NTSPUT,NOZPMP,IMOMSO,IDBUG,ICORR,TAGLIO,
     *  MCOLP,MCOLW,ICUPR,IERAND,
     *  IREAD,IWRITE,DECIMA
  100 FORMAT(I6,I1,I5,I6,I12,I1,I1,I1,I1,I1,
     *       I1,I1,I1,I1,I1,I2,I6,E6.0,
     *       I4,I4,I1,I1,I1,I1,E6.0)
      WCUT=1.0E-05
C
C       ITEM COL
C       ---- ---
C        NST   6 HISTORIES
C     KINDPR   7 FLEXIBLE OUTPUT:0=MINIMUM;1,2=INTERMEDIATE,3=ALL
C                =0 OMIT: PRINT ONLY MAP, COMMENTS, SOURCE, CELL DATA
C                         CELL RESULTS ,UNLESS NO CHANNELS DEFINED
C                =1 ADD INTERACTIONS WITH PLASMA AND WALLS, EROSIONS,
C                   THERMAL LOADS, ENERGY DISTRIBUTIONS IN REGIONS
C                   WITHOUT PLASMA
C                =2 ADD COMB.GEOM. AND ALL STANDARD INPUT DATA
C                =3 ADD ENERGY GROUP DISTR. OF FLUXES IN PLASMA REGIONS.
C      NEDIT  12 EDITION OF RESULTS GOVERNED BY NEDIT, MULTIPLE OF NSB
C        NSB  18 BATCH DIMENS.NSG,TO COMP. ST.DEV. WHEN CHANNELS DEFINED
C                IF NST.LT.10 THEN NSG WILL BE TAKEN=NST
C                IF NSB=0 THEN NSG=NST/10 AND NST REDIFINED AS MULTIPLE
C                IF NSB.NE.0 THEN NSG=NSB "    "     "      "     "
C                DEFINITION OF NSB(=NSG) DOES NOT PRODUCE INTERM.OUTPUT
C       INIZ  30
C     ISEHHE  31 ELASTIC SCATTERING
C      ISP93  32 1993 SPUTTERING
C       ITAU  33 FLUX ESTIMATOR MODEL
C        MCX  34 MODEL FOR C.X. ENERGY
C       IHOR  35 HYDROGEN RADIATION CALCULATIONS
C        I3D  36
C     ISFLAG  37 SPLITTING CONSIDERED IF ISFLAG=1
C      NTSPUT 38 NEUTRAL SPUTTERING OF IMPURITIES OFF IF NTSPUT=0
C      NOZPMP 39 NO PUMPING OF IMPURITIES IF NOZPMP=1
C     IMOMSO  40 IFLAG FOR MOMENTUM SOURCE
C      IDBUG  42
C      ICORR  48
C     TAGLIO  54
C      MCOLP  58
C      MCOLW  62
C      ICUPR  63
C     IERAND  64
C      IREAD  65
C     IWRITE  66
C     DECIMA  72
C
      IF(DECIMA.LE.0.0) DECIMA=0.6
      IF(DECIMA.GE.1.0) DECIMA=0.9
C
C
C              IDBUG .NE. 0 SI APPRESTA AD ESEGUIRE UN DEBUG SECONDO
C              LE MODALITA' SPECIFICATE NELLA SCHEDA CHE SEGUIRA'
C
C              ICORR .NE. 0 CORRELAZIONE DEI NUMERI A CASO PER
C              OTTENERE EFFETTI DIFFERENZIALI.
C              IN TAL CASO ICORR=MAX. NO. DI NUMERI A CASO PER STORIA
C
      READ(IN, 108 ) IHYR   , IZYR   , IDYR
     &             , (IXS(I),I=1,MIXS)
     &             , ITRIM
     &             , IYCHEM , EYCHEM , AYCHEM, ALFCH7
  108 FORMAT( 3I3 , 1X , 6X , 10I3, I3,
     &       / I3 , 3E12.0)
C
C       ITEM COL
C       ---- ---
C       IHYR   3 ADAS HYDROGEN FILE YEAR
C       IZYR   6 ADAS IMPURITY FILE YEAR
C       IDYR   9 ADAS DEFAULT  FILE YEAR
C     IXS(1)  19 X-SECTIONS
C     IXS(2)  22 MODEL FOR CH.EX RATE COEFF.
C     IXS(3)  25 MODEL FOR MOLEC RATE COEFF.
C     IXS(4)  28 MODEL FOR IMPURITY IONIS. RATE COEFF.
C     IXS(5)  31 MODEL FOR HYDROGEN RECOMBINATION
C      6-10   34-46 RESERVED FOR FUTURE USE
C      ITRIM  49 TRIM FLAG
C     IYCHEM  12 MODEL FOR CHEMICAL SPUTTERING
C     EYCHEM  24 ENERGY OF CHEMICALLY SPUTTERED C ATOMS
C     AYCHEM  36 FACTOR FOR CHEM. SPUTT. YIELD
C     ALFCH7  48 PARAMETER FOR MODEL 7
C
      IF(AYCHEM.LE.0.0) IYCHEM = 0
      IF(EYCHEM.LE.0.0) EYCHEM = 0.1
C
      READ(IN,'(A80)') USADAS
C
      READ(IN,10) NZYIZ
      IF(NZYIZ.GT.MCP) THEN
        WRITE(IUERR,*) ' ***** TOO MANY CORRECTIONS TO YIZ'
        CALL EXITN(1)
      ENDIF
      IF(NZYIZ.GT.0) THEN
        READ(IN, '(A4,8X,3E12.0)') (CZYIZ(L),AYIZ(L),BYIZ(L),EYIZ(L),
     &                        L=1,NZYIZ)
        DO L=1,NZYIZ
          IF(EYIZ(L).LE.0.0) EYIZ(L)=1.5*0.03
          IYIZ(L)=1234567
        ENDDO
      ENDIF
      READ(IN, '(4E12.0)') DCUTCX,TCUTCX,TPUFFH,TPUFFZ
C
      LPVOID = 0
      READ(IN,'(I6,2X,A4,E12.0,2I6)') IPVOID,SYMBPW,TSUBD,MIMP,IGOPT
C
C     IPVOID = MACRO-REGION NUMBER OF SUBDIVERTOR VOID
C              H=NEUTRALS IN THIS REGION DO NOT CONTRIBUTE TO WALL
C              PARTICLE FLUXES GAMMAN AND WACOL(12) TO AVOID
C              DOUBLE COUNTING, NOR IS ANY SPUTTERING ALLOWED THERE
C              IN REDP() AND WACOL(4).
C              IF NEGATIVE, IABS(IPVOID) IS THE MACROREGION, AND
C              SPUTTERING IS INHIBITED DEPENDING ON MIMP.
C     SYMBPW = MATERIAL OF THE SUBDIVERTOR WALL.
C              NOTE: THE SUBDIVERTOR MATERIAL 'ITARG=LIPMP=LPVOID'
C              OVERRIDES THE PRESCRIPTION OF THE INPUT FILE.
C     TSUBD  = TEMPERATURE (EV) OF SUBDIVERTOR WALLS (IF>0)
C
      IF(IDBUG.NE.0)
     &   READ(IN, 10 )IDEBIN,IDLOOP,IDEBUG,ISEDBG,NDEBWR,NDEBPT,MSPOFF
C
C             IDEBIN.NE.0 STAMPA TUTTI GLI INCIDENTI GEOMETRICI
C             IDLOOP=K STAMPA INDICE DI STORIA E PARAMETRI INIZIALI
C                      A PARTIRE DALLA STORIA K-ESIMA
C             IDEBUG=K STAMPA IN INGRESSO E USCITA DALLA ROUTINE DI
C                      GEOMETRIA, A PARTIRE DALLA STORIA K-ESIMA
C             ISEDBG=1 LEGGE NELLA SK SEGUENTE I PARAMETRI DELL'UNICA
C                      STORIA DI CUI FARE IL DEBUG
C             NDEBWR   NO. OF HISTORIES WHICH HAVE NEUTRAL TRAJECTORIES
C                      STORED
C             NDEBPT   NO. OF TRACES FOR EACH NEUTRAL TRAJECTORY
C             MSPOFF   SIZE OF ISPOFF() ARRAY
C
      IF( MSPOFF.GT.MMACRO-1 ) THEN
          WRITE(IUERR,*) ' MSPOFF > MMACRO-1',MSPOFF,MMACRO-1
          CALL EXITN(1)
      ELSE
          READ(IN, 15 ) ( ISPOFF(I) , I=1,MSPOFF )
      END IF
      READ(IN,25) YNOSP
      WRITE(IUERR,'(/'' NO SPUTTERING BELOW'',1P,E12.4,'' CM'')') YNOSP
C
      IF( NDEBWR.GT.MDEBWR ) THEN
          WRITE(IUERR,*) ' NDEBWR .GT. MDEBWR(NIMBUS)',NDEBWR,MDEBWR
          CALL EXITN(1)
      ELSE
          NDEBPT=MIN0(NDEBPT,MDEBPT)
          READ(IN, 10 ) ( IDBHST(I) , I=1,NDEBWR )
      ENDIF
C
      IF(ISEDBG.EQ.0) GO TO 130
      IF(IDEBUG.EQ.0) GO TO 110
      IDEBIN=1
      IDLOOP=1
  110 KODDBG=1
      IDLOOP=1
      IDEBUG=1
      NST=1
      NEDIT=0
      IREAD=0
      ISORGA=0
      IWRITE=0
      READ(IN, 120 ) IHDBG,ICDBG,DEBUG
  120 FORMAT(2I24,Z24/(3Z24))
  130 CONTINUE
C
      ICXTYP=IXS(2)
C
      IF(MOD(INIZ,2).EQ.0)INIZ=1
C                           NEW DEFINITION OF NSG (16 JUNE 1987)
C                           ------------------------------------
C                 IF NST LESS THAN 10, TAKE NSG=NST (NO ERRORS COMPUTED)
      IF(NST.GE.10) GO TO 140
      NSG=NST
      GO TO 160
C                 IF NST.GE.10 AND NSB NOT GIVEN (OLD DATA FILES)
C                 THEN TAKE NSG=NST/10
C                 AND REDEFINE NST AS A MULTIPLE OF NSG
  140 IF(NSB.GT.0) GO TO 150
      NSG=NST/10
      NST=(NST/NSG)*NSG
      GO TO 160
C                 IF NSB GIVEN, THEN CHECK THAT IA A DIVISOR OF NST
C                 OTHERWISE REDEFINE NST AS A MULTIPLE OF NSG
  150 NSG=NSB
      IF(MOD(NST,NSB).EQ.0) GO TO 160
      NST=(NST/NSG)*NSG
      GO TO 160
C
  160 FNSG=NSG
      FNST=NST
C
C                  NEDIT MUST BE A MULTIPLE OF NSG! (DEFINED ABOVE)
      IF(NEDIT.EQ.0)NEDIT=NST
      IF(MOD(NST,NEDIT).EQ.0.AND.MOD(NEDIT,NSG).EQ.0)GO TO 170
      IDIAGN=1
      GO TO 3140
C
C     GEOMETRIA  COMBINATORIA
C     ----------------------
  170 CONTINUE
C
      LLAST=0
      CALL GENI(LLAST,LLAST+NWCOMB,KINDPR,ICHKP)
      KREG=NOREG
      KREGC=KREG
C
      READ(IN, 20 )(AREAD(I),I=1,KREG)
C
C
C     STAMPA DATI GENERALI
C     --------------------
      WRITE(IOUT, 30 )
      WRITE(IUERR, 180 )(COMM(I),I=1,NCOMM)
  180 FORMAT(1X,20A4)
      IF(KINDPR.EQ.0) WRITE(IOUT, 190 )
  190 FORMAT(//48X,'SHORT OUTPUT'/48X,'============'/)
C                          WHATEVER KINDPR, PRINT INIZ
      WRITE(IUERR, 200 )NST,NSG,INIZ
  200 FORMAT(/' HISTORIES  HISTORIES/BATCH     INITIALISER'/I10,I17,I16)
      IF(TAGLIO.NE.0.0) WRITE(IUERR, 210 ) TAGLIO
  210 FORMAT(' TRUNCATED AT',1PE10.3,' EV')
      IF(WCUT.GT.0.0) WRITE(IUERR, 212 ) WCUT
  212 FORMAT(' TRUNCATED WHEN WEIGHT <',1PE10.3)
C---------------
      PLIFE=-1.0
C---------------
      IF(MCOLP) 213,215,217
  213 IF(PLIFE.LE.0.0) PLIFE=0.99
      WRITE(IUERR,214) -MCOLP,1.0-PLIFE
  214 FORMAT(' R.R.''ED AFTER ',I4,' COLLISIONS',
     &       ' WITH PROBABILITY',1P,E9.2)
      GOTO 225
  215 MCOLP=100000
      GOTO 225
  217 WRITE(IUERR, 220 ) MCOLP-1
  220 FORMAT(' ANALOG IONISATION GAME AFTER ',I4,
     *       ' WEIGHTED COLLISIONS WITH PLASMA')
  225 CONTINUE
      IF(MCOLW.GT.0) WRITE(IUERR, 230 ) MCOLW
  230 FORMAT(' TRUNCATED AFTER ',I4,' COLLISIONS WITH WALLS')
      IF(MCOLW.LE.0) MCOLW=100000
      IF(ITAU.LE.1) THEN
        WRITE(IUERR,*) ' FLUX ESTIMATOR: EXPECTED DISTANCE'
      ELSE
        WRITE(IUERR,*) ' FLUX ESTIMATOR: DISTANCE'
      ENDIF
      WRITE(IUERR,235) IXS(1),IXS(2),IXS(3),IXS(4),MCX
  235 FORMAT(/' MODEL FOR X-SECTIONS  ',I2/
     *        '           CH.EX COEFF.',I2/
     *        '           MOLEC COEFF.',I2/
     *        '           IMPUR.COEFF.',I2/
     *        '           C.X. ENERGY ',I2)
      IF(IXS(1).LT.3 .OR. IXS(1).GT.5) THEN
        WRITE(IUERR,236) IXS(1)
  236   FORMAT(/' *** WARNING: X.S. MODEL',I3,' NOT IMPLEMENTED. SET=3')
        IXS(1)=3
C       CALL EXITN(1)
      ENDIF
      IF(TPUFFH.EQ.0.0) TPUFFH=0.0225
      WRITE(IUERR,'('' PUFFED H0/H+ TEMPERATURE'',1P,E9.2,'' C '')')
     *     SIGN(ABS(TPUFFH)*11600.0-273.0,TPUFFH)
      IF(TPUFFZ.LE.0.0) TPUFFZ=0.0225
      WRITE(IUERR,'('' PUFFED IMPU. TEMPERATURE'',1P,E9.2,'' C '')')
     *     TPUFFZ*11600.0-273.0
      IF(DCUTCX.LE.0.0) DCUTCX=+1.0E+30
      IF(TCUTCX.LE.0.0) TCUTCX=-1.0E+30
      ISENT=0
      IF(DCUTCX.LT.1.0E+29 .OR. TCUTCX.GT.0.0) ISENT=1
      IF(ISENT.NE.0)
     *  WRITE(IUERR,'('' <SIGMA>CX DOCTORED WHEN N >'',1P,E9.2,
     *                '' CM(-3) AND T <'',E9.2,'' EV'')') DCUTCX,TCUTCX
      IF(ICUPR.NE.0) WRITE(IOUT, 240 )
  240 FORMAT(' REFLECTION COEFFICIENTS FROM CU-WALL AFTER OEN-ROBINSON')
      IF(IERAND.NE.0) WRITE(IOUT, 250 )
  250 FORMAT(' SAMPLING OF REFLECTED ENERGY FOR H-ISOTOPES')
      IF(ISEHHE.EQ.0)
     *  WRITE(IUERR, '(''0NO ELASTIC SCATTERING'')')
      IF(ISEHHE.EQ.1.OR. ISEHHE.EQ.3 .OR. ISEHHE.EQ.5 .OR. ISEHHE.EQ.7)
     *  WRITE(IUERR, '(''0ELASTIC SCATTERING  H + H+'')')
      IF(ISEHHE.EQ.2.OR. ISEHHE.EQ.3 .OR. ISEHHE.EQ.6 .OR. ISEHHE.EQ.7)
     *  WRITE(IUERR, '(''0ELASTIC SCATTERING H2 + H+'')')
      IF(ISEHHE.GT.4)
     *  WRITE(IUERR, '(''0ELASTIC SCATTERING HE + H+'')')
      IF(IREAD.NE.0) WRITE(IOUT, 290 ) IREAD
  290 FORMAT(/' JOB N.',I3,' - CONTINUED')
      IF(IWRITE.NE.0) WRITE(IOUT, 300 )
  300 FORMAT(/' JOB TO BE FILED')
C
      IF(KINDPR.LT.2) GO TO 320
      WRITE(IOUT, 310 )
  310 FORMAT(//' 2-D REGION    GIVEN AREA    COMPUTED AREA',
     * 4X,'ESTIMATED AREA')
  320 ISENT=0
      AREAM = 1.0E+30
      DO 400 I=IR2DST,KREG
         AREAT=0.0
         DO 330 L=1,NRTRU
         IF(MASTER(LKOR+L).EQ.I) AREAT=AREAT+ASTER(LVOLTR+L)
  330    CONTINUE
         AREAC=ASTER(LAREA+I)
         IF(AREAC.GT.0.0) GO TO 370
         CTRAN=BLANK
         IF(AREAT.LE.0.0) GO TO 340
         IF( ABS( (AREAT-AREAD(I))/AREAT ) .GT. 0.05) CTRAN=QUEST
  340    IF(KINDPR.LT.2) GO TO 360
         WRITE(IOUT, 350 ) I,AREAD(I),AREAT,CTRAN
  350    FORMAT(I9,1PE16.5,'       UNABLE',E21.5,A4)
  360    IF(AREAD(I).LE.0.0) AREAD(I)=AREAT
         GO TO 395
  370    CTRAN=BLANK
         IF( ABS( (AREAC-AREAD(I))/AREAC ) .GT. 0.01) CTRAN=QUEST
         IF(KINDPR.LT.2) GO TO 390
         WRITE(IOUT, 380 ) I,AREAD(I),AREAC,CTRAN,AREAT
  380    FORMAT(I9,1P,2E16.5,A4,E14.5)
  390    IF(AREAD(I).LE.0.0) AREAD(I)=AREAC
  395    IF(AREAD(I).LE.0.0) ISENT=1
         IF( AREAD(I).GT.0.0 ) AREAM = AMIN1( AREAM , AREAD(I) )
  400 CONTINUE
C
      IF( ISENT.EQ.1 ) WRITE(IUERR,402)
C
      ISENT = 0
      DO 405 I=IR2DST,KREG
         IF(AREAD(I).LE.0.0) THEN
            IF( ICHKP.EQ.0 ) THEN
                ISENT = 1
                WRITE(IUERR,404) I
            ELSE
                AREAD(I)=AREAM * 1.0E-01
                WRITE(IUERR,403) I , AREAD(I)
            END IF
         END IF
  405 CONTINUE
      IF(ISENT.EQ.1 .AND. ICHKP.EQ.0 ) CALL EXITN(1)
  406 CONTINUE
C
  402 FORMAT(' ***** WARNING/ERROR: UNDEFINED AREA(S)')
  403 FORMAT(' AREA OF REGION',I4,' IS SET TO ',1PE12.4)
  404 FORMAT('                      FOR REGION',I4)
C
      IF(I3D.NE.0) GO TO 410
      IR3DST=IR2DST
      KREG3D=KREG
      NZETA=1
      GO TO 860
C
C     LETTURA STRATI E REGIONI TRIDIMENSIONALI
C     ----------------------------------------
  410 CONTINUE
      LQUOTA=LLAST
      READ(IN, 420 ) KONDZ,NZETA,(ASTER(LQUOTA+I),I=1,NZETA)
  420 FORMAT(2I6/12E6.0)
      IF(NZETA.LE.MAXZET) GO TO 440
      WRITE(IUERR, 430 )
  430 FORMAT('0ERROR. TOO MANY SUBDIVISIONS FOR AXIAL DISTRIBUTIONS')
      CALL EXITN(1)
  440 CONTINUE
      LDZETA=LQUOTA+NZETA
      KSXY3D=LDZETA+NZETA
      LLAST=KSXY3D+KREG*NZETA
      IF(LLAST.LE.NWCOMB) GO TO 470
  450 WRITE(IUERR, 460 )
  460 FORMAT(' ***** ERROR: NO ROOM FOR 3-D GEOMETRY')
      CALL EXITN(1)
  470 IF(KINDPR.LT.2) GO TO 500
      WRITE(IOUT, 480 )
  480 FORMAT(//' 3-D SLICE GEOMETRY')
      WRITE(IOUT, 490 ) (ASTER(LQUOTA+I),I=1,NZETA)
  490 FORMAT(/' SLICE-HEIGHTS'/(12F7.2))
  500 ASTER(LDZETA+1)=ASTER(LQUOTA+1)
      IF(NZETA.EQ.1) GO TO 520
      DO 510 I=2,NZETA
      ASTER(LDZETA+I)=ASTER(LQUOTA+I)-ASTER(LQUOTA+I-1)
  510 CONTINUE
  520 IF(KINDPR.GE.2)
     *WRITE(IOUT, 530 )
  530 FORMAT('0REGION  FROM  TO     2-D REGIONS ---->')
      KREG3D=0
      IR3DST=MILLE
      DO 540 K=1,KREG
      DO 540 I=1,NZETA
  540 MASTER(KSXY3D+(I-1)*KREG+K)=0
      LREG3D=LLAST
      L=LREG3D+1
      DO 550 K=L,NWCOMB
  550 MASTER(K)=0
C
      IBOT=+1000
      ITOP=-1000
  560 READ(IN, 570 ) I1,I2,I3,(IBUFER(I),I=1,9)
C---- SE NON SI ASSEGNANO REGIONI 2D, SI CONVIENE
C---- CHE ALL'UNICA 3D CORRISPONDA L'INTERO DOMINIO 2D.
  570 FORMAT(3I6,9I6)
      IBUFER(10)=0
      IPRINT=1
      IF(I1) 730 , 650 , 580
  580 IF(KINDPR.GE.2)
     *WRITE(IOUT, 590 ) I1,I2,I3
  590 FORMAT(I5,I7,I5)
      IREG3D=I1
      L=LREG3D+(IREG3D-1)*4
      IF(L+4 .GT. NWCOMB) GO TO 450
      IF(MASTER(L+2).EQ.0) GO TO 610
      WRITE(IUERR, 600 ) IREG3D
  600 FORMAT(/' ***** ERROR: 3-D REGION',I3,' ALREADY DEFINED')
      CALL EXITN(1)
  610 IBOT=I2
      ITOP=I3
      IF(IBUFER(1).GT.0) GO TO 640
      DO 620 I=IR2DST,KREG
  620 IBUFER(I-IR2DST+1)=I
      IBUFER(KREG-IR2DST+2)=0
      IF(KINDPR.GE.2)
     *WRITE(IOUT, 630 )
  630 FORMAT('+',T23,'THE WHOLE 2-D DOMAIN')
      IPRINT=0
  640 KREG3D=MAX0(KREG3D,IREG3D)
      IR3DST=MIN0(IR3DST,IREG3D)
      MASTER(L+1)=IBOT
      MASTER(L+2)=ITOP
      ASTER(L+3)=ASTER(LQUOTA+ITOP)
      TRAN=0.0
      IF(IBOT.GT.1) TRAN=ASTER(LQUOTA+IBOT-1)
      ASTER(L+4)=TRAN
      GO TO 670
  650 IF(KINDPR.GE.2)
     *WRITE(IOUT, 660 )
  660 FORMAT(' ')
  670 N=0
      DO 700 I=1,MILLE
      K=IBUFER(I)
      IF(K.EQ.0) GO TO 710
      N=N+1
      DO 690 J=IBOT,ITOP
      IF(MASTER(KSXY3D+(J-1)*KREG+K).EQ.0) GO TO 690
      IF(KINDPR.LT.2) GO TO 690
      WRITE(IUERR, 680 ) IREG3D,MASTER(KSXY3D+(J-1)*KREG+K)
  680 FORMAT(/' ***** ERROR: 3-D REGIONS',I3,' AND',I3,' OVERLAP')
      CALL EXITN(1)
  690 MASTER(KSXY3D+(J-1)*KREG+K)=IREG3D
  700 CONTINUE
  710 IF(KINDPR.LT.2) GO TO 560
      IF(IPRINT.NE.0) WRITE(IOUT, 720 ) (IBUFER(I),I=1,N)
  720 FORMAT('+',T22,9I4)
      GO TO 560
  730 CONTINUE
      LLAST=LREG3D+(KREG3D-1)*4
      DO 740 I=1,NZETA
      DO 740 K=IR2DST,KREG
      IF(MASTER(KSXY3D+(I-1)*KREG+K).EQ.0) GO TO 750
  740 CONTINUE
      GO TO 790
  750 WRITE(IUERR, 760 )
  760 FORMAT(/' ***** WARNING: 3-D REGION(S) UNDEFINED'
     * //' CHECK THE FOLLOWING CORRESPONDENCE   2D REG.: 3D REG. IN SLIC
     *E 1, 3D REG. IN SLICE 2,....'/)
      IF(KINDPR.LT.2) GO TO 790
      DO 770 KK=IR2DST,KREG
  770 WRITE(IOUT, 780 ) KK,(MASTER(KSXY3D+(JJ-1)*KREG+KK),JJ=1,NZETA)
  780 FORMAT(' 2D=',I5,':',12I5)
CCCC  CALL EXITN(1)
  790 CONTINUE
      IF(KINDPR.LT.2) GO TO 860
      GO TO ( 800 , 820 , 840 ),KONDZ
  800 WRITE(IOUT, 810 )
  810 FORMAT('0AXIAL PERIODICITY')
      GO TO 860
  820 WRITE(IOUT, 830 )
  830 FORMAT('0AXIAL REFLECTION')
      GO TO 860
  840 WRITE(IOUT, 850 )
  850 FORMAT('0AXIAL ESCAPE')
C
C     RAGGRUPPAMENTI DELLE REGIONI IN ZONE
C     ------------------------------------
  860 CONTINUE
C     IF(.TRUE.) STOP
      DO 870 I=1,MRG
  870 IZONA(I)=0
      READ(IN, 10 )NZONE,(NRZONA(I),I=1,11)
      NAZONE = NZONE
      IF(NZONE.GT.0) GO TO 930
C                INTERNAL ASSIGNMENT OF THE CORRESPONDENCE ZONE=REGION.
C
      NZONE=KREG-1
      IF(NZONE-MZN) 890 , 890 , 880
  880 IDIAGN=13
      GO TO 3140
C                ONE REGION PER ZONE
  890 DO 900 I=1,NZONE
      NRZONA(I)=1
  900 CONTINUE
C                ZONE INDEX=REGION INDEX
C                ZONE 1 IS THE DUMMY LAST REGION.
C                ZONE 2 IS ANOTHER DUMMY REGION (IN ORDER TO SAVE THE
C                       TRIPLE CORRESPONDENCE FIGURE-REGION-ZONE)
      IRMAX=KREG-1
      DO 910 IR=2,IRMAX
      IZONA(IR)=IR
  910 CONTINUE
      IZONA(KREG)=1
      WRITE(IOUT, 920 )
  920 FORMAT(//' IN THIS CASE THE TERMS "ZONE" AND "REGION" ARE SYNONIMO
     *US'/)
C                SKIP THE PRINTOUT OF THE LIST.
      GO TO 1070
C
C                READ ZONES
  930 IF(NZONE.LE.11) GO TO 940
      READ(IN, 10 ) (NRZONA(I),I=12,NZONE)
  940 IF(NRZONA(1).LE.0)NZONE=0
      IF(NZONE-MZN) 960 , 960 , 950
  950 IDIAGN=13
      GO TO 3140
  960 ISUM=0
      DO 970 I=1,NZONE
  970 ISUM=ISUM+NRZONA(I)
      READ(IN, 10 )(IBUFER(I),I=1,ISUM)
      KMIN=0
      ISENT=0
      DO 1000 I=1,NZONE
      K=NRZONA(I)
      DO 990 J=1,K
      L=IBUFER(KMIN+J)
      IF(IZONA(L).EQ.0) GO TO 990
      WRITE(IUERR, 980 ) L
  980 FORMAT(' ***** ERROR: REGION',I5,' BELONGS TO MORE THAN ONE ZONE')
      ISENT=1
  990 IZONA(L)=I
 1000 KMIN=KMIN+K
      IF(ISENT.NE.0) CALL EXITN(1)
      ISENT=0
      DO 1020 I=IR3DST,KREG3D
      IF(IZONA(I).NE.0) GO TO 1020
      WRITE(IUERR, 1010 ) I
 1010 FORMAT(' ERROR: REGION',I5,' BELONGS TO NO ZONE')
      ISENT=1
 1020 CONTINUE
      IF(ISENT.NE.0) CALL EXITN(1)
C
C                               STAMPA ZONE
      IF(NZONE.LE.0)GO TO 1070
      JMAX=0
      IF(KINDPR.LT.2) GO TO 1040
      WRITE(IOUT, 1030 )
 1030 FORMAT(//' REGIONS BELONGING TO A ZONE'/)
 1040 DO 1060 I=1,NZONE
      JMIN=JMAX+1
      JMAX=JMIN+NRZONA(I)-1
      IF(KINDPR.LT.2) GO TO 1060
      WRITE(IOUT, 1050 )I,(IBUFER(J),J=JMIN,JMAX)
 1050 FORMAT(5H ZONE,I4,'    REGION(S):',20I4/(23X,20I4))
 1060 CONTINUE
 1070 CONTINUE
C
C
C     RAGGRUPPAMENTI DELLE ZONE IN CANALI
C     -----------------------------------
C       NCHAN= NUMBER OF CHANNELS
C       MCC=MAX.NO.OF ZONES/CHANNEL ADMITTED
C       MZCHAN=MAX.NO.OF ZONES/CHANNEL IN THE PROBLEM RUNNED
C       NZCHAN(I)=NUMBER OF ZONES IN CHANNEL I
C       ICHAN(K)=CHANNEL TO WHICH ZONE K BELONGS
C       IZCHAN(I,J)=J-TH ZONE OF CHANNEL I(ZONES OF A CHANNEL MUST BE
C                                          ASSIGNED STARTING FROM LOWEST
C                                          INDEX)
      DO 1080 I=1,MZN
 1080 ICHAN(I)=0
      READ(IN, 10 )NCHAN,(NZCHAN(I),I=1,11)
      IF(NCHAN.EQ.0) GO TO 1310
      IF(NCHAN.LE.11) GO TO 1090
      READ(IN, 10 ) (NZCHAN(I),I=12,NCHAN)
 1090 IF(NZCHAN(1).LE.0)NCHAN=0
      IF(NCHAN-MCH) 1110 , 1110 , 1100
 1100 IDIAGN=13
      GO TO 3140
 1110 ISUM=0
      MZCHAN=0
      DO 1120 I=1,NCHAN
C                FIND MAX.NO.OF ZONES/CHANNEL IN THIS PROBLEM
      IF(NZCHAN(I).GT.MZCHAN) MZCHAN=NZCHAN(I)
 1120 ISUM=ISUM+NZCHAN(I)
      IF(MZCHAN.LE.MCC) GO TO 1140
      WRITE(IUERR, 1130 )
 1130 FORMAT(' **** ERROR: TOO MANY ZONES IN A CHANNEL')
      CALL EXITN(1)
 1140 READ(IN, 10 )(IBUFER(I),I=1,ISUM)
      KMIN=0
      ISENT=0
      DO 1190 I=1,NCHAN
      K=NZCHAN(I)
      DO 1180 J=1,K
      L=IBUFER(KMIN+J)
      IF(J.EQ.1) GO TO 1160
      IF(L.GT.IBUFER(KMIN+J-1)) GO TO 1160
      WRITE(IUERR, 1150 ) I,L
 1150 FORMAT(' **** ERROR: IN DEFINITION OF CHANNEL',I5,' ZONE',I5,' DOE
     *S NOT FOLLOW THE PRESCRIBED ORDER')
      ISENT=1
 1160 IF(ICHAN(L).EQ.0) GO TO 1180
      WRITE(IUERR, 1170 ) L
 1170 FORMAT(' **** ERROR: ZONE',I5,' BELONGS TO MORE THAN ONE CHANNEL')
      ISENT=1
 1180 ICHAN(L)=I
 1190 KMIN=KMIN+K
      IF(ISENT.NE.0) CALL EXITN(1)
      ISENT=0
C
C                           CHANNEL DESCRIPTION
      IF(NCHAN.LE.0)GO TO 1310
C                           ZONES IN CHANNEL
      JMAX=0
      IF(KINDPR.LT.2) GO TO 1210
      WRITE(IOUT, 1200 )
 1200 FORMAT(//' ZONES BELONGING TO A CHANNEL'/)
 1210 DO 1250 I=1,NCHAN
      JMIN=JMAX+1
      JMAX=JMIN+NZCHAN(I)-1
      IF(KINDPR.LT.2) GO TO 1230
      WRITE(IOUT, 1220 )I,(IBUFER(J),J=JMIN,JMAX)
C1220 FORMAT(8H CHANNEL,I3,'    ZONE(S):',20I5/(23X,20I5)) ---- 04/11/92
 1220 FORMAT(8H CHANNEL,I3,'    ZONE(S):',16I5/(23X,16I5))
C                           CONSTRUCTION OF IZCHAN(I,J) (PARDON)
 1230 DO 1240 J=JMIN,JMAX
 1240 IZCHAN(I,J-JMIN+1)= IBUFER(J)
 1250 CONTINUE
C                           CELLS IN CHANNEL
      IF(KINDPR.LT.2) GO TO 1270
      WRITE(IOUT, 1260 )
 1260 FORMAT(//' CELLS BELONGING TO A CHANNEL'/)
C
 1270 DO 1280 K=1,MCC
 1280 KBUFER(K)=K
C
      DO 1300 I=1,NCHAN
      NCMAX=NZCHAN(I)
      IF(KINDPR.LT.2) GO TO 1300
      WRITE(IOUT, 1290 )I,(KBUFER(K),K=1,NCMAX)
 1290 FORMAT(8H CHANNEL,I3,'    CELL(S):',20I4/(23X,20I4))
 1300 CONTINUE
C
 1310 CONTINUE
C
C     CORRESPONDENCE CHANNEL-SOURCE TARGET (CORRESP. 0,0,0...0 ALLOWED)
C     ------------------------------------
      IF(NCHAN.EQ.0) GO TO 1340
      READ(IN, 10 )(ICHTAR(I),I=1,12)
      IF(NCHAN.LE.12) GO TO 1320
      READ(IN, 10 )(ICHTAR(I),I=13,NCHAN)
 1320 IF(KINDPR.LT.2) GO TO 1340
      WRITE(IOUT, 1330 )(I,ICHTAR(I),I=1,NCHAN)
 1330 FORMAT(//' CHANNEL   CORRESPONDING TARGET SEGMENT'//(I4,I10))
 1340 CONTINUE
C
C     MACRO-ZONES
C     -----------
CT========================== TEMP ===================
CT    DO 1342 I=1,NZONE
CT      IF(I.LE.NZONE/3) THEN
CT        IMACRO(I)=1
CT      ELSE IF(I.LE.NZONE/2) THEN
CT        IMACRO(I)=2
CT      ELSE
CT        IMACRO(I)=0
CT      ENDIF
C1342 CONTINUE
CT========================== TEMP ===================
      READ(IN, 10 ) NMACRO
CT    NMACRO=1
      IF(NMACRO.LE.0) THEN
        DO 1343 I=1,NZONE
          IMACRO(I)=0
 1343   CONTINUE
      ELSE
        READ(IN, 10 ) (IMACRO(I),I=1,NZONE)
      ENDIF
      NMACRO=0
      DO 1345 I=1,NZONE
        NMACRO = MAX0(NMACRO,IMACRO(I))
 1345 CONTINUE
      IF(NMACRO.GE.MMACRO) THEN
        WRITE(IUERR,'(/'' TOO MANY MACRO-ZONES'')')
        CALL EXITN(1)
      ENDIF
      NMACRO=NMACRO+1
      DO 1346 I=1,NZONE
        IF(IMACRO(I).LE.0) IMACRO(I)=NMACRO
 1346 CONTINUE
C
C     CALCOLO VOLUMI
C     --------------
      IF(I3D.EQ.0) GO TO 1390
      DO 1350 I=IR3DST,KREG3D
      BUFFER(I)=0.0
 1350 CONTINUE
      DO 1370 I=1,NZETA
      DO 1360 K=IR2DST,KREG
      IREG3D=MASTER(KSXY3D+(I-1)*KREG+K)
      IF(IREG3D.LT.IR3DST .OR. IREG3D.GT.KREG3D) GO TO 1360
C     PUO' CAPITARE CON 3D INDEFINITA (QUANDO COMPARE WARNING))
      TRAN=AREAD(K)*ASTER(LDZETA+I)
      BUFFER(IREG3D)=BUFFER(IREG3D)+TRAN
 1360 CONTINUE
 1370 CONTINUE
      DO 1380 I=IR3DST,KREG3D
      AREAD(I)=BUFFER(I)
C     D'ORA IN POI AREAD(I)=VOLUME DELLA REG. 3D I.
 1380 CONTINUE
 1390 DO 1400 IZO=1,NZONE
 1400 VOLZ(IZO)=0.0
      DO 1410 I=IR3DST,KREG3D
      IZO=IZONA(I)
      IF(IZO.EQ.0) GO TO 1410
      VOLZ(IZO)=VOLZ(IZO)+AREAD(I)
 1410 CONTINUE
C
C
 1415 CONTINUE
C
C     TIME-SLICE
C     ----------
C
      READ(IN,'(2I8)') IDMC , IDMCO
C
      READ(IN,'(E12.0,2I6)') TCUT,ITIO,NSTEP
      IF(TCUT.GT.0.0 .AND. TCUT.LT.TIMINF) THEN
        IF(MIMP.GT.0) THEN
          WRITE(IUERR,'(/'' ***** NO T.D. WITH MORE THAN 1 IMP.'')')
          CALL EXITN(1)
        ENDIF
        WRITE(IUERR,'(/'' TANK FILE ID. (WRITE) = '',I6)') IDMC
        WRITE(IUERR,'( '' TANK FILE ID. (READ ) = '',I6)') IDMCO
        IF(ITIO.EQ.0) THEN
          ITAPIO(1)=ITAPIO(1)
          ITAPIO(2)=ITAPIO(2)
C         TCUT IS TEMPORARILY ALSO USED AS A FLAG
          TCUT=-TCUT
        ELSE IF(ITIO.GT.0) THEN
          ITAPIO(1)=ITAPIO(1)
          ITAPIO(2)=ITAPIO(2)
          TCUT=TCUT
        ELSE
          ITRAN=ITAPIO(1)
          ITAPIO(1)=ITAPIO(2)
          ITAPIO(2)=ITRAN
          TCUT=TCUT
        ENDIF
CW      IF(IUERR.NE.IOUT) WRITE(IUERR,30)
        WRITE(IUERR,1416) ABS(TCUT),ITAPIO,NSTEP
 1416   FORMAT('0TIME-DEPENDENT SIMULATION FOR ',1P,E9.3,' SEC',3X,
     &         ' BUFFER UNITS',2I3,3X,
     &         ' TIME STEPS',I3)
        WRITE(IUERR,*) '----> CORRECTIONS:'
C NO!   ICORR=0
        IF(MCOLP.NE.1) THEN
          MCOLP=1
          WRITE(IUERR, 220 ) 0
        ENDIF
        NEDIT=NST
        NSG=NST
        FNSG=NSG
        WRITE(IUERR,*) 'NO BATCHES, NO INTERMEDIATE PRINT-OUT'
        IF(IREAD.NE.0 .OR. IWRITE.NE.0) THEN
          WRITE(IUERR,*) 'NO ARCHIVE OPTION'
          CALL EXITN(1)
        ENDIF
        STMOUT=0.0
        YTMOUT=0.0
      ELSE
        NSTEP=1
        TCUT=TIMINF
        STMOUT=0.0
        YTMOUT=0.0
      ENDIF
C
      IF(ICORR.NE.0) WRITE(IUERR, 1420 )
 1420 FORMAT(/' CORRELATED RANDOM NUMBERS FOR DIFFERENTIAL EFFECTS')
C
C     PLASMA COMPOSITION
C     -----------------
C                          CLEAR SPACE FOR DIRECTION COSINES
      DO 1425 I=1,MRG
      DO 1425 K=1,3
      DRIFTC(I,K)=0.0
      PARDIR(I,K)=0.0
 1425 CONTINUE
C
      READ(IN, 1430 )
     *     IMPURE,NION,TRAN1,TRAN2,TRAN3,SHP,(PROREQ(K),K=1,3),ITRAN
     *    ,EATMD,EATMR
C1430 FORMAT(I1,I5,7E6.0,I6)                             ----- 04/11/92
 1430 FORMAT(I2,I4,7E6.0,I6,2E6.0)
      PROREQ(4) =ITRAN
      IF(NION.GT.1 .AND. MIMP.LE.0) THEN
        WRITE(IUERR,*) ' **** ERROR: NION > 1  AND  MIMP = 0'
        CALL EXITN(1)
      ENDIF
C=================== TEST NION>1 ======================================
C     IF(ITEST.NE.0) THEN
C       NION=2
C       IMPURE=2
C     ENDIF
C=================== TEST NION>1 ======================================
C
C          IMPURE    = 0 NO IMPUR. IN PLASMA (SUM NI*ZI = NE)
C          IMPURE    = 1    IMPUR. IN PLASMA (SUM NI*ZI < NE)
C                    = 2    0 OR 1 WITH VARIABLE ION FRACTION
C          NION      = NO. OF PLASMA COMPONENTS
C          TRAN1,2,3 = DRIFT VELOCITY DIRECTION COSINES
C          SHP       = SHEATH POTENTIAL (EV) DIVIDED BY ELECTRON TEMP.
C                               NEXT DATA ARE PROJECT REQUIREMENTS
C                               ----------------------------------
C          PROREQ(1) = HE FLOW TO THE PUMP PIPE(ATOMS/SEC)
C          PROREQ(2) = CONCENTRATION OF HE TO THE PUMP PIPE
C          PROREQ(3) = TOTAL PUMPING AREA (M**2)
C          PROREQ(4) = INDEX OF PUMP PIPE REGION(INTEGER)
C          EATMD     = ENERGY OF PARTICLES RE-EMITTED AS ATOMS
C          EATMR     = ENERGY OF PARTICLES REFLECTED AS ATOMS
C                      WITH PRESCRIBED ENERGY (CF. IEMIS(IR)=3)
C
      IF(SHP.EQ.0.0) SHP=2.5
C
C      SHP SHOULD BE SUCH THAT INITIAL ENERGY BE INVARIANTLY 6KT FOR H:
C                     SHP + 1 + COEFMX*3/2 = 6.
C        THEREFORE COEFMX = ((6-1) - SHP) / 1.5
C
      COEFMX=5.0/3.0
C
      IF(NION.GT.MIO) THEN
        WRITE(IUERR,'(/'' ERROR: TOO MANY IONS IN PLASMA'')')
        CALL EXITN(1)
      ENDIF
C
 1450 CONTINUE
      TRAN=SQRT(TRAN1**2+TRAN2**2+TRAN3**2)
      IF(TRAN.LE.0.0) GO TO 1480
      TRAN1=TRAN1/TRAN
      TRAN2=TRAN2/TRAN
      TRAN3=TRAN3/TRAN
      DO 1460 I=1,MRG
      DRIFTC(I,1)=TRAN1
      DRIFTC(I,2)=TRAN2
      DRIFTC(I,3)=TRAN3
      PARDIR(I,1)=0.0
      PARDIR(I,2)=0.0
      PARDIR(I,3)=0.0
 1460 CONTINUE
      IF(KINDPR.LT.2) GO TO 1550
      WRITE(IOUT, 1470 ) TRAN1,TRAN2,TRAN3
 1470 FORMAT(//' PLASMA DRIFT DIRECTION COSINES:',
     * ' (',0PF5.2,',',F5.2,',',F5.2,')')
      GO TO 1530
C                     READ COSINES FOR EACH REGION
C                  (FOR BEAM PROBLEMS ASSIGN DUMMY COSINES IN REGION 1)
 1480 IF(KINDPR.LT.2) GO TO 1500
      WRITE(IOUT, 1490 )
 1490 FORMAT(//' PLASMA DRIFT DIRECTION COSINES IN EACH REGION'/)
 1500 READ(IN, 1510 ) I,TRAN1,TRAN2,TRAN3,PDIR1,PDIR2,PDIR3
 1510 FORMAT(I6,6E6.0)
      IF(I.LE.0) GO TO 1530
C                     END READING COSINES WITH 0 OR -1
      TRAN=SQRT(TRAN1**2+TRAN2**2+TRAN3**2)
      DRIFTC(I,1)=TRAN1/TRAN
      DRIFTC(I,2)=TRAN2/TRAN
      DRIFTC(I,3)=TRAN3/TRAN
      TRAN=SQRT(PDIR1**2+PDIR2**2+PDIR3**2)
      PARDIR(I,1)=PDIR1/TRAN
      PARDIR(I,2)=PDIR2/TRAN
      PARDIR(I,3)=PDIR3/TRAN
      IF(KINDPR.LT.2) GO TO 1500
      WRITE(IOUT, 1520 ) I,DRIFTC(I,1),DRIFTC(I,2),DRIFTC(I,3)
     *                    ,PARDIR(I,1),PARDIR(I,2),PARDIR(I,3)
 1520 FORMAT(I6,6F9.4)
      GO TO 1500
C
 1530 CONTINUE
C
      IF(ISETUP.EQ.1) GOTO 1550
C
      IF(EATMD.GT.0.0) THEN
        WRITE(IUERR, 1545 ) EATMD
 1545   FORMAT(/ '    EATMD :' ,
     * ' ENERGY OF NEUTRALS RE-EMITTED IN ATOMIC STATE:',F5.2,' EV'/)
      ELSE
        WRITE(IUERR, 1546 )
 1546   FORMAT(/ '    EATMD :' ,
     * ' NEUTRALS ARE RE-EMITTED IN ATOMIC STATE WITH F.C. ENERGY'/)
      ENDIF
      IF(KINDPR.LT.2) GO TO 1550
      WRITE(IOUT, 1540 ) SHP
 1540 FORMAT(/
     * ' SHEATH POTENTIAL DIVIDED BY ELECTRON TEMPERATURE:',F5.2)
C      LE CORREZIONI SEGUENTI NON SERVONO PERCHE' LO IONE NASCE
C      IN BASE A NHIST E NON IN BASE A KOSE DEL BATCH
C      IF(MOD(NSG,NCOM).EQ.0) GO TO 845
C      NSG=(NSG/NCOM)*NCOM
C      NST=(NST/NSG)*NSG
C      WRITE(IOUT, 843 ) NST,NSG
C  843 FORMAT(//' WARNING- NOTE CHANGE'/' HISTORIES  HISTORIES/BATCH'/
C     * I10,I17)
C  845 CONTINUE
C                             WHY 10? ACHTUNG (LABEXT(30),LABINT(MCP))
 1550 CONTINUE
C     RECYCLING OPTION
      READ(IN, 10 ) IOPTRC
      CALL RESET4(RECMAT(1,1,1),MIO*MIO*MRG,UNDEF)
      DO I=1,NION
C       HERE PERC(I) IS THE CONTENT FRACTION OF ION I.
C       LATER IT WILL BECOME THE WALL FLUX FRACT. OF ION I (FOR 'WHICH')
        READ(IN, 1560 ) SYMB(I),PERC(I),(RECMAT(J,I,1),J=1,NION)
 1560   FORMAT(1X,A4,1X,E6.0,3E12.0)
      ENDDO
C NO! IF(NION.EQ.1 .AND. RECMAT(1,1).LE.0.0) RECMAT(1,1)=1.0
C=================== TEST NION>1 ======================================
C     IF(ITEST.NE.0) THEN
C       BACKSPACE IN
C       SYMB(2)=TABLE(5,1)
C       RECMAT(1,1,1)=0.7
C       RECMAT(2,1,1)=0.1
C       RECMAT(1,2,1)=0.1
C       RECMAT(2,2,1)=0.5
C     ENDIF
C=================== TEST NION>1 ======================================
      DO 1570 I=1,10
 1570 LABEXT(I)=0
      IF(IMPURE.LE.1) THEN
        IF(NION.GT.1) THEN
          SUM=0.0
          DO I=1,NION
            SUM=SUM+PERC(I)
          ENDDO
          DO I=1,NION
            PERC(I)=PERC(I)/SUM
          ENDDO
        ELSE
          PERC(1)=1.0
        ENDIF
        IF(KINDPR.GE.2)
     *  WRITE(IOUT, 1600 ) ' PLASMA COMPOSITION FRACTIONS'
     *                   ,(SYMB(I),PERC(I),I=1,NION)
      ELSE
        DO I=1,NION
          PERC(I)=0.0
        ENDDO
      ENDIF
 1600 FORMAT(//A/(4X,A4,1P,E11.3))
C         INTERNAL INDEX KOR(I) CORRESPONDING TO SYMBOL SYMB(I)
      INDHEL=0
      CHAPER=0.0
      DO 1620 I=1,NION
      CALL GETKOR(SYMB(I),K,0,0)
C                    LABINT=INTERNAL LABEL
      LABINT(I)=K
      EXTSYM(I)=TABLE(K,6)
C                    LABEXT=EXTERNAL LABEL
      LABEXT(K)=I
C                                     INDHEL IS THE INDEX OF HELIUM
C                                     (=0 IF NO HELIUM PRESENT)
C                                     'HE  ' IS THE SYMBOL USED IN
C                                     ARRAY DATA FOR BOTH HE++ AND HE+
      IF(EXTSYM(I).EQ.HELIUM) INDHEL=I
      IF(IMPURE.LE.0) THEN
C         CHARGES*PERCENTAGE
        CHAPER=CHAPER+TABLE(K,2)*PERC(I)
      ENDIF
 1620 CONTINUE
      NCOM=NION
C                      MOLECULES
      DO 1630 I=1,NION
      MOLEC(I)=0
      IATOM(I)=I
      K=LABINT(I)
      IF(TABLE(K,7).LE.0.0) GO TO 1630
      NCOM=NCOM+1
      LABINT(NCOM)=K
      MOLEC(I)=NCOM
      IATOM(NCOM)=I
      EXTSYM(NCOM)=TABLE(K,8)
 1630 CONTINUE
C                 CAUTION: IF IMPUR. IONS WILL LATER BE ADDED TO PLASMA
C                 SOURCE THEY MUST BE COUNTED AMONG NCOM, SO THAT
C                 HEAVY IMPURITIES CONSERVE THE INDEX NUTRAL > NIONPM
C                 (MANY TESTS DEPEND ON THIS CONVENTION)
      NIONPM=NCOM
C
C     PHYSICAL DESCRIPTION OF THE REGIONS
C     -----------------------------------
      IF(KINDPR.LT.2) GO TO 1650
      WRITE(IOUT, 1640 )
 1640 FORMAT(//' PHYSICAL DESCRIPTION OF THE REGIONS (PLASMA, VOID, SURF
     *ACES)'//' REGION  ELECT. DENS.  ELECT. TEMP.  ION TEMP.  MACH NUMB
     *ER  TYPE',T83,'TAR.SEG. RE-EMISSION     EXPONENTIAL BIASSING',/,
     *        '            1/CM3           EV          EV')
 1650 NTARG=0
      DO 1660 I=IR3DST,KREG3D
      ICHKR(I)=JUNK
 1660 CONTINUE
C
      DO 2040 I=IR3DST,KREG3D
C     SE GEOM. 3D IR3DST=1
C     "   "    2D    "   2
      READ(IN, 1670 ) I13,IR,DENSE(IR),TEMPE(IR),TEMPI(IR),DRIFTV(IR),
     *  ISTARG(IR),IBOUND(IR),EMIS,IQ,SIMBO,CONT
C     READ(IN, 1670 ) I13,IR,DENSE(IR),TEMPE(IR),TEMPI(IR),DRIFTV(IR),
C    *  ISTARG(IR),IBOUND(IR),EMIS,IQ,SIMBO,ALBEDO(IR),
C    *  BEXPT(IR),(WEXPT(IR,K),K=1,3)                     ----- 16/03/93
C     DENSE=ELECTRON DENSITY
C     TEMPE/I=TEMPERATURE (EV)
C     DRIFTV=MACH NUMBER IN PLASMA OR FLUX TO WALL (FOR CHEM.SPUTT.)
C     ISTARG = SOURCE TARGET ASSOCIATED TO IR FOR IMPURITIES RECYCLING.
C              ISTARG IS THE ORDINAL OF THE SOURCE SURFACES
C              STARTING FROM THOSE WHICH ARE PARALLEL TO Z (XY-SEGMENTS)
C              AND CONTINUING WITH THOSE NORMAL TO Z (XY-SURFACES).
C     IBOUND = -N  ESCAPE REGION OF TYPE N
C        "   =  0  PLASMA REGION
C        "   = +M  WALL REGION OF TYPE M (=1: TRUE WALL, =2: ALBEDO)
C     ALBATO =  PROBABILITY THAT FUEL ATOMS AND ENERGETIC HELIUM
C               ARE ALBEDOED AS ATOMS WITH ENERGY=E*ALBENE(IR)
C     ALBENE =  SEE LINE ABOVE
 1670 FORMAT(I2,I4,4E12.0,2I3,A1,I1,A4,A1)
C1670 FORMAT(I2,I4,E7.0,3E6.0,2I3,A1,I1,A4,5E6.0)         ----- 16/03/93
C1670 FORMAT(I1,I4,E7.0,3E6.0,2I3,A1,I1,A4,5E6.0)         ----- 04/11/92
C
C            IF FIRST DIGIT NOT ZERO, RESCALE DENSITY
C
      IF(I13.NE.0) DENSE(IR)=DENSE(IR)*1.0E+13
C
      ALBEDO(IR)=0.0
      ALBATO(IR)=0.0
      ALBENE(IR)=0.0
      BEXPT(IR)=0.0
      WEXPT(IR,1)=0.0
      WEXPT(IR,2)=0.0
      WEXPT(IR,3)=0.0
      PSEMIP(IR,1)=0.0
      PSEMIP(IR,2)=0.0
C            CONTINUATION CARD?
      IF(CONT.EQ.'+') THEN
C       READ(IN,1675 )  ALBEDO(IR),  BEXPT(IR), (WEXPT(IR,K),K=1,3)
        READ(IN,1675 )  CONT1,       CONT2,     CONT3,CONT4,CONT5
     &                 ,CONT6
 1675   FORMAT(6X,6E12.0)
        IF(IBOUND(IR).EQ.0) THEN
          BEXPT(IR)=CONT2
          WEXPT(IR,1)=CONT3
          WEXPT(IR,2)=CONT4
          WEXPT(IR,3)=CONT5
        ELSE IF(IBOUND(IR).EQ.1) THEN
          IF(CONT1.GT.0.0 .AND. CONT6.EQ.0.0) THEN
C           OLD PUMP FILES:
            CONT6=CONT1
          ENDIF
C         PER AVERE SEMITRASPARENZA DA ENTRAMBI I LATI (MA VEDI SOPRA)
          IF(CONT1.GT.0.0 .OR. CONT2.GT.0.0) THEN
            CONT1=AMAX1(CONT1,1.0E-06)
            CONT6=AMAX1(CONT6,1.0E-06)
          ENDIF
          PSEMIP(IR,1)=AMIN1(AMAX1(CONT1,0.0),1.0)
          PSEMIP(IR,2)=AMIN1(AMAX1(CONT6,0.0),1.0)
          DENSE(IR)=0.0
        ELSE IF(IBOUND(IR).EQ.2) THEN
          ALBEDO(IR)=CONT1
          ALBATO(IR)=CONT2
          ALBENE(IR)=CONT3
          ILEAK(IR)=CONT4
          DENSE(IR)=0.0
        ELSE IF(IBOUND(IR).GT.2) THEN
          WRITE(IUERR,1676) IR,IBOUND(IR)
 1676     FORMAT(/' ***** ILLEGAL IBOUND(',I4,') =',I3)
          CALL EXITN(1)
        ENDIF
      ENDIF
      IF(IBOUND(IR).EQ.1 .AND. IOPTRC.EQ.2) THEN
        DO L=1,NION
          READ(IN, 1560 ) TRAN,TRAN,(RECMAT(J,L,IR),J=1,NION)
        ENDDO
      ENDIF
C
      IF(DENSE(IR).LE.0.0) ISTARG(IR)=0
      IF(KINDPR.LT.2) GO TO 1700
      WRITE(IOUT, 1690 ) IR,DENSE(IR),TEMPE(IR),TEMPI(IR),DRIFTV(IR),
     *  IBOUND(IR),EMIS,SIMBO
 1690 FORMAT(I5,1PE15.4,E14.4,E12.4,E12.4,I5,A1,2X,A4)
 1700 IF(ICHKR(IR).EQ.JUNK) GO TO 1720
      WRITE(IUERR, 1710 ) IR
 1710 FORMAT(/' ***** ERROR: REGION',I3,' ABOVE ALREADY DEFINED')
      CALL EXITN(1)
 1720 ICHKR(IR)=1
      IF(EMIS.EQ.ACHAR) THEN
C       (RE-EMISSION IN ATOMIC STATE)
        IEMIS(IR)=1
      ELSE IF(EMIS.EQ.MCHAR) THEN
C       (RE-EMISSION IN MOLECULAR STATE)
        IEMIS(IR)=2
      ELSE IF(EMIS.EQ.XCHAR) THEN
C       (NEUTRALS ARE RECYCLED AS ATOMS WITH GIVEN ENERGY=EATMR)
        IEMIS(IR)=3
      ELSE
        IEMIS(IR)=2
      ENDIF
      IF(IBOUND(IR)) 1730 , 1750 , 1890
 1730 IF(KINDPR.LT.2) GO TO 2040
      WRITE(IOUT, 1740 )
 1740 FORMAT('+',T67,'ESCAPE REGION')
      GO TO 2040
 1750 IF(KINDPR.LT.2) GO TO 1770
      IF(DENSE(IR).GT.0.0) WRITE(IOUT, 1760 ) ISTARG(IR)
 1760 FORMAT('+',T67,'PLASMA',T86,I3)
 1770 IF(KINDPR.LT.2) GO TO 1790
      IF(DENSE(IR).LE.0.0) WRITE(IOUT, 1780 ) ISTARG(IR)
 1780 FORMAT('+',T67,'VOID',T86,I3)
 1790 ITRAN=ISTARG(IR)
      NTARG=MAX0(NTARG,ITRAN)
      IF(NTARG.LE.MNTARG) GO TO 1810
      WRITE(IUERR, 1800 )
 1800 FORMAT(/' ***** ERROR: TOO MANY HEAVY IONS RECYCLING TARGETS')
      CALL EXITN(1)
 1810 IF(BEXPT(IR)) 1820 , 1820 , 1840
 1820 IF(KINDPR.LT.2) GO TO 1870
      WRITE(IOUT, 1830 )
 1830 FORMAT('+',T118,'NO')
      GO TO 1870
 1840 TRAN=SQRT(WEXPT(IR,1)**2+WEXPT(IR,2)**2+WEXPT(IR,3)**2)
      DO 1850 K=1,3
 1850 WEXPT(IR,K)=WEXPT(IR,K)/TRAN
      IF(KINDPR.LT.2) GO TO 1870
      WRITE(IOUT, 1860 ) BEXPT(IR),(WEXPT(IR,K),K=1,3)
 1860 FORMAT('+',T105,'B=',F4.2,
     * '  W=(',0PF5.2,',',F5.2,',',F5.2,')')
 1870 CONTINUE
      IF(IMPURE.LE.0) THEN
        DO 1880 J=1,NION
C         DENSI=ION DENSITY
C         DENSI*(PERC(1)*Z(1)+PERC(2)*Z(2)+....)=DENSE, OSSIA
C         DENSI=DENSE/CHAPER, DA CUI
          DENSI(IR,J)=PERC(J)*DENSE(IR)/CHAPER
 1880   CONTINUE
      ENDIF
      GO TO 2040
 1890 IF(KINDPR.LT.2) GO TO 1910
      WRITE(IOUT,'(''+'',T70,''WALL'')')
      IF(PSEMIP(IR,1).GT.0.0 .OR. PSEMIP(IR,2).GT.0.0) THEN
        WRITE(IOUT,'('' '',T70,''TRANSPARENCIES'',1P,2E10.3)')
     *        PSEMIP(IR,1),PSEMIP(IR,2)
      ENDIF
      IF(IBOUND(IR).EQ.1 .AND. IOPTRC.EQ.2) THEN
        DO L=1,NION
          WRITE(IOUT, 1895 ) TABLE(LABINT(L),6),
     *                       (RECMAT(J,L,IR),J=1,NION)
 1895   FORMAT(T70,'DESORPTION: ',A2,1P,3E10.3)
        ENDDO
      ENDIF
 1910 INT2=100.0*ALBENE(IR)+0.5
      IF(IEMIS(IR).EQ.2)GO TO 1930
      INT1=100
      IF(KINDPR.LT.2) GO TO 1950
      IF(IBOUND(IR).EQ.2) WRITE(IOUT, 1940 ) ALBEDO(IR),INT1,INT2
     *  ,ILEAK(IR)
      GO TO 1950
 1930 INT1=100.0*ALBATO(IR)+0.5
      IF(KINDPR.LT.2) GO TO 1950
      IF(IBOUND(IR).EQ.2) WRITE(IOUT, 1940 ) ALBEDO(IR),INT1,INT2
     *  ,ILEAK(IR)
 1940 FORMAT(' ',T70,'ALBEDO=',F5.3,'   ATOMS ',I3,'%',
     * ' WITH ENERGY ',I3,'%'/,T70,'LEAK=',I2)
 1950 CONTINUE
C NO! IF(IBOUND(IR).EQ.2 .AND. ALBEDO(IR).LE.0.0) IBOUND(IR)=-1
      IF(IBOUND(IR).EQ.2) GO TO 1970
      IF(KINDPR.LT.2) GO TO 1990
      IF(IEMIS(IR).EQ.2) WRITE(IOUT, 1960 )
 1960 FORMAT(' ',T70,'MOLECULES AND ATOMS')
 1970 IF(KINDPR.LT.2) GO TO 1990
      IF(IEMIS(IR).EQ.1) THEN
         WRITE(IOUT, 1980 )
 1980    FORMAT(' ',T70,'ATOMS ONLY')
      ELSE IF(IEMIS(IR).EQ.3) THEN
         WRITE(IOUT, 1985 )
 1985    FORMAT(' ',T70,'X-ATOMS ONLY')
      ENDIF
 1990 CALL GETKOR(SIMBO,K,1,0)
      DO 2000 J=1,NCOM
      IF(LABINT(J).EQ.K) GO TO 2030
 2000 CONTINUE
      NCOM=NCOM+1
      IF(NCOM.LE.MCP) GO TO 2020
      WRITE(IUERR, 2010 )
 2010 FORMAT(/' ERROR: TOO MANY IONS/NEUTRALS')
      CALL EXITN(1)
 2020 CONTINUE
CC    IF((NCOM-NIONPM).LE.6)GO TO 2023
CC    WRITE(IUERR, 2022 )
C2022 FORMAT(/' ERROR: TOO MANY HEAVY IMPURITIES')
CC    CALL EXITN(1)
CC                NO MORE THAN 6 HEAVY IMPURITIES ARE ACCEPTED
C2023 CONTINUE
      CHARGE(NCOM)=IQ
      LABINT(NCOM)=K
      EXTSYM(NCOM)=TABLE(K,6)
      LABEXT(K)=NCOM
      MOLEC(NCOM)=0
      IATOM(NCOM)=NCOM
 2030 LIWALL(IR)=K
 2040 CONTINUE
C
      WRITE(IOUT,'(/'' IGOPT='',I1)') IGOPT
      IF(IPVOID.EQ.0) GOTO 2063
      IF(ISETUP.EQ.0) THEN
        IF(TSUBD.LE.0.0) THEN
          WRITE(IOUT,2054) IABS(IPVOID)
 2054     FORMAT(' SUBDIVERTOR MACRO-REGION =',I3)
        ELSE
          WRITE(IOUT,2056) IABS(IPVOID),TSUBD*11600.0-273.0
 2056     FORMAT(' SUBDIVERTOR MACRO-REGION =',I3,
     &           ' WITH WALL AT',1P,E9.2,' C')
        ENDIF
      ENDIF
C OLD IF(IPVOID.GT.0) GOTO 2063
C            ADD PUMP REGION MATERIAL
C OLD       ( IF IPVOID<0 )
C OLD IF(LPVOID.LE.0) GOTO 2063
      IF(SYMBPW.EQ.RBLANK) GOTO 2063
      CALL GETKOR(SYMBPW,LPVOID,1,0)
      K=LPVOID
      IF(ISETUP.EQ.0) THEN
        IF(MIMP.GT.1) THEN
          WRITE(IUERR,2057) TABLE(K,6),' '
 2057     FORMAT(1X,A4,' PUMP WALLS',1X,A)
        ELSE
          IF(IPVOID.LT.0) THEN
            WRITE(IUERR,2057) TABLE(K,6),'WITH INHIBITED SPUTTERING'
          ELSE
            WRITE(IUERR,2057) TABLE(K,6),' '
          ENDIF
        ENDIF
      ENDIF
      DO J=1,NCOM
        IF(LABINT(J).EQ.K) THEN
C         PUMP WALL MATERIAL IS ALREADY PRESENT SOMEWHERE ELSE
          LPVOID=-LPVOID
          GO TO 2063
        ENDIF
      ENDDO
      NCOM=NCOM+1
      IF(NCOM.LE.MCP) GO TO 2059
      WRITE(IUERR, 2010 )
      CALL EXITN(1)
 2059 CONTINUE
CC    IF((NCOM-NIONPM).LE.6)GO TO 2061
CC    WRITE(IUERR, 2022 )
CC    CALL EXITN(1)
C2061 CONTINUE
      CHARGE(NCOM)=0
      LABINT(NCOM)=K
      EXTSYM(NCOM)=TABLE(K,6)
      LABEXT(K)=NCOM
      MOLEC(NCOM)=0
      IATOM(NCOM)=NCOM
 2063 CONTINUE
C
      IF(ISETUP.EQ.1) GOTO 2069
C
      READ(IN,10) NLEAK
      IF(NLEAK.GT.0) THEN
        IF(NLEAK.GT.MLEAK) THEN
          WRITE(IUERR,*) ' **** ERROR: TOO MANY LEAKS'
          CALL EXITN(1)
        ENDIF
        DO 2064 L=1,NLEAK
          READ(IN,'(4E12.0)') (XLEAK(K,L),K=1,4)
 2064   CONTINUE
        IF(KINDPR.GE.2) THEN
          WRITE(IOUT,2065) ((XLEAK(K,L),K=1,4),L=1,NLEAK)
 2065     FORMAT(/' LEAK RECYCLING SEGMENTS'/(1P,2E11.3,2X,2E11.3))
        ENDIF
      ENDIF
C
      CALL SETTRM
C
      ISENT=0
      DO 2067 I=IR3DST,KREG3D
        IF(IEMIS(I).EQ.3) ISENT=1
 2067 CONTINUE
      IF(ISENT.EQ.1) WRITE(IUERR, 2068 ) EATMR
 2068 FORMAT(/ '    EATMR :' ,
     * ' NEUTRALS ARE REFLECTED WITH',F5.2,' EV SOMEWHERE'/
     * '            (WITH F.C. DISSOCIATION ENERGY IF <=0)'/)
C
 2069 CONTINUE
C                   IF PLASMA IMPURITIES ARE PRESENT READ ION DENSITIES
      IF(IMPURE.LE.0) GO TO 2125
      DO J=1,NION
        DO IR=IR3DST,KREG3D
          DENSI(IR,J)=1.2345E-30
        ENDDO
      ENDDO
      IF(KINDPR.LT.2) GO TO 2080
      WRITE(IOUT, 2070 )
 2070 FORMAT(//' REGION    ION DENS.')
 2080 READ(IN, 1670 ) I13,IR,(BUFFER(J),J=1,NION)
C=================== TEST NION>1 ======================================
C     IF(ITEST.NE.0) THEN
C       DO J=2,NION
C         BUFFER(1)=BUFFER(1)*0.5
C         BUFFER(J)=BUFFER(1)
C       ENDDO
C     ENDIF
C=================== TEST NION>1 ======================================
      IF(IR.LE.0) GOTO 2120
      DO J=1,NION
        DENSI(IR,J)=BUFFER(J)
      ENDDO
      IF(I13.EQ.0) GO TO 2100
      DO 2090 J=1,NION
 2090 DENSI(IR,J)=DENSI(IR,J)*1.0E+13
 2100 IF(KINDPR.LT.2) GO TO 2110
      WRITE(IOUT, 1690 ) IR,(DENSI(IR,J),J=1,NION)
 2110 GOTO 2080
 2120 CONTINUE
      SUMI  = 0.0
      SUME1 = 0.0
      SUME2 = 0.0
      DO IR=IR3DST,KREG3D
        IF(DENSE(IR).EQ.0.0) THEN
          DO J=1,NION
            DENSI(IR,J)=0.0
          ENDDO
        ENDIF
        SUME1=SUME1+DENSE(IR)*AREAD(IR)
        DO J=1,NION
          IF(IBOUND(IR).EQ.0 .AND. DENSI(IR,J).EQ.1.2345E-30) THEN
            WRITE(IUERR,
     &      '('' **** ERROR: UNDEFINED NI FOR IR='',I4)') IR
            CALL EXITN(1)
          ENDIF
          K=LABINT(J)
          SUMI =SUMI +           DENSI(IR,J)*AREAD(IR)
          SUME2=SUME2+TABLE(K,2)*DENSI(IR,J)*AREAD(IR)
        ENDDO
      ENDDO
      WRITE(IUERR,2121) SUMI/SUME1,(SUME1-SUME2)/SUME1
 2121 FORMAT('                            NI/NE',F6.2/
     &       ' (NE(H+HE+Z)-NE(H+HE))/NE(H+HE+Z)',F6.2)
C
C                (RE) COMPUTE ION FRACTIONS
 2125 CONTINUE
      DO I=1,NION
        PERC(I)=0.0
        DO 2126 K=IR3DST,KREG3D
          IF(IBOUND(K).NE.0) GOTO 2126
          PERC(I)=PERC(I)+DENSI(K,I)*AREAD(K)
 2126   CONTINUE
      ENDDO
      TRAN=0.0
      DO I=1,NION
        TRAN=TRAN+PERC(I)
      ENDDO
      DO I=1,NION
        PERC(I)=PERC(I)/TRAN
      ENDDO
      WRITE(IUERR, 1600 ) ' PLASMA COMPOSITION FRACTIONS'
     *                   ,(SYMB(I),PERC(I),I=1,NION)
      IF(IOPTRC.EQ.1) THEN
        WRITE(IUERR,'(//'' PARTICLE RECYCLING MATRIX'')')
        DO J=1,NION
          WRITE(IUERR,2127) TABLE(LABINT(J),6),
     &                     (RECMAT(I,J,1),TABLE(LABINT(I),6),I=1,NION)
 2127     FORMAT(1X,A2,'-->',F4.1,'*',A2,:'+',F4.1,'*',A2,
     &                     :'+',F4.1,'*',A2,:'+',F4.1,'*',A2)
          DO I=1,NION
            DO K=2,KREG3D
              RECMAT(I,J,K)=RECMAT(I,J,1)
            ENDDO
          ENDDO
        ENDDO
      ELSE IF(IOPTRC.EQ.2) THEN
      ELSE
        WRITE(IUERR,*) ' ***** ILLEGAL RECYCLING OPTION',IOPTRC
        CALL EXITN(1)
      ENDIF
C
      IF(ISETUP.EQ.1) GOTO 2181
C
      DO 2130 I=1,NZONE
 2130 IBOUNZ(I)=JUNK
      DO 2180 I=IR3DST,KREG3D
      IF(ICHKR(I).NE.JUNK) GO TO 2150
      WRITE(IUERR, 2140 ) I
 2140 FORMAT(/' ***** ERROR: PHYSICAL REGION',I4,' UNDEFINED')
      CALL EXITN(1)
 2150 CONTINUE
      IZO=IZONA(I)
      IF(IZO.LE.0) GO TO 2180
      IF(IBOUNZ(IZO).EQ.JUNK) GO TO 2170
      IF(IBOUND(I).EQ.IBOUNZ(IZO)) GO TO 2180
      WRITE(IUERR, 2160 )
 2160 FORMAT(/' ***** ERROR: REGIONS OF DIFFERENT CHARACTER COLLAPSED IN
     *TO THE SAME ZONE')
      CALL EXITN(1)
 2170 IBOUNZ(IZO)=IBOUND(I)
 2180 CONTINUE
C
 2181 CONTINUE
C     ADD RECYC. IMPURITY?
      READ(IN,'(I6,A4,2E6.0)') LIGHTW,SIMBO,RNLITE,EWLITE
C     IF(LIGHTW.NE.0 .AND. TCUT.LT.TIMINF) THEN
C       LIGHTW=0
C       WRITE(IUERR,'(/'' NO IMPURITIES WITH TIME SIMULATION'')')
C     ENDIF
      IF(LIGHTW.NE.0) THEN
        IF(RNLITE.LT.0.0) THEN
C         FORCE RECYC. IMPURITY TO BE TREATED AS A METAL (OLD MODEL)
          WRITE(IUERR,*) ' OBSOLETE LIGHT IMPURITY RECYC. MODEL'
          CALL EXITN(1)
C         I11=+1
C         NTSPUT=1
        ELSE
          I11=-1
          IF(MIMP.LE.0) THEN
C         SWITCH OFF SPUTTERING FROM WALL DUE TO NEUTRALS )
            NTSPUT=0
            WRITE(IUERR,*) ' ALL SPUTTERING IS INHIBITED'
          ENDIF
          EWLITE=-1.0
        ENDIF
        CALL GETKOR(SIMBO,K,0,I11)
        NCOM=NCOM+1
        IF(NCOM.GT.MCP) THEN
          WRITE(IUERR, 2010 )
          CALL EXITN(1)
        ENDIF
CC      IF((NCOM-NIONPM).GT.6) THEN
CC        WRITE(IUERR, 2182 )
C2182     FORMAT(/' ERROR: NO ROOM FOR THE RECYC. IMPURITY')
CC        CALL EXITN(1)
CC      ENDIF
        CHARGE(NCOM)=0
        LABINT(NCOM)=K
        EXTSYM(NCOM)=TABLE(K,6)
        LABEXT(K)=NCOM
        MOLEC(NCOM)=0
        IATOM(NCOM)=NCOM
        WRITE(IUERR,
     &  '(/'' RECYCLABLE IMPURITY IS '',A4,'', RN='',F4.1,
     &       '', E FROM UNIV. FORMUL.'')')
     &  EXTSYM(NCOM),RNLITE
        LIGHTW=NCOM
C NO!   DECIMA=1.0
      ENDIF
C
C     ZONE COMPOSITION
C     ----------------
      DO 2185 I=1,NZONE
        DENSEZ(I)=0.0
        TEMPEZ(I)=0.0
        TRAN1=0.0
        TRAN2=0.0
        DO 2184 IR=IR3DST,KREG3D
          IZ=IZONA(IR)
          IF(IZ.NE.I) GOTO 2184
          DENSEZ(I)=DENSEZ(I)+DENSE(IR)*AREAD(IR)
          TRAN1=TRAN1+AREAD(IR)
          IF(DENSE(IR).LE.0.0) THEN
            TEMPEZ(I)=TEMPEZ(I)+TEMPE(IR)*AREAD(IR)
            TRAN2=TRAN2+AREAD(IR)
          ELSE
            TEMPEZ(I)=TEMPEZ(I)+TEMPE(IR)*DENSE(IR)*AREAD(IR)
            TRAN2=TRAN2+DENSE(IR)*AREAD(IR)
          ENDIF
 2184   CONTINUE
        DENSEZ(I)=DENSEZ(I)/TRAN1
        TEMPEZ(I)=TEMPEZ(I)/TRAN2
 2185 CONTINUE
C
      IF(ISETUP.EQ.1) GOTO 2385
C
C     SCANSIONE DELL'ENERGIA PER LA CLASSIFICA DEI RISULTATI
C     ------------------------------------------------------
      READ(IN, 10 ) NGEV
      IF(NGEV.GT.0) GO TO 2190
      NGEV=2
      EGEV(1)=3.0
      GO TO 2220
 2190 IF(NGEV.LE.MEG) GO TO 2200
      IDIAGN=14
      GO TO 3140
 2200 READ (IN, 20 ) (EGEV(I),I=1,NGEV)
C     LIMITI INFERIORI DEI GRUPPI (COMPRESO LO ZERO)
      ITRAN=NGEV-1
      DO 2210 I=1,ITRAN
      IF(EGEV(I).GT.EGEV(I+1)) GO TO 2210
      IDIAGN=15
      GO TO 3140
 2210 CONTINUE
 2220 EGEV(NGEV)=0.0
C
C     SPUTTERING (AND OTHER STATISTICS): MESH ALONG XY-LINES
C     ------------------------------------------------------
C          NLATS IS THE NUMBER OF LINES;
C          YEARFR IS THE OPERATION TIME GIVEN AS YEAR FRACTION
C          AND IS USED TO TRANSFORM SPUTTERING INTO EROSION
C          AND ATOMS DEPOSITED INTO CENTIMETERS.
C        IONTOW : ION CONTRIBUTIONS TO WALL EFFECTS
C      IONTOW=0 WALL EFFECTS DUE TO NEUTRALS + SOURCE IONS
C      IONTOW=1 WALL EFFECTS DUE TO NEUTRALS + IONISED HEAVY IMPURITIES
      READ(IN, 2230 ) NLATS,YEARFR,IONTOW
 2230 FORMAT(I6,E6.0,I6)
      IF(YEARFR.LE.0.0) YEARFR=1.0
      IF(NLATS.LE.MSD) GO TO 2240
      IDIAGN=4
      GO TO 3140
 2240 IF(NLATS.LE.0) GO TO 2380
C          MSCAN IS THE MAXIMUM NUMBER OF SUBDIVISIONS ACTUALLY PRESENT
      MSCAN=0
C     IF(I3D.EQ.0) GO TO 1450
      IF(.TRUE.) GO TO 2260
      WRITE(IUERR, 2250 )
 2250 FORMAT('0***** ERROR: SPUTTERING DISTRIBUTION IN 3-D GEOMETRY')
      CALL EXITN(1)
 2260 IF(KINDPR.LT.2) GO TO 2280
      WRITE(IUERR, 2270 )
 2270 FORMAT(//' MESH FOR STATISTICS ALONG XY-LINES'//
     * ' WALL  POL. SIDE ALONG UPPER BOUND  AREA ASSOCIATED TO THE',
     * ' SEGMENT'/)
 2280 DO 2370 I=1,NLATS
      READ(IN, 2290 ) IPOL,ILATO,NSCAN,BCD,(BUFFER(K),K=1,8)
 2290 FORMAT(3I6,5X,A1,8E6.0)
      IF(NSCAN.LE.MSC) GO TO 2300
      IDIAGN=5
      GO TO 3140
C                  READ AREA ASSOCIATED TO EACH SPUTTERING SEGMENT
C                            SPAREA(MSD,MSC)
 2300 IF(NSCAN.GT.8) READ(IN, 2310 ) (BUFFER(K),K=9,NSCAN)
 2310 FORMAT(24X,8E6.0)
      MSCAN=MAX0(MSCAN,NSCAN)
      READ(IN, 20 ) (SPAREA(I,K),K=1,NSCAN)
      IF(KINDPR.LT.2) GO TO 2330
      WRITE(IOUT, 2320 ) I,IPOL,ILATO,BCD,(BUFFER(K),SPAREA(I,K),
     * K=1,NSCAN)
 2320 FORMAT(I3,')',I5,I5,3X,' ',A1,1P,2E15.5/(19X,2E15.5))
 2330 IDELAT(I,1)=IPOL*1000+ILATO
      IDELAT(I,2)=NSCAN
      IDELAT(I,3)=1
      IF(BCD.NE.XCHAR) IDELAT(I,3)=2
      X1=-1.0E+30
      DO 2360 K=1,NSCAN
      X2=BUFFER(K)
      IF(X2.GE.X1) GO TO 2340
      IDIAGN=5
      GO TO 3140
 2340 X1=X2
      SCALAT(I,K)=X2
      IF(SPAREA(I,K).GT.0.0)GO TO 2360
      WRITE(IUERR, 2350 )
 2350 FORMAT(/' ***** ERROR: AREA ASSOCIATED TO A SEGMENT IS MISSING')
      CALL EXITN(1)
 2360 CONTINUE
 2370 CONTINUE
 2380 CONTINUE
C
C
 2385 CONTINUE
C
C     SOURCE
C     ------
C
      DO K=1,NCOM
        ZSOURC(K)=0.0
      ENDDO
      DO K=1,NION
C       RECYCL/(RECYCL+RECOM) FOR THIS ION
        PRORCL(K)=0.0
      ENDDO
      READ(IN,'(E12.0,E6.0,2I6,E6.0/I6,I6, 2X,A4,E12.0)')
     &                SRECYC,WSOUR1,IZOENT,IRECO,ANGNOR
     &               ,MODEZR,NZREC, SIMBOZ(1),ZRECYC(1)
        WRITE(IOUT,'(/'' WALL H-FLUXES SCORED IN THE CONE (0.0,'',F4.1,
     &                '') DEG AROUND WALL NORMAL'')') ANGNOR
        COSNOR = COS(3.14159/180.0*ANGNOR)
C       PERC(I) ARE GOING TO BE RE-USED
C       MEANING NOW THE FRACTIONS OF RECYCLING FLUX
C       TO WHICH RECOMBINATION WILL BE ADDED LATER
      IF(NION.LE.1) THEN
        PERC(1)=1.0
C       SALVO MODIFICHE ULTERIORI:
        PRORCL(1)=1.0
      ELSE
        READ(IN,25) (PERC(I),I=1,NION)
C=================== TEST NION>1 ======================================
C       IF(ITEST.NE.0) THEN
C         BACKSPACE IN
C         PERC(1)=0.5
C         PERC(2)=0.5
C       ENDIF
C=================== TEST NION>1 ======================================
        SUM=0.0
        DO I=1,NION
          SUM=SUM+PERC(I)
C         SALVO MODIFICHE ULTERIORI:
          PRORCL(I)=1.0
        ENDDO
        DO I=1,NION
          PERC(I)=PERC(I)/SUM
        ENDDO
        WRITE(IUERR, 1600 ) ' ION RECYCLING INTENSITIES'
     *                      ,(SYMB(I),SRECYC*PERC(I),I=1,NION)
      ENDIF
      IF(MODEZR.EQ.0) THEN
        WRITE(IUERR,*) ' MODEZR=0 NO LONGER SUPPORTED'
        CALL EXITN(1)
      ENDIF
      IF(NZREC.GT.1) THEN
        IF(NZREC.GT.NCOM)THEN
          WRITE(IUERR,*) ' ***** ERROR: NZREC =',NZREC,' > ',NCOM
          CALL EXITN(1)
        ENDIF
        READ(IN,'(12X,2X,A4,E12.0)') (SIMBOZ(K),ZRECYC(K),K=2,NZREC)
      ENDIF
      IF(NZREC.LT.1) GOTO 2395
      DO 2394 I=1,NZREC
        IF(ZRECYC(I).LT.0.0) THEN
          WRITE(IUERR,*) ' **** ERROR: ZRECYC<0 FOR I=',I
          CALL EXITN(1)
        ENDIF
        DO 2392 K=NIONPM+1,NCOM
          IF(EXTSYM(K).EQ.SIMBOZ(I)) GOTO 2393
 2392   CONTINUE
        WRITE(IUERR,'('' INJECTED IMPURITY ION '',A4,
     &                '' NOT DEFINED PREVIOUSLY'')') SIMBOZ(I)
        CALL EXITN(1)
 2393   CONTINUE
        NUTRLZ(I)=K
        WRITE(IUERR,'(A,A)') ' INJECTED IMPURITY ION IS ',SIMBOZ(I)
 2394 CONTINUE
 2395 CONTINUE
C
      IF     (IRECO.EQ.0) THEN
        SRECOM=0.0
      ELSE IF(IRECO.EQ.1) THEN
        IF(.TRUE.) THEN
          WRITE(IUERR,*) ' **** IRECO=1. MODEZR ETC. NOT FULLY IMPLEM.'
          CALL EXITN(1)
        ENDIF
        SRECYC=0.0
        IONTOW=1
        GOTO 2850
      ELSE IF(IRECO.EQ.2) THEN
        CONTINUE
      ELSE
        IDIAGN=23
        GO TO 3140
      ENDIF
CW    WRITE(IOUT,2395)
C2395 FORMAT(//' NEUTRALS ARE PRODUCED BY RECYCLING FROM WALLS'/
CW   *         ' ---------------------------------------------')
C     (SRECYC=TRUE SOURCE INTENSITY. IF =0 IS SET=1)
C     (IZOENT=INDEX OF ZONE FOR SCORING FIRST ENTRY FROM A SOURCE TARGET
      IF(SRECYC.EQ.0.0) SRECYC=1.0
      IF(I3D.NE.0) THEN
        IF(SRECYC.NE.-1.0)
     *  WRITE(IUERR, 2400 )SRECYC,' PARTS/SEC'
 2400   FORMAT(//' SOURCE OF RECYCLING FUEL NEUTRALS   ',1PE10.3,A
     *          /' ---------------------------------')
      ELSE
        IF(SRECYC.NE.-1.0)
     *  WRITE(IUERR, 2400 )SRECYC,' PARTS/(SEC*CM)'
      END IF
      IF(WSOUR1.EQ.0.0)GO TO 2690
C
C     SOURCE DISTRIBUTED UPON PLANES PARALLEL TO Z-AXIS
C     -------------------------------------------------
      WRITE(IOUT, 2410 ) WSOUR1
 2410 FORMAT(/' SOURCE UPON SURFACES PARALLEL TO Z-AXIS',
     * ' (RATIO TO TOTAL SOURCE',0PF5.2,')')
      DO K=1,NION
        WSOSUM(K)=0.0
      ENDDO
      DO K=1,NCOM
        WSOSMZ(K)=0.0
      ENDDO
      READ(IN, 10 ) NSEGS,NZSOUR,IBEAM
C     (NSEGS IS THE TOTAL NUMBER OF TARGETS PARALLEL TO Z
C      --------------------------------------------------
C      AND BELONGING TO ALL LAYERS)
C      ---------------------------
C     (IBEAM=1 PER BEAM MONOCROMATICI)
      NSEGSO=NSEGS
      IF(NZSOUR.LE.0) GO TO 2450
      IF(NZSOUR.LE.MZSOUR) GO TO 2420
      IDIAGN=5
      GO TO 3140
 2420 READ(IN, 20 ) (SREGZ(I),I=1,NZSOUR)
      IF(SREGZ(NZSOUR).LE.ASTER(LQUOTA+NZETA)) GO TO 2430
      SREGZ(NZSOUR)=ASTER(LQUOTA+NZETA)
 2430 DREGZ(1)=SREGZ(1)
      IF(NZSOUR.EQ.1) GO TO 2450
      DO 2440 I=2,NZSOUR
 2440 DREGZ(I)=SREGZ(I)-SREGZ(I-1)
 2450 IF(NSEGS.LE.MBS) GO TO 2460
      IDIAGN=3
      GO TO 3140
 2460 IF(NSEGS.LE.0) GO TO 2690
      WRITE(IOUT, 2470 ) NZSOUR
 2470 FORMAT(/' NUMBER OF SOURCE LAYERS ALONG THE Z-AXIS',I3)
      IF(NZSOUR.GT.0) WRITE(IOUT, 2480 ) (L,SREGZ(L),L=1,NZSOUR)
 2480 FORMAT( ' L=',I2,'  UP TO',F9.2)
      IF(IBEAM.EQ.0.AND.INDHEL.NE.0)
     *WRITE(IOUT, 2490 )
 2490 FORMAT(/' TARGET SEGMENT L',12X,'FROM',23X,'TO',12X,'SHEATH TEMP',
     *1X,'INTENSITY (ARB.UNITS) FOR FUEL AND HELIUM')
C2490 FORMAT(/' TARGET SEGMENT L',9X,'FROM',22X,'TO',12X,'SHEATH TEMP.',
C    *1X,'INTENSITY (ARB.UNITS) FOR FUEL AND HELIUM')     ----- 04/11/92
      IF(IBEAM.EQ.0.AND.INDHEL.EQ.0)
     *WRITE(IOUT, 2500 )
 2500 FORMAT(/' TARGET SEGMENT L',12X,'FROM',23X,'TO',12X,'SHEATH TEMP',
     *1X,'INTENSITY (ARB.UNITS)')
C2500 FORMAT(/' TARGET SEGMENT L',9X,'FROM',22X,'TO',12X,'SHEATH TEMP.',
C    *1X,'INTENSITY (ARB.UNITS)')                         ----- 04/11/92
      IF(IBEAM.NE.0)
     *WRITE(IOUT, 2510 )
 2510 FORMAT(/' TARGET L',9X,'FROM',22X,'TO',12X,'BEAM ENERGY',
     *2X,'INTENSITY',4X,'BEAM DIRECTION')
C                THE AXIAL SOURCE IS GIVEN (IMPLICITLY) BY REPEATING
C                THE FOLLOWING DATA FOR EACH LAYER
C    (NSEGS=TOTAL TARGETS PARALLEL TO Z)
      L=1
C
      DO 2650 LS=1,NSEGS
C
      KORSEG(LS)=L
      READ(IN, 2520 ) X1SOUR(L),Y1SOUR(L),X2SOUR(L),Y2SOUR(L)
      READ(IN, 2525 ) WSOSEG(L,1),SOTEMP(L),PUFFRA(L,1),LAYSEG(L),
     &                ITYSEG(L),
     *                TRAN,WSOIMP(L,1),QIMP(L,1),PUFIMP(1)
C              WSOSEG(1)= SOURCE WEIGHT ON ORIENTED SEGMENT (ION 1)
C                         P1--->P2 SUCH THAT PLASMA LIES ON THE LEFT,
C                         UNLESS WDS IS GIVEN (BEAM PROBLEMS)
C                SOTEMP = SHEATH TEMPERATURE(EV) OR BEAM ENERGY
C                         (IF <0, -SOTEMP IS THE INITIAL TEMPERATURE)
C              PUFFRA(1)= FRACTION PUFF(ION 1)/WSOSEG(ION 1)
C                LAYSEG = LAYER TO WHICH THIS TARGET BELONGS
C              WSOIMP(1)= SOURCE WEIGHT FOR IMPURITY 1
C                QIMP(1)= AV.CHARGE     FOR IMPURITY 1
C              PUFIMP(1)= FRACTION PUFF(Z   1)/WSOSEG(Z   1)
C                WDS    = 3 DIRECTION COSINES, FOR BEAM PROBLEMS ONLY
COLD                      OR SOURCE IN WDS(L,1) FOR SAMPLING HELIUM
COLD                         Z-SOUR IN WDS(L,2) FOR IMPURITY 1
COLD                         AV.CHARGE    (L,3)  "       "   "
 2520 FORMAT(4E12.0)
 2525 FORMAT(3E12.0,2I6/E12.0,3E12.0)
      IF(NION.GE.2) THEN
        READ(IN, 25 ) (WSOSEG(L,J),PUFFRA(L,J),J=2,NION)
      ENDIF
C=================== TEST NION>1 ======================================
C     IF(ITEST.NE.0) THEN
C       BACKSPACE IN
C       WSOSEG(L,2)=WSOSEG(L,1)
C       PUFFRA(L,2)=PUFFRA(L,2)
C     ENDIF
C=================== TEST NION>1 ======================================
      IF(IBEAM.NE.0) THEN
        READ(IN, 2525) (WDS(L,LL),LL=1,3)
      ELSE
        DO LL=1,3
          WDS(L,LL)=0.0
        ENDDO
      ENDIF
      IF(NZREC.GT.1) THEN
        READ(IN, 25 ) (WSOIMP(L,K),QIMP(L,K),PUFIMP(K),K=2,NZREC)
      ENDIF
      DO K=1,NZREC
        NK=NUTRLZ(K)
        PUFFRA(L,NK)=PUFIMP(K)
CW      IF(PUFFRA(L,NK).NE.0.0) THEN
CW        WRITE(IUERR,*) ' PUFFRA <>0',LS,'->',L,K,NK,PUFFRA(L,NK)
CW      ENDIF
      ENDDO
      LTRAN = WSOSEG(L,1).LE.0.0
      DO K=2,NION
        LTRAN = LTRAN .AND. WSOSEG(L,K).LE.0.0
      ENDDO
      DO K=1,NZREC
        LTRAN = LTRAN .AND. WSOIMP(L,K).LE.0.0
      ENDDO
C     NO SOURCE ALONG THIS SEGMENT. GO TO NEXT SEGMENT
      IF(LTRAN) GOTO 2650
      WRITE(IOUT, 2530 )LS,LAYSEG(L),ITYSEG(L),
     * X1SOUR(L),Y1SOUR(L),X2SOUR(L),
     * Y2SOUR(L),SOTEMP(L),WSOSEG(L,1),WSOIMP(L,1)
 2530  FORMAT(I13,2I4,' (',1PE11.4,',',E11.4,')',1X,
     *  '(',E11.4,',',E11.4,')',E11.4,2E12.4)
      IF(IBEAM.EQ.0.AND.INDHEL.NE.0)
     *WRITE(IOUT, 2540 )LS,LAYSEG(L),ITYSEG(L),
     * X1SOUR(L),Y1SOUR(L),X2SOUR(L),
     * Y2SOUR(L),SOTEMP(L),WSOSEG(L,1),WDS(L,1)
C2540 FORMAT(I13,I4,' (',1PE10.3,',',E10.3,')',1X,
C    *'(',E10.3,',',E10.3,')',E11.3,E12.3,E12.3)         ----- 04/11/92
 2540 FORMAT(I13,I4,' (',1PE11.4,',',E11.4,')',1X,
     *'(',E11.4,',',E11.4,')',E11.4,E12.4,E12.4)
      WDS(L,5)=0.0
      IF(IBEAM.EQ.0) GOTO 2640
C               DIRECTION COSINES FOR BEAM PROBLEMS
      TRAN=0.0
      DO 2550 LL=1,3
 2550 TRAN=TRAN+WDS(L,LL)**2
      IF(TRAN.GT.0.0) GO TO 2580
      WRITE(IOUT, 2570 )
 2570 FORMAT(/' *****ERROR: SOURCE DIRECTION COSINES FOR BEAM PROBLEMS
     *')
      CALL EXITN(1)
 2580 TRAN=SQRT(TRAN)
      DO 2590 LL=1,3
 2590 WDS(L,LL)=WDS(L,LL)/TRAN
      WRITE(IOUT, 2600 ) (WDS(L,LL),LL=1,3)
 2600 FORMAT('+',T83,'(',0PF5.2,',',F5.2,',',F5.2,')')
      WDS(L,5)=1.0
      IF(ABS(WDS(L,3)).GT.0.001) GO TO 2610
      WDS(L,3)=SIGN(0.001,WDS(L,3))
 2610 WDS(L,4)=SQRT(1.0-WDS(L,3)**2)
      WDS(L,1)=WDS(L,1)/WDS(L,4)
      WDS(L,2)=WDS(L,2)/WDS(L,4)
      TRAN=SQRT(WDS(L,1)**2+WDS(L,2)**2)
      WDS(L,1)=WDS(L,1)/TRAN
      WDS(L,2)=WDS(L,2)/TRAN
      IF(ABS(WDS(L,1)).LT.0.999) GO TO 2620
      WDS(L,1)=SIGN(0.999,WDS(L,1))
      GO TO 2630
 2620 IF(ABS(WDS(L,1)).GT.0.001) GO TO 2640
      WDS(L,1)=SIGN(0.001,WDS(L,1))
 2630 WDS(L,2)=SIGN(SQRT(1.0-WDS(L,1)**2),WDS(L,2))
C                    INTEGRATE SEGMENT WEIGHTS
 2640 CONTINUE
      DO K=1,NION
        WSOSUM(K)=WSOSUM(K)+WSOSEG(L,K)
        WSOSEG(L,K)=WSOSUM(K)
      ENDDO
      DO K=1,NZREC
        WSOSMZ(K)=WSOSMZ(K)+WSOIMP(L,K)
        WSOIMP(L,K)=WSOSMZ(K)
      ENDDO
      IF(ITYSEG(L).EQ.0) THEN
C       WRITE(6,*) ' L=',L,WSOSEG(L,1),WSOSUM,WSOIMP(L,1),WSOSMZ
C       FISOU(L)= ANGLE BETWEEN THE ORIENTED LINE AND THE X-AXIS
C       SFISOU(L)=SIN(FISOU(L))
        SFISOU(L)=Y2SOUR(L)-Y1SOUR(L)
C       CFISOU(L)=COS(FISOU(L))
        CFISOU(L)=X2SOUR(L)-X1SOUR(L)
        SUM=SQRT(SFISOU(L)*SFISOU(L)+CFISOU(L)*CFISOU(L))
        SFISOU(L)=SFISOU(L)/SUM
        CFISOU(L)=CFISOU(L)/SUM
        FISOU(L)=ARCSIN(SFISOU(L))
        IF(CFISOU(L).LT.0.0) FISOU(L)=FISOU(L)+3.14159
      ELSE
        SFISOU(L)=1.0E+30
        CFISOU(L)=1.0E+30
        FISOU(L)=1.0E+30
      ENDIF
      L=L+1
 2650 CONTINUE
C
      NSEGS=L-1
      IF(NSEGS.NE.NSEGSO)
     *WRITE(IOUT,*) ' NSEGS =',NSEGSO,' --->',NSEGS
C                    NORMALISE SEGMENT WEIGHTS
      DO 2660 L=1,NSEGS
        DO K=1,NION
          IF(WSOSUM(K).NE.0.0)
     *    WSOSEG(L,K)=WSOSEG(L,K)/WSOSUM(K)
        ENDDO
        DO K=1,NZREC
          IF(WSOSMZ(K).NE.0.0)
     *    WSOIMP(L,K)=WSOIMP(L,K)/WSOSMZ(K)
        ENDDO
 2660 CONTINUE
      WRITE(IOUT,*) ' WSOSUM=',(WSOSUM(K),K=1,NION)
     *             ,' WSOSMZ=',(WSOSMZ(K),K=1,NZREC)
      DO K=1,NZREC
        ZSOURC(K) = ZRECYC(K)*WSOUR1
C       QUESTO CHECK DOVREBBE CONSIDERARWE ANCHE LA SORGENTE XY, MA ...
        IF(ZSOURC(K).GT.0.0 .AND. WSOSMZ(K).LE.0.0) THEN
          WRITE(IUERR,2662) K,ZSOURC(K),WSOSMZ(K)
 2662     FORMAT(/' **** ERROR: K=',I2,' ZSOU=',1P,E12.3,' WSZ=',E12.3)
          CALL EXITN(1)
        ENDIF
        IF(WSOSMZ(K).GT.0.0) THEN
          IF(I3D.NE.0)
     *    WRITE(IUERR, 2665 ) ZSOURC(K),' PARTS/SEC'
 2665   FORMAT(//' //OZ SOURCE OF RECYCLING IMP. NEUTRALS   ',1PE10.3,A
     *          /' --------------------------------------')
          IF(I3D.EQ.0)
     *    WRITE(IUERR, 2665 ) ZSOURC(K),' PARTS/(SEC*CM)'
        ENDIF
      ENDDO
C
C     SOURCE DISTRIBUTED UPON SURFACES IN XY-PLANE WITHOUT HE DISTRIBUT.
C     --------------------------------------------
 2690 CONTINUE
      WSOUR2=1.0-WSOUR1
C     WEIGHT OF THE SOURCE DISTRIBUTED UPON SURFACES XY
      IF(WSOUR2.LE.0.0) GO TO 2790
C
      IF(.TRUE.) THEN
        WRITE(IUERR,*) 'WSOS3D -> WSOSUM() NOT YET IMPLEMENTED'
        CALL EXITN(1)
      ENDIF
      NSOUXV=NSOUXY
      READ(IN, 10 ) NSOUXY
      IF(NSOUXY.LE.MSOUXY .AND. NSOUXY.GE.NSOUXV) GO TO 2710
      WRITE(IUERR, 2700 )
 2700 FORMAT(/' ***** ERROR: TOO MANY SOURCE SURFACES')
      CALL EXITN(1)
 2710 WRITE(IOUT, 2720 )
 2720 FORMAT(//' SOURCE UPON SURFACES IN XY-PLANE')
      WSOS3D=0.0
      DO K=1,NZREC
        WSOSMZ(K)=0.0
      ENDDO
      WRITE(IOUT, 2730 )
 2730 FORMAT(/' TARGET 2D-REG.    Z',6X,'COSW3 SHEATH TEMP.',
     * ' INTENSITY   EMBEDDING QUADRANGLE')
      DO 2770 L=1,NSOUXY
      READ(IN, 2740 ) WSOUXY(L),ISOUXY(L),HSOUXY(L),DSOUXY(L),TSOUXY(L)
     *               ,PUFFXY(L)
 2740 FORMAT(E6.0,I6,4E6.0)
      READ(IN, 20 ) (CSOUXY(K,L),K=1,8)
C
C     WSOUXY = SOURCE WEIGHT ON XY-SURFACES
C     ISOUXY = 2D REGION INDEX
C     HSOUXY = LEVEL OF SOURCE SURFACE. CAUTION: GIVE THIS LEVEL SO THAT
C              SOURCE POINT IS IN PLASMA (E.G., IF DOWNWARDS, THEN
C              LEVEL IS TO BE HIGHER THAN WALL BELOW)
C     DSOUXY = DIRECTION COSINE OF THE ION HITTING NORMALLY THE SURFACE
C              (ONLY +1 OR -1 ALLOWED)
C     TSOUXY = SHEATH TEMPERATURE
C     CSOUXY(8)=COORDINATES OF VERTICES (COUNTERCLOCKWISE)
C              OF A QUADRANGLE EMBEDDING THE 2D REGION (FOR SAMPLING)
      IT=NSEGS+L
      WRITE(IOUT, 2750 )IT,ISOUXY(L),HSOUXY(L),DSOUXY(L),TSOUXY(L),
     * WSOUXY(L),CSOUXY(1,L),CSOUXY(2,L)
 2750 FORMAT(I5,I7,1PE13.3,0PF5.1,1PE12.3,E12.3,1X,2E11.3)
      WRITE(IOUT, 2760 ) (CSOUXY(K,L),K=3,8)
 2760 FORMAT(55X,1P,2E11.3)
      CALL CHKPOL(4,CSOUXY(1,L),IERR)
      WSOS3D=WSOS3D+WSOUXY(L)
      WSOUXY(L)=WSOS3D
 2770 CONTINUE
      DO 2780 L=1,NSOUXY
 2780 WSOUXY(L)=WSOUXY(L)/WSOS3D
C
 2790 CONTINUE
C
      NTARG=NSEGS+NSOUXY
C
      IF(SRECYC.LT.0.0) THEN
        READ(IN,25) SRECYC
        IF(I3D.NE.0) THEN
          WRITE(IUERR,2400) SRECYC,' PARTS/SEC'
        ELSE
          WRITE(IUERR,2400) SRECYC,' PARTS/(CM*SEC)'
        ENDIF
      END IF
C
C     SORGENTE PER GEOMETRIA COMBINATORIA
C     ----------------------------------
      IF(.TRUE.) GO TO 2846
      IF(NRTRU.LE.MAXSEF) GO TO 2800
      IDIAGN=22
      GO TO 3140
C                        COSTRUISCE WSEF E CONTROLLA BOUNDARY
 2800 DO 2845 IR=1,NRTRU
      WSEF(IR)=0.0
      IREG=MASTER(LKOR+IR)
      IF(WREG(IREG).LE.0.) GO TO 2845
      IF(ASTER(LVOL+IR).GT.0.0) GO TO 2840
C     L'ISTRUZIONE SEGUENTE SERVE PER LA REIEZIONE DI SORGENTE
C     QUANDO LA REGIONE E'COSTITUITA DA UN'UNICA SOTTOREGIONE:
C     IL PROGRAMMA NON E' IN GRADO DI CALCOLARE LA SUA AREA
C     (CHE RISULTA UGUALE A 0 -CFR TEST PRECEDENTE), MA LE VIENE
C     IMPOSTO IL PESO DELLA REGIONE. LA SCELTA DEL PUNTO AVVERRA'
C     MEDIANTE REIEZIONE. VIENE IMPOSTA UN'AREA FITTIZIA PER
C     EVITARE ARRESTO IN S.R. HOWE.
      IF(MASTER(LNUMR+IREG).EQ.1) GO TO 2820
      WRITE(IUERR, 2810 ) IREG
 2810 FORMAT(/' ERROR: REJECTION SOURCE REQUESTED IN UNCONNECTED 2-D RE
     *GION',I4)
      CALL EXITN(1)
 2820 ASTER(LVOL+IR)=1.E-30
      WSEF(IR)=WREG(IREG)
      WRITE(IUERR, 2830 ) IREG
 2830 FORMAT('0WARNING: SOURCE BY REJECTION IN 2-D REGION',I4)
      GO TO 2850
 2840 AREA=ASTER(LAREA+IREG)
      WSEF(IR)=WREG(IREG)*ASTER(LVOL+IR)/AREA
 2845 CONTINUE
C
 2846 CONTINUE
C
      HHESRC=SRECYC
      IF(IRECO.EQ.0) GOTO 2860
C
C     RECOMBINATION SOURCE
C     --------------------
C                         E' FATTA NELL'IPOTESI DI UNA SOLA SPECIE.
C                         NEL CASO DI PIU' SPECIE BASTA INTRODURRE:
C                         1) UN CHECK CHE ELIMINI HE;
C                         2) IL CALCOLO DEL TIPO DI NEUTRO IDROGENOIDE.
C                            (LE FORMULE NON CAMBIANO)
 2850 CONTINUE
CW    WRITE(IOUT,2851)
C2851 FORMAT(//' NEUTRALS ARE PRODUCED BY ELECTRON RECOMBINATION'/
CW   *         ' -----------------------------------------------')
C
      IF(I3D.NE.0) THEN
C       CORRESPONDENCE IREG3D --> IREG2D
        DO IREG3D=1,KREG3D
          KO3D2D(IREG3D)=0
        ENDDO
        DO K=IR2DST,KREG
          DO IZ=1,NZETA
            IREG3D=MASTER(KSXY3D+(IZ-1)*KREG+K)
            KO3D2D(IREG3D)=K
          ENDDO
        ENDDO
      ELSE
        DO IREG3D=1,KREG3D
C         (IREG3D=IREG)
          KO3D2D(IREG3D)=IREG3D
        ENDDO
      ENDIF
C     CORRESPONDENCE IREG2D --> IR IF THERE IS ONLY ONE
      DO IREG=1,KREG
        KO2DIR(IREG)=0
      ENDDO
      DO IR=1,NRTRU
        IREG=MASTER(LKOR+IR)
        IF(KO2DIR(IREG).EQ.0) THEN
C         FOUND FOR THE FIRST TIME
          KO2DIR(IREG)=IR
        ELSE
C         ALREADY FOUND. REJECT
          KO2DIR(IREG)=-1
        ENDIF
      ENDDO
C     SNVOL: SR(IREG3D=1:KREG3D,ION=1),SR(IREG3D=1:KREG3D,ION=2),..
      SNOLD=0.0
      DO 2856 ION=1,NION
        SNVLD=0.0
        DO 2855 IR=1,KREG3D
          SNV(IR,ION)=SNVLD
          LOC=(ION-1)*KREG3D+IR
          SNVOL(LOC) = SNOLD
          IF(IR.LT.IR3DST) GOTO 2855
          IF(IBOUND(IR).NE.0) GO TO 2855
C         IF ION <> H ISOTOPE
          IF(TABLE(LABINT(ION),4).GT.1.1) GOTO 2855
          DE=DENSE(IR)
          CALL RECSIG(TEMPE(IR),DE,SIGVRC,IXS(5),IHYR,IDYR,USADAS)
          DI=DENSI(IR,ION)
          SNV(IR,ION)= SNOLD + DI*DE*SIGVRC*AREAD(IR)
          SNVLD = SNV(IR,ION)
          SNVOL(LOC) = SNOLD + DI*DE*SIGVRC*AREAD(IR)
          SNOLD = SNVOL(LOC)
 2855   CONTINUE
 2856 CONTINUE
C     MODIFY PERC(ION)
      BUFFER(1)=SNVOL(KREG3D)
      SUM=SRECYC*PERC(1)+BUFFER(1)
      DO I=2,NION
        BUFFER(I)=SNVOL(KREG3D*I)-BUFFER(I-1)
        SUM=SUM+SRECYC*PERC(I)+BUFFER(I)
      ENDDO
      DO I=1,NION
        TRAN = SRECYC*PERC(I)+BUFFER(I)
C       (G(I)+R(I)) / SUM(G+R)   PROB. OF STARTING THIS NEUTRAL
        PERC(I)= TRAN/SUM
C        G(I)/(G(I)+R(I))  GIVEN THE NUTRAL, PROB. OF RECYCLING
        PRORCL(I)=SRECYC*PERC(I)/TRAN
      ENDDO
      SRECOM=SNVOL(KREG3D*NION)
      WRITE(IUERR, 1600 ) ' ION RECYC+RECOMB INTENSITIES'
     *               ,(SYMB(I),(SRECYC+SRECOM)*PERC(I),I=1,NION)
      WRITE(IUERR, 1600 ) ' ION RECYC/(RECYC+RECOM) FRACTIONS'
     *               ,(SYMB(I),PRORCL(I),I=1,NION)
C     NORMALISE SNVOL SO THAT JUST ONE RANDOM NUMBER
      IF( SRECOM.NE.0.00E+00 ) THEN
          DO LOC=1,KREG3D*NION
             SNVOL(LOC)=SNVOL(LOC)/SRECOM
          ENDDO
          DO ION=1,NION
            TRAN=SNV(KREG3D,ION)
            IF(TRAN.GT.0.0) THEN
              DO IR=1,KREG3D
                SNV(IR,ION)=SNV(IR,ION)/TRAN
              ENDDO
            ENDIF
          ENDDO
      END IF
      IF(I3D.NE.0) THEN
        WRITE(IUERR, 2858 )SRECOM,' PARTS/SEC'
 2858   FORMAT(//' SOURCE OF RECOMBINATION NEUTRALS   ',1PE10.3,A
     *          /' --------------------------------')
      ELSE
        WRITE(IUERR, 2858 )SRECOM,' PARTS/(SEC*CM)'
      END IF
      HHESRC=SRECYC+SRECOM       ! HHESRC MAY CONTAIN HELIUM
C
 2860 CONTINUE
C
C     INFORMATION ABOUT WALL SCORES AND HEAVY IMPURITIES
C     --------------------------------------------------
      IF(IONTOW.EQ.1) THEN
        WRITE(IUERR, 2870 )
 2870   FORMAT(//' N.B.  I) RESULTS CONCERNING WALLS DO NOT INCL. SOUR
     *  CE ION CONTRIBUTIONS')
      ELSE
        WRITE(IUERR, 2880 )
 2880   FORMAT(//' N.B.  I) RESULTS CONCERNING WALLS INCL. SOURCE ION
     *  CONTRIBUTIONS')
      ENDIF
      WRITE(IOUT, 2890 ) DECIMA
 2890 FORMAT(/' N.B. II) HISTORIES OF INTRINSIC IMPURITIES ARE SIMULATED
     * WITH PROBABILITY',F7.4)
C
      LIGHT=0
      DO 2900 I=IR3DST,KREG3D
      IF(ISTARG(I).NE.0) LIGHT=1
 2900 CONTINUE
      IF(LIGHT.EQ.0) GO TO 2940
      WRITE(IOUT, 2910 )
 2910 FORMAT(/' AVERAGE CHARGE OF HEAVY IONS ENTRAINED IN THE PLASMA'/)
      NUSTAR=NIONPM+1
      IF(NUSTAR.GT.NCOM)GO TO 2940
      DO 2930 I=NUSTAR,NCOM
      Q=TABLE(LABINT(I),9)
      IF(CHARGE(I).NE.0.0) Q=CHARGE(I)
      WRITE(IOUT, 2920 )EXTSYM(I),Q
 2920 FORMAT(3X,A4,F5.0)
 2930 CONTINUE
C
 2940 CONTINUE
C                          SPLITTING
      DO 2950 K=1,KREG3D
      WPESO(K)=1.0
 2950 CONTINUE
      IF(ISFLAG.EQ.0) GO TO 2980
      READ(IN, 20 ) (WPESO(K),K=1,KREG3D)
      DO 2960 K=1,KREG3D
      IF(WPESO(K).LE.0.0) WPESO(K)=1.0
 2960 CONTINUE
      IF(KINDPR.GT.0)
     *WRITE(IOUT, 2970 ) (K,WPESO(K),K=1,KREG3D)
 2970 FORMAT(/' SPLITTING WEIGHTS OF REGIONS'/
     * (I4,1PE10.3,I4,E10.3,I4,E10.3,I4,E10.3,I4,E10.3))
 2980 CONTINUE
C
      CALL WRITIM
C
C
C      EDIT INITIAL PLASMA PROPERTIES
C      ==============================
C      IN TERMS OF CELLS & CHANNELS
C      ============================
C                     RESTRICTIONS: 1) IF CHANNELS ARE DEFINED THEN
C                     IT IS COMPULSORY THAT ZONES IDENTIFIED AS
C                     CELLS CONTAIN ONLY ONE REGION; 2) ONLY SOURCE
C                     ON XY-SEGMENTS
C
      IF(NCHAN.EQ.0) GO TO 3120
      WRITE(IOUT, 2990 )
 2990 FORMAT('1PLASMA DATA IN TERMS OF CHANNELS AND CELLS'
     *,/1X,42('=')/)
C                        ONLY IF THE SOURCE IS
C                        ON XY-SEGMENTS
      IF(NSOUXY.GT.0) GO TO 3160
C                     RECONSTRUCTION OF WSOSEG(ISEGS) IN BUFFER(ISEGS)
      DO I=1,NSEGS
        BUFFER(I)=0.0
      ENDDO
      DO I=1,NSEGS
        DO J=1,NION
          IF(I.EQ.1) THEN
            WSOIM1=0.0
          ELSE
            WSOIM1=WSOSEG(I-1,J)
          ENDIF
          BUFFER(I)=BUFFER(I)+(WSOSEG(I,J)-WSOIM1)*PERC(J)
        ENDDO
      ENDDO
C
C                     LOOP ON CHANNELS
      DO 3100 I=1,NCHAN
      IS=ICHTAR(I)
      IF(IS.EQ.0)GO TO 3030
      SUM=BUFFER(IS)*SRECYC
      WRITE(IOUT, 3020 ) I,SOTEMP(IS),SUM
 3020 FORMAT(/' CHANNEL',I3,'    SHEATH TEMPERATURE=',1PE12.5,
     * '    PARTICLE FLOW=',E12.5/)
      GO TO 3050
C                     IF NO TARGET IS ASSOCIATED TO CHANNEL
 3030 WRITE(IOUT, 3040 ) I
 3040 FORMAT(/' CHANNEL',I3/)
C                     LOOP ON CELLS OF THE CHANNEL
C                     ('CELL' I IS THE I-TH ZONE OF THE CHANNEL)
 3050 JMAX=NZCHAN(I)
C                     FIND REGION INDEX CORRESPONDING TO CELL
      DO 3090 J=1,JMAX
      IZO=IZCHAN(I,J)
      DO 3060 L=IR3DST,KREG3D
      IR=L
      IF(IZONA(L).EQ.IZO) GO TO 3070
 3060 CONTINUE
 3070 WRITE(IOUT, 3080 )I,J,DENSE(IR),TEMPE(IR),TEMPI(IR),DRIFTV(IR)
 3080 FORMAT(4X,'CELL ',I3,',',I2,'   NE=',1PE11.5,'   TE=',E11.5,'   TI
     *=',E11.5,'   MC=',E11.5)
 3090 CONTINUE
C
 3100 CONTINUE
      IF(I3D.NE.0) WRITE(IOUT, 3110 ) SRECYC
 3110 FORMAT(//' TOTAL FLOW OF PLASMA IONS=',1PE12.5,' PARTS/SEC')
      IF(I3D.EQ.0) WRITE(IOUT, 3112 ) SRECYC
 3112 FORMAT(//' TOTAL FLOW OF PLASMA IONS=',1PE12.5,' PARTS/(SEC*CM)')
      WRITE(IOUT,'(/)')
C
 3120 CONTINUE
C
C
C     PHYSICAL PRESET
C     ---------------
C
C                       SET UP LOTZ & BELL COEFFICIENTS
      IF(ISETUP.EQ.0)
     &CALL NIMBXS( TLOTZ(1,1) , TBELL(1,1) )
C
C                       ATOM-ELECTRON INTERACTION
      CALL PREIOZ
C                       MOLECULE-ELECTRON INTERACTION
      DO 3123 I=1,NCOM
        IF(IATOM(I).EQ.I) GO TO 3123
        CALL PREMOL
        GO TO 3125
 3123 CONTINUE
 3125 CONTINUE
C                       SPUTTERING FROM WALLS
      IF(ISETUP.EQ.0)
     &CALL PRESPU(1,IDUM)
C                       C.X.
      CALL PRECX
C                       E.S.
      CALL PREEL
C
C     RETURN TO CALLING PROGRAM
C     -------------------------
      READ(IN, 90 ,END=3135) (COMM(K),K=1,20)
      WRITE(IOUT,'(//,25X,''MISCELLANEOUS INFORMATION'')')
      WRITE(IOUT,180) (COMM(K),K=1,20)
 3134 READ(IN, 90 ,END=3135) (COMM(K),K=1,20)
      IF(COMM(1).EQ.CEND) GOTO 3135
      WRITE(IOUT,180) (COMM(K),K=1,20)
      GOTO 3134
 3135 RETURN
C
C     USCITA PER ERRORE
C     -----------------
 3140 CALL DIAGN(IDIAGN)
      CALL EXITN(1)
C
C     NORMAL JOB END
C     --------------
 3150 CONTINUE
      CALL EXITN(0)
      RETURN
C
 3160 CONTINUE
      WRITE(IUERR,*) ' 3160 - WHY THIS ROUTE?'
      CALL EXITN(1)
C OLD GOTO 3150
      RETURN
C
      ENTRY VERNIM(VERSON)
      VERSON = VERSIO
      RETURN
      END
C.......................................................................
C.......................................................................
      SUBROUTINE EXITN(CODE)
C
      INTEGER CODE
C
      COMMON/IOFILE/IN,IOUT,IUERR,IARK,IPUNCH,IGMT,ITRMT,ITAPIO(2)
C
      CHARACTER*28 A
CX    DIMENSION A(7)
C
      CALL TODAY(A,N)
CX    IF(CODE.EQ.0) WRITE(IOUT, 10 ) A(2),A(3),A(5),A(6),A(7)
      IF(CODE.EQ.0) WRITE(IOUT, 10 ) A(5:8),A(9:12),A(17:20)
     &                             , A(21:24),A(25:28)
   10 FORMAT(/' *NIMBUS* JOB ENDED NORMALLY AT ',2A4,' ON ',3A4)
CX    IF(CODE.NE.0) WRITE(IUERR, 20 ) A(2),A(3),A(5),A(6),A(7)
      IF(CODE.NE.0) WRITE(IUERR, 20 ) A(5:8),A(9:12),A(17:20)
     &                              , A(21:24),A(25:28)
   20 FORMAT(/' *NIMBUS* JOB ABORTED AT ',2A4,' ON ',3A4)
      CALL GENEXIT(15)
      END
C.......................................................................
C.......................................................................
      SUBROUTINE LEGEND
C
      COMMON/IOFILE/IN,IOUT,IUERR,IARK,IPUNCH,IGMT,ITRMT,ITAPIO(2)
C
      WRITE(IOUT, 10 )
   10 FORMAT(' LEGEND'/1X,6('-'))
      WRITE(IOUT, 20 )
   20 FORMAT('0    INITIALISER : THE FIRST RANDOM INTEGER')
      WRITE(IOUT, 30 )
   30 FORMAT('            FLUX : THE AVERAGE SCALAR FLUX DUE TO THE SOUR
     *CE'/
     *       '                   (NEUTRALS PER SQUARE CENTIMETER AND PER
     * SECOND)')
C     WRITE(IOUT, 50 )
C  50 FORMAT('            S.D. : THE STANDARD DEVIATION')
      WRITE(IOUT, 40 )
   40 FORMAT('             2*X : A MOLECULE WITH TWO EQUAL ATOMS X (X=H,
     *D,T,DT).'/
     *19X,'THE FOLLOWING MOLECULAR REACTIONS (WITH ELECTRONS) ARE CONSID
     *ERED:'/
     *19X,'1)   2*X --> X + X               DISSOCIATION;'/
     *19X,'2)   2*X --> 2*X+ --> (X+) + X   IONIZATION FOLLOWED IMMEDIAT
     *ELY BY A DISSOCIATIVE IONIZATION;'/
     *19X,'3)   2*X --> (X+) + X            DISSOCIATIVE IONIZATION.'/
     *19X,'REACTIONS 2) AND 3) ARE COLLAPSED INTO A SINGLE DISSOCIATIVE
     * IONIZATION REACTION.'/
     *19X,'THE MOLECULAR FRACTION UNDERGOING REACTION 1) IS EDITED UNDER
     * THE HEADING "DISSOCIATED".'/
     *19X,'THE MOLECULAR FRACTION UNDERGOING REACTIONS 2)+3) IS EDITED U
     *NDER THE HEADING "IONIZED". NOTE THAT'/
     *19X,'"IONIZATION" OF THE NEUTRAL MOLECULE 2*X MEANS PRODUCTION OF
     *THE IONIZED ATOM X+')
      WRITE(IOUT, 50 )
   50 FORMAT('    SLICE VOLUME : FOR 2-D GEOMETRY,THE VOLUME OF A SLICE
     *WITH UNITARY HEIGHT.'/
     *19X,'FOR 3-D GEOMETRY , THE VOLUME OF THE SLICE.'/
     *19X,'NOTE THAT ALL QUANTITIES RELATED TO THE UNIT VOLUME (E.G. FLU
     *X, DENSITY) ARE REFERRED TO THIS "SLICE VOLUME"'/
     *19X,'AND DEPEND ON THE BOUNDARY CONDITION ADOPTED.')
      WRITE(IOUT, 60 )
   60 FORMAT('0    N.B.  1) GEOMETRIC DIMENSIONS ARE IN CENTIMETERS.'/
     *       '           2) ENERGIES AND TEMPERATURES ARE IN EV.'/
     *       '           3) MOMENTA ARE IN G*CM/SEC.'/
     *       '           4) CELL(I,J) : I=CHANNEL INDEX.')
      RETURN
      END
C.......................................................................
C.......................................................................
      SUBROUTINE DIAGN(IDIAGN)
C
      COMMON/IOFILE/IN,IOUT,IUERR,IARK,IPUNCH,IGMT,ITRMT,ITAPIO(2)
C
      IF(IDIAGN.LE.0 .OR. IDIAGN.GT.23) THEN
        WRITE(IUERR, 5 ) IDIAGN
    5   FORMAT(//' *** UNIDENTIFIED INPUT ERROR NO.',I3)
        CALL EXITN(1)
      ENDIF
      WRITE(IUERR, 10 )
   10 FORMAT(//' ***INPUT ERROR***'//)
      GO TO( 20 , 40 , 60 , 80 , 100 , 120 , 140 , 160 , 180 , 200 , 220
     * , 240 , 260 , 280 , 300 , 320 , 340 , 360 , 380 , 400 , 420 , 440
     * , 460), IDIAGN
   20 WRITE(IUERR, 30 )
   30 FORMAT(' WRONG PRINT-OUT STEP')
      RETURN
   40 WRITE(IUERR, 50 )
   50 FORMAT(' ZONE SPECIFICATION IS MISSING')
      RETURN
   60 WRITE(IUERR, 70 )
   70 FORMAT(' TOO MANY SURFACE SOURCE SEGMENTS')
      RETURN
   80 WRITE(IUERR, 90 )
   90 FORMAT(' TOO MANY WALL SEGMENTS')
      RETURN
  100 WRITE(IUERR, 110 )
  110 FORMAT(' WRONG NUMBER OF AXIAL SOURCE POINTS')
      RETURN
  120 WRITE(IUERR, 130 )
  130 FORMAT(' TOO MANY REGIONS')
      RETURN
  140 WRITE(IUERR, 150 )
  150 FORMAT(' WRONG AXIAL SOURCE MESH')
      RETURN
  160 WRITE(IUERR, 170 )
  170 FORMAT('                      ')
      RETURN
  180 WRITE(IUERR, 190 )
  190 FORMAT('                      ')
      RETURN
  200 WRITE(IUERR, 210 )
  210 FORMAT('                      ')
      RETURN
  220 WRITE(IUERR, 230 )
  230 FORMAT('                      ')
      RETURN
  240 WRITE(IUERR, 250 )
  250 FORMAT('                      ')
      RETURN
  260 WRITE(IUERR, 270 )
  270 FORMAT(' TOO MANY ZONES')
      RETURN
  280 WRITE(IUERR, 290 )
  290 FORMAT(' TOO MANY ENERGY GROUPS')
      RETURN
  300 WRITE(IUERR, 310 )
  310 FORMAT(' WRONG OUTPUT ENERGY MESH')
      RETURN
  320 WRITE(IUERR, 330 )
  330 FORMAT('                      ')
      RETURN
  340 WRITE(IUERR, 350 )
  350 FORMAT('                      ')
      RETURN
  360 WRITE(IUERR, 370 )
  370 FORMAT(' WRONG NUMBER OF COMBINATORIAL REGIONS')
      RETURN
  380 WRITE(IUERR, 390 )
  390 FORMAT(' TOO MANY COMMENT CARDS')
      RETURN
  400 WRITE(IUERR, 410 )
  410 FORMAT('                      ')
      RETURN
  420 WRITE(IUERR, 430 )
  430 FORMAT(' SOURCE IN 2-D REGION 1')
      RETURN
  440 WRITE(IUERR, 450 )
  450 FORMAT(' TOO MANY COMBINATORIAL SOURCE SUBREGIONS')
      RETURN
  460 WRITE(IUERR, 470 )
  470 FORMAT(' WRONG RECOMBINATION OPTION')
      RETURN
      END
C.......................................................................
C.......................................................................
      SUBROUTINE WRITIM
C
C     PRINTS CPU TIME ELAPSED SINCE FIRST CALL
C
      SAVE
C
C     SAVE COMMAND FOR CRAY-2: FORTRAN 77 ASSUMES THAT VALUES OF
C          LOCAL VARIABLES (NOT APPEARING IN CALLING SEQUENCE,DATA
C          AND/OR COMMON) ARE LOST WITHIN TWO SUCCESSIVE INVOCATION OF
C          A ROUTINE, UNLESS THE SAVE COMMAND IS USED
C
      COMMON/IOFILE/IN,IOUT,IUERR,IARK,IPUNCH,IGMT,ITRMT,ITAPIO(2)
C
      LOGICAL ISENT
      DATA ISENT/.TRUE./
      DATA NSTART/3 600 000/
      IF(ISENT) GO TO 20
      CALL TTIME(N)
      NSEC=(NSTART-N)/100
      MIN=NSEC/60
      NSEC=NSEC-MIN*60
      WRITE(IUERR, 10 ) MIN,NSEC
   10 FORMAT(/80X,'C.P.U. TIME',I4,1H',I2,1H")
      RETURN
   20 CALL STIME(NSTART)
      ISENT=.FALSE.
      NSEC=0
      RETURN
      END
C.......................................................................
C.......................................................................
      SUBROUTINE GETKOR(S,I,ICHKW,I11)
C----------------------------------(SEE SYMBOLS MEANING IN S.R. INPUT)
      INCLUDE 'pnimb'
      PARAMETER (MRG=MRGX ,MZN=MRG-2 ,MCH=41 ,MCC=MCCX, MWAC=13 )
      PARAMETER (MBS=MBSX ,MSD=MBS   ,MSC=2 )
      PARAMETER (MIO=3    ,MCP=6)
      PARAMETER (MEG=5    ,MIXS=10   ,MLEAK=9)
C---------------------------------------------------
C
C
      COMMON/IOFILE/IN,IOUT,IUERR,IARK,IPUNCH,IGMT,ITRMT,ITAPIO(2)
C
C     GIVEN THE ALPHANUMERIC SYMBOL S, RETURNS THE INTERNAL INDEX
C     OF THE CORRESPONDING PLASMA COMPONENT
C
      PARAMETER (NCT=24,MKES=4)
      COMMON/CTAB0/TABLE(NCT,11),IZLOZ(0:100)
      COMMON/CTABLE/SPUTAB(NCT,NCT)
     *,LABINT(MCP),LABEXT(NCT),IXS(MIXS),ITRIM
     *,NIONPM,MCX,MOLEC(MCP),IATOM(MCP),EXTSYM(MCP),QESP(NCT,NCT)
     *,EB(NCT),QCOEF(NCT),TLOTZ(NCT,26),CXRMAX(5,MRG),ESRMAX(MKES,MRG)
     *,TBELL(NCT,26),ITAGS(NCT,NCT,2)
C
      DO 10 K=1,NCT
        I=K
        IF(S.EQ.TABLE(I,1))GO TO 30
   10 CONTINUE
      WRITE(IUERR, 20 ) S
   20 FORMAT(' UNIDENTIFIED ION/NEUTRAL ',A4)
      CALL EXITN(1)
   30 CONTINUE
C       FORCE A RECYC. IMPURITY TO BE TREATED AS A METAL?
      IF(I11.EQ.+1 .AND. TABLE(I,11).EQ.0.0) THEN
        WRITE(IUERR,'(''WARNING: '',A4,'' REDEFINED AS HEAVY'')') S
        TABLE(I,11)=1.0
C       FORCE A METAL TO BE TREATED AS A RECYC. IMPURITY?
      ELSE IF(I11.EQ.-1 .AND. TABLE(I,11).NE.0.0) THEN
        WRITE(IUERR,'(''WARNING: '',A4,'' REDEFINED AS RECYC.'')') S
        TABLE(I,11)=0.0
      ENDIF
      IF(ICHKW.EQ.0) GOTO 50
      IF(TABLE(I,11).NE.0.0) GOTO 50
      WRITE(IUERR,'(/''***** WRONG WALL MATERIAL '',A4)') S
      CALL EXITN(1)
   50 RETURN
      END
C.......................................................................
C.......................................................................
      SUBROUTINE GENI(LLAST,LMA,KINDPR,ICHKP)
      IMPLICIT REAL*8 (A-H,O-Z)
C----------------------------------(SEE SYMBOLS MEANING IN S.R. INPUT)
      INCLUDE 'pnimb'
      PARAMETER (MRG=MRGX ,MZN=MRG-2 ,MCH=41 ,MCC=MCCX, MWAC=13 )
      PARAMETER (MBS=MBSX ,MSD=MBS   ,MSC=2 )
      PARAMETER (MIO=3    ,MCP=6)
      PARAMETER (MEG=5    ,MIXS=10   ,MLEAK=9)
C---------------------------------------------------
      COMMON/CGEOM2/LLOCRE,LNUMBO,LIROR,LKR1,LKR2,LDATA,NUMR,LBASE,LTMA
     *             ,LLOCBO,IDBG,KLOOP,PINF,LKO,NOA,IST,NOREG,LVOL,LAREA
     *             ,LNUMR,LAIRC,LVOLTR,LLASTG,IRWGMT,NRTRU
      COMMON/GEOMR/NASCR,IREFL,DUMD(4),IDUMS(3)
      PARAMETER ( NWCOMB=NWCOMX )
      COMMON/COMBIN/MA(NWCOMB)
      REAL   FPD(NWCOMB)
      EQUIVALENCE (MA(1),FPD(1))
      DIMENSION  IBIAS(5),ITY(8)
      CHARACTER*2 IIBIAS(12)
      DIMENSION JTY(12)
      DIMENSION XGRID(16,16),YGRID(16,16)
C  1   2   3   4   5   6   7   8
C CIR REC HEX POL TSE END GRD QDR
C -3  -2  -1  100 -1
C
      COMMON/IOFILE/IN,IOUT,IUERR,IARK,IPUNCH,IGMT,ITRMT,ITAPIO(2)
C
C      BODY DEFINITION:
      DATA IBIAS/ -3,-2,-1,100,-1/
      DATA ITY/3HCIR,3HREC,3HHEX,3HPOL,3HTSE,3HEND,3HGRD,3HQDR/
C      REGION DEFINITION:
      CHARACTER*1 BCD(4),STAR,END
      CHARACTER*2 IOR,MINUS1,MINUS2
      DATA IOR,STAR,END/'OR','*','D'/
C     STAR = ' ***'   CONTINUATION FLAG
C     END  = ' END'   END OF REGION DEFINITION
      DATA MINUS1,MINUS2/'- ',' -'/
C
      PINF=1.0E+20
      KLOOP=0
      IST=0
      READ(IN, 10 ) NUMB,NUMR,IDBG,IREFL,ICHKP,IRWGMT,NASCP,IUPDWN
   10 FORMAT(9I5)
C
C     IRWGMT = 0  NEITHER READ NOR WRITE GEOMETRY
C            = 1  READ ONLY
C            = 2  READ AND WRITE
C            = 3  WRITE ONLY
C
      IF(IRWGMT.GE.1 .AND. IRWGMT.LE.2) THEN
        CALL RWGENI(1,IERR)
        IF(IERR.NE.0) THEN
          WRITE(IUERR,*) ' ERROR IN READING GEOMETRY UNIT'
          CALL EXITN(1)
        ENDIF
        LLAST=LLASTG
        RETURN
      ENDIF
C       IREFL= -N :  LA REGIONE N E' DI RIFLESSIONE
C       IREFL=  0 :  FUGA  (L'INDICE DI REGIONE DI FUGA
C                    SARA' TRATTATO NEL PROGRAMMA CHIAMANTE)
C                    (S.R. PILS E CHIAMATA A SETRFL -VEDI SOTTO-
C                     ASSUMONO FUGA DALLA REGIONE 1)
C       IREFL= +N :  LA REGIONE N E' DI PERIODICITA'
C
C       ICHKP=0 :S.R.CHKPOL STOPS CALCULATION IF POL.CONCAVE OR CLOCKWIS
C         "  =1    "     "    ONLY ISSUES A WARNING MESSAGE
C     CALL SCHKPL(ICHKP)
      CALL SCHKPL(1)
      IF(KINDPR.GE.2)
     *WRITE(IOUT, 20 )
   20 FORMAT('1',43X,'COMBINATORIAL GEOMETRY'/)
      IF(NUMR.LE.0) NUMR=MRG
      IF(NUMB.LE.0) NUMB=MRG
      IF(KINDPR.GE.2)
     *WRITE(IOUT, 30 ) NUMR,NUMB
   30 FORMAT(9X,'MAXIMUM NUMBER OF SUBREGIONS ',I4/
     *       9X,'   MAXIMUM NUMBER OF FIGURES ',I4)
      KR2=LMA-NUMR
      KR1=KR2-NUMR
      LKOR=KR1-NUMR
      IROR=LKOR-NUMR
      NUMBOD=IROR-NUMR
      LOCREG=NUMBOD-NUMR
      LOCBOD=LOCREG-NUMB
      LLMAX=LOCBOD
      IALPMX=0
      NUMBMX=NUMB
      LBASE=LLAST+1
      DO 40 I=LBASE,LMA
   40 MA(I)=0
C
      IF(KINDPR.GE.2)
     *WRITE(IOUT, 50 )
   50 FORMAT(//45X,'ELEMENTARY FIGURES'/)
      LL3=0
      NUMB=0
      L2=LBASE
C                    ENTRA UNA FIGURA
   60 N=L2+1
      L1=N+11
      L2=L1+5
C
C     MA(N)= INDICE DELLA FIGURA
C     MA(N+1)= LOOP (VEDI S.R. GG)
C     MA(N+3)= LRI       "
C     MA(N+4)= LRO       "
C     MA(N+2)= ITYPE
C     MA(N+5)  NON USATO
C     MA(N+6)= N+7 = LOCAT (USATO IN S.R. GG) PUNTA AI REALI SEGUENTI
C     FPD(LOCAT  =N+7 )= RIN (PRIMA   VOCE - VEDI S.R. GG)
C     FPD(LOCAT+1=N+8 )= RIN (SECONDA   "       "
C     FPD(LOCAT+2=N+9 )= ROUT (PRIMA    "       "        )
C     FPD(LOCAT+3=N+10)= ROUT (SECONDA  "       "        )
C     FPD(LOCAT+4=N+11)= PRIMO PARAMETRO CHE DEFINISCE LA FIGURA
C     SEGUONO TUTTI GLI ALTRI PARAMETRI
      LL3=LL3+1
   70 READ(IN, 80 ) ITYPE,IALP,(FPD(I),I=L1,L2)
C  80 FORMAT(2X,A3,1X,I4,6E10.0)                          ----- 04/11/92
   80 FORMAT(2X,A3,1X,I4,6E11.0)
C                             CHESS-BOARD ENTERING
      IF(ITYPE.EQ.ITY(7).OR.ITYPE.EQ.ITY(8)) GO TO 90
      GO TO 130
C                       REGULAR (GRD) OR IRREGULAR (QDR) CHESS-BOARD
   90 NAB=FPD(L1)
      NAC=FPD(L1+1)
      IF(ITYPE.EQ.ITY(7)) CALL GRID(NAB,NAC,XGRID,YGRID,KINDPR)
      IF(ITYPE.EQ.ITY(8)) CALL QUADR(NAB,NAC,XGRID,YGRID,KINDPR)
      VERTIC=4.0
      IFIG=IALP-1
      DO 120 J=1,NAC
      DO 120 I=1,NAB
      IFIG=IFIG+1
      IALP=LL3
      IF(KINDPR.GE.2)
     *WRITE(IOUT, 100 )ITY(4),IFIG,VERTIC,L1
  100 FORMAT(2X,A3,1X,I4,1PE15.7,75X,I8)
      MORE=IBIAS(4)
      MA(N)=IFIG
      MA(N+2)=4
      MA(N+6)=L1-4
      MA(LOCBOD+IFIG)=N
      NUMB=NUMB+1
      IALPMX=MAX0(IFIG,IALPMX)
      IF(IFIG.LE.NUMBMX) GO TO 110
      WRITE(IUERR, 190 )
      CALL EXITN(1)
C                       GENERATES AN ELEMENTARY COMPONENT
C                       OF THE CHESS-BOARD
  110 MA(L1)=4
      MORE=MA(L1)*2
      L1=L2+1
      L2=L1+MORE-1
      FPD(L1)=  XGRID(I,J)
      FPD(L1+1)=YGRID(I,J)
      FPD(L1+2)=XGRID(I+1,J)
      FPD(L1+3)=YGRID(I+1,J)
      FPD(L1+4)=XGRID(I+1,J+1)
      FPD(L1+5)=YGRID(I+1,J+1)
      FPD(L1+6)=XGRID(I,J+1)
      FPD(L1+7)=YGRID(I,J+1)
      IF(KINDPR.GE.2)
     *WRITE(IOUT, 250 ) (FPD(K),K=L1,L2)
      CALL CHKPOL(MORE/2,FPD(L1),IERR)
      N=L2+1
      L1=N+11
      L2=L1+5
      LL3=LL3+1
  120 CONTINUE
      GO TO 70
C                    CHESS-BOARD GENERATION ENDED
C
  130 IF(IALP.NE.0) GO TO 140
      IALP=LL3
  140 IF(KINDPR.GE.2)
     *WRITE(IOUT, 150 ) ITYPE,IALP,(FPD(I),I=L1,L2),L1
  150 FORMAT(2X,A3,1X,I4,1P,6E15.7,I8)
      IALPM1=IALP-1
      DO 160 I=1,6
      IF( ITY(I).EQ.ITYPE ) GO TO 180
  160 CONTINUE
      WRITE (IUERR, 170 )  ITYPE,ITY
  170 FORMAT(' ITYPE=',A3,'  DOES NOT EQUAL ANY OF THE FOLLOWING  ',
     * 10(A3,2X) )
      CALL EXITN(1)
  180 IF( I.EQ.6) GO TO 270
      MORE=IBIAS(I)
      MA(N)=IALP
      MA(N+2)=I
      MA(N+6)=L1-4
      MA(LOCBOD+IALP)=N
      NUMB=NUMB+1
      IALPMX=MAX0(IALP,IALPMX)
      IF(IALP.LE.NUMBMX) GO TO 200
      WRITE(IUERR, 190 )
  190 FORMAT(/' TOO MANY FIGURES OR WRONG IDENTIFIER')
      CALL EXITN(1)
  200 CONTINUE
      IF(ITYPE.NE.ITY(2)) GO TO 210
C     REC VERTICES
      XC=FPD(L1)
      YC=FPD(L1+1)
      A=FPD(L1+2)
      B=FPD(L1+3)
      C=FPD(L1+4)
      L1=L2
      L2=L1+8
      FPD(L1+1)=XC+A
      FPD(L1+2)=YC+B
      FPD(L1+3)=XC
      FPD(L1+4)=YC+B
      FPD(L1+5)=XC
      FPD(L1+6)=YC
      FPD(L1+7)=XC+A
      FPD(L1+8)=YC
      GO TO 260
  210 IF(ITYPE.NE.ITY(3)) GO TO 220
C     HEX VERTICES
      XC=FPD(L1)
      YC=FPD(L1+1)
      A=FPD(L1+2)
      B=FPD(L1+3)
      C=FPD(L1+4)
      L1=L2
      L2=L1+12
      FPD(L1+1)=XC+A
      FPD(L1+2)=YC+B
      FPD(L1+3)=XC
      FPD(L1+4)=YC+C
      FPD(L1+5)=XC-A
      FPD(L1+6)=FPD(L1+2)
      FPD(L1+7)=XC-A
      FPD(L1+8)=YC-B
      FPD(L1+9)=XC
      FPD(L1+10)=YC-C
      FPD(L1+11)=FPD(L1+1)
      FPD(L1+12)=FPD(L1+8)
      GO TO 260
C
  220 IF( MORE.LE.0) GO TO 260
      IF(ITYPE.NE.ITY(4)) GO TO 230
      MA(L1)=FPD(L1)
      MORE=MA(L1)*2
  230 CONTINUE
      L1=L2+1
      L2=L1+MORE-1
      READ(IN, 240 ) (FPD(I),I=L1,L2)
C 240 FORMAT( 10X,6E10.3)                                 ----- 04/11/92
  240 FORMAT( 10X,6E11.4)
      IF(KINDPR.GE.2)
     *WRITE(IOUT, 250 ) ( FPD(I),I=L1,L2)
  250 FORMAT(10X,1P,6E15.7)
      IF(ITYPE.NE.ITY(4)) GO TO 260
      CALL CHKPOL(MORE/2,FPD(L1),IERR)
      IF(IERR.NE.0) THEN
C       FLAG NON-CONVEX POLYGON
        MA(N+2)=-MA(N+2)
        IF(KINDPR.LT.2 .OR. IUERR.NE.IOUT) THEN
          WRITE(IUERR, 150 ) ITYPE,IALP,FLOAT(MORE/2)
          WRITE(IUERR,250)(FPD(L1+(I-1)*2),FPD(L1+(I-1)*2+1),I=1,MORE/2)
        ENDIF
      ENDIF
  260 CONTINUE
      GO TO 60
  270 L2=L2-15
      N=L2+1
      IF(KINDPR.GE.2)
     *WRITE(IOUT, 280 ) NUMB
  280 FORMAT(/' NUMBER OF FIGURES',I5)
      IF(NASCP.LT.0) NASCP=IALPM1
      LLOCBO=N-1
      DO 290 K=1,IALPMX
  290 MA(LLOCBO+K)=MA(LOCBOD+K)
      N=LLOCBO+IALPMX+1
C
C END OF BODY DATA
C
      IF(IDBG.NE.2) GO TO 330
      IF(KINDPR.GE.2)
     *WRITE(IOUT, 300 )
  300 FORMAT( 50X,'FPD ARRAY')
      DO 310 I=LBASE,L2,5
      K=I+4
  310 IF(KINDPR.GE.2)
     *WRITE(IOUT, 320 ) I,(FPD(J),J=I,K),K
  320 FORMAT( I8,5E20.7,I8 )
  330 IF(KINDPR.GE.2)
     *WRITE(IOUT, 340 )
  340 FORMAT(//41X,'REGION DEFINITION'/)
      IR=0
      IRT=0
      NAZT=0
      NOREG=0
      NRTRU=0
      IRTRU=-999
C
C     MA(N)= INDICE DI REGIONE (COMUNE ALLE REGIONI DEFINITE CON 'OR')
C     MA(N+1)= INDICE (CON SEGNO) DELLA PRIMA FIGURA DEFINENTE
C     MA(N+2)= LOCAZIONE DELLA FIGURA
C     MA(N+3)= REGIONE IN CUI SI PUO' ENTRARE TRAMITE LE FIGURA
C     MA(N+4)= LOCAZIONE DI UNA COPPIA DI VOCI IL CUI CONTENUTO
C              E' ANALOGO AL PRECEDENTE ED AL PRESENTE
C     SEGUONO QUATTRO LOCAZIONI ANALOGHE PER OGNI FIGURA DEFINENTE
C
  350 K=1
C     KMAX=12                                       <---- UPTO 04/11/92
      KMAX=11
      READ(IN, 360 ) BCD,IALP,NAZ,(IIBIAS(I),JTY(I),I=1,KMAX)
C 360 FORMAT(2X,3A1,I3,I2,12(A2,I3))                <---- UPTO 04/11/92
  360 FORMAT(1X,4A1,I4,I2,11(A2,I4))
      IR1=IR+1
      IF(KINDPR.GE.2)
     *WRITE(IOUT, 370 ) BCD,IALP,NAZ,(IIBIAS(I),JTY(I),I=1,KMAX),IR1
C 370 FORMAT(2X,3A1,I4,I3,12(A2,1X,I3),2X,'R',I3)   <---- UPTO 04/11/92
  370 FORMAT(1X,4A1,I5,I3,11(A2,1X,I4),2X,'R',I4)
      DO 380 I=1,KMAX
        IF(IIBIAS(I).EQ.MINUS1) JTY(I)=-JTY(I)
        IF(IIBIAS(I).EQ.MINUS2) JTY(I)=-JTY(I)
  380 CONTINUE
C     DOES THIS RECORD CONTINUE DEFINITION OF PREVIOUS REGION?
      IF(BCD(4).EQ.STAR) GO TO 420
C     END OF REGION DEFINITION?
      IF(BCD(4).EQ.END) GO TO 460
      IRT=IRT+1
      IRTRU=IALP
      IF(IALP.LE.0) IRTRU=IRT
      IREG=IBCD(BCD,4)
      IF(IREG.EQ.0) IREG=IRTRU
      NOREG=MAX0(NOREG,IREG)
      MA(LKOR+IRTRU)=IREG
      NRTRU=MAX0(NRTRU,IRTRU)
CW    WRITE(6,*) 'LKOR=',LKOR,' IRTRU=',IRTRU,' IREG=',IREG
      IF(NAZ.LE.0) NAZ=5
      NAZT=NAZT+NAZ
      IALP=IR1
  390 IR=IR+1
      IF(IR.LE.NUMR) GO TO 410
      WRITE(IUERR, 400 )
  400 FORMAT(/' TOO MANY SUBREGIONS')
      CALL EXITN(1)
  410 CONTINUE
      MA(LOCREG+IR)=N
      MA(NUMBOD+IR)=1
      MA(IROR+IR)=IRTRU
      MA(N)=IALP
      MA(N+1)=JTY(K)
      LOC=MA(LOCBOD+IABS(JTY(K)))
      MA(N+2)=LOC
      N=N+5
      K=K+1
      IF(K.EQ.KMAX+1) GO TO 350
  420 DO 440 I=K,KMAX
      ISAVE=I
      IF(IIBIAS(I).EQ.IOR) GOTO 450
      IF(JTY(I).EQ.0) GO TO 350
      MA(N)=JTY(I)
      LOC=MA(LOCBOD+IABS(JTY(I)))
      MA(N+1)=LOC
      N=N+4
      MA(NUMBOD+IR)=MA(NUMBOD+IR)+1
  440 CONTINUE
      GO TO 350
  450 K=ISAVE
      GO TO 390
  460 CONTINUE
      NUMR=IR
CCCC  NRTRU=NUMR
      LLOCRE=N-1
      LNUMBO=LLOCRE+NUMR
      LIROR=LNUMBO+NUMR
      LKO=LIROR+NUMR
      LKR1=LKO+NRTRU
      LKR2=LKR1+IRT
      LDATA=LKR2+IRT+1
      IF(LDATA.GT.(LLMAX+1)) GO TO 480
      LTMA=LDATA+2*NAZT
C     THIS ROOM FOR ALL REGIONS ADJACENT TO IR BY NASC
      LLAST=LTMA
      MA(LBASE)=LLAST
      ITRAN=LLAST-LBASE+1
      IF(KINDPR.GE.2)
     *WRITE(IOUT, 470 ) ITRAN
  470 FORMAT(//' LENGTH OF GEOMETRY ARRAY',I7)
      IF(LLAST.LE.LMA) GO TO 500
  480 WRITE(IUERR, 490 )
  490 FORMAT(//' ****** ERROR: NO ROOM FOR GEOMETRY')
      CALL EXITN(1)
  500 CONTINUE
      IF(KINDPR.GE.2)
     *WRITE(IOUT, 510 ) IRT,IR
  510 FORMAT(  '  NUMBER OF INPUT REGIONS',I7
     *        /'     NUMBER OF SUBREGIONS',I7)
      IF(IDBG.GT.0)
     *WRITE(IOUT, 520 )
  520 FORMAT(//  '   SUBREG.    INPUT REG.    REG. DATA LOC.    NO.  FIG
     *URES')
      IF(IDBG.GT.0)
     *WRITE(IOUT, 530 ) (I,MA(IROR+I),MA(LOCREG+I),MA(NUMBOD+I),I=1,NUMR
     *)
  530 FORMAT(I7,I13,I16,I18)
      DO 540 I=1,IRT
      MA(KR1+I)=NWCOMB
  540 MA(KR2+I)=0
      DO 550 I=1,NUMR
      IRTRU=MA(IROR+I)
      MA(KR1+IRTRU)=MIN0(MA(KR1+IRTRU),I)
  550 MA(KR2+IRTRU)=MAX0(MA(KR2+IRTRU),I)
      IF(IDBG.GT.0)
     *WRITE(IOUT, 560 ) (I,MA(KR1+I),MA(KR2+I),I=1,IRT)
  560 FORMAT(/' INPUT REG. FROM   SUBREG. TO   SUBREG.' /(I10,I15,I13))
      DO 570 I=1,NUMR
      MA(LLOCRE+I)=MA(LOCREG+I)
      MA(LNUMBO+I)=MA(NUMBOD+I)
      MA(LIROR+I)=MA(IROR+I)
  570 CONTINUE
      DO 575 I=1,NRTRU
      MA(LKO+I)=MA(LKOR+I)
CW    WRITE(6,*) ' LKO I=',I,LKO,LKOR,MA(LKO+I),MA(LKOR+I)
  575 CONTINUE
      DO 580 I=1,IRT
      MA(LKR1+I)=MA(KR1+I)
      MA(LKR2+I)=MA(KR2+I)
  580 CONTINUE
      DO 590 I=LDATA,LMA
  590 MA(I)=0
      IF(IDBG.NE.2) GO TO 630
      WRITE(IOUT, 600 )
  600 FORMAT( 50X,'  MA-ARRAY')
      DO 610 I=LBASE,LDATA,7
      K=I+6
  610 WRITE(IOUT, 620 ) I,(MA(J),J=I,K),K
  620 FORMAT( I10,I10,6I5,I10)
C
C END OF REGION DATA
C
  630 CONTINUE
      LVOL=LLAST
      LVOLTR=LVOL+NRTRU
      LAREA=LVOLTR+NRTRU
      LNUMR=LAREA+NOREG
      LLAST=LNUMR+NOREG
      IF(LLAST.GT.LMA) GO TO 480
      LBUF0=LLAST
      LBUF1=LBUF0+NOREG
      LBUF2=LBUF1+1+NOREG
      IF(LBUF2+NRTRU .GT. LMA) GO TO 480
      DO 640 IREG=1,NOREG
      MA(LNUMR+IREG)=0
      MA(LBUF0+IREG)=0
C     (SERVE PER RICORDARE SE L'AREA DI UNA REGIONE E' CALCOLABILE')
  640 FPD(LAREA+IREG)=0.0
      READ(IN, 650 ) (FPD(LBUF1+IREG),IREG=1,NOREG)
  650 FORMAT(72A1)
C     (NON PIU' DI TRE CARATTERI PER L'INDICE DI REGIONE)
      IF(NOREG.LT.1000.AND.KINDPR.GT.0)
     *WRITE(IOUT, 660 ) (IREG,FPD(LBUF1+IREG),IREG=1,NOREG)
  660 FORMAT(//30X,' MAP SYMBOLS'//10('  (',I3,',',A1,')'))
      DO 680 I=1,NRTRU
      IREG=MA(LKO+I)
CCCC  IF(IREG.LE.0) GOTO 680
      IF(IREG.LE.0 .OR. IREG.GT.NOREG) THEN
        WRITE(IUERR,*) ' **** ERROR IN GENI -  IREG=',IREG,I,NOREG
        CALL EXITN(1)
      ENDIF
      MA(LNUMR+IREG)=MA(LNUMR+IREG)+1
      FPD(LBUF2+I)=FPD(LBUF1+IREG)
      CALL GETVOL(I,FPD(LVOL+I))
      IF(MA(LBUF0+IREG).NE.0) GO TO 680
      IF(FPD(LVOL+I).GT.0.0) GO TO 670
      MA(LBUF0+IREG)=1
      FPD(LAREA+IREG)=0.0
      GO TO 680
  670 FPD(LAREA+IREG)=FPD(LAREA+IREG)+FPD(LVOL+I)
  680 CONTINUE
      IREFLS=IREFL
      IF(IREFL.EQ.0) IREFL=-1
      CALL SETRFL
      IDBGS=IDBG
      IDBG=0
C     (ADDITIONAL MAP BEFORE STANDARD MAP TO COMPUTE ESTIMATED AREAD)
      IF(NASCP.GT.0) THEN
C       DIRECT ADDITIONAL MAP TO IUERR-STREAM
        IOUTSV=IOUT
        IOUT=IUERR
        CALL PICTUR(NASCP,FPD(LBUF2),NRTRU,1,IUPDWN)
CT      CALL PICTUR(NASCP,FPD(LBUF2),NRTRU,0,0)
        IOUT=IOUTSV
      ENDIF
      CALL PICTUR(IABS(NASCR),FPD(LBUF2),NRTRU,1,IUPDWN)
      IDBG=IDBGS
      IF(IREFLS.EQ.0) IREFL=0
C     (S.R. SETRFL PONE IREFL=IABS(IREFL))
      IF(IREFLS) 690 , 710 , 730
  690 WRITE(IOUT, 700 )
  700 FORMAT(//' (X,Y)-PLANE REFLECTION')
      GO TO 750
  710 WRITE(IOUT, 720 )
  720 FORMAT(//' (X,Y)-PLANE ESCAPE (CAUTION: THIS BOUNDARY CONDITION IS
     * NOT OFFICIAL. WHEN USED, ESCAPES ARE NOT SCORED AND APPEAR AS '/
     *20X,'"GEOMETRY ACCIDENTS". HOWEVER, HISTORIES INTERRUPTED ARE CORR
     *ECT.'/20X,'USE ESCAPE REGIONS.)')
      GO TO 750
  730 WRITE(IOUT, 740 )
  740 FORMAT(//' (X,Y)-PLANE PERIODICITY')
  750 CONTINUE
C
      K=0
      LAIRC=LLAST
C      LAIRC= LOCAZIONE ACCESSO REGIONI IR COMPONENTI REGIONE IREG
      K=LAIRC+NOREG
      DO 770 I=1,NOREG
      MA(LAIRC+I)=K
      DO 760 J=1,NRTRU
      IF(MA(LKO+J).NE.I) GO TO 760
      K=K+1
      IF(K.GT.LMA) GO TO 480
      MA(K)=J
  760 CONTINUE
  770 CONTINUE
      LLAST=K
      LLASTG=LLAST
      WRITE(IUERR,*) '  GENI:  LBASE=',LBASE,' LLASTG=',LLASTG
      WRITE(IUERR,*) '         LDATA=',LDATA,'   LTMA=',LTMA
      RETURN
      END
C.......................................................................
C.......................................................................
      FUNCTION IBCD(BCD,IFIELD)
      CHARACTER*1 BCD(1)
C
      COMMON/IOFILE/IN,IOUT,IUERR,IARK,IPUNCH,IGMT,ITRMT,ITAPIO(2)
C
      CHARACTER*1 DIGIT(10)
      DATA DIGIT /'0','1','2','3','4','5','6','7','8','9'/
      CHARACTER*1 BLANK
      DATA BLANK/' '/
C
      IBCD=0
      DO 40 IDIG=1,IFIELD
        IF(BCD(IDIG).EQ.BLANK) GO TO 40
        DO 10 K=1,10
          IF(BCD(IDIG).EQ.DIGIT(K)) GO TO 30
   10   CONTINUE
        WRITE(IUERR, 20 ) (BCD(J),J=1,IFIELD)
   20   FORMAT(' ERROR: BCD= ',6A1)
        CALL EXITN(1)
   30   IBCD=IBCD+(K-1)*10**(IFIELD-IDIG)
   40 CONTINUE
      RETURN
      END
C.......................................................................
C.......................................................................
      SUBROUTINE CHKPOL(N,V,IERR)
C
      COMMON/IOFILE/IN,IOUT,IUERR,IARK,IPUNCH,IGMT,ITRMT,ITAPIO(2)
C
      PARAMETER (MV=100)
      DIMENSION V(2*N),VX(MV),VY(MV)
C
      DATA ISTOP/0/
C
      IF(N.GT.MV) THEN
        WRITE(IUERR,*) ' ***** CHKPOL ERROR: TOO MANY VERTICES'
        CALL EXITN(1)
      ENDIF
      IERR1=0
      IERR2=0
      LX=-1
      DO 10 K=1,N
      LX=LX+2
      LY=LX+1
      VX(K)=V(LX)
      VY(K)=V(LY)
   10 CONTINUE
C                               VERIFICA DI CONVESSITA'
C         DATI P1,P2,P3, IL PRODOTTO VETTORIALE DI P2-P1 PER P3-P1 E'
C         FISK=(PY(3)-PY(1))*(PX(2)-PX(1))-(PX(3)-PX(1))*(PY(2)-PY(1))
      DO 40 I=1,N
      J=I+1
      IF(J.GT.N) J=1
      KPOS=0
      KNEG=0
      NM2=N-2
C                               RISPETTO ALLA COPPIA FISSATA VERIFICA
C                               IL SEGNO DEGLI ALTRI VERTICI
      DO 20 K=1,NM2
      L=MOD(J-1+K,N)+1
      FISK=(VY(L)-VY(I))*(VX(J)-VX(I))-(VX(L)-VX(I))*(VY(J)-VY(I))
      IF(FISK.GT.0.0) KPOS=KPOS+1
      IF(FISK.LT.0.0) KNEG=KNEG+1
   20 CONTINUE
      IF(KPOS*KNEG.EQ.0) GO TO 30
      IERR1=1
   30 IF(KNEG.EQ.0) GO TO 40
      IERR2=1
   40 CONTINUE
C
      IF(IERR1.EQ.0) GO TO 60
      WRITE(IUERR, 50 )
   50 FORMAT(/' THIS IS A NON-CONVEX POLYGON')
      IF(ISTOP.EQ.0) CALL EXITN(1)
   60 IF(IERR2.EQ.0) GO TO 80
      WRITE(IUERR, 70 )
   70 FORMAT(/' POLYGON VERTICES MUST BE ASSIGNED COUNTERCLOCKWISE')
      IF(ISTOP.EQ.0) CALL EXITN(1)
   80 CONTINUE
      IERR=IERR1+IERR2
      RETURN
C
      ENTRY SCHKPL(ISTO)
      ISTOP=ISTO
      RETURN
      END
C.......................................................................
C.......................................................................
      SUBROUTINE GETVOL(IR,VOL)
C
      COMMON/IOFILE/IN,IOUT,IUERR,IARK,IPUNCH,IGMT,ITRMT,ITAPIO(2)
C
      COMMON/CGEOM2/LOCREG,NUMBOD,IROR,IR1,IR2,LDATA(7),PINF,LKO(8),
     * LVOLTR,LLASTG,IRWGMT,NRTRU
      REAL*8 PINF
      INCLUDE 'pnimb'
      PARAMETER ( NWCOMB=NWCOMX )
      COMMON/COMBIN/MA(NWCOMB)
      REAL   FPD(NWCOMB)
      EQUIVALENCE (MA(1),FPD(1))
      COMMON/GEOMR/NASCR,IREFL,AA(4),ITYP,KLOCR,NVR
      REAL*8 AA
      REAL*8 X1 , Y1 , XN , YN , XI , YI , XIP1 , YIP1 , A , B , C
     *     , R , R1 , R2 , TVOL
C
CC
      IRP=MA(IR1+IR)
      IF(IRP.NE.MA(IR2+IR)) GO TO 80
      N=MA(LOCREG+IRP)
      NUM=MA(NUMBOD+IRP)
      I=N-3
      ISORG=0
      NB=0
      R1=1.E+30
      R2=-R1
      DO 70 J=1,NUM
      I=I+4
      IF(MA(I).EQ.IABS(NASCR) .AND. NUM.GT.1) GO TO 80
      LOCAT=MA(I+1)
      ITYPE=MA(LOCAT+2)
      IF(ITYPE.LE.0) GOTO 80
      NB=NB+1
      K=MA(LOCAT+6)+4
      GO TO ( 10 , 20 , 30 , 40 , 60 ),ITYPE
C CIR
   10 IF(ISORG.GT.1) GO TO 80
      IF(NB.GT.2) GO TO 80
      R=FPD(K+2)
      R1=DMIN1(R1,R)
      R2=DMAX1(R2,R)
      ISORG=1
      IF(J.LT.NUM) GO TO 70
      IF(R2.EQ.R1) R1=0.0
      TVOL=3.14159D0*(R2*R2-R1*R1)
      GO TO 70
C REC
   20 IF(ISORG.NE.0) GO TO 80
      IF(NB.GT.1) GO TO 80
      A=FPD(K+2)
      B=FPD(K+3)
      TVOL=A*B
      ISORG=2
      GO TO 70
C HEX
   30 IF(ISORG.NE.0) GO TO 80
      IF(NB.GT.1) GO TO 80
      A=FPD(K+2)
      B=FPD(K+3)
      C=FPD(K+4)
      ISORG=3
      TVOL=4.0D0*A*B+2.0D0*A*(C-B)
      GO TO 70
C POL
   40 IF(ISORG.NE.0) GO TO 80
      IF(NB.GT.1) GO TO 80
      NV=MA(K)
      NVM1=NV-1
      X1=FPD(K+6)
      Y1=FPD(K+7)
      XN=FPD(K+6+NVM1*2)
      YN=FPD(K+7+NVM1*2)
      TVOL=XN*Y1-X1*YN
      DO 50 IV=1,NVM1
      KK=K+6+(IV-1)*2
      XI=FPD(KK)
      YI=FPD(KK+1)
      XIP1=FPD(KK+2)
      YIP1=FPD(KK+3)
      TVOL=TVOL+(XI*YIP1-XIP1*YI)
   50 CONTINUE
      TVOL=TVOL/2.0D0
C     AREA DI UN POLIGONO DI VERTICI (X(I),Y(I),I=1,N) :
C     AREA= 0.5*( (X(1)Y(2)-X(2)Y(1)) + (X(2)Y(3)-X(3)Y(2)) + ...
C      ... + (X(N-1)Y(N)-X(N)Y(N-1)) + (X(N)Y(1)-X(1)Y(N) )
      ISORG=4
      GO TO 70
C TSE
   60 IF(ISORG.NE.0) GO TO 80
      IF(NB.GT.1) GO TO 80
      A=FPD(K+2)
      B=FPD(K+3)
      C=FPD(K+4)
      TVOL=1.570796D0*B*(A+C)
      ISORG=5
C
   70 CONTINUE
      IF(ISORG) 80 , 80 , 90
   80 TVOL=0.0D0
   90 VOL=TVOL
      RETURN
      END
C.......................................................................
C.......................................................................
      SUBROUTINE GG(LOCAT)
      IMPLICIT REAL*8 (A-H,O-Z)
      REAL   HELP
      SAVE
      DIMENSION HELP(2)
      EQUIVALENCE(DHELP,HELP(1))
      DIMENSION XV(100),YV(100),TT(2),LR(2)
      COMMON/PAREM/XB(2),WB(2),IR,IRPRIM,
     *             RIN,ROUT,DIST,NASC,LSURF,NBO,LRI,LRO,LOOP,ITYPE
      COMMON/CGEOM2/LOCREG,NUMBOD,IROR,LR1,LR2,LDATA,NUMR,LBASE,LTMA
     *             ,LOCBOD,IDBG,KLOOP,PINF,LKOR,NOA,IST,NOREG,LVOL,LAREA
     *             ,LNUMR,LAIRC,LVOLTR,LLASTG,IRWGMT,NRTRU
      INCLUDE 'pnimb'
      PARAMETER ( NWCOMB=NWCOMX )
      COMMON/COMBIN/MA(NWCOMB)
      REAL   FPD(NWCOMB)
      EQUIVALENCE (MA(1),FPD(1))
C
      COMMON/IOFILE/IN,IOUT,IUERR,IARK,IPUNCH,IGMT,ITRMT,ITAPIO(2)
C
      DATA EPS/ 1.0E-5/
      L=LOCAT
      LOOP=MA(L+1)
      ITYPE=MA(L+2)
C     ABSOLUTE VALUE IN CASE IT IS FLAGGED AS NON-CONVEX
      ITYPE=IABS(ITYPE)
      K=MA(L+6)
      IF( LOOP.NE.KLOOP ) GO TO 10
      LRI=MA(L+3)
      LRO=MA(L+4)
      HELP(1)=FPD(K)
      HELP(2)=FPD(K+1)
      RIN=DHELP
      HELP(1)=FPD(K+2)
      HELP(2)=FPD(K+3)
      ROUT=DHELP
      RETURN
   10 RIN=PINF
      ROUT=-PINF
      IF( (ITYPE.LE.0).OR.(ITYPE.GT.5) ) GO TO 210
      MA(L+1)=KLOOP
      GO TO ( 20 , 30 , 40 , 50 , 130 ), ITYPE
C             CIR  REC  HEX  POL  TSE
C CIR
   20 CONTINUE
      DX= XB(1) -FPD(K+4)
      DY= XB(2) -FPD(K+5)
      Y= DX*WB(1) + DY*WB(2)
      C= DX*DX + DY*DY -FPD(K+6)**2
      DX=Y*Y- C
      IF( DX.LT.0.) GO TO 170
      DY=DSQRT(DX)
      RIN= -Y-DY
      ROUT=-Y+DY
      LRI=1
      LRO=1
      GO TO 170
C REC
   30 CONTINUE
      NV=4
      GO TO 60
C     XV(3)=FPD(K+4)
C     YV(3)=FPD(K+5)
C     A=FPD(K+6)
C     B=FPD(K+7)
C     XV(4)=XV(3)+A
C     YV(4)=YV(3)
C     XV(1)=XV(4)
C     YV(1)=YV(4)+B
C     XV(2)=XV(3)
C     YV(2)=YV(1)
C     GO TO LSTO=0
C HEX
   40 CONTINUE
      NV=6
      GO TO 60
C     XC=FPD(K+4)
C     YC=FPD(K+5)
C     A=FPD(K+6)
C     B=FPD(K+7)
C     C=FPD(K+8)
C     XV(1)=XC+A
C     YV(1)=YC+B
C     XV(2)=XC
C     YV(2)=YC+C
C     XV(3)=XC-A
C     YV(3)=YV(1)
C     XV(4)=XC-A
C     YV(4)=YC-B
C     XV(5)=XC
C     YV(5)=YC-C
C     XV(6)=XV(1)
C     YV(6)=YV(4)
C     GO TO LSTO=0
C POL
   50 CONTINUE
      NV=MA(K+4)
C     REC,POL,HEX
   60 DO 70 IV=1,NV
      XV(IV)=FPD(K+10+(IV-1)*2)
      YV(IV)=FPD(K+11+(IV-1)*2)
   70 CONTINUE
      LSTO=0
      TT(1)=0.0
      DO 120 I=1,NV
      IF(LSTO.EQ.2) GO TO 120
      XI=XV(I)
      YI=YV(I)
      IP1=I+1
      IF(IP1.GT.NV) IP1=1
      XIP1=XV(IP1)
      YIP1=YV(IP1)
      D=YIP1-YI
      IF(D) 90 , 80 , 90
   80 FNUM=YI-XB(2)
      DENO=WB(2)
      GO TO 100
   90 D=(XIP1-XI)/D
      FNUM=XI-XB(1)-D*(YI-XB(2))
      DENO=WB(1)-D*WB(2)
  100 IF(DENO) 110 , 120 , 110
  110 T=FNUM/DENO
      XP=XB(1)+WB(1)*T
      IF(XI.EQ.XIP1) XP=XI
      YP=XB(2)+WB(2)*T
      IF(YI.EQ.YIP1) YP=YI
      FMIN=DMIN1(XI,XIP1)
      FMAX=DMAX1(XI,XIP1)
      IF(XP.LT.FMIN .OR. XP.GT.FMAX) GO TO 120
      FMIN=DMIN1(YI,YIP1)
      FMAX=DMAX1(YI,YIP1)
      IF(YP.LT.FMIN .OR. YP.GT.FMAX) GO TO 120
      IF(LSTO.EQ.1 .AND. DABS(T-TT(1)).LE.EPS) GO TO 120
      LSTO=LSTO+1
      TT(LSTO)=T
      LR(LSTO)=I
  120 CONTINUE
      IF(LSTO.EQ.0) GO TO 170
      RIN=TT(1)
      ROUT=TT(2)
      LRI=LR(1)
      LRO=LR(2)
      IF(RIN.LT.ROUT) GO TO 170
      RIN=TT(2)
      ROUT=TT(1)
      LRI=LR(2)
      LRO=LR(1)
      GO TO 170
C TSE
  130 CONTINUE
      XC=FPD(K+4)
      YC=FPD(K+5)
      A=FPD(K+6)
      B=FPD(K+7)
      C=FPD(K+8)
      XD=XB(1)-XC
      YD=XB(2)-YC
C     SEMIELLISSE A SINISTRA
      A1=(B*WB(1))**2+(A*WB(2))**2
      B1=-(B**2*XD*WB(1)+A**2*YD*WB(2))
      C1=(A*B)**2-(B*XD)**2-(A*YD)**2
      D1=B1**2+A1*C1
      IF(D1.LT.0.0) GO TO 150
      D1=DSQRT(D1)
      RIN1=(B1-D1)/A1
      X1IN=XB(1)+RIN1*WB(1)
      IF(X1IN.GT.XC) GO TO 140
      RIN=RIN1
      LRI=1
  140 ROUT1=(B1+D1)/A1
      X1OUT=XB(1)+ROUT1*WB(1)
      IF(X1OUT.GT.XC) GO TO 150
      ROUT=ROUT1
      LRO=1
      IF(RIN.NE.PINF) GO TO 170
C     SEMIELLISSE A DESTRA
  150 A2=(B*WB(1))**2+(C*WB(2))**2
      B2=-(B**2*XD*WB(1)+C**2*YD*WB(2))
      C2=(C*B)**2-(B*XD)**2-(C*YD)**2
      D2=B2**2+A2*C2
      IF(D2.LT.0.0) GO TO 170
      D2=DSQRT(D2)
      IF(RIN.NE.PINF) GO TO 160
      RIN2=(B2-D2)/A2
      X2IN=XB(1)+RIN2*WB(1)
      IF(X2IN.LT.XC) GO TO 160
      RIN=RIN2
      LRI=2
  160 IF(ROUT.NE.-PINF) GO TO 170
      ROUT2=(B2+D2)/A2
      X2OUT=XB(1)+ROUT2*WB(1)
      IF(X2OUT.LT.XC) GO TO 170
      ROUT=ROUT2
      LRO=2
C
  170 MA(LOCAT+3)=LRI
      MA(LOCAT+4)=LRO
      IF(DABS(RIN-DIST).LT.DIST*EPS) RIN=DIST
      IF(DABS(ROUT-DIST).LT.DIST*EPS) ROUT=DIST
      IF(RIN-ROUT) 200 , 180 , 190
  180 ROUT=ROUT*1.00001
      GO TO 200
  190 ROUT=-PINF
  200 CONTINUE
      DHELP=RIN
      FPD(K)=HELP(1)
      FPD(K+1)=HELP(2)
      DHELP=ROUT
      FPD(K+2)=HELP(1)
      FPD(K+3)=HELP(2)
      RETURN
  210 WRITE(IUERR, 220 ) ITYPE,IR,NBO
  220 FORMAT( ' IN GG ITYPE=',I5,5X,'IR=',I5,5X,'NBO=',I5)
      CALL EXITN(1)
      RETURN
C     (DUMMY)
      END
C.......................................................................
C.......................................................................
      SUBROUTINE PR(K)
      IMPLICIT REAL*8 (A-H,O-Z)
      COMMON/PAREM/XB(2),WB(2),IR,IRPRIM,
     *             RIN,ROUT,DIST,NASC,LSURF,NBO,LRI,LRO,LOOP,ITYPE
      COMMON/CGEOM2/LOCREG,NUMBOD,IROR,LR1,LR2,LDATA,NUMR,LBASE,LTMA
     *             ,LOCBOD,IDBG,KLOOP,PINF,LKOR,NOA,IST,NOREG,LVOL,LAREA
     *             ,LNUMR,LAIRC,LVOLTR,LLASTG,IRWGMT,NRTRU
      COMMON / DBG / N,NUM,LOCAT,ISAVE,INEXT,INEX,SMIN
C
      COMMON/IOFILE/IN,IOUT,IUERR,IARK,IPUNCH,IGMT,ITRMT,ITAPIO(2)
C
      WRITE(IOUT, 10 ) K,XB,WB,IR
   10 FORMAT( ' ***PR***',I5,4E15.8,I5)
      WRITE(IOUT, 20 ) IR,IRPRIM,NASC,LSURF,NBO,LRI,LRO,KLOOP,LOOP,ITYPE
     *             ,N,NUM,LOCAT,ISAVE,INEXT,INEX,LDATA,K,
     *              RIN,ROUT,SMIN,DIST
   20 FORMAT(10I10 / 8I10 /1P,4E16.8)
      RETURN
      END
C.......................................................................
C.......................................................................
      SUBROUTINE G1(X,W,IR,KL,DISTN,S)
C     ON ONE CALL, G1 CALCULATES THE DISTANCE TRAVELLED IN THE PRESENT
C     REGION AND THE NUMBER OF THE NEXT REGION TO BE ENTERED
C        VARIABLES REQUIRED:
C     X(2)     - STARTING COORDINATES OF PRESENT TRAJECTORY
C     W(2)     - DIRECTION COSINES OF TRAJECTORY
C     KL       - TRAJECTORY INDEX (ASSIGNED BY G1 ON FIRST CALL AND
C                TO BE INPUT FOR ALL SUBSEQUENT STEPS OF TRAJECTORY)
C                IT IS RECOMMENDED NOT TO INTERRUPT TRACING IN ORDER
C                TO SPEED UP CALCULATIONS
C     IR       - PRESENT ZONE
C     DISTN    - PRESENT DISTANCE FROM X()
C                (I.E., THE PRESENT POINT IS  X()+W()*DISTN)
C                IF  DISTN IS LESS OR EQUAL ZERO A NEW TRAJECTORY STARTS
C     S        - DISTANCE TRAVELLED ON THIS CALL TO G1
C      IR AND DISTN ARE SET TO THE VALUES AT THE NEXT INTERSECTION
C
      IMPLICIT REAL*8 (A-H,O-Z)
      REAL   HELP
      SAVE
      DIMENSION HELP(2)
      EQUIVALENCE(DHELP,HELP(1))
      COMMON/PAREM/XB(2),WB(2),IRG1,IRP,
     *             RIN,ROUT,DIST,NASC,LSURF,NBO,LRI,LRO,LOOP,ITYPE
      COMMON/CGEOM2/LOCREG,NUMBOD,IROR,LR1,LR2,LDATA,NUMR,LBASE,LTMA
     *             ,LOCBOD,IDBG,KLOOP,PINF,LKOR,NOA,IST,NOREG,LVOL,LAREA
     *             ,LNUMR,LAIRC,LVOLTR,LLASTG,IRWGMT,NRTRU
      COMMON/GEOMR/NASCR,IREFL,DUMD(4),IDUMS(3)
      INCLUDE 'pnimb'
      PARAMETER ( NWCOMB=NWCOMX )
      COMMON/COMBIN/MA(NWCOMB)
      REAL   FPD(NWCOMB)
      EQUIVALENCE (MA(1),FPD(1))
      COMMON / DBG / N,NUM,LOCAT,ISAVE,INEXT,INEX,SMIN
C
      COMMON/IOFILE/IN,IOUT,IUERR,IARK,IPUNCH,IGMT,ITRMT,ITAPIO(2)
C
      DATA EPS/ 1.0D-4/
      EQUIVALENCE(LMAX,LTMA)
      DIMENSION X(2),W(2)
      DIST=DISTN
      DO 10 K=1,2
        XB(K)=X(K)
   10   WB(K)=W(K)
      SP=0.
      IR0=-999
      IF(DIST) 20 , 20 , 30
   20 KLOOP=KLOOP+1
      KL=KLOOP
      KLSAV=KLOOP
      NASC=-1
      DIST=0.0
      GO TO 40
   30 KLSAV=KLOOP
      KLOOP=KL
   40 SMIN=PINF
      JR1=MA(LR1+IR)
      JR2=MA(LR2+IR)
      ISAVE=0
      DO 140 IRR=JR1,JR2
        IF(IDBG.LT.0) WRITE(IOUT, 45 ) IRR,SP
   45   FORMAT('  G1( 45): IRR=',I4,' SP=',1P,E12.5)
        IRG1=IRR
        N=MA(LOCREG+IRR)+1
        NUM=MA(NUMBOD+IRR)*4+N-4
        IF(IDBG.GT.0) CALL PR(1)
C       LOOP UP TO 300 FINDS THE NEXT BODY THAT THE RAY WILL INTERSECT
C
        DO 130 I=N,NUM,4
          NBO=MA(I)
          LOCAT=MA(I+1)
          CALL GG(LOCAT)
          IF(IDBG.GT.0) CALL PR(2)
          IF(ROUT.LE.0) GO TO 128
          IF(NBO) 50 , 128 , 90
   50     RMS=RIN-SMIN
          IF(RMS) 70 , 80 , 60
   60     IF(RMS-SMIN*EPS) 80 , 80 , 128
   70     IF(-RMS.GE.SMIN*EPS) GO TO 80
          K=MA(LOCAT+6)
          DHELP=SMIN
          FPD(K)=HELP(1)
          FPD(K+1)=HELP(2)
          RIN=SMIN
   80     IF(DIST.GE.RIN) GO TO 128
          SMIN=RIN
          NASC=-NBO
          LSURF=LRI
          ISAVE=I
          IR0=IRR
          GO TO 128
   90     RMS=ROUT-SMIN
          IF(RMS) 110 , 120 , 100
  100     IF(RMS-SMIN*EPS) 120 , 120 , 128
  110     IF(-RMS.GE.SMIN*EPS) GO TO 120
          K=MA(LOCAT+6)
          DHELP=SMIN
          FPD(K+2)=HELP(1)
          FPD(K+3)=HELP(2)
          ROUT=SMIN
  120     IF(DIST.GE.ROUT) GO TO 128
          SMIN=ROUT
          NASC=NBO
          LSURF=-LRO
          ISAVE=I
          IR0=IRR
  128     CONTINUE
          IF(IDBG.LT.0) WRITE(IOUT, 129) NBO,LRI,LRO,RIN,ROUT,SMIN
  129     FORMAT('  G1(130): NBO=',I5,' LRI=',I3,' LRO=',I3,
     &           ' RIN=',1P,E12.5,' ROUT=',E12.5,' SMIN=',E12.5)
  130   CONTINUE
  140 CONTINUE
      IF(ISAVE.NE.0) GO TO 150
C     WRITE(IOUT,305) IR,XB,WB,DIST
C 305 FORMAT( ' NO VALID DISTANCE IN G1 ',/(I5,5E15.8))
      IRPRIM=-3
      GO TO 440
C
C NOW TO FIND NEXT REGION
C
  150 CONTINUE
      IF(IDBG.LT.0) WRITE(IOUT, 155 ) IR,NBO,LSURF,IR0,SMIN,DIST,SP
  155 FORMAT('  G1(155): IR=',I4,' NBO=',I5,' LSURF=',I3,' IR0=',I4,
     &       ' SMIN=',1P,E12.5,' DIST=',E12.5,' SP=',E12.5)
      S=SMIN-DIST+SP
      DIST=SMIN
      DIS=(1.+EPS)*DIST
      INEXT=ISAVE+2
  160 IRP=MA(INEXT)
      IF(IDBG.LT.0) WRITE(IOUT, 165 ) IR,IRP,S,DIST
  165 FORMAT('  G1(165): IR=',I4,' IRP=',I4,
     &       ' S=',1P,E12.5,' DIST=',E12.5)
      IF(IDBG.GT.0) CALL PR(3)
      IF( IRP.EQ.0)GO TO 210
      N=MA(LOCREG+IRP)+1
      NUM=MA(NUMBOD+IRP)*4+N-4
C
C THE LOOP TO 400 EXAMINES REGION IRP TO SEE IF IT IS THE NEXT REGION
C     BY DETERMINING IF THE INTERSECTION POINT XB(I)+WB(I)*DIST
C     IS INTERNAL TO IRP WITH RESPECT TO ALL ITS BOUNDARY BODIES.
      IF(IDBG.GT.0) CALL PR(4)
      DO 190 I=N,NUM,4
        NBO=MA(I)
        LOCAT=MA(I+1)
        CALL GG(LOCAT)
        IF(IDBG.LT.0) WRITE(IOUT, 168 ) IRP,NBO,DIS,RIN,ROUT
  168   FORMAT('  G1(168): IRP',I4,' NBO',I5,
     &         ' DIS=',1P,E12.5,' RIN=',E12.5,' ROUT=',E12.5)
        IF(IDBG.GT.0) CALL PR(5)
        IF(NBO) 170 , 190 , 180
  170   IF( (ROUT.LE.DIS).OR.(RIN.GT.DIS) ) GO TO 190
        GO TO 200
  180   IF( (RIN.LE.DIS).AND.(DIS.LT.ROUT) )  GO TO 190
        GO TO 200
  190 CONTINUE
C
C FOUND A REGION
      GO TO 430
  200 INEX=INEXT + 1
      INEXT=MA(INEX)
      IF(INEXT.GT.0) GO TO 160
C
C SEARCH ALL REGIONS
C
      INEXT=LDATA
  210 CONTINUE
      IF(IDBG.GT.0) CALL PR(6)
      ISENT=0
  220 CONTINUE
      DO 340 IRP=1,NUMR
        IF(IRP.EQ.IR0) GO TO 340
        N=MA(LOCREG+IRP)+1
        NUM=MA(NUMBOD+IRP)*4+N-4
        IF(MA(IROR+IRP).NE.IR) GO TO 230
        IF(ISENT) 270 , 270 , 340
  230   CONTINUE
        DO 260 I=N,NUM,4
          IF(ISENT) 240 , 240 , 250
  240     IF(MA(ISAVE)+MA(I)) 260 , 270 , 260
C         NORMALMENTE CONTROLLA IRP SOLO SE DEFINITA DA -MA(ISAVE)
C         DI IR0 O SE IROR(IRP)=0
  250     IF(MA(ISAVE)+MA(I)) 260 , 340 , 260
C         CHECK DI IRP NON ESEGUITO PRIMA
C         -MA(ISAVE) NON DEFINISCE IRP MA IR0 E IRP SONO AFFACCIATE
  260   CONTINUE
        IF(ISENT) 270 , 270 , 340
  270   CONTINUE
        DO 300 I=N,NUM,4
          NBO=MA(I)
          LOCAT=MA(I+1)
          CALL GG(LOCAT)
CW        IF(IDBG.LT.0) WRITE(IOUT, 275 ) IRP,NBO,DIS,RIN,ROUT
CW275     FORMAT('  G1(275): IRP',I4,' NBO',I5,
CW   &           ' DIS=',1P,E12.5,' RIN=',E12.5,' ROUT=',E12.5)
          IF(IDBG.GT.0) CALL PR(7)
          IF(NBO) 280 , 300 , 290
  280     IF( (ROUT.LE.DIS).OR.(RIN.GT.DIS)) GO TO 300
          GO TO 340
  290     IF( (RIN.LE.DIS).AND.(DIS.LT.ROUT)) GO TO 300
          GO TO 340
  300   CONTINUE
        IF(INEXT.NE.LDATA) GO TO 310
        IF(INEXT.GE.LMAX-2) GO TO 320
        MA(INEX)=INEXT
        LDATA=LDATA+2
  310   MA(INEXT)=IRP
        GO TO 430
  320   IF(IST.NE.0) GO TO 430
        IST=1
        WRITE(IUERR, 330 )
  330   FORMAT( ' GEOMETRY ARRAY FULL ')
        GO TO 430
  340 CONTINUE
      IF(ISENT.NE.0) GO TO 350
      ISENT=1
      GO TO 220
  350 CONTINUE
      IRPRIM=0
      IF(IDBG.EQ.0) GO TO 440
      WRITE(IOUT, 360 ) IR,XB,WB,DIST
  360 FORMAT('  G1: IR=',I4,1X,'XB=',2E15.8,1X,'WB=',2E15.8,1X,'DIST=',
     *  E15.8)
      IF(IDBG.LE.0) GO TO 440
      WRITE(IOUT, 370 )
  370 FORMAT(// 50X,'MA  ARRAY' //)
      DO 380 I=LBASE,LDATA,7
        K=I+6
  380   WRITE(IOUT, 390 ) I,(MA(J), J=I,K), K
  390 FORMAT(I5,I10,6I5,I10)
      WRITE(IOUT, 400 )
  400 FORMAT(// 50X,'FPD ARRAY' //)
      DO 410 I=LBASE,LDATA,5
  410   WRITE(IOUT, 420 ) I,(FPD(J), J=I,K), K
  420 FORMAT(I5,5E20.7,I5)
      GO TO 440
  430 IRPRIM=MA(IROR+IRP)
      IF(IDBG.GT.0) CALL PR(8)
      IF(IRPRIM.NE.IR) GO TO 440
      SP=S
      GO TO 40
  440 CONTINUE
      IR=IRPRIM
      KLOOP=KLSAV
      DISTN=DIST
      RETURN
      END
C.......................................................................
C.......................................................................
      SUBROUTINE GETIR(X,IR,ICHK)
C     FINDS REGION NUMBER  IR  FOR POINT  X
C     IF ICHK.EQ.ZERO NO CHECK ON REGION OVERLAP
      IMPLICIT REAL*8 (A-H,O-Z)
      DIMENSION X(2)
      LOGICAL LOGG
      COMMON/PAREM/XB(2),WB(2),IRR,IRP,
     *             RIN,ROUT,DIST,NASC,LSURF,NBO,LRI,LRO,LOOP,ITYPE
      COMMON/CGEOM2/LOCREG,NUMBOD,IROR,KR1,KR2,LDATA,NUMR,LBASE,LTMA
     *             ,LOCBOD,IDBG,KLOOP,PINF,LKOR,NOA,IST,NOREG,LVOL,LAREA
     *             ,LNUMR,LAIRC,LVOLTR,LLASTG,IRWGMT,NRTRU
      INCLUDE 'pnimb'
      PARAMETER ( NWCOMB=NWCOMX )
      COMMON/COMBIN/MA(NWCOMB)
      DIMENSION W(2)
      DATA  W/0.8,0.6/
      DIMENSION WSAVE(2)
      DIMENSION IRS(10)
C
      COMMON/IOFILE/IN,IOUT,IUERR,IARK,IPUNCH,IGMT,ITRMT,ITAPIO(2)
C
C
      DO 10 K=1,2
      WSAVE(K)=WB(K)
      WB(K)=W(K)
   10 XB(K)=X(K)
      DIST=0.
      KLOOP=KLOOP+1
      L=0
      DO 50 IRP=1,NUMR
      N=MA(LOCREG+IRP)+1
      NUM=MA(NUMBOD+IRP)*4+N-4
      DO 40 I=N,NUM,4
      NBO=MA(I)
      LOCAT=MA(I+1)
      CALL GG(LOCAT)
      LOGG=(ROUT.LE.0.0).OR.(RIN.GT.0.0)
      IF(NBO) 20 , 40 , 30
   20 LOGG=.NOT.LOGG
   30 IF(LOGG)GO TO 50
   40 CONTINUE
      IR=MA(IROR+IRP)
      IF(ICHK.EQ.0) GO TO 90
      IF(L.NE.0 .AND. IR.EQ.IRS(L)) GO TO 50
      L=L+1
      IRS(L)=IR
      IF(L.GE.10) GO TO 70
   50 CONTINUE
      IF(L-1) 60 , 90 , 70
   60 IR=0
      WRITE(IOUT,65) XB
   65 FORMAT(' REGION NOT FOUND FOR',1P,3E12.4)
      GO TO 90
   70 WRITE(IUERR, 80 ) XB,L,(IRS(K),K=1,L)
   80 FORMAT(' REGION OVERLAP FOR',2E13.5,5X,I3,' REGIONS FOUND',10I5)
      IR=-1
   90 CONTINUE
      WB(1)=WSAVE(1)
      WB(2)=WSAVE(2)
      RETURN
      END
C.......................................................................
C.......................................................................
      SUBROUTINE PICTUR(NASC,ATABLE,NTABLE,MODEXY,IUPDWN)
      DIMENSION ATABLE(NTABLE)
C * * PROGRAM PICTURE
      COMMON /PICT/DELU,DELV,X0,Y0,XU,YU,XV,YV,NSTOR
      COMMON/CGEOM2/LOCREG,NUMBOD,IROR,LR1,LR2,LDATA,NUMR,LBASE,LTMA
     *             ,LOCBOD,IDBG,KLOOP,PINF,LKOR,NOA,IST,NOREG,LVOL,LAREA
     *             ,LNUMR,LAIRC,LVOLTR,LLASTG,IRWGMT,NRTRU
      REAL*8 PINF
      DATA EPS/1.E-04/
      DATA BLANK/4H????/
      DIMENSION NSTOR(140)
C
      DATA XOVERY/0.6/
C
      INCLUDE 'pnimb'
      PARAMETER ( NWCOMB=NWCOMX )
      COMMON/COMBIN/MA(NWCOMB)
      REAL   FPD(NWCOMB)
      EQUIVALENCE(MA(1),FPD(1))
C
      COMMON/IOFILE/IN,IOUT,IUERR,IARK,IPUNCH,IGMT,ITRMT,ITAPIO(2)
C
C
      DO 10 I=1,NRTRU
        FPD(LVOLTR+I)=0.0
   10 CONTINUE
      K=MA(LOCBOD+NASC)
      ITYPE=MA(K+2)
      ITYPE=IABS(ITYPE)
      K=MA(K+6)+2
      A=FPD(K+4)
      B=FPD(K+5)
      C=FPD(K+6)
CW    WRITE(6,*) 'PICTUR NASC=',NASC,' ITYPE=',ITYPE
CW    WRITE(6,*) 'FPD(2,3,4,5)=',FPD(K+2),FPD(K+3),FPD(K+4),FPD(K+5)
      GO TO ( 80 , 20 , 30 , 40 , 80 ),ITYPE
   20 X0=FPD(K+2)
      Y1=FPD(K+3)
      Y0=Y1+B
      X1=X0+A
CW    WRITE(6,*) 'X0,Y0,X1,Y1=',X0,Y0,X1,Y1
      GO TO 60
   30 X0=FPD(K+2)-A
      Y0=FPD(K+3)+C
      X1=X0+2.*A
      Y1=Y0-2.*C
      GO TO 60
   40 X0=1.E+30
      Y0=-1.E+30
      X1=Y0
      Y1=X0
      NV=MA(K+2)
      DO 50 I=1,NV
        XV=FPD(K+8+(I-1)*2)
        YV=FPD(K+9+(I-1)*2)
        X0=AMIN1(X0,XV)
        Y0=AMAX1(Y0,YV)
        X1=AMAX1(X1,XV)
        Y1=AMIN1(Y1,YV)
   50 CONTINUE
   60 CONTINUE
      X0=X0-EPS
      Y0=Y0+EPS
      X1=X1+EPS
      Y1=Y1-EPS
C                  (X0,Y0) :  UPPER LEFT COORDINATES
C                  (X1,Y1) :  LOWER RIGHT     "
C                  (XV,YV) :  DIR.COS. ACROSS THE PAGE FROM (X0,Y0)
C                  (XU,YU) :     "     DOWN    "   "     "     "
C
      XV=1.
      YV=0.
      XU=0.
      YU=-1.
      IF(IUPDWN.NE.0) THEN
        YU=+1.
        TRAN=Y0
        Y0=Y1
        Y1=TRAN
      ENDIF
      IF(MODEXY.NE.0) GOTO 70
C     AUTOMATIC CHOICE OF LAYOUT
      IF( ABS(Y0-Y1) .GE. ABS(X1-X0) ) GO TO 70
      XU=1.
      YU=0.
      XV=0.
      YV=1.
      TRAN=Y1
      Y1=Y0
      Y0=TRAN
   70 NV=120
      ATABLE(1)=BLANK
      DELX=X1-X0
      DELY=Y1-Y0
      CDELU=DELX*XU+DELY*YU
      CDELV=DELX*XV+DELY*YV
      DELV=CDELV/FLOAT(NV)
      DELU=DELV/XOVERY
      NU=CDELU/DELU+1.
      X0=X0+.5*(XU*DELU+XV*DELV)
      Y0=Y0+.5*(YU*DELU+YV*DELV)
      CALL PRINTN(NU,NV, ATABLE(1),NTABLE)
      IF(IUPDWN.EQ.0) THEN
        WRITE(IOUT,73)
   73   FORMAT(/5X,'Y I'/7X,'I'/7X,'I'/7X,'I'/7X,'0-------'/14X,'X')
      ELSE
        WRITE(IOUT,74)
   74   FORMAT(/14X,'X'/7X,'0-------'/7X,'I'/7X,'I'/7X,'I'/5X,'Y I')
      ENDIF
C
   80 RETURN
      END
C.......................................................................
C.......................................................................
      SUBROUTINE MESH(XS,YS,NV)
      REAL*8 X,WD,DIST,S
      COMMON/PICT/DELU,DELV,X0(2),XU(2),W(2),NSTOR
      DIMENSION NSTOR(140)
      COMMON/CGEOM2/LOCREG,NUMBOD,IROR,LR1,LR2,LDATA,NUMR,LBASE,LTMA
     *             ,LOCBOD,IDBG,KLOOP,PINF,LKOR,NOA,IST,NOREG,LVOL,LAREA
     *             ,LNUMR,LAIRC,LVOLTR,LLASTG,IRWGMT,NRTRU
      REAL*8 PINF
      INCLUDE 'pnimb'
      PARAMETER ( NWCOMB=NWCOMX )
      COMMON/COMBIN/MA(NWCOMB)
      REAL   FPD(NWCOMB)
      EQUIVALENCE (MA(1),FPD(1))
      DIMENSION X(2),WD(2)
C
      X(1)=XS
      X(2)=YS
      WD(1)=W(1)
      WD(2)=W(2)
      FNVM1=NV-1
      DIST0=FNVM1*DELV
      NV1=1
      DISTX=0.
   10 IF(NV1.GT.NV) GO TO 80
      CALL GETIR(X,NREG,0)
      NSTOR(NV1)=NREG
      NV1=NV1+1
      IF(NREG) 20 , 20 , 30
   20 X(1)=X(1)+DELV*W(1)
      X(2)=X(2)+DELV*W(2)
      DISTX=DISTX+DELV
      GO TO 10
   30 DIST=0.
      IR=NREG
   40 IF(NV1.GT.NV) GO TO 80
      CALL G1(X,WD,IR,KLOOP,DIST,S)
      IF(NREG.GE.1 .AND. NREG.LE.NRTRU)
     *  FPD(LVOLTR+NREG)=FPD(LVOLTR+NREG)+DELU*S
      DISTOT=DISTX+DIST
      NV2=FNVM1*(DISTOT/DIST0)+1
      NV2=MIN0(NV,NV2)
      IF(NV2.LT.NV1) GO TO 60
      DO 50 J=NV1,NV2
   50 NSTOR(J)=NREG
      IF(NV2.EQ.NV) GO TO 80
      NV1=NV2+1
   60 NREG=IR
      IF(NREG) 70 , 70 , 40
   70 DIST=FLOAT(NV2)*DELV
      X(1)=XS+DIST*W(1)
      X(2)=YS+DIST*W(2)
      DISTX=DIST
      GO TO 10
   80 RETURN
      END
C.......................................................................
C.......................................................................
      SUBROUTINE PRINTN(KXX,KYY,ATABLE,NTABLE)
      COMMON /PICT/DELU,DELV,X0,Y0,XU,YU,XV,YV,NSTOR
      DIMENSION ATABLE (NTABLE)
      DIMENSION AARAY(140),NSTOR(140)
      DATA NCOL/130/
C
      COMMON/IOFILE/IN,IOUT,IUERR,IARK,IPUNCH,IGMT,ITRMT,ITAPIO(2)
C
      XT=X0
      YT=Y0
      NV=NCOL
      NPAGES=(KYY-1)/NCOL+1
      DO 60 N=1,NPAGES
      WRITE (IOUT, 10 )
   10 FORMAT(1H1)
      XS=XT
      YS=YT
      K2=NCOL*N
      IF(K2-KYY) 30 , 30 , 20
   20 NV=KYY+NCOL-K2
   30 LINE=1
      DO 50 MM=1,KXX
      LINE=LINE+1
      CALL MESH(XS,YS,NV)
      DO 40 I=1,NV
      K=NSTOR(I) +1
      AARAY(I)=ATABLE(K)
   40 CONTINUE
      WRITE (IOUT, 70 )(AARAY(J),J=1,NV)
      XS=XS+DELU*XU
   50 YS=YS+DELU*YU
      XT=XT+NCOL*DELV*XV
      YT=YT+NCOL*DELV*YV
   60 CONTINUE
   70 FORMAT(1H ,130A1)
      RETURN
      END
C.......................................................................
C.......................................................................
      SUBROUTINE GETP(IR,XB)
C
C     GIVEN THE REGION INDEX IR, RETURNS A POINT XB(I) UNIFORMLY IN IR
C
      REAL*8 XB
      COMMON/CGEOM2/LOCREG,NUMBOD,IROR,IR1,IR2,LDATA(7),PINF,LKO(8),
     * LVOLTR,LLASTG,IRWGMT,NRTRU
      REAL*8 PINF
      INCLUDE 'pnimb'
      PARAMETER ( NWCOMB=NWCOMX )
      COMMON/COMBIN/MA(NWCOMB)
      REAL   FPD(NWCOMB)
      EQUIVALENCE (MA(1),FPD(1))
      DIMENSION XB(2)
      COMMON/GEOMR/NASCR,IREFL,AA(4),ITYP,KLOCR,NVR
      REAL*8 AA
      PARAMETER (MV=100)
      COMMON/REIZSO/NVRZ,XRZ(MV),YRZ(MV)
C
      COMMON/IOFILE/IN,IOUT,IUERR,IARK,IPUNCH,IGMT,ITRMT,ITAPIO(2)
C
C
      DIMENSION VX(100),VY(100)
      REAL*8 X,Y
C
CC   PICK
      IRP=MA(IR1+IR)
      IF(IRP.NE.MA(IR2+IR)) GO TO 130
      N=MA(LOCREG+IRP)
      NUM=MA(NUMBOD+IRP)
      I=N-3
      ISORG=0
      NB=0
      R1=1.E+30
      R2=-R1
      DO 70 J=1,NUM
      I=I+4
      IF(MA(I).EQ.IABS(NASCR) .AND. NUM.GT.1) GO TO 70
      LOCAT=MA(I+1)
      ITYPE=MA(LOCAT+2)
      ITYPE=IABS(ITYPE)
      NB=NB+1
      K=MA(LOCAT+6)+4
      GO TO ( 10 , 20 , 30 , 50 , 130 ),ITYPE
C CIR
   10 IF(ISORG.GT.1) GO TO 130
      IF(NB.GT.2) GO TO 130
      XC=FPD(K)
      YC=FPD(K+1)
      R=FPD(K+2)
      R1=AMIN1(R1,R)
      R2=AMAX1(R2,R)
      ISORG=1
      GO TO 70
C REC
   20 IF(ISORG.NE.0) GO TO 130
      IF(NB.GT.1) GO TO 130
      XC=FPD(K)
      YC=FPD(K+1)
      R1=FPD(K+2)
      R2=FPD(K+3)
      ISORG=2
      GO TO 70
C HEX
   30 IF(ISORG.NE.0) GO TO 130
      IF(NB.GT.1) GO TO 130
      NV=6
      DO 40 IV=1,NV
      L=K+6+(IV-1)*2
      VX(IV)=FPD(L)
      VY(IV)=FPD(L+1)
   40 CONTINUE
      ISORG=3
      GO TO 70
C POL
   50 IF(ISORG.NE.0) GO TO 130
      IF(NB.GT.1) GO TO 130
      NV=MA(K)
      DO 60 IV=1,NV
      L=K+6+(IV-1)*2
      VX(IV)=FPD(L)
      VY(IV)=FPD(L+1)
   60 CONTINUE
      ISORG=4
   70 CONTINUE
C
      IF(ISORG.LE.0) GO TO 130
      GO TO ( 80 , 100 , 110 , 110 ),ISORG
C CIR
   80 IF(R2.EQ.R1) R1=0.0
   90 C=RANF()
      R=R1*R1+C*(R2*R2-R1*R1)
      R=SQRT(R)
      C=RANF()
      C=C*6.28318
      XB(1)=XC+R*COS(C)
      XB(2)=YC+R*SIN(C)
      IF(NB.EQ.NUM) GO TO 120
      CALL GETIR(XB,IRG,0)
      IF(IRG.NE.IR) GO TO 90
      GO TO 120
C REC
  100 C=RANF()
      XB(1)=XC+C*R1
      C=RANF()
      XB(2)=YC+C*R2
      IF(NB.EQ.NUM) GO TO 120
      CALL GETIR(XB,IRG,0)
      IF(IRG.NE.IR) GO TO 100
      GO TO 120
C HEX/POL
  110 CALL POLIG(VX,VY,NV,X,Y)
      XB(1)=X
      XB(2)=Y
      CALL GETIR(XB,IRG,0)
      IF(IRG.NE.IR) GO TO 110
C
C  END PICK
  120 CONTINUE
      RETURN
C
C     REJECTION IN THE ALL-EMBEDDING FIGURE
  130 CONTINUE
      NLANCI=0
  140 NLANCI=NLANCI+1
      IF(NLANCI.LT.10 000) GO TO 160
      WRITE(IUERR, 150 ) IR
  150 FORMAT(' ***** TOO MANY TOSSES FOR SOURCE REGION',I5)
      CALL EXITN(1)
  160 CALL POLIG(XRZ,YRZ,NVRZ,X,Y)
      XB(1)=X
      XB(2)=Y
      CALL GETIR(XB,IRG,0)
      IF(IRG.NE.IR) GO TO 140
      RETURN
      END
C.......................................................................
C.......................................................................
      SUBROUTINE POLIG(VX,VY,NV,X,Y)
C
      DIMENSION VX(NV),VY(NV)
C
      REAL*8 X,Y
C
C     SCEGLIE UN PUNTO (X,Y) UNIFORMAMENTE
C     NEL POLIGONO CONVESSO DEFINITO DAGLI NV VERTICI (VX(I),VY(I))
C     ASSEGNATI IN SENSO ANTIORARIO
C
      PARAMETER (MV=100)
      DIMENSION AREA(MV-2)
C
      COMMON/IOFILE/IN,IOUT,IUERR,IARK,IPUNCH,IGMT,ITRMT,ITAPIO(2)
C
      IF(NV.GT.MV) THEN
        WRITE(IUERR,*) ' ***** POLIG ERROR: TOO MANY VERTICES'
        CALL EXITN(1)
      ENDIF
C
C                            CALCOLA (IL DOPPIO DEL-) LE AREE DEI
C                            TRIANGOLI CHE COMPONGONO IL POLIGONO
      NT=NV-2
      SUM=0.0
      DO 10 K=1,NT
      SUM=SUM+
     * (VX(1)*VY(K+1)-VX(K+1)*VY(1)) +
     * (VX(K+1)*VY(K+2)-VX(K+2)*VY(K+1)) +
     * (VX(K+2)*VY(1)-VX(1)*VY(K+2))
      AREA(K)=SUM
   10 CONTINUE
C                            SCEGLIE IL TRIANGOLO
      C=RANF()
      DO 20 I=1,NT
      K=I
      IF(C.LE.AREA(I)/AREA(NT)) GO TO 30
   20 CONTINUE
C                            RUOTA E TRASLA IL SISTEMA DI ASSI COSI' CHE
C                            OX COINCIDA CON V(K+1)-V(1)
   30 VX1=VX(1)
      VY1=VY(1)
      VX2=VX(K+1)
      VY2=VY(K+1)
      VX3=VX(K+2)
      VY3=VY(K+2)
      SINFI=VY2-VY1
      COSFI=VX2-VX1
      SUM=SQRT(COSFI**2+SINFI**2)
      COSFI=COSFI/SUM
      SINFI=SINFI/SUM
C     X1P=(VX1-VX1)*COSFI+(VY1-VY1)*SINFI
C     Y1P=-(VX1-VX1)*SINFI+(VY1-VY1)*COSFI
      X2P=(VX2-VX1)*COSFI+(VY2-VY1)*SINFI
C     Y2P=-(VX2-VX1)*SINFI+(VY2-VY1)*COSFI
      Y2P=0.0
      X3P=(VX3-VX1)*COSFI+(VY3-VY1)*SINFI
      Y3P=-(VX3-VX1)*SINFI+(VY3-VY1)*COSFI
C                            NEL NUOVO RIFERIMENTO I VERTICI SONO
C                            (0,0), (X2P,0), (X3P,Y3P)
C
C                            SCEGLIE L'ALTEZZA YP
      C=RANF()
      YP=Y3P*(1.0-SQRT(C))
C                            CALCOLA LE INTERCETTE DELLA PARALLELA
C                            AD OX AD ALTEZZA YP CON I LATI 3-1 E 3-2
      XL=X3P/Y3P*YP
      XR=X2P+((X3P-X2P)/Y3P)*YP
C                            CALCOLA XP
      C=RANF()
      XP=XL+C*(XR-XL)
C                            TORNA AL RIFERIMENTO ORIGINALE
      X=VX1+XP*COSFI-YP*SINFI
      Y=VY1+XP*SINFI+YP*COSFI
      RETURN
      END
C.......................................................................
C.......................................................................
      SUBROUTINE REFLEX(W)
      IMPLICIT REAL*8 (A-H,O-Z)
      COMMON/PAREM/XB(2),WB(2),IR,IRPRIM,
     *             RIN,ROUT,DIST,NASC,LSURF,NBO,LRI,LRO,LOOP,ITYPE
      COMMON/CGEOM2/LOCREG,NUMBOD,IROR,LR1,LR2,LDATA,NUMR,LBASE,LTMA
     *             ,LOCBOD,IDBG,KLOOP,PINF,LKOR,NOA,IST,NOREG,LVOL,LAREA
     *             ,LNUMR,LAIRC,LVOLTR,LLASTG,IRWGMT,NRTRU
      COMMON/GEOMR/NASCR,IREFL,A,B,C,EPS,ITYP,KLOCR,NVR
      DIMENSION P0(2),P1(2)
      DIMENSION W(2)
      INCLUDE 'pnimb'
      PARAMETER ( NWCOMB=NWCOMX )
      COMMON/COMBIN/MA(NWCOMB)
      REAL   FPD(NWCOMB)
      EQUIVALENCE(MA(1),FPD(1))
C
      COMMON/IOFILE/IN,IOUT,IUERR,IARK,IPUNCH,IGMT,ITRMT,ITAPIO(2)
C
CCCC  SAVE
C
      LSURF=-LSURF
      IF(NASC.EQ.NASCR) GO TO 20
      IF(NASC.EQ.-NASCR) GO TO 170
      WRITE(IUERR, 10 ) NASCR,ITYP
   10 FORMAT(' PARTICLE LOST AT BOUNDARY OF FIG.',I4,'  TYPE',I4)
      CALL EXITN(1)
C
C     PERIODICITA'
   20 DO 30 K=1,2
   30 XB(K)=XB(K)+WB(K)*DIST*(1.-EPS)
      GO TO ( 40 , 50 , 100 , 40 ),ITYP
   40 CALL ERRTRA
      CALL EXITN(1)
   50 GO TO ( 60 , 70 , 80 , 90 ),LSURF
   60 XB(2)=XB(2)-B
      GO TO 250
   70 XB(1)=XB(1)+A
      GO TO 250
   80 XB(2)=XB(2)+B
      GO TO 250
   90 XB(1)=XB(1)-A
      GO TO 250
  100 GO TO ( 110 , 120 , 130 , 140 , 150 , 160 ),LSURF
  110 XB(1)=XB(1)-A
      XB(2)=XB(2)-(B+C)
      GO TO 250
  120 XB(1)=XB(1)+A
      XB(2)=XB(2)-(B+C)
      GO TO 250
  130 XB(1)=XB(1)+(A+A)
      GO TO 250
  140 XB(1)=XB(1)+A
      XB(2)=XB(2)+(B+C)
      GO TO 250
  150 XB(1)=XB(1)-A
      XB(2)=XB(2)+(B+C)
      GO TO 250
  160 XB(1)=XB(1)-(A+A)
      GO TO 250
C
C    RIFLESSIONE
  170 DO 180 K=1,2
  180 XB(K)=XB(K)+WB(K)*DIST*(1.-EPS)
      GO TO ( 190 , 200 , 230 , 230 ),ITYP
C     CIR
  190 P0(1)=XB(1)
      P0(2)=XB(2)
      P1(1)=0.0D0
      P1(2)=(XB(1)-A)/(XB(2)-B)*XB(1)+XB(2)
      GO TO 240
C     REC
  200 GO TO ( 210 , 220 , 210 , 220 ),LSURF
  210 W(2)=-W(2)
      WB(2)=W(2)
      GO TO 250
  220 W(1)=-W(1)
      WB(1)=W(1)
      GO TO 250
C     HEX,ARB
  230 L=KLOCR+(LSURF-1)*2
      P0(1)=FPD(L)
      P0(2)=FPD(L+1)
      L=L+2
      IF(LSURF.EQ.NVR) L=KLOCR
      P1(1)=FPD(L)
      P1(2)=FPD(L+1)
  240 SINA=P1(2)-P0(2)
      COSA=P0(1)-P1(1)
      TRAN1=COSA**2-SINA**2
      TRAN2=-2.0*SINA*COSA
      U=W(1)*TRAN1+W(2)*TRAN2
      V=-W(2)*TRAN1+W(1)*TRAN2
      D=DSQRT(U**2+V**2)
      W(1)=U/D
      W(2)=V/D
      WB(1)=W(1)
      WB(2)=W(2)
C
  250 RETURN
      END
C.......................................................................
C.......................................................................
      SUBROUTINE PILOTA(X,W,IREG,DIST,ISENT,S)
C     X(2)  POSIZIONE ATTUALE DELLA PARTICELLA
C     W(2)  COSENI DIRETTORI
C     IREG  INDICE DI REGIONE ATTUALE
C     DIST  DISTANZA DA PERCORRERE
C     ISENT INDICE DI CONTROLLO
C           =0 SE INIZIA IL TRACCIAMENTO DI UN NUOVO RAGGIO
C           =1 SE PROSEGUE IL TRACCIAMENTO (E QUINDI LA PARTICELLA
C              E' SITUATA SUL CONFINE FRA DUE REGIONI)
C           =-1 SE LA PARTICELLA VIENE SPOSTATA PER PERIODICITA'
C           =-2 SE LA PARTICELLA HA SUBITO UNA RIFLESSIONE
C      S    DISTANZA FINO AL PROSSIMO CONFINE (DI REGIONE O
C           DI CONTORNO)
C      X  VIENE AGGIORNATO AL NUOVO PUNTO.
C      SE IL CAMMINO SI ESAURISCE NELLA REGIONE, ISENT VIEN POSTO =0,
C      ALTRIMENTI ISENT E' POSTO =-2,-1,1, X E' POSTO SUL CONFINE
C      DELLA NUOVA REGIONE, IREG VIENE AGGIORNATO, DIST DIVIENE LA
C      DISTANZA EFFETTIVAMENTE PERCORSA (INALTERATA O =S).
      IMPLICIT REAL*8 (A-H,O-Z)
      DIMENSION X(2),W(2),XX(2)
      COMMON/PAREM/XB(2),WB(2),IRR,IRPRIM,
     *             RIN,ROUT,DISTP,NASC,LSURF,NBO,LRI,LRO,LOOP,ITYPE
      COMMON/CGEOM2/LOCREG,NUMBOD,IROR,LR1,LR2,LDATA,NUMR,LBASE,LTMA
     *             ,LOCBOD,IDBG,KLOOP,PINF,LKOR,NOA,IST,NOREG,LVOL,LAREA
     *             ,LNUMR,LAIRC,LVOLTR,LLASTG,IRWGMT,NRTRU
      COMMON/GEOMR/NASCR,IREFL,A,B,C,EPS,ITYP,KLOCR,NVR
C
      SAVE
C
      COMMON/IOFILE/IN,IOUT,IUERR,IARK,IPUNCH,IGMT,ITRMT,ITAPIO(2)
C
      DATA UPEPS/1.0001/
C
      IF(ISENT*(ISENT+2)) 20 , 10 , 20
   10 DOLD=0.
      IR=IREG
      XX(1)=X(1)
      XX(2)=X(2)
      GO TO 30
   20 DOLD=DISTP
      XX(1)=XB(1)
      XX(2)=XB(2)
   30 D=DOLD
      IF(IDBG.LT.0) WRITE(IOUT,35) 'INTO',
     *              XX(1)+W(1)*D,XX(2)+W(2)*D,IR
   35 FORMAT(2X,A,' G1(1) X=',1P,E12.5,' Y=',E12.5,' IR=',I4)
      CALL G1(XX,W,IR,KL,D,S)
      IF(IDBG.LT.0) WRITE(IOUT,35) 'FROM',
     *              XX(1)+W(1)*D,XX(2)+W(2)*D,IR
      DMORE=S-DIST
      IF(DMORE) 40 , 40 , 90
   40 ISENT=1
      IF(IR.NE.IREFL) GO TO 80
      IF(NASC.EQ.IABS(NASCR)) GO TO 50
      IREG=-3
      GO TO 100
   50 CALL REFLEX(W)
      IF(NASCR) 60 , 60 , 70
   60 X(1)=XB(1)
      X(2)=XB(2)
      S=S*(1.+EPS)
      DIST=S
      ISENT=-2
      GO TO 110
   70 XX(1)=XB(1)
      XX(2)=XB(2)
      D=0.
      IF(IDBG.LT.0) WRITE(IOUT,*) ' INTO G1(2)', XX,IR
      CALL G1(XX,W,IR,KL,D,SDUM)
      IF(IDBG.LT.0) WRITE(IOUT,*) ' FROM G1(2)', XX,IR
      ISENT=-1
   80 DIST=S
      IREG=IR
      D=D*UPEPS
      GO TO 100
   90 D=D-DMORE
      ISENT=0
  100 X(1)=XB(1)+W(1)*D
      X(2)=XB(2)+W(2)*D
  110 RETURN
      END
C.......................................................................
C.......................................................................
      SUBROUTINE SETRFL
C
      COMMON/CGEOM2/LOCREG,NUMBOD,IROR,LR1,LR2,LDATA,NUMR,LBASE,LTMA
     *             ,LOCBOD,IDBG,KLOOP,PINF,LKOR,NOA,IST,NOREG,LVOL,LAREA
     *             ,LNUMR,LAIRC,LVOLTR,LLASTG,IRWGMT,NRTRU
      REAL*8 PINF
      COMMON/GEOMR/NASCR,IREFL,A,B,C,EPS,ITYP,KLOCR,NVR
      REAL*8 A,B,C,EPS
      PARAMETER (MV=100)
      COMMON/REIZSO/NVRZ,XRZ(MV),YRZ(MV)
      INCLUDE 'pnimb'
      PARAMETER ( NWCOMB=NWCOMX )
      COMMON/COMBIN/MA(NWCOMB)
      REAL   FPD(NWCOMB)
      EQUIVALENCE(MA(1),FPD(1))
C
      COMMON/IOFILE/IN,IOUT,IUERR,IARK,IPUNCH,IGMT,ITRMT,ITAPIO(2)
C
C
      IAREF=IABS(IREFL)
      IRP=MA(LR1+IAREF)
      N=MA(LOCREG+IRP)+1
      NUM=MA(NUMBOD+IRP)
      IF(NUM.EQ.2) GO TO 30
   10 WRITE(IUERR, 20 ) IAREF,NUM
   20 FORMAT(' ILLEGAL BOUNDARY REGION:',I4,' DEFINED BY',I3,' FIGURES')
      CALL EXITN(1)
   30 N1=MA(N)
      N2=MA(N+4)
      IF(N1*N2 .GE.0) GO TO 10
      NASCR=MIN0(N1,N2)
      IF(IREFL.GT.0) NASCR=-NASCR
      IREFL=IAREF
      K=MA(LOCBOD+IABS(NASCR))
      ITYP=MA(K+2)
      IF(.NOT.
     *        (
     *        (ITYP.GE.5)
     *        .OR.
     *        (ITYP.LE.1)
     *        .OR.
     *        (NASCR.GT.0 .AND. ITYP.GE.4)
     *        )
     *  ) GO TO 50
      WRITE(IUERR, 40 ) NASCR
   40 FORMAT(' ILLEGAL BOUNDARY CONDITION FOR FIG.',I4)
      CALL EXITN(1)
   50 CONTINUE
      K=MA(K+6)
      KLOCR=K+10
      GO TO ( 150 , 60 , 70 , 80 , 150 ), ITYP
C            CIR  REC  HEX  POL  TSE
   60 NVR=4
      A=FPD(K+6)
      B=FPD(K+7)
      GO TO 90
   70 NVR=6
      A=FPD(K+6)
      B=FPD(K+7)
      C=FPD(K+8)
      GO TO 90
   80 NVR=MA(K+4)
C        VERTICES OF THE ALL-EMBEDDING FIGURE (FOR SOURCE REJECTION)
   90 NVRZ=NVR
      IF(NVRZ.GT.MV) THEN
        WRITE(IUERR,*) ' ***** SETRFL ERROR: TOO MANY VERTICES'
        CALL EXITN(1)
      ENDIF
      DO 100 I=1,NVRZ
      XRZ(I)=FPD(KLOCR+(I-1)*2)
  100 YRZ(I)=FPD(KLOCR+(I-1)*2+1)
C        MACHINE PRECISION
      EPS=1.
      DO 110 I=1,100
      EPS=EPS/2.
      IF((1.+EPS).EQ.1.) GO TO 120
  110 CONTINUE
  120 IF(EPS-1.E-9) 140 , 140 , 130
  130 EPS=0.01
      GO TO 150
  140 EPS=0.0001
  150 CONTINUE
      RETURN
      END
C.......................................................................
C.......................................................................
      SUBROUTINE CHKRXY(IR,X,Y,MARK)
C
C     GIVEN THE REGION INDEX IR AND POINT (X,Y), DETERMINE IF THE POINT
C     IS INTERNAL TO REGION IR.
C     LIMITATIONS: REGION IR IS CHECKED ONLY IF IT IS COMPOSED OF JUST
C     ONE POLYGON.
C
C     MARK = -1 NON CHECKED
C       "     0 EXTERNAL
C       "     1 INTERNAL
C
      REAL*8 X,Y
C
      COMMON/CGEOM2/LOCREG,NUMBOD,IROR,IR1,IR2,LDATA(7),PINF,LKO(8),
     * LVOLTR,LLASTG,IRWGMT,NRTRU
      REAL*8 PINF
      INCLUDE 'pnimb'
      PARAMETER ( NWCOMB=NWCOMX )
      COMMON/COMBIN/MA(NWCOMB)
      REAL   FPD(NWCOMB)
      EQUIVALENCE (MA(1),FPD(1))
      COMMON/GEOMR/NASCR,IREFL,AA(4),ITYP,KLOCR,NVR
      REAL*8 AA
C
      REAL*8 XD(2)
C
      COMMON/IOFILE/IN,IOUT,IUERR,IARK,IPUNCH,IGMT,ITRMT,ITAPIO(2)
C
C
      PARAMETER (MV=100)
      DIMENSION VX(MV),VY(MV)
C
      IRP=MA(IR1+IR)
      IF(IRP.NE.MA(IR2+IR)) GO TO 80
      N=MA(LOCREG+IRP)
      NUM=MA(NUMBOD+IRP)
      IF(NUM.GT.1) GOTO 80
      I=N-3
      I=I+4
      LOCAT=MA(I+1)
      ITYPE=MA(LOCAT+2)
      IF(ITYPE.LE.0) GOTO 80
      K=MA(LOCAT+6)+4
      GO TO ( 80 , 80 , 80 , 50 , 80 ),ITYPE
C POL
   50 CONTINUE
      NV=MA(K)
      IF(NV.GT.MV) THEN
        WRITE(IUERR,*) ' ***** CHKRXY ERROR: TOO MANY VERTICES'
        CALL EXITN(1)
      ENDIF
      DO 60 IV=1,NV
        L=K+6+(IV-1)*2
        VX(IV)=FPD(L)
        VY(IV)=FPD(L+1)
   60 CONTINUE
      XD(1)=X
      XD(2)=Y
      CALL GCHECK(NV,VX(1),VY(1),XD(1),MARK)
      GOTO 90
C
C
   80 CONTINUE
      MARK=-1
C
   90 CONTINUE
CT    IF(MARK.EQ.0) THEN
CT      XD(1)=X
CT      XD(2)=Y
CT      CALL GETIR(XD(1),IRX,0)
CT      WRITE(6,*) ' CHKRXY IR=',IR,' IBOD=',MA(I),' MARK=',MARK
CT   &            ,' IRX=',IRX
CT    ENDIF
      RETURN
      END
C.......................................................................
C.......................................................................
      SUBROUTINE GCHECK(NV,XV,YV,XB,MARK)
C
C     CHECK WHETHER POINT XB(*) IS INTERNAL TO POLYGON (XV(J),YV(J))
C     MARK=0 EXTERNAL
C       "  1 INTERNAL
C
      IMPLICIT REAL*8 (A-H,O-Z)
      REAL*4 XV,YV
      DIMENSION XV(NV),YV(NV),XB(2)
      DIMENSION WB(2),TT(2),LR(2)
C
      DATA EPS/1.0E-5/,WB/0.8,0.6/
C
      LSTO=0
      TT(1)=0.0
      RIN=+1.0D+30
      ROUT=-1.0D+30
      DO 120 I=1,NV
        IF(LSTO.EQ.2) GO TO 120
        XI=XV(I)
        YI=YV(I)
        IP1=I+1
        IF(IP1.GT.NV) IP1=1
        XIP1=XV(IP1)
        YIP1=YV(IP1)
        D=YIP1-YI
        IF(D) 90 , 80 , 90
   80   FNUM=YI-XB(2)
        DENO=WB(2)
        GO TO 100
   90   D=(XIP1-XI)/D
        FNUM=XI-XB(1)-D*(YI-XB(2))
        DENO=WB(1)-D*WB(2)
  100   IF(DENO) 110 , 120 , 110
  110   T=FNUM/DENO
        XP=XB(1)+WB(1)*T
        IF(XI.EQ.XIP1) XP=XI
        YP=XB(2)+WB(2)*T
        IF(YI.EQ.YIP1) YP=YI
        FMIN=DMIN1(XI,XIP1)
        FMAX=DMAX1(XI,XIP1)
        IF(XP.LT.FMIN .OR. XP.GT.FMAX) GO TO 120
        FMIN=DMIN1(YI,YIP1)
        FMAX=DMAX1(YI,YIP1)
        IF(YP.LT.FMIN .OR. YP.GT.FMAX) GO TO 120
        IF(LSTO.EQ.1 .AND. DABS(T-TT(1)).LE.EPS) GO TO 120
        LSTO=LSTO+1
CW      WRITE(6,*) ' I=',I,' LSTO=',LSTO,' T=',T
        TT(LSTO)=T
        LR(LSTO)=I
  120 CONTINUE
      IF(LSTO.EQ.0) GO TO 170
      RIN=TT(1)
      ROUT=TT(2)
      LRI=LR(1)
      LRO=LR(2)
      IF(RIN.LT.ROUT) GO TO 170
      RIN=TT(2)
      ROUT=TT(1)
      LRI=LR(2)
      LRO=LR(1)
C
  170 CONTINUE
      IF(LSTO.EQ.2 .AND. (RIN.LT.0.0 .AND. ROUT.GT.0.0)) THEN
        MARK=1
      ELSE
        MARK=0
      ENDIF
      RETURN
      END
C.......................................................................
C.......................................................................
      SUBROUTINE PILS(DISTSR,MDSTSR,NDSTSR)
CCCC  SAVE
C
C     POICHE' LA S.B. PILOTA FORNISCE SOLO LA DISTANZA AL
C     PROSSIMO CONFINE DI SOTTOREGIONE IRP E NON A QUELLO DI IREGP,
C     IL FLUSSO NELLA REGIONE IREG VIENE OTTENUTO SOMMANDO
C     I SINGOLI CONTRIBUTI ATTESI NELLE SOTTOREGIONI IR
C     TALI CHE MASTER(KOIR+IR)=IREG  (DISTSR(IR)=DISTANZA ATTESA IN IR)
C     (LA S.R. PILOTA VIENE CHIAMATA SOLO FINO A QUANDO
C      DIST E' ESAURITA)
C
C----------------------------------(SEE SYMBOLS MEANING IN S.R. INPUT)
      INCLUDE 'pnimb'
      PARAMETER (MRG=MRGX ,MZN=MRG-2 ,MCH=41 ,MCC=MCCX, MWAC=13 )
      PARAMETER (MBS=MBSX ,MSD=MBS   ,MSC=2 )
      PARAMETER (MIO=3    ,MCP=6)
      PARAMETER (MEG=5    ,MIXS=10   ,MLEAK=9)
C---------------------------------------------------
C
      COMMON/STOGEO/IR,IREG,IREG3D,ISENT,LEAVES,XIN,YIN,ZIN,
     * COSP,SINP,COST,SINT,TANT,COSKT,DIST,PILX,IRZ,IREGZ,IREG3Z,
     * IZIN,IZ,ISSOU,X,Y,Z
      REAL*8 X,Y,Z
C
C
      DIMENSION DISTSR(MDSTSR)
C
C
      PARAMETER (NDEBUG=17,MSPLIT=500,NBANK=25)
      PARAMETER (MDEBWR=30,MDEBPT=200)
      COMMON/CHISTO/KOSE,KOST,NHIST,NST,FNST,NSG,FNSG,
     * INIZ,ICORR,KINDPR,NEDIT,ISTHEL,IHOR,
     * DECIMA,PLIFE,WTHRES,TAGLIO,WCUT,NGEV,EGEV(MEG),TCUT,
     * IDEBIN,IDLOOP,IDEBUG,KODDBG,IHDBG,ICDBG,DEBUG(NDEBUG),
     * NDEBWR,NDEBPT,IDBHST(MDEBWR),
     * NSPLIT,MAXSON,MAXSOH,BANK(MSPLIT,NBANK),WPESO(MRG)
     *,IREAD,IWRITE,IBEAM,IONTOW,IDMC,IDMCO
C
      PARAMETER ( NWCOMB=NWCOMX )
      COMMON/COMBIN/MASTER(NWCOMB)
      DIMENSION ASTER(NWCOMB)
      EQUIVALENCE(MASTER(1),ASTER(1))
C
      COMMON/CGEOM2/LOCREG,NUMBOD,IROR,LR1,LR2,LDATA,NUMR,LBASE,LTMA
     *             ,LOCBOD,IDBG,KLOOP,PINF,LKOR,NOA,IST,NOREG,LVOL,LAREA
     *             ,LNUMR,LAIRC,LVOLTR,LLASTG,IRWGMT,NRTRU
      REAL*8 PINF
C
C
      COMMON/CGEOMT/KREG,KREGM1,IR3DST,IR2DST,AREAD(MRG),
     * KONDC,KONDZ,I3D,KREG3D,LREG3D,LQUOTA,LDZETA,KSXY3D,NZETA
C
      DIMENSION XCG(2),WCG(2)
      REAL*8 XCG,WCG,DISTCG,DISTOT
C
      COMMON/IOFILE/IN,IOUT,IUERR,IARK,IPUNCH,IGMT,ITRMT,ITAPIO(2)
C
C                               POSSIBILITA' DI CAMBIO DI STRATO
C                               -------------------------------
      IF(I3D.EQ.0) GO TO 40
      LEAVES=0
      ZIN=Z
      IZIN=IZ
      L=LREG3D+(IREG3D-1)*4
      IBASSO=MASTER(L+1)
      IALTO=MASTER(L+2)
      BASSO=ASTER(L+4)
      ALTO=ASTER(L+3)
C                               TANGENTE DI T(ETA)
      IF(COST.EQ.0.0) COST=1.0E-04
      IF(SINT.EQ.0.0) SINT=1.0E-04
      TANT=SINT/COST
      ZA=Z+DIST/TANT
      IF(COST) 20 , 10 , 10
C                               VERSO L'ALTO DELLA REGIONE INIZIALE
C                               DIST=MIN(DIST,(ALTO-Z)*TANT)
   10 PILMAX=(ALTO-Z)*TANT
      IF(ZA.LE.ALTO) GO TO 40
C                               USCIRA' DALL'ALTO DELLA REGIONE, A MENO
C                               CHE NON CAMBI REGIONE NEL PIANO XY
      LEAVES=+1
      GO TO 30
C                               VERSO IL BASSO DELLA REGIONE INIZIALE
C                               DIST=MIN(DIST,(BASSO-Z)*TANT)
   20 PILMAX=(BASSO-Z)*TANT
      IF(ZA.GT.BASSO) GO TO 40
C                               USCIRA' DAL BASSO DELLA REGIONE, A MENO
C                               CHE NON CAMBI REGIONE NEL PIANO XY
      LEAVES=-1
   30 DIST=PILMAX
   40 CONTINUE
C
C                               SIMULAZIONE NEL PIANO (X,Y)
C                               --------------------------
      IREG1=IREG
      DUSED=0.
      PILX=0.0
      NDSTSR=0
      XCG(1)=X
      XCG(2)=Y
      WCG(1)=COSP
      WCG(2)=SINP
   50 DISTCG=DIST-DUSED
      IF(IDBG.LT.0) WRITE(IOUT,55) 'INTO', XCG,IR,IREG
   55 FORMAT(1X,A,' PILOTA X=',1P,E12.5,' Y=',E12.5,
     &       ' IR=',I4:' IREG=',I4)
      CALL PILOTA(XCG,WCG,IR,DISTCG,ISENT,DISTOT)
      IF(IDBG.LT.0) WRITE(IOUT,55) 'FROM', XCG,IR
      IF(IR.LE.0 .OR. IR.GT.NRTRU) RETURN
      DUSED=DUSED+DISTCG
      NDSTSR=NDSTSR+1
      IF(NDSTSR.GT.MDSTSR) THEN
        IR=-2
        RETURN
      ENDIF
      DISTSR(NDSTSR)=DISTOT
      PILX=PILX+DISTOT
      IF(ISENT) 60 , 70 , 60
   60 IREG=MASTER(LKOR+IR)
      IF(IREG-IREG1) 70 , 50 , 70
   70 X=XCG(1)
      Y=XCG(2)
      COSP=WCG(1)
      SINP=WCG(2)
      DIST=DUSED
      IF(IREG.GT.1) GO TO 80
C                                   FUGA (ENTRA REGIONE 1)
      ISENT=-5
      GO TO 80
C                             TERMINATO TRACCIAMENTO IN XY
   80 IF(IR.LE.0) RETURN
      IF(I3D) 90 , 90 , 100
   90 IREG3D=IREG
      RETURN
C                               CONTROLLO FINALE SULLA Z
C                               -----------------------
C                               (SE CAMBIA REGIONE IN ALTEZZA)
  100 CONTINUE
      IF(PILX.GT.PILMAX) DISTSR(NDSTSR)=DISTSR(NDSTSR)-(PILX-PILMAX)
C                               TENDEVA AD USCIRE DALLA REGIONE LUNGO Z?
      IF(LEAVES) 120 , 110 , 220
C                                   NON TENDEVA AD USCIRE
  110 Z=Z+DIST/TANT
      IF(Z.GE.ALTO) Z=ALTO*0.9999
      IF(Z.LE.BASSO) Z=BASSO*1.0001
      CALL FINDV(Z,ASTER(LQUOTA+1),NZETA,IZ)
C                             PU0' AVER CAMBIATO REGIONE IN XY
      IREG3D=MASTER(KSXY3D+(IZ-1)*KREG+IREG)
      RETURN
C                                 TENDE AD USCIRE DALLA REGIONE DA SOTTO
C                                   NUOVA REGIONE IN XY (O CONTORNO)?
  120 IF(ISENT) 140 , 130 , 140
C                                      STESSA REGIONE IN XY
C                                      ESCE DAL BASSO
  130 GO TO 150
C                                      NUOVA REGIONE IN XY (O CONTORNO)
  140 Z=Z+DIST/TANT
      IF(Z.GE.BASSO) GO TO 210
C                                      ESCE DAL BASSO
  150 Z=BASSO
      IZ=IBASSO-1
      IF(IZ.GT.0) GO TO 200
C
      GO TO ( 170 , 180 , 160 ), KONDZ
C                               FUGA A Z=0.0
  160 ISENT=-5
      IZ=1
      RETURN
C                               PERIODICITA' A Z=0.0
  170 Z=ASTER(LQUOTA+NZETA)*0.9999
      IZ=NZETA
      GO TO 190
C                               RIFLESSIONE A Z=0.0
  180 COST=-COST
      IZ=1
C
  190 LEAVES=0
      ISENT=-2
C                               NUOVA REGIONE LUNGO Z
  200 IREG3D=MASTER(KSXY3D+(IZ-1)*KREG+IREG)
      RETURN
C                                   ESCE DALLA REGIONE LATERALMENTE
  210 CALL FINDV(Z,ASTER(LQUOTA+1),NZETA,IZ)
      LEAVES=0
      IREG3D=MASTER(KSXY3D+(IZ-1)*KREG+IREG)
      RETURN
C                                 TENDE AD USCIRE DALLA REGIONE DA SOPRA
C                                   NUOVA REGIONE IN XY (O CONTORNO)?
  220 IF(ISENT) 240 , 230 , 240
C                                      STESSA REGIONE IN XY
C                                      ESCE DALL'ALTO
  230 GO TO 250
C                                      NUOVA REGIONE IN XY (O CONTORNO)
  240 Z=Z+DIST/TANT
      IF(Z.LE.ALTO) GO TO 310
C                                      ESCE DALL'ALTO
  250 Z=ALTO
      IZ=IALTO+1
      IF(IZ.LE.NZETA) GO TO 300
C
      GO TO ( 270 , 280 , 260 ), KONDZ
C                               FUGA A Z=ASTER(LQUOTA+NZETA)
  260 ISENT=-5
      IZ=NZETA
      RETURN
C                               PERIODICITA' A ASTER(LQUOTA+NZETA)
  270 Z=0.0001
      IZ=1
      GO TO 290
C                               RIFLESSIONE A ASTER(LQUOTA+NZETA)
  280 COST=-COST
      IZ=NZETA
C
  290 LEAVES=0
      ISENT=-2
C                               NUOVA REGIONE LUNGO Z
  300 IREG3D=MASTER(KSXY3D+(IZ-1)*KREG+IREG)
      RETURN
C                                   ESCE DALLA REGIONE LATERALMENTE
  310 CALL FINDV(Z,ASTER(LQUOTA+1),NZETA,IZ)
      LEAVES=0
      IREG3D=MASTER(KSXY3D+(IZ-1)*KREG+IREG)
      RETURN
      END
C.......................................................................
C.......................................................................
      SUBROUTINE FINDV(Z,QUOTA,NZETA,IZ)
      DIMENSION QUOTA(*)
      REAL*8 Z
      DO 10 I=1,NZETA
      IZ=I
      IF(Z.LE.QUOTA(IZ)) GO TO 20
   10 CONTINUE
   20 RETURN
      END
C.......................................................................
C.......................................................................
      SUBROUTINE FLXTAU(SIGMA,SINT,DISTSR,NDSTSR,DXYMAX,DISTXY,ITAU,
     *                  FLUX)
C
C     SIGMA = MACROSCOPIC X.S. OF CURRENT REGION
C     SINT
C     DISTSR(K) = DISTANCE TRAVELLED IN SUBREG. K IN OXY UNTIL NEXT
C                 REGION
C     NDSTSR = NO. OF SUBREGION IN CURRENT REGION
C     DXYMAX = MAX DISTANCE TO BE TRAVELLED (IF TIME-CUT)
C     DISTXY = ACTUAL DISTANCE TRAVELLED (TO BOUNDARY OR COLLISION)
C     ITAU   = FLUX ESTIMATOR MODEL
C     FLUX   = FLUX ESTIMATOR
C
      DIMENSION DISTSR(NDSTSR)
C
      FLUX=0.0
      IF(NDSTSR.LE.0) GO TO 40
C
      IF(ITAU.LE.1) THEN
        DXY=0.0
        DO 30 K=1,NDSTSR
          DXY=DXY+DISTSR(K)
   30   CONTINUE
        DXY=AMIN1(DXY,DXYMAX)
        X=SIGMA*DXY/SINT
        IF(X.LE.1.0E-05) THEN
          FLUX=DXY/SINT
        ELSE
          FLUX=(1.-EXPF(-X))/SIGMA
        ENDIF
      ELSE
        FLUX=DISTXY/SINT
      ENDIF
C
   40 RETURN
      END
C.......................................................................
C.......................................................................
      FUNCTION EXPF(X)
      EXPF=0.
      IF(X.GT.-8.) EXPF=EXP(X)
      RETURN
      END
C.......................................................................
C.......................................................................
      SUBROUTINE TALETE(IMIN,IMAX,V)
C
C     RIPARTISCE LA DISTANZA VERA PERCORSA IN UNO STRATO TRA GLI NZETA
C     SOTTOSTRATI (PER CALCOLARE IL FLUSSO ASSIALE)
C
C----------------------------------(SEE SYMBOLS MEANING IN S.R. INPUT)
      INCLUDE 'pnimb'
      PARAMETER (MRG=MRGX ,MZN=MRG-2 ,MCH=41 ,MCC=MCCX, MWAC=13 )
      PARAMETER (MBS=MBSX ,MSD=MBS   ,MSC=2 )
      PARAMETER (MIO=3    ,MCP=6)
      PARAMETER (MEG=5    ,MIXS=10   ,MLEAK=9)
C---------------------------------------------------
      DIMENSION V(*)
C     DIMENSION V(NZETA) NEL PROG CHIAMANTE
C
      PARAMETER ( NWCOMB=NWCOMX )
      COMMON/COMBIN/MASTER(NWCOMB)
      DIMENSION ASTER(NWCOMB)
      EQUIVALENCE(MASTER(1),ASTER(1))
C
      COMMON/CGEOMT/KREG,KREGM1,IR3DST,IR2DST,AREAD(MRG),
     * KONDC,KONDZ,I3D,KREG3D,LREG3D,LQUOTA,LDZETA,KSXY3D,NZETA
C
      COMMON/STOGEO/IR,IREG,IREG3D,ISENT,LEAVES,XIN,YIN,ZIN,
     * COSP,SINP,COST,SINT,TANT,COSKT,DIST,PILX,IRZ,IREGZ,IREG3Z,
     * IZIN,IZ,ISSOU,X,Y,Z
      REAL*8 X,Y,Z
C
      COMMON/IOFILE/IN,IOUT,IUERR,IARK,IPUNCH,IGMT,ITRMT,ITAPIO(2)
C
C
C
      IF(IZ-IZIN) 20 , 10 , 30
   10 IMIN=IZ
      IMAX=IZ
      V(IMIN)=DIST/SINT
      RETURN
   20 IMIN=IZ
      IMAX=IZIN
      ZMIN=Z
      ZMAX=ZIN
      GO TO 40
   30 IMIN=IZIN
      IMAX=IZ
      ZMIN=ZIN
      ZMAX=Z
   40 ACOST=ABS(COST)
      V(IMIN)=(ASTER(LQUOTA+IMIN)-ZMIN)/ACOST
      V(IMAX)=(ZMAX-ASTER(LQUOTA+IMAX-1))/ACOST
      IP1=IMIN+1
      IF(IP1.EQ.IMAX) GO TO 60
      IP2=IMAX-1
      DO 50 I=IP1,IP2
   50 V(I)=ASTER(LDZETA+I)/ACOST
   60 RETURN
      END
C.......................................................................
C.......................................................................
      FUNCTION RANF()
      CALL RANDOM( RAND )
      RANF = RAND
CW    WRITE(6,*) ' RAND=',RAND
CW    CALL ERRTRA
      RETURN
      END
C     ..................................................................
      SUBROUTINE RANDOM(FL)
C
C     IBM SPECIFIC
C
      IMPLICIT NONE
      SAVE
C
      INTRINSIC MOD
C
C R*8 REAL*8  MODULO,MOLTIP,RAND,MULCOR
      INTEGER MODULO,MOLTIP,RAND,MULCOR
      INTEGER MAXINT,PERIOD,XFIRST,XLAST,MHIST,MAXRND,K
      REAL    FL
C
      PARAMETER ( MAXINT = 2 147 483 647 )
C
      PARAMETER ( MODULO =   268 435 456 )
      PARAMETER ( MOLTIP =    41 475 557 )
      PARAMETER ( PERIOD =    67 108 864 )
C
C
C     DEFAULTS:
      DATA RAND/ 1 /,MULCOR/ 13 163 521 /
C
C     MODULO  2**28  = 268 435 456
C     PERIODO 2**26  =  67 108 864
C     MOLTIPLICATORE =  41 475 557
C
CW    WRITE(6,*) ' RANDOM ENTERED WITH RAND=',RAND
      RAND = RAND*MOLTIP
      CALL LLBIC(31,RAND)
C#QQ  IF( RAND.LT.0 ) RAND = (RAND+MAXINT)+1
      RAND = MOD(RAND,MODULO)
CW    WRITE(6,*) ' RANDOM EXITED  WITH RAND=',RAND
      FL=RAND
      FL=FL*3.72528E-09
      RETURN
C     ..................................................................
      ENTRY RANSET(XFIRST)
      RAND=XFIRST
CW    WRITE(6,*) ' RANSET SETS RAND=',RAND
      RETURN
C     ..................................................................
      ENTRY RANGET(XLAST)
      XLAST=RAND
CW    WRITE(6,*) ' RANGET GETS RAND=',RAND
      RETURN
C     ..................................................................
      ENTRY CORSET(MHIST,MAXRND)
      MAXRND=PERIOD/MHIST
      MULCOR=1
      DO 25 K=1,MAXRND
        MULCOR = MULCOR*MOLTIP
        CALL LLBIC(31,MULCOR)
C#QQ    IF( MULCOR.LT.0 ) MULCOR = (MULCOR+MAXINT)+1
        MULCOR = MOD(MULCOR,MODULO)
   25 CONTINUE
CW    WRITE(6,*) ' CORSET SETS MULCOR=',MULCOR
      RETURN
C     ..................................................................
      ENTRY CORRAN(XFIRST)
C
C     MOLTIPLICATORE = (41 475 557)**MAXRND MOD(2**28)
C     POICHE' IL PERIODO E' 2**26= 67 108 864 SI POSSONO ESEGUIRE
C     MHIST = (67 108 864 / MAXRND) STORIE.
C     (IN REALTA', FISSATO IL MOLTIPLICATORE SI DOVREBBE POTER SUPERARE
C     IN UNA STORIA IL NUMERO MASSIMO DI NUMERI A CASO, IN QUANTO
C     QUESTI NUMERI NON DOVREBBERO ESSERE CORRELATI)
C
C     MAX. NUMERI/STORIA   MOLTIPLICATORE   MAX. NUMERO STORIE
C            256             13 163 521          262 144
C            512            245 479 425          131 072
C           1024             25 391 105           65 536
C
CW    WRITE(6,*) ' CORRAN ENTERED WITH XFIRST=',XFIRST
      RAND = XFIRST
      RAND = RAND*MULCOR
      CALL LLBIC(31,RAND)
C#QQ  IF( RAND.LT.0 ) RAND = (RAND+MAXINT)+1
      RAND = MOD(RAND,MODULO)
      XFIRST = RAND
CW    WRITE(6,*) ' CORRAN EXITED  WITH XFIRST=',XFIRST
      RETURN
      END
C.......................................................................
C.......................................................................
      SUBROUTINE GRU(X,N,V,IPAR,IAR)
C
C     PARTENDO DALLA COMPONENTE V(IPAR) DEL VETTORE V CERCA IL PRIMO
C     INDICE IAR PER CUI RISULTA X MAGGIORE DI V(IAR).
C     ELEMENTI DEL VETTORE V IN ORDINE DECRESCENTE
C
      DIMENSION V(N)
C
      COMMON/IOFILE/IN,IOUT,IUERR,IARK,IPUNCH,IGMT,ITRMT,ITAPIO(2)
C
      DO I=IPAR,N
        IAR=I
        IF(X.GT.V(IAR))GO TO 20
      ENDDO
      WRITE(IUERR,'(/'' ***** ERROR IN S.R. GRU. GROUP NOT FOUND'')')
      CALL EXITN(1)
   20 RETURN
      END
C.......................................................................
C.......................................................................
      SUBROUTINE ELELOS(MOL,A,CHI,E,TE,DE,ELOSS)
C
C******************************************************************
C       ELECTRON ENERGY LOST IN ONE IONIZATION EVENT
C
C       ESTIMATES THE AVERAGE ENERGY LOST ("ELOSS") BY PLASMA ELECTRONS,
C     AT TEMPERATURE TE(EV) AND DENSITY DE(1/CC), FOR IONIZING A NEUTRAL
C     WITH MASS A AND TRAVELLING WITH ENERGY E THROUGH THE ELECTRONS.
C
C     1) ATOMS
C
C       FOR ATOMS, THE ELECTRON ENERGY LOSS IS ESTIMATED BY
C     REFERRING IT TO ONE EVENT OF IONIZATION INDUCED BY ELECTRONS.
C       THE ENERGY LOSS INCL. THE IONIZATION THRESHOLD (CHI)
C     (13.6 EV FOR H) PLUS THE EXCITATION ENERGY.(THE TOTAL ENERGY
C     LOST IS SUBTRACTED TO THE ELECTRONS OF THE PLASMA. A FRACTION
C     OF THIS ENERGY IS TRANSMITTED TO THE WALL UNDER THE FORM
C     OF GAMMAS BORN FROM THE DECAY OF THE ATOMIC EXCITED STATE
C     BUT THIS CODE DOES NOT TAKE INTO ACCOUNT THIS TRANSMISSION).
C
C FOR DE>10**15CM(-3):
C       EMPIRICAL FORMULAS (EXCEPT FOR MOLECULES) ARE TAKEN FROM THE
C     CULHAM REPORT CLM-P668 BY M.HARRISON, P.HARBOUR AND E.S.HOTSTON,
C     PAG. 57 (SEE ALSO PAGES 40-42).( THE LOSS FOR STRUCTURAL MATERIALS
C     IS TAKEN AS 2*IONIZATION THRESHOLD, ACCORDING TO THE SAME AUTHORS)
C
C FOR DE<10**15CM(-3):
C       A CORRECTION FACTOR (CORR) IS INTRODUCED
C       (E.S. HOTSTON, NOVEMBER 1985, PRIVATE COMM., UPDATED FEBR.1987)
C
C     2) MOLECULES
C
C       THE ENERGY LOST BY ELECTRONS REACTING WITH (COLD) MOLECULES
C     IS ESTIMATED IN THE PROGRAM BY TAKING INTO ACCOUNT THE REACTIONS
C     OF DISSOCIATION AND THAT OF IONIZATION FOLLOWED IMMEDIATELY
C     BY A DISSOCIATION, SINCE AT THERMAL ENERGY THE DIRECT DISSOCIATIVE
C     IONIZATION CAN BE NEGLECTED. HOWEVER, WITHIN THE PRESENT ROUTINE
C     ONLY THE ENERGY SUBTRACTED BY MOLECULES FOR IONIZATION FOLLOWED BY
C     A DISSOCIATION IS CONSIDERED.
C       IONIZATION LOSS FOR MOLECULES IS ASSUMED 17.8 EV (HARRISON 4/FEB
C     1987) (15.4 FOR H2+ PLUS 2.4 FOR THE SUBSEQUENT DISSOCIATION)
C       ENERGY SUBTRACTED TO ELECTRONS BY PURE DISSOCIATIONS (10.4EV) IS
C     SCORED IN THE MAIN PROGRAM (SEE SCORES IN "ELOST" WHEN MOL=2).
C             FAST DISSOC.  10.4=4.4+3+3 (10 APR. 1987) 3=CONDON ENERGY
C             SLOW DISSOC.   5.0=4.4+0.3+0.3 (12 JAN. 1988)
C
C     THUS, IN BOTH CASES OF ATOMS AND MOLECULES," ELOSS" IS THE ENERGY
C     LOST REFERRED TO ONE IONIZATION EVENT.
C
C********************************************************************
C
C                              MOLECULES
      IF(MOL.NE.2) GO TO 10
      ELOSS= 17.8
      GO TO 50
C                              LIGHT ATOMS
   10 IF(A-4.0) 20 , 30 , 40
C               HYDROGEN (CORRECT. FACTOR UPDATED:HOTSTON 4 FEBR.1987)
   20 CORR=1.0
      IF(DE.LE.1.0E+15) CORR=CORR+0.2511/TE
      ELOSS= 17.5+(5.0+CORR*37.5/TE)*ALOG10(1.0E+15/DE)
      GO TO 50
C                HELIUM 15(RAD.)+24.6(IONIS.): HARRISON 4 FEBR.1987
   30 ELOSS= 39.6
      GO TO 50
C                              STRUCTURAL MATERIALS
   40 ELOSS =2.0*CHI
   50 RETURN
      END
C.......................................................................
C.......................................................................
      SUBROUTINE PREIOZ
C----------------------------------(SEE SYMBOLS MEANING IN S.R. INPUT)
      INCLUDE 'pnimb'
      PARAMETER (MRG=MRGX ,MZN=MRG-2 ,MCH=41 ,MCC=MCCX, MWAC=13 )
      PARAMETER (MBS=MBSX ,MSD=MBS   ,MSC=2 )
      PARAMETER (MIO=3    ,MCP=6)
      PARAMETER (MEG=5    ,MIXS=10   ,MLEAK=9)
C---------------------------------------------------
      COMMON/CGEOMT/KREG,KREGM1,IR3DST,IR2DST,AREAD(MRG),
     * KONDC,KONDZ,I3D,KREG3D,LREG3D,LQUOTA,LDZETA,KSXY3D,NZETA
C
      COMMON/COMPOS/NION,NCOM,LIGHTW,RNLITE,EWLITE,
     * SYMB(MIO),PERC(MIO),DENSE(MRG),DENSI(MRG,MIO),EATMD,EATMR,
     * TEMPE(MRG),TEMPI(MRG),IBOUND(MRG),ALBEDO(MRG),LIWALL(MRG),COEFMX
     *,IEMIS(MRG),BEXPT(MRG),WEXPT(MRG,3),SHP,DRIFTV(MRG),DRIFTC(MRG,3)
     *,ISTARG(MRG),CHARGE(MCP),PROREQ(4),ALBATO(MRG),ALBENE(MRG),INDHEL
     *,NTSPUT,PSEMIP(MRG,2),IRTRIM(MCP,MCP),NFTRIM,LPVOID,DCUTCX,TCUTCX
     *,ICUTCX,INDEF,IYCHEM,EYCHEM,AYCHEM,NLEAK,XLEAK(4,MLEAK),ILEAK(MRG)
     *,NZREC,NUTRLZ(MCP),MIMP,IGOPT,PRORCL(MIO),UNDEF
     *,NZYIZ,CZYIZ(MCP),AYIZ(MCP),BYIZ(MCP),EYIZ(MCP),IYIZ(MCP),ALFCH7
     *,PARDIR(MRG,3),RECMAT(MIO,MIO,MRG)
C
      PARAMETER (NCT=24,MKES=4)
      COMMON/CTAB0/TABLE(NCT,11),IZLOZ(0:100)
      COMMON/CTABLE/SPUTAB(NCT,NCT)
     *,LABINT(MCP),LABEXT(NCT),IXS(MIXS),ITRIM
     *,NIONPM,MCX,MOLEC(MCP),IATOM(MCP),EXTSYM(MCP),QESP(NCT,NCT)
     *,EB(NCT),QCOEF(NCT),TLOTZ(NCT,26),CXRMAX(5,MRG),ESRMAX(MKES,MRG)
     *,TBELL(NCT,26),ITAGS(NCT,NCT,2)
C
      COMMON/ADASC/IHYR,IZYR,IDYR,USADAS
      CHARACTER*80 USADAS
C
      COMMON/PHYSIC/WSTART,WGAME,W,NUTRAL,MOL,A,E,CLOCK,IBIN,IBRNPL,
     * SIGT,SIGIT,SIGCXT,SIGEST,SIGST,SIGSTS,IDMOL,DISH2S(MRG),
     * ELECTR(MRG,MCP),SIGE,SIGI(MIO),SIGCX(MIO),SIGEL(MIO),
     * DISH2(MRG),DIOH2(MRG)
     *,SVI,SVCX(MIO)
C
      PARAMETER (MILLE=10000)
      COMMON/COMUNE/BUFFER(MILLE),IBUFER(MILLE)
C
      COMMON/IOFILE/IN,IOUT,IUERR,IARK,IPUNCH,IGMT,ITRMT,ITAPIO(2)
C
      DO 10 K=1,NCOM
        IBUFER(K)=0
   10 CONTINUE
C
      DO 50 I           = IR3DST,KREG3D
         IF( IBOUND(I).NE.0 ) GO TO 50
C
         TE             = TEMPE(I)
         IF( TE.LE.0.0 .OR. DENSE(I).LE.0.0 ) GO TO 50
C
         DO 40 K        = 1 , NCOM
            J           = LABINT(K)
            IZ          = TABLE(J,4)
C
            ELECTR(I,K) = 0.00E+00
C                          SKIP IF MOLECULE
            IF(IATOM(K).NE.K) GO TO 40
C                          SKIP MATERIAL OF PUMP VOID
C                          (NOT PRESENT ANYWHERE ELSE IF LPVOID>0)
            IF( J.EQ.LPVOID ) GOTO 40
C                          SKIP IF THIS IS WALL MATERIAL
C                          AND THE PLASMA CONTAINS
C                          A LIGHT (ONLY REFLECTABLE) IMPURITY.
C                          IN THIS CASE WALL MATERIAL IS NEVER
C                          SPUTTERED AND X.S. ARE NOT NEEDED
            IF(MIMP.LE.0) THEN
            IF( LIGHTW.NE.0 .AND. K.GT.NIONPM .AND. K.LT.NCOM ) GOTO 40
            ENDIF
C                                                 (LIGHTW=NCOM)
C
            CALL IOSIG(IZ,TRAN,TRAN,TE,DENSE(I),RC,TRAN,0,IXS(1),IXS(4)
     &                ,IHYR,IZYR,IDYR,USADAS)
C
            IF(IBUFER(K).EQ.0) THEN
              WRITE(IOUT,30) K,TABLE(LABINT(K),6)
   30         FORMAT(' IONIS. X.S. FOR NEUTRAL',I2,' (',A2,') READY')
              IBUFER(K)=1
            ENDIF
C
C                      MACROSCOPIC RATE COEFFICIENT
            RC          = RC * DENSE(I)
C                      FROM ERG TO EV
            AMU         = TABLE(J,3)
            AMASS       = AMU*1.6725E-24
            TRAN        = SQRT(2.0*1.6022E-12/AMASS)
            ELECTR(I,K) = RC / TRAN
C                     (TO COMPUTE X-SECTION DIVIDE ELECTR(IREG3D,NUTRAL)
C                      BY SQRT(E), WHERE E IS THE NEUTRAL ENERGY IN EV)
   40    CONTINUE
C
   50 CONTINUE
C
      RETURN
      END
C.......................................................................
C.......................................................................
      SUBROUTINE LOTZ(N,P,A,B,C,Q,T,RC)
C
C     ELECTRON-IMPACT IONIZATION RATE COEFFICIENT
C     (LOTZ W. ZEITSCHRIFT FUR PHYSIK 216,241-247 (1968))
C
C     N=NUMBER OF SUBSHELLS (=1)
C     P=BINDING ENERGY OF ELECTRONS IN THIS SUBSHELL
C     A,B,C= INDIVIDUAL CONSTANTS
C     Q=NUMBER OF EQUIVALENT ELECTRONS IN THIS SUBSHELL
C     T=TEMPERATURE
C     RC=RATE COEFFICIENT (V*SIGMA(V))
      DIMENSION P(3),A(3),B(3),C(3),Q(3)
C
      COMMON/IOFILE/IN,IOUT,IUERR,IARK,IPUNCH,IGMT,ITRMT,ITAPIO(2)
C
      REAL*8 XD,EXP1D,ZD,EXP2D,DUMMY
C
      IF(N.LE.0) THEN
        WRITE(IUERR,5) N
    5   FORMAT(/' ***** ERROR IN S.R. LOTZ: N=',I3)
        CALL EXITN(1)
      ENDIF
C
      RC=0.0
      DO 10 I=1,N
        X=P(I)/T
        XD=X
        CALL EXPI(XD,EXP1D,DUMMY)
C       CALL EXPI1(XD,EXP1D,DUMMY)
        EXP1=EXP1D
        Z=X+C(I)
        ZD=Z
        CALL EXPI(ZD,EXP2D,DUMMY)
C       CALL EXPI1(ZD,EXP2D,DUMMY)
        EXP2=EXP2D
        RC=RC+A(I)*Q(I)*T**(-1.5)*(EXP1/X-(B(I)*EXP(C(I))/Z)*EXP2)
   10 CONTINUE
C
C              RATE COEFFICIENT IN CM**3/SEC
      RC=RC*6.7E+7
      RETURN
      END
C.......................................................................
C.......................................................................
      SUBROUTINE BELLR(N,M,P,A,ALFA,B,T,RC)
C
C     ELECTRON-IMPACT IONIZATION RATE COEFFICIENT
C     (BELL K.L. ET AL. UKAEA REPORT CLM-R216M(1982)
C      AND UNPUBL. REP. 1986 FOR HEAVY MATERIALS)
C
C     GOLD AND COPPER ARE MISSING WITH RESPECT TO LOTZ,
C     THEREFORE THE MAIN PROGRAM CONSTRUCTS FIRST LOTZ TABLES
C     AND AFTERWARDS BELL TABLES, OVERLAPPING LOTZ ONLY
C     FOR MATERIALS PRESENT IN BELL.
C
C     N= NUMBER OF "A" COEFFICIENTS
C     M= NUMBER OF "B" COEFFICIENTS
C     P= IONIZATION POTENTIAL
C     A(1),...,A(N),ALFA,B(1),...,B(M)= BELL'S FORMULA COEFFICIENTS
C     T= TEMPERATURE
C     RC= RATE COEFFICIENT <V*SIGMA(V)> (CM**3/SEC)
C
      DIMENSION A(*),B(*)
C
      COMMON/IOFILE/IN,IOUT,IUERR,IARK,IPUNCH,IGMT,ITRMT,ITAPIO(2)
C
      IF(N.LE.0) THEN
        WRITE(IUERR,5) N
    5   FORMAT(/' ***** ERROR IN S.R. BELL: N=',I3)
        CALL EXITN(1)
      ENDIF
C
      TDP=T/P
      PDT=P/T
      RTDP=SQRT(TDP)
      IF(T.GT.10.0*P) GO TO 30
      RC=A(1)
      IF(N.EQ.1) GO TO 20
      DO 10 I=2,N
   10 RC=RC+A(I)*ALOG10(TDP)**(I-1)
   20 RC=RC*EXP(-PDT)*RTDP
      RETURN
   30 RC=B(1)
      IF(M.EQ.1) GO TO 50
      DO 40 I=2,M
   40 RC=RC+B(I)*PDT**(I-1)
   50 RC=(ALFA*ALOG(TDP)+RC)/RTDP
      RETURN
      END
C.......................................................................
C.......................................................................
      SUBROUTINE EXPI(X,EXPINT,PIFFO)
      IMPLICIT REAL*8(A-H,O-Z)
      DIMENSION P1(5),Q1(4),P2(7),Q2(7),P3(6),Q3(6),P4(8),Q4(8)
      DIMENSION A1(8),B1(7),A2(8),B2(7),A3(6),B3(5)
      DATA P1
     */-4.34981 43832 95212D+2, +4.25696 82638 59170D+2,
     * +2.92525 18866 92055D+2, +3.98941 53870 32107D+1,
     * +4.29312 52343 20973D+0/
      DATA Q1
     */+7.53585 64359 84293D+2, +5.68052 52718 98696D+2,
     * +1.50950 38744 25131D+2, +1.88992 88395 00297D+1/
      DATA P2
     */+4.65627 10797 50957D-7, +9.99979 57705 15950D-1,
     * +9.04161 55694 63287D+0, +2.43784 08879 13167D+1,
     * +2.30192 55939 13335D+1, +6.90522 52278 44436D+0,
     * +4.30967 83946 93888D-1/
      DATA Q2
     */+1.00000 00000 00000D+0, +1.00411 64382 90545D+1,
     * +3.24264 21069 51381D+1, +4.12807 84189 14243D+1,
     * +2.04494 78501 37942D+1, +3.31909 21359 33016D+0,
     * +1.03400 13040 48740D-1/
      DATA P3
     */-9.99999 99990 36009D-1, -1.96304 08535 93865D+1,
     * -1.19557 61038 37175D+2, -2.54376 33976 88951D+2,
     * -1.47982 19500 50448D+2, -2.39099 64453 13573D+0/
      DATA Q3
     */+1.00000 00000 00000D+0, +2.16304 08494 23774D+1,
     * +1.56818 43364 53856D+2, +4.62230 27156 14783D+2,
     * +5.30685 09610 81167D+2, +1.77600 70940 35063D+2/
      DATA P4
     */-8.66937 33995 10696D+0, -5.49142 26552 10851D+2,
     * -4.21001 61535 70699D+3, -2.49301 39345 86476D+5,
     * -1.19623 66934 92469D+5, -2.21744 62775 88454D+7,
     * +3.89280 42131 12014D+6, -3.91546 07380 90955D+8/
      DATA Q4
     */+3.41718 75000 00000D+1, -1.60708 92658 72209D+3,
     * +3.57300 29805 85081D+4, -4.83547 43616 21635D+5,
     * +4.28559 62461 17490D+6, -2.49033 37574 05403D+7,
     * +8.91925 76757 56121D+7, -1.65254 29972 52109D+8/
      DATA A1
     */+1.00443 10922 80779D+0, -4.32531 13287 81346D+1,
     * +6.01217 99083 00805D+1, -3.31842 53199 72211D+1,
     * +2.50762 81129 35598D+1, +9.30816 38566 21651D+0,
     * -2.19010 23385 48809D+1, -2.18086 38152 07237D+0/
      DATA B1
     */+5.27468 85196 29079D-1, +2.73624 11988 93281D+3,
     * +1.43256 73812 19376D+1, +1.00367 43951 67258D+3,
     * -6.25041 16167 18755D+0, +3.00892 64837 29152D+2,
     * +3.93707 70185 27150D+0/
      DATA A2
     */+9.99994 29607 47083D-1, -1.95022 32128 96598D+0,
     * +1.75656 31546 96144D+0, +1.79601 68876 92516D+1,
     * -3.23467 33030 54035D+1, -8.28561 99414 06413D+0,
     * -1.86545 45488 33988D+1, -3.48334 65360 28526D+0/
      DATA B2
     */+1.00083 86740 26391D+0, -3.43942 26689 98700D+0,
     * +2.89516 72792 51351D+1, +7.60761 14800 77346D+2,
     * +2.57776 38423 84399D+1, +5.72837 19383 73237D+1,
     * +6.95000 65588 74340D+1/
      DATA A3
     */+1.00000 00000 70443D+0, -3.00000 77799 35772D+0,
     * -5.02233 17461 85109D+0, -9.14830 08216 73641D+0,
     * -1.01047 90815 76032D+1, -2.77809 28934 43810D+1/
      DATA B3
     */+1.99999 99428 26009D+0, -2.99901 18065 26193D+0,
     * -7.18975 18395 04450D+0, +2.72761 00778 77917D+0,
     * +1.22399 93926 82269D+2/
      DATA X0 /0.372507410781367/
C
      IF(X .GT. 42.D0)  GO TO 90
C
      IF(X .GT. 4.0) GO TO 80
      IF(X .GT. 1.0) GO TO 70
      IF(X .GT. 0.0) GO TO 60
      IF(X .EQ. 0.0) GO TO 50
      Y=-X
      IF(X .GT. -6.0) GO TO 30
      V=DEXP(Y)/X
      IF(X .GT. -12.0) GO TO 20
      IF(X .GT. -24.0) GO TO 10
      EXPINT=V*(1.0+(A3(1)+B3(1)/(A3(2)+Y+B3(2)/(A3(3)+Y+B3(3)/(A3(4)+Y+
     * B3(4)/(A3(5)+Y+B3(5)/(A3(6)+Y))))))/Y)
      GO TO 130
   10 EXPINT=V*(A2(1)+B2(1)/(A2(2)+Y+B2(2)/(A2(3)+Y+B2(3)/(A2(4)+Y+B2(4)
     * /(A2(5)+Y+B2(5)/(A2(6)+Y+B2(6)/(A2(7)+Y+B2(7)/(A2(8)+Y))))))))
      GO TO 130
   20 EXPINT=V*(A1(1)+B1(1)/(A1(2)+Y+B1(2)/(A1(3)+Y+B1(3)/(A1(4)+Y+B1(4)
     * /(A1(5)+Y+B1(5)/(A1(6)+Y+B1(6)/(A1(7)+Y+B1(7)/(A1(8)+Y))))))))
      GO TO 130
   30 V=0.666666666666667D+0*Y-2.0
      BP=0.
      BQ=0.
      DP=P4(1)
      DQ=Q4(1)
      DO 40 I = 2,8
      AP=BP
      BP=DP
      AQ=BQ
      BQ=DQ
      DP=P4(I)-AP+V*BP
   40 DQ=Q4(I)-AQ+V*BQ
      EXPINT=-DLOG(Y/X0)-(Y-X0)*(DP-AP)/(DQ-AQ)
      GO TO 130
   50 EXPINT=0.
      GO TO 130
   60 EXPINT=-DLOG(X)+
     *       (P1(1)+X*(P1(2)+X*(P1(3)+X*(P1(4)+X*P1(5)))))/
     *       (Q1(1)+X*(Q1(2)+X*(Q1(3)+X*(Q1(4)+X))))
      GO TO 130
   70 Y=1.0/X
      EXPINT=DEXP(-X)*
     *(P2(1)+Y*(P2(2)+Y*(P2(3)+Y*(P2(4)+Y*(P2(5)+Y*(P2(6)+Y*P2(7)))))))/
     *(Q2(1)+Y*(Q2(2)+Y*(Q2(3)+Y*(Q2(4)+Y*(Q2(5)+Y*(Q2(6)+Y*Q2(7)))))))
      GO TO 130
   80 Y=1.0/X
      EXPINT=DEXP(-X)*Y*(1.0+Y*
     *       (P3(1)+Y*(P3(2)+Y*(P3(3)+Y*(P3(4)+Y*(P3(5)+Y*P3(6))))))/
     *       (Q3(1)+Y*(Q3(2)+Y*(Q3(3)+Y*(Q3(4)+Y*(Q3(5)+Y*Q3(6)))))))
      GO TO 130
C
   90 CONTINUE
C
      Y      = - 1.D0 / X
      TERM   = 1.D0
      SUM    = 1.D0
      DIN    = 0.D0
      EPS    = 1.D-14
      DO 100 IN = 1,100
      DIN    = DIN + Y
      TERM   = TERM * DIN
      ASTER  = DABS(TERM/SUM)
      IF (ASTER .LT. EPS)  GO TO 110
      SUM    = SUM + TERM
  100 CONTINUE
  110 CONTINUE
      PIFFO  = SUM
      IF (X .GT. 167.D0)  GO TO 120
      EXPINT = SUM / X * DEXP(-X)
      GO TO 130
  120 CONTINUE
      EXPINT = 0.D0
C
  130 CONTINUE
      IF(EXPINT.LT.0.0) EXPINT=0.0
      RETURN
      END
C.......................................................................
C.......................................................................
C
C
C        SUBROUTINE EXPI
C
C        PURPOSE
C           COMPUTES THE EXPONENTIAL INTEGRAL -EI(-X)
C
C        USAGE
C           CALL EXPI(X,RES,AUX)
C
C        DESCRIPTION OF PARAMETERS
C           X     - ARGUMENT OF EXPONENTIAL INTEGRAL
C           RES   - RESULT VALUE
C           AUX   - RESULTANT AUXILIARY VALUE
C
C        REMARKS
C           X GT 170 (X LT -174) MAY CAUSE UNDERFLOW (OVERFLOW)
C           WITH THE EXPONENTIAL FUNCTION
C           FOR X = 0 THE RESULT VALUE IS SET TO -1.E75
C
C        SUBROUTINES AND FUNCTION SUBPROGRAMS REQUIRED
C           NONE
C
C        METHOD
C           DEFINITION
C           RES=INTEGRAL(EXP(-T)/T, SUMMED OVER T FROM X TO INFINITY).
C           EVALUATION
C           THREE DIFFERENT RATIONAL APPROXIMATIONS ARE USED IN THE
C           RANGES 1 LE X, X LE -9 AND -9 LT X LE -3 RESPECTIVELY,
C           A POLYNOMIAL APPROXIMATION IS USED IN -3 LT X LT 1.
C
C     ..................................................................
C
      SUBROUTINE EXPI1(X,RES,AUX)
      REAL*8 X,RES,AUX,Y
      IF(X-1.D0) 20 , 10 , 10
   10 Y=1.D0/X
      AUX=1.D0-Y*(((Y+3.377358D0)*Y+2.052156D0)*Y+2.709479D-1)/((((Y*
     *1.072553D0+5.716943D0)*Y+6.945239D0)*Y+2.593888D0)*Y+2.709496D-1)
      RES=AUX*Y*DEXP(-X)
      GO TO 100
   20 IF(X+3.D0) 60 , 60 , 30
   30 AUX=(((((((7.122452D-7*X-1.766345D-6)*X+2.928433D-5)*X-2.335379D-4
     *)*X+1.664156D-3)*X-1.041576D-2)*X+5.555682D-2)*X-2.500001D-1)*X
     *+9.999999D-1
      RES=-1.D75
      IF(X) 40 , 50 , 40
   40 RES=X*AUX-DLOG(DABS(X))-5.772157D-1
   50 GO TO 100
   60 IF(X+9.D0) 80 , 80 , 70
   70 AUX=1.-((((5.176245E-2*X+3.061037E0)*X+3.243665E1)*X+2.244234E2)
     **X+2.486697D2)/((((X+3.995161D0)*X+3.893944D1)*X+2.263818D1)*X
     *+1.807837D2)
      GO TO 90
   80 Y=9.D0/X
      AUX=1.D0-Y*(((Y+7.659824D-1)*Y-7.271015D-1)*Y-1.080693D0)/((((Y
     **2.518750D0+1.122927D1)*Y+5.921405D0)*Y-8.666702D0)*Y-9.724216D0)
   90 RES=AUX*DEXP(-X)/X
  100 IF(RES.LT.0.D0) RES=0.D0
      RETURN
      END
C.......................................................................
C.......................................................................
      SUBROUTINE PREMOL
C
C     IMPACT OF AN ELECTRON WITH A H2-MOLECULE.
C
C     RATE COEFFICIENTS FOR DISSOCIATION AND DISSOCIATIVE IONIZATION,
C     FOR EACH PLASMA REGION, IN DISH2(IREG3D) (DISS. FAST ATOMS, 3EV),
C     DISH2S(IREG3D) (DISS. SLOW ATOMS, 0.3 EV, AFTER JANEV ET AL.)
C     AND DIOH2(IREG3D) (DISSOCIAT. IONIZATION), RESPECTIVELY.
C
C----------------------------------(SEE SYMBOLS MEANING IN S.R. INPUT)
      INCLUDE 'pnimb'
      PARAMETER (MRG=MRGX ,MZN=MRG-2 ,MCH=41 ,MCC=MCCX, MWAC=13 )
      PARAMETER (MBS=MBSX ,MSD=MBS   ,MSC=2 )
      PARAMETER (MIO=3    ,MCP=6)
      PARAMETER (MEG=5    ,MIXS=10   ,MLEAK=9)
C---------------------------------------------------
      COMMON/CGEOMT/KREG,KREGM1,IR3DST,IR2DST,AREAD(MRG),
     * KONDC,KONDZ,I3D,KREG3D,LREG3D,LQUOTA,LDZETA,KSXY3D,NZETA
C
      COMMON/COMPOS/NION,NCOM,LIGHTW,RNLITE,EWLITE,
     * SYMB(MIO),PERC(MIO),DENSE(MRG),DENSI(MRG,MIO),EATMD,EATMR,
     * TEMPE(MRG),TEMPI(MRG),IBOUND(MRG),ALBEDO(MRG),LIWALL(MRG),COEFMX
     *,IEMIS(MRG),BEXPT(MRG),WEXPT(MRG,3),SHP,DRIFTV(MRG),DRIFTC(MRG,3)
     *,ISTARG(MRG),CHARGE(MCP),PROREQ(4),ALBATO(MRG),ALBENE(MRG),INDHEL
     *,NTSPUT,PSEMIP(MRG,2),IRTRIM(MCP,MCP),NFTRIM,LPVOID,DCUTCX,TCUTCX
     *,ICUTCX,INDEF,IYCHEM,EYCHEM,AYCHEM,NLEAK,XLEAK(4,MLEAK),ILEAK(MRG)
     *,NZREC,NUTRLZ(MCP),MIMP,IGOPT,PRORCL(MIO),UNDEF
     *,NZYIZ,CZYIZ(MCP),AYIZ(MCP),BYIZ(MCP),EYIZ(MCP),IYIZ(MCP),ALFCH7
     *,PARDIR(MRG,3),RECMAT(MIO,MIO,MRG)
C
      PARAMETER (NCT=24,MKES=4)
      COMMON/CTAB0/TABLE(NCT,11),IZLOZ(0:100)
      COMMON/CTABLE/SPUTAB(NCT,NCT)
     *,LABINT(MCP),LABEXT(NCT),IXS(MIXS),ITRIM
     *,NIONPM,MCX,MOLEC(MCP),IATOM(MCP),EXTSYM(MCP),QESP(NCT,NCT)
     *,EB(NCT),QCOEF(NCT),TLOTZ(NCT,26),CXRMAX(5,MRG),ESRMAX(MKES,MRG)
     *,TBELL(NCT,26),ITAGS(NCT,NCT,2)
C
      COMMON/PHYSIC/WSTART,WGAME,W,NUTRAL,MOL,A,E,CLOCK,IBIN,IBRNPL,
     * SIGT,SIGIT,SIGCXT,SIGEST,SIGST,SIGSTS,IDMOL,DISH2S(MRG),
     * ELECTR(MRG,MCP),SIGE,SIGI(MIO),SIGCX(MIO),SIGEL(MIO),
     * DISH2(MRG),DIOH2(MRG)
     *,SVI,SVCX(MIO)
C
C
C     1)FAST DISSOCIATION 2*H-->H + H (GIVING RISE TO ATOMS AT 3EV)
C
      DIMENSION RH2E2H(9)
      DATA RH2E2H/-26.65989,9.312341,-5.315732,2.551588,-9.873073E-1,
     *             2.490946E-1,-3.733209E-2,3.016028E-3,-1.015095E-4/
C
C     2)IONIZATION   2*H-->2*H+ (FOLLOWED BY)-->(H+) + H
C
      DIMENSION RH2(9)
      DATA RH2/-34.23880,16.14829,-7.646064,2.372854,-0.4906446,
     *          6.507808E-2,-5.235834E-3,2.302402E-4,-4.222022E-6/
C
C     3)DISSOCIATIVE IONIZATION 2*H-->(H+) + H
C
      DIMENSION RH2EH(9)
      DATA RH2EH/-115.6823,141.0502,-95.33784,37.05283,-8.853047,
     *            1.320344,-1.198239E-1,6.053489E-3,-1.305276E-4/
C
C     4)SLOW DISSOCIATION 2*H-->H + H* (GIVING RISE TO ATOMS AT 0.3EV)
C                                 (JANUARY 1988)
      DIMENSION RH2EHS(7)
      DATA RH2EHS/-34.906693,14.250277,-5.706695,1.314436,-1.776308E-1,
     *             1.290029E-2,-3.870771E-4/
C
C
      DO 10 I=IR3DST,KREG3D
      DISH2(I)=0.0
      DISH2S(I)=0.0
      DIOH2(I)=0.0
      IF(IBOUND(I).NE.0) GO TO 10
      IF(TEMPE(I).LE.0.0 .OR. DENSE(I).LE.0.0) GO TO 10
      CALL  HMSIG(1,1.0,TEMPE(I),DENSE(I),
     *            SVMDF,SVMDS,SVMI,SIGMDF,SIGMDS,SIGMI,1,IXS(3))
      DISH2(I)=SIGMDF*DENSE(I)
      DISH2S(I)=SIGMDS*DENSE(I)
      DIOH2(I)=SIGMI*DENSE(I)
   10 CONTINUE
C              (TO COMPUTE X-SECTIONS FOR H2-LIKE MOLECULES,
C               DIVIDE DISH2,DISH2S AND DIOH2 BY SQRT(E/(A/2)), WHERE E
C               IS THE ENERGY IN EV OF THE MOLECULE OF MASS A)
C
      RETURN
      END
C.......................................................................
C.......................................................................
      SUBROUTINE PNFIT(NJ,A,T,SVJ)
C
C     POLYNOMIAL FORM USED FOR MOLECULAR REACTIONS WITH ELECTRONS
C     AND JANEV C.X. X.S.
C
C     SVJ=RATE COEFFICIENT (CM**3/SEC)
C     T=TEMPERATURE (EV)
C     ALOG(SVJ)=A(1)+A(2)*ALOG(T)+...+A(NJ)*ALOG(T)**(NJ-1)
C              =A(1)+X*(A(2)+X*(A(3)+X*(...+X*(A(N-1)+A(NJ)*X)...)))
C
      DIMENSION A(NJ)
      REAL*8 TT
C
      TT=T
      X=DLOG(TT)
      SV=A(NJ)
      DO 10 I=NJ-1,1,-1
        SV=SV*X+A(I)
   10 CONTINUE
      SVJ=EXP(SV)
      RETURN
      END
C.......................................................................
C.......................................................................
      SUBROUTINE XST
C
C     RETURNS 1) TOTAL MACROSCOPIC CROSS SECTION SIGT
C        "    2)   "     "   IONIZATION   "  SIGIT (OR MOL.DIS.ION.
C        "    3)   "     " CHARGE EXCHANGE"  SIGCXT
C        "    4)   "     " NON-IONIZATION "  SIGST (SCATTERING FOR ATOM
C                                            OR DISSOC. 3 EV FOR MOLEC.)
C        "    5)   "     " NON-IONIZATION "  SIGSTS   (MOL.DISS. 0.3 EV)
C     AND, MOREOVER,
C             6) MACROSCOPIC CROSS SECTIONS SIGE,SIGI(I),SIGCX(I)
C
C     N.B. SIGST CONTAINS ELAST.SCAT. FOR ATOM OR FAST DISSOC. FOR MOL.,
C SIGSTS IS THE SLOW (0.3 EV) DISS. FOR MOLECULES.
C
C----------------------------------(SEE SYMBOLS MEANING IN S.R. INPUT)
      INCLUDE 'pnimb'
      PARAMETER (MRG=MRGX ,MZN=MRG-2 ,MCH=41 ,MCC=MCCX, MWAC=13 )
      PARAMETER (MBS=MBSX ,MSD=MBS   ,MSC=2 )
      PARAMETER (MIO=3    ,MCP=6)
      PARAMETER (MEG=5    ,MIXS=10   ,MLEAK=9)
C---------------------------------------------------
      COMMON/IOFILE/IN,IOUT,IUERR,IARK,IPUNCH,IGMT,ITRMT,ITAPIO(2)
C
      COMMON/COMPOS/NION,NCOM,LIGHTW,RNLITE,EWLITE,
     * SYMB(MIO),PERC(MIO),DENSE(MRG),DENSI(MRG,MIO),EATMD,EATMR,
     * TEMPE(MRG),TEMPI(MRG),IBOUND(MRG),ALBEDO(MRG),LIWALL(MRG),COEFMX
     *,IEMIS(MRG),BEXPT(MRG),WEXPT(MRG,3),SHP,DRIFTV(MRG),DRIFTC(MRG,3)
     *,ISTARG(MRG),CHARGE(MCP),PROREQ(4),ALBATO(MRG),ALBENE(MRG),INDHEL
     *,NTSPUT,PSEMIP(MRG,2),IRTRIM(MCP,MCP),NFTRIM,LPVOID,DCUTCX,TCUTCX
     *,ICUTCX,INDEF,IYCHEM,EYCHEM,AYCHEM,NLEAK,XLEAK(4,MLEAK),ILEAK(MRG)
     *,NZREC,NUTRLZ(MCP),MIMP,IGOPT,PRORCL(MIO),UNDEF
     *,NZYIZ,CZYIZ(MCP),AYIZ(MCP),BYIZ(MCP),EYIZ(MCP),IYIZ(MCP),ALFCH7
     *,PARDIR(MRG,3),RECMAT(MIO,MIO,MRG)
C
      PARAMETER (NCT=24,MKES=4)
      COMMON/CTAB0/TABLE(NCT,11),IZLOZ(0:100)
      COMMON/CTABLE/SPUTAB(NCT,NCT)
     *,LABINT(MCP),LABEXT(NCT),IXS(MIXS),ITRIM
     *,NIONPM,MCX,MOLEC(MCP),IATOM(MCP),EXTSYM(MCP),QESP(NCT,NCT)
     *,EB(NCT),QCOEF(NCT),TLOTZ(NCT,26),CXRMAX(5,MRG),ESRMAX(MKES,MRG)
     *,TBELL(NCT,26),ITAGS(NCT,NCT,2)
C
      COMMON/PHYSIC/WSTART,WGAME,W,NUTRAL,MOL,A,E,CLOCK,IBIN,IBRNPL,
     * SIGT,SIGIT,SIGCXT,SIGEST,SIGST,SIGSTS,IDMOL,DISH2S(MRG),
     * ELECTR(MRG,MCP),SIGE,SIGI(MIO),SIGCX(MIO),SIGEL(MIO),
     * DISH2(MRG),DIOH2(MRG)
     *,SVI,SVCX(MIO)
C
      COMMON/STOGEO/IR,IREG,IREG3D,ISENT,LEAVES,XIN,YIN,ZIN,
     * COSP,SINP,COST,SINT,TANT,COSKT,DIST,PILX,IRZ,IREGZ,IREG3Z,
     * IZIN,IZ,ISSOU,X,Y,Z
      REAL*8 X,Y,Z
C
      LOGICAL LOG
C
      DO 10 I=1,NION
        SIGI(I)=0.0
        SIGEL(I)=0.0
        SIGCX(I)=0.0
   10 CONTINUE
      SIGE=0.0
C
      SIGCXT=0.0
      SIGEST=0.0
      SIGIT=0.0
      SIGST=0.0
      SIGSTS=0.0
      SIGT=0.0
      IF(DENSE(IREG3D).LE.0.0) RETURN
C
      IF(MOL.NE.1) GO TO 30
C                            ATOMS
      CALL XSI
      CALL XSCX0
      CALL XSEL0
      SIGIT=SIGE
      SIGCXT=0.0
      SIGEST=0.0
      DO 20 I=1,NION
        SIGIT=SIGIT+SIGI(I)
        SIGEST=SIGEST+SIGEL(I)
C           IF NEUTRAL= H ...
        LOG = TABLE(LABINT(I),4).LE.1.1
        TE = TEMPE(IREG3D)
        TI = TEMPI(IREG3D)
        ACH = DRIFTV(IREG3D)
        EP = 1.5*TI + ACH**2*(TE+TI)*0.5
C       ... AND N > MAX.DENS.
        LOG = LOG .AND. DENSE(IREG3D).GT.DCUTCX
C       ... AND THE NEUTRAL IS IN EQUILIBRIUM WITH PLASMA (TN=TI)
        LOG = LOG .AND. E.LE.EP*1.2
        LOG = LOG .AND. E.GT.EP*0.8
C       ... AND SIGMA(I) << SIGMA(CX)
        LOG = LOG .AND. SIGE.LE.0.05*SIGCX(I)
C       ... AND T < MIN.TEMP.
        LOG = LOG .AND. AMIN1(TE,TI).LE.TCUTCX
        IF(LOG) THEN
CW        WRITE(IOUT,*) 'XST  R=',IREG3D,'I=',I
CW        WRITE(IOUT,*) '     E=',E,' TE=',TE,' N=',DENSE(IREG3D)
CW        WRITE(IOUT,*) '    CX=',SIGCX(I),' IO=',SIGE
          SIGCX(I)=SIGCX(I)*(DCUTCX/DENSE(IREG3D))
          ICUTCX=1
CW        WRITE(IOUT,*) '    -->',SIGCX(I),'    ',SIGE
        ENDIF
        SIGCXT=SIGCXT+SIGCX(I)
   20 CONTINUE
      SIGT=SIGIT+SIGCXT+SIGEST
      SIGST=SIGT-SIGIT
      RETURN
C                            MOLECULES
   30 CALL XSMOL(R1,R2,R3)
C                            DISSOCIATIVE IONIZATION
C                   INCL. MOLECULAR IONIS. FOLLOWED BY DISS. IONIS.
C                   PLUS DIRECT DISSOCIATIVE IONIS. (WHICH IS SMALL)
      SIGIT=R2
C                      FAST DISSOCIATION (FAST ATOMS AT 3 EV)
      SIGST=R1
C                      SLOW DISSOCIATION (SLOW ATOMS AT 0.3 EV)
      SIGSTS=R3
C                      ELASTIC SCATTERING H2 + H+
      CALL XSEL0
      SIGCXT=0.0
      SIGEST=0.0
      DO 40 I=1,NION
        SIGCX(I)=0.0
        SIGEST=SIGEST+SIGEL(I)
   40 CONTINUE
C                            TOTAL X-SECTION
      SIGT=SIGST+SIGIT+SIGSTS+SIGEST
CW    WRITE(6,*) ' XST SIGEST=',SIGEST,' SIGT=',SIGT
      RETURN
      END
C.......................................................................
C.......................................................................
      SUBROUTINE XSI
C
C     REACTIONS OF ATOMS WITH ELECTRONS AND IONS
C
C     RETURNS MACROSCOPIC IONIZATION CROSS SECTIONS
C        1) SIGE FROM ELECTRON IMPACT
C        2) SIGI(I) FROM I-TH ION
C     OF A PLASMA REGION.
C     N.B. A CONTRIBUTION COMES FROM CHARGE EXCHANGE FOR HELIUM
C          (SEE S.R. XSCX)
C
C
C----------------------------------(SEE SYMBOLS MEANING IN S.R. INPUT)
      INCLUDE 'pnimb'
      PARAMETER (MRG=MRGX ,MZN=MRG-2 ,MCH=41 ,MCC=MCCX, MWAC=13 )
      PARAMETER (MBS=MBSX ,MSD=MBS   ,MSC=2 )
      PARAMETER (MIO=3    ,MCP=6)
      PARAMETER (MEG=5    ,MIXS=10   ,MLEAK=9)
C---------------------------------------------------
C
      COMMON/IOFILE/IN,IOUT,IUERR,IARK,IPUNCH,IGMT,ITRMT,ITAPIO(2)
C
      COMMON/STOGEO/IR,IREG,IREG3D,ISENT,LEAVES,XIN,YIN,ZIN,
     * COSP,SINP,COST,SINT,TANT,COSKT,DIST,PILX,IRZ,IREGZ,IREG3Z,
     * IZIN,IZ,ISSOU,X,Y,Z
      REAL*8 X,Y,Z
C
C
      COMMON/COMPOS/NION,NCOM,LIGHTW,RNLITE,EWLITE,
     * SYMB(MIO),PERC(MIO),DENSE(MRG),DENSI(MRG,MIO),EATMD,EATMR,
     * TEMPE(MRG),TEMPI(MRG),IBOUND(MRG),ALBEDO(MRG),LIWALL(MRG),COEFMX
     *,IEMIS(MRG),BEXPT(MRG),WEXPT(MRG,3),SHP,DRIFTV(MRG),DRIFTC(MRG,3)
     *,ISTARG(MRG),CHARGE(MCP),PROREQ(4),ALBATO(MRG),ALBENE(MRG),INDHEL
     *,NTSPUT,PSEMIP(MRG,2),IRTRIM(MCP,MCP),NFTRIM,LPVOID,DCUTCX,TCUTCX
     *,ICUTCX,INDEF,IYCHEM,EYCHEM,AYCHEM,NLEAK,XLEAK(4,MLEAK),ILEAK(MRG)
     *,NZREC,NUTRLZ(MCP),MIMP,IGOPT,PRORCL(MIO),UNDEF
     *,NZYIZ,CZYIZ(MCP),AYIZ(MCP),BYIZ(MCP),EYIZ(MCP),IYIZ(MCP),ALFCH7
     *,PARDIR(MRG,3),RECMAT(MIO,MIO,MRG)
C
      PARAMETER (NCT=24,MKES=4)
      COMMON/CTAB0/TABLE(NCT,11),IZLOZ(0:100)
      COMMON/CTABLE/SPUTAB(NCT,NCT)
     *,LABINT(MCP),LABEXT(NCT),IXS(MIXS),ITRIM
     *,NIONPM,MCX,MOLEC(MCP),IATOM(MCP),EXTSYM(MCP),QESP(NCT,NCT)
     *,EB(NCT),QCOEF(NCT),TLOTZ(NCT,26),CXRMAX(5,MRG),ESRMAX(MKES,MRG)
     *,TBELL(NCT,26),ITAGS(NCT,NCT,2)
C
      COMMON/PHYSIC/WSTART,WGAME,W,NUTRAL,MOL,A,E,CLOCK,IBIN,IBRNPL,
     * SIGT,SIGIT,SIGCXT,SIGEST,SIGST,SIGSTS,IDMOL,DISH2S(MRG),
     * ELECTR(MRG,MCP),SIGE,SIGI(MIO),SIGCX(MIO),SIGEL(MIO),
     * DISH2(MRG),DIOH2(MRG)
     *,SVI,SVCX(MIO)
C
      COMMON/DQHCOM/IDQH,KES,AR,TS,C1,C2,C3,C4
C
      REAL*8 XTFCT,RM
C
      EXTERNAL XTFCT
C
C
C     ELECTRON-IMPACT IONIZATION CROSS SECTION
C     ----------------------------------------
C                    FROM RATE COEFFICIENT TO MACROSCOPIC X-SECTION
      SIGE=ELECTR(IREG3D,NUTRAL)/SQRT(E)
C
C         CORRECTION FOR MULTISTEP IONIS.(HIGH NE)(COLLISIONAL RAD.ION.)
C         INTRODUCED ON 4 FEBR. 1987  FOR H AND HE, ACCORDING TO
C         CULHAM REP. CLM-P668 BY M.HARRISON, P.HARBOUR AND E.S.HOTSTON,
C         P.57. FORMULAS HAVE BEEN UPDATED ACCORDING TO E. HOTSTON
C
      L=LABINT(NUTRAL)
      IF(L.GT.5) GO TO 10
C                        H,D,DT,T (2,3,4,5)
CC    SIGE=SIGE*(1.0+(10.0/TEMPE(IREG3D))*SQRT(DENSE(IREG3D)/1.0E+14))
CW    WRITE(6,*) ' IR=',IREG3D,' SIGE=',SIGE
CW      WRITE( 6,*) ' IR=',IREG3D,' DE=',DENSE(IREG3D),' L=',L,
CW   *              ' TE=',TEMPE(IREG3D),' SV=',ELECTR(IREG3D,NUTRAL)
      GO TO 15
C                        HE (6)
   10 IF(L.GT.6) GO TO 20
C                        18.1=10(AS ABOVE)*1.81 WITH
C                        1.81=24.6/13.6=HE IONIS.THRES./H IONIS.THRES.
CC    SIGE=SIGE*(1.0+(18.1/TEMPE(IREG3D))*SQRT(DENSE(IREG3D)/1.0E+14))
   15 CONTINUE
      GO TO 20
C
C
C     ION-IMPACT IONIZATION CROSS-SECTION
C     -----------------------------------
C
C                    IONIZATION OF H,D,T,DT NEUTRALS ONLY
C     L=LABINT(NUTRAL)  DEFINED ABOVE
   20 CONTINUE
      IF(L.LT.2 .OR. L.GT.5) GO TO 60
C                    REGION TEMPERATURE (EV)
      TEV=TEMPI(IREG3D)
      IF(TEV.LT.2500.0 .AND. E.LT.2500.0) GO TO 60
      TEVE=TEMPE(IREG3D)
C                    MACH'S NUMBER
      FMACH=DRIFTV(IREG3D)
C                    VELOCITY OF THE NEUTRAL
      S=SQRT(E/A)*1.3841E+06
      SX=S*COSP*SINT
      SY=S*SINP*SINT
      SZ=S*COST
C                    IMPACT WITH H,D,T,DT,HE (RIVIERE) IONS ONLY
      DO 50 L=2,6
      LE=LABEXT(L)
      IF(LE.EQ.0) GO TO 50
C                    ION CHARGE (=1 IN THIS CASE)
      ZETA=TABLE(L,4)
C                    RELATIVE VELOCITY BETWEEN FLOW AND NEUTRAL
      ATARG=TABLE(L,3)
      R=SQRT( (TABLE(L,2)*TEVE+TEV)/ATARG)*1.0E+06 * FMACH
      RV2=(R*DRIFTC(IREG3D,1)-SX)**2+(R*DRIFTC(IREG3D,2)-SY)**2+
     *    (R*DRIFTC(IREG3D,3)-SZ)**2
C                          SCALED SHIFTED NEUTRAL ENERGY
      ES=0.52197E-12*RV2
C                          SHIFTED NEUTRAL ENERGY
      ENS=ES*A
C                          SCALED ION TEMPERATURE
      TS=TEV/ATARG
C
      ESTS=ES/TS
      IF(ES.LE.2500.0) GO TO 60
      IF(ESTS.GE.20.0) GO TO 30
      C=SQRT(ATARG/A)
      C1=SQRT(ENS/TEV)
      C2=C*C1
      C3=0.0
      IF(C2**2.LT.174.0) C3=EXP(-C2**2)
      C4=2.0*C2
      IDQH=3
      CALL DQH12P(XTFCT,RM)
      RRATE=0.780939E+6*RM*TEV/ATARG*SQRT(A/ENS)
      SIGMA=RRATE/S
      GO TO 40
C                    MEAN RELATIVE NEUTRAL/ION ENERGY
   30 ER= 1.5*A*TS+ENS
      CALL XIPP(ER/A,SIGMA)
C                    CONSERVE THE REACTION RATE
      SIGMA=SIGMA*SQRT(ER/E)
C                    (FOR IONS DIFFERENT FROM H)
   40 SIGMA=SIGMA*ZETA**2
C                    ION DENSITY
      DEN=DENSI(IREG3D,LE)
C                    MACROSCOPIC IONIZATION X-SECTION
      SIGI(LE)=SIGMA*DEN
   50 CONTINUE
C
   60 RETURN
      END
C.......................................................................
C.......................................................................
      SUBROUTINE XIPP(ER,SIGMA)
C
C     RETURNS MICROSCOPIC CROSS SECTION SIGMA FOR H-IONIZATION
C     BY IONS OF MASS 1.0 (H+. ALSO FOR OTHER IONS IF MULTIPLIED
C                          BY THE SQUARE OF THE ION CHARGE)
C      -- RIVIERE --
C
C     ER= RELATIVE ENERGY REFERRED TO THE H-NEUTRAL ENERGY
C
      IF(ER.GT.150.0E+03) GO TO 10
      TRAN=ALOG10(ER)
      SIGMA=-34.833+(8.156-0.8712*TRAN)*TRAN
      SIGMA=10.0**(SIGMA)
      GO TO 20
   10 SIGMA=3.6E-12/ER*ALOG10(0.1666*ER)
   20 IF(SIGMA.LT.0.0) SIGMA=0.0
      RETURN
      END
C.......................................................................
C.......................................................................
      SUBROUTINE PRECX
C
C     PRESET FOR C.X. ROUTINES
C
C----------------------------------(SEE SYMBOLS MEANING IN S.R. INPUT)
      INCLUDE 'pnimb'
      PARAMETER (MRG=MRGX ,MZN=MRG-2 ,MCH=41 ,MCC=MCCX, MWAC=13 )
      PARAMETER (MBS=MBSX ,MSD=MBS   ,MSC=2 )
      PARAMETER (MIO=3    ,MCP=6)
      PARAMETER (MEG=5    ,MIXS=10   ,MLEAK=9)
C---------------------------------------------------
C
      COMMON/IOFILE/IN,IOUT,IUERR,IARK,IPUNCH,IGMT,ITRMT,ITAPIO(2)
C
      COMMON/CGEOMT/KREG,KREGM1,IR3DST,IR2DST,AREAD(MRG),
     * KONDC,KONDZ,I3D,KREG3D,LREG3D,LQUOTA,LDZETA,KSXY3D,NZETA
C
      COMMON/COMPOS/NION,NCOM,LIGHTW,RNLITE,EWLITE,
     * SYMB(MIO),PERC(MIO),DENSE(MRG),DENSI(MRG,MIO),EATMD,EATMR,
     * TEMPE(MRG),TEMPI(MRG),IBOUND(MRG),ALBEDO(MRG),LIWALL(MRG),COEFMX
     *,IEMIS(MRG),BEXPT(MRG),WEXPT(MRG,3),SHP,DRIFTV(MRG),DRIFTC(MRG,3)
     *,ISTARG(MRG),CHARGE(MCP),PROREQ(4),ALBATO(MRG),ALBENE(MRG),INDHEL
     *,NTSPUT,PSEMIP(MRG,2),IRTRIM(MCP,MCP),NFTRIM,LPVOID,DCUTCX,TCUTCX
     *,ICUTCX,INDEF,IYCHEM,EYCHEM,AYCHEM,NLEAK,XLEAK(4,MLEAK),ILEAK(MRG)
     *,NZREC,NUTRLZ(MCP),MIMP,IGOPT,PRORCL(MIO),UNDEF
     *,NZYIZ,CZYIZ(MCP),AYIZ(MCP),BYIZ(MCP),EYIZ(MCP),IYIZ(MCP),ALFCH7
     *,PARDIR(MRG,3),RECMAT(MIO,MIO,MRG)
C
      PARAMETER (NCT=24,MKES=4)
      COMMON/CTAB0/TABLE(NCT,11),IZLOZ(0:100)
      COMMON/CTABLE/SPUTAB(NCT,NCT)
     *,LABINT(MCP),LABEXT(NCT),IXS(MIXS),ITRIM
     *,NIONPM,MCX,MOLEC(MCP),IATOM(MCP),EXTSYM(MCP),QESP(NCT,NCT)
     *,EB(NCT),QCOEF(NCT),TLOTZ(NCT,26),CXRMAX(5,MRG),ESRMAX(MKES,MRG)
     *,TBELL(NCT,26),ITAGS(NCT,NCT,2)
C
C
      COMMON/PHYSIC/WSTART,WGAME,W,NUTRAL,MOL,A,E,CLOCK,IBIN,IBRNPL,
     * SIGT,SIGIT,SIGCXT,SIGEST,SIGST,SIGSTS,IDMOL,DISH2S(MRG),
     * ELECTR(MRG,MCP),SIGE,SIGI(MIO),SIGCX(MIO),SIGEL(MIO),
     * DISH2(MRG),DIOH2(MRG)
     *,SVI,SVCX(MIO)
C
      PARAMETER (NE=1000)
C
C                          SET UP MAX(VR*SIGCX(VR))
C                          ------------------------
C
C                          LOOP OVER REGIONS
      DO 30 J=IR3DST,KREG3D
      IF(IBOUND(J).NE.0) GO TO 30
C                          HIGHEST TEMPERATURE
      ERMAX=30.0*TEMPI(J)
      DE=ERMAX/FLOAT(NE)
C                          H,D,DT,T PROJECTILE
      DO 20 I=2,5
C     (BASTA REAZIONE CON H -CFR. S.R. XSCX)
      L=LABEXT(I)
      IF(L.EQ.0) GO TO 20
      CXRMAX(I,J)=0.0
      DO 10 K=1,NE
      ER=FLOAT(K)*DE
      CALL XSCX(I,2,ER,SIGMA)
   10 CXRMAX(I,J)=AMAX1(CXRMAX(I,J),SQRT(ER)*SIGMA)
   20 CONTINUE
   30 CONTINUE
C
      RETURN
      END
C.......................................................................
C.......................................................................
      SUBROUTINE CHARGX
C
C     CHARGE EXCHANGE COLLISION ROUTINE
C
C     TARGET PLASMA : MAXWELLIAN + FLOW
C
C----------------------------------(SEE SYMBOLS MEANING IN S.R. INPUT)
      INCLUDE 'pnimb'
      PARAMETER (MRG=MRGX ,MZN=MRG-2 ,MCH=41 ,MCC=MCCX, MWAC=13 )
      PARAMETER (MBS=MBSX ,MSD=MBS   ,MSC=2 )
      PARAMETER (MIO=3    ,MCP=6)
      PARAMETER (MEG=5    ,MIXS=10   ,MLEAK=9)
C---------------------------------------------------
      COMMON/IOFILE/IN,IOUT,IUERR,IARK,IPUNCH,IGMT,ITRMT,ITAPIO(2)
C
C
      COMMON/STOGEO/IR,IREG,IREG3D,ISENT,LEAVES,XIN,YIN,ZIN,
     * COSP,SINP,COST,SINT,TANT,COSKT,DIST,PILX,IRZ,IREGZ,IREG3Z,
     * IZIN,IZ,ISSOU,X,Y,Z
      REAL*8 X,Y,Z
C
C
      COMMON/COMPOS/NION,NCOM,LIGHTW,RNLITE,EWLITE,
     * SYMB(MIO),PERC(MIO),DENSE(MRG),DENSI(MRG,MIO),EATMD,EATMR,
     * TEMPE(MRG),TEMPI(MRG),IBOUND(MRG),ALBEDO(MRG),LIWALL(MRG),COEFMX
     *,IEMIS(MRG),BEXPT(MRG),WEXPT(MRG,3),SHP,DRIFTV(MRG),DRIFTC(MRG,3)
     *,ISTARG(MRG),CHARGE(MCP),PROREQ(4),ALBATO(MRG),ALBENE(MRG),INDHEL
     *,NTSPUT,PSEMIP(MRG,2),IRTRIM(MCP,MCP),NFTRIM,LPVOID,DCUTCX,TCUTCX
     *,ICUTCX,INDEF,IYCHEM,EYCHEM,AYCHEM,NLEAK,XLEAK(4,MLEAK),ILEAK(MRG)
     *,NZREC,NUTRLZ(MCP),MIMP,IGOPT,PRORCL(MIO),UNDEF
     *,NZYIZ,CZYIZ(MCP),AYIZ(MCP),BYIZ(MCP),EYIZ(MCP),IYIZ(MCP),ALFCH7
     *,PARDIR(MRG,3),RECMAT(MIO,MIO,MRG)
C
      PARAMETER (NCT=24,MKES=4)
      COMMON/CTAB0/TABLE(NCT,11),IZLOZ(0:100)
      COMMON/CTABLE/SPUTAB(NCT,NCT)
     *,LABINT(MCP),LABEXT(NCT),IXS(MIXS),ITRIM
     *,NIONPM,MCX,MOLEC(MCP),IATOM(MCP),EXTSYM(MCP),QESP(NCT,NCT)
     *,EB(NCT),QCOEF(NCT),TLOTZ(NCT,26),CXRMAX(5,MRG),ESRMAX(MKES,MRG)
     *,TBELL(NCT,26),ITAGS(NCT,NCT,2)
C
C
      COMMON/PHYSIC/WSTART,WGAME,W,NUTRAL,MOL,A,E,CLOCK,IBIN,IBRNPL,
     * SIGT,SIGIT,SIGCXT,SIGEST,SIGST,SIGSTS,IDMOL,DISH2S(MRG),
     * ELECTR(MRG,MCP),SIGE,SIGI(MIO),SIGCX(MIO),SIGEL(MIO),
     * DISH2(MRG),DIOH2(MRG)
     *,SVI,SVCX(MIO)
C
      COMMON/CSCAT/IPROJ,IONHIT,ATARG,ER,EREL,SCX,SES,SST
C
      COMMON /CESMOT/VNEUT(3),VION(3)
      EQUIVALENCE (VNEUT(1),SXOLD),(VNEUT(2),SYOLD),(VNEUT(3),SZOLD),
     *            (VION(1),SX),(VION(2),SY),(VION(3),SZ)
C
C
C                           FINAL NEW PARAMETERS
      NUTRAL=IONHIT
      A=ATARG
      S2=SX*SX+SY*SY+SZ*SZ
      E=S2*A*0.52197E-12
      S=SQRT(S2)
      SX=SX/S
      SY=SY/S
      SZ=SZ/S
      COST=SZ
      IF(ABS(COST).GT.0.999) COST=SIGN(0.999,COST)
      SINT=SQRT(1.0-COST**2)
      TANT=SINT/COST
      COSP=SX/SINT
      SINP=SY/SINT
C
      RETURN
      END
C.......................................................................
C.......................................................................
      SUBROUTINE MAXWEL(X)
C----- SCEGLIE X DA SQRT(X)*EXP(-X)    (N(E) MAXWELLIANA)
C----- (G.S.FISHMAN, COMM.ACM, 19(1976),407)
   10 C=RANF()
      X=-1.5*ALOG(C)
      C=RANF()
      IF( C*0.74284531 .GT. SQRT(X)*EXP(-X/3.0) ) GO TO 10
      RETURN
      END
C.......................................................................
C.......................................................................
      SUBROUTINE XSCX(NUTOLD,NUTNEW,ER,SIGMA)
C
C     RETURNS MICROSCOPIC CHARGE EXCHANGE CROSS SECTION SIGMA
C     FOR THE REACTION BETWEEN NUTOLD AND NUTNEW UNDERGONE
C     WITH RELATIVE ENERGY ER.
C
C----------------------------------(SEE SYMBOLS MEANING IN S.R. INPUT)
      INCLUDE 'pnimb'
      PARAMETER (MRG=MRGX ,MZN=MRG-2 ,MCH=41 ,MCC=MCCX, MWAC=13 )
      PARAMETER (MBS=MBSX ,MSD=MBS   ,MSC=2 )
      PARAMETER (MIO=3    ,MCP=6)
      PARAMETER (MEG=5    ,MIXS=10   ,MLEAK=9)
C---------------------------------------------------
      COMMON/IOFILE/IN,IOUT,IUERR,IARK,IPUNCH,IGMT,ITRMT,ITAPIO(2)
C
      COMMON/STOGEO/IR,IREG,IREG3D,ISENT,LEAVES,XIN,YIN,ZIN,
     * COSP,SINP,COST,SINT,TANT,COSKT,DIST,PILX,IRZ,IREGZ,IREG3Z,
     * IZIN,IZ,ISSOU,X,Y,Z
      REAL*8 X,Y,Z
C
      COMMON/COMPOS/NION,NCOM,LIGHTW,RNLITE,EWLITE,
     * SYMB(MIO),PERC(MIO),DENSE(MRG),DENSI(MRG,MIO),EATMD,EATMR,
     * TEMPE(MRG),TEMPI(MRG),IBOUND(MRG),ALBEDO(MRG),LIWALL(MRG),COEFMX
     *,IEMIS(MRG),BEXPT(MRG),WEXPT(MRG,3),SHP,DRIFTV(MRG),DRIFTC(MRG,3)
     *,ISTARG(MRG),CHARGE(MCP),PROREQ(4),ALBATO(MRG),ALBENE(MRG),INDHEL
     *,NTSPUT,PSEMIP(MRG,2),IRTRIM(MCP,MCP),NFTRIM,LPVOID,DCUTCX,TCUTCX
     *,ICUTCX,INDEF,IYCHEM,EYCHEM,AYCHEM,NLEAK,XLEAK(4,MLEAK),ILEAK(MRG)
     *,NZREC,NUTRLZ(MCP),MIMP,IGOPT,PRORCL(MIO),UNDEF
     *,NZYIZ,CZYIZ(MCP),AYIZ(MCP),BYIZ(MCP),EYIZ(MCP),IYIZ(MCP),ALFCH7
     *,PARDIR(MRG,3),RECMAT(MIO,MIO,MRG)
C
      PARAMETER (NCT=24,MKES=4)
      COMMON/CTAB0/TABLE(NCT,11),IZLOZ(0:100)
      COMMON/CTABLE/SPUTAB(NCT,NCT)
     *,LABINT(MCP),LABEXT(NCT),IXS(MIXS),ITRIM
     *,NIONPM,MCX,MOLEC(MCP),IATOM(MCP),EXTSYM(MCP),QESP(NCT,NCT)
     *,EB(NCT),QCOEF(NCT),TLOTZ(NCT,26),CXRMAX(5,MRG),ESRMAX(MKES,MRG)
     *,TBELL(NCT,26),ITAGS(NCT,NCT,2)
C
      COMMON/PHYSIC/WSTART,WGAME,W,NUTRAL,MOL,A,E,CLOCK,IBIN,IBRNPL,
     * SIGT,SIGIT,SIGCXT,SIGEST,SIGST,SIGSTS,IDMOL,DISH2S(MRG),
     * ELECTR(MRG,MCP),SIGE,SIGI(MIO),SIGCX(MIO),SIGEL(MIO),
     * DISH2(MRG),DIOH2(MRG)
     *,SVI,SVCX(MIO)
C
      SIGMA=0.0
      AOLD=TABLE(NUTOLD,3)
      IF(NUTOLD.GT.5) CALL WRINIM('XSCX','NUTOLD.GT.5')
C
C     INCIDENT PARTICLE IS AN ISOTOPE OF HYDROGEN
C     -------------------------------------------
      IF(NUTNEW.EQ.2 .OR. NUTNEW.EQ.3 .OR. NUTNEW.EQ.4 .OR. NUTNEW.EQ.5)
     *CALL HXHP(ER/AOLD,SIGMA)
      IF(NUTNEW.EQ.7)
     *CALL WRINIM('XSCX','NUTNEW.EQ.7')
      RETURN
      END
C.......................................................................
C.......................................................................
      SUBROUTINE WRINIM(SBR,BCD)
C
      CHARACTER*(*) SBR,BCD
C
      COMMON/IOFILE/IN,IOUT,IUERR,IARK,IPUNCH,IGMT,ITRMT,ITAPIO(2)
C
      WRITE(IUERR, 10 ) SBR,BCD
   10 FORMAT(//' ERROR IN ',A,'. ',A)
      CALL ERRTRA
      CALL EXITN(1)
      RETURN
C     (DUMMY)
      END
C.......................................................................
C.......................................................................
      SUBROUTINE XSCX0
C
C     RETURNS MACROSCOPIC CHARGE EXCHANGE CROSS SECTIONS SIGCX(I)
C     AVERAGED OVER ALL TARGET VELOCITIES (MAXWELL + FLOW) FOR NEUTRALS
C     IN A PLASMA REGION CONTAINING H+,D+,DT+,T+,HE++. THIS LAST ION
C     CONTRIBUTES TO IONIZATION CROSS SECTION.
C
C----------------------------------(SEE SYMBOLS MEANING IN S.R. INPUT)
      INCLUDE 'pnimb'
      PARAMETER (MRG=MRGX ,MZN=MRG-2 ,MCH=41 ,MCC=MCCX, MWAC=13 )
      PARAMETER (MBS=MBSX ,MSD=MBS   ,MSC=2 )
      PARAMETER (MIO=3    ,MCP=6)
      PARAMETER (MEG=5    ,MIXS=10   ,MLEAK=9)
C---------------------------------------------------
      COMMON/IOFILE/IN,IOUT,IUERR,IARK,IPUNCH,IGMT,ITRMT,ITAPIO(2)
C
      REAL*8 XTFCT,RM
C
      EXTERNAL XTFCT
C
      COMMON/STOGEO/IR,IREG,IREG3D,ISENT,LEAVES,XIN,YIN,ZIN,
     * COSP,SINP,COST,SINT,TANT,COSKT,DIST,PILX,IRZ,IREGZ,IREG3Z,
     * IZIN,IZ,ISSOU,X,Y,Z
      REAL*8 X,Y,Z
C
C
      COMMON/COMPOS/NION,NCOM,LIGHTW,RNLITE,EWLITE,
     * SYMB(MIO),PERC(MIO),DENSE(MRG),DENSI(MRG,MIO),EATMD,EATMR,
     * TEMPE(MRG),TEMPI(MRG),IBOUND(MRG),ALBEDO(MRG),LIWALL(MRG),COEFMX
     *,IEMIS(MRG),BEXPT(MRG),WEXPT(MRG,3),SHP,DRIFTV(MRG),DRIFTC(MRG,3)
     *,ISTARG(MRG),CHARGE(MCP),PROREQ(4),ALBATO(MRG),ALBENE(MRG),INDHEL
     *,NTSPUT,PSEMIP(MRG,2),IRTRIM(MCP,MCP),NFTRIM,LPVOID,DCUTCX,TCUTCX
     *,ICUTCX,INDEF,IYCHEM,EYCHEM,AYCHEM,NLEAK,XLEAK(4,MLEAK),ILEAK(MRG)
     *,NZREC,NUTRLZ(MCP),MIMP,IGOPT,PRORCL(MIO),UNDEF
     *,NZYIZ,CZYIZ(MCP),AYIZ(MCP),BYIZ(MCP),EYIZ(MCP),IYIZ(MCP),ALFCH7
     *,PARDIR(MRG,3),RECMAT(MIO,MIO,MRG)
C
      PARAMETER (NCT=24,MKES=4)
      COMMON/CTAB0/TABLE(NCT,11),IZLOZ(0:100)
      COMMON/CTABLE/SPUTAB(NCT,NCT)
     *,LABINT(MCP),LABEXT(NCT),IXS(MIXS),ITRIM
     *,NIONPM,MCX,MOLEC(MCP),IATOM(MCP),EXTSYM(MCP),QESP(NCT,NCT)
     *,EB(NCT),QCOEF(NCT),TLOTZ(NCT,26),CXRMAX(5,MRG),ESRMAX(MKES,MRG)
     *,TBELL(NCT,26),ITAGS(NCT,NCT,2)
C
      COMMON/PHYSIC/WSTART,WGAME,W,NUTRAL,MOL,A,E,CLOCK,IBIN,IBRNPL,
     * SIGT,SIGIT,SIGCXT,SIGEST,SIGST,SIGSTS,IDMOL,DISH2S(MRG),
     * ELECTR(MRG,MCP),SIGE,SIGI(MIO),SIGCX(MIO),SIGEL(MIO),
     * DISH2(MRG),DIOH2(MRG)
     *,SVI,SVCX(MIO)
C
      COMMON/DQHCOM/IDQH,KES,AR,TS,C1,C2,C3,C4
C
C
C                    C.X. FOR H,D,T,DT NEUTRALS ONLY
C                           (A= MASS OF INCIDENT NEUTRAL)
      IF(LABINT(NUTRAL).GT.5) GO TO 130
C                    REGION TEMPERATURE (EV)
      TEV=TEMPI(IREG3D)
      TEVE=TEMPE(IREG3D)
C                    MACH'S NUMBER
      FMACH=DRIFTV(IREG3D)
C                    VELOCITY OF THE NEUTRAL
      S=SQRT(E/A)*1.3841E+06
      SX=S*COSP*SINT
      SY=S*SINP*SINT
      SZ=S*COST
C                    A=MASS OF THE INCIDENT PARTICLE
C
C     INCIDENT PARTICLE IS AN ISOTOPE OF HYDROGEN
C     -------------------------------------------
C                   H,D,DT,T TARGET
      DO 100 I=2,5
      L=LABEXT(I)
      IF(L.EQ.0) GO TO 100
C                    RELATIVE VELOCITY BETWEEN FLOW AND NEUTRAL
      ATARG=TABLE(I,3)
      CALL CXSIG(1,A,E,COSP*SINT,SINP*SINT,COST,
     &           TEV,TEVE,FMACH,ATARG,
     &           DRIFTC(IREG3D,1),DRIFTC(IREG3D,2),DRIFTC(IREG3D,3),
     &           IXS(2),SIGMA,SIGMAV)
      SIGCX(L)=DENSI(IREG3D,L)*SIGMA
      SVCX(L)=SIGMAV
  100 CONTINUE
C                 5. HELIUM TARGET
C                    -------------
      L=LABEXT(7)
      IF(L.EQ.0) GO TO 130
C                    RELATIVE VELOCITY BETWEEN FLOW AND NEUTRAL
      ATARG=4.0
      R=SQRT( (TABLE(7,2)*TEVE+TEV)/ATARG )*1.0E+06 * FMACH
      RV2=(R*DRIFTC(IREG3D,1)-SX)**2+(R*DRIFTC(IREG3D,2)-SY)**2+
     *    (R*DRIFTC(IREG3D,3)-SZ)**2
C                          SCALED SHIFTED NEUTRAL ENERGY
      ES=0.52197E-12*RV2
C                          SHIFTED NEUTRAL ENERGY
      ENS=ES*A
C                          SCALED ION TEMPERATURE
      TS=TEV/ATARG
C
      ESTS=ES/TS
      IF(ES.LE.2000.0) GO TO 110
      IF(ESTS.GE.20.0) GO TO 110
      C=SQRT(ATARG/A)
      C1=SQRT(ENS/TEV)
      C2=C*C1
      C3=0.0
      IF(C2**2.LT.174.0) C3=EXP(-C2**2)
      C4=2.0*C2
      IDQH=2
      CALL DQH32P(XTFCT,RM)
      RRATE=0.780939E+6*RM*TS*SQRT(A/ENS)
      SIGMA=RRATE/S
      GO TO 120
C                    MEAN RELATIVE NEUTRAL/ION ENERGY
  110 ER= 1.5*A*TS+ENS
      CALL HXHEP(ER/A,SIGMA)
C                    CONSERVE THE REACTION RATE
      SIGMA=SIGMA*SQRT(ER/E)
C                    ASSIGN THIS VALUE TO HE++ AS IONIZATION
  120 SIGI(L)=SIGI(L)+SIGMA*DENSI(IREG3D,L)
C
      RETURN
C---------------------------------------------------------------------
  130 IF(.TRUE.) RETURN
C
C     INCIDENT PARTICLE IS HE
C     -----------------------
C
      RETURN
      END
C.......................................................................
C.......................................................................
      SUBROUTINE HXHP(ER,SIGMA)
      COMMON/CHXHP/ ICXTYP
C
C     RETURNS MICROSCOPIC CROSS SECTION SIGMA FOR CHARGE-EXCHANGE
C     REACTION BETWEEN HYDROGEN ATOMS/IONS
C
C     ER=RELATIVE ENERGY
C
C                    MICROSCOPIC CROSS SECTION OF REACTION
C                    (H+)+H-->H+(H+) IS GIVEN
C
C     ICXTYP=1:JANEV - 'ELEMENTARY PROCESSES IN HYDROGEN-HELIUM PLASMA',
C                       SPRINGER (1987))
C
      DIMENSION R318(9)
      DATA R318/-3.274123792568E+01,
     *          -8.916456579806E-02,
     *          -3.016990732025E-02,
     *           9.205482406462E-03,
     *           2.400266568315E-03,
     *          -1.927122311323E-03,
     *           3.654750340106E-04,
     *          -2.788866460622E-05,
     *           7.422296363524E-07/
C
      IF( ICXTYP.EQ.1 ) THEN
C                                   JANEV (1987)
          ESCALE=ER
          IF(ESCALE.LT.0.1) ESCALE=0.1
          IF( ESCALE.LT.2.E6 )THEN
            CALL PNFIT(9,R318(1) ,ESCALE,SIGMA)
          ELSE
            SIGMA=0.0
          ENDIF
      ELSE
          ESCALE=ER
          IF(ESCALE.GT. 200.0) GO TO 10
          IF(ESCALE.LT.0.001) ESCALE=0.001
C                                   GREENLAND,1984 (E.LE.200 EV)
          SIGMA=4.549E-15-1.033E-15*ALOG10(ESCALE)
          RETURN
C                                   RIVIERE  (E.GT.200 EV)
   10     SIGMA=6.937E-15*(1.0-0.155*ALOG10(ESCALE))**2
          IF(ESCALE.GE. 15000.0)
     *    SIGMA=SIGMA/(1.0+0.1112E-14*(ESCALE**3.3))
      END IF
C
C
      RETURN
      END
C.......................................................................
C.......................................................................
      DOUBLE PRECISION FUNCTION XTFCT(X)
C
      REAL*8 X,D,D1,D2,F
C
      COMMON/DQHCOM/IDQH,KES,AR,TS,C1,C2,C3,C4
C
      ER=TS*X*X
      GO TO ( 10 , 20 , 30 , 40 ), IDQH
   10 CALL HXHP(ER,SIGMA)
      GO TO 50
   20 CALL HXHEP(ER,SIGMA)
      GO TO 50
   30 CALL XIPP(ER,SIGMA)
      GO TO 50
   40 CALL ELXS(KES,ER*AR,SIGMA)
   50 IF(C3.EQ.0.0) GO TO 60
      D=C4*X
      IF(D.GT.174.0) GO TO 60
      D=DEXP(D)
      F=(D-1.0D0/D)*C3
      GO TO 70
   60 D1=C2*(2.0D0*X-C2)
      D2=-C2*(2.0D0*X+C2)
      F=DEXP(D1)-DEXP(D2)
   70 XTFCT=X*X*F*SIGMA
      RETURN
      END
C.......................................................................
C.......................................................................
C
C     ..................................................................
C
C        SUBROUTINE DQH04P
C
C        PURPOSE
C           TO COMPUTE INTEGRAL(EXP(-X*X)*FCT(X), SUMMED OVER X FROM
C                               0 TO +INFINITY).
C
C        USAGE
C           CALL DQH04P (FCT,Y)
C           PARAMETER FCT REQUIRES AN EXTERNAL STATEMENT
C
C        DESCRIPTION OF PARAMETERS
C           FCT    - THE NAME OF AN EXTERNAL DOUBLE PRECISION FUNCTION
C                    SUBPROGRAM USED.
C           Y      - THE RESULTING DOUBLE PRECISION INTEGRAL VALUE.
C
C        REMARKS
C           NONE
C
C        SUBROUTINES AND FUNCTION SUBPROGRAMS REQUIRED
C           THE EXTERNAL DOUBLE PRECISION FUNCTION SUBPROGRAM FCT(X)
C           MUST BE FURNISHED BY THE USER.
C
C        METHOD
C           EVALUATION IS DONE BY MEANS OF 4-POINT GAUSSIAN-HERMITE
C           QUADRATURE FORMULA, WHICH INTEGRATES EXACTLY WHENEVER
C           FCT(X) IS A POLYNOMIAL UP TO DEGREE 15.
C           FOR REFERENCE, SEE
C           SHAO/CHEN/FRANK, TABLES OF ZEROS AND GAUSSIAN WEIGHTS OF
C           CERTAIN ASSOCIATED LAGUERRE POLYNOMIALS AND THE RELATED
C           GENERALIZED HERMITE POLYNOMIALS, IBM TECHNICAL REPORT
C           TR00.1100 (MARCH 1964), PP.213-214.
C
C     ..................................................................
C
      SUBROUTINE DQH04P(FCT,Y)
C
      REAL*8  X,Y,FCT
C
      EXTERNAL FCT
C
      X=.29306374202572440D1
      Y=.19960407221136762D-3*FCT(X)
      X=.19816567566958429D1
      Y=Y+.17077983007413475D-1*FCT(X)
      X=.11571937124467802D1
      Y=Y+.20780232581489188D0*FCT(X)
      X=.38118699020732212D0
      Y=Y+.66114701255824129D0*FCT(X)
      RETURN
      END
C.......................................................................
C.......................................................................
C
C
C        SUBROUTINE DQH12P
C
C        PURPOSE
C           TO COMPUTE INTEGRAL(EXP(-X*X)*FCT(X), SUMMED OVER X FROM
C                               0 TO +INFINITY).
C
C        USAGE
C           CALL DQH12P (FCT,Y)
C           PARAMETER FCT REQUIRES AN EXTERNAL STATEMENT
C
C        DESCRIPTION OF PARAMETERS
C           FCT    - THE NAME OF AN EXTERNAL DOUBLE PRECISION FUNCTION
C                    SUBPROGRAM USED.
C           Y      - THE RESULTING DOUBLE PRECISION INTEGRAL VALUE.
C
C        REMARKS
C           NONE
C
C        SUBROUTINES AND FUNCTION SUBPROGRAMS REQUIRED
C           THE EXTERNAL DOUBLE PRECISION FUNCTION SUBPROGRAM FCT(X)
C           MUST BE FURNISHED BY THE USER.
C
C        METHOD
C           EVALUATION IS DONE BY MEANS OF 12-POINT GAUSSIAN-HERMITE
C           QUADRATURE FORMULA, WHICH INTEGRATES EXACTLY WHENEVER
C           FCT(X) IS A POLYNOMIAL UP TO DEGREE 47.
C           FOR REFERENCE, SEE
C           SHAO/CHEN/FRANK, TABLES OF ZEROS AND GAUSSIAN WEIGHTS OF
C           CERTAIN ASSOCIATED LAGUERRE POLYNOMIALS AND THE RELATED
C           GENERALIZED HERMITE POLYNOMIALS, IBM TECHNICAL REPORT
C           TR00.1100 (MARCH 1964), PP.213-214.
C
C     ..................................................................
C
      SUBROUTINE DQH12P(FCT,Y)
C
      REAL*8 X,Y,FCT
C
      EXTERNAL FCT
C
      X=.60159255614257397D1
      Y=.16643684964891089D-15*FCT(X)
      X=.52593829276680444D1
      Y=Y+.65846202430781701D-12*FCT(X)
      X=.46256627564237873D1
      Y=Y+.30462542699875639D-9*FCT(X)
      X=.40536644024481495D1
      Y=Y+.40189711749414297D-7*FCT(X)
      X=.35200068130345247D1
      Y=Y+.21582457049023336D-5*FCT(X)
      X=.30125461375655648D1
      Y=Y+.56886916364043798D-4*FCT(X)
      X=.25238810170114270D1
      Y=Y+.8236924826884175D-3*FCT(X)
      X=.20490035736616989D1
      Y=Y+.70483558100726710D-2*FCT(X)
      X=.15842500109616941D1
      Y=Y+.37445470503230746D-1*FCT(X)
      X=.11267608176112451D1
      Y=Y+.12773962178455916D0*FCT(X)
      X=.67417110703721224D0
      Y=Y+.28617953534644302D0*FCT(X)
      X=.22441454747251559D0
      Y=Y+.42693116386869925D0*FCT(X)
      RETURN
      END
C.......................................................................
C.......................................................................
C
C
C        SUBROUTINE DQH32P
C
C        PURPOSE
C           TO COMPUTE INTEGRAL(EXP(-X*X)*FCT(X), SUMMED OVER X FROM
C                               0 TO +INFINITY).
C
C        USAGE
C           CALL DQH32P (FCT,Y)
C           PARAMETER FCT REQUIRES AN EXTERNAL STATEMENT
C
C        DESCRIPTION OF PARAMETERS
C           FCT    - THE NAME OF AN EXTERNAL DOUBLE PRECISION FUNCTION
C                    SUBPROGRAM USED.
C           Y      - THE RESULTING DOUBLE PRECISION INTEGRAL VALUE.
C
C        REMARKS
C           NONE
C
C        SUBROUTINES AND FUNCTION SUBPROGRAMS REQUIRED
C           THE EXTERNAL DOUBLE PRECISION FUNCTION SUBPROGRAM FCT(X)
C           MUST BE FURNISHED BY THE USER.
C
C        METHOD
C           EVALUATION IS DONE BY MEANS OF 32-POINT GAUSSIAN-HERMITE
C           QUADRATURE FORMULA, WHICH INTEGRATES EXACTLY WHENEVER
C           FCT(X) IS A POLYNOMIAL UP TO DEGREE 127.
C           FOR REFERENCE, SEE
C           SHAO/CHEN/FRANK, TABLES OF ZEROS AND GAUSSIAN WEIGHTS OF
C           CERTAIN ASSOCIATED LAGUERRE POLYNOMIALS AND THE RELATED
C           GENERALIZED HERMITE POLYNOMIALS, IBM TECHNICAL REPORT
C           TR00.1100 (MARCH 1964), PP.213-214.
C
C     ..................................................................
C
      SUBROUTINE DQH32P(FCT,Y)
C
      REAL*8 X,Y,FCT
C
      EXTERNAL FCT
C
      X=.10526123167960546D2
      Y=.55357065358569428D-48*FCT(X)
      X=.9895287586829539D1
      Y=Y+.16797479901081592D-42*FCT(X)
      X=.9373159549646721D1
      Y=Y+.34211380112557405D-38*FCT(X)
      X=.8907249099964770D1
      Y=Y+.15573906246297638D-34*FCT(X)
      X=.8477529083379863D1
      Y=Y+.25496608991129993D-31*FCT(X)
      X=.8073687285010225D1
      Y=Y+.19291035954649669D-28*FCT(X)
      X=.7689540164040497D1
      Y=Y+.7861797788925910D-26*FCT(X)
      X=.7321013032780949D1
      Y=Y+.19117068833006428D-23*FCT(X)
      X=.69652411205511075D1
      Y=Y+.29828627842798512D-21*FCT(X)
      X=.66201122626360274D1
      Y=Y+.31522545665037814D-19*FCT(X)
      X=.62840112287748282D1
      Y=Y+.23518847106758191D-17*FCT(X)
      X=.59556663267994860D1
      Y=Y+.12800933913224380D-15*FCT(X)
      X=.56340521643499721D1
      Y=Y+.52186237265908475D-14*FCT(X)
      X=.53183252246332709D1
      Y=Y+.16283407307097204D-12*FCT(X)
      X=.50077796021987682D1
      Y=Y+.39591777669477239D-11*FCT(X)
      X=.47018156474074998D1
      Y=Y+.7615217250145451D-10*FCT(X)
      X=.43999171682281376D1
      Y=Y+.11736167423215493D-8*FCT(X)
      X=.41016344745666567D1
      Y=Y+.14651253164761094D-7*FCT(X)
      X=.38065715139453605D1
      Y=Y+.14955329367272471D-6*FCT(X)
      X=.35143759357409062D1
      Y=Y+.12583402510311846D-5*FCT(X)
      X=.32247312919920357D1
      Y=Y+.8788499230850359D-5*FCT(X)
      X=.29373508230046218D1
      Y=Y+.51259291357862747D-4*FCT(X)
      X=.26519724354306350D1
      Y=Y+.25098369851306249D-3*FCT(X)
      X=.23683545886324014D1
      Y=Y+.10363290995075777D-2*FCT(X)
      X=.20862728798817620D1
      Y=Y+.36225869785344588D-2*FCT(X)
      X=.18055171714655449D1
      Y=Y+.10756040509879137D-1*FCT(X)
      X=.15258891402098637D1
      Y=Y+.27203128953688918D-1*FCT(X)
      X=.12472001569431179D1
      Y=Y+.58739981964099435D-1*FCT(X)
      X=.9692694230711780D0
      Y=Y+.10849834930618684D0*FCT(X)
      X=.69192230581004458D0
      Y=Y+.17168584234908370D0*FCT(X)
      X=.41498882412107868D0
      Y=Y+.23299478606267805D0*FCT(X)
      X=.13830224498700972D0
      Y=Y+.27137742494130398D0*FCT(X)
      RETURN
      END
C.......................................................................
C.......................................................................
      SUBROUTINE HXHEP(ER,SIGMA)
C
C     RETURNS MICROSCOPIC CROSS SECTION SIGMA FOR CHARGE-EXCHANGE
C     REACTION OF HYDROGEN NEUTRALS HITTING HELIUM IONS
C
C     ER=RELATIVE ENERGY (REFERRED TO H-PROJECTILE)
C
C                    MICROSCOPIC CROSS SECTION OF REACTION
C                    (HE++)+H-->(HE+)+(H+) IS GIVEN (RIVIERE)
C
C                    SCALED ENERGY
      ATARG=4.0
      ESCALE=ER*ATARG
      IF(ESCALE.GT.12000.0) GO TO 10
      IF(ESCALE.LT.1.0) ESCALE=1.0
      SIGMA=10.0**(-16.54+0.09*(ALOG10(ESCALE))**2)
      GO TO 20
   10 SIGMA=10.0**(-14.78-1.33*(4.5-ALOG10(ESCALE))**2)
C
   20 RETURN
      END
C.......................................................................
C.......................................................................
      SUBROUTINE PREEL
C
C     PRESET FOR E.S. ROUTINES
C
C----------------------------------(SEE SYMBOLS MEANING IN S.R. INPUT)
      INCLUDE 'pnimb'
      PARAMETER (MRG=MRGX ,MZN=MRG-2 ,MCH=41 ,MCC=MCCX, MWAC=13 )
      PARAMETER (MBS=MBSX ,MSD=MBS   ,MSC=2 )
      PARAMETER (MIO=3    ,MCP=6)
      PARAMETER (MEG=5    ,MIXS=10   ,MLEAK=9)
C---------------------------------------------------
C
      COMMON/IOFILE/IN,IOUT,IUERR,IARK,IPUNCH,IGMT,ITRMT,ITAPIO(2)
C
      COMMON/CGEOMT/KREG,KREGM1,IR3DST,IR2DST,AREAD(MRG),
     * KONDC,KONDZ,I3D,KREG3D,LREG3D,LQUOTA,LDZETA,KSXY3D,NZETA
C
      COMMON/COMPOS/NION,NCOM,LIGHTW,RNLITE,EWLITE,
     * SYMB(MIO),PERC(MIO),DENSE(MRG),DENSI(MRG,MIO),EATMD,EATMR,
     * TEMPE(MRG),TEMPI(MRG),IBOUND(MRG),ALBEDO(MRG),LIWALL(MRG),COEFMX
     *,IEMIS(MRG),BEXPT(MRG),WEXPT(MRG,3),SHP,DRIFTV(MRG),DRIFTC(MRG,3)
     *,ISTARG(MRG),CHARGE(MCP),PROREQ(4),ALBATO(MRG),ALBENE(MRG),INDHEL
     *,NTSPUT,PSEMIP(MRG,2),IRTRIM(MCP,MCP),NFTRIM,LPVOID,DCUTCX,TCUTCX
     *,ICUTCX,INDEF,IYCHEM,EYCHEM,AYCHEM,NLEAK,XLEAK(4,MLEAK),ILEAK(MRG)
     *,NZREC,NUTRLZ(MCP),MIMP,IGOPT,PRORCL(MIO),UNDEF
     *,NZYIZ,CZYIZ(MCP),AYIZ(MCP),BYIZ(MCP),EYIZ(MCP),IYIZ(MCP),ALFCH7
     *,PARDIR(MRG,3),RECMAT(MIO,MIO,MRG)
C
      PARAMETER (NCT=24,MKES=4)
      COMMON/CTAB0/TABLE(NCT,11),IZLOZ(0:100)
      COMMON/CTABLE/SPUTAB(NCT,NCT)
     *,LABINT(MCP),LABEXT(NCT),IXS(MIXS),ITRIM
     *,NIONPM,MCX,MOLEC(MCP),IATOM(MCP),EXTSYM(MCP),QESP(NCT,NCT)
     *,EB(NCT),QCOEF(NCT),TLOTZ(NCT,26),CXRMAX(5,MRG),ESRMAX(MKES,MRG)
     *,TBELL(NCT,26),ITAGS(NCT,NCT,2)
C
C
      COMMON/PHYSIC/WSTART,WGAME,W,NUTRAL,MOL,A,E,CLOCK,IBIN,IBRNPL,
     * SIGT,SIGIT,SIGCXT,SIGEST,SIGST,SIGSTS,IDMOL,DISH2S(MRG),
     * ELECTR(MRG,MCP),SIGE,SIGI(MIO),SIGCX(MIO),SIGEL(MIO),
     * DISH2(MRG),DIOH2(MRG)
     *,SVI,SVCX(MIO)
C
      PARAMETER (NE=1000)
C
C                          SET UP MAX(VR*SIGEL(VR))
C                          ------------------------
C
C                          LOOP OVER REGIONS
      DO 30 J=IR3DST,KREG3D
        IF(IBOUND(J).NE.0) GO TO 30
C                          HIGHEST TEMPERATURE
        ERMAX=30.0*TEMPI(J)
        DE=ERMAX/FLOAT(NE)
C                          H,D,DT,T,HE PROJECTILE
        KESMIN=1
        KESMAX=MKES
        DO 20 KES=KESMIN,KESMAX
          ESRMAX(KES,J)=0.0
          IF(KES.EQ.3) GOTO 20
          DO 10 K=1,NE
            EREL=FLOAT(K)*DE
            CALL ELXS(KES,EREL,SIGMA)
            ESRMAX(KES,J)=AMAX1(ESRMAX(KES,J),SQRT(EREL)*SIGMA)
   10     CONTINUE
   20   CONTINUE
   30 CONTINUE
C
      RETURN
      END
C.......................................................................
C.......................................................................
      SUBROUTINE XSEL0
C
C     RETURNS MACROSCOPIC ELASTIC CROSS SECTIONS SIGEL(I) (I=1,NION)
C     AVERAGED OVER ALL TARGET VELOCITIES (MAXWELL + FLOW) FOR NEUTRALS
C     IN A PLASMA REGION CONTAINING H+,D+,DT+,T+,HE++. THIS LAST ION
C     CONTRIBUTES TO IONIZATION CROSS SECTION.
C
C----------------------------------(SEE SYMBOLS MEANING IN S.R. INPUT)
      INCLUDE 'pnimb'
      PARAMETER (MRG=MRGX ,MZN=MRG-2 ,MCH=41 ,MCC=MCCX, MWAC=13 )
      PARAMETER (MBS=MBSX ,MSD=MBS   ,MSC=2 )
      PARAMETER (MIO=3    ,MCP=6)
      PARAMETER (MEG=5    ,MIXS=10   ,MLEAK=9)
C---------------------------------------------------
C
      COMMON/IOFILE/IN,IOUT,IUERR,IARK,IPUNCH,IGMT,ITRMT,ITAPIO(2)
C
      REAL*8 XTFCT,RM
C
      EXTERNAL XTFCT
C
      COMMON/STOGEO/IR,IREG,IREG3D,ISENT,LEAVES,XIN,YIN,ZIN,
     * COSP,SINP,COST,SINT,TANT,COSKT,DIST,PILX,IRZ,IREGZ,IREG3Z,
     * IZIN,IZ,ISSOU,X,Y,Z
      REAL*8 X,Y,Z
C
      COMMON/COMPOS/NION,NCOM,LIGHTW,RNLITE,EWLITE,
     * SYMB(MIO),PERC(MIO),DENSE(MRG),DENSI(MRG,MIO),EATMD,EATMR,
     * TEMPE(MRG),TEMPI(MRG),IBOUND(MRG),ALBEDO(MRG),LIWALL(MRG),COEFMX
     *,IEMIS(MRG),BEXPT(MRG),WEXPT(MRG,3),SHP,DRIFTV(MRG),DRIFTC(MRG,3)
     *,ISTARG(MRG),CHARGE(MCP),PROREQ(4),ALBATO(MRG),ALBENE(MRG),INDHEL
     *,NTSPUT,PSEMIP(MRG,2),IRTRIM(MCP,MCP),NFTRIM,LPVOID,DCUTCX,TCUTCX
     *,ICUTCX,INDEF,IYCHEM,EYCHEM,AYCHEM,NLEAK,XLEAK(4,MLEAK),ILEAK(MRG)
     *,NZREC,NUTRLZ(MCP),MIMP,IGOPT,PRORCL(MIO),UNDEF
     *,NZYIZ,CZYIZ(MCP),AYIZ(MCP),BYIZ(MCP),EYIZ(MCP),IYIZ(MCP),ALFCH7
     *,PARDIR(MRG,3),RECMAT(MIO,MIO,MRG)
C
      PARAMETER (NCT=24,MKES=4)
      COMMON/CTAB0/TABLE(NCT,11),IZLOZ(0:100)
      COMMON/CTABLE/SPUTAB(NCT,NCT)
     *,LABINT(MCP),LABEXT(NCT),IXS(MIXS),ITRIM
     *,NIONPM,MCX,MOLEC(MCP),IATOM(MCP),EXTSYM(MCP),QESP(NCT,NCT)
     *,EB(NCT),QCOEF(NCT),TLOTZ(NCT,26),CXRMAX(5,MRG),ESRMAX(MKES,MRG)
     *,TBELL(NCT,26),ITAGS(NCT,NCT,2)
C
      COMMON/PHYSIC/WSTART,WGAME,W,NUTRAL,MOL,A,E,CLOCK,IBIN,IBRNPL,
     * SIGT,SIGIT,SIGCXT,SIGEST,SIGST,SIGSTS,IDMOL,DISH2S(MRG),
     * ELECTR(MRG,MCP),SIGE,SIGI(MIO),SIGCX(MIO),SIGEL(MIO),
     * DISH2(MRG),DIOH2(MRG)
     *,SVI,SVCX(MIO)
C
      COMMON/DQHCOM/IDQH,KES,AR,TS,C1,C2,C3,C4
C
C
C                    E.S. FOR H+,D+,DT+,T+ IONS
C                         AND H,D,T,DT,HE NEUTRALS ONLY
C                           (A= MASS OF INCIDENT NEUTRAL)
CW    IF(MOL.EQ.2) THEN
CW      WRITE(6,*) ' XSEL0 MOL=',MOL,' IPROJ=',LABINT(NUTRAL),' A=',A
CW    ENDIF
      IPROJ=LABINT(NUTRAL)
      IF(IPROJ.GT.7 .OR. IPROJ.EQ.6) GO TO 40
C
C                    REGION TEMPERATURE (EV)
      TEV=TEMPI(IREG3D)
      TEVE=TEMPE(IREG3D)
C                    MACH'S NUMBER
      FMACH=DRIFTV(IREG3D)
C                    VELOCITY OF THE NEUTRAL
      S=SQRT(E/A)*1.3841E+06
      SX=S*COSP*SINT
      SY=S*SINP*SINT
      SZ=S*COST
C                    A=MASS OF THE INCIDENT PARTICLE
C
C     INCIDENT PARTICLE IS AN ISOTOPE OF HYDROGEN OR HELIUM
C     -----------------------------------------------------
      IF(IPROJ.GE.2 .AND. IPROJ.LE.5) THEN
        IF(MOL.EQ.2) THEN
          KES=4
        ELSE
          KES=1
        ENDIF
      ELSE IF(IPROJ.EQ.7) THEN
        KES=2
      ELSE
        CALL EXITN(1)
      ENDIF
C
C                   H,D,DT,T TARGET (I.E. I UP TO 5)
      DO 30 I=2,5
        L=LABEXT(I)
        IF(L.EQ.0) GO TO 30
C                    RELATIVE VELOCITY BETWEEN FLOW AND NEUTRAL
        ATARG=TABLE(I,3)
        R=SQRT( (TABLE(I,2)*TEVE+TEV)/ATARG)*1.0E+06 * FMACH
        RV2=(R*DRIFTC(IREG3D,1)-SX)**2+(R*DRIFTC(IREG3D,2)-SY)**2+
     *      (R*DRIFTC(IREG3D,3)-SZ)**2
C                          SCALED SHIFTED NEUTRAL ENERGY
        ES=0.52197E-12*RV2
C                          SHIFTED NEUTRAL ENERGY
        ENS=ES*A
C                          SCALED ION TEMPERATURE
        TS=TEV/ATARG
C
        IF(KES.EQ.2 .OR. KES.EQ.4) GO TO 10
        IF(TS.LE.8.0) GO TO 10
        C=SQRT(ATARG/A)
        C1=SQRT(ENS/TEV)
        C2=C*C1
        C3=0.0
        IF(C2**2.LT.174.0) C3=EXP(-C2**2)
        C4=2.0*C2
        IDQH=4
        AR=A*ATARG/(A+ATARG)
        CALL DQH04P(XTFCT,RM)
        RRATE=0.780939E+6*RM*TS*SQRT(A/ENS)
        SIGMA=RRATE/S
        GO TO 20
C                    MEAN RELATIVE NEUTRAL/ION ENERGY
C           (SO CALLED AV APPROXIMATION IN J.COMP.PHYS. 1985,P.80)
   10   ER= 1.5*A*TS+ENS
        EREL=(ATARG/(A+ATARG))*ER
        CALL ELXS(KES,EREL,SIGMA)
C                    CONSERVE THE REACTION RATE
        SIGMA=SIGMA*SQRT(ER/E)
   20   SIGEL(L)=DENSI(IREG3D,L)*SIGMA
CW      IF(MOL.EQ.2) THEN
CW        WRITE(6,*) ' XSEL0 MOL=',MOL,' EREL=',EREL,' SIGMA=',SIGMA
CW      ENDIF
   30 CONTINUE
C
   40 RETURN
      END
C.......................................................................
C.......................................................................
      SUBROUTINE ELAS
C
C     ELASTIC SCATTERING COLLISION ROUTINE
C
C     TARGET PLASMA : MAXWELLIAN + FLOW
C
C----------------------------------(SEE SYMBOLS MEANING IN S.R. INPUT)
      INCLUDE 'pnimb'
      PARAMETER (MRG=MRGX ,MZN=MRG-2 ,MCH=41 ,MCC=MCCX, MWAC=13 )
      PARAMETER (MBS=MBSX ,MSD=MBS   ,MSC=2 )
      PARAMETER (MIO=3    ,MCP=6)
      PARAMETER (MEG=5    ,MIXS=10   ,MLEAK=9)
C---------------------------------------------------
C
      COMMON/IOFILE/IN,IOUT,IUERR,IARK,IPUNCH,IGMT,ITRMT,ITAPIO(2)
C
      COMMON/STOGEO/IR,IREG,IREG3D,ISENT,LEAVES,XIN,YIN,ZIN,
     * COSP,SINP,COST,SINT,TANT,COSKT,DIST,PILX,IRZ,IREGZ,IREG3Z,
     * IZIN,IZ,ISSOU,X,Y,Z
      REAL*8 X,Y,Z
C
      COMMON/COMPOS/NION,NCOM,LIGHTW,RNLITE,EWLITE,
     * SYMB(MIO),PERC(MIO),DENSE(MRG),DENSI(MRG,MIO),EATMD,EATMR,
     * TEMPE(MRG),TEMPI(MRG),IBOUND(MRG),ALBEDO(MRG),LIWALL(MRG),COEFMX
     *,IEMIS(MRG),BEXPT(MRG),WEXPT(MRG,3),SHP,DRIFTV(MRG),DRIFTC(MRG,3)
     *,ISTARG(MRG),CHARGE(MCP),PROREQ(4),ALBATO(MRG),ALBENE(MRG),INDHEL
     *,NTSPUT,PSEMIP(MRG,2),IRTRIM(MCP,MCP),NFTRIM,LPVOID,DCUTCX,TCUTCX
     *,ICUTCX,INDEF,IYCHEM,EYCHEM,AYCHEM,NLEAK,XLEAK(4,MLEAK),ILEAK(MRG)
     *,NZREC,NUTRLZ(MCP),MIMP,IGOPT,PRORCL(MIO),UNDEF
     *,NZYIZ,CZYIZ(MCP),AYIZ(MCP),BYIZ(MCP),EYIZ(MCP),IYIZ(MCP),ALFCH7
     *,PARDIR(MRG,3),RECMAT(MIO,MIO,MRG)
C
      PARAMETER (NCT=24,MKES=4)
      COMMON/CTAB0/TABLE(NCT,11),IZLOZ(0:100)
      COMMON/CTABLE/SPUTAB(NCT,NCT)
     *,LABINT(MCP),LABEXT(NCT),IXS(MIXS),ITRIM
     *,NIONPM,MCX,MOLEC(MCP),IATOM(MCP),EXTSYM(MCP),QESP(NCT,NCT)
     *,EB(NCT),QCOEF(NCT),TLOTZ(NCT,26),CXRMAX(5,MRG),ESRMAX(MKES,MRG)
     *,TBELL(NCT,26),ITAGS(NCT,NCT,2)
C
C
      COMMON/PHYSIC/WSTART,WGAME,W,NUTRAL,MOL,A,E,CLOCK,IBIN,IBRNPL,
     * SIGT,SIGIT,SIGCXT,SIGEST,SIGST,SIGSTS,IDMOL,DISH2S(MRG),
     * ELECTR(MRG,MCP),SIGE,SIGI(MIO),SIGCX(MIO),SIGEL(MIO),
     * DISH2(MRG),DIOH2(MRG)
     *,SVI,SVCX(MIO)
C
      COMMON /CESMOT/VNEUT(3),VION(3)
      EQUIVALENCE (VNEUT(1),SXOLD),(VNEUT(2),SYOLD),(VNEUT(3),SZOLD),
     *            (VION(1),SX),(VION(2),SY),(VION(3),SZ)
C
      COMMON/CSCAT/IPROJ,IONHIT,ATARG,ER,EREL,SCX,SES,SST
C
      IF(IPROJ.GE.2 .AND. IPROJ.LE.5) THEN
        IF(MOL.EQ.2) THEN
          KES=4
        ELSE
          KES=1
        ENDIF
      ELSE IF(IPROJ.EQ.7) THEN
        KES=2
      ELSE
        CALL EXITN(1)
      ENDIF
C                           FINAL NEW PARAMETERS
      CALL COLES(KES,A,ATARG,EREL,SES)
C
      RETURN
      END
C.......................................................................
C.......................................................................
      SUBROUTINE COLES(KES,AN,ATARG,EREL,SIGMA)
C NEW----------------
C     SCATTERING COLLISION BETWEEN NEUTRAL AND ION PARTICLES
C     COMPUTATION OF THE DIFFUSION ANGLE COSINE IN C.M.S.
C     (J.H.H.M. POTTERS AND W.J.GOEDHEER - RIJNHUIZEN REPORT 82-142)
C
C     COMPUTATION OF NEW ENERGY AND DIRECTION IN L.S.
C
C     KES  = KIND OF ELASTIC SCATTERING
C            KES = 1  H + H+ (2PSIGMAU POTENTIAL OF H2+)
C            KES = 2 HE + H+ (MODIFIED MORSE POTENTIAL)
C            KES = 3 HE + H+ (SCREENED COULOMB POTENTIAL) NOT USED
C            KES = 4 H2 + H+ (MODIFIED MORSE POTENTIAL)
C     AN   = NEUTRAL MASS (AMU)
C     ATARG= TARGET MASS (AMU)
C     SIGMA= ELASTIC SCATTERING CROSS SECTION (CM2)
C     EREL = RELATIVE ENERGY IN C.M.S. (EV)
C     CCHI = COSINE OF THE DIFFUSION ANGLE IN C.M.S.
C
C----------------------------------(SEE SYMBOLS MEANING IN S.R. INPUT)
      IMPLICIT REAL*8 (A-H,O-Z)
      INCLUDE 'pnimb'
      PARAMETER (MRG=MRGX ,MZN=MRG-2 ,MCH=41 ,MCC=MCCX, MWAC=13 )
      PARAMETER (MBS=MBSX ,MSD=MBS   ,MSC=2 )
      PARAMETER (MIO=3    ,MCP=6)
      PARAMETER (MEG=5    ,MIXS=10   ,MLEAK=9)
C---------------------------------------------------
C
      COMMON/IOFILE/IN,IOUT,IUERR,IARK,IPUNCH,IGMT,ITRMT,ITAPIO(2)
C
      REAL
     * XIN,YIN,ZIN,COSP,SINP,COST,SINT,TANT,COSKT,DIST,PILX
      COMMON/STOGEO/IR,IREG,IREG3D,ISENT,LEAVES,XIN,YIN,ZIN,
     * COSP,SINP,COST,SINT,TANT,COSKT,DIST,PILX,IRZ,IREGZ,IREG3Z,
     * IZIN,IZ,ISSOU,X,Y,Z
      REAL*8 X,Y,Z
C
      REAL          WSTART,WGAME,W,           A,E,CLOCK,
     * SIGT,SIGIT,SIGCXT,SIGEST,SIGST,SIGSTS,      DISH2S     ,
     * ELECTR         ,SIGE,SIGI     ,SIGCX     ,SIGEL     ,
     * DISH2     ,DIOH2
     *,SVI,SVCX
      COMMON/PHYSIC/WSTART,WGAME,W,NUTRAL,MOL,A,E,CLOCK,IBIN,IBRNPL,
     * SIGT,SIGIT,SIGCXT,SIGEST,SIGST,SIGSTS,IDMOL,DISH2S(MRG),
     * ELECTR(MRG,MCP),SIGE,SIGI(MIO),SIGCX(MIO),SIGEL(MIO),
     * DISH2(MRG),DIOH2(MRG)
     *,SVI,SVCX(MIO)
C
      REAL   ER,EREL,SIGMA,CCHI,SCHI,R,VRC,VRD,VNEUT,VION
     *      ,VR,VR2,VRXY,VRXY2,PSI,TRAN,SUM,VS
     *      ,V,VN(3),VNEUT2,VN2,VS2,CTETA
     *      ,VT(3),VRSC(3),VRS,VRS2,VT2,ET,ETOT,Q(3),QS(3)
     *      ,AN,ATARG,RMASS
     *      ,BS2,BS2M,C
      PARAMETER (NCT=24,MKES=4)
      DIMENSION AA(MKES),EPS(MKES),R(3,3),VRC(3),VRD(3)
     *         ,AG(50,2),NG(2),NG2(2),FN2(2)
C
      COMMON /CESMOT/VNEUT(3),VION(3)
      COMMON /CESPAR/BS,GS2,L,K,ID,NERELA
C
      REAL*4 RANF
C
      EXTERNAL FELAS,DFELAS
C
      DATA ERROR/1.0D-6/,
     *     AA/0.879D-16,1.863D-16,0.728D-16,7.068D-16/,
     *     EPS/27.211D0,2.0D0,59.8642D0,2.7D0/,
     *     XP0/6.85D-1/,XPM/1.0D0/,
     *     PG,DUEPG/3.141592654D0,6.283185308D0/,
     *     NG/4,40/
      DATA ITIME/0/
C
C     AA = PG*(CHARACTERISTIC RANGE(A))**2
C
C
      IF(ITIME.EQ.1)GO TO 30
C
C     COMPUTATION OF THE COEFFICIENTS IN THE
C     GAUSS-MEHLER QUADRATURE FORMULA
C
      DO 20 I=1,2
        FN=NG(I)
        NG2(I)=NG(I)/2
        FN2(I)=NG2(I)
        DN=PG/(2.0D0*FN)
        JMAX=NG2(I)
        DO 10 J=1,JMAX
          AG(J,I)=DCOS((2*J-1)*DN)
   10   CONTINUE
   20 CONTINUE
      ITIME=1
C
C     COMPUTATION OF THE DIFFUSION ANGLE COSINE IN C.M.S.
C
   30 RMASS=ATARG/(AN+ATARG)
C                    HARD SPHERE SCATTERING FOR HELIUM
C                    (DELETE COMMENTS CC TO ACTIVATE THE MODEL)
CC         IF(KES.NE.2) GO TO 31
CC         C=RANF()
CC         CCHI=2.0*C-1.0
CC         GO TO 160
C                    END OF HARD SPHERE MODEL
   31 K=KES
      GS2=EREL/EPS(K)
      BS2M=SIGMA/AA(K)
      ICONT1=1
   40 ICONT2=1
      L=1
   50 C=RANF()
      BS2=C*BS2M
      BS=SQRT(BS2)
C     SEARCH FOR THE ROOT
      XS=BS
      IF(K.NE.2 .OR. K.NE.4 .OR.BS.LT.XP0) GO TO 120
      IF(BS.GE.XPM) GO TO 60
      XS=XP0
      GO TO 120
   60 IF(EREL.LT.0.5D0) GO TO 70
      XS=XPM
      IF(FELAS(XPM).LT.0.0D0) GO TO 120
      XS=XP0
      GO TO 120
   70 DX=1.0D-2
      YS=FELAS(XS)
   80 XF=XS-DX
      YF=FELAS(XF)
C     WRITE(IOUT,1000)BS,XF,YF
C1000 FORMAT(1P3D13.5)
      IF(YS*YF.LT.0.0D0)GO TO 120
      XS=XF
      YS=YF
      IF(XS.GT.0.0D0)GO TO 80
   90 IF(ICONT2.EQ.10)GO TO 100
      ICONT2=ICONT2+1
      GO TO 50
C     ROOT NOT FOUND : SET COS(CHI)=1.0
  100 CCHI=1.0
      NERELA =  NERELA+1
      IF(.FALSE.) THEN
        WRITE(IUERR, 110 )KES,EREL,BS
  110   FORMAT(//' **  ROOT NOT FOUND'//' KES=',I2,'  E REL.=',1PD14.5,
     *  ' EV','  BS=',D14.5//)
      ENDIF
      GO TO 160
  120 ERR=ERROR
      CALL NEWT1(XS,ERR,IT,FELAS,DFELAS,.TRUE.)
      IF(IT.LT.0)GO TO 90
C                             NUMERICAL INTEGRATION
C                             (GAUSS-MEHLER QUADRATURE FORMULA)
      L=2
      UM=BS/XS
      CHI=0.0D0
      I=1
      IF(K.EQ.1.AND.EREL.LT.1.0D0)I=2
      JMAX=NG2(I)
      DEN=FN2(I)
      DO 150 J=1,JMAX
        XF=XS/AG(J,I)
        YF=FELAS(XF)
        IF(ID.EQ.0)GO TO 145
        IF(ICONT1.EQ.10)GO TO 130
        ICONT1=ICONT1+1
        GO TO 40
C                 UNABLE TO COMPUTE THE INTEGRAL : SET COS(CHI)=1.0
  130   CCHI=1.0
        WRITE(IUERR, 140 )KES,EREL,BS
  140   FORMAT(//' ** UNABLE TO COMPUTE THE INTEGRAL'//
     *  ' KES=',I2,'  E REL.=',1PD14.5,' EV','  BS=',D14.5//)
        GO TO 160
  145   CHI=CHI+AG(JMAX-J+1,I)*YF
  150 CONTINUE
      CHI=PG*(1.0D0-CHI*UM/DEN)
      CCHI=DCOS(CHI)
C
C     COMPUTATION OF NEW ENERGY AND DIRECTION IN L.S.
C
  160 DO 170 I=1,3
        VRC(I)=VION(I)-VNEUT(I)
  170 CONTINUE
      VRXY2=VRC(1)**2+VRC(2)**2
      VR2=VRXY2+VRC(3)**2
      VR=SQRT(VR2)
      SCHI=SQRT(1.0-CCHI**2)
      C=RANF()
      PSI=DUEPG*C
      TRAN=-VR*SCHI
      VRD(1)=TRAN*COS(PSI)
      VRD(2)=TRAN*SIN(PSI)
      VRD(3)=VR*(1.0-CCHI)
      IF(VRXY2.GT.0.0)GO TO 200
      IF(VRC(3).GT.0.0) GO TO 180
      VRD(2)=-VRD(2)
      VRD(3)=-VRD(3)
  180 DO 190 I=1,3
        VT(I)=VION(I)-VRD(I)*AN/(ATARG+AN)
        VN(I)=VNEUT(I)+RMASS*VRD(I)
  190 CONTINUE
      GO TO 230
  200 VRXY=SQRT(VRXY2)
      R(1,1)=VRC(2)/VRXY
      R(2,1)=-VRC(1)/VRXY
      R(3,1)=0.0
      R(1,3)=VRC(1)/VR
      R(2,3)=VRC(2)/VR
      R(3,3)=VRC(3)/VR
      R(1,2)=-R(2,1)*R(3,3)
      R(2,2)=R(1,1)*R(3,3)
      R(3,2)=-VRXY/VR
      DO 220 I=1,3
        SUM=0.0
        DO 210 J=1,3
          SUM=SUM+R(I,J)*VRD(J)
  210   CONTINUE
        VT(I)=VION(I)-SUM*AN/(ATARG+AN)
        VN(I)=VNEUT(I)+SUM*RMASS
  220   CONTINUE
  230 VNEUT2=VNEUT(1)**2+VNEUT(2)**2+VNEUT(3)**2
      VN2=VN(1)**2+VN(2)**2+VN(3)**2
      VT2=VT(1)**2+VT(2)**2+VT(3)**2
      E=AN*VN2*0.52197E-12
      V=SQRT(VN2)
      CTETA=VN(1)*VNEUT(1)+VN(2)*VNEUT(2)+VN(3)*VNEUT(3)
      CTETA=CTETA/(V*SQRT(VNEUT2))
      COST=VN(3)/V
      IF(ABS(COST).LT.1.0E-3)COST=SIGN(1.0E-3,COST)
      IF(ABS(COST).GT.0.999)COST=SIGN(0.999,COST)
      SINT=SQRT(1.0-COST**2)
      TANT=SINT/COST
      VS2=VN(1)**2+VN(2)**2
      IF(VS2.GT.0.0)GO TO 240
      COSP=1.0
      SINP=0.0
      GO TO 250
  240 VS=SQRT(VS2)
      COSP=VN(1)/VS
      SINP=VN(2)/VS
  250 IF(.TRUE.) GO TO 300
C
C     DEBUG
C
      ET=ATARG*VT2*0.52197E-12
      DO 260 I=1,3
        VRSC(I)=VT(I)-VN(I)
  260 CONTINUE
      VRS2=VRSC(1)**2+VRSC(2)**2+VRSC(3)**2
      VRS=SQRT(VRS2)
      ETOT=E+ET
      DO 270 I=1,3
        Q(I)=AN*VNEUT(I)+ATARG*VION(I)
        QS(I)=AN*VN(I)+ATARG*VT(I)
  270 CONTINUE
      WRITE(IOUT, 280 ) VNEUT,VION,VN,VT,CCHI,PSI,CTETA
  280 FORMAT(/' VNEUT=',1P,3E13.4/' VION=',1P,3E13.4/' WNEUT=',
     *1P,3E13.4/
     *' WION=',1P,3E13.4/' COS(CHI)=',1PE13.4,' PSI=',E13.4,' CTETA=',
     *E13.4)
      WRITE(IOUT, 290 )E,ET,ETOT,VR,VRS,(Q(I),I=1,3),(QS(I),I=1,3)
  290 FORMAT(/' E=',1PE13.4,'  ET=',E13.4,'  ETOT=',E13.4,'  VR=',E13.4,
     *'  VRS=',E13.4/' Q=',3E13.4,'  QS=',3E13.4/)
  300 RETURN
      END
C.......................................................................
C.......................................................................
      DOUBLE PRECISION FUNCTION FELAS(X)
C NEW-----------------------------------
      IMPLICIT REAL*8 (A-H,O-Z)
      REAL*4 BS2,BS2M
      COMMON /CESPAR/BS,GS2,L,K,ID,NERELA
      DATA N/0/
      N=N+1
C
      ID=0
C
      GOTO (5,20,10,27), K
C
C     H + H+ : 2PSIGMAU POTENTIAL OF THE MOLECULAR ION H2+
C              (POTTERS & GOEDHEER)
    5 C=DEXP(-X)
      RX=1.0D0/X
      SX=(1.0D0+X+X**2/3.0D0)*C
      FI=(RX-C**2*(RX+1.0D0)-C*(1.0D0+X))/(SX-1.0D0)+RX
      GO TO 30
C
C     HE + H+ : SCREENED COULOMB POTENTIAL
C
   10 FI=DEXP(-X)/X
      GO TO 30
C
C     HE + H+ : MODIFIED MORSE POTENTIAL
C               (POTTERS & GOEDHEER)
   20 A=1.870D0
      IF(X.LT.1.0D0) A=2.20D0
   25 CONTINUE
      FI=DEXP(A*(1.0-X))
      FI=FI*(FI-2.0D0)
      GO TO 30
C
C     H2 + H+ : MODIFIED MORSE POTENTIAL
   27 A=3.0D0
      GOTO 25
C
   30 A=(BS/X)**2+FI/GS2
      B=1.0D0-A
      IF(L.EQ.2)GO TO 40
      FELAS=B
      RETURN
   40 IF(B.GT.0.D0)GO TO 50
      ID=1
      RETURN
   50 FELAS=1.0D0/DSQRT(B)
      RETURN
      END
C.......................................................................
C.......................................................................
      DOUBLE PRECISION FUNCTION DFELAS(X)
C NEW------------------------------------
      IMPLICIT REAL*8 (A-H,O-Z)
      COMMON /CESPAR/BS,GS2,L,K,ID,NERELA
      DATA H/1.0D-4/,H2/0.5D-4/
C
      GOTO (5,20,10,27), K
C
    5 DFELAS=(FELAS(X+H2)-FELAS(X-H2))/H
      RETURN
C
   10 DFELAS=2.0D0*(BS/X)**2/X+DEXP(-X)*(1.0D0/X+1.0D0)/(X*GS2)
      RETURN
C
   20 A=1.870D0
      IF(X.LT.1.0D0) A=2.20D0
   25 FI=DEXP(A*(1.0D0-X))
      DFELAS=2.0D0*((BS/X)**2/X-A*FI*(1.0D0-FI)/GS2)
      RETURN
C
   27 A=3.0D0
      GOTO 25
C
      END
C.......................................................................
C.......................................................................
      SUBROUTINE NEWT1(X,ER,IT,F,DF,LPOS)
C NEW------------------------------------
      IMPLICIT REAL*8 (A-H,O-Z)
      LOGICAL LPOS
      EXTERNAL F,DF
      PARAMETER (IMAX=100)
      IT=0
      S=0.0D0
   10 IF(LPOS .AND. X.LT.0.0D0) GOTO 50
      Z=X
      IT=IT+1
      S=-F(Z)/DF(Z)
      X=Z+S
      IF(DABS(X)-1.0D-9) 30 , 30 , 20
   20 S=S/X
   30 IF(DABS(S)-ER) 60 , 40 , 40
   40 IF(IT-IMAX) 10 , 50 , 50
   50 IT=-1
   60 ER=S
      RETURN
      END
C.......................................................................
C.......................................................................
      SUBROUTINE ELXS(KES,ERCM,SIGMA)
C NEW--------------------------------
C
C     ELASTIC SCATTERING X-SECTION BETWEEN NEUTRAL AND ION PARTICLES
C
C     KES=1   H + H+ (2PSIGMAU POTENTIAL OF H2+)
C     KES=2  HE + H+ (MODIFIED MORSE POTENTIAL)
C     KES=3  HE + H+ (SCREENED COULOMB POTENTIAL) NOT USED
C     KES=4  H2 + H+ (MODIFIED MORSE POTENTIAL)
C
C     DEGREE OF APPROXIMATION (IC=5 USED):
C     IC    = COSINE CUT-OFF INDEX (C.M.S.)
C             IC=1 COSINE = 0.95
C             IC=2 COSINE = 0.96
C             IC=3 COSINE = 0.97
C             IC=4 COSINE = 0.98
C             IC=5 COSINE = 0.99
C
C     EREL  = RELATIVE ENERGY IN C.M.S. (EV)
C             KES=1,3  ENERGY RANGE : 0.1 - 60.0 EV
C             KES=  2  ENERGY RANGE : 0.1 -  8.0 EV  (IC=1,2)
C                "       "      "   : 0.1 -  9.0 EV  (IC=  3)
C                "       "      "   : 0.1 - 12.0 EV  (IC=  4)
C                "       "      "   : 0.1 - 17.0 EV  (IC=  5)
C
C     SIGMA = ELASTIC SCATTERING CROSS SECTION (CM2)
C             (POLINOMIAL APPROXIMATION IN DOUBLE LOGARITHMIC SCALE)
C
      COMMON/IOFILE/IN,IOUT,IUERR,IARK,IPUNCH,IGMT,ITRMT,ITAPIO(2)
      COMMON/CJUNK/MCOLP,MCOLW,NCOLP(2),NCOLW,ICUPR,IERAND,ISEHHE,ISFLAG
     &     ,ITEST,RTEST
C     ISEHHE = 0 NO ELASTIC SCATTERING
C              1 H
C              2 H2
C              3 H & H2
C              4 HE
C              5 HE & H
C              6 HE & H2
C              7 HE & H & H2
C
      PARAMETER (NCT=24,MKES=4)
C
      REAL*8 ER,SE,HHP(4,5),HEHC(3,5),HEHM(4,5),H2HP(9+2*3)
C
      DIMENSION NH(5),NHEC(5),NHEM(5),CUTE(5,MKES)
      DATA CUTE/60.,60.,60.,60.,60.,
     *           8., 8., 9.,12.,17.,
     *          60.,60.,60.,60.,60.,
     *           0., 0., 0., 0.,99./
      DATA IC/5/
C
      DATA  HHP/-3.319D+1,-3.428D-1,-4.132D-2,-1.032D-2,
     *          -3.313D+1,-3.347D-1,-3.939D-2,-9.755D-3,
     *          -3.306D+1,-3.250D-1,-3.713D-2,-9.023D-3,
     *          -3.297D+1,-3.126D-1,-3.427D-2,-8.056D-3,
     *          -3.283D+1,-2.937D-1,-2.997D-2,-6.621D-3/
     *          ,NH/3,3,3,3,3/
      DATA HEHC/-3.414D+1,-3.929D-1,-4.948D-2,
     *          -3.408D+1,-3.848D-1,-4.763D-2,
     *          -3.401D+1,-3.748D-1,-4.533D-2,
     *          -3.392D+1,-3.617D-1,-4.224D-2,
     *          -3.378D+1,-3.414D-1,-3.745D-2/
     *          ,NHEC/2,2,2,2,2/
      DATA HEHM/-3.391D+1,-3.723D-1,-1.022D-1,-3.315D-2,
     *          -3.389D+1,-3.734D-1,-8.270D-2,-2.403D-2,
     *          -3.386D+1,-3.612D-1,-7.097D-2,-2.014D-2,
     *          -3.379D+1,-3.156D-1,-6.586D-2,-2.495D-2,
     *          -3.371D+1,-3.429D-1,-4.477D-2,-7.551D-3/
     *          ,NHEM/3,3,3,3,3/
      DATA H2HP/-3.452D+1,+1.092D+1,-2.733D+1,+3.466D+1,-2.525D+1,
     *          +1.092D+1,-2.770D+0,+3.796D-1,-2.169D-2,
     *          -3.275D+1,-2.352D-1,-1.046D-2,
     *          -3.537D+1,+2.145D-1,-4.643D-2/
C
      IF(ISEHHE.LT.1 .OR. ISEHHE.GT.7) GO TO 10
C                                IF VOID (T=0), THEN SIGMA=0
      IF(ERCM.EQ.0.0) GO TO 10
C                    HARD SPHERE SCATTERING FOR HELIUM
C                    AREA OF HELIUM (CROSS SECTION)=0.22E-16
C                    (DELETE COMMENTS CC TO ACTIVATE THE MODEL)
CC         IF(KES.NE.2) GO TO 9
CC         SIGMA=0.22E-16
CC         RETURN
C                    END OF HARD SPHERE MODEL
    9 CONTINUE
      IF(ERCM.LE.CUTE(IC,KES)) GO TO 20
   10 SIGMA=0.0
      GO TO 90
   20 ER=ALOG(ERCM)
C
      IF(KES.LT.1 .OR. KES.GT.4) THEN
        WRITE(IUERR,*) '***** ELXS ERROR: KES=',KES
        CALL EXITN(1)
      ENDIF
      GOTO (25,60,40,75), KES
C
C       H + H+
   25 CONTINUE
      IF(ISEHHE.EQ.2 .OR.ISEHHE.EQ.4 .OR. ISEHHE.EQ.6) GOTO 10
      IMAX=NH(IC)
      NT=IMAX+1
      SE=HHP(NT,IC)
      DO 30 I=1,IMAX
        SE=SE*ER+HHP(NT-I,IC)
   30 CONTINUE
      GO TO 80
C
C       HE + H+
   40 CONTINUE
      IF(ISEHHE.LE.3) GOTO 10
      IMAX=NHEC(IC)
      NT=IMAX+1
      SE=HEHC(NT,IC)
      DO 50 I=1,IMAX
        SE=SE*ER+HEHC(NT-I,IC)
   50 CONTINUE
      GO TO 80
C
C       HE + H+
   60 CONTINUE
      IF(ISEHHE.LE.3) GOTO 10
      IMAX=NHEM(IC)
      NT=IMAX+1
      SE=HEHM(NT,IC)
      DO 70 I=1,IMAX
        SE=SE*ER+HEHM(NT-I,IC)
   70 CONTINUE
      GO TO 80
C
C       H2 + H+
   75 CONTINUE
      IF(ISEHHE.EQ.1 .OR.ISEHHE.EQ.4 .OR. ISEHHE.EQ.5) GOTO 10
C     ALOG(2)=0.69315
      ELAB=ER+0.69315
      IF(ELAB.LE.1.5598) THEN
        L=9
        NT=3
      ELSE IF(ELAB.GT.61.8164) THEN
        L=12
        NT=3
      ELSE
        L=0
        NT=9
      ENDIF
      SE=H2HP(L+NT)
      DO 76 I=NT-1,1,-1
        SE=SE*ELAB+H2HP(L+I)
   76 CONTINUE
      GO TO 80
C
   80 SIGMA=DEXP(SE)
   90 RETURN
      END
C.......................................................................
C.......................................................................
      SUBROUTINE XSMOL(R1,R2,R3)
C
C     REACTIONS OF MOLECULES WITH ELECTRONS
C     RETURNS MACROSCOPIC X-SECTIONS FOR
C      1) FAST DISSOCIATION (R1)
C      2) DISSOCIATIVE IONIZATION (R2)
C      3) SLOW DISSOCIATION (R3)
C
C----------------------------------(SEE SYMBOLS MEANING IN S.R. INPUT)
      INCLUDE 'pnimb'
      PARAMETER (MRG=MRGX ,MZN=MRG-2 ,MCH=41 ,MCC=MCCX, MWAC=13 )
      PARAMETER (MBS=MBSX ,MSD=MBS   ,MSC=2 )
      PARAMETER (MIO=3    ,MCP=6)
      PARAMETER (MEG=5    ,MIXS=10   ,MLEAK=9)
C---------------------------------------------------
C
      COMMON/IOFILE/IN,IOUT,IUERR,IARK,IPUNCH,IGMT,ITRMT,ITAPIO(2)
C
      COMMON/STOGEO/IR,IREG,IREG3D,ISENT,LEAVES,XIN,YIN,ZIN,
     * COSP,SINP,COST,SINT,TANT,COSKT,DIST,PILX,IRZ,IREGZ,IREG3Z,
     * IZIN,IZ,ISSOU,X,Y,Z
      REAL*8 X,Y,Z
C
      COMMON/COMPOS/NION,NCOM,LIGHTW,RNLITE,EWLITE,
     * SYMB(MIO),PERC(MIO),DENSE(MRG),DENSI(MRG,MIO),EATMD,EATMR,
     * TEMPE(MRG),TEMPI(MRG),IBOUND(MRG),ALBEDO(MRG),LIWALL(MRG),COEFMX
     *,IEMIS(MRG),BEXPT(MRG),WEXPT(MRG,3),SHP,DRIFTV(MRG),DRIFTC(MRG,3)
     *,ISTARG(MRG),CHARGE(MCP),PROREQ(4),ALBATO(MRG),ALBENE(MRG),INDHEL
     *,NTSPUT,PSEMIP(MRG,2),IRTRIM(MCP,MCP),NFTRIM,LPVOID,DCUTCX,TCUTCX
     *,ICUTCX,INDEF,IYCHEM,EYCHEM,AYCHEM,NLEAK,XLEAK(4,MLEAK),ILEAK(MRG)
     *,NZREC,NUTRLZ(MCP),MIMP,IGOPT,PRORCL(MIO),UNDEF
     *,NZYIZ,CZYIZ(MCP),AYIZ(MCP),BYIZ(MCP),EYIZ(MCP),IYIZ(MCP),ALFCH7
     *,PARDIR(MRG,3),RECMAT(MIO,MIO,MRG)
C
      PARAMETER (NCT=24,MKES=4)
      COMMON/CTAB0/TABLE(NCT,11),IZLOZ(0:100)
      COMMON/CTABLE/SPUTAB(NCT,NCT)
     *,LABINT(MCP),LABEXT(NCT),IXS(MIXS),ITRIM
     *,NIONPM,MCX,MOLEC(MCP),IATOM(MCP),EXTSYM(MCP),QESP(NCT,NCT)
     *,EB(NCT),QCOEF(NCT),TLOTZ(NCT,26),CXRMAX(5,MRG),ESRMAX(MKES,MRG)
     *,TBELL(NCT,26),ITAGS(NCT,NCT,2)
C
      COMMON/PHYSIC/WSTART,WGAME,W,NUTRAL,MOL,A,E,CLOCK,IBIN,IBRNPL,
     * SIGT,SIGIT,SIGCXT,SIGEST,SIGST,SIGSTS,IDMOL,DISH2S(MRG),
     * ELECTR(MRG,MCP),SIGE,SIGI(MIO),SIGCX(MIO),SIGEL(MIO),
     * DISH2(MRG),DIOH2(MRG)
     *,SVI,SVCX(MIO)
C
C                      MACROSCOPIC X-SECTIONS
      TRAN=SQRT(E/(A/2.0))
C                      (MASS REFERRED TO H2)
C                            FAST DISSOCIATION
      R1=DISH2(IREG3D)/TRAN
C                            SLOW DISSOCIATION
      R3=DISH2S(IREG3D)/TRAN
C                            IONIZATION
      R2=DIOH2(IREG3D)/TRAN
      RETURN
      END
C.......................................................................
C.......................................................................
      SUBROUTINE COLAM
C
C     DISSOCIATION AFTER AN ELECTRON-MOLECULE IMPACT
C                                   RETURNS ALSO:(COMMON)
C      IDMOL=-1 WILL DENOTE IONIZATION
C      IDMOL= 0 WILL DENOTE FAST DISSOCIATION
C      IDMOL= 1 WILL DENOTE SLOW DISSOCIATION
C                                   FOR POSSIBLE FUTURE CLASSIFICATIONS
C
C----------------------------------(SEE SYMBOLS MEANING IN S.R. INPUT)
      INCLUDE 'pnimb'
      PARAMETER (MRG=MRGX ,MZN=MRG-2 ,MCH=41 ,MCC=MCCX, MWAC=13 )
      PARAMETER (MBS=MBSX ,MSD=MBS   ,MSC=2 )
      PARAMETER (MIO=3    ,MCP=6)
      PARAMETER (MEG=5    ,MIXS=10   ,MLEAK=9)
C---------------------------------------------------
      COMMON/IOFILE/IN,IOUT,IUERR,IARK,IPUNCH,IGMT,ITRMT,ITAPIO(2)
C
      COMMON/STOGEO/IR,IREG,IREG3D,ISENT,LEAVES,XIN,YIN,ZIN,
     * COSP,SINP,COST,SINT,TANT,COSKT,DIST,PILX,IRZ,IREGZ,IREG3Z,
     * IZIN,IZ,ISSOU,X,Y,Z
      REAL*8 X,Y,Z
C
      COMMON/COMPOS/NION,NCOM,LIGHTW,RNLITE,EWLITE,
     * SYMB(MIO),PERC(MIO),DENSE(MRG),DENSI(MRG,MIO),EATMD,EATMR,
     * TEMPE(MRG),TEMPI(MRG),IBOUND(MRG),ALBEDO(MRG),LIWALL(MRG),COEFMX
     *,IEMIS(MRG),BEXPT(MRG),WEXPT(MRG,3),SHP,DRIFTV(MRG),DRIFTC(MRG,3)
     *,ISTARG(MRG),CHARGE(MCP),PROREQ(4),ALBATO(MRG),ALBENE(MRG),INDHEL
     *,NTSPUT,PSEMIP(MRG,2),IRTRIM(MCP,MCP),NFTRIM,LPVOID,DCUTCX,TCUTCX
     *,ICUTCX,INDEF,IYCHEM,EYCHEM,AYCHEM,NLEAK,XLEAK(4,MLEAK),ILEAK(MRG)
     *,NZREC,NUTRLZ(MCP),MIMP,IGOPT,PRORCL(MIO),UNDEF
     *,NZYIZ,CZYIZ(MCP),AYIZ(MCP),BYIZ(MCP),EYIZ(MCP),IYIZ(MCP),ALFCH7
     *,PARDIR(MRG,3),RECMAT(MIO,MIO,MRG)
C
      PARAMETER (NCT=24,MKES=4)
      COMMON/CTAB0/TABLE(NCT,11),IZLOZ(0:100)
      COMMON/CTABLE/SPUTAB(NCT,NCT)
     *,LABINT(MCP),LABEXT(NCT),IXS(MIXS),ITRIM
     *,NIONPM,MCX,MOLEC(MCP),IATOM(MCP),EXTSYM(MCP),QESP(NCT,NCT)
     *,EB(NCT),QCOEF(NCT),TLOTZ(NCT,26),CXRMAX(5,MRG),ESRMAX(MKES,MRG)
     *,TBELL(NCT,26),ITAGS(NCT,NCT,2)
C
      COMMON/PHYSIC/WSTART,WGAME,W,NUTRAL,MOL,A,E,CLOCK,IBIN,IBRNPL,
     * SIGT,SIGIT,SIGCXT,SIGEST,SIGST,SIGSTS,IDMOL,DISH2S(MRG),
     * ELECTR(MRG,MCP),SIGE,SIGI(MIO),SIGCX(MIO),SIGEL(MIO),
     * DISH2(MRG),DIOH2(MRG)
     *,SVI,SVCX(MIO)
C
C
      MOL=1
      NUTRAL=IATOM(NUTRAL)
      A=A*0.5
      C=RANF()
      IF     (C.LT. SIGIT/(SIGT-SIGEST) ) THEN
C       DISSOCIATIVE IONIZATION
        W=W
        E=TABLE(LABINT(NUTRAL),7)
        IDMOL=-1
      ELSE IF(C.LT.(SIGIT+SIGST)/(SIGT-SIGEST)) THEN
C       FAST DISSOCIATION
        W=2.0*W
        E=TABLE(LABINT(NUTRAL),7)
        IDMOL=0
      ELSE
C       SLOW DISSOCIATION
        W=2.0*W
        E=0.3
        IDMOL=1
      ENDIF
      CALL TROPIC
      RETURN
      END
C.......................................................................
C.......................................................................
      SUBROUTINE DIFFUS(ISAMPL)
C
C     TOTAL SCATTERING (CHARGE EXCHANGE+ELAST.SCATT.) COLLISION ROUTINE
C
C     TARGET PLASMA : MAXWELLIAN + FLOW
C
C----------------------------------(SEE SYMBOLS MEANING IN S.R. INPUT)
      INCLUDE 'pnimb'
      PARAMETER (MRG=MRGX ,MZN=MRG-2 ,MCH=41 ,MCC=MCCX, MWAC=13 )
      PARAMETER (MBS=MBSX ,MSD=MBS   ,MSC=2 )
      PARAMETER (MIO=3    ,MCP=6)
      PARAMETER (MEG=5    ,MIXS=10   ,MLEAK=9)
C---------------------------------------------------
C
      COMMON/IOFILE/IN,IOUT,IUERR,IARK,IPUNCH,IGMT,ITRMT,ITAPIO(2)
C
      COMMON/STOGEO/IR,IREG,IREG3D,ISENT,LEAVES,XIN,YIN,ZIN,
     * COSP,SINP,COST,SINT,TANT,COSKT,DIST,PILX,IRZ,IREGZ,IREG3Z,
     * IZIN,IZ,ISSOU,X,Y,Z
      REAL*8 X,Y,Z
C
C
      COMMON/COMPOS/NION,NCOM,LIGHTW,RNLITE,EWLITE,
     * SYMB(MIO),PERC(MIO),DENSE(MRG),DENSI(MRG,MIO),EATMD,EATMR,
     * TEMPE(MRG),TEMPI(MRG),IBOUND(MRG),ALBEDO(MRG),LIWALL(MRG),COEFMX
     *,IEMIS(MRG),BEXPT(MRG),WEXPT(MRG,3),SHP,DRIFTV(MRG),DRIFTC(MRG,3)
     *,ISTARG(MRG),CHARGE(MCP),PROREQ(4),ALBATO(MRG),ALBENE(MRG),INDHEL
     *,NTSPUT,PSEMIP(MRG,2),IRTRIM(MCP,MCP),NFTRIM,LPVOID,DCUTCX,TCUTCX
     *,ICUTCX,INDEF,IYCHEM,EYCHEM,AYCHEM,NLEAK,XLEAK(4,MLEAK),ILEAK(MRG)
     *,NZREC,NUTRLZ(MCP),MIMP,IGOPT,PRORCL(MIO),UNDEF
     *,NZYIZ,CZYIZ(MCP),AYIZ(MCP),BYIZ(MCP),EYIZ(MCP),IYIZ(MCP),ALFCH7
     *,PARDIR(MRG,3),RECMAT(MIO,MIO,MRG)
C
      PARAMETER (NCT=24,MKES=4)
      COMMON/CTAB0/TABLE(NCT,11),IZLOZ(0:100)
      COMMON/CTABLE/SPUTAB(NCT,NCT)
     *,LABINT(MCP),LABEXT(NCT),IXS(MIXS),ITRIM
     *,NIONPM,MCX,MOLEC(MCP),IATOM(MCP),EXTSYM(MCP),QESP(NCT,NCT)
     *,EB(NCT),QCOEF(NCT),TLOTZ(NCT,26),CXRMAX(5,MRG),ESRMAX(MKES,MRG)
     *,TBELL(NCT,26),ITAGS(NCT,NCT,2)
C
C
      COMMON/PHYSIC/WSTART,WGAME,W,NUTRAL,MOL,A,E,CLOCK,IBIN,IBRNPL,
     * SIGT,SIGIT,SIGCXT,SIGEST,SIGST,SIGSTS,IDMOL,DISH2S(MRG),
     * ELECTR(MRG,MCP),SIGE,SIGI(MIO),SIGCX(MIO),SIGEL(MIO),
     * DISH2(MRG),DIOH2(MRG)
     *,SVI,SVCX(MIO)
C
      COMMON/CSCAT/IPROJ,IONHIT,ATARG,ER,EREL,SCX,SES,SST
C
      COMMON /CESMOT/VNEUT(3),VION(3)
      EQUIVALENCE (VNEUT(1),SXOLD),(VNEUT(2),SYOLD),(VNEUT(3),SZOLD),
     *            (VION(1),SX),(VION(2),SY),(VION(3),SZ)
C
      SCX=0.0
      SES=0.0
      SST=0.0
      IPROJ=LABINT(NUTRAL)
      IF(IPROJ.GT.7 .OR. IPROJ.EQ.6) GO TO 80
      EOLD=E
      COSPSA=COSP
      SINPSA=SINP
      COSTSA=COST
      SINTSA=SINT
      TANTSA=TANT
      IF(IPROJ.GE.2 .AND. IPROJ.LE.5) THEN
        IF(MOL.EQ.2) THEN
          KES=4
        ELSE
          KES=1
        ENDIF
      ELSE IF(IPROJ.EQ.7) THEN
        KES=2
      ELSE
        CALL EXITN(1)
      ENDIF
C                           SELECT ION HIT
      C=RANF()
      IF(MOL.NE.2) THEN
        C=C*SIGST
      ELSE
        C=C*SIGEST
      ENDIF
      SUM=0.0
C     FOLLOWING SILLY STATEMENT TO AVOID COMPILER WARNING
      ION=-9999
      DO 10 I=1,NION
      ION=I
      SUM=SUM+(SIGEL(I)+SIGCX(I))
      IF(C.LE.SUM) GO TO 20
   10 CONTINUE
   20 CONTINUE
      IONHIT=ION
      ITARG=LABINT(ION)
      IF(IPROJ.EQ.0 .OR. ITARG.EQ.0) WRITE(IOUT, 30 ) NUTRAL,ION,A,ATARG
   30 FORMAT(' NUTRAL=',I5,' ION=',I5,' A=',1PE12.3,' ATARG=',E12.3)
      ATARG=TABLE(ITARG,3)
C                           SAVE PRE-COLLISION SPEED
      S=SQRT(EOLD/A)*1.3841E+06
      SXOLD=S*COSP*SINT
      SYOLD=S*SINP*SINT
      SZOLD=S*COST
C
C                           SAMPLE E FROM SQRT(E)*EXP(-E)
   40 CONTINUE
C     CALL SQXEXP(E)
      CALL MAXWEL(E)
C                           ENERGY IN EV
      E=E*TEMPI(IREG3D)
      C=RANF()
      COSKT=2.0*C-1.0
C                           NEW DIRECTION IN L.S.
      CALL DIDIMO
C                               ADD FLOW SPEED
      S=SQRT(E/ATARG)*1.3841E+06
      R=SQRT((TABLE(ITARG,2)*TEMPE(IREG3D)+TEMPI(IREG3D))/ATARG)*
     * 1.0E+6
      R=R*DRIFTV(IREG3D)
      SX=S*COSP*SINT+DRIFTC(IREG3D,1)*R
      SY=S*SINP*SINT+DRIFTC(IREG3D,2)*R
      SZ=S*COST+DRIFTC(IREG3D,3)*R
C
C                               RELATIVE IN-OUT ENERGY
      RV2=(SX-SXOLD)**2+(SY-SYOLD)**2+(SZ-SZOLD)**2
C                               X-SECT FOR REACTION UNDERGONE
      ER=A*0.52197E-12*RV2
      EREL=ER*(ATARG/(A+ATARG))
C                               C.X.
      IF(IPROJ.LE.5 .AND. MOL.NE.2) THEN
        CALL XSCX(IPROJ,ITARG,ER,SCX)
      ELSE
        SCX=0.0
      ENDIF
C                               E.S.
      CALL ELXS(KES,EREL,SES)
C
      SIGMA=SCX+SES
      IF(SIGMA.LE.0.0) GO TO 60
      RATE=SQRT(ER)*SIGMA
      IF(ISAMPL.EQ.3) GO TO 50
C                               IMPORTANCE SAMPLING
      DENOM=SIGEL(ION)/DENSI(IREG3D,ION)
      DENOM=DENOM*SQRT(EOLD)
      W = W * RATE/DENOM
      GO TO 70
C                               REJECTION
   50 C=RANF()
      IF(MOL.NE.2) THEN
        RMAX=CXRMAX(IPROJ,IREG3D)+SQRT(ER/EREL)*ESRMAX(KES,IREG3D)
      ELSE
        RMAX=SQRT(ER/EREL)*ESRMAX(KES,IREG3D)
      ENDIF
C                 SAMPLING DA M(E,TI) ?
      IF(MOL.NE.2 .AND. MCX.GT.0) GOTO 70
      IF(C*RMAX.LT.RATE) GO TO 70
C
   60 COSP=COSPSA
      SINP=SINPSA
      COST=COSTSA
      SINT=SINTSA
      TANT=TANTSA
      GO TO 40
C
   70 SST=SCX+SES
C                           RESET PARAMETERS
      E=EOLD
      COSP=COSPSA
      SINP=SINPSA
      COST=COSTSA
      SINT=SINTSA
      TANT=TANTSA
C
   80 RETURN
      END
C.......................................................................
C.......................................................................
      SUBROUTINE  SQXEXP(X)
C----- SCEGLIE X DA SQRT(X)*EXP(-X)    (N(E) MAXWELLIANA)
C----- METODO MISTO INTERVALLI EQUIPROBABILI - REIEZIONE
C     SI TRASCURA LA CODA X>10 (ERRORE RELATIVO 0.0003)
C
      DATA FNTAB/128.0/
      DIMENSION TAB(129),ALT(128)
      DIMENSION TAB1(60),TAB2(69),ALT1(60),ALT2(68)
      EQUIVALENCE(TAB(1),TAB1(1)),(TAB(61),TAB2(1)),
     *           (ALT(1),ALT1(1)),(ALT(61),ALT2(1))
      DATA TAB1 /
     *0.0       ,4.8526E-02,7.7934E-02,1.0315E-01,1.2609E-01,1.4756E-01,
     *1.6797E-01,1.8758E-01,2.0658E-01,2.2507E-01,2.4315E-01,2.6090E-01,
     *2.7835E-01,2.9558E-01,3.1259E-01,3.2943E-01,3.4613E-01,3.6271E-01,
     *3.7918E-01,3.9556E-01,4.1188E-01,4.2813E-01,4.4435E-01,4.6053E-01,
     *4.7668E-01,4.9283E-01,5.0897E-01,5.2512E-01,5.4127E-01,5.5745E-01,
     *5.7365E-01,5.8990E-01,6.0617E-01,6.2250E-01,6.3888E-01,6.5531E-01,
     *6.7182E-01,6.8838E-01,7.0503E-01,7.2176E-01,7.3857E-01,7.5547E-01,
     *7.7248E-01,7.8958E-01,8.0680E-01,8.2412E-01,8.4157E-01,8.5914E-01,
     *8.7684E-01,8.9467E-01,9.1265E-01,9.3078E-01,9.4904E-01,9.6748E-01,
     *9.8609E-01,1.0049E+00,1.0238E+00,1.0430E+00,1.0623E+00,1.0818E+00/
      DATA TAB2 /
     *1.1016E+00,1.1215E+00,1.1417E+00,1.1621E+00,1.1827E+00,1.2036E+00,
     *1.2248E+00,1.2462E+00,1.2679E+00,1.2899E+00,1.3122E+00,1.3348E+00,
     *1.3578E+00,1.3810E+00,1.4046E+00,1.4286E+00,1.4530E+00,1.4777E+00,
     *1.5029E+00,1.5285E+00,1.5546E+00,1.5810E+00,1.6081E+00,1.6356E+00,
     *1.6636E+00,1.6923E+00,1.7214E+00,1.7513E+00,1.7817E+00,1.8129E+00,
     *1.8447E+00,1.8774E+00,1.9108E+00,1.9451E+00,1.9803E+00,2.0164E+00,
     *2.0535E+00,2.0917E+00,2.1310E+00,2.1716E+00,2.2136E+00,2.2568E+00,
     *2.3016E+00,2.3480E+00,2.3962E+00,2.4463E+00,2.4984E+00,2.5529E+00,
     *2.6098E+00,2.6695E+00,2.7322E+00,2.7983E+00,2.8682E+00,2.9424E+00,
     *3.0215E+00,3.1062E+00,3.1973E+00,3.2961E+00,3.4038E+00,3.5225E+00,
     *3.6546E+00,3.8037E+00,3.9754E+00,4.1769E+00,4.4228E+00,4.7374E+00,
     *5.1755E+00,5.9152E+00,1.0000E+01/
      DATA ALT1 /
     *2.0985E-01,2.5824E-01,2.8969E-01,3.1303E-01,3.3144E-01,3.4647E-01,
     *3.5903E-01,3.6968E-01,3.7880E-01,3.8667E-01,3.9349E-01,3.9940E-01,
     *4.0455E-01,4.0901E-01,4.1287E-01,4.1620E-01,4.1904E-01,4.2145E-01,
     *4.2346E-01,4.2512E-01,4.2644E-01,4.2745E-01,4.2818E-01,4.2864E-01,
     *4.2886E-01,4.2888E-01,4.2885E-01,4.2862E-01,4.2819E-01,4.2757E-01,
     *4.2677E-01,4.2579E-01,4.2466E-01,4.2337E-01,4.2194E-01,4.2036E-01,
     *4.1866E-01,4.1683E-01,4.1487E-01,4.1280E-01,4.1062E-01,4.0833E-01,
     *4.0594E-01,4.0345E-01,4.0086E-01,3.9818E-01,3.9542E-01,3.9257E-01,
     *3.8963E-01,3.8662E-01,3.8352E-01,3.8036E-01,3.7712E-01,3.7381E-01,
     *3.7043E-01,3.6698E-01,3.6347E-01,3.5990E-01,3.5627E-01,3.5257E-01/
      DATA ALT2 /
     *3.4882E-01,3.4501E-01,3.4115E-01,3.3723E-01,3.3326E-01,3.2924E-01,
     *3.2517E-01,3.2105E-01,3.1688E-01,3.1266E-01,3.0840E-01,3.0409E-01,
     *2.9974E-01,2.9535E-01,2.9091E-01,2.8643E-01,2.8191E-01,2.7735E-01,
     *2.7275E-01,2.6811E-01,2.6343E-01,2.5872E-01,2.5397E-01,2.4918E-01,
     *2.4435E-01,2.3949E-01,2.3461E-01,2.2967E-01,2.2471E-01,2.1972E-01,
     *2.1469E-01,2.0962E-01,2.0453E-01,1.9940E-01,1.9424E-01,1.8906E-01,
     *1.8383E-01,1.7858E-01,1.7330E-01,1.6798E-01,1.6263E-01,1.5726E-01,
     *1.5186E-01,1.4643E-01,1.4096E-01,1.3547E-01,1.2995E-01,1.2440E-01,
     *1.1882E-01,1.1321E-01,1.0756E-01,1.0190E-01,9.6196E-02,9.0464E-02,
     *8.4704E-02,7.8904E-02,7.3083E-02,6.7221E-02,6.1341E-02,5.5414E-02,
     *4.9461E-02,4.3470E-02,3.7429E-02,3.1364E-02,2.5237E-02,1.9070E-02,
     *1.2862E-02,6.5623E-03/
C
      DATA MODO/2/
C
      C=RANF()
      GO TO ( 10 , 20 ),MODO
C                                 LINEAR INTERPOLATION
   10 FINT=C*FNTAB
      K=FINT
      FINT=FINT-FLOAT(K)
      K=K+1
      X=TAB(K)+(TAB(K+1)-TAB(K))*FINT
      RETURN
C                                 INTERPOLATION AND REJECTION
   20 K=C*FNTAB
      K=K+1
      H=ALT(K)
      XMIN=TAB(K)
      DELTA=TAB(K+1)-XMIN
   30 C=RANF()
      C1=RANF()
      X=XMIN+C*DELTA
      Y=C1*H
      F=SQRT(X)*EXP(-X)
      IF(Y-F) 40 , 40 , 30
   40 RETURN
      END
C.......................................................................
C.......................................................................
      SUBROUTINE XEXP(X)
C
C     SCEGLIE E DA X*EXP(-X) (FLUSSO MAXWELLIANO)
C                             ------
      C=RANF()
      C1=RANF()
      X=-ALOG(C*C1)
      RETURN
      END
C.......................................................................
C.......................................................................
      SUBROUTINE TROPIC
C
C     RETURNS AN ISOTROPIC DIRECTION IN L.S.
C
      COMMON/STOGEO/IR,IREG,IREG3D,ISENT,LEAVES,XIN,YIN,ZIN,
     * COSP,SINP,COST,SINT,TANT,COSKT,DIST,PILX,IRZ,IREGZ,IREG3Z,
     * IZIN,IZ,ISSOU,X,Y,Z
      REAL*8 X,Y,Z
C
      C=RANF()
      COST=2.0*C-1.0
      IF(ABS(COST).LT.0.999) GO TO 10
      COST=SIGN(0.999,COST)
      GO TO 20
   10 IF(ABS(COST).GT.0.001) GO TO 20
      COST=SIGN(0.001,COST)
   20 SINT=SQRT(1.0-COST**2)
      TANT=SINT/COST
      C=RANF()
      COSP=COS(C*6.283)
      IF(ABS(COSP).LT.0.999) GO TO 30
      COSP=SIGN(0.999,COSP)
      GO TO 40
   30 IF(ABS(COSP).GT.0.001) GO TO 40
      COSP=SIGN(0.001,COSP)
   40 SINP=SQRT(1.0-COSP**2)
      C=RANF()
      IF(C-0.5) 50 , 50 , 60
   50 SINP=-SINP
   60 RETURN
      END
C.......................................................................
C.......................................................................
      SUBROUTINE DIREC(CSTHT,WD,WP)
C
C     GIVEN A POLAR AXIS THROUGH ITS DIRECTION COSINES WD(I) AND
C     THE COSINE CSTHT OF A CONE AROUND THIS AXIS, RETURNS A DIRECTION
C     WP(I) IN L.S. LAYING ON THE CONE, WITH AZIMUTHAL ANGLE RANDOMLY
C     UNIFORM (AFTER SAM-C)
C
      DIMENSION WD(3),WP(3)
C
   10 X1=RANF()
      X2=RANF()
      X1S=X1*X1
      X2S=X2*X2
      T=X1S+X2S
      IF(T-1.0) 20 , 10 , 10
   20 CSPHI=(X1S-X2S)/T
      SNPHI=(2.0*X1*X2)/T
      X1=RANF()
      IF(X1-0.5) 30 , 30 , 40
   30 SNPHI=-SNPHI
   40 CONTINUE
      CS=CSTHT
      T3=1.0-CS*CS
      T1=WD(1)*WD(1)+WD(2)*WD(2)
      IF(T1-1.0E-10) 50 , 50 , 60
   50 CONTINUE
      SN=SQRT(T3)
      WP(1)=SN*CSPHI
      WP(2)=SN*SNPHI
      WP(3)=CS*WD(3)
      GO TO 70
   60 T4=T3/T1
      T2=SQRT(T4)
      WP(1)=T2*(WD(1)*WD(3)*SNPHI+WD(2)*CSPHI)+WD(1)*CS
      WP(2)=T2*(WD(2)*WD(3)*SNPHI-WD(1)*CSPHI)+WD(2)*CS
      WP(3)=WD(3)*CS-T1*T2*SNPHI
   70 T=SQRT(WP(1)*WP(1)+WP(2)*WP(2)+WP(3)*WP(3))
      WP(1)=WP(1)/T
      WP(2)=WP(2)/T
      WP(3)=WP(3)/T
      RETURN
      END
C.......................................................................
C.......................................................................
      SUBROUTINE COSLAW(COSKT,MOD)
C
C     SOURCE COSINE WITH RESPECT TO POLAR AXIS BETWEEN 0 AND 90 DEG.
C
C     MOD=1  UNIFORM DISTRIBUTION
C     MOD=2  COSINE DISTRIBUTION ( G(COSKT)=2*COSKT , 0<=COSKT<=1 )
C
      C=RANF()
      GO TO ( 10 , 20 ), MOD
   10 COSKT=C
      GO TO 30
   20 COSKT=SQRT(C)
   30 RETURN
      END
C.......................................................................
C.......................................................................
      SUBROUTINE DIDIMO
C
C                GIVEN A POLAR AXIS THROUGH COSP,SINP,COST
C                AND THE COSINE COSKT OF A CONE AROUND THIS AXIS,
C                S.R.DIDIMO RETURNS A DIRECTION LAYING ON THE CONE,
C                WITH AZIMUTHAL ANGLE RANDOMLY UNIFORM (OLD POLAR AXIS
C                DIRECTION IS LOST, NEW DIRECTION IS GIVEN THROUGH
C                COSP,SINP,COST)
C                (DIDU,DIDV,DIDW)=(COSP*SINT,SINP*SINT,COST)=DIR.COSINES
C
      COMMON/STOGEO/IR,IREG,IREG3D,ISENT,LEAVES,XIN,YIN,ZIN,
     * COSP,SINP,COST,SINT,TANT,COSKT,DIST,PILX,IRZ,IREGZ,IREG3Z,
     * IZIN,IZ,ISSOU,X,Y,Z
      REAL*8 X,Y,Z
C
C
      SINKT=SQRT(1.0-COSKT**2)
      C=RANF()
      COSKP=COS(6.28*C)
      SINKP=SQRT(1.0-COSKP**2)
      C=RANF()
      IF(C-0.5) 10 , 20 , 20
   10 SINKP=-SINKP
   20 IF(SINT-.1E-4) 30 , 30 , 40
   30 DIDU1=SINKT*COSKP
      DIDV1=SINKT*SINKP
      DIDW1=COSKT*COST
      GO TO 50
   40 DIDBC=SINKT*COSKP
      DIDBCW=DIDBC*COST
      DIDBD=SINKT*SINKP
      DIDU=SINT*COSP
      DIDV=SINT*SINP
      DIDU1=(DIDBCW*DIDU-DIDBD*DIDV)/SINT+COSKT*DIDU
      DIDV1=(DIDBCW*DIDV+DIDBD*DIDU)/SINT+COSKT*DIDV
      DIDW1=-DIDBC*SINT+COSKT*COST
   50 COST=DIDW1
      IF(ABS(COST).LT.0.999) GO TO 60
      COST=SIGN(0.999,COST)
      GO TO 70
   60 IF(ABS(COST).GT.0.001) GO TO 70
      COST=SIGN(0.001,COST)
   70 SINT=SQRT(1.0-COST**2)
      TANT=SINT/COST
      COSP=DIDU1/SINT
      SINP=DIDV1/SINT
      TEMP=SQRT(SINP**2+COSP**2)
      SINP=SINP/TEMP
      COSP=COSP/TEMP
      IF(ABS(COSP).LT.0.999) GO TO 80
      COSP=SIGN(0.999,COSP)
      GO TO 90
   80 IF(ABS(COSP).GT.0.001) GO TO 100
      COSP=SIGN(0.001,COSP)
   90 SINP=SIGN(SQRT(1.0-COSP**2),SINP)
  100 RETURN
      END
C.......................................................................
C.......................................................................
      SUBROUTINE TABULA(FUNCT,TAB,NTAB,XMIN,XMAX,FNORM)
C
C     SETS UP THE TABLE 'TAB' OF 'NTAB' BOUNDS OF EQUIPROBABLE INTERVALS
C     FOR THE (UNNORMALIZED) P.D.F.'FUNCT' IN THE INTERVAL 'XMIN'-'XMAX'
C
      COMMON/IOFILE/IN,IOUT,IUERR,IARK,IPUNCH,IGMT,ITRMT,ITAPIO(2)
C
      DIMENSION TAB(NTAB)
      EXTERNAL FUNCT
      DATA EPS/1.0E-03/
      TAB(1)=XMIN
      TAB(NTAB)=XMAX
      NTABM1=NTAB-1
      NERR=0
      CALL ADSIMP(FUNCT,XMIN,XMAX,EPS,FNORM,NP,ICONV)
      IF(ICONV.NE.1) NERR=NERR+1
      FN=FLOAT(NTABM1)/FNORM
      DO 60 N=2,NTABM1
      TNOTO=FLOAT(N-1)/FN
      X1=TAB(N-1)
      X2=XMAX
   10 X=(X1+X2)/2.0
      CALL ADSIMP(FUNCT,XMIN,X,EPS,F,NP,ICONV)
      IF(ICONV.NE.1) NERR=NERR+1
      IF(ABS(F-TNOTO)/TNOTO-EPS) 50 , 50 , 20
   20 IF(F-TNOTO) 30 , 30 , 40
   30 X1=X
      GO TO 10
   40 X2=X
      GO TO 10
   50 TAB(N)=X
   60 CONTINUE
      IF(NERR.NE.0) WRITE(IUERR, 70 ) NERR
   70 FORMAT(/' NO. OF ERRORS IN COMPUTING EQUIPROBABILITY TABLES',I4)
      RETURN
      END
C.......................................................................
C.......................................................................
      SUBROUTINE ADSIMP(F,A,B,EPS,ANS,NP,ICONV)
C
C     ADAPTIVE SIMPSON INTEGRATION
C
C     F = FUNCTION TO BE INTEGRATED
C     A = INTEGRAL LOWER BOUND
C     B = INTEGRAL UPPER BOUND
C     EPS = RELATIVE PRECISION REQUIRED
C     ANS = COMPUTED VALUE OF THE INTEGRAL
C     NP = NUMBER OF INTEGRATION POINTS USED
C     ICONV = ERROR FLAG ( =1 CONVERGENCE, =0 NO CONVERGENCE )
C
      IMPLICIT REAL*8(A-H,O-Z)
      REAL   F,A,B,EPS,ANS
C
      DATA  NLEVEL/20/
      DIMENSION U(7,20),V(7,20),S(3,20),LP(20)
C     DIMENSION U(7,NLEVEL),V(7,NLEVEL),S(3,NLEVEL),LP(NLEVEL)
C
      ICONV=1
      L=1
      LP(1)=3
      SUM=0.0D0
      U(1,1)=A
      U(7,1)=B
      U(4,1)=(U(1,1)+U(7,1))*0.5D0
      NP=3
      RES=0.0D0
      DO 10 I=1,7,3
   10 V(I,1)=F(SNGL(U(I,1)))
      RET=(V(1,1)+4.0D0*V(4,1)+V(7,1))*(U(7,1)-U(1,1))/6.0D0
   20 DX=(U(7,L)-U(1,L))/3.0D0
      IF(DX) 100 , 100 , 30
   30 U(3,L)=U(1,L)+DX
      U(5,L)=U(7,L)-DX
      U(2,L)=0.5*(U(1,L)+U(3,L))
      U(6,L)=0.5*(U(5,L)+U(7,L))
      NP=NP+4
      DO 50 I=2,5,3
      K=I+1
      DO 40 J=I,K
   40 V(J,L)=F(SNGL(U(J,L)))
   50 CONTINUE
      DO 60 I=1,3
   60 S(I,L)=(V(2*I-1,L)+4.0D0*V(2*I,L)+V(2*I+1,L))*DX/6.0D0
      RES=S(1,L)+S(2,L)+S(3,L)
      IF(RES) 80 , 70 , 80
   70 CONTINUE
      IF(RET) 90 , 130 , 90
   80 ERR=DABS((DABS(RES)-DABS(RET))/RES)
      IF(ERR-EPS) 130 , 130 , 90
   90 IF(L-NLEVEL) 110 , 100 , 100
  100 ICONV=0
      GO TO 130
  110 L=L+1
      LP(L)=0
      DO 120 I=1,7,3
      LP(L)=LP(L)+1
      K=LP(L)
      U(I,L)=U(K,L-1)
  120 V(I,L)=V(K,L-1)
      K=LP(L)/2
      RET=S(K,L-1)
      GO TO 20
  130 SUM=SUM+RES
  140 L=L-1
      IF(L) 180 , 180 , 150
  150 IF(LP(L)-7) 160 , 140 , 140
  160 LP(L)=LP(L)-1
      DO 170 I=1,7,3
      LP(L)=LP(L)+1
      K=LP(L)
      U(I,L+1)=U(K,L)
  170 V(I,L+1)=V(K,L)
      K=LP(L)/2
      RET=S(K,L)
      L=L+1
      LP(L)=3
      GO TO 20
  180 ANS=SUM
      RETURN
      END
C.......................................................................
C.......................................................................
      SUBROUTINE SELECT(TAB,FNTAB,X)
C
C     RETURNS THE RANDOM VALUE 'X' SELECTED FROM THE TABLE 'TAB' OF
C     'FNTAB' (FLOATING POINT VAR.) EQUIPROBABLE INTERVALS BY RANDOM
C     ACCESS AND LINEAR INTERPOLATION.
C
      DIMENSION TAB(*)
C
      COMMON/IOFILE/IN,IOUT,IUERR,IARK,IPUNCH,IGMT,ITRMT,ITAPIO(2)
C
      ITEMP = INT(FNTAB)
      IF(FNTAB.EQ.0.0 .OR. TAB(1).EQ.TAB(ITEMP)) THEN
         WRITE(IUERR,10)
   10    FORMAT(' ***** ERROR: UNDEF. TAB IN S.R. SELECT')
         CALL EXITN(1)
      ENDIF
      C=RANF()
      FINT=C*FNTAB
      K=FINT
      FINT=FINT-FLOAT(K)
      K=K+1
      X=TAB(K)+(TAB(K+1)-TAB(K))*FINT
      RETURN
      END
C.......................................................................
C.......................................................................
      SUBROUTINE NRMLDC(WN,IER)
C
C     RETURNS THE DIRECTION COSINES OF THE BACKWARDS NORMAL
C     TO THE SURFACE LSURF OF FIGURE NASC CROSSED (AT XB(I) FOR CIRCLES)
C
      IMPLICIT REAL*8 (A-H,O-Z)
C
      COMMON/IOFILE/IN,IOUT,IUERR,IARK,IPUNCH,IGMT,ITRMT,ITAPIO(2)
C
      COMMON/PAREM/XB(2),WB(2),IR,IRPRIM,
     *             RIN,ROUT,DIST,NASC,LSURF,NBO,LRI,LRO,LOOP,ITYPE
      COMMON/CGEOM2/LOCREG,NUMBOD,IROR,LR1,LR2,LDATA,NUMR,LBASE,LTMA
     *             ,LOCBOD,IDBG,KLOOP,PINF,LKOR,NOA,IST,NOREG,LVOL,LAREA
     *             ,LNUMR,LAIRC,LVOLTR,LLASTG,IRWGMT,NRTRU
      DIMENSION P0(2),P1(2)
      DIMENSION WN(2)
      INCLUDE 'pnimb'
      PARAMETER ( NWCOMB=NWCOMX )
      COMMON/COMBIN/MA(NWCOMB)
      REAL   FPD(NWCOMB)
      EQUIVALENCE(MA(1),FPD(1))
C
      IER=1
      LSURF=IABS(LSURF)
      K=MA(LOCBOD+NASC)
      ITYP=MA(K+2)
      IF(ITYP.LE.0 .OR. ITYP.GT.5) GO TO 10
      GO TO ( 30 , 40 , 70 , 80 , 100 ), ITYP
   10 WRITE(IUERR, 20 ) NASC,ITYP
   20 FORMAT(/' ***** ERROR: ILLEGAL FIGURE',I5,' (ITYP=',I2,')',
     *        ' FOR NORMAL')
      RETURN
C       CIR
   30 K=MA(K+6)
      XC=FPD(K+4)
      YC=FPD(K+5)
      WN(1)=XB(1)-XC
      WN(2)=XB(2)-YC
      GO TO 110
C       REC
   40 GO TO ( 50 , 60 , 50 , 60 ),LSURF
   50 WN(1)=0.0D0
      WN(2)=1.0D0
      GO TO 120
   60 WN(1)=1.0D0
      WN(2)=0.0D0
      GO TO 120
C       HEX
   70 K=MA(K+6)
      KBASE=K+10
      NV=6
      GO TO 90
C       POL
   80 K=MA(K+6)
      KBASE=K+10
      NV=MA(K+4)
   90 L=KBASE+(LSURF-1)*2
      P0(1)=FPD(L)
      P0(2)=FPD(L+1)
      L=L+2
      IF(LSURF.EQ.NV) L=KBASE
      P1(1)=FPD(L)
      P1(2)=FPD(L+1)
      WN(1)=P0(2)-P1(2)
      WN(2)=P1(1)-P0(1)
      GO TO 110
C       TSE
  100 K=MA(K+6)
      XC=FPD(K+4)
      YC=FPD(K+5)
      A=FPD(K+6)
      B=FPD(K+7)
      IF(LSURF.EQ.2) A=FPD(K+8)
      WN(1)=(XB(1)-XC)/A**2
      WN(2)=(XB(2)-YC)/B**2
      GO TO 110
C       NORMALIZATION
  110 CONTINUE
      TRAN=WN(1)**2+WN(2)**2
      IF(TRAN.LE.0.0D0) RETURN
      IER=0
      T=DSQRT(TRAN)
      WN(1)=WN(1)/T
      WN(2)=WN(2)/T
  120 CONTINUE
C     (FOR THE FOLLOWING TEST-ON-SIGN, NORMALIZATION OF DIRECTION
C     COSINES THROUGH SINT>0 IS NOT NECESSARY)
      COSIN=WB(1)*WN(1)+WB(2)*WN(2)
      IF(COSIN) 140 , 140 , 130
  130 WN(1)=-WN(1)
      WN(2)=-WN(2)
C
  140 RETURN
C
      ENTRY SURFAC(NAS,LSU)
      LSU=LSURF
      NAS=NASC
      RETURN
      END
C.......................................................................
C.......................................................................
      SUBROUTINE PRESPU(IFULL,ISP)
C
C     PRESET FOR SPUTTERING
C
C----------------------------------(SEE SYMBOLS MEANING IN S.R. INPUT)
      INCLUDE 'pnimb'
      PARAMETER (MRG=MRGX ,MZN=MRG-2 ,MCH=41 ,MCC=MCCX, MWAC=13 )
      PARAMETER (MBS=MBSX ,MSD=MBS   ,MSC=2 )
      PARAMETER (MIO=3    ,MCP=6)
      PARAMETER (MEG=5    ,MIXS=10   ,MLEAK=9)
C---------------------------------------------------
C
      COMMON/IOFILE/IN,IOUT,IUERR,IARK,IPUNCH,IGMT,ITRMT,ITAPIO(2)
C
      COMMON/COMPOS/NION,NCOM,LIGHTW,RNLITE,EWLITE,
     * SYMB(MIO),PERC(MIO),DENSE(MRG),DENSI(MRG,MIO),EATMD,EATMR,
     * TEMPE(MRG),TEMPI(MRG),IBOUND(MRG),ALBEDO(MRG),LIWALL(MRG),COEFMX
     *,IEMIS(MRG),BEXPT(MRG),WEXPT(MRG,3),SHP,DRIFTV(MRG),DRIFTC(MRG,3)
     *,ISTARG(MRG),CHARGE(MCP),PROREQ(4),ALBATO(MRG),ALBENE(MRG),INDHEL
     *,NTSPUT,PSEMIP(MRG,2),IRTRIM(MCP,MCP),NFTRIM,LPVOID,DCUTCX,TCUTCX
     *,ICUTCX,INDEF,IYCHEM,EYCHEM,AYCHEM,NLEAK,XLEAK(4,MLEAK),ILEAK(MRG)
     *,NZREC,NUTRLZ(MCP),MIMP,IGOPT,PRORCL(MIO),UNDEF
     *,NZYIZ,CZYIZ(MCP),AYIZ(MCP),BYIZ(MCP),EYIZ(MCP),IYIZ(MCP),ALFCH7
     *,PARDIR(MRG,3),RECMAT(MIO,MIO,MRG)
C
      PARAMETER (NCT=24,MKES=4)
      COMMON/CTAB0/TABLE(NCT,11),IZLOZ(0:100)
      COMMON/CTABLE/SPUTAB(NCT,NCT)
     *,LABINT(MCP),LABEXT(NCT),IXS(MIXS),ITRIM
     *,NIONPM,MCX,MOLEC(MCP),IATOM(MCP),EXTSYM(MCP),QESP(NCT,NCT)
     *,EB(NCT),QCOEF(NCT),TLOTZ(NCT,26),CXRMAX(5,MRG),ESRMAX(MKES,MRG)
     *,TBELL(NCT,26),ITAGS(NCT,NCT,2)
C
      COMMON/PHYSIC/WSTART,WGAME,W,NUTRAL,MOL,A,E,CLOCK,IBIN,IBRNPL,
     * SIGT,SIGIT,SIGCXT,SIGEST,SIGST,SIGSTS,IDMOL,DISH2S(MRG),
     * ELECTR(MRG,MCP),SIGE,SIGI(MIO),SIGCX(MIO),SIGEL(MIO),
     * DISH2(MRG),DIOH2(MRG)
     *,SVI,SVCX(MIO)
C
      REAL SFUNCT
      EXTERNAL SFUNCT
C
      PARAMETER(MSTAB=128)
      COMMON/CSPUT/FLITTM(2,12),STAB(MSTAB+2,MCP),EBIND,Y20,ISP93
C
C     (IFULL < 0 FROM EDGE2D IF NIMBUS HAS NOT YET BEEN CALLED)
      IF(IFULL.LT.0) THEN
        IOUT  = -IFULL
        IUERR = -IFULL
        ISP93 = ISP
        IYCHEM= 0
      ENDIF
C
      FLITTM(1,1)=0.001
      FLITTM(2,1)=0.2
      FLITTM(1,2)=0.01
      FLITTM(2,2)=0.6
      FLITTM(1,3)=0.3
      FLITTM(2,3)=0.8
      FLITTM(1,4)=0.6
      FLITTM(2,4)=0.9
      FLITTM(1,5)=0.1
      FLITTM(2,5)=0.96
      FLITTM(1,6)=0.2
      FLITTM(2,6)=1.0
      FLITTM(1,7)=0.4
      FLITTM(2,7)=0.96
      FLITTM(1,8)=1.0
      FLITTM(2,8)=0.8
      FLITTM(1,9)=2.0
      FLITTM(2,9)=0.53
      FLITTM(1,10)=4.0
      FLITTM(2,10)=0.3
      FLITTM(1,11)=10.0
      FLITTM(2,11)=0.125
      FLITTM(1,12)=100.0
      FLITTM(2,12)=0.013
C                       LITTMARK'S FUNCTION INTO LOGS
      DO 10 K=1,12
      FLITTM(1,K)=ALOG(FLITTM(1,K))
      FLITTM(2,K)=ALOG(FLITTM(2,K))
   10 CONTINUE
      Y20=8.5E-03*20.0**0.25*(1.0-1.0/20.0)**3.5
C                       SUBLIMATION ENERGY EB, Q-COEFFICIENT,
C                       Q EXPERIMENTAL VALUES QESP(I,K),
C                       THRESHOLD EXPERIMENTAL ENERGIES SPUTAB(I,K)
C                       WHERE I IS PROJECTILE AND K TARGET.
      DO 20 I=1,NCT
      EB(I)=0.0
      QCOEF(I)=0.0
      DO 20 K=1,NCT
      QESP(I,K)=0.0
   20 SPUTAB(I,K)=0.0
C                       FE TARGET
      EB(8)=4.34
      QCOEF(8)=1.3
      QESP(2,8)=1.2
      QESP(3,8)=2.7
      QESP(4,8)=4.3
      QESP(5,8)=5.9
      QESP(6,8)=8.5
      QESP(7,8)=8.5
      SPUTAB(2,8)=64.0
      SPUTAB(3,8)=40.0
      SPUTAB(4,8)=38.0
      SPUTAB(5,8)=37.0
      SPUTAB(6,8)=35.0
      SPUTAB(7,8)=35.0
      SPUTAB(8,8)=35.0
      SPUTAB(10,8)=26.0
C                       CU TARGET
      EB(9)=3.52
      QCOEF(9)=3.5
      QESP(2,9)=2.2
      QESP(3,9)=5.4
      QESP(4,9)=7.8
      QESP(5,9)=10.3
      QESP(6,9)=16.
      QESP(7,9)=16.
      SPUTAB(2,9)=50.0
      SPUTAB(3,9)=40.0
      SPUTAB(4,9)=34.0
      SPUTAB(5,9)=30.0
      SPUTAB(6,9)=25.0
      SPUTAB(7,9)=25.0
      SPUTAB(9,9)=8.0*EB(9)
C                       C TARGET
      EB(10)=7.41
      QCOEF(10)=0.6
      QESP(2,10)=0.68
      QESP(3,10)=1.6
      QESP(4,10)=2.4
      QESP(5,10)=3.3
      QESP(6,10)=5.4
      QESP(7,10)=5.4
      QESP(10,10)=22.
      SPUTAB(2,10)=10.0
      SPUTAB(3,10)=11.0
      SPUTAB(4,10)=11.5
      SPUTAB(5,10)=12.0
      SPUTAB(6,10)=16.0
      SPUTAB(7,10)=16.0
      SPUTAB(10,10)=33.0
C     TO BE USED ALSO FOR PROJECTILES HEAVIER THAN C
C     (HECHTL, BOHDANSKY, ROTH)
C                       MO TARGET
      EB(11)=6.83
      QCOEF(11)=0.75
      QESP(2,11)=0.17
      QESP(3,11)=0.52
      QESP(4,11)=0.9
      QESP(5,11)=1.55
      QESP(6,11)=2.9
      QESP(7,11)=2.9
      SPUTAB(2,11)=164.0
      SPUTAB(3,11)=86.0
      SPUTAB(4,11)=64.0
      SPUTAB(5,11)=50.0
      SPUTAB(6,11)=39.0
      SPUTAB(7,11)=39.0
      SPUTAB(10,11)=30.6
      SPUTAB(11,11)=54.0
C                       NI TARGET
      EB(12)=4.46
      QCOEF(12)=1.3
      QESP(2,12)=0.95
      QESP(3,12)=2.85
      QESP(4,12)=4.5
      QESP(5,12)=6.3
      QESP(6,12)=9.5
      QESP(7,12)=9.5
      SPUTAB(2,12)=47.0
      SPUTAB(3,12)=32.5
      SPUTAB(4,12)=28.0
      SPUTAB(5,12)=25.0
      SPUTAB(6,12)=20.0
      SPUTAB(7,12)=20.0
      SPUTAB(12,12)=8.0*EB(12)
C                       W TARGET
      EB(13)=8.68
      QCOEF(13)=0.6
      QESP(2,13)=0.175
      QESP(3,13)=0.37
      QESP(4,13)=0.67
      QESP(5,13)=1.07
      QESP(6,13)=1.9
      QESP(7,13)=1.9
      SPUTAB(2,13)=400.0
      SPUTAB(3,13)=175.
      SPUTAB(4,13)=158.0
      SPUTAB(5,13)=140.0
      SPUTAB(6,13)=100.0
      SPUTAB(7,13)=100.0
      SPUTAB(10,13)=56.0
      SPUTAB(13,13)=70.0
C                       AL TARGET
      EB(14)=3.36
      QCOEF(14)=1.0
      QESP(2,14)=0.84
      QESP(3,14)=3.2
      QESP(4,14)=5.6
      QESP(5,14)=8.6
      QESP(6,14)=14.
      QESP(7,14)=14.
      SPUTAB(2,14)=53.0
      SPUTAB(3,14)=34.0
      SPUTAB(4,14)=29.0
      SPUTAB(5,14)=25.0
      SPUTAB(6,14)=20.5
      SPUTAB(7,14)=20.5
      SPUTAB(14,14)=8.0*EB(14)
C                       AU TARGET
      EB(15)=3.80
      QCOEF(15)=3.5
      QESP(2,15)=1.
      QESP(3,15)=2.5
      QESP(4,15)=4.1
      QESP(5,15)=6.1
      QESP(6,15)=9.
      QESP(7,15)=9.
      SPUTAB(2,15)=194.0
      SPUTAB(3,15)=94.0
      SPUTAB(4,15)=73.0
      SPUTAB(5,15)=60.0
      SPUTAB(6,15)=44.0
      SPUTAB(7,15)=44.0
      SPUTAB(15,15)=8.0*EB(15)
C                       BE TARGET
      EB(16)=3.38
      QCOEF(16)=0.9
      QESP(2,16)=1.
      QESP(3,16)=2.35
      QESP(4,16)=3.4
      QESP(5,16)=4.6
      QESP(6,16)=6.4
      QESP(7,16)=6.4
      SPUTAB(2,16)=27.5
      SPUTAB(3,16)=24.0
      SPUTAB(4,16)=25.0
      SPUTAB(5,16)=28.0
      SPUTAB(6,16)=33.0
      SPUTAB(7,16)=33.0
      SPUTAB(16,16)=8.0*EB(16)
C                       SI TARGET
      EB(17)=4.7
      QCOEF(17)=0.6
      QESP(2,17)=0.5
      QESP(3,17)=1.45
      QESP(4,17)=2.2
      QESP(5,17)=3.
      QESP(6,17)=4.9
      QESP(7,17)=4.9
      SPUTAB(2,17)=24.5
      SPUTAB(3,17)=17.5
      SPUTAB(4,17)=16.0
      SPUTAB(5,17)=15.0
      SPUTAB(6,17)=14.0
      SPUTAB(7,17)=14.0
      SPUTAB(17,17)=8.0*EB(17)
C                       TA TARGET
      EB(18)=8.1
      QCOEF(18)=0.6
      QESP(2,18)=0.14
      QESP(3,18)=0.38
      QESP(4,18)=0.65
      QESP(5,18)=1.2
      QESP(6,18)=1.8
      QESP(7,18)=1.8
      SPUTAB(2,18)=460.0
      SPUTAB(3,18)=235.0
      SPUTAB(4,18)=180.0
      SPUTAB(5,18)=145.0
      SPUTAB(6,18)=100.0
      SPUTAB(7,18)=100.0
      SPUTAB(18,18)=8.0*EB(18)
C                       TI TARGET
      EB(19)=4.89
      QCOEF(19)=0.4
      QESP(2,19)=0.25
      QESP(3,19)=0.64
      QESP(4,19)=0.99
      QESP(5,19)=1.4
      QESP(6,19)=2.2
      QESP(7,19)=2.2
      SPUTAB(2,19)=43.5
      SPUTAB(3,19)=35.0
      SPUTAB(4,19)=31.5
      SPUTAB(5,19)=28.0
      SPUTAB(6,19)=22.0
      SPUTAB(7,19)=22.0
      SPUTAB(10,19)=22.0
      SPUTAB(19,19)=41.0
C                       V TARGET
      EB(20)=5.33
      QCOEF(20)=0.65
      QESP(2,20)=0.43
      QESP(3,20)=1.3
      QESP(4,20)=2.0
      QESP(5,20)=2.8
      QESP(6,20)=4.
      QESP(7,20)=4.
      SPUTAB(2,20)=76.0
      SPUTAB(3,20)=45.0
      SPUTAB(4,20)=37.0
      SPUTAB(5,20)=31.0
      SPUTAB(6,20)=27.0
      SPUTAB(7,20)=27.0
      SPUTAB(20,20)=8.0*EB(20)
C                       ZR TARGET
      EB(21)=6.33
      QCOEF(21)=0.7
      QESP(2,21)=0.16
      QESP(3,21)=0.5
      QESP(4,21)=0.85
      QESP(5,21)=1.4
      QESP(6,21)=2.8
      QESP(7,21)=2.8
      SPUTAB(2,21)=240.0
      SPUTAB(3,21)=120.0
      SPUTAB(4,21)=95.0
      SPUTAB(5,21)=75.0
      SPUTAB(6,21)=60.0
      SPUTAB(7,21)=60.0
      SPUTAB(21,21)=8.0*EB(21)
C
      IF(ISP93.NE.0) THEN
C                         1993
        CALL SPUT93(IDUM1,IDUM2,IDUM3,IDUM4,DUM5)
        DO 40 I=1,NCT
          DO 30 J=1,NCT
            IZP = NINT(TABLE(I,4))
            AZP = TABLE(I,3)
            IZT = NINT(TABLE(J,4))
            CALL MATS93(MATT,MATP,IZT,IZP,AZP)
            ITAGS(I,J,1) = MATP
            IF(TABLE(J,11).EQ.0.0) MATT=0
            ITAGS(I,J,2) = MATT
CW          IF(MATP*MATT.NE.0) THEN
CW            WRITE(IOUT,'('' SPUTTER/93 I,MATP,J,MATT'',4I3)')
CW   &              I,MATP,J,MATT
CW            WRITE(IOUT,'('' SPUTTER/93 PROJECTILE IS'',2X,A4)')
CW   &              TABLE(I,1)
CW            WRITE(IOUT,'(''                TARGET IS'',2X,A4)')
CW   &              TABLE(J,1)
CW          ENDIF
   30     CONTINUE
   40   CONTINUE
C
        IF(IFULL.LE.0) GOTO 100
        DO 60 K1=1,NCOM
          IF(MIMP.LE.0 .AND. K1.EQ.LIGHTW) GOTO 60
          DO 50 K2=1,NCOM
            IF(K2.EQ.LIGHTW) GOTO 50
            I=LABINT(K1)
            J=LABINT(K2)
C NO!       IF((K1.GT.NION .AND.K1.LE.NIONPM) .OR. (K2.LE.NIONPM)) THEN
C NO!         ITAGS(I,J,1) = 0
C NO!         ITAGS(I,J,2) = 0
C NO!       ENDIF
C           IF(TABLE(J,11).NE.0.0) THEN
C           ENDIF
            MATP = ITAGS(I,J,1)
            MATT = ITAGS(I,J,2)
            IF(MATP*MATT.NE.0) THEN
              IF((K1.LE.NION .OR. K1.GT.NIONPM).AND. K2.GT.NIONPM) THEN
CT              WRITE(IOUT,'('' SPUT/93 PROJECTILE'',I3,'' IS'',
CT   &                2X,A4)')
CT   &                MATP,TABLE(I,6)
CT              WRITE(IOUT,'(''             TARGET'',I3,'' IS'',
CT   &                2X,A4)')
CT   &                MATT,TABLE(J,6)
                CALL WRIS93(MATT,MATP)
              ENDIF
CW          ELSE
CW            WRITE(IOUT,'('' NO SPUT/93 I,MATP,J,MATT'',4I3)')
CW   &              I,MATP,J,MATT
CW            WRITE(IOUT,'(''      WOULD-BE PROJECTILE'',2X,A4)')
CW   &              TABLE(I,1)
CW            WRITE(IOUT,'(''                   TARGET'',2X,A4)')
CW   &              TABLE(J,1)
            ENDIF
   50     CONTINUE
   60   CONTINUE
      ENDIF
C
      IF(LIGHTW.NE.0) THEN
        WRITE(IOUT,'('' RECYCLABLE IMPURITY '',A4,
     &        '' IS ONLY REFLECTED'')')
     &        TABLE(LABINT(LIGHTW),6)
      ENDIF
C
      IF(IFULL.LE.0) GOTO 100
C                       SETS UP TABLES FOR ENERGY AFTER SPUTTERING
      DO 70 K=1,MCP
        DO 65 J=1,MSTAB+2
          STAB(J,K)=0.0
   65   CONTINUE
   70 CONTINUE
      DO 80 K=1,NCOM
        IF(K.EQ.LIGHTW) GOTO 80
        J=LABINT(K)
        EBIND=EB(J)
        IF(EBIND.LE.0.0) GO TO 80
        WRITE(IOUT,'('' SPUTTERABLE MATERIAL  IS'',2X,A4)') TABLE(J,6)
        IF(LIGHTW.NE.0 .AND. MIMP.LE.0) THEN
          WRITE(IOUT,'('' (INHIBITED BY '',A2,'')'')')
     &          TABLE(LABINT(LIGHTW),6)
        ENDIF
        CALL TABULA(SFUNCT,STAB(1,K),MSTAB+1,0.0000,1000.0,TRAN)
        STAB(MSTAB+2,K)=MSTAB
   80 CONTINUE
C
      IF(IYCHEM.GT.0) THEN
        DO 83 K=1,NION
          IF(LABINT(K).EQ.3) THEN
            DO 82 L=NIONPM+1,NCOM
              IF(LABINT(L).EQ.10) THEN
                WRITE(IOUT,'(/'' INCL. D --> C CHEMICAL SPUTTER''
     &                    ,'' MODEL '',I1,''   (X)'',1P,E10.2
     &                    ,'',  E(C)='',1P,E10.2,'' EV''
     &                    ,'',  ALPHA='',E10.2)')
     &                    IYCHEM,AYCHEM,EYCHEM,ALFCH7
                WRITE(IOUT,'( '' (FOR ALL H ISOTOPES)'')')
              ENDIF
   82       CONTINUE
          ENDIF
   83   CONTINUE
      ENDIF
C
      IF(NZYIZ.GT.0) THEN
        WRITE(IUERR,'(/)')
        DO L=1,NZYIZ
          IF( LIGHTW.EQ.0
     &        .OR.
     &       (LIGHTW.NE.0 .AND. TABLE(LABINT(LIGHTW),6).NE.CZYIZ(L))
     &      ) THEN
            WRITE(IUERR,85) CZYIZ(L),AYIZ(L),BYIZ(L)
            IF(BYIZ(L).GT.0.0) WRITE(IUERR,86) EYIZ(L)
          ELSE
C           JUST IN CASE ...
            AYIZ(L)=1.0
            BYIZ(L)=0.0
            IYIZ(L)=0
          ENDIF
        ENDDO
      ENDIF
   85 FORMAT(' FOR ',A4,
     *       ' YIELD(H)  --> ',1P,E10.3,' * YIELD(H) +',E10.3)
   86 FORMAT(35X,'(AT',1P,E10.3,' EV)')
      WRITE(IOUT, 90 )
   90 FORMAT(80X,'SPUTTERING PRESET ENDED')
      CALL WRITIM
C
  100 CONTINUE
      RETURN
      END
C.......................................................................
C.......................................................................
      SUBROUTINE SPUT93(MATT,MATP,CION,CIZB,CRMB)
      IMPLICIT NONE
      INTEGER MATT,MATP,CION,CIZB
      REAL    CRMB
C
      INTEGER IN,IOUT,IUERR,IARK,IPUNCH,IGMT,ITRMT,ITAPIO
      COMMON/IOFILE/IN,IOUT,IUERR,IARK,IPUNCH,IGMT,ITRMT,ITAPIO(2)
C
C  *********************************************************************
C  *                                                                   *
C  *  SYIELD:  SETS UP SPUTTERING YIELD DATA IN COMMON AREA CYIELD.    *
C  *  THE DATA IS TAKEN FROM ECKSTEIN IPP 9/82 (FEB 1993)              *
C  *                                                                   *
C  *  ARGUMENTS :-                                                     *
C  *  MATT : CODE INTEGER GIVING MATERIAL USED IN TARGET               *
C  *  MATP : CODE INTEGER GIVING BACKGROUND MATERIAL                   *
C  *                                                                   *
C  *********************************************************************
C
C COMMON BLOCK PARAMS:
C
      INTEGER MAXNKS,MAXNRS,MAXNDS,MAXNGS,MAXIZS,MAXINS,
     >  MAXIMP,ISECT,MAXNTS,MAXNOC,MAXNWS,MAXNXS,MAXNYS,MAXVMF,
     >  MAXTHE,MAXSN,MAXPTS,MAXPLRP,INIMOUT,IPINOUT,
     >  MAXADS
      REAL    HI,LO,ROOT2,PI,RADDEG,EMI,DEGRAD,ECH,AMU
      CHARACTER*5 VERSON
      PARAMETER (VERSON='3A/01'  ,MAXNTS=6    ,MAXNWS=1000 ,MAXNXS=301,
     >  MAXNKS=50   ,MAXNRS=50   ,MAXNOC=50   ,MAXNDS=50   ,MAXNYS=300,
     >  MAXNGS=50   ,MAXIZS=6    ,MAXINS=50   ,MAXIMP=40000,MAXVMF=5,
     >  MAXPTS=200  ,MAXPLRP=12  ,MAXADS=60   ,
     >  ISECT =128  ,HI=1.E25    ,ROOT2 =1.414213562, PI=3.141592654,
     >  RADDEG=57.29577952, EMI=1.602192E-19/1.672614E-27  ,LO=1.E-25,
     >  DEGRAD=1.745329252E-02   ,MAXTHE=1000 ,ECH=1.602192E-19,
     >  AMU=1.672614E-27         ,MAXSN=5000  ,
     >  INIMOUT=18   ,IPINOUT= 16 )
C
C COMMON BLOCK CYIELD:
C
      COMMON /CSPUT93/ CETH,CETF,CQ,CIDATA
      REAL             CETH(7,12),CETF(7,12),CQ(7,12)
      LOGICAL          CIDATA(7,12)
C
C
      REAL ETH(7,12), ETF(7,12), Q(7,12)
      LOGICAL IDATA(7,12)
      INTEGER I,J,NSPEC,NTARS
      CHARACTER*18 TARMAT(12)
      CHARACTER*6  PLAMAT(7)
C
      NSPEC=7
      NTARS=12
C
C  NSPEC = NUMBER OF IMPURITY SPECIES IN PLASMA.
C  NTARS = NUMBER OF TARGET MATERIALS.
C   CETH = THRESHOLD ENERGY FOR TARGET-ION INTERACTION CONSIDERED (EV)
C   CETF = THOMAS-FERMI INTERACTION POTENTIAL (EV)
C     CQ = YIELD FACTOR (ATOMS/ION)
C CIDATA = LOGICAL FLAG INDICATING WHETHER DATA IS AVAILABLE (T OR F)
C
C     DATA FROM ECKSTEIN'S LATEST REPORT IPP 9/82 HAS BEEN USED.
C     THE TWO COMPOUNDS (TITANIUM CARBIDE AND SILICON CARBIDE)
C     IN THE ORIGINAL REFERENCE ARE NOT AVAILABLE IN THE LATEST
C     REPORT AND HAVE BEEN REPLACED WITH LITHIUM AND CHROMIUM.
C     NOTE ALSO THAT ECKSTEIN HAS CHANGED THE DEFINITION OF HIS
C     NUCLEAR STOPPING CROSS SECTION.  HE HAS ALSO RECOMMENDED
C     THAT WE USE FITS TO EXPERIMENTAL DATA, WHERE AVAILABLE, IN
C     PREFERENCE TO THE CALCULATIONS BASED ON EMPIRICAL FORMULAE
C     (PP 335-338, WHICH ARE AVAILABLE FOR A LARGE RANGE OF
C     PROJECTILE-TARGET COMBINATIONS).  FOR THE TIME BEING I HAVE
C     REPLACED THE GENERAL TABLES WITH FITS TO EXPERIMENTAL DATA
C     ONLY FOR H, D, AND HE ON BE.  THIS RESULTS IN HIGHER YIELDS
C     (APPROX 2X).
C                       LORNE HORTON MAY 93
C

      DATA TARMAT/
     &  ' ALUMINIUM       ',' BERYLLIUM       ',' COPPER          ',
     &  ' GRAPHITE        ',' TITANIUM        ',' IRON            ',
     &  ' NICKEL          ',' MOLYBDENUM      ',' TUNGSTEN        ',
     &  ' BORON           ',' LITHIUM         ',' CHROMIUM        '/

      DATA PLAMAT/
     &  ' H    ',' D    ',' T    ',' HE4  ',' C    ',' SELF ',' O    '/

      DATA  ETH/
     &     23.87, 14.86, 12.91, 12.51, 16.32, 24.02, 18.55,
C    &     12.99, 13.09, 14.69, 16.40, 28.08, 24.17, 32.71,
     &     12.2 , 10.0 , 14.69, 13.9 , 28.08, 24.17, 32.71,
     &     57.25, 28.90, 20.64, 17.07, 13.27, 25.17, 14.01,
     &     31.11, 27.64, 29.48, 32.15, 52.98, 52.98, 61.54,
     &     59.49, 31.51, 23.71, 20.56, 19.45, 34.96, 21.23,
     &     61.39, 31.63, 23.12, 19.54, 16.70, 31.03, 17.95,
     &     66.80, 34.12, 24.69, 20.67, 17.00, 31.89, 18.14,
     &    172.36, 83.30, 56.47, 44.28, 25.75, 48.83, 25.47,
     &    447.02,209.37,136.26,102.07, 41.20, 62.06, 35.92,
     &     23.14, 21.56, 23.46, 25.83, 43.25, 40.97, 50.30,
     &      6.22,  6.92,  8.03,  9.10, 15.94, 11.94, 18.61,
     &     54.47, 28.39, 21.01, 17.96, 16.07, 29.46, 17.40/
C
      DATA ETF/
     &    1059.,   1097.,   1135.,   2448.,  10297.,  34550.,  15720.,
     &     256.,    282.,    308.,    720.,   4153.,   2208.,   6971.,
     &    2926.,   2972.,   3017.,   6293.,  22701., 224652.,  32727.,
     &     415.,    447.,    479.,   1087.,   5688.,   5688.,   9298.,
     &    2054.,   2097.,   2139.,   4503.,  16949., 117915.,  24846.,
     &    2544.,   2590.,   2635.,   5517.,  20270., 174122.,  29437.,
     &    2799.,   2846.,   2893.,   6045.,  22014., 206991.,  31860.,
     &    4719.,   4768.,   4817.,   9945.,  34188., 533127.,  48329.,
     &    9871.,   9925.,   9978.,  20376.,  66517.,1998893.,  91993.,
     &     333.,    361.,    389.,    894.,   4856.,   3717.,   8021.,
     &     185.,    209.,    232.,    557.,   3506.,   1129.,   6014.,
     &    2296.,   2340.,   2383.,   5002.,  18577., 144458.,  27091./
C
      DATA Q/
     &     0.08,  0.14,  0.19,  0.37,  1.65,  4.21,  2.36,
C    &     0.07,  0.11,  0.14,  0.28,  1.00,  0.67,  1.35,
     &     0.128, 0.220, 0.14,  0.707, 1.00,  0.67,  1.35,
     &     0.08,  0.14,  0.19,  0.38,  1.83, 14.23,  2.73,
     &     0.05,  0.08,  0.10,  0.20,  0.75,  0.75,  1.02,
     &     0.06,  0.11,  0.15,  0.30,  1.41,  7.44,  2.07,
     &     0.07,  0.12,  0.16,  0.33,  1.59, 10.44,  2.36,
     &     0.07,  0.12,  0.16,  0.33,  1.60, 11.51,  2.38,
     &     0.05,  0.09,  0.12,  0.24,  1.20, 16.27,  1.81,
     &     0.04,  0.07,  0.10,  0.20,  1.02, 33.47,  1.55,
     &     0.05,  0.08,  0.11,  0.21,  0.80,  0.67,  1.08,
     &     0.10,  0.16,  0.21,  0.40,  1.37,  0.69,  1.82,
     &     0.07,  0.12,  0.17,  0.34,  1.61,  9.54,  2.38/
C
      DATA IDATA/
     &            7*.TRUE.,
     &            7*.TRUE.,
     &            7*.TRUE.,
     &            7*.TRUE.,
     &            7*.TRUE.,
     &            7*.TRUE.,
     &            7*.TRUE.,
     &            7*.TRUE.,
     &            7*.TRUE.,
     &            7*.TRUE.,
     &            7*.TRUE.,
     &            7*.TRUE./
C
C-----------------------------------------------------------------------
C INITIALISE COMMON BLOCK CYIELD.
C-----------------------------------------------------------------------
C
      DO 20 I=1,NTARS
        DO 10 J=1,NSPEC
         CETH(J,I)   = ETH(J,I)
         CETF(J,I)   = ETF(J,I)
         CQ(J,I)     = Q(J,I)
         CIDATA(J,I) = IDATA(J,I)
   10   CONTINUE
   20 CONTINUE
C
C
      ENTRY MATS93(MATT,MATP,CION,CIZB,CRMB)
C
C-----------------------------------------------------------------------
C  ASSIGN TARGET AND BACKGROUND ION MATERIALS.
C-----------------------------------------------------------------------
C
      IF      (CION.EQ.13) THEN
        MATT = 1
      ELSE IF (CION.EQ.4)   THEN
        MATT = 2
      ELSE IF (CION.EQ.29) THEN
        MATT = 3
      ELSE IF (CION.EQ.6)  THEN
        MATT = 4
      ELSE IF (CION.EQ.22) THEN
        MATT = 5
      ELSE IF (CION.EQ.26) THEN
        MATT = 6
      ELSE IF (CION.EQ.28) THEN
        MATT = 7
      ELSE IF (CION.EQ.42) THEN
        MATT = 8
      ELSE IF (CION.EQ.74) THEN
        MATT = 9
      ELSE IF (CION.EQ.5)  THEN
        MATT = 10
      ELSE IF (CION.EQ.3)  THEN
        MATT = 11
      ELSE IF (CION.EQ.24) THEN
        MATT = 12
      ELSE
        MATT = 0
CW      WRITE(IUERR,*) ' SPUT93 - UNKNOWN TARGET MATERIAL, IZ =',ZT
        RETURN
      END IF
C
C---- PLASMA MATERIAL.  CAN BE SET EXPLICITLY FROM INPUT DATA
C
      IF      (NINT(CRMB).GT.0 .AND. NINT(CRMB).LE.4) THEN
        MATP = NINT (CRMB)
      ELSE IF (CIZB.EQ.6)  THEN
        MATP = 5
      ELSE IF (CIZB.EQ.8) THEN
        MATP = 7
      ELSE IF (CIZB.EQ.CION) THEN
        MATP = 6
      ELSE
        MATP = 0
CW      WRITE(IUERR,*) ' SPUT93 - UNKNOWN BOMBARDING IONS, IZ =',ZT
        RETURN
      END IF
CW    WRITE (IOUT,*) ' SPUT93 - BOMBARDING IONS ARE    ' , PLAMAT(MATP)
CW    WRITE (IOUT,*) ' SPUT93 - TARGET MATERIAL IS     ' , TARMAT(MATT)
      RETURN
C
      ENTRY WRIS93(MATT,MATP)
      WRITE(IOUT,'('' SPUT/93 PROJECTILE'',I3,'' IS'',1X,A)')
     &      MATP,PLAMAT(MATP)
      WRITE(IOUT,'(''             TARGET'',I3,'' IS'',1X,A)')
     &      MATT,TARMAT(MATT)
      RETURN
C
      END
C.......................................................................
C.......................................................................
      FUNCTION SFUNCT(E)
C
C     DISTRIBUTION DESCRIBING ENERGY OF SPUTTERED PARTICLES
C
C----------------------------------(SEE SYMBOLS MEANING IN S.R. INPUT)
      INCLUDE 'pnimb'
      PARAMETER (MRG=MRGX ,MZN=MRG-2 ,MCH=41 ,MCC=MCCX, MWAC=13 )
      PARAMETER (MBS=MBSX ,MSD=MBS   ,MSC=2 )
      PARAMETER (MIO=3    ,MCP=6)
      PARAMETER (MEG=5    ,MIXS=10   ,MLEAK=9)
C---------------------------------------------------
      PARAMETER(MSTAB=128)
      COMMON/CSPUT/FLITTM(2,12),STAB(MSTAB+2,MCP),EBIND,Y20,ISP93
C
      SFUNCT=E/(E+EBIND)**3
      RETURN
      END
C.......................................................................
C.......................................................................
      SUBROUTINE SPUTER(IPROJ,EPROJ,ITARG,EPSKV,POLAR,COSPOL,TWK,FD0,
     *                  YLD,IEYLD,ESPUT,COSINE)
C
C     SPUTTERING
C
C     GIVEN:
C           IPROJ  = PROJECTILE INTERNAL INDEX
C           EPROJ  = ENERGY OF THE PROJECTILE
C           ITARG  = WALL TARGET INTERNAL INDEX
C           EPSKV  = REDUCED ENERGY OF THE PROJECTILE
C           POLAR  = INCIDENCE ANGLE
C           COSPOL = COS(POLAR)
C           TWK    = WALL TEMPERATURE (KELVIN)
C           IEYLD  = FLAG FOR PARAMETERS OF SPUTTERED PARTICLE
C     RETURNS:
C           YLD = YIELD
C           ESPUT = ENERGY OF THE SPUTTERED WALL PARTICLE
C           COSINE = SPUTTERING COSINE WITH THE NORMAL
C
C----------------------------------(SEE SYMBOLS MEANING IN S.R. INPUT)
      INCLUDE 'pnimb'
      PARAMETER (MRG=MRGX ,MZN=MRG-2 ,MCH=41 ,MCC=MCCX, MWAC=13 )
      PARAMETER (MBS=MBSX ,MSD=MBS   ,MSC=2 )
      PARAMETER (MIO=3    ,MCP=6)
      PARAMETER (MEG=5    ,MIXS=10   ,MLEAK=9)
C---------------------------------------------------
C
      COMMON/IOFILE/IN,IOUT,IUERR,IARK,IPUNCH,IGMT,ITRMT,ITAPIO(2)
C
      COMMON/COMPOS/NION,NCOM,LIGHTW,RNLITE,EWLITE,
     * SYMB(MIO),PERC(MIO),DENSE(MRG),DENSI(MRG,MIO),EATMD,EATMR,
     * TEMPE(MRG),TEMPI(MRG),IBOUND(MRG),ALBEDO(MRG),LIWALL(MRG),COEFMX
     *,IEMIS(MRG),BEXPT(MRG),WEXPT(MRG,3),SHP,DRIFTV(MRG),DRIFTC(MRG,3)
     *,ISTARG(MRG),CHARGE(MCP),PROREQ(4),ALBATO(MRG),ALBENE(MRG),INDHEL
     *,NTSPUT,PSEMIP(MRG,2),IRTRIM(MCP,MCP),NFTRIM,LPVOID,DCUTCX,TCUTCX
     *,ICUTCX,INDEF,IYCHEM,EYCHEM,AYCHEM,NLEAK,XLEAK(4,MLEAK),ILEAK(MRG)
     *,NZREC,NUTRLZ(MCP),MIMP,IGOPT,PRORCL(MIO),UNDEF
     *,NZYIZ,CZYIZ(MCP),AYIZ(MCP),BYIZ(MCP),EYIZ(MCP),IYIZ(MCP),ALFCH7
     *,PARDIR(MRG,3),RECMAT(MIO,MIO,MRG)
C
      PARAMETER (NCT=24,MKES=4)
      COMMON/CTAB0/TABLE(NCT,11),IZLOZ(0:100)
      COMMON/CTABLE/SPUTAB(NCT,NCT)
     *,LABINT(MCP),LABEXT(NCT),IXS(MIXS),ITRIM
     *,NIONPM,MCX,MOLEC(MCP),IATOM(MCP),EXTSYM(MCP),QESP(NCT,NCT)
     *,EB(NCT),QCOEF(NCT),TLOTZ(NCT,26),CXRMAX(5,MRG),ESRMAX(MKES,MRG)
     *,TBELL(NCT,26),ITAGS(NCT,NCT,2)
C
      COMMON/PHYSIC/WSTART,WGAME,W,NUTRAL,MOL,A,E,CLOCK,IBIN,IBRNPL,
     * SIGT,SIGIT,SIGCXT,SIGEST,SIGST,SIGSTS,IDMOL,DISH2S(MRG),
     * ELECTR(MRG,MCP),SIGE,SIGI(MIO),SIGCX(MIO),SIGEL(MIO),
     * DISH2(MRG),DIOH2(MRG)
     *,SVI,SVCX(MIO)
C
      PARAMETER(MSTAB=128)
      COMMON/CSPUT/FLITTM(2,12),STAB(MSTAB+2,MCP),EBIND,Y20,ISP93
C
      DATA ECUT/0.01/
C
      IF(TABLE(ITARG,11).EQ.0.0) THEN
        WRITE(IUERR,5) TABLE(ITARG,6)
    5   FORMAT(/'***** SPUTER ERROR: WRONG WALL MATERIAL',1X,A4)
        CALL EXITN(1)
      ENDIF
C
      EPSKEV = EPSKV
      YLD = 0.0
      ESPUT = 0.0
C
      IF(ISP93.NE.0) THEN
C                        1993
        MATP = ITAGS(IPROJ,ITARG,1)
        MATT = ITAGS(IPROJ,ITARG,2)
CW      WRITE(6,*) ' SPUTER IPROJ=',IPROJ,' ITARG=',ITARG,MATP,MATT
        IF(MATT*MATP.NE.0) THEN
          YD93 = FYLD93(MATP,MATT,EPROJ)
          ET  = ETH93(MATP,MATT)
          EBIND = EB(ITARG)
CW        WRITE(6,*)' YLD=',YD93,' ET=',ET,' EBIND=',EBIND,' E=',EPROJ
          IF (EBIND.LE.0.0) GO TO 230
          EPM1=EPROJ/ET-1.0
          IF(EPM1.LE.0.0) GO TO 230
          ECUTS = EBIND*EPM1
          YLD = YD93
          GO TO 180
        ENDIF
      ENDIF
C
      AM1=TABLE(IPROJ,3)
      AM2=TABLE(ITARG,3)
      IF(EPSKEV.EQ.0.0) THEN
        Z1=TABLE(IPROJ,4)
        Z2=TABLE(ITARG,4)
        TRAN=SQRT(Z1**0.6666+Z2**0.6666)*Z1*Z2*(AM1+AM2)
        EPSKEV=EPROJ*(0.0325*AM2/TRAN)
      ENDIF
      IF(EPSKEV.LE.0.0) THEN
        WRITE(IUERR,*) ' SPUTER - WRONG REDUCED VELOCITY'
        CALL EXITN(1)
      ENDIF
      EBIND=EB(ITARG)
      IF(EBIND.LE.0.0) GO TO 230
C
      GAMMA=4.0*AM1*AM2/(AM1+AM2)**2
C                       THRESHOLD ENERGY
      ET=SPUTAB(IPROJ,ITARG)
      IF(ET.GT.0.0) GO TO 20
      AMR=AM1/AM2
      IF(AMR.GT.0.3) GO TO 10
      ET=EBIND/(GAMMA*(1.0-GAMMA))
      GO TO 20
   10 ET=8.0*EBIND*AMR**0.4
C                      CUT-OFF FOR SPUTTERING ENERGY
   20 ECUTS=EBIND*(EPROJ/ET-1.0)
C     IF(ECUTS.LE.ECUT) GO TO 225   NO! COMPUTE YIELD AND THEN GOTO 225
C                      FITTING PARAMETER Q
      EP=EPROJ/ET
      IF(EP.LE.1.0) GO TO 230
C                      EXPER. Q AVAILABLE
      Q=QESP(IPROJ,ITARG)
      IF(Q.NE.0.0) GO TO 40
C                      EXPER. Q UNAVAILABLE
      IF(AM1.GT.AM2) GO TO 30
      Q=QCOEF(ITARG)
      IF(Q.LE.0.0) Q=0.75
      Q=AM2*Q*GAMMA**1.666667
      GO TO 40
   30 Q=AM2
   40 CONTINUE
C                      NORMALIZED YIELD YN
      IF(EP.GE.20.0) GO TO 50
C                         NEAR THRESHOLD REGIME
      YN=8.5E-03*EP**0.25*(1.0-1.0/EP)**3.5
      GO TO 160
C                         LINEAR CASCADE REGIME
   50 IF(AM1.GT.4.0) GO TO 130
C                                LIGHT IONS
      ALOG20=ALOG(EPSKEV*20.0/EP)
      IF(ALOG20.GT.FLITTM(1,1) .AND. ALOG20.LT.FLITTM(1,12)) GO TO 80
   60 WRITE(IOUT, 70 ) TABLE(IPROJ,6),TABLE(ITARG,6),EPROJ,EPSKEV
   70 FORMAT(1X,A4,' AGAINST ',A4,' ENERGY=',1PE12.3,' EPS=',E12.3)
      YLD=0.0
      ESPUT=0.0
      GO TO 230
   80 DO 90 K=2,12
      I=K-1
      IF(ALOG20.LE.FLITTM(1,K)) GO TO 100
   90 CONTINUE
  100 F20=FLITTM(2,I)+(ALOG20-FLITTM(1,I))/(FLITTM(1,I+1)-FLITTM(1,I)) *
     * (FLITTM(2,I+1)-FLITTM(2,I))
      F20=EXP(F20)
      ALOGE=ALOG(EPSKEV)
      IF(ALOGE.LE.FLITTM(1,1) .OR. ALOGE.GE.FLITTM(1,12)) GO TO 60
      DO 110 K=2,12
      I=K-1
      IF(ALOGE.LE.FLITTM(1,K)) GO TO 120
  110 CONTINUE
  120 F=FLITTM(2,I)+(ALOGE-FLITTM(1,I))/(FLITTM(1,I+1)-FLITTM(1,I)) *
     * (FLITTM(2,I+1)-FLITTM(2,I))
      F=EXP(F)
      YN=Y20/F20*F
      GO TO 160
C                                HEAVY IONS, EPROJ < 100*ET
  130 IF(EP.LE.100.) GO TO 150
      WRITE(IUERR, 140 ) EPROJ
  140 FORMAT('0 PROJECTILE ENERGY TOO HIGH FOR HEAVY ION INTERACTION')
      GO TO 60
  150 YN=8.5E-03*EP**0.333333*(1.0-1.0/EP)**3.5
C                      YIELD
  160 YLD=YN*Q
C                      YIELD CORRECTED FOR ANGLE ABOVE 300 EV
      IF(EPROJ.LE.300.0) GO TO 180
      IF(COSPOL.LE.0.2588) GO TO 170
C     IF(POLAR.GT.75DEG) GO TO ...
      YLD=YLD/COSPOL
      GO TO 180
  170 YLD=YLD*(-58.361*POLAR**2+152.789*POLAR-96.0)
C
C
  180 CONTINUE
C
C                      ENERGY OF THE SPUTTERED PARTICLE
      IF(YLD.LE.0.0) GOTO 228
      IF(IEYLD.NE.1) GOTO 230
      IF(EB(ITARG).GT.0.0) GO TO 200
      WRITE(IUERR, 190 ) ITARG
  190 FORMAT(' ERROR: EB <=0 FOR SPUTTERING FROM',I3)
      CALL EXITN(1)
  200 K=LABEXT(ITARG)
      IF(ECUTS.LE.ECUT) GOTO 225
      NLANCI=0
  210 CALL SELECT(STAB(1,K),STAB(MSTAB+2,K),ESPUT)
      NLANCI=NLANCI+1
      IF(NLANCI.LT.1000) GO TO 220
CW    WRITE(IUERR,213) ITARG,ECUTS
CW213 FORMAT(/' **** S.R. SPUTER: TOO MANY TOSSES, ITARG=',I3,
CW   *        ' ECUTS=',1P,E12.5,' EV')
      GOTO 225
  220 IF(ESPUT.GT.ECUTS) GO TO 210
CW    WRITE(6,*) ' ECUTS=',ECUTS,' NLANCI=',NLANCI,' ESPUT=',ESPUT
      GOTO 226
C                      ECUTS <= ECUT  OR TOO MANY TOSSES
C                          USE AVERAGE ENERGY
  225 CONTINUE
C     ESPUT = 2.0*(EBIND+ECUTS)**2*ALOG((EBIND+ECUTS)/EBIND)
C    &      - ECUTS*(2.0*EBIND+3.0*ECUTS)
      ESPUT = 2.0D0*(DBLE(EBIND)+DBLE(ECUTS))**2*
     &        DLOG((DBLE(EBIND)+DBLE(ECUTS))/DBLE(EBIND))
     &      - DBLE(ECUTS)*(2.0D0*DBLE(EBIND)+3.0D0*DBLE(ECUTS))
      ESPUT = ESPUT * (EBIND/ECUTS**2)
CW    WRITE(6,*) ' ECUTS=',ECUTS,' NLANCI=',  0   ,' ESPUT=',ESPUT
      IF(ESPUT.LE.0.0) GOTO 228
      ESPUT = AMIN1(ESPUT,ECUTS)
C                      COSINE OF THE SPUTTERED PARTICLE
  226 CALL COSLAW(COSINE,2)
      GOTO 230
C                      NO SPUTTERED PARTICLE
  228 YLD=0.0
      ESPUT=0.0
C
  230 CONTINUE
C                      CHEMICAL SPUTTERING (D-->C)
      IF(IYCHEM.EQ.INDEF) THEN
C       WARNING: IF CALLED WITH IEYLD.NE.1,
C       MAKE SURE IYCHEM, EYCHEM,AYCHEM ARE DEFINED.
C       IN ANY CASE, IYCHEM SET TO 0 IN 'PRESPU' CALLED FROM EDGE2D
        WRITE(IUERR,*) ' **** CHEM. SPUTT. NOT READY'
        CALL EXITN(1)
      ENDIF
C     IF(IPROJ.EQ.3 .AND. ITARG.EQ.10 .AND. IYCHEM.GT.0) THEN
C->        PATCH: CHEM. SPUTT. FOR H,T = D
      IF(IPROJ.LE.5 .AND. ITARG.EQ.10 .AND. IYCHEM.GT.0) THEN
        CALL SPUTCHEM(IYCHEM,ALFCH7,EPROJ,TWK,FD0,YCHEM)
C       WRITE(IUERR,*) ' CHEM.SPUT',' E=',EPROJ,' T=',TWK,
C    &                ' FD=',FD0,' YCHEM=',YCHEM
        IF(YCHEM.LT.0.0) THEN
          WRITE(IUERR,*) ' NEGATIVE CHEMICAL SPUTTERING'
          CALL EXITN(1)
        ENDIF
        YCHEM = YCHEM*AYCHEM
        IF(IEYLD.EQ.1) THEN
          ESPUT = YLD*ESPUT + YCHEM*EYCHEM
          YLD = YLD + YCHEM
          IF(YLD.GT.0.0) ESPUT = ESPUT/YLD
        ELSE
          YLD = YLD + YCHEM
        ENDIF
      ENDIF
C                      YIELD RE-SCALING (FOR H-PROJECTILES ONLY)
      IF(NZYIZ.GT.0 .AND. IPROJ.LE.5) THEN
        IZY=0
        DO L=1,NZYIZ
          IF(TABLE(ITARG,6).EQ.CZYIZ(L)) IZY=L
        ENDDO
        IF(IZY.NE.0) THEN
          YLD = AYIZ(IZY)*YLD
C                         ADD FLOOR TO YIELD
          IF( BYIZ(IZY).GT.0.0 ) THEN
C           (ONLY FOR H-PROJECTILES. 'SPUTER' CAN ALSO BE CALLED FROM
C           'ZYIELD' IN EDGE2D BEFORE NIMBUS, WHEN A/B/EYIZ ARE NON YET
C           KNOWN, BUT 'ZYIELD' IS ONLY USED FOR IMPURITIES. HOWEVER,
C           A CHECK IS PERFORMED JUST IN CASE). BESIDES, TRAP LIGHTW.
            IF(IYIZ(IZY).NE.1234567) THEN
              WRITE(IUERR,'(''0**** SPUTER: UNDEFINED H-YIELD FACTORS''
     &                     ,'' FOR '',A4)') CZYIZ(L)
              CALL EXITN(1)
            ENDIF
            IF(YLD.LE.0.0) THEN
              YLD = BYIZ(IZY)
              IF(IEYLD.EQ.1) THEN
                ESPUT = EYIZ(IZY)
                CALL COSLAW(COSINE,2)
              ENDIF
            ELSE
              IF(IEYLD.EQ.1) THEN
                ESPUT = YLD*ESPUT + BYIZ(IZY)*EYIZ(IZY)
                YLD = YLD + BYIZ(IZY)
                ESPUT = ESPUT/YLD
              ELSE
                YLD = YLD + BYIZ(IZY)
              ENDIF
            ENDIF
          ENDIF
        ENDIF
      ENDIF
C
      RETURN
      END
C.......................................................................
C.......................................................................
       FUNCTION FYLD93(MATP,MATT,ENERGY)
       IMPLICIT NONE
       REAL FYLD93,ENERGY,X1,X12,X2
       INTEGER MATP,MATT
C
C  *********************************************************************
C  *                                                                   *
C  *  FYLD93:  CALCULATES YIELD OF MATERIAL "MATP" HITTING TARGET      *
C  *  MADE OF MATERIAL "MATT" WITH AN ENERGY "ENERGY".                 *
C  *                                                                   *
C  *  ARGUMENTS :-                                                     *
C  *  MATP : CODE INTEGER GIVING MATERIAL OF IMPACTING PARTICLE        *
C  *  MATT : CODE INTEGER GIVING MATERIAL USED IN TARGET               *
C  *  ENERGY : ENERGY OF IMPACTING PARTICLE                            *
C  *                                                                   *
C  *********************************************************************
C
      COMMON /CSPUT93/ CETH,CETF,CQ,CIDATA
      REAL             CETH(7,12),CETF(7,12),CQ(7,12)
      LOGICAL          CIDATA(7,12)
C
      IF(ENERGY.LE.0.0) GOTO 100
      IF(CIDATA(MATP,MATT)) THEN
      IF((CETH(MATP,MATT)/ENERGY).GT.1.0E0) GOTO 100
         X1=ENERGY/CETF(MATP,MATT)
         X12=SQRT(X1)
         X2=CETH(MATP,MATT)/ENERGY
         FYLD93=CQ(MATP,MATT)*(0.5*LOG(1.0+1.2288*X1))
     1         /(X1+0.1728*X12+0.008*X1**0.1504)
     2         *(1-X2)*(1-X2)*(1.0-X2**(2.0/3.0))
      ELSE
         FYLD93=0.0
      ENDIF
      RETURN
C  ERROR TRAPPING, OUTSIDE RANGE SET YIELD=0,   E=0 OR E/E0 > 1
  100 FYLD93=0.0
      END
C.......................................................................
C.......................................................................
       FUNCTION ETH93(MATP,MATT)
       IMPLICIT NONE
       REAL ETH93
       INTEGER MATP,MATT
C
C  *********************************************************************
C  *                                                                   *
C  *  YIELD:   RETURNS THE THRESHOLD ENERGY FOR MATERIAL "MATP"        *
C  *  HITTING A TARGET MADE OF MATERIAL "MATT".                        *
C  *                                                                   *
C  *  ARGUMENTS :-                                                     *
C  *  MATP : CODE INTEGER GIVING MATERIAL OF IMPACTING PARTICLE        *
C  *  MATT : CODE INTEGER GIVING MATERIAL USED IN TARGET               *
C  *                                                                   *
C  *********************************************************************
C
      COMMON /CSPUT93/ CETH,CETF,CQ,CIDATA
      REAL             CETH(7,12),CETF(7,12),CQ(7,12)
      LOGICAL          CIDATA(7,12)
C
C
      ETH93 = CETH(MATP,MATT)
C
      RETURN
      END
C.......................................................................
C.......................................................................
      SUBROUTINE ATOI(AMAT,IMAT,SYMB)
C
C----------------------------------(SEE SYMBOLS MEANING IN S.R. INPUT)
      INCLUDE 'pnimb'
      PARAMETER (MRG=MRGX ,MZN=MRG-2 ,MCH=41 ,MCC=MCCX, MWAC=13 )
      PARAMETER (MBS=MBSX ,MSD=MBS   ,MSC=2 )
      PARAMETER (MIO=3    ,MCP=6)
      PARAMETER (MEG=5    ,MIXS=10   ,MLEAK=9)
      PARAMETER (NCT=24,MKES=4)
      COMMON/CTAB0/TABLE(NCT,11),IZLOZ(0:100)
      COMMON/CTABLE/SPUTAB(NCT,NCT)
     *,LABINT(MCP),LABEXT(NCT),IXS(MIXS),ITRIM
     *,NIONPM,MCX,MOLEC(MCP),IATOM(MCP),EXTSYM(MCP),QESP(NCT,NCT)
     *,EB(NCT),QCOEF(NCT),TLOTZ(NCT,26),CXRMAX(5,MRG),ESRMAX(MKES,MRG)
     *,TBELL(NCT,26),ITAGS(NCT,NCT,2)
C---------------------------------------------------
C     (1)  SYMBOL,
C     (2)  CHARGE,
C     (3)  A.M.U.,
C     (4)  ATOMIC NUMBER Z,
C     (5)  THE ROW INDEX OF ITS ASSUMED FUNDAMENTAL ISOTOPE,
C     (6)  NEUTRAL SYMBOL,
C     (7)  MOLECULE DISSOCIATION TEMPERATURE,
C     (8)  MOLECULE SYMBOL,
C     (9)  AVERAGE IONIZATION CHARGE,
C     (10) DENSITY OF STRUCTURAL MATERIALS(GR/CM3).
C     (11) GAS(0) OR METAL(1)? (METALS STICK IN THE WALL)
C---------------------------------------------------
C
      IMAT=0
      DO 20 K=2,NCT
        AM = TABLE(K,3)
        IF( AMAT.GE.(AM-0.3) .AND. AMAT.LE.(AM+0.3) ) THEN
          IMAT = K
          SYMB = TABLE(K,6)
          GOTO 40
        ENDIF
   20 CONTINUE
   40 CONTINUE
C
      RETURN
      END
C.......................................................................
C.......................................................................
      SUBROUTINE ITOA(IMAT,Z,A)
C
C----------------------------------(SEE SYMBOLS MEANING IN S.R. INPUT)
      INCLUDE 'pnimb'
      PARAMETER (MRG=MRGX ,MZN=MRG-2 ,MCH=41 ,MCC=MCCX, MWAC=13 )
      PARAMETER (MBS=MBSX ,MSD=MBS   ,MSC=2 )
      PARAMETER (MIO=3    ,MCP=6)
      PARAMETER (MEG=5    ,MIXS=10   ,MLEAK=9)
C---------------------------------------------------
      PARAMETER (NCT=24,MKES=4)
      COMMON/CTAB0/TABLE(NCT,11),IZLOZ(0:100)
      COMMON/CTABLE/SPUTAB(NCT,NCT)
     *,LABINT(MCP),LABEXT(NCT),IXS(MIXS),ITRIM
     *,NIONPM,MCX,MOLEC(MCP),IATOM(MCP),EXTSYM(MCP),QESP(NCT,NCT)
     *,EB(NCT),QCOEF(NCT),TLOTZ(NCT,26),CXRMAX(5,MRG),ESRMAX(MKES,MRG)
     *,TBELL(NCT,26),ITAGS(NCT,NCT,2)
C
       IF(IMAT.GE.2 .AND. IMAT.LE.NCT) THEN
         Z = TABLE(IMAT,4)
         A = TABLE(IMAT,3)
       ELSE
        A=0.0
        Z=0.0
      END IF
C
      RETURN
      END
C.......................................................................
C.......................................................................
      SUBROUTINE SAMPLE(C,EIN,E)
C
C     SAMPLING OF THE REFLECTED ENERGY(FOR SENSITIVITY ANALYSIS ONLY).
C     THE RATIO R= E/EINCIDENT IS SAMPLED FROM THE DISTRIBUTION
C     HOLDING FOR DEUTERIUM HITTING AT 300 EV A NICKEL WALL
C     (COMPUTED BY MARLOWE. SEE ECKSTEIN,VERBEEK "REFLECTION")
C
      DIMENSION X(21),F(21)
C
      DATA X
     */.00,.05,.10,.15,.20,.25,.30,.35,.40,.45,.50,.55,.60,.65,
     * .70,.75,.80,.85,.90,.95,1.0/
      DATA F
     */.000,.011,.027,.053,.081,0.12,0.15,0.19,0.24,0.29,0.35,
     * 0.42,0.49,0.56,0.65,0.73,0.82,0.91,0.98,1.0,1.0/
C
C
      DO 10 I=2,21
      K=I
      IF(F(I).GE.C) GO TO 20
   10 CONTINUE
   20 R=X(K-1)+((C-F(K-1))/(F(K)-F(K-1)))*(X(K)-X(K-1))
      E=R*EIN
      RETURN
      END
C.......................................................................
C.......................................................................
      SUBROUTINE STARTN(ITSOU,ITSIM,WIS,ISTIMP,NUTBRN,WBRN,EBRN,IR3BRN)
C
C     PER COMINCIARE SCEGLIE LA SPECIE DI NEUTRO NATO.
C     LA SORGENTE PUO' ESSERE DISPOSTA SU SEGMENTI NEL PIANO X,Y
C     O SU SUPERFICI (SEMPRE IN X,Y). SCEGLIE PRIMA SE SEGMENTO
C     O SUPERFICIE, INDI I PARAMETRI INIZIALI DI MOTO, CON
C     T=ANGOLO TRA DIREZIONE DI MOTO E ASSE Z. COST UNIFORME
C     P=ANGOLO TRA PROIEZIONE DEL MOTO SUL PIANO XY E ASSE X. P UNIFORME
C     NUTRAL=ION/NEUTRAL EXTERNAL INDEX
C     W=STATISTICAL WEIGHT
C     A=MASS OF THE SINGLE ATOM (OF THE TRAVELLING MOLECULE)
C     MOL=NUMBER OF ATOMS OF THE MOLECULE
C     NUTBRN=NEUTRAL BORN (MAY CHANGE IN WALLS, E.G, T->D)
C
C
C     NON VENGONO ESEGUITI ACCUMULI IN QUESTA SUBROUTINE
C
C----------------------------------(SEE SYMBOLS MEANING IN S.R. INPUT)
      INCLUDE 'pnimb'
      PARAMETER (MRG=MRGX ,MZN=MRG-2 ,MCH=41 ,MCC=MCCX, MWAC=13 )
      PARAMETER (MBS=MBSX ,MSD=MBS   ,MSC=2 )
      PARAMETER (MIO=3    ,MCP=6)
      PARAMETER (MEG=5    ,MIXS=10   ,MLEAK=9)
C---------------------------------------------------
      COMMON/IOFILE/IN,IOUT,IUERR,IARK,IPUNCH,IGMT,ITRMT,ITAPIO(2)
C
      PARAMETER ( NWCOMB=NWCOMX )
      COMMON/COMBIN/MASTER(NWCOMB)
      DIMENSION ASTER(NWCOMB)
      EQUIVALENCE(MASTER(1),ASTER(1))
C
      COMMON/CGEOM2/LOCREG,NUMBOD,IROR,LR1,LR2,LDATA,NUMR,LBASE,LTMA
     *             ,LOCBOD,IDBG,KLOOP,PINF,LKOR,NOA,IST,NOREG,LVOL,LAREA
     *             ,LNUMR,LAIRC,LVOLTR,LLASTG,IRWGMT,NRTRU
      REAL*8 PINF
C
      PARAMETER (NDEBUG=17,MSPLIT=500,NBANK=25)
      PARAMETER (MDEBWR=30,MDEBPT=200)
      COMMON/CHISTO/KOSE,KOST,NHIST,NST,FNST,NSG,FNSG,
     * INIZ,ICORR,KINDPR,NEDIT,ISTHEL,IHOR,
     * DECIMA,PLIFE,WTHRES,TAGLIO,WCUT,NGEV,EGEV(MEG),TCUT,
     * IDEBIN,IDLOOP,IDEBUG,KODDBG,IHDBG,ICDBG,DEBUG(NDEBUG),
     * NDEBWR,NDEBPT,IDBHST(MDEBWR),
     * NSPLIT,MAXSON,MAXSOH,BANK(MSPLIT,NBANK),WPESO(MRG)
     *,IREAD,IWRITE,IBEAM,IONTOW,IDMC,IDMCO
C
      PARAMETER (MZSOUR=13, MSOUXY=14)
      COMMON/SOURCE/
     * HHESRC,SRECYC,SRECOM,WSOUR1,NSEGS,SOTEMP(MBS),STMOUT,TIMINF,
     * WSOSEG(MBS,MIO),NSEGSO,KORSEG(MBS),LAYSEG(MBS),YTMOUT,
     * X1SOUR(MBS),Y1SOUR(MBS),X2SOUR(MBS),Y2SOUR(MBS),ZSOURC(MCP),
     * FISOU(MBS),SFISOU(MBS),CFISOU(MBS),WDS(MBS,5),IZOENT,
     * NZSOUR,SREGZ(MZSOUR),DREGZ(MZSOUR),WSOIMP(MBS,MCP),
     * NSOUXY,TSOUXY(MSOUXY),WSOUXY(MSOUXY),ISOUXY(MSOUXY),
     * CSOUXY(8,MSOUXY),HSOUXY(MSOUXY),DSOUXY(MSOUXY),ITYSEG(MBS),
     * ICHTAR(MBS),ISCHAN,SOUNEW(MBS),QIMP(MBS,MCP),PUFIMP(MCP),
     * WREG(1),WSEF(1),KOISEF(1),KOSDE(1),NTARG,KO2DIR(MRG),KO3D2D(MRG)
     *,IRECO,IMOMSO,NOZPMP,MODEZR,SNVOL(MRG*MIO),SNV(MRG,MIO)
     *,PUFFRA(MBS,MCP),PUFFXY(MSOUXY),TPUFFH,TPUFFZ
C
      PARAMETER (MILLE=10000)
      COMMON/COMUNE/BUFFER(MILLE),IBUFER(MILLE)
C
      COMMON/CGEOMT/KREG,KREGM1,IR3DST,IR2DST,AREAD(MRG),
     * KONDC,KONDZ,I3D,KREG3D,LREG3D,LQUOTA,LDZETA,KSXY3D,NZETA
C
      COMMON/STOGEO/IR,IREG,IREG3D,ISENT,LEAVES,XIN,YIN,ZIN,
     * COSP,SINP,COST,SINT,TANT,COSKT,DIST,PILX,IRZ,IREGZ,IREG3Z,
     * IZIN,IZ,ISSOU,X,Y,Z
      REAL*8 X,Y,Z
C
      COMMON/COMPOS/NION,NCOM,LIGHTW,RNLITE,EWLITE,
     * SYMB(MIO),PERC(MIO),DENSE(MRG),DENSI(MRG,MIO),EATMD,EATMR,
     * TEMPE(MRG),TEMPI(MRG),IBOUND(MRG),ALBEDO(MRG),LIWALL(MRG),COEFMX
     *,IEMIS(MRG),BEXPT(MRG),WEXPT(MRG,3),SHP,DRIFTV(MRG),DRIFTC(MRG,3)
     *,ISTARG(MRG),CHARGE(MCP),PROREQ(4),ALBATO(MRG),ALBENE(MRG),INDHEL
     *,NTSPUT,PSEMIP(MRG,2),IRTRIM(MCP,MCP),NFTRIM,LPVOID,DCUTCX,TCUTCX
     *,ICUTCX,INDEF,IYCHEM,EYCHEM,AYCHEM,NLEAK,XLEAK(4,MLEAK),ILEAK(MRG)
     *,NZREC,NUTRLZ(MCP),MIMP,IGOPT,PRORCL(MIO),UNDEF
     *,NZYIZ,CZYIZ(MCP),AYIZ(MCP),BYIZ(MCP),EYIZ(MCP),IYIZ(MCP),ALFCH7
     *,PARDIR(MRG,3),RECMAT(MIO,MIO,MRG)
C
      PARAMETER (NCT=24,MKES=4)
      COMMON/CTAB0/TABLE(NCT,11),IZLOZ(0:100)
      COMMON/CTABLE/SPUTAB(NCT,NCT)
     *,LABINT(MCP),LABEXT(NCT),IXS(MIXS),ITRIM
     *,NIONPM,MCX,MOLEC(MCP),IATOM(MCP),EXTSYM(MCP),QESP(NCT,NCT)
     *,EB(NCT),QCOEF(NCT),TLOTZ(NCT,26),CXRMAX(5,MRG),ESRMAX(MKES,MRG)
     *,TBELL(NCT,26),ITAGS(NCT,NCT,2)
C
      COMMON/PHYSIC/WSTART,WGAME,W,NUTRAL,MOL,A,E,CLOCK,IBIN,IBRNPL,
     * SIGT,SIGIT,SIGCXT,SIGEST,SIGST,SIGSTS,IDMOL,DISH2S(MRG),
     * ELECTR(MRG,MCP),SIGE,SIGI(MIO),SIGCX(MIO),SIGEL(MIO),
     * DISH2(MRG),DIOH2(MRG)
     *,SVI,SVCX(MIO)
C
      PARAMETER (MAXZET=12, MH=14, MZADJ=MZN*6, MEIBOR=MZADJ*2)
      PARAMETER (MMACRO=30+1)
      COMMON/SCORE/NAZONE,NDUM,NZONE,IZONA(MRG),VOLZ(MZN),IBOUNZ(MZN),
     * ELAST(MZN,MCP),FLUXZ(MZN,MAXZET),ESCAPE(MZN,MCP),REDP(MZN,MCP),
     * ABSOR(MZN,MCP),ELOST(MCP,MZN),WACOL(MCP,MZN,MWAC),
     * QF(MCH,MCC,8),QI(MCH,MCC,8),AF(MCH,MCC,8),AI(MCH,MCC,8),SAG(MCP),
     * FLUX(MZN,MCP),ENNE(MZN,MCP),EAVER(MZN,MCP,2),ENFLUX(MCP,MZN,MEG),
     * CEXED(MZN,MCP),DISSOC(MZN,MCP),TRAMAT(1,1,1),WBORN(MCP),
     * HISTOR(MCP),COLS,FUGA,ESCEN(MZN,MCP),REDFUE(MSD,MSC,MCP),
     * ZENTRY(MCP,MCH),WNP,WRS,COLW,TRUNC,NLATS,IS,IDELAT(MSD,3),
     * SCALAT(MSD,MSC),SPFUEL(MSD,MSC,MCP),QDEPL(MSD,MSC),SPIN(MCP),
     * ERECYC(MCP,MZN,2),PRECYC(MCP,MZN,3),NCHAN,NZCHAN(MCC),ICHAN(MZN),
     * MZCHAN,IZCHAN(MCH,MCC),SPAREA(MSD,MSC),DENSEZ(MZN),TEMPEZ(MZN),
     * YEARFR,TARLHY(MSD),TARLHE(MSD),REDHEL(MSD,MSC,MCP),PIONW,PINEFW,
     * TLONWI,PIONRE,PMOLR1,PMOLR2,AALB,QALB,AHENR,QHENR,AHETP,QHETP
     *,SPUHEL(MSD,MSC,MCP),ECHBEM(1,1),ELOBEM(1,1),VELOC(MZN,MCP,3)
     *,WPRSP,EPRSP,WTASP,ETASP,SIGMAN(MZN,6),WNBR(MZADJ,2)
     *,NEIBOR(MEIBOR),LOCNBR(MZN),NMACRO,IMACRO(MZN),COSNOR
     *,ISPOFF(MMACRO-1),IPVOID,TSUBD,ITAU,MSPOFF,YNOSP
C
      REAL*8 FLUXZ,ESCAPE,ELAST,REDP,ABSOR,WACOL,SPIN,
     * FLUX,ENNE,EAVER,ENFLUX,CEXED,WNBR,
     * DISSOC,TRAMAT,SAG,WBORN,HISTOR,COLS,FUGA,ESCEN,WNP,WRS,COLW,TRUNC
     *,SPFUEL,ERECYC,PRECYC,REDFUE,QDEPL,ZENTRY,SPUHEL,ECHBEM,ELOST
     *,ELOBEM,REDHEL,TARLHY,TARLHE,VELOC
     *,WPRSP,EPRSP,WTASP,ETASP,SIGMAN
C
C
      REAL*8 XCG(2)
C
C
      ISENT=0
      ISEGS=0
      KSOUXY=0
      LAYER=0
      ISSOU=0
      IR3BRN=0
      EBRN=0.0
C                ISTHEL=0 FOR ANY PLASMA COMPONENT.NE.HE++
C                DAUGHTER PARTICLES HAVE THE SAME ISTHEL OF PARENTS
      ISTHEL=0
C                      WHICH NEUTRAL?
C     WRITE(IUERR,*) ' STARTN. HHESRC=',HHESRC,' ZSOURC=',ZSOURC(1)
      IF(ISTIMP.EQ.0) THEN
C            FUEL
        CALL WHICH(NUTRAL,W)
        IMPUR=0
      ELSE
C            IMPURITY
        NUTRAL=NUTRAL
        W=W
        IMPUR=2
      ENDIF
      W=W*WIS
      NUTBRN=NUTRAL
      WBRN  =W
      IF(ITSIM.EQ.0) THEN
        CLOCK=0.0
      ELSE
        CLOCK=RANF()*TCUT
      ENDIF
      WSTART=W
      WGAME=WTHRES*WSTART
      J=LABINT(NUTRAL)
      A=TABLE(J,3)
      MOL=1
      Q=TABLE(J,2)
C                ISTHEL=1 IF THIS IS A HELIUM HISTORY
C                DAUGHTER PARTICLE GENERATED BY HE CONSERVE ISTHEL
      IF(ISTIMP.EQ.0 .AND. NUTRAL.EQ.INDHEL) ISTHEL=1
C                RECALL: INDHEL=0 IF NO HE PRESENT,ELSE=EXT.INDEX OF HE
C
      ITSOU=0
      IF(ISTIMP.NE.0) GOTO 9
C     CONTROLLARE PRIMA CHE LA STORIA SIA DI RICICLO DI IDROGENO?
C
      IF     (IRECO.EQ.0) THEN
        GOTO 9
      ELSE IF(IRECO.EQ.1) THEN
        GOTO 2
      ELSE IF(IRECO.EQ.2) THEN
        IF(NUTRAL.GT.NION) THEN
          WRITE(IUERR,*) ' **** STARTN: NUTRAL>NION'
          CALL EXITN(1)
        ENDIF
        TRAN=PRORCL(NUTRAL)
        C=RANF()
C       IF(C.LE.SRECYC/(SRECYC+SRECOM)) GOTO 9
        IF(C.LE.TRAN) GOTO 9
      ENDIF
C
C                       RECOMBINATION SOURCE
C                       ====================
    2 CONTINUE
CT    WRITE(IUERR,*)' RECOMBINATION SOURCE'
      ITSOU=4
      C=RANF()
      IF(.FALSE.) THEN
C       SELECT REGION AND ION
        DO LOC=1,KREG3D*NION
          IF(C.LE.SNVOL(LOC)) GOTO 3
        ENDDO
        WRITE(IUERR,*) ' **** IN STARTN: WRONG SNVOL'
        CALL EXITN(1)
    3   CONTINUE
        ION=(LOC-1)/KREG3D+1
        IF(ION.NE.NUTRAL) THEN
          WRITE(IUERR,*)' RECOMBINATION SOURCE. ION<>NUTRAL',ION,NUTRAL
          CALL EXITN(1)
        ENDIF
        IREG3D=LOC-(ION-1)*KREG3D
      ELSE
C       GIVEN THE ION, SELECT THE REGION
        ION=NUTRAL
        DO K=1,KREG3D
          IF(C.LE.SNV(K,ION)) GOTO 4
        ENDDO
        WRITE(IUERR,*) ' **** IN STARTN: WRONG SNV'
        CALL EXITN(1)
    4   CONTINUE
        IREG3D=K
      ENDIF
      IF(ION.LE.0 .OR. ION.GT.NION .OR.
     *    IREG3D.LT.IR3DST .OR. IREG3D. GT.KREG3D) THEN
        WRITE(IUERR,*) ' **** IN STARTN: WRONG SNVOL ION,IREG3D',
     *                 ION,IREG3D
        CALL EXITN(1)
      ENDIF
      IF(I3D.EQ.0) THEN
        IREG=IREG3D
      ELSE
        IREG=KO3D2D(IREG3D)
C       REJECTION GAME FOR Z
    5   CALL RANDOM(C)
        Z=C*ASTER(LQUOTA+NZETA)
        CALL FINDV(Z,ASTER(LQUOTA+1),NZETA,IZ)
        IR3D=MASTER(KSXY3D+(IZ-1)*KREG+IREG)
        IF(IR3D.NE.IREG3D) GOTO 5
      ENDIF
      IR=KO2DIR(IREG)
      IF(IR.GT.0 .AND. IR.LE.NRTRU) THEN
        CALL GETP(IR,XCG(1))
        X=XCG(1)
        Y=XCG(2)
      ELSE
        WRITE(IUERR,*) ' **** IN STARTN: WRONG SNVOL IREG,IR',IREG,IR
        CALL EXITN(1)
      ENDIF
CC                   ISOTROPIC, AVERAGE MAXWELLIAN ENERGY
CC    E=TEMPI(IREG3D)*1.5
CC    CALL TROPIC
C                    REGION TEMPERATURE (EV)
      TI=TEMPI(IREG3D)
      TE=TEMPE(IREG3D)
C                    MAXWELLIAN COMPONENT
      CALL MAXWEL(E)
      E=E*TI
      CALL TROPIC
      S=SQRT(E/A)*1.3841E+06
      SX=S*COSP*SINT
      SY=S*SINP*SINT
      SZ=S*COST
C                    ADD FLOW VELOCITY
      R = SQRT((Q*TE+TI)/A)*0.97872E+6 * DRIFTV(IREG3D)
      SX = SX + DRIFTC(IREG3D,1)*R
      SY = SY + DRIFTC(IREG3D,2)*R
      SZ = SZ + DRIFTC(IREG3D,3)*R
      S2 = SX*SX+SY*SY+SZ*SZ
      E = A*S2*5.21993E-13
      S = SQRT(S2)
      SX = SX/S
      SY = SY/S
      SZ = SZ/S
      COST = SZ
      IF(ABS(COST).GT.0.999) COST=SIGN(0.999,COST)
      SINT = SQRT(1.0-COST*COST)
      TANT=SINT/COST
      COSP = SX/SINT
      SINP = SY/SINT
C
      WBORN(NUTRAL)=WBORN(NUTRAL)+W
      HISTOR(NUTRAL)=HISTOR(NUTRAL)+1.0
      SPIN(NUTRAL)=SPIN(NUTRAL)+W
      ISSOU=1
C     ?
      GOTO 95
C
C                       RECYCLING SOURCE
C                       ================
    9 CONTINUE
CT    WRITE(IUERR,*)'RECYCLING SOURCE, ISTIMP',ISTIMP
      ITSOU=1
      IF(I3D.EQ.0) GO TO 10
C
C     CHOOSE BETWEEN SEGMENT AND SURFACE
C     ----------------------------------
      C=RANF()
      IF(C.GT.WSOUR1) GO TO 60
C
C     SELECT SEGMENT (SOURCE ALONG SEGMENTS IN X,Y)
C     ---------------------------------------------
   10 CONTINUE
      ISEGS=1
      IF(NSEGS.EQ.1) GO TO 50
      C=RANF()
      IF(ISTIMP.NE.0) GO TO 45
COLD  IF(ISTHEL.EQ.1) GO TO 30
C                       SELECT SEGMENT FROM FUEL/HELIUM SOURCE
      DO 20 L=1,NSEGS
      ISEGS=L
      IF(C.LE.WSOSEG(L,NUTRAL)) GO TO 50
   20 CONTINUE
      GO TO 50
COLD                    SELECT SEGMENT FROM HELIUM SOURCE
CO 30 DO 40 L=1,NSEGS
COLD  ISEGS=L
COLD  IF(C.LE.WSOSEG(L,INDHEL)) GO TO 50
CO 40 CONTINUE
COLD  GO TO 50
C                       SELECT SEGMENT FROM IMPURITY SOURCE
   45 DO 46 L=1,NSEGS
      ISEGS=L
      IF(C.LE.WSOIMP(L,ISTIMP)) GO TO 47
   46 CONTINUE
      WRITE(IUERR,*) '**** ERROR: WSOIMP ISTIMP',ISTIMP
      CALL EXITN(1)
   47 Q=QIMP(ISEGS,ISTIMP)
CW    WRITE(IUERR,*) ' WSOIMP ISTIMP,ISEGS,Q,PUFFRA',
CW   & ISTIMP,ISEGS,Q,PUFFRA(ISEGS,ISTIMP)
C                       SOURCE LAYER (MAY BE DIFFERENT FROM 3D SLICES)
   50 LAYER=LAYSEG(ISEGS)
      ISSOU=ISEGS
C            ISSOU IS AN INDEX FOR SCORING FIRST ENTRIES
      GO TO 90
C
C     SELECT SURFACE (SOURCE UPON SURFACES IN X,Y)
C     --------------------------------------------
   60 CONTINUE
      IF(ISTIMP.NE.0) THEN
        WRITE(IUERR,*) ' **** ERROR: SURFACE IMPURITY SOURCE'
        CALL EXITN(1)
      ENDIF
C                      CHOOSES INDEX OF X,Y SOURCE REGION
C                      (NOT IREG, BUT ITS ORDINAL KSOUXY AMONG THEM)
      C=RANF()
      KSOUXY=1
      IF(NSOUXY.EQ.1) GO TO 80
      C=RANF()
      DO 70 I=1,NSOUXY
      KSOUXY=I
      IF(C.LE.WSOUXY(I)) GO TO 80
   70 CONTINUE
   80 CONTINUE
      ISSOU=NSEGS+KSOUXY
C            ISSOU IS AN INDEX FOR SCORING FIRST ENTRIES
      LAYER=0
C
   90 CONTINUE
      ITSEG=0
      IF(ISEGS.GT.0) ITSEG=ITYSEG(ISEGS)
C     SELECT ENERGY,POINT AND DIRECTION
C     ---------------------------------
      CALL HOW(ISEGS,ITSEG,LAYER,KSOUXY,IMPUR,Q,0,EBRN,IR3BRN)
CCC
   95 IF(NCHAN.EQ.0) GO TO 110
C                   DEFINE THE STARTING CHANNEL 'ISCHAN' TO SCORE IN
C                   'ECHBEM' THE KIN.ENERGY DEPOSITED BY LIGHT NEUTRALS
C                   BEFORE EMIGRATION FROM THE NATIVE CHANNEL
C          OMISSIS (ISCHAN=0) 4 FEB 88.  ELIMINARE ISCHAN IN FUTURO
C          ELIMINARE ISCHAN (E MNTARG?) IN FUTURO
      ISCHAN=0
      IF(.TRUE.) GOTO 110
      DO 100 I=1,NCHAN
      IF(ICHTAR(I).EQ.0)     GO TO 100
      IF(ICHTAR(I).NE.ISSOU) GO TO 100
      ISCHAN=I
      GO TO 110
  100 CONTINUE
C
  110 RETURN
      END
C.......................................................................
C.......................................................................
      SUBROUTINE WHICH(NUTRAL,W)
C
C     RETURNS THE SOURCE NEUTRAL INDEX AND ITS WEIGHT
C
C----------------------------------(SEE SYMBOLS MEANING IN S.R. INPUT)
      INCLUDE 'pnimb'
      PARAMETER (MRG=MRGX ,MZN=MRG-2 ,MCH=41 ,MCC=MCCX, MWAC=13 )
      PARAMETER (MBS=MBSX ,MSD=MBS   ,MSC=2 )
      PARAMETER (MIO=3    ,MCP=6)
      PARAMETER (MEG=5    ,MIXS=10   ,MLEAK=9)
C---------------------------------------------------
      COMMON/COMPOS/NION,NCOM,LIGHTW,RNLITE,EWLITE,
     * SYMB(MIO),PERC(MIO),DENSE(MRG),DENSI(MRG,MIO),EATMD,EATMR,
     * TEMPE(MRG),TEMPI(MRG),IBOUND(MRG),ALBEDO(MRG),LIWALL(MRG),COEFMX
     *,IEMIS(MRG),BEXPT(MRG),WEXPT(MRG,3),SHP,DRIFTV(MRG),DRIFTC(MRG,3)
     *,ISTARG(MRG),CHARGE(MCP),PROREQ(4),ALBATO(MRG),ALBENE(MRG),INDHEL
     *,NTSPUT,PSEMIP(MRG,2),IRTRIM(MCP,MCP),NFTRIM,LPVOID,DCUTCX,TCUTCX
     *,ICUTCX,INDEF,IYCHEM,EYCHEM,AYCHEM,NLEAK,XLEAK(4,MLEAK),ILEAK(MRG)
     *,NZREC,NUTRLZ(MCP),MIMP,IGOPT,PRORCL(MIO),UNDEF
     *,NZYIZ,CZYIZ(MCP),AYIZ(MCP),BYIZ(MCP),EYIZ(MCP),IYIZ(MCP),ALFCH7
     *,PARDIR(MRG,3),RECMAT(MIO,MIO,MRG)
C
      PARAMETER (NDEBUG=17,MSPLIT=500,NBANK=25)
      PARAMETER (MDEBWR=30,MDEBPT=200)
      COMMON/CHISTO/KOSE,KOST,NHIST,NST,FNST,NSG,FNSG,
     * INIZ,ICORR,KINDPR,NEDIT,ISTHEL,IHOR,
     * DECIMA,PLIFE,WTHRES,TAGLIO,WCUT,NGEV,EGEV(MEG),TCUT,
     * IDEBIN,IDLOOP,IDEBUG,KODDBG,IHDBG,ICDBG,DEBUG(NDEBUG),
     * NDEBWR,NDEBPT,IDBHST(MDEBWR),
     * NSPLIT,MAXSON,MAXSOH,BANK(MSPLIT,NBANK),WPESO(MRG)
     *,IREAD,IWRITE,IBEAM,IONTOW,IDMC,IDMCO
C
C
      NUTRAL=MOD(NHIST,NION)
      IF(NUTRAL.EQ.0) NUTRAL=NION
      W=PERC(NUTRAL)*FLOAT(NION)
      RETURN
      END
C.......................................................................
C.......................................................................
      SUBROUTINE HOW(ISEGS,ITSEG,LAYER,KSOUXY,
     *               IMPUR,Q,ISCRED,EBRN,IR3BRN)
C
C     GIVEN THE SEGMENT OR THE SURFACE INDEX OF THE SOURCE,
C           SELECTS POINT,DIRECTION AND ENERGY
C     ISEGS = SOURCE TARGET ALONG SEGMENTS IN XY-PLANE
C             IN THE LAYER GIVEN BY "LAYER"
C     KSOUXY= ORDINAL INDEX OF SURFACE SOURCE 2D REGION
C     IMPUR = 0 LIGHT IONS/NEUTRALS (H, HE)
C           = 1 IMPURITIES BROUGHT BACK TO TARGET
C           = 2 IMPURITIES RECYCLED
C     Q     = EFFECTIVE ION CHARGE
C     ISCRED= 0/1  SCORE/DONOT SCORE REDEPOSITION
C     IR3BRN= BIRTH WALL REGION
C
C     NUTRAL=ION/NEUTRAL EXTERNAL INDEX
C     W=STATISTICAL WEIGHT
C     A=MASS OF THE SINGLE ATOM (OF THE TRAVELLING MOLECULE)
C     MOL=NUMBER OF ATOMS OF THE MOLECULE
C
C----------------------------------(SEE SYMBOLS MEANING IN S.R. INPUT)
      INCLUDE 'pnimb'
      PARAMETER (MRG=MRGX ,MZN=MRG-2 ,MCH=41 ,MCC=MCCX, MWAC=13 )
      PARAMETER (MBS=MBSX ,MSD=MBS   ,MSC=2 )
      PARAMETER (MIO=3    ,MCP=6)
      PARAMETER (MEG=5    ,MIXS=10   ,MLEAK=9)
C---------------------------------------------------
C
      COMMON/IOFILE/IN,IOUT,IUERR,IARK,IPUNCH,IGMT,ITRMT,ITAPIO(2)
C
C
      PARAMETER ( NWCOMB=NWCOMX )
      COMMON/COMBIN/MASTER(NWCOMB)
      DIMENSION ASTER(NWCOMB)
      EQUIVALENCE(MASTER(1),ASTER(1))
C
      COMMON/CGEOM2/LOCREG,NUMBOD,IROR,LR1,LR2,LDATA,NUMR,LBASE,LTMA
     *             ,LOCBOD,IDBG,KLOOP,PINF,LKOR,NOA,IST,NOREG,LVOL,LAREA
     *             ,LNUMR,LAIRC,LVOLTR,LLASTG,IRWGMT,NRTRU
      REAL*8 PINF
C
      PARAMETER (NDEBUG=17,MSPLIT=500,NBANK=25)
      PARAMETER (MDEBWR=30,MDEBPT=200)
      COMMON/CHISTO/KOSE,KOST,NHIST,NST,FNST,NSG,FNSG,
     * INIZ,ICORR,KINDPR,NEDIT,ISTHEL,IHOR,
     * DECIMA,PLIFE,WTHRES,TAGLIO,WCUT,NGEV,EGEV(MEG),TCUT,
     * IDEBIN,IDLOOP,IDEBUG,KODDBG,IHDBG,ICDBG,DEBUG(NDEBUG),
     * NDEBWR,NDEBPT,IDBHST(MDEBWR),
     * NSPLIT,MAXSON,MAXSOH,BANK(MSPLIT,NBANK),WPESO(MRG)
     *,IREAD,IWRITE,IBEAM,IONTOW,IDMC,IDMCO
C
      PARAMETER (MZSOUR=13, MSOUXY=14)
      COMMON/SOURCE/
     * HHESRC,SRECYC,SRECOM,WSOUR1,NSEGS,SOTEMP(MBS),STMOUT,TIMINF,
     * WSOSEG(MBS,MIO),NSEGSO,KORSEG(MBS),LAYSEG(MBS),YTMOUT,
     * X1SOUR(MBS),Y1SOUR(MBS),X2SOUR(MBS),Y2SOUR(MBS),ZSOURC(MCP),
     * FISOU(MBS),SFISOU(MBS),CFISOU(MBS),WDS(MBS,5),IZOENT,
     * NZSOUR,SREGZ(MZSOUR),DREGZ(MZSOUR),WSOIMP(MBS,MCP),
     * NSOUXY,TSOUXY(MSOUXY),WSOUXY(MSOUXY),ISOUXY(MSOUXY),
     * CSOUXY(8,MSOUXY),HSOUXY(MSOUXY),DSOUXY(MSOUXY),ITYSEG(MBS),
     * ICHTAR(MBS),ISCHAN,SOUNEW(MBS),QIMP(MBS,MCP),PUFIMP(MCP),
     * WREG(1),WSEF(1),KOISEF(1),KOSDE(1),NTARG,KO2DIR(MRG),KO3D2D(MRG)
     *,IRECO,IMOMSO,NOZPMP,MODEZR,SNVOL(MRG*MIO),SNV(MRG,MIO)
     *,PUFFRA(MBS,MCP),PUFFXY(MSOUXY),TPUFFH,TPUFFZ
C
      PARAMETER (MILLE=10000)
      COMMON/COMUNE/BUFFER(MILLE),IBUFER(MILLE)
C
      COMMON/CGEOMT/KREG,KREGM1,IR3DST,IR2DST,AREAD(MRG),
     * KONDC,KONDZ,I3D,KREG3D,LREG3D,LQUOTA,LDZETA,KSXY3D,NZETA
C
      COMMON/STOGEO/IR,IREG,IREG3D,ISENT,LEAVES,XIN,YIN,ZIN,
     * COSP,SINP,COST,SINT,TANT,COSKT,DIST,PILX,IRZ,IREGZ,IREG3Z,
     * IZIN,IZ,ISSOU,X,Y,Z
      REAL*8 X,Y,Z
C
      COMMON/COMPOS/NION,NCOM,LIGHTW,RNLITE,EWLITE,
     * SYMB(MIO),PERC(MIO),DENSE(MRG),DENSI(MRG,MIO),EATMD,EATMR,
     * TEMPE(MRG),TEMPI(MRG),IBOUND(MRG),ALBEDO(MRG),LIWALL(MRG),COEFMX
     *,IEMIS(MRG),BEXPT(MRG),WEXPT(MRG,3),SHP,DRIFTV(MRG),DRIFTC(MRG,3)
     *,ISTARG(MRG),CHARGE(MCP),PROREQ(4),ALBATO(MRG),ALBENE(MRG),INDHEL
     *,NTSPUT,PSEMIP(MRG,2),IRTRIM(MCP,MCP),NFTRIM,LPVOID,DCUTCX,TCUTCX
     *,ICUTCX,INDEF,IYCHEM,EYCHEM,AYCHEM,NLEAK,XLEAK(4,MLEAK),ILEAK(MRG)
     *,NZREC,NUTRLZ(MCP),MIMP,IGOPT,PRORCL(MIO),UNDEF
     *,NZYIZ,CZYIZ(MCP),AYIZ(MCP),BYIZ(MCP),EYIZ(MCP),IYIZ(MCP),ALFCH7
     *,PARDIR(MRG,3),RECMAT(MIO,MIO,MRG)
C
      PARAMETER (NCT=24,MKES=4)
      COMMON/CTAB0/TABLE(NCT,11),IZLOZ(0:100)
      COMMON/CTABLE/SPUTAB(NCT,NCT)
     *,LABINT(MCP),LABEXT(NCT),IXS(MIXS),ITRIM
     *,NIONPM,MCX,MOLEC(MCP),IATOM(MCP),EXTSYM(MCP),QESP(NCT,NCT)
     *,EB(NCT),QCOEF(NCT),TLOTZ(NCT,26),CXRMAX(5,MRG),ESRMAX(MKES,MRG)
     *,TBELL(NCT,26),ITAGS(NCT,NCT,2)
C
      COMMON/PHYSIC/WSTART,WGAME,W,NUTRAL,MOL,A,E,CLOCK,IBIN,IBRNPL,
     * SIGT,SIGIT,SIGCXT,SIGEST,SIGST,SIGSTS,IDMOL,DISH2S(MRG),
     * ELECTR(MRG,MCP),SIGE,SIGI(MIO),SIGCX(MIO),SIGEL(MIO),
     * DISH2(MRG),DIOH2(MRG)
     *,SVI,SVCX(MIO)
C
      PARAMETER (MAXZET=12, MH=14, MZADJ=MZN*6, MEIBOR=MZADJ*2)
      PARAMETER (MMACRO=30+1)
      COMMON/SCORE/NAZONE,NDUM,NZONE,IZONA(MRG),VOLZ(MZN),IBOUNZ(MZN),
     * ELAST(MZN,MCP),FLUXZ(MZN,MAXZET),ESCAPE(MZN,MCP),REDP(MZN,MCP),
     * ABSOR(MZN,MCP),ELOST(MCP,MZN),WACOL(MCP,MZN,MWAC),
     * QF(MCH,MCC,8),QI(MCH,MCC,8),AF(MCH,MCC,8),AI(MCH,MCC,8),SAG(MCP),
     * FLUX(MZN,MCP),ENNE(MZN,MCP),EAVER(MZN,MCP,2),ENFLUX(MCP,MZN,MEG),
     * CEXED(MZN,MCP),DISSOC(MZN,MCP),TRAMAT(1,1,1),WBORN(MCP),
     * HISTOR(MCP),COLS,FUGA,ESCEN(MZN,MCP),REDFUE(MSD,MSC,MCP),
     * ZENTRY(MCP,MCH),WNP,WRS,COLW,TRUNC,NLATS,IS,IDELAT(MSD,3),
     * SCALAT(MSD,MSC),SPFUEL(MSD,MSC,MCP),QDEPL(MSD,MSC),SPIN(MCP),
     * ERECYC(MCP,MZN,2),PRECYC(MCP,MZN,3),NCHAN,NZCHAN(MCC),ICHAN(MZN),
     * MZCHAN,IZCHAN(MCH,MCC),SPAREA(MSD,MSC),DENSEZ(MZN),TEMPEZ(MZN),
     * YEARFR,TARLHY(MSD),TARLHE(MSD),REDHEL(MSD,MSC,MCP),PIONW,PINEFW,
     * TLONWI,PIONRE,PMOLR1,PMOLR2,AALB,QALB,AHENR,QHENR,AHETP,QHETP
     *,SPUHEL(MSD,MSC,MCP),ECHBEM(1,1),ELOBEM(1,1),VELOC(MZN,MCP,3)
     *,WPRSP,EPRSP,WTASP,ETASP,SIGMAN(MZN,6),WNBR(MZADJ,2)
     *,NEIBOR(MEIBOR),LOCNBR(MZN),NMACRO,IMACRO(MZN),COSNOR
     *,ISPOFF(MMACRO-1),IPVOID,TSUBD,ITAU,MSPOFF,YNOSP
C
      REAL*8 FLUXZ,ESCAPE,ELAST,REDP,ABSOR,WACOL,SPIN,
     * FLUX,ENNE,EAVER,ENFLUX,CEXED,WNBR,
     * DISSOC,TRAMAT,SAG,WBORN,HISTOR,COLS,FUGA,ESCEN,WNP,WRS,COLW,TRUNC
     *,SPFUEL,ERECYC,PRECYC,REDFUE,QDEPL,ZENTRY,SPUHEL,ECHBEM,ELOST
     *,ELOBEM,REDHEL,TARLHY,TARLHE,VELOC
     *,WPRSP,EPRSP,WTASP,ETASP,SIGMAN
C
      DIMENSION XCG(2)
      REAL*8 XCG
      DIMENSION XPOL(4),YPOL(4)
C
      ISPU=1
      IR3BRN=-1
      EBRN=-1.0E30
      IVOID=0
      IPUFF=0
C
      IF(ISEGS.GT.0) GO TO 60
C
C     SOURCE POINT IN PLASMA NEAR SURFACE KSOUXY
C     ------------------------------------------
      IF(KSOUXY.GT.0) GO TO 20
      WRITE(IUERR, 10 )
   10 FORMAT(/' ***** ERROR: UNDEFINED SOURCE SURFACE')
      CALL EXITN(1)
   20 IREG=ISOUXY(KSOUXY)
C     REJECTION IN THE (EMBEDDING) 4-SIDED-POLYGON
      XPOL(1)=CSOUXY(1,KSOUXY)
      YPOL(1)=CSOUXY(2,KSOUXY)
      XPOL(2)=CSOUXY(3,KSOUXY)
      YPOL(2)=CSOUXY(4,KSOUXY)
      XPOL(3)=CSOUXY(5,KSOUXY)
      YPOL(3)=CSOUXY(6,KSOUXY)
      XPOL(4)=CSOUXY(7,KSOUXY)
      YPOL(4)=CSOUXY(8,KSOUXY)
      NLANCI=0
   30 NLANCI=NLANCI+1
      IF(NLANCI.LT.10 000) GO TO 50
      WRITE(IUERR, 40 ) IR
   40 FORMAT(' ***** TOO MANY TOSSES FOR SOURCE REGION',I5)
      CALL EXITN(1)
   50 CALL POLIG(XPOL,YPOL,4,X,Y)
      XCG(1)=X
      XCG(2)=Y
      CALL GETIR(XCG,IR,0)
      IREGG=MASTER(LKOR+IR)
      IF(IREGG.NE.IREG) GO TO 30
C                      HEIGHT (POINT ASSUMED TO BE IN PLASMA
C                              BY JUDICIOUS ASSIGNEMENT OF H)
      Z=HSOUXY(KSOUXY)
      CALL FINDV(Z,ASTER(LQUOTA+1),NZETA,IZ)
      IREG3D=MASTER(KSXY3D+(IZ-1)*KREG+IREG)
C                      W(I): DIRECTION COSINES OF THE ORIENTED NORMAL
C                      OF THE SOURCE SURFACE TOWARDS NEUTRALIZER PLATE
C                      W(1)=COSP=0
C                      W(2)=SINP=0
C                      W(3)=DSOUXY(KSOUXY)= +1. OR -1.
      COSPN=0.
      SINPN=1.
      COSTN=DSOUXY(KSOUXY)
      SINTN=0.0
      GO TO 150
C
C     SOURCE POINT IN PLASMA NEAR SEGMENT ISEGS
C     -----------------------------------------
   60 IF(I3D.EQ.0) GO TO 90
C                                SELECT Z
C           IF LAYER IS UNDEFINED FOR IMPURITIES, Z IS UNCHANGED
      IF(IMPUR.NE.0 .AND. LAYER.LE.0) GO TO 90
      IF(LAYER.GT.0) GO TO 80
      WRITE(IUERR, 70 )
   70 FORMAT(/' ***** ERROR: UNDEFINED SOURCE LAYER')
      CALL EXITN(1)
   80 C=RANF()
      Z=SREGZ(LAYER)-C*DREGZ(LAYER)
      CALL FINDV(Z,ASTER(LQUOTA+1),NZETA,IZ)
C
C                                SELECT POINT ON ISEGS
   90 CONTINUE
      NLANCI=0
C
  100 C=RANF()
      IF(ITSEG.EQ.0) THEN
        IF(X1SOUR(ISEGS).NE.X2SOUR(ISEGS)) GO TO 110
        X=X1SOUR(ISEGS)
        Y=Y1SOUR(ISEGS)+C*(Y2SOUR(ISEGS)-Y1SOUR(ISEGS))
        GO TO 120
  110   X=X1SOUR(ISEGS)+C*(X2SOUR(ISEGS)-X1SOUR(ISEGS))
        Y=Y2SOUR(ISEGS)+(X-X2SOUR(ISEGS))*(Y1SOUR(ISEGS)-Y2SOUR(ISEGS))
     *   /(X1SOUR(ISEGS)-X2SOUR(ISEGS))
C                      W(I): DIRECTION COSINES OF THE ORIENTED NORMAL
C                      OF THE SOURCE SURFACE TOWARDS NEUTRALIZER PLATE
C                      SINCE IN THIS CASE W(3)=COST=0.0, THEN
C                            W(1)=COSP=+SFISOU(ISEGS)
C                            W(2)=SINP=-CFISOU(ISEGS)
  120   COSPN=+SFISOU(ISEGS)
        SINPN=-CFISOU(ISEGS)
        COSTN=0.0
        SINTN=1.0
        TANTN=999.0
      ELSE
        WRITE(IUERR,*) ' S.R. HOW: ITSEG=',ITSEG
        CALL EXITN(1)
      ENDIF
C                      PUSH SURFACE SOURCE POINT INTO PLASMA
      DX=-COSPN*0.01
      DY=-SINPN*0.01
      DO 130 I=1,11
      X=X+DX
      Y=Y+DY
C                      REGION INDEX OF THE POINT
      XCG(1)=X
      XCG(2)=Y
      CALL GETIR(XCG,IR,0)
      IREG=MASTER(LKOR+IR)
      IREG3D=IREG
      IF(I3D.NE.0) IREG3D=MASTER(KSXY3D+(IZ-1)*KREG+IREG)
      IF(IBOUND(IREG3D).EQ.0)GO TO 140
  130 CONTINUE
      NLANCI=NLANCI+1
      IF(NLANCI.LT.5) GO TO 100
      GO TO 340
C
  140 IF(IMPUR.EQ.1) GO TO 150
C                      SOURCE OF PLASMA (LIGHT) IONS
      IF(WDS(ISEGS,5).EQ.0.0) GO TO 150
C                       EXTERNAL MONOCHROMATIC SOURCE
      E=SOTEMP(ISEGS)
      COSP=WDS(ISEGS,1)
      SINP=WDS(ISEGS,2)
      COST=WDS(ISEGS,3)
      SINT=WDS(ISEGS,4)
      IF(COST.NE.0.0) THEN
        TANT=SINT/COST
      ELSE
        TANT=SINT/SIGN(0.001,COST)
      ENDIF
      WBORN(NUTRAL)=WBORN(NUTRAL)+W
      HISTOR(NUTRAL)=HISTOR(NUTRAL)+1.0
      SPIN(NUTRAL)=SPIN(NUTRAL)+W
      GO TO 360
C
C     PART COMMON TO SEGMENTS AND SURFACES
C     ------------------------------------
C                      DIRECTION NORMAL TO WALL (DUE TO SHEATH FIELD)
  150 COSP=COSPN
      SINP=SINPN
      COST=COSTN
      SINT=SINTN
      TANT=TANTN
C                      MOVE PARTICLE TO WALL
  160 DIST=1.E+30
      IRZ=IR
      IREGZ=IREG
      IREG3Z=IREG3D
      ISENT=0
      CALL PILS(BUFFER(1),MILLE,ITRAN)
      IF(IR.GT.0 .AND. IR.LE.NRTRU) GO TO 180
      WRITE(IUERR, 170 ) IR,X,Y,Z
  170 FORMAT(' SURFACE SOURCE NEUTRAL LOST, SUBR.=',I5,' AT',1P,3E10.3)
      IR=-2
      RETURN
  180 IF(IBOUND(IREG3D)) 190 , 160 , 210
  190 WRITE(IUERR, 200 ) IREG3D
  200 FORMAT(' SURFACE SOURCE IN THE ESCAPE REGION',I5)
      CALL EXITN(1)
  210 CONTINUE
      IF(DENSE(IREG3Z).LE.0.0) THEN
        IVOID=1
        TVOID=TEMPE(IREG3Z)
C       WRITE(IUERR,*) ' HOW IREG3Z =',IREG3Z,IMACRO(IREG3Z),
C    &                   DENSE(IREG3Z),TEMPE(IREG3Z),IVOID
      ENDIF
C
      IF(IMPUR.EQ.0) GO TO 220
C                   IMPURITY RECYCLING (MAY 1987, MIKE'S REFORMULATION)
C                   ---------------------------------------------------
C                   WHEREVER PRODUCED, SIMPLY ADD SHEATH*Q ONLY
C     (NOT ONLY AVOID DISTINCTIONS, BUT ALSO OMIT MAXW. AND SOUND VEL.)
      IF(IMPUR.EQ.1) THEN
        E=E
      ELSE IF(IMPUR.EQ.2) THEN
        E=E
      ELSE
        WRITE(IUERR,*) ' **** S.R. HOW. ILLEGAL IMPUR=',IMPUR
        CALL EXITN(1)
      ENDIF
      GO TO 290
CCC          IMPURITY RECYCLING (OLD FORMULATION,AS DESCRIBED IN REPORT)
CCC                (NUTRAL) FROM TARGET (I.E. SPUTTERED INTO PLASMA
CCC                                      AND RECYCLED IMMEDIATELY)
CCC   E=E
CCC   IF(IBRNPL.EQ.1) GO TO 270
CCC                   N.B. 270=ADD SHEATH POTENTIAL
CCC                (NUTRAL) FROM OTHER WALLS (I.E. SPUTTERED INTO VOID
CCC                                           AND THERMALISED )
CCC   T=TEMPI(IREG3Z)
CCC   IF(T.LE.0.0) GO TO 230
CCC   E=2.0*T
CCC   GO TO 260
CCC   N.B. 260=ADD ENERGY CORRESPONDING TO SOUND VELOCITY
C                        LIGHT ION SOURCE ENERGY
CCC PREVIOSLY X WAS SAMPLED FROM X*EXP(-X) WITH X=E/T I.E. FROM MAX.FLUX
CC220 CALL XEXP(E)
C         HAVING ELIMINATED VECTORIAL COMPOSITION (FOR EN. CONSERVATION)
C                 E IS SAMPLED NOW FROM THE MAXWELLIAN SQRT(X)*EXP(-X)
  220 CALL SQXEXP(E)
C            ENHANCE RANDOM COMPONENT: MULTIPLY BY (5/2)/(3/2)=1.6666
C               (AND DIMINISH SHP FROM 3.5 TO 2.5 (JUNE 1987)
C                 SEE DEFINITION OF COEFMX IN S.R. INPUT
      E=E*COEFMX
C                           ENERGY IN EV
      IF(SHP.LT.0.0) THEN
C                        SHP=.LT.0: GIVEN TEMPERATURE
         IF(ISEGS.GT.0.0) THEN
           T=SOTEMP(ISEGS)
         ELSE
           T=TSOUXY(KSOUXY)
         ENDIF
         E=1.5*T
         TLOCAL=T
         GOTO 295
      END IF
      T=TEMPI(IREG3Z)
      IF(T.GT.0.0) GO TO 240
      WRITE(IUERR, 230 ) IREG3Z
  230 FORMAT('0***** ERROR: SOURCE IN PLASMA REGION',I4,' AT 0K TEMPERAT
     *URE')
      IF(.TRUE.) GO TO 240
      IR=-4
      GO TO 360
  240 E=E*T
C                      ISOTROPIC DIRECTION (OMITTED 9-APRIL-1987)
C                      (SAVE SURFACE NORMAL)
      CONTINUE
CCC   COSPS=COSP
CCC   SINPS=SINP
CCC   COSTS=COST
CCC   SINTS=SINT
CCC   CALL TROPIC
CCC                    ADD FLOW SPEED
CCC   S=SQRT(E/A)*1.3841E+06
CCC   R=SQRT( (Q*TEMPE(IREG3Z)+TEMPI(IREG3Z))/A)*1.0E+06
CCC   R=R*DRIFTV(IREG3Z)
CCC   SX=S*COSP*SINT+DRIFTC(IREG3Z,1)*R
CCC   SY=S*SINP*SINT+DRIFTC(IREG3Z,2)*R
CCC   SZ=S*COST+DRIFTC(IREG3Z,3)*R
CCC   S2=SX*SX+SY*SY+SZ*SZ
CCC   E=S2*A*0.52197E-12
CCC                    RESET DIRECTION NORMAL TO WALL
CCC                    (NON TRAMITE COSPN ETC, CHE POTREBBERO
CCC                     ESSERE STATI ALTERATI DA RIFLESSIONI)
CCC   COSP=COSPS
CCC   SINP=SINPS
CCC   COST=COSTS
CCC   SINT=SINTS
CCC   GO TO 270
C              ADD FLOW (SOUND) ENERGY =0.5*M*(Q*TE+TI)/M (9 APRIL 1987)
C         (FOR (Q*TE+TI)/M SEE CLM REP. 668 PAG.11, ALREADY MENTIONED)
C    HARRISON,10 APR.87, SUGGESTED:ASSUME HELIUM WITH SAME SPEED AS FUEL
C                               (BECAUSE HE IS LIKE A CORK IN A CURRENT)
C                        AND WHEN D,T ARE PRESENT ASSUME VELOCITY OF DT
C                        (THEREFORE  FOR FUEL Q=1
C                        AND TAKE INTO ACCOUNT MASS RATIOS)
      AVSOU2=0.0
C        COMPUTE THE AVERAGE SQUARE SOUND VELOCITY OF THE FUEL IONS
C        (THIS VELOCITY IS ASSUMED ALSO BY HEAVY IMPURITIES)
C
C                ONLY ONE ION PRESENT
      IF(NION.NE.1) GO TO 250
C                    CASE 1) ONLY ONE ION PRESENT: H+
      IF(LABINT(1).EQ.2)
     *AVSOU2=(1.0*TEMPE(IREG3Z)+TEMPI(IREG3Z))/1.0
C                    CASE 2) ONLY ONE ION PRESENT: D+
      IF(LABINT(1).EQ.3)
     *AVSOU2=(1.0*TEMPE(IREG3Z)+TEMPI(IREG3Z))/2.0
C                    CASE 3) ONLY ONE ION PRESENT: DT+
      IF(LABINT(1).EQ.4)
     *AVSOU2=(1.0*TEMPE(IREG3Z)+TEMPI(IREG3Z))/2.5
C                    CASE 4) ONLY ONE ION PRESENT: T+
      IF(LABINT(1).EQ.5)
     *AVSOU2=(1.0*TEMPE(IREG3Z)+TEMPI(IREG3Z))/3.0
C                    CASE 5) ONLY ONE ION PRESENT, HE++
      IF(LABINT(1).EQ.7)
     *AVSOU2=(2.0*TEMPE(IREG3Z)+TEMPI(IREG3Z))/4.0
C
C                TWO IONS PRESENT
  250 IF(NION.NE.2) GO TO 260
C                    CASE 6) TWO IONS PRESENT: H+ AND D+ (50% EACH)
      IF(LABINT(1).EQ.2.AND.LABINT(2).EQ.3)
     *AVSOU2=(1.0*TEMPE(IREG3Z)+TEMPI(IREG3Z))/1.5
C                    CASE 7) TWO IONS PRESENT: D+ AND T+ (50% EACH)
      IF(LABINT(1).EQ.3.AND.LABINT(2).EQ.5)
     *AVSOU2=(1.0*TEMPE(IREG3Z)+TEMPI(IREG3Z))/2.5
C                    CASE 8) TWO IONS PRESENT: DT+ AND HE++
      IF(LABINT(1).EQ.4.AND.LABINT(2).EQ.7)
     *AVSOU2=(1.0*TEMPE(IREG3Z)+TEMPI(IREG3Z))/2.5
C
C                THREE IONS PRESENT
C                    CASE 9) THREE IONS PRESENT: D+, T+, HE++
  260 IF(NION.EQ.3.AND.LABINT(1).EQ.3.AND.LABINT(2).EQ.5)
     *AVSOU2=(1.0*TEMPE(IREG3Z)+TEMPI(IREG3Z))/2.5
C                CHECK ABOVE CASES
      IF(AVSOU2.NE.0.0) GO TO 280
C                A CASE NOT FORESEEN: STOP FOR ERROR
      WRITE(IUERR, 270 ) NION,INDHEL,ISTHEL,KOSE,A,TEMPE(IREG3Z)
     *  ,TEMPI(IREG3Z)
  270 FORMAT(/' ERROR MESSAGE: UNABLE TO TAKE INTO ACCOUNT SOUND VELOCIT
     *Y.'/' PLASMA COMPONENTS NOT FORESEEN OR NOT IN CORRECT ORDER: REVI
     *SE S.R. HOW'/
     *' NION=',I2,' INDHEL=',I2,' ISTHEL=',I2/
     *' HIST=',I6,' A=',1P,E12.5,' TEMPE=',E12.5,' TEMPI=',E12.5)
      CALL EXITN(1)
C
C                ADD ENERGY CORRESP. TO AVERAGE SOUND VELOCITY OF FUEL
C
  280 ET=E
      E=ET+0.5*A*AVSOU2
C
  290 IF(ISEGS.GT.0) THEN
        TLOCAL=SOTEMP(ISEGS)
        IF(NUTRAL.LE.NION) THEN
          PUFR = PUFFRA(ISEGS,NUTRAL)
        ELSE IF(NUTRAL.GT.NIONPM .AND. NUTRAL.LE.NCOM) THEN
C         CON PUFF, IGNORARE RECMAT(H) E STICK(Z)
          PUFR = PUFFRA(ISEGS,NUTRAL)
CW        WRITE(IUERR,*) ' PUFFRA FOR NUTRAL',NUTRAL,' IMPUR=',IMPUR,
CW   &      ' ISEGS=',ISEGS,PUFR
        ELSE
          WRITE(IUERR,*) ' S.R. HOW. ILLEGAL PUFFRA'
          CALL EXITN(1)
        ENDIF
      ELSE
        TLOCAL=TSOUXY(KSOUXY)
        IF(NUTRAL.LE.NION) THEN
          PUFR = PUFFXY(KSOUXY)
        ELSE
          PUFR = 0.0
        ENDIF
      ENDIF
      IF(IVOID.NE.0) THEN
C       ION COMING FROM VOID.
CW      WRITE(IUERR,*) ' IVOID=<>0. CHANGE E,TLOCAL',E,TLOCAL,NUTRAL
        E=1.5*TVOID
        TLOCAL=TVOID
      ENDIF
      IF(IMPUR.EQ.0 .OR. IMPUR.EQ.2) THEN
        IF(PUFR.LE.0.0) THEN
          TLOCAL=TLOCAL
        ELSE IF(PUFR.GT.0.0 .AND. PUFR.LT.1.0) THEN
          C=RANF()
          IF(C.LE.PUFR) THEN
            IF(IMPUR.EQ.0) THEN
              TLOCAL=-TPUFFH
            ELSE
              TLOCAL=-TPUFFZ
            ENDIF
            ISPU=0
            IPUFF=1
          ELSE
            TLOCAL=TLOCAL
          ENDIF
        ELSE
          IF(IMPUR.EQ.0) THEN
            TLOCAL=-TPUFFH
          ELSE
            TLOCAL=-TPUFFZ
          ENDIF
          ISPU=0
          IPUFF=1
        ENDIF
CW      IF(IMPUR.EQ.2) THEN
CW        WRITE(IUERR,*) ' ISPU,IPUFF,TLOCAL',ISPU,IPUFF,TLOCAL
CW      ENDIF
      ENDIF
      IF(TLOCAL.GE.0.0) THEN
C                      ENERGY FROM RECYCLING.
C                      ADD SHEATH POTENTIAL ENERGY
        IF(Q.GT.0.0) THEN
          E=E+SHP*TLOCAL*Q
        ELSE
          WRITE(IUERR,'(/'' S.R. HOW: Q<=0 FOR ION'',I3,'' AT '',2I3)')
     &    NUTRAL,ISEGS,KSOUXY
          CALL EXITN(1)
        ENDIF
      ELSE
C                      FORCE PRESCRIBED INITIAL ENERGY
        E=-1.5*TLOCAL
        ISPU=0
      ENDIF
C                   SCORE ALWAYS ION ENERGY INITIALLY INCIDENT ON WALLS
  295 CONTINUE
      PIONW=PIONW + W*E
C                      (SOURCE) WALL INTERACTION
      IRWALL=IREG3D
      IR3BRN=IRWALL
      EBRN=E
      NUOLD=NUTRAL
      EOLD=E
      WOLD=W
      IZOFRO=IZONA(IRWALL)
      IF(IZOFRO.LE.0) GO TO 300
      CALL GRU(EOLD,NGEV,EGEV(1),1,IG)
C                      KINETIC ENERGY DEPOSITED IN WALL BY PLASMA IONS:
C                      ------------------------------------------------
C                      E*W PLUS IONIZATION ENERGY (TRAN*W)
C                      --------------------------
C                   NO SCORE FOR HEAVY IMPURITIES
      IF(NUTRAL.GT.NIONPM) GO TO 300
C                   IONIZATION ENERGY OF H ISOTOPES=13.6 EV
      TRAN=0.0
      IF(A.LT.4.0) TRAN=13.6
C                   IONIZATION ENERGY OF HE++=79 EV (HE+=24.6)
C                   (IF HE+ WILL BE LATER CONSIDERED MODIFY ACCORDINGLY)
      IF(A.EQ.4.0) TRAN=79.0
C                   SCORE ALWAYS POWER RELEASED IN WALLS BY
C                   RECOMBINATIONS OF IONS WITH ELECTRONS, IN PIONRE
      PIONRE=PIONRE+WOLD*TRAN
C                   SCORE PLASMA IONS ONLY IF IONTOW=0
      IF(IONTOW.EQ.1) GO TO 300
      ENFLUX(NUOLD,IZOFRO,IG)=ENFLUX(NUOLD,IZOFRO,IG)+WOLD*(EOLD+TRAN)
  300 CONTINUE
C                        (KIN.)ENERGY AND MOMENTUM DEPOSITED IN PLASMA
C                      ARE COMPUTED ONLY FOR NEUTRALS AND NOT FOR IONS
C        OMISSIS
      IF(.TRUE.) GO TO 310
C                        KIN. ENERGY SUBTRACTED FROM PLASMA
      IND=IZONA(IREG3Z)
      ERECYC(NUTRAL,IND,2)=ERECYC(NUTRAL,IND,2)-W*E
C                               MOMENTUM
      S=SQRT(E*A)*2.3151E-18
      PRECYC(NUTRAL,IND,1)=PRECYC(NUTRAL,IND,1)-W*S*COSP*SINT
      PRECYC(NUTRAL,IND,2)=PRECYC(NUTRAL,IND,2)-W*S*SINP*SINT
      PRECYC(NUTRAL,IND,3)=PRECYC(NUTRAL,IND,3)-W*S*COST
  310 CONTINUE
C
      E=E
C       IBIRTH=0,FIRST IMPACT OF ION WITH WALL, OR OF IMP. WITH WALL
C       ------------------------------------------------------------
CC         IBIRTH=0 N.B.IBIRTH UNKNOWN IN THIS S.R.(SEE "CALL STARTN")
C
C     WRITE(IUERR,*) ' PRIMA WALINT E=',E,' TLOCAL=',TLOCAL
C     WRITE(IUERR,*) 'HOW TO WALINT.  NUTRAL=',NUTRAL,' IPUFF=',IPUFF
      CALL WALINT(0,IREAC,0,0,.FALSE.,LLEAK,
     &            NZSPU,IZSPU,WZSPU,NZDEP,IZDEP,WZDEP,ISCRED,ISPU,IPUFF,
     &            COSPOL)
C     WRITE(IUERR,*) '  DOPO WALINT E=',E,' TLOCAL=',TLOCAL
C
C               SCORE SPUTTER./REDEP. FROM ANYWHERE EXCEPT PUMP VOID
C               (HERE, NO POSSIBILITY OF BEING IN PUMP VOID)
      IF(NZSPU.GT.0 .AND. IZSPU.GT.0)
     *WACOL(NZSPU,IZSPU,10)=WACOL(NZSPU,IZSPU,10)+WZSPU
      IF(NZDEP.GT.0 .AND. IZDEP.GT.0)
     *WACOL(NZDEP,IZDEP,11)=WACOL(NZDEP,IZDEP,11)+WZDEP
C
      IF(IR.LT.0) RETURN
C                      FORCE PRESCRIBED INITIAL ENERGY AFTER RECYCLING
C                      AND FORCE H-MOLECULES IF ALLOWED
      IF(NUTRAL.LE.NIONPM .AND. TLOCAL.LT.0.0) THEN
CW      WRITE(IUERR,*) 'S.R. HOW. TLOCAL=',-TLOCAL,' NUTRAL=',NUTRAL,W
        IF(.TRUE.) THEN
        E=-1.5*TLOCAL
        IF(MOL.EQ.1) THEN
          IF(IEMIS(IRWALL).EQ.2 .AND. MOLEC(NUTRAL).NE.0) THEN
            NUTRAL=MOLEC(NUTRAL)
            MOL=2
            A=A*2.0
            W=W*0.5
          ENDIF
        ENDIF
        ELSE
C     OLD (WRONG) MODEL
          E=-1.5*TLOCAL
        ENDIF
CW      WRITE(IUERR,*) ' TLOCAL<0, NUTRAL,MOL,A,E',NUTRAL,MOL,A,E
      ENDIF
      IZOTO=IZONA(IREG3D)
      IF(IREAC.GT.0. AND. IREAC.LE.4) GO TO 320
      IR=-2
      RETURN
  320 CONTINUE
C     IREAC=1 : BACKSCATTERED
C       "   2 : REEMITTED
C       "   3 : ALBEDOED
C       "   4 : SPUTTERING ONLY (IN THIS CASE W=0)
      IF(W.LE.0.0) GO TO 360
      IF(E.GT.TAGLIO) GO TO 330
      TRUNC=TRUNC+W*FLOAT(MOL)
      W=0.0
      GO TO 360
  330 CONTINUE
C     COLD ATOM?
      IF (MOL.EQ.1) THEN
        IF (IREAC.EQ.1) IBIN = 3
        IF (IREAC.EQ.2) IBIN = 1
        IF (IREAC.EQ.3) IBIN = 3
      ENDIF
C     IF(MOL.EQ.1 .AND. IREAC.EQ.2) IBIN=1
      WBORN(NUTRAL)=WBORN(NUTRAL)+W
      HISTOR(NUTRAL)=HISTOR(NUTRAL)+1.0
      SPIN(NUTRAL)=SPIN(NUTRAL)+W
      IF(IZOFRO.LE.0) GO TO 360
C                                IN WACOL(...,IREAC)
C                                SCORE AT BIRTH ONLY HEAVY IMPURITIES
C                                (WE EXCLUDE THE BIRTH AT ALBEDO SURF.)
C                   UNLESS IONTOW=0 (I.E. EFFECTS OF IONS ARE REQUIRED)
      IF(IONTOW.EQ.1.AND.IMPUR.NE.1) GO TO 335
C     IN THE PARTICLE INVENTORY, 'RE-EMITTED' REFERS TO H2, WHICH IS TO
C     BE MULTIPLIED BY 2 FOR PARTICLE BALANCE. IN THE CASE OF EMISSION
C     IN ATOMIC STATE, THE WEIGHT MUST THEN BE STORED DIVIDED BY 2.
      WA=W
      IF(IREAC.EQ.2 .AND. MOL.EQ.1) WA=WA*0.5
      WACOL(NUTRAL,IZOFRO,IREAC)=WACOL(NUTRAL,IZOFRO,IREAC)+WA
  335 CONTINUE
C
C                   SCORE POWER INITIAL NEUTRALS ENTERING THE PLASMA
C                   ------------------------------------------------
C                   (EXCLUDING HEAVY IONIZED IMPURITIES)
      IF(NUTRAL.GT.NIONPM) GO TO 360
      PINEFW=PINEFW + W*E
C                   SCORE TOTAL THERMAL LOAD ON WALLS DUE TO IONS
C                   ---------------------------------------------
C             RECOMB. OF H+   WITH ELECTRON RELEASES 13.6 EV
C             RECOMB. OF HE++ WITH ELECTRON RELEASES 79   EV
C             RECOMB. OF 2 ATOMS TO FORM A MOLEC. RELEASES 4.4 EV
      TRAN =0.0
      IF(ISTHEL.EQ.0) TRAN =13.6
      IF(ISTHEL.EQ.1) TRAN =79.0
      IF(MOL.EQ.2)    TRAN =TRAN  + 4.4
C            SCORE IN PMOLR1 THE POWER RELEASED IN WALLS AT FIRST IMPACT
C                   BY RECOMBINATIONS OF ATOMS TO FORM A MOLECULE
      IF(MOL.EQ.2)    PMOLR1 = PMOLR1 + 4.4*WOLD
      TLONWI=TLONWI + WOLD*(EOLD+TRAN) - W*E
C
      IF(IONTOW.EQ.1) GO TO 360
C                    1)ENERGY SUBTRACTED FROM WALL BY NEUTRALS:E*W;
C                    2)ENERGY GIVEN TO WALL BY TWO ATOMS WHEN
C                      THEY RECOMBINE TO FORM A MOLECULE : 4.4EV.
      TRAN=0.0
      IF(MOL.EQ.2) TRAN= 4.4
      CALL GRU(E,NGEV,EGEV(1),1,IG)
C                   DISTRIBUTIONS AS FUNCTIONS OF ENERGY
      ENFLUX(NUOLD,IZOFRO,IG)=ENFLUX(NUOLD,IZOFRO,IG)+(WOLD*TRAN-W*E)
      GO TO 360
C
C     CONSISTENCY TEST
C     ----------------
  340 WRITE(IUERR, 350 ) IREG3D,X,Y
  350 FORMAT('0***** ERROR: SOURCE FOUND OUTSIDE PLASMA IN REGION',I5,
     * ' AT (',1PE12.5,',',E12.5,')')
      IR=-2
  360 RETURN
      END
C.......................................................................
C.......................................................................
      SUBROUTINE WALINT(IBIRTH,IREAC,IGAP,LIPMP,LDEBUG,LLEAK,
     &                  NZSPU,IZSPU,WZSPU,NZDEP,IZDEP,WZDEP,ISCRED,
     &                  ISPU,IPUFF,COSPOL)
C
C     SIMULATES THE INTERACTION WITH THE WALL
C
C       IBIRTH=0 FIRST IMPACT OF PLASMA IONS WITH WALL,
C                AND ALSO ANY IMPACT OF IONISED IMPURITY WITH WALL.
C                (SEE FLOW CHART IN S.R. RUN AFTER "CALL STARTN").
C          "  =1 IMPACT OF A NEUTRAL WITH WALL
C                AND ALSO ANY IMPACT OF NUTRAL IMPURITY WITH WALL.
C
C     N.B. HEAVY IMPURITIES MAY BE IDENTIFIED HERE THROUGH THE TEST
C          NUTRAL.GT.NIONPM
C
C     AFTER SIMULATION:
C        IREAC=1 BACKSCATTERING
C          "  =2 ABSORPTION-DESORPTION (REEMISSION)
C          "  =3 ALBEDO
C          "  =4 SPUTTERING AND NEITHER BACKSCATTERING NOR REEMISSION
C          "  =0 ERROR
C
C----------------------------------(SEE SYMBOLS MEANING IN S.R. INPUT)
      INCLUDE 'pnimb'
      PARAMETER (MRG=MRGX ,MZN=MRG-2 ,MCH=41 ,MCC=MCCX, MWAC=13 )
      PARAMETER (MBS=MBSX ,MSD=MBS   ,MSC=2 )
      PARAMETER (MIO=3    ,MCP=6)
      PARAMETER (MEG=5    ,MIXS=10   ,MLEAK=9)
C---------------------------------------------------
C
      COMMON/IOFILE/IN,IOUT,IUERR,IARK,IPUNCH,IGMT,ITRMT,ITAPIO(2)
C
      COMMON/COMPOS/NION,NCOM,LIGHTW,RNLITE,EWLITE,
     * SYMB(MIO),PERC(MIO),DENSE(MRG),DENSI(MRG,MIO),EATMD,EATMR,
     * TEMPE(MRG),TEMPI(MRG),IBOUND(MRG),ALBEDO(MRG),LIWALL(MRG),COEFMX
     *,IEMIS(MRG),BEXPT(MRG),WEXPT(MRG,3),SHP,DRIFTV(MRG),DRIFTC(MRG,3)
     *,ISTARG(MRG),CHARGE(MCP),PROREQ(4),ALBATO(MRG),ALBENE(MRG),INDHEL
     *,NTSPUT,PSEMIP(MRG,2),IRTRIM(MCP,MCP),NFTRIM,LPVOID,DCUTCX,TCUTCX
     *,ICUTCX,INDEF,IYCHEM,EYCHEM,AYCHEM,NLEAK,XLEAK(4,MLEAK),ILEAK(MRG)
     *,NZREC,NUTRLZ(MCP),MIMP,IGOPT,PRORCL(MIO),UNDEF
     *,NZYIZ,CZYIZ(MCP),AYIZ(MCP),BYIZ(MCP),EYIZ(MCP),IYIZ(MCP),ALFCH7
     *,PARDIR(MRG,3),RECMAT(MIO,MIO,MRG)
C
      PARAMETER (NCT=24,MKES=4)
      COMMON/CTAB0/TABLE(NCT,11),IZLOZ(0:100)
      COMMON/CTABLE/SPUTAB(NCT,NCT)
     *,LABINT(MCP),LABEXT(NCT),IXS(MIXS),ITRIM
     *,NIONPM,MCX,MOLEC(MCP),IATOM(MCP),EXTSYM(MCP),QESP(NCT,NCT)
     *,EB(NCT),QCOEF(NCT),TLOTZ(NCT,26),CXRMAX(5,MRG),ESRMAX(MKES,MRG)
     *,TBELL(NCT,26),ITAGS(NCT,NCT,2)
C
      COMMON/PHYSIC/WSTART,WGAME,W,NUTRAL,MOL,A,E,CLOCK,IBIN,IBRNPL,
     * SIGT,SIGIT,SIGCXT,SIGEST,SIGST,SIGSTS,IDMOL,DISH2S(MRG),
     * ELECTR(MRG,MCP),SIGE,SIGI(MIO),SIGCX(MIO),SIGEL(MIO),
     * DISH2(MRG),DIOH2(MRG)
     *,SVI,SVCX(MIO)
C
C
      COMMON/CGEOMT/KREG,KREGM1,IR3DST,IR2DST,AREAD(MRG),
     * KONDC,KONDZ,I3D,KREG3D,LREG3D,LQUOTA,LDZETA,KSXY3D,NZETA
C
      COMMON/CGEOM2/LOCREG(6),NUMR,LBASE(3),IDBCG,KLOOP,PINF,LKOR,NOA(2)
     *,NOREG,LVOL,LAREA,LNUMR,LAIRC,LVOLTR,LLASTG,IRWGMT,NRTRU
      REAL*8 PINF
C
      COMMON/STOGEO/IR,IREG,IREG3D,ISENT,LEAVES,XIN,YIN,ZIN,
     * COSP,SINP,COST,SINT,TANT,COSKT,DIST,PILX,IRZ,IREGZ,IREG3Z,
     * IZIN,IZ,ISSOU,X,Y,Z
      REAL*8 X,Y,Z
C
      REAL*8 DWORD
      REAL*4 SWORD(2)
      EQUIVALENCE (DWORD,SWORD(1))
C
      PARAMETER (NDEBUG=17,MSPLIT=500,NBANK=25)
      PARAMETER (MDEBWR=30,MDEBPT=200)
      COMMON/CHISTO/KOSE,KOST,NHIST,NST,FNST,NSG,FNSG,
     * INIZ,ICORR,KINDPR,NEDIT,ISTHEL,IHOR,
     * DECIMA,PLIFE,WTHRES,TAGLIO,WCUT,NGEV,EGEV(MEG),TCUT,
     * IDEBIN,IDLOOP,IDEBUG,KODDBG,IHDBG,ICDBG,DEBUG(NDEBUG),
     * NDEBWR,NDEBPT,IDBHST(MDEBWR),
     * NSPLIT,MAXSON,MAXSOH,BANK(MSPLIT,NBANK),WPESO(MRG)
     *,IREAD,IWRITE,IBEAM,IONTOW,IDMC,IDMCO
C
      PARAMETER (MZSOUR=13, MSOUXY=14)
      COMMON/SOURCE/
     * HHESRC,SRECYC,SRECOM,WSOUR1,NSEGS,SOTEMP(MBS),STMOUT,TIMINF,
     * WSOSEG(MBS,MIO),NSEGSO,KORSEG(MBS),LAYSEG(MBS),YTMOUT,
     * X1SOUR(MBS),Y1SOUR(MBS),X2SOUR(MBS),Y2SOUR(MBS),ZSOURC(MCP),
     * FISOU(MBS),SFISOU(MBS),CFISOU(MBS),WDS(MBS,5),IZOENT,
     * NZSOUR,SREGZ(MZSOUR),DREGZ(MZSOUR),WSOIMP(MBS,MCP),
     * NSOUXY,TSOUXY(MSOUXY),WSOUXY(MSOUXY),ISOUXY(MSOUXY),
     * CSOUXY(8,MSOUXY),HSOUXY(MSOUXY),DSOUXY(MSOUXY),ITYSEG(MBS),
     * ICHTAR(MBS),ISCHAN,SOUNEW(MBS),QIMP(MBS,MCP),PUFIMP(MCP),
     * WREG(1),WSEF(1),KOISEF(1),KOSDE(1),NTARG,KO2DIR(MRG),KO3D2D(MRG)
     *,IRECO,IMOMSO,NOZPMP,MODEZR,SNVOL(MRG*MIO),SNV(MRG,MIO)
     *,PUFFRA(MBS,MCP),PUFFXY(MSOUXY),TPUFFH,TPUFFZ
C
      PARAMETER (MAXZET=12, MH=14, MZADJ=MZN*6, MEIBOR=MZADJ*2)
      PARAMETER (MMACRO=30+1)
      COMMON/SCORE/NAZONE,NDUM,NZONE,IZONA(MRG),VOLZ(MZN),IBOUNZ(MZN),
     * ELAST(MZN,MCP),FLUXZ(MZN,MAXZET),ESCAPE(MZN,MCP),REDP(MZN,MCP),
     * ABSOR(MZN,MCP),ELOST(MCP,MZN),WACOL(MCP,MZN,MWAC),
     * QF(MCH,MCC,8),QI(MCH,MCC,8),AF(MCH,MCC,8),AI(MCH,MCC,8),SAG(MCP),
     * FLUX(MZN,MCP),ENNE(MZN,MCP),EAVER(MZN,MCP,2),ENFLUX(MCP,MZN,MEG),
     * CEXED(MZN,MCP),DISSOC(MZN,MCP),TRAMAT(1,1,1),WBORN(MCP),
     * HISTOR(MCP),COLS,FUGA,ESCEN(MZN,MCP),REDFUE(MSD,MSC,MCP),
     * ZENTRY(MCP,MCH),WNP,WRS,COLW,TRUNC,NLATS,IS,IDELAT(MSD,3),
     * SCALAT(MSD,MSC),SPFUEL(MSD,MSC,MCP),QDEPL(MSD,MSC),SPIN(MCP),
     * ERECYC(MCP,MZN,2),PRECYC(MCP,MZN,3),NCHAN,NZCHAN(MCC),ICHAN(MZN),
     * MZCHAN,IZCHAN(MCH,MCC),SPAREA(MSD,MSC),DENSEZ(MZN),TEMPEZ(MZN),
     * YEARFR,TARLHY(MSD),TARLHE(MSD),REDHEL(MSD,MSC,MCP),PIONW,PINEFW,
     * TLONWI,PIONRE,PMOLR1,PMOLR2,AALB,QALB,AHENR,QHENR,AHETP,QHETP
     *,SPUHEL(MSD,MSC,MCP),ECHBEM(1,1),ELOBEM(1,1),VELOC(MZN,MCP,3)
     *,WPRSP,EPRSP,WTASP,ETASP,SIGMAN(MZN,6),WNBR(MZADJ,2)
     *,NEIBOR(MEIBOR),LOCNBR(MZN),NMACRO,IMACRO(MZN),COSNOR
     *,ISPOFF(MMACRO-1),IPVOID,TSUBD,ITAU,MSPOFF,YNOSP
C
      REAL*8 FLUXZ,ESCAPE,ELAST,REDP,ABSOR,WACOL,SPIN,
     * FLUX,ENNE,EAVER,ENFLUX,CEXED,WNBR,
     * DISSOC,TRAMAT,SAG,WBORN,HISTOR,COLS,FUGA,ESCEN,WNP,WRS,COLW,TRUNC
     *,SPFUEL,ERECYC,PRECYC,REDFUE,QDEPL,ZENTRY,SPUHEL,ECHBEM,ELOST
     *,ELOBEM,REDHEL,TARLHY,TARLHE,VELOC
     *,WPRSP,EPRSP,WTASP,ETASP,SIGMAN
C
      COMMON/CJUNK/MCOLP,MCOLW,NCOLP(2),NCOLW,ICUPR,IERAND,ISEHHE,ISFLAG
     &     ,ITEST,RTEST
C
      PARAMETER (MILLE=10000)
      COMMON/COMUNE/BUFFER(MILLE),IBUFER(MILLE)
C
      COMMON/CMACRO/
     *       SMACRO(MMACRO,5,MCP),FMACRO(MMACRO,MMACRO,MCP)
     *     , VMACRO(MMACRO),PMACRO(MMACRO,4,MCP)
      REAL*8 SMACRO,FMACRO,VMACRO,PMACRO
C
      DIMENSION WN(2),XCG(2)
      REAL*8 WN,XCG
C
      REAL*8 XSAV , YSAV , ZSAV , DSAV
C
      COMMON/WALDBG/RN,RE,POLAR
C
      LOGICAL LDEBUG , LTRAN , LTRAN0
C
      REAL*8 WTOT1(MCP),WTOT2(MCP)
C
CT    WRITE(IUERR,*) ' ENTER WALINT',IR,IREG,IREG3D,X,Y
C
      ISENT=0
      IREAC=0
      IRWALL=IREG3D
      MOLSAV=MOL
      NCOLW=NCOLW+1
      COLW=COLW+1.0
      LLEAK=0
      NZSPU=0
      IZSPU=0
      WZSPU=0.0
      NZDEP=0
      IZDEP=0
      WZDEP=0.0
      IBRTHR=0
      WBRTHR=1.0
      COSPOL=UNDEF
C
C                         IREAC=9: COLLISIONS OF IONS WITH WALL
      IF(IBIRTH.EQ.0)
     &WACOL(NUTRAL,IZONA(IRWALL),9)=WACOL(NUTRAL,IZONA(IRWALL),9)+W
C                         IREAC=7: COLLISIONS OF NEUTRALS WITH WALL
      IF(IBIRTH.NE.0)
     &WACOL(NUTRAL,IZONA(IRWALL),7)=WACOL(NUTRAL,IZONA(IRWALL),7)+W
      IF(IBIRTH.EQ.0 .AND. IONTOW.EQ.1 .AND. NUTRAL.LE.NIONPM) GOTO 5
C                         IREAC=5: COLLISIONS WITH WALL
      WACOL(NUTRAL,IZONA(IRWALL),5)=WACOL(NUTRAL,IZONA(IRWALL),5)+W
C     WHAT ABOUT IMPURITY IONS?
    5 CONTINUE
C
      NUPROJ=NUTRAL
C                           MOL SET TO 1 AT BIRTH BY S.R. HOW
      IF(MOL.EQ.1) GO TO 10
C                           BREAK THE MOLECULAR BONDS, IF ANY
C                           (MOLECULES ARE FIRST SEPARATED INTO ATOMS
C                            AND ONLY AT THE END OF THE S.R. RECOMBINED)
      MOL=1
      NUTRAL=IATOM(NUTRAL)
      W=W*2.0
      E=E*0.5
      A=A*0.5
C
   10 CONTINUE
C                           SAVE PARAMETERS FOR SPUTTERING
      IPROJ=LABINT(NUTRAL)
      EPROJ=E
      WPROJ=W
C                           PUSH PARTICLE BACK INTO PLASMA
      XSAV=X
      YSAV=Y
      ZSAV=Z
      DSAV=DIST
      IRSA=IR
      IREGSA=IREG
      IR3DSA=IREG3D
      IZSA=IZ
      DO 70 NL=1,6
        DELTA=FLOAT(NL-1)*0.002
        DPLUS=DSAV*DELTA
CT      DPLUS=AMAX1(DPLUS,0.1)
C                                FIRST GET MORE INTO WALL ...
        IF(I3D.EQ.0) GO TO 40
        IF(SINT) 30 , 20 , 30
   20   Z=ZSAV*(1.0+DELTA*COST)
        GO TO 50
   30   Z=ZSAV+COST/SINT*DPLUS
   40   X=XSAV+COSP*DPLUS
        Y=YSAV+SINP*DPLUS
   50   IR=IRSA
        IREG=IREGSA
        IREG3D=IR3DSA
        IZ=IZSA
        ISENT=0
        NTRY=0
C                            ... THEN TURN ...
   60   NTRY=NTRY+1
C       IF(IR.EQ.965 .OR. IR.EQ.788 .OR. IR.EQ.767)
CT      IF(IRSA.EQ.794) THEN
CT       WRITE(6,*) ' WALINT IR=',IR,' N=',NL,NTRY,' X=',X,Y,' R=',IRSA
CT       WRITE(6,*) '         W=',COSP,SINP,' D=',DPLUS
CT      ENDIF
        IF(NTRY.GT.3) GOTO 70
C       (ONLY 3 BACKWARDS REGIONS ALLOWED)
        COSP=-COSP
        SINP=-SINP
        COST=-COST
        DIST=1.0E+30
C                            ... BACK INTO PLASMA ...
CT      WRITE(IUERR,*) 'WALINT  IN PILS',IR,IREG,IREG3D
        CALL PILS(BUFFER(1),MILLE,ITRAN)
CT      WRITE(IUERR,*) 'WALINT OUT PILS',IR,IREG,IREG3D
        IR=IR
        IREG=IREG
        IREG3D=IREG3D
C                            ... AND FINALLY RESET OLD DIRECTION
        COSP=-COSP
        SINP=-SINP
        COST=-COST
        ISENT=0
        IF(IR.LT.1 .OR. IR.GT.NRTRU) GO TO 70
        IF(IREG.LT.IR2DST .OR. IREG.GT.KREG) GO TO 70
        IF(IREG3D.LT.IR3DST .OR. IREG3D.GT.KREG3D) GO TO 70
        IF(IBOUND(IREG3D).EQ.0) GO TO 90
        IF(IBOUND(IREG3D).LT.0) GO TO 70
        IF(IGAP.NE.0 .AND.
     &     IBOUND(IREG3D).EQ.1 .AND. PSEMIP(IREG3D,1).GT.0.0) GOTO 90
        GO TO 60
   70 CONTINUE
C                           GEOMETRY ACCIDENT
   80 CONTINUE
CT    IR=-IABS(IR)
      IR=-4
CT    WRITE(6,*) ' WALINT IR=',IR,' IREG=',IREG,' IREG3D=',IREG3D,
CT   *           ' IBOUND=',IBOUND(IREG3D)
      GOTO 900
C                           OK, BACK INTO PLASMA
   90 CONTINUE
C-    DPLUS=DIST*1.01
C-    X=X-COSP*DPLUS
C-    Y=Y-SINP*DPLUS
CC-   IF(I3D.NE.0) Z=Z-COST/SINT*DPLUS
C-    XCG(1)=X
C-    XCG(2)=Y
C-    IR1=IR
C-    CALL GETIR(XCG,IR,0)
C-    IF(IR.NE.IR1) GO TO 20
C                           DIRECTION COSINES OF THE INWARDS NORMAL
C                           (COSPN*SINTN,SINPN*SINTN,COSTN)
C               ISENTL=0 THIS SIDE DOES NOT REQUIRE SCORE
      ISENTL=0
C     TWO USELESS STATEMENTS FOLLOW TO AVOID COMPILER WARNINGS
      IIL = -9999
      KKL = -9999
C
      IF(I3D.EQ.0) GO TO 120
      IF(LEAVES) 100 , 120 , 110
C                              REFLECTION FROM ABOVE
  100 COSPN=0.0
      SINPN=0.0
      COSTN=-1.0
      SINTN=0.0
      GO TO 180
C                              REFLECTION FROM BELOW
  110 COSPN=0.0
      SINPN=0.0
      COSTN=1.0
      SINTN=0.0
      GO TO 180
C                              REFLECTION IN THE (X,Y) PLANE
  120 CALL NRMLDC(WN,IER)
      IF(IER.NE.0) THEN
        IR=-6
        GOTO 80
      ENDIF
      CALL SURFAC(IPOL,ILATO)
C                              SEGMENT CROSSED
      IF(NLATS.LE.0) GO TO 170
      INDEX=IPOL*1000+ILATO
      DO 130 I=1,NLATS
      IIL=I
      IF(INDEX.EQ.IDELAT(IIL,1)) GO TO 140
  130 CONTINUE
      GO TO 170
  140 N=IDELAT(IIL,2)
      VAR=XSAV
      IF(IDELAT(IIL,3).NE.1) VAR=YSAV
      DO 150 K=1,N
      KKL=K
      IF(VAR.LE.SCALAT(IIL,K)) GO TO 160
  150 CONTINUE
      GO TO 170
C                 ISENTL=1 THIS SEGMENT REQUIRES SCORE
  160 ISENTL=1
  170 CONTINUE
C                                  (BECAUSE OF THE ABOVE CALL
C                                   TO S.R. PILS WHEN REENTERING PLASMA,
C                                   DIRECTION WN(I) POINTS TOWARDS
C                                   WALL)
C                     (COSPN,SINPN,0) : DIRECTION COSINES OF THE NORMAL
      COSPN=-WN(1)
      SINPN=-WN(2)
      COSTN=0.0
      SINTN=1.0
C                     COSPOL: COSINE OF THE POLAR ANGLE
C                     (COSP*SINT,SINP*SINT,COST) : DIRECTION COSINES
  180 COSPOL=-((COSP*COSPN+SINP*SINPN)*SINT*SINTN+COST*COSTN)
      IF(COSPOL.GE.0.0) GO TO 200
      WRITE(IUERR, 190 ) X,Y,COSPN,SINPN
  190 FORMAT('***** ERROR FROM NORMAL IN=',1P,2E10.3,' WN=',2E10.3)
      GO TO 80
  200 CONTINUE
C                 TEST INTRODOTTO IL 26/2/87
      IF(COSPOL.LT.-0.999) COSPOL=-0.999
      IF(COSPOL.GT.+0.999) COSPOL=+0.999
      POLAR=ABS(ARCSIN(SQRT(1.0-COSPOL**2)))
C
      IF(LIPMP.LE.0) THEN
        ITARG=LIWALL(IRWALL)
      ELSE
        ITARG=LIPMP
      ENDIF
      NUTARG=LABEXT(ITARG)
      IF(LDEBUG) WRITE(IOUT,205) TABLE(IPROJ,6),TABLE(ITARG,6)
  205 FORMAT(' WALL INTERACTION: NEUTRAL IS ',A4,', WALL IS ',A4)
C
C                           ONLY NEUTRALS CAN BE ALBEDOED
      IF(IBOUND(IRWALL).GT.1 .AND. IBIRTH.EQ.1) GO TO 800
C
C
C     TRUE WALL
C     =========
C     MOLECULES ARE ONLY RE-EMITTED (IN FACT, BACKSCATTERED WITHOUT
C     IMPLANTATION)
      IF(MOLSAV.EQ.2) GO TO 663
C           SPATIAL DISTRIBUTION OF ENERGY IN WALL SEGMENT
C                  IF FIRST IMPACT OF AN ION, CONSIDER IONIZATION EN.,
C                  BUT ONLY FOR BEAM PROBLEMS WHERE CHARGES OF IONS ARE
C                  NOT BALANCED BY ELECTRONS. OMIT IN PLASMA PROBLEMS.
C                  (RECALL THAT A IS HERE ALWAYS THE MASS OF AN ATOM)
      IF(ISENTL.EQ.0) GO TO 220
      IF(IBIRTH.EQ.0.AND.IONTOW.EQ.1) GO TO 220
C                  NO SCORE FOR HEAVY IONISED IMPURITIES
      IF(NUTRAL.GT.NIONPM) GO TO 220
      TRAN=0.0
      IF(IBEAM.NE.1.) GO TO 210
C                   IONIZATION ENERGY OF H ISOTOPES=13.6 EV
      IF(A.LT.4.0) TRAN=13.6
C                   IONIZATION ENERGY OF HE++=79 EV (HE+=24.6)
C                   (IF HE+ WILL BE LATER CONSIDERED MODIFY ACCORDINGLY)
      IF(A.EQ.4.0) TRAN=79.0
C                   IONIZATION ENERGY OF HEAVY IMPURITIES NEGLECTED
  210 TRAN1=WPROJ*(EPROJ+TRAN)
      QDEPL(IIL,KKL)=QDEPL(IIL,KKL)+TRAN1
C         SCORE TOTAL ENERGY ON EACH SURFACE, SEPAR. HYD. CONTR. FROM HE
      IF(ISTHEL.EQ.0) TARLHY(IIL)=TARLHY(IIL)+TRAN1
      IF(ISTHEL.EQ.1) TARLHE(IIL)=TARLHE(IIL)+TRAN1
C   ---------------------------------------------------------
C                             EPSKEV="REDUCED ENERGY"
C                             N.B.  REDUCED ENERGY FORMULATION BREAKS
C                             DOWN WHEN Z2 IS NOT MUCH GREATER THAN Z1
  220 CONTINUE
      A1=TABLE(IPROJ,3)
      Z1=TABLE(IPROJ,4)
      A2=TABLE(ITARG,3)
      Z2=TABLE(ITARG,4)
      DEN=SQRT(Z1**0.6666+Z2**0.6666)*Z1*Z2*(A1+A2)
      EPSKEV=E*(0.0325*A2/DEN)
      ALOGE=ALOG10(EPSKEV)
C                             FOR NEUTRALS/IONS METALS (INCL. C)NEITHER
C                             REFLECTION NOR REEMISSION. METAL(1) PROJ.
C                             IS ASSUMED TO STICK INTO WALL. SPUTTERING
C                             WILL POSSIBLY FOLLOW. ONLY GAS ARE REFL.
C                             (NOTE ADDED IN APRIL 1987)
      IF(IPUFF.EQ.1 .AND. NUTRAL.GT.NIONPM) THEN
C             PUFF OF IMPURITY
        W=W
        E=TPUFFZ*1.5
        IREAC=1
        IBRTHR=NUTRAL
        GOTO 640
      ENDIF
COLD  IF(A1.GT.16.0) GO TO 690  OLD CRITERIUM
      IF(TABLE(IPROJ,11).NE.0.0) GO TO 690
C
C             RECYCLABLE IMPURITY?
      IF(IPROJ.EQ.LABINT(LIGHTW)) THEN
CW      WRITE(IUERR,*) ' WALINT REC.IMP. IBIRTH=',IBIRTH
        IF(IBIRTH.EQ.1) THEN
C            NEUTRAL PROJECTILE
          IZO=IZONA(IRWALL)
          ESCAPE(IZO,LIGHTW)=ESCAPE(IZO,LIGHTW)+W*(1.0-RNLITE)
          W=W*RNLITE
C         USE UNIVERSAL FORMULAS
CW        WRITE(IUERR,*)' WALINT ENTER U.F. 1 PROJ, EPROJ=',IPROJ,EPROJ
CW        WRITE(IUERR,*) '        A1,Z1,A2,Z2   ',A1,Z1,A2,Z2
          GOTO 370
        ELSE
C            ION     PROJECTILE
          IBRTHR=NCOM
C         (W AND ESCAPE ARE CONSIDERED LATER)
        ENDIF
      ENDIF
C
      IF(IRTRIM(NUPROJ,NUTARG).LE.0) GOTO 224
C
C                    USE TRIM DATA
      CALL TRIMOD(Z1,A1,Z2,A2,E,
     &            COSP,SINP,COST,SINT,
     &            COSPN,SINPN,COSTN,SINTN,
     &            TEMPI(IRWALL),IFLAG,NFTRIM,IUERR)
      IF(IFLAG.EQ.1) THEN
        IREAC=1
        IF(LDEBUG) WRITE(IOUT,392) TABLE(IPROJ,6)
        GOTO 650
      ELSE IF(IFLAG.EQ.2) THEN
        GOTO 660
      ELSE
        WRITE(IUERR,*) ' TRIM ERROR'
        CALL EXITN(1)
      ENDIF
C
C
C                    STANDARD WALL INTERACTION MODEL
C                    -------------------------------
  224 CONTINUE
C                    PARTICLE REFLECTION COEFFICIENT RN
C                    ----------------------------------
C
C                    PROJECTILES OTHER THAN H OR HE?
      IF(IPROJ.GT.7) GOTO 370
C
C                    PROJECTILES H OR HE
COLD  IF(A2.NE.56.0 .AND. A2.NE.59.0 ) GO TO 240
      IF(ITARG.NE.8 .AND. ITARG.NE.12) GO TO 240
C                       ----- FE/NI WALL -----
COLD  IF(A1.GT.3.0)  GO TO 230
      IF(IPROJ.GT.5) GO TO 230
      IF(E.GT.1.5) GO TO 230
C                             LOW ENERGY (AFTER ECKSTEIN,1984)
C                             SCALING RULES FOR H,D,DT,T
COLD  IF(A1.EQ.1.0) EWSCAL=E
COLD  IF(A1.EQ.2.0) EWSCAL=E-0.10
COLD  IF(A1.EQ.2.5) EWSCAL=E-0.15
COLD  IF(A1.EQ.3.0) EWSCAL=E-0.20
      IF(IPROJ.EQ.2     ) THEN
        EWSCAL=E
      ELSE IF(IPROJ.EQ.3) THEN
        EWSCAL=E-0.10
      ELSE IF(IPROJ.EQ.4) THEN
        EWSCAL=E-0.15
      ELSE IF(IPROJ.EQ.5) THEN
        EWSCAL=E-0.20
      ELSE
C       USELESS STATEMENT FOLLOWS TO AVOID COMPILER WARNING
        EWSCAL=E
      ENDIF
      IF(EWSCAL.LE.0.0) EWSCAL=0.001
C
      RN=1.125*EWSCAL-0.225*EWSCAL**2.78-0.2
      GO TO 390
C                             HIGH ENERGY
C                             (AFTER ECKSTEIN-VERBEEK)
CCC   RN=((1.0+3.2116*EPSKEV**0.34334)**1.5+(1.3288*EPSKEV**1.5)**1.5)
CCC  *   **(-0.6666667)
C                             THE FOLLOWING FORMULA IS EQUIVALENT
C                             TO THE PREVIOUS ONE UP TO EPSKEV=4
C                             (HE OR HEAVIER NUCLEI, ANY ENERGY)
  230 RN=0.1926-0.2037*ALOGE
      GO TO 390
C                       ----- C WALL -----
  240 CONTINUE
COLD  IF(A2.NE.12.0 ) GO TO 350
      IF(ITARG.NE.10) GO TO 350
      IF(E.GT.3.0) GO TO 250
C                             LOW ENERGY (ECKSTEIN 1984)
C                             RN FOR H (SCALING RULES FOR D,T MISSING)
      RN=0.348*E-0.00146*E**4.777-0.156
      GO TO 390
C                             HIGH ENERGY
C                             AFTER ECKSTEIN-VERBEEK
  250 IF(E.GT.1000.0) GO TO 300
      GO TO ( 260 , 260 , 270 , 280 , 290 , 290 , 290 ), IPROJ
  260 RN=E**(-0.3)
      GO TO 390
  270 RN=0.758*E**(-0.3)
      GO TO 390
  280 RN=0.578*E**(-0.3)
      GO TO 390
  290 RN=0.459*E**(-0.3)
      GO TO 390
  300 GO TO ( 310 , 310 , 320 , 330 , 340 , 340 , 340 ), IPROJ
  310 RN=575.4*E**(-1.22)
      GO TO 390
  320 RN=411.0*E**(-1.22)
      GO TO 390
  330 RN=320.0*E**(-1.22)
      GO TO 390
  340 RN=274.0*E**(-1.22)
      GO TO 390
C                       ----- TUNGSTEN WALL -----
  350 CONTINUE
COLD  IF(A2.NE.184.0) GO TO 360
      IF(ITARG.NE.13) GO TO 360
      IF(E.GT.1.5) GO TO 370
C                             LOW ENERGY (ECKSTEIN 1984)
C                             RN FOR H (SCALING RULES FOR D,T MISSING)
      RN=0.85-0.332*(1.5-E)**3
      GO TO 390
C                       ----- GOLDEN WALL BOMBARDED BY DEUTERIUM ----
  360 CONTINUE
COLD  IF(A2.NE.197.0) GO TO 370
      IF(ITARG.NE.15) GO TO 370
C                             HIGH ENERGY (ECKSTEIN-VERBEEK)
      IF(E.GT.0.0) RN=0.306-0.1318*ALOGE
C                             LOW ENERGY (TO BE IMPLEMENTED)
      IF(E.LT.0.0) RN=1.0
      GO TO 390
C                       ----- OTHER WALLS -----
  370 RN=0.1885-0.2265*ALOGE
CW    IF(IPROJ.EQ.24) THEN
CW      WRITE(IUERR,*) ' WALINT A1,Z1,A2,Z2,RN',A1,Z1,A2,Z2,RN
CW    ENDIF
C                             H AGAINST COPPER (ANGULAR DEPENDENCE)
C     AFTER OEN AND ROBINSON, NUCL.INSTR AND METHODS, 132(1976)647
      IF(ICUPR.EQ.0) GO TO 390
      IF(IPROJ.NE.2 .OR. ITARG.NE.9) GO TO 390
      IF(EPROJ.GT.2000.0) GO TO 380
      RN=RN*(0.597*POLAR**2-0.007*POLAR+1.0)
      GO TO 390
  380 RN=RN*(1.807*POLAR**2-0.25*POLAR+1.0)
C
  390 IF(RN.LT.0.0) RN=0.001
      IF(RN.GT.1.0) RN=1.0
C                               BACKSCATTERING OR REEMISSION?
C                               IF INCIDENT PARTICLE IS A MOLECULE
C                               FORCE RE-EMISSION
C                               (IN FACT, BACKSCATTERED WITHOUT
C                               IMPLANTATION)
      IF(MOLSAV.EQ.2) GO TO 663
C                    FORCE RECYCLING OF NEUTRALS AS ATOMS WITH E=EATMR?
CCCC  IF(Z1.LE.2.1 .AND. IBIRTH.EQ.1 .AND. IEMIS(IRWALL).EQ.3) THEN
C                                       IONS/NEU
      IF(Z1.LE.2.1                   .AND. IEMIS(IRWALL).EQ.3) THEN
        IREAC=1
        GOTO 665
      ENDIF
C                             BACKSCATTERING OR RE-EMISSION?
      C=RANF()
      IF(C.GT.RN) GO TO 660
C                             BACKSCATTERING (REFLECTION)
C                             ---------------------------
      IREAC=1
      IF(LDEBUG) WRITE(IOUT,392) TABLE(IPROJ,6)
  392 FORMAT(' WALL INTERACTION: NEUTRAL ',A4,' IS REFLECTED')
      IF(IERAND.EQ.0)  GO TO 400
      IF(A1.GE.4.0.OR.E.LT.100.0) GO TO 400
C                         REFLECTED ENERGY SAMPLED FROM A DISTRIBUTION.
C                         FOR SENSITIVITY ANALYSIS ONLY,H ISOT.,E.GT.100
      C=RANF()
      CALL SAMPLE(C,E,TRAN)
      E=TRAN
      GO TO 610
C
C                             ENERGY REFLECTION COEFFICIENT RE
C                             --------------------------------
C
  400 CONTINUE
C                    PROJECTILES OTHER THAN H OR HE?
C                    (ALSO HE IMPURITY)
      IF(IPROJ.GT.7) GOTO 560
C
C                    PROJECTILES H OR HE
COLD  IF(A2.NE.56.0 .AND. A2.NE.59.0)  GO TO 430
      IF(ITARG.NE.8 .AND. ITARG.NE.12) GO TO 430
C                       ----- FE/NI WALL -----
COLD  IF(A1.GT.4.0) GO TO 420
      IF(IPROJ.GT.7) GOTO 420
      IF(E.GT.1.5) GO TO 420
COLD  IF(A1.EQ.4.0) GO TO 410
      IF(IPROJ.GT.5) GOTO 410
C                             LOW ENERGY H,D,DT,T (ECKSTEIN 1984)
      RE=0.6*RN
      GO TO 600
C                             LOW ENERGY HELIUM (ECKSTEIN 1984)
  410 RE=0.6
      GO TO 600
C                             HIGH ENERGY
C                             (AFTER ECKSTEIN-VERBEEK)
CCC   RE=((1.0+7.1172*EPSKEV**0.3525)**1.5+(5.2757*EPSKEV**1.5)**1.5)
CCC  *   **(-0.666667)
C                             THE FOLLOWING FORMULA IS EQUIVALENT
C                             TO THE PREVIOUS ONE UP TO EPSKEV=4
C                             (NUCLEI HEAVIER THAN HE,ANY ENERGY)
  420 RE=0.10-0.1667*ALOGE
      GO TO 600
C                       ----- C WALL (ECKSTEIN-VERBEEK) -----
  430 CONTINUE
COLD  IF(A2.NE.12.0) GO TO 540
      IF(ITARG.NE.10) GOTO 540
      IF(E.GT.3.0)  GO TO 440
C                             LOW ENERGY (ECKSTEIN 1984)
C                             RE FOR H (SCALING RULES FOR D,T MISSING)
      RE=0.3*RN
      GO TO 600
C                             HIGH ENERGY
C                             AFTER ECKSTEIN-VERBEEK
  440 IF(E.GT.1000.0) GO TO 490
      GO TO ( 450 , 450 , 460 , 470 , 480 , 480 , 480 ), IPROJ
  450 RE=0.78*E**(-0.417)
      GO TO 600
  460 RE=0.522*E**(-0.417)
      GO TO 600
  470 RE=0.392*E**(-0.417)
      GO TO 600
  480 RE=0.313*E**(-0.417)
      GO TO 600
  490 GO TO ( 500 , 500 , 510 , 520 , 530 , 530 , 530 ), IPROJ
  500 RE=1178.0*E**(-1.476)
      GO TO 600
  510 RE=743.0*E**(-1.476)
      GO TO 600
  520 RE=589.0*E**(-1.476)
      GO TO 600
  530 RE=473.0*E**(-1.476)
      GO TO 600
C                       ----- TUNGSTEN WALL -----
  540 CONTINUE
COLD  IF(A2.NE.184.0) GO TO 550
      IF(ITARG.NE.13) GO TO 550
      IF(E.GT.1.5) GO TO 560
C                             LOW ENERGY (ECKSTEIN 1984)
C                             RE FOR H (SCALING RULES FOR D,T MISSING)
      RE=0.6*RN
      GO TO 600
C                       ----- GOLDEN WALL BOMBARDED BY DEUTERIUM ----
  550 IF(A2.NE.197.0) GO TO 560
C                             HIGH ENERGY (ECKSTEIN-VERBEEK)
      IF(E.GT.0.0) RE=0.061-0.138*ALOGE
C                             LOW ENERGY (TO BE IMPLEMENTED)
      IF(E.LT.0.0) RE=1.0
      GO TO 600
C                       ----- OTHER WALLS -----
  560 IF(EPSKEV.GT.0.1) GO TO 570
      RE=-0.25*ALOGE
      GO TO 580
  570 RE=0.07-0.18*ALOGE
C                             H AGAINST COPPER (ANGULAR DEPENDENCE)
C     AFTER OEN AND ROBINSON, NUCL.INSTR AND METHODS, 132(1976)647
  580 CONTINUE
      IF(ICUPR.EQ.0) GO TO 600
      IF(IPROJ.NE.2 .OR. ITARG.NE.9) GO TO 600
      IF(EPROJ.GT.2000.0) GO TO 590
      RE=RE*(0.405*POLAR**2+0.446*POLAR+1.0)
      GO TO 600
  590 RE=RE*(5.32*POLAR**2-1.531*POLAR+1.0)
C
  600 IF(RE.LT.0.0) RE=0.001
      IF(RE.GT.1.0) RE=1.0
C                             NEW ENERGY
C                             ----------
      E=E*RE/RN
  610 CONTINUE
C                           NEW DIRECTION AFTER WALL INTERACTION
C                           ------------------------------------
      IF(IGOPT.EQ.0) THEN
        ITRF=1
      ELSE
        ITRF=2
      ENDIF
C                           GAP REFLECTION?
      IF(IGAP.NE.0) GOTO 615
      ITRF=1
      IF(COSPOL.GE.0.0) GO TO 640
C                           OPTICAL REFLECTION (SMALL INCIDENT ANGLE)
C                           IS NEVER USED
  615 IF(I3D.EQ.0) GO TO 630
      IF(LEAVES) 620 , 630 , 620
C                               REFLECTION FROM ABOVE OR BELOW
  620 COST=-COST
      GO TO 650
C                               REFLECTION IN THE (X,Y) PLANE
  630 CONTINUE
      CALL XYREFL(COSPN,SINPN,COSP,SINP,ITRF,IUERR)
      GO TO 650
C                           WALL COSINE LAW (LARGE INCIDENT ANGLE)
C                                           (SMALL POLAR ANGLE)
  640 CALL COSLAW(COSKT,2)
C                           ASSIGN THE NORMAL AS "PRECOLLISION"
C                           DIRECTION TO S.R. DIDIMO
      COSP=COSPN
      SINP=SINPN
      COST=COSTN
      SINT=SINTN
      CALL DIDIMO
  650 GO TO 710
C                             REEMISSION (DESORPTION AFTER ABSORPTION)
C                             ----------------------------------------
  660 CONTINUE
C                 STORE THE IMPLANTED PART
      WACOL(NUTRAL,IZONA(IRWALL),13)=WACOL(NUTRAL,IZONA(IRWALL),13)+W
C                 RECMAT BEGINS
      IF(NUTRAL.GT.NION) GOTO 663
C                           KEEP IDENTITY IF PUFFED
      IF(IPUFF.NE.0) GOTO 663
C                           FUEL. SUBTRACT PARTICLES NOT FULLY RECYCLED
      TOTP=0.0
      DO L=1,NION
        TRAN=RECMAT(L,NUTRAL,IRWALL)
        IF(TRAN.EQ.UNDEF) THEN
          WRITE(IUERR,*) ' UNDEFINED RECMAT FOR IRWALL=',IRWALL
          CALL EXITN(1)
        ENDIF
        TOTP=TOTP+TRAN
      ENDDO
      IF(TOTP.LE.0.0) TOTP=1.0E-30
CT    WRITE(IUERR,*) ' WALINT NUTRAL=',NUTRAL,' TOTP=',TOTP
      W=W*TOTP
      IF(NION.EQ.1) GOTO 663
C                           CHANGE IDENTITY CARD?
      CALL RANDOM(C)
      NUTNEW=0
      TRAN=0.0
      DO L=1,NION
        NUTNEW=L
        TRAN=TRAN+RECMAT(L,NUTRAL,IRWALL)/TOTP
        IF(C.LE.TRAN) GOTO 662
      ENDDO
      WRITE(IUERR,*) ' **** WALINT. WRONG CHANGE OF IDENTITY CARD'
  662 CONTINUE
CT    IF(NUTRAL.NE.NUTNEW) THEN
CT      WRITE(IUERR,*)' WALINT CHANGE I.D.',NUTRAL,NUTNEW
CT    ENDIF
      NUTRAL=NUTNEW
C                 RECMAT ENDS
  663 CONTINUE
      IREAC=2
      IF(IEMIS(IRWALL).EQ.2 .AND. MOLEC(NUTRAL).NE.0) GO TO 670
C                             REEMISSION AS ATOMS
  665 MOL=1
      IF(LDEBUG) WRITE(IOUT,666) TABLE(IPROJ,6)
  666 FORMAT(' WALL INTERACTION: NEUTRAL ',A4,' IS RE-EMITTED AS ATOM')
      IF(IPROJ.LE.7) THEN
C       H OR HE
        IF(IEMIS(IRWALL).NE.3) THEN
C              STANDARD WALL
          IF(EATMD.LE.0.0) THEN
C                             NEW ENERGY ASSUMED EQUAL TO DISSOC. ENER.
            E=TABLE(IPROJ,7)
          ELSE
C                             PRESCRIBED DISSOCIATION ENERGY
            E=EATMD
          ENDIF
        ELSE
C              SPECIAL WALL  (TO MIMIC MISSING STRUCTURES)
          IF(EATMR.LE.0.0) THEN
C                             NEW ENERGY ASSUMED EQUAL TO DISSOC. ENER.
            E=TABLE(IPROJ,7)
          ELSE
C                             PRESCRIBED ATOM ENERGY
            E=EATMR
          ENDIF
        ENDIF
      ELSE
C       OTHERS
        E=0.0
      ENDIF
C                             IF NOT SPECIFIED OTHERWISE,
C                             THE NEW ENERGY IS THE WALL TEMPERATURE
      IF(E.LE.0.0) E=1.5*TEMPI(IRWALL)
      GO TO 672
C                             REEMISSION AS MOLECULES
  670 MOL=2
      IF(LDEBUG) WRITE(IOUT,671) TABLE(IPROJ,6)
  671 FORMAT(' WALL INTERACTION: NEUTRAL ',A4,' IS RE-EMITTED AS MOL.')
      NUTRAL=MOLEC(NUTRAL)
      W=W*0.5
      A=A*2.0
      E=1.5*TEMPI(IRWALL)
C
  672 CONTINUE
      IF(IGAP.EQ.0) GOTO 680
C                           GAP REFLECTION IF IGAP <>0
      IF(I3D.EQ.0) GO TO 675
      IF(LEAVES) 673 , 675 , 673
  673 COST=-COST
      GO TO 685
  675 CONTINUE
      IF(IGOPT.EQ.0) THEN
        ITRF=1
      ELSE
        ITRF=2
      ENDIF
      CALL XYREFL(COSPN,SINPN,COSP,SINP,ITRF,IUERR)
      GO TO 685
C                             COMMON TO BOTH ATOMS AND MOLECULES
C                           COSINE-LAW REFLECTION LAW
  680 CALL COSLAW(COSKT,2)
C                           ASSIGN THE NORMAL AS "PRECOLLISION"
C                           DIRECTION TO S.R. DIDIMO
      COSP=COSPN
      SINP=SINPN
      COST=COSTN
      SINT=SINTN
      CALL DIDIMO
C
  685 CONTINUE
C                          NO SPUTTERING DUE TO MOLECULES
      IF(MOLSAV.EQ.2) GO TO 870
C                          NO SPUTTERING IF COMING FROM SEMITRANSPARENT
      IF(IGAP.EQ.1) GO TO 870
      GO TO 710
C
C                     REDEPOSITION (STICKING) AND SPUTTERING
C                     --------------------------------------
C                     WE DEFINE "REDEPOSITED" EACH METAL PARTICLE
C                     COMING IN CONTACT WITH WALLS: AS SPUTTERED
C                     PARTICLES ARE SEPARATELY SCORED, THE DIFFERENCE
C                     REDEPOSITED-SPUTTERED GIVES CORRECTLY NET EROSION
C                     PROVIDED THE EFFECT OF FUEL IONS BE SCORED,
C                     I.E PARAMETER IONTOW=0 (OTHERWISE REDEPOSITION
C                     WILL APPEAR AS GREATER THAN SPUTTERING)
C
C                     (FOLLOWING STATEMENT REACHED ONLY BY
C                      NON-RECYCLABLE IMPURITIES;
C                      SPUTTERING BY FUEL/HELIUM/RECYC.IMPURITIES
C                      STARTS FROM   710 CONTINUE)
  690 IREAC=4
      IF(LDEBUG) WRITE(IOUT,691) TABLE(IPROJ,6)
  691 FORMAT(' WALL INTERACTION: NEUTRAL ',A4,' STICKS IN WALL')
CW    WRITE(6,*) '690 IREAC=4  IBIRTH=',IBIRTH,' IPROJ=',IPROJ
CW    WRITE(6,*) '             NTSPUT=',NTSPUT,' EPROJ=',EPROJ
C                     METAL PROJECTILE WITH WEIGHT W STICKS INTO WALL.
C                           THIS WEIGHT IS SCORED IN REDP(I,J).
C                           SPUTTERED WEIGHT SCORED IN WACOL,SPFUEL
C                           AND ELSEWHERE IN WBORN.
      IZO=IZONA(IRWALL)
      IF(IZO.LE.0) GO TO 700
C                           ONLY HEAVY PARTICLES STICK: HENCE, SCORE.
C                           ARRAY REDP(IZO,NUTRAL) COUNTS REDEPOSITIONS
      IF(ISCRED.EQ.0) GO TO 700
      REDP(IZO,NUTRAL)=REDP(IZO,NUTRAL)+W
      NZDEP=NUTRAL
      IZDEP=IZO
      WZDEP=W
  700 W=0.0
C                           REDEPOSITION  SPACE DISTRIBUTION
C                             (ISENTL=1 SCORE REQUIRED FOR THIS SIDE)
      IF(ISENTL.NE.1) GO TO 710
C                     SCORE SEPARATELY REDEP. GENERATED FROM FUEL&SONS
C                     FROM REDEP. GENERATED FROM HE&SONS
      IF(ISTHEL.NE.1)
     *REDFUE(IIL,KKL,NUTRAL)=REDFUE(IIL,KKL,NUTRAL)+WPROJ
      IF(ISTHEL.EQ.1)
     *REDHEL(IIL,KKL,NUTRAL)=REDHEL(IIL,KKL,NUTRAL)+WPROJ
C                           SPUTTERING AFTER REFLECTION OR
C                                            REEMISSION OR
C                                            STICKING
  710 CONTINUE
      IF(IBRTHR.EQ.0) THEN
        NUSPUT=LABEXT(ITARG)
      ELSE
C       STORE PARAMETERS OF RECYCLING ION IMPURITY AS PSEUDO SPUTTERING
        NUSPUT=IBRTHR
        ESPUT=E
        IZO=IZONA(IRWALL)
        IF(IPUFF.NE.1 .AND. NUSPUT.EQ.LIGHTW) THEN
          RNL=RNLITE
        ELSE
          RNL=1.0
        ENDIF
        IF(IZO.GT.0) THEN
          WACOL(NUSPUT,IZO,4)=WACOL(NUSPUT,IZO,4)+W
          ESCAPE(IZO,NUSPUT)=ESCAPE(IZO,NUSPUT)+W*(1.0-RNL)
        ENDIF
        W=W*RNL
        YLDRR=W
C       GOTO BANK AND POSSIBLY COME BACK FOR SPUTTERING
        GOTO 776
      ENDIF
  711 CONTINUE
C     COMPUTE SPUTTERING IF REQUIRED
      IF(LIGHTW.NE.0 .AND. MIMP.LE.0) GOTO 880
C
C     IF(LIGHTW.NE.0 .AND. MIMP.LE.0) NUSPUT=NCOM
CW    WRITE(6,*) '710          LIGHTW=',LIGHTW,' NUSPUT',NUSPUT
CT    IF(LIGHTW.NE.0 .AND. IPROJ.EQ.LABINT(LIGHTW)) THEN
CW    IF(LIGHTW.NE.0 .AND. IPROJ.NE.LABINT(LIGHTW)) THEN
CW      WRITE(6,*) ' 710 IPROJ=',IPROJ,' WPROJ=',WPROJ,' EPROJ=',EPROJ
CW      WRITE(6,*) '                     IREAC=',IREAC,' W=',W,' E=',E
CW      WRITE(6,*) '    NUSPUT=',NUSPUT
CW      WRITE(6,*) '    NTSPUT=',NTSPUT,' IBIRTH=',IBIRTH
CW    ENDIF
      COSPS=COSP
      SINPS=SINP
      COSTS=COST
      SINTS=SINT
      TANTS=TANT
CLDH
C
C.. SWITCH OFF SPUTTERING FOR CERTAIN MACRO-REGIONS
      LTRAN = .FALSE.
      DO 715 I = 1 , MSPOFF
C        IF( IMACRO(IRWALL).EQ.ISPOFF(I) ) THEN
         IF( IMACRO(IRWALL).EQ.ISPOFF(I) .OR. Y.LE.YNOSP ) THEN
             LTRAN = .TRUE.
             GOTO 716
         END IF
  715 CONTINUE
  716 CONTINUE
C
      IF ( (NTSPUT.EQ.0 .AND. IBIRTH.EQ.1) .OR. (ISPU.EQ.0)
     &     .OR. LTRAN ) THEN
C       PROJECTILE IS A NEUTRAL AND NO SPUTTERING IS REQUESTED
C       OR
C       NO SPUTTERING IS REQUIRED (E.G. FROM PUFF)
        YLD = 0.0
        ESPUT = 0.0
      ELSE
CW      WRITE(IUERR,*) ' WALINT SPUT IBIRTH,NTSPUT=',IBIRTH,NTSPUT
C       TWO USELESS STATEMENTS FOLLOW TO AVOID COMPILER WARNINGS
        YLDI = 0.0
        ESPUTI = 0.0
C       FOLLOWING BLOCK IS EXECUTED FOR PROJECTILES:
C     1) FUEL, HELIUM, NON-RECYCLABLE IMPURITIES (BOTH IONS AND
C        NEUTRALS, UNLESS NTSPUT=0, WHICH SWITCHES OFF SPUTTER.)
C     2) RECYCLABLE IMPURITY IONS
C        "STANDARD" IMPURITY PRODUCTION FROM IONS/NEUTRALS
        TWK = TEMPI(IRWALL)*1.1605E+04
        FD0 = DRIFTV(IRWALL)
        CALL SPUTER(IPROJ,EPROJ,ITARG,EPSKEV,POLAR,COSPOL,TWK,FD0,
     &              YLDI,1,ESPUTI,COSKT)
        YLD = YLDI
        ESPUT = ESPUTI
CW      WRITE(6,*) ' WALINT STANDARD 1 YLDI=',YLDI
      ENDIF
CLDH
C     IF(ISPU.EQ.0) THEN
C       WRITE(IUERR,*) ' ISPU=0, YLD=',YLD
C     ENDIF
      YIELD=WPROJ*YLD
CW    WRITE(6,*) ' WALINT YIELD=',YIELD
      IF(IBIRTH.EQ.0 .AND. NUTRAL.LE.NIONPM) THEN
        WPRSP = WPRSP + WPROJ
        EPRSP = EPRSP + WPROJ*EPROJ
        WTASP = WTASP + YIELD
        ETASP = ETASP + YIELD*ESPUT
      ENDIF
      IF(YIELD.LE.0.0) GO TO 795
      IF(ESPUT.GT.TAGLIO) GO TO 720
      IF(IBIRTH.NE.0) TRUNC=TRUNC+YIELD
      YIELD=0.0
      GO TO 795
C                           SCORE TOTAL SPUTTERING FROM WALL
C                                 -----
C     EXCLUDING FIRST COLL. FOR LIGHT PART.(UNLESS ION EFFECTS ARE REQ.)
C                                          (I.E. UNLESS IONTOW=1) ??=0 ?
  720 IZO=IZONA(IRWALL)
      IF(IZO.LE.0) GO TO 740
C      SPUTTERING FROM NEUTRALS
C OLD IF(NUTRAL.GT.NIONPM .OR. (NUTRAL.LE.NIONPM .AND. IBIRTH.EQ.1))
      IF(                                              IBIRTH.EQ.1 )
     *WACOL(NUSPUT,IZO,6)=WACOL(NUSPUT,IZO,6)+YIELD
C         SCORE SPUTTERING ALWAYS FOR HEAVY IMPUR. AVOID. TEST IBIRTH
      IF(NUTRAL.GT.NIONPM) GO TO 730
      IF(IONTOW.EQ.1.AND.IBIRTH.EQ.0) GO TO 740
  730 WACOL(NUSPUT,IZO,4)=WACOL(NUSPUT,IZO,4)+YIELD
      NZSPU=NUSPUT
      IZSPU=IZO
      WZSPU=YIELD
C               DO NOT SCORE ENERGY SUBTR. TO WALL BY HEAVY IMPURITIES
      IF(.TRUE.) GO TO 740
C  OMITTED
C  -------   DISTRIBUTION OF ENERGY SUBTRACTED FROM WALL BY YIELD
      CALL GRU(ESPUT,NGEV,EGEV(1),1,IG)
      ENFLUX(NUSPUT,IZO,IG)=ENFLUX(NUSPUT,IZO,IG)-YIELD*ESPUT
  740 CONTINUE
C                          SCORE SPUTTERING SPATIAL DISTRIBUTION
C                                           -------
C                 SCORES ONLY IF ISENTL=1 (I.E. SEGMENT NOT INTEREST.)
      IF(ISENTL.NE.1) GO TO 760
C                 SCORE SPUTTERING IN ANY CASE FOR IONIS.HEAVY IMPUR.
      IF(NUTRAL.GT.NIONPM) GO TO 750
C                           SCORE PLASMA IONS ONLY IF IONTOW=1
      IF(IONTOW.EQ.1.AND.IBIRTH.EQ.0) GO TO 760
C                   RECALL THAT EACH PARTICLE HAS AS PARENT FUEL OR HE
C                    SPUTTERING ORIGINATED FROM FUEL
  750 IF(ISTHEL.EQ.0)
     *SPFUEL(IIL,KKL,NUSPUT)=SPFUEL(IIL,KKL,NUSPUT)+YIELD
C                    SPUTTERING ORIGINATED FROM HE
      IF(ISTHEL.EQ.1)
     *SPUHEL(IIL,KKL,NUSPUT)=SPUHEL(IIL,KKL,NUSPUT)+YIELD
C               DO NOT SCORE ENERGY SUBTR. TO WALL BY HEAVY IMPURITIES
C                           RUSSIAN ROULETTE
  760 CONTINUE
      YLDRR=YIELD
      IF(DECIMA.GE.1.0 .OR. NUSPUT.EQ.LIGHTW) GOTO 775
      C=RANF()
      IF(C.LT.DECIMA) GO TO 770
      IF(DECIMA.GT.1.0E-04) WNP=WNP+YLDRR
      GO TO 795
  770 YLDRR=YLDRR/DECIMA
      IF(DECIMA.GT.1.0E-04) WRS=WRS+(YLDRR-YIELD)
C
C                           ASSIGN THE NORMAL AS "PRECOLLISION"
C                           DIRECTION TO S.R. DIDIMO
  775 CONTINUE
      COSP=COSPN
      SINP=SINPN
      COST=COSTN
      SINT=SINTN
      CALL DIDIMO
C                           STORE INTO SPLITTING BANK
  776 IF(NSPLIT.LT.MSPLIT) GO TO 790
  777 FORMAT('0HISTORY ',I7,
     *       '. SQUEEZING SPLITTING BANK FOR ',A4,' (',F5.2,')')
  780 CONTINUE
C       MAKE ROOM
      PSKILL=0.5
      KSTART=MSPLIT/5+1
      NSPLIT=KSTART-1
      DO J=1,MCP
        WTOT1(J)=0.0
        WTOT2(J)=0.0
      ENDDO
      DO K=1,KSTART-1
        NUSC=BANK(K,1)
        YLDC=BANK(K,2)
        WTOT1(NUSC)=WTOT1(NUSC)+YLDC
        WTOT2(NUSC)=WTOT2(NUSC)+YLDC
      ENDDO
      DO 781 K=KSTART,MSPLIT
        NUSC=BANK(K,1)
        YLDC=BANK(K,2)
        WTOT1(NUSC)=WTOT1(NUSC)+YLDC
C       RESET PREVIOUS SCORES
        WBORN(NUSC)=WBORN(NUSC)-YLDC
        HISTOR(NUSC)=HISTOR(NUSC)-1.0
        C=RANF()
        IF(C.LE.PSKILL) THEN
          WNP=WNP+YLDC
          BANK(K,2)=0.0
        ELSE
          YLDREV=YLDC/PSKILL
          WRS=WRS+YLDREV
          WBORN(NUSC)=WBORN(NUSC)+YLDREV
          HISTOR(NUSC)=HISTOR(NUSC)+1.0
          BANK(K,2)=YLDREV
          WTOT2(NUSC)=WTOT2(NUSC)+YLDREV
          NSPLIT=NSPLIT+1
        ENDIF
  781 CONTINUE
      TRAN1=0.0
      TRAN2=0.0
      DO J=1,MCP
        TRAN1=TRAN1+WTOT1(J)
        TRAN2=TRAN2+WTOT2(J)
      ENDDO
      WRITE(IUERR, 777 ) NHIST,TABLE(LABINT(NUSPUT),6),TRAN1/TRAN2
C     CONSERVE TOTAL PRODUCTION (VERY DIRTY)
      DO 782 K=1,MSPLIT
        J=BANK(K,1)
        IF(WTOT2(J).LE.0.0) GOTO 782
        BANK(K,2)=BANK(K,2)*(WTOT1(J)/WTOT2(J))
  782 CONTINUE
C       SQUEEZE
      DO 788 K=KSTART,NSPLIT
        IF(BANK(K,2).LE.0.0) THEN
          IMORE=0
          DO 783 L=K+1,MSPLIT
            IF(BANK(L,2).LE.0.0) GOTO 783
          IMORE=L-K
          GOTO 784
  783     CONTINUE
  784     CONTINUE
          DO 786 L=K,MSPLIT-IMORE
            DO 785 M=1,NBANK
              BANK(L,M)=BANK(L+IMORE,M)
  785       CONTINUE
            BANK(L+IMORE,2)=0.0
  786     CONTINUE
        ENDIF
  788 CONTINUE
      IF(NSPLIT.GE.MSPLIT) GOTO 780
C
  790 CONTINUE
      NSPLIT=NSPLIT+1
      IF(LDEBUG .OR. .FALSE.) WRITE(IOUT,791) TABLE(LABINT(NUSPUT),6)
  791 FORMAT(' WALL INTERACTION: NEUTRAL ',A4,' IS SPUTTERED')
CW    WRITE(IOUT,*) ' 790 IPROJ=',IPROJ,' WPROJ=',WPROJ,' EPROJ=',EPROJ
CW    WRITE(IOUT,*) '                     YLDRR=',YLDRR,' ESPUT=',ESPUT
      WBORN(NUSPUT)=WBORN(NUSPUT)+YLDRR
      HISTOR(NUSPUT)=HISTOR(NUSPUT)+1.0
      BANK(NSPLIT,1)=NUSPUT
      BANK(NSPLIT,2)=YLDRR
      BANK(NSPLIT,3)=ESPUT
      DWORD=X
      BANK(NSPLIT, 4)=SWORD(1)
      BANK(NSPLIT,22)=SWORD(2)
      DWORD=Y
      BANK(NSPLIT, 5)=SWORD(1)
      BANK(NSPLIT,23)=SWORD(2)
      DWORD=Z
      BANK(NSPLIT, 6)=SWORD(1)
      BANK(NSPLIT,24)=SWORD(2)
      BANK(NSPLIT,7)=IZ
      BANK(NSPLIT,8)=IR
      BANK(NSPLIT,9)=IREG
      BANK(NSPLIT,10)=IREG3D
      BANK(NSPLIT,11)=COSP
      BANK(NSPLIT,12)=SINP
      BANK(NSPLIT,13)=COST
      BANK(NSPLIT,14)=SINT
      BANK(NSPLIT,15)=1.0
C     (MEMORIZZA MOL=1.0)
C     IBRNPL=0 : SPUTTERED INTO VOID
C     IBRNPL=1 : SPUTTERED INTO PLASMA
      IBRNPS=0
      IF(DENSE(IREG3D).GT.0.0) IBRNPS=1
      BANK(NSPLIT,16)=IBRNPS
      BANK(NSPLIT,17)=0.0
      BANK(NSPLIT,18)=1.0
      BANK(NSPLIT,19)=IBIN
      BANK(NSPLIT,20)=CLOCK
      BANK(NSPLIT,21)=0.0
      ICX=0
      BANK(NSPLIT,25)=ICX
      MAXSON=MAX0(MAXSON,NSPLIT)
      MAXSOH=MAX0(MAXSOH,NSPLIT)
CWBANKWRITE(6,*) '  790 INTO BANK NUSPUT=',NUSPUT
      IZO=IZONA(IREG3D)
      LMACRO=IMACRO(IZO)
      SMACRO(LMACRO,1,NUSPUT)=SMACRO(LMACRO,1,NUSPUT)+YLDRR
C
      COSP=COSPS
      SINP=SINPS
      COST=COSTS
      SINT=SINTS
      TANT=TANTS
  795 CONTINUE
      IF( IBRTHR.NE.0 ) THEN
C       PREPARE TO COMPUTE SPUTTERING
        IBRTHR=0
C       SET WBRTHR SO AS TO SET THE RECYCLABLE IMPURITY'S
C       WEIGHT T0 ZERO AT EXIT, AFTER POSSIBLY SPUTTERING
C       OF WALL MATERIAL
        WBRTHR=0.0
        NUSPUT=LABEXT(ITARG)
        GOTO 711
      ELSE
        GOTO 870
      END IF
C
C     ALBEDO WALL
C     ===========
  800 IREAC=3
      ALBD=ALBEDO(IRWALL)
      IF(ILEAK(IRWALL).LE.0) GOTO 805
      ALBD=1.0
      C=RANF()
C     IF(A.GT.2.1)
C    *  WRITE(IUERR,*) ' IMPURITY',A,' ENTERING LEAK REGION'
      IF(C.LE.ALBEDO(IRWALL) .AND. IGAP.EQ.0) GOTO 805
C       SE VIENE DA UN GAP, RICICLARE CON CERTEZZA
C       MOVE THE NEUTRAL TO THE RECYCLING SEGMENT
      IF(LDEBUG)
     *WRITE(IOUT ,*) A,' ENTERS RCLEAK',ILEAK(IRWALL),
     *               X,Y,E,IMACRO(IZONA(IREG3D)),IGAP,
     *               PSEMIP(IREG3D,1),PSEMIP(IREG3D,2)
      LLEAK=1
      CALL RCLEAK(IRWALL)
      IF(LDEBUG)
     *WRITE(IOUT ,*) A,'  EXITS RCLEAK',ILEAK(IRWALL),
     *               X,Y,E,IMACRO(IZONA(IREG3D))
      IGAP=0
      GOTO 870
  805 CONTINUE
C--->     NOZPMP=1 -- THE PUMP DOES NOT PUMP IMPURITIES
      IF( NOZPMP.EQ.1 .AND. NUTRAL.GT.NIONPM
     &    .AND. ALBENE(IRWALL).LT.0.0 )
     &    GOTO 850
      W=W*ALBD
C     (EXCEPT FOR H-ATOMS PUMPED AWAY - SEE LATER)
C                             IMPURITIES?
C                             (RECALL THAT IN THIS S.R. "A" IS ALWAYS
C                             THE MASS OF AN ATOM.SINCE MOLECULAR BONDS
C                             ARE BROKEN AT THE ENTRANCE OF THE ROUTINE)
      IF(A.GT.4.0) GO TO 850
C                             H OR HE
      IF(IEMIS(IRWALL).EQ.2) GO TO 810
C                             REEMISSION AS ATOMS ONLY
      MOL=1
C                             NEW ENERGY ASSUMED EQUAL TO DISSOC. TEMP.
      E=TABLE(IPROJ,7)
C                             IF THE NEUTRAL IS NO H-ISOTOPE,
C                             THE NEW ENERGY IS THE WALL TEMPERATURE
      IF(E.LE.0.0) E=TEMPI(IRWALL)*1.5
      GO TO 860
C                             MIXED REEMISSION(ATOMS & MOLECULES)
C                             (AFTER E.S.HOTSTON-PRIVATE COMM.)
C                             CASE 1 : FUEL MOLECULE
  810 IF(MOLSAV.EQ.2) GO TO 830
C                             CASE 2 : COLD HELIUM ATOM
      IF(A.EQ.4.0.AND.E.LT.0.2) GO TO 840
      IF(A.EQ.4.0) GO TO 820
C                             CASE 3 : FUEL ATOM
      IF(ALBENE(IRWALL).LT.0.0) THEN
C       PUMP
        IF(.FALSE.) THEN
          W=0.0
          GOTO 870
        ELSE
C         PUMP H ATOMS LIKE MOLECULES
          E=TEMPI(IRWALL)*1.5
          GOTO 860
        ENDIF
      ENDIF
      C=RANF()
      IF(C.GT.ALBATO(IRWALL)) GO TO 830
      E=E*ALBENE(IRWALL)
      IF(E.EQ.0.0) E=TEMPI(IRWALL)*1.5
      GO TO 860
C                             CASE 4 : ENERGETIC HELIUM ATOM
  820 C=RANF()
      IF(C.GT.ALBATO(IRWALL)) GO TO 840
      E=E*ALBENE(IRWALL)
      IF(E.LE.0.0) E=TEMPI(IRWALL)*1.5
      GO TO 860
C                             REEMISSION AS MOLECULES
  830 MOL=2
C                             STORE THE IMPLANTED PART
      WACOL(NUTRAL,IZONA(IRWALL),13)=WACOL(NUTRAL,IZONA(IRWALL),13)+W
      NUTRAL=MOLEC(NUTRAL)
      W=W*0.5
      A=A*2.0
  840 E=TEMPI(IRWALL)*1.5
      GO TO 860
C                             ENERGY OF AN ALBEDOED IMPURITY
  850 CONTINUE
      E=E
C                             COMMON TO BOTH ATOMS AND MOLECULES
C                           COSINE-LAW REFLECTION LAW
  860 CALL COSLAW(COSKT,2)
C                           ASSIGN THE NORMAL AS "PRECOLLISION"
C                           DIRECTION TO S.R. DIDIMO
      COSP=COSPN
      SINP=SINPN
      COST=COSTN
      SINT=SINTN
      CALL DIDIMO
C
  870 CONTINUE
C                           1)ENERGY SUBTRACTED FROM WALL SEGMENT:E*W;
C                           2)ENERGY GIVEN TO WALL IF TWO ATOMS
C                             RECOMBINE TO FORM A MOLECULE : 4.4EV
      IF(IBIRTH.EQ.0.AND.IONTOW.EQ.1) GO TO 880
      IF(NUTRAL.GT.NIONPM) GO TO 880
      TRAN=0.0
      IF(MOLSAV.EQ.1.AND.MOL.EQ.2) TRAN=4.4
      IF(ISENTL.EQ.0 .OR. E.LE.TAGLIO) GO TO 880
      TRAN1=W*(E-TRAN)
      QDEPL(IIL,KKL)=QDEPL(IIL,KKL)-TRAN1
C        SCORE TOTAL ENERGY ON EACH SURFACE, SEPAR. HYD. CONTR. FROM HE
      IF(ISTHEL.EQ.0) TARLHY(IIL)=TARLHY(IIL)-TRAN1
      IF(ISTHEL.EQ.1) TARLHE(IIL)=TARLHE(IIL)-TRAN1
C
  880 CONTINUE
C     EVEN IF AN IMPURITY IS RECYCLABLE, THE INITIAL ION NEUTRALISATION
C     IS TREATED AS SPUTTERING AND PUT INTO SPLITTING BANK. TO AVOID
C     DOUBLE COUNTING, SET ITS WEIGHT TO ZERO.
      W=W*WBRTHR
C
  900 CONTINUE
      IF(COSPOL.EQ.UNDEF) THEN
        WRITE(IUERR,*) ' WALINT. NORMAL IS UNDEFINED', COSPOL,UNDEF
        IR=-8
      ELSE
CW      WRITE(IUERR,*) ' WALINT. COSPOL =', COSPOL
      ENDIF
      RETURN
      END
C.......................................................................
C.......................................................................
      SUBROUTINE RUN(ISTEP)
C
C     HISTORY SIMULATION
C
C----------------------------------(SEE SYMBOLS MEANING IN S.R. INPUT)
      INCLUDE 'pnimb'
      PARAMETER (MRG=MRGX ,MZN=MRG-2 ,MCH=41 ,MCC=MCCX, MWAC=13 )
      PARAMETER (MBS=MBSX ,MSD=MBS   ,MSC=2 )
      PARAMETER (MIO=3    ,MCP=6)
      PARAMETER (MEG=5    ,MIXS=10   ,MLEAK=9)
C---------------------------------------------------
      COMMON/MAXIMS/MSCAN,MNTARG
C
      COMMON/IOFILE/IN,IOUT,IUERR,IARK,IPUNCH,IGMT,ITRMT,ITAPIO(2)
C
      PARAMETER (NDEBUG=17,MSPLIT=500,NBANK=25)
      PARAMETER (MDEBWR=30,MDEBPT=200)
      COMMON/CHISTO/KOSE,KOST,NHIST,NST,FNST,NSG,FNSG,
     * INIZ,ICORR,KINDPR,NEDIT,ISTHEL,IHOR,
     * DECIMA,PLIFE,WTHRES,TAGLIO,WCUT,NGEV,EGEV(MEG),TCUT,
     * IDEBIN,IDLOOP,IDEBUG,KODDBG,IHDBG,ICDBG,DEBUG(NDEBUG),
     * NDEBWR,NDEBPT,IDBHST(MDEBWR),
     * NSPLIT,MAXSON,MAXSOH,BANK(MSPLIT,NBANK),WPESO(MRG)
     *,IREAD,IWRITE,IBEAM,IONTOW,IDMC,IDMCO
C
      PARAMETER (MZSOUR=13, MSOUXY=14)
      COMMON/SOURCE/
     * HHESRC,SRECYC,SRECOM,WSOUR1,NSEGS,SOTEMP(MBS),STMOUT,TIMINF,
     * WSOSEG(MBS,MIO),NSEGSO,KORSEG(MBS),LAYSEG(MBS),YTMOUT,
     * X1SOUR(MBS),Y1SOUR(MBS),X2SOUR(MBS),Y2SOUR(MBS),ZSOURC(MCP),
     * FISOU(MBS),SFISOU(MBS),CFISOU(MBS),WDS(MBS,5),IZOENT,
     * NZSOUR,SREGZ(MZSOUR),DREGZ(MZSOUR),WSOIMP(MBS,MCP),
     * NSOUXY,TSOUXY(MSOUXY),WSOUXY(MSOUXY),ISOUXY(MSOUXY),
     * CSOUXY(8,MSOUXY),HSOUXY(MSOUXY),DSOUXY(MSOUXY),ITYSEG(MBS),
     * ICHTAR(MBS),ISCHAN,SOUNEW(MBS),QIMP(MBS,MCP),PUFIMP(MCP),
     * WREG(1),WSEF(1),KOISEF(1),KOSDE(1),NTARG,KO2DIR(MRG),KO3D2D(MRG)
     *,IRECO,IMOMSO,NOZPMP,MODEZR,SNVOL(MRG*MIO),SNV(MRG,MIO)
     *,PUFFRA(MBS,MCP),PUFFXY(MSOUXY),TPUFFH,TPUFFZ
C
      COMMON/CGEOM2/LOCREG(6),NUMR,LBASE(3),IDBCG,KLOOP,PINF,LKOR,NOA(2)
     *,NOREG,LVOL,LAREA,LNUMR,LAIRC,LVOLTR,LLASTG,IRWGMT,NRTRU
      REAL*8 PINF
C
      PARAMETER ( NWCOMB=NWCOMX )
      COMMON/COMBIN/MASTER(NWCOMB)
      DIMENSION ASTER(NWCOMB)
      EQUIVALENCE(MASTER(1),ASTER(1))
C
      COMMON/CGEOMT/KREG,KREGM1,IR3DST,IR2DST,AREAD(MRG),
     * KONDC,KONDZ,I3D,KREG3D,LREG3D,LQUOTA,LDZETA,KSXY3D,NZETA
C
      COMMON/STOGEO/IR,IREG,IREG3D,ISENT,LEAVES,XIN,YIN,ZIN,
     * COSP,SINP,COST,SINT,TANT,COSKT,DIST,PILX,IRZ,IREGZ,IREG3Z,
     * IZIN,IZ,ISSOU,X,Y,Z
      REAL*8 X,Y,Z
C
      REAL*8 DWORD
      REAL*4 SWORD(2)
      EQUIVALENCE (DWORD,SWORD(1))
C
      COMMON/COMPOS/NION,NCOM,LIGHTW,RNLITE,EWLITE,
     * SYMB(MIO),PERC(MIO),DENSE(MRG),DENSI(MRG,MIO),EATMD,EATMR,
     * TEMPE(MRG),TEMPI(MRG),IBOUND(MRG),ALBEDO(MRG),LIWALL(MRG),COEFMX
     *,IEMIS(MRG),BEXPT(MRG),WEXPT(MRG,3),SHP,DRIFTV(MRG),DRIFTC(MRG,3)
     *,ISTARG(MRG),CHARGE(MCP),PROREQ(4),ALBATO(MRG),ALBENE(MRG),INDHEL
     *,NTSPUT,PSEMIP(MRG,2),IRTRIM(MCP,MCP),NFTRIM,LPVOID,DCUTCX,TCUTCX
     *,ICUTCX,INDEF,IYCHEM,EYCHEM,AYCHEM,NLEAK,XLEAK(4,MLEAK),ILEAK(MRG)
     *,NZREC,NUTRLZ(MCP),MIMP,IGOPT,PRORCL(MIO),UNDEF
     *,NZYIZ,CZYIZ(MCP),AYIZ(MCP),BYIZ(MCP),EYIZ(MCP),IYIZ(MCP),ALFCH7
     *,PARDIR(MRG,3),RECMAT(MIO,MIO,MRG)
C
      PARAMETER (NCT=24,MKES=4)
      COMMON/CTAB0/TABLE(NCT,11),IZLOZ(0:100)
      COMMON/CTABLE/SPUTAB(NCT,NCT)
     *,LABINT(MCP),LABEXT(NCT),IXS(MIXS),ITRIM
     *,NIONPM,MCX,MOLEC(MCP),IATOM(MCP),EXTSYM(MCP),QESP(NCT,NCT)
     *,EB(NCT),QCOEF(NCT),TLOTZ(NCT,26),CXRMAX(5,MRG),ESRMAX(MKES,MRG)
     *,TBELL(NCT,26),ITAGS(NCT,NCT,2)
C
      COMMON/ADASC/IHYR,IZYR,IDYR,USADAS
      CHARACTER*80 USADAS
C
      COMMON/PHYSIC/WSTART,WGAME,W,NUTRAL,MOL,A,E,CLOCK,IBIN,IBRNPL,
     * SIGT,SIGIT,SIGCXT,SIGEST,SIGST,SIGSTS,IDMOL,DISH2S(MRG),
     * ELECTR(MRG,MCP),SIGE,SIGI(MIO),SIGCX(MIO),SIGEL(MIO),
     * DISH2(MRG),DIOH2(MRG)
     *,SVI,SVCX(MIO)
C
      COMMON/CSCAT/IPROJ,IONHIT,ATARG,ER,EREL,SCX,SES,SST
C
      PARAMETER (MAXZET=12, MH=14, MZADJ=MZN*6, MEIBOR=MZADJ*2)
      PARAMETER (MMACRO=30+1)
      COMMON/SCORE/NAZONE,NDUM,NZONE,IZONA(MRG),VOLZ(MZN),IBOUNZ(MZN),
     * ELAST(MZN,MCP),FLUXZ(MZN,MAXZET),ESCAPE(MZN,MCP),REDP(MZN,MCP),
     * ABSOR(MZN,MCP),ELOST(MCP,MZN),WACOL(MCP,MZN,MWAC),
     * QF(MCH,MCC,8),QI(MCH,MCC,8),AF(MCH,MCC,8),AI(MCH,MCC,8),SAG(MCP),
     * FLUX(MZN,MCP),ENNE(MZN,MCP),EAVER(MZN,MCP,2),ENFLUX(MCP,MZN,MEG),
     * CEXED(MZN,MCP),DISSOC(MZN,MCP),TRAMAT(1,1,1),WBORN(MCP),
     * HISTOR(MCP),COLS,FUGA,ESCEN(MZN,MCP),REDFUE(MSD,MSC,MCP),
     * ZENTRY(MCP,MCH),WNP,WRS,COLW,TRUNC,NLATS,IS,IDELAT(MSD,3),
     * SCALAT(MSD,MSC),SPFUEL(MSD,MSC,MCP),QDEPL(MSD,MSC),SPIN(MCP),
     * ERECYC(MCP,MZN,2),PRECYC(MCP,MZN,3),NCHAN,NZCHAN(MCC),ICHAN(MZN),
     * MZCHAN,IZCHAN(MCH,MCC),SPAREA(MSD,MSC),DENSEZ(MZN),TEMPEZ(MZN),
     * YEARFR,TARLHY(MSD),TARLHE(MSD),REDHEL(MSD,MSC,MCP),PIONW,PINEFW,
     * TLONWI,PIONRE,PMOLR1,PMOLR2,AALB,QALB,AHENR,QHENR,AHETP,QHETP
     *,SPUHEL(MSD,MSC,MCP),ECHBEM(1,1),ELOBEM(1,1),VELOC(MZN,MCP,3)
     *,WPRSP,EPRSP,WTASP,ETASP,SIGMAN(MZN,6),WNBR(MZADJ,2)
     *,NEIBOR(MEIBOR),LOCNBR(MZN),NMACRO,IMACRO(MZN),COSNOR
     *,ISPOFF(MMACRO-1),IPVOID,TSUBD,ITAU,MSPOFF,YNOSP
C
      REAL*8 FLUXZ,ESCAPE,ELAST,REDP,ABSOR,WACOL,SPIN,
     * FLUX,ENNE,EAVER,ENFLUX,CEXED,WNBR,
     * DISSOC,TRAMAT,SAG,WBORN,HISTOR,COLS,FUGA,ESCEN,WNP,WRS,COLW,TRUNC
     *,SPFUEL,ERECYC,PRECYC,REDFUE,QDEPL,ZENTRY,SPUHEL,ECHBEM,ELOST
     *,ELOBEM,REDHEL,TARLHY,TARLHE,VELOC
     *,WPRSP,EPRSP,WTASP,ETASP,SIGMAN
C
      CHARACTER*80 LABRUN(2)
      COMMON /CCHAR/LABRUN
C
C------------- COMMENT OUT NON-APPROPRIATE BLOCK ---
C
C     PARAMETER ( NHORT=1 )
C
      PARAMETER ( NHORT=MZN )
C
C---------------------------------------------------
      REAL*8    HORTON(NHORT,3,MH)
C
      COMMON/CJUNK/MCOLP,MCOLW,NCOLP(2),NCOLW,ICUPR,IERAND,ISEHHE,ISFLAG
     &     ,ITEST,RTEST
C
C                  TO SAVE SCORES IN C.B. /SCORE/
      PARAMETER( NSCORE = 1 )
      REAL*8 SCOREC,SCOSAV
      DIMENSION SCOREC(NSCORE),SCOSAV(NSCORE)
C------- A CAUSA DELLA MEMORIA RICHIESTA IL RERUN E' DISATTIVATO
      EQUIVALENCE(SCOREC(1),FLUXZ(1,1))
C
C     INCID NOT IN COMMON BUT TO BE FILED
C
      PARAMETER (MILLE=10000)
      COMMON/COMUNE/BUFFER(MILLE),IBUFER(MILLE)
C
      LOGICAL LDEBUG
C
      COMMON/WALDBG/RN,RE,POLAR
C
      INTEGER ALFABE(37)
      INTEGER ALFAN(37)
C
C     VETTORI LOCALI
C     --------------
C
      DIMENSION EROTOT(MSD*MSC),REDTOT(MSD*MSC)
     *,ERONET(MSD*MSC),TERTOT(MSD*MSC)
C
      DIMENSION POWRAD(MCP),HALRAD(MCP)
      REAL*8 POWRAD
      DIMENSION AXDIST(MAXZET),KENTRY(MCP),CHANEL(MBS),NORDIN(MCH)
     *,BUFF(MCH,MCC,MIO)
C
      DIMENSION PUNACS(3,MIO),PUNMCS(3,MIO),TOTION(3),TOTES(2)
      DIMENSION PUNASV(2),PUNMSV(1)
      REAL*8 ERECEL(MCP,MZN),PRECEL(MCP,MZN)
      REAL*8 ERECCX(MCP,MZN)
      DIMENSION PUNSOU(4,2)
C     PUNSOU(1,A/M) = ELASTIC SCATTERING ENERGY SOURCE
C            2      = ELASTIC SCATTERING PARALLEL MOMENTUM SOURCE
C            3      = C.X. ENERGY SOURCE
C            4      = C.X. PARALLEL MOMENTUM SOURCE
C
      DIMENSION PUNION(MIO),PUNADN(MIO),PUNAEN(MIO),PUNMDN(MIO),
     &          PUNMEN(MIO),PUNAE0(MIO),DAHFR(MIO)
      DIMENSION PUNZIO(MCP-MIO),PUNZDN(MCP-MIO),PUNZEN(MCP-MIO)
C
      PARAMETER (MINCID = 1 000 000 000 )
C
C.... DATA NSCORE/1/  :: MOVED TO A PARAMETER STATEMENT
      DATA XCHAR/1HX/, YCHAR/1HY/,HELIUM/4HHE  /
      DATA ALFABE/1H1,1H2,1H3,1H4,1H5,1H6,1H7,1H8,1H9,1HA,
     *            1HB,1HC,1HD,1HE,1HF,1HG,1HH,1HI,1HJ,1HK,
     *            1HL,1HM,1HN,1HO,1HP,1HQ,1HR,1HS,1HT,1HU,
     *            1HV,1HW,1HX,1HY,1HZ,1H ,1H*/
C
      DATA ISTAR2/2H**/
C
      DIMENSION XDEBWR(MDEBWR,MDEBPT,3),KDEBWR(MDEBWR)
     *        , NDBHST(MDEBWR)
C
      PARAMETER (MDSTSR=50)
      DIMENSION DISTSR(MDSTSR)
C
      REAL*8 SOURCE(MZN,3)
      REAL*8 SUMFLT,SUMFLP(2),SUMFLW(2),SUMFLC(2),SUMSOP(3),SUMESC
C
      COMMON/CMACRO/
     *       SMACRO(MMACRO,5,MCP),FMACRO(MMACRO,MMACRO,MCP)
     *     , VMACRO(MMACRO),PMACRO(MMACRO,4,MCP)
      REAL*8 SMACRO,FMACRO,VMACRO,PMACRO
C
      PARAMETER (IMN=1)
C     SMACRO(I,1) = H-IONS     RECYCLED IN MACRO-ZONE I
C     SMACRO(I,2) = H-NEUTRALS  IONISED IN MACRO-ZONE I (ANALOG)
C     SMACRO(I,3) = H-NEUTRALS R.R.BORN IN MACRO-ZONE I
C     SMACRO(I,4) = H-IONS   RECOMBINED IN MACRO-ZONE I
C     SMACRO(I,5) = H-IONS    ESCAPED FROM MACRO-ZONE I
C     FMACRO(I,J) = H NEUTRALS FROM MACRO-ZONE I INTO MACRO-ZONE J
C     PMACRO(I,1) = H-ALPHA RADIATION   IN MACRO ZONE I (FROM PROFILES)
C     PMACRO(I,2) = H-NEUTRALS  IONIZED IN MACRO-ZONE I     "
C     PMACRO(I,3) = H-NEUTRALS  CONTENT IN MACRO-ZONE I     "
C     PMACRO(I,4) = H-NEUTRAL ENE.CONT. IN MACRO-ZONE I     "
C
      REAL*8 BS,GS2
      COMMON /CESPAR/BS,GS2,L,K,ID,NERELA
C
CT    REAL*8 PARET1,PARET2,PARET3,PARET4
CT    PARET1=0.0D0
CT    PARET2=0.0D0
CT    PARET3=0.0D0
CT    PARET4=0.0D0
C
      LOGICAL LOGIC , LDEBWR
CC    REAL*8 GAMMAN(MCP,MZN)
CC    EQUIVALENCE(WACOL(1,1,8),GAMMAN(1,1))
CC    REAL*8 GAMMAI(MCP,MZN)
CC    EQUIVALENCE(WACOL(1,1,9),GAMMAI(1,1))
C
      REAL*8 TIMOUT(MCP),EGA(MCP),AGEH(3)
      REAL*8 WHTOT
C
      REAL*8 SMLEAK(MCP)
C
      REAL*8 FAXSOH
C
      REAL*8 SUMSPU(MCP),SUMSPN(MCP),SUMIMP(MCP),SUMNES(MCP)
     &      ,SUMNEA(MCP),SUMNLK(MCP),SUMZLK(MCP),SUMION(MCP)
      CHARACTER*12 CHARSP
C
      REAL*8 ENNEH(MZN,MCP)
C
      ICUTCX = 0
C
      IF( IHOR.NE.0 .AND. NHORT.NE.MZN ) THEN
          WRITE(IUERR,*) ' *** NIMBUS ERROR *** HORTON DIMENSION SIZE'
          CALL EXITN(1)
      END IF
C
      DO 5 I=1,MZN
        LOCNBR(I)=0
    5 CONTINUE
      DO 6 I=1,MZADJ
        WNBR(I,1)=0.0D0
        WNBR(I,2)=0.0D0
    6 CONTINUE
      LASTNB=0
C
      DO 8 I=1,NMACRO
        DO L=1,MCP
          DO J=1,5
            SMACRO(I,J,L)=0.0D0
          ENDDO
          DO J=1,NMACRO
            FMACRO(I,J,L)=0.0D0
          ENDDO
        ENDDO
        VMACRO(I)=0.0
    8 CONTINUE
CT    TRAN=0.0
      DO 9 IZO=1,NZONE
        IF(IBOUNZ(IZO).NE.0) GOTO 9
        LMACRO=IMACRO(IZO)
        VMACRO(LMACRO)=VMACRO(LMACRO)+VOLZ(IZO)
CW      IF(LMACRO.EQ.NMACRO) WRITE(6,*) ' IZO=',IZO,' AREA=',VOLZ(IZO)
CT      TRAN=TRAN+VOLZ(IZO)
    9 CONTINUE
C
      IDEBWR=0
      Z=0.0
C
      IC=INIZ
C
      IF(IREAD.EQ.0) GO TO 60
C
C     READ FROM RESTART TAPE
C     ----------------------
      REWIND IARK
      READ(IARK) KOST,COLS,SPIN,WACOL,FUGA,FLUX,ABSOR,ELAST,
     * CEXED,ENNE,EAVER,ESCAPE,REDP,FLUXZ,ENFLUX,MAXSON,INCID,IC,
     * JOB,WNP,WRS,COLW,TRUNC,SAG,WBORN,HISTOR,DISSOC,TRAMAT,ESCEN
     *,SPFUEL,ERECYC,PRECYC,REDFUE,QDEPL,ZENTRY,SPUHEL,ECHBEM,ELOST
     *,ELOBEM,REDHEL,TARLHY,TARLHE,QF,QI,AF,AI,PIONW,PINEFW,TLONWI
     *,PIONRE,PMOLR1,PMOLR2,AALB,QALB,AHENR,QHENR,AHETP,QHETP,VELOC
     *,SIGMAN,IBIN,LOCNBR,NEIBOR,WNBR,SOURCE,LASTNB,ICORR
     *,SMACRO,NMACRO,ERECEL,ERECCX,PRECEL,TIMOUT,EGA,AGEH,SMLEAK
     *,FAXSOH,ENNEH,NERELA
      IF(JOB.EQ.IREAD) GO TO 20
      WRITE(IUERR, 10 ) JOB
   10 FORMAT(/' ERROR: JOB FILED IS N.',I3)
      CALL EXITN(1)
   20 WRITE(IOUT, 30 ) KOST,IC
   30 FORMAT(//' RESTART FILE READ. HISTORIES PREVIOUSLY RUN',I7,
     * ', LAST RANDOM INTEGER WAS',I12)
C                    HISTORIES REMAINING TO RUN
      MEM=NST-KOST
      IF(MOD(MEM,NSG).EQ.0) GO TO 50
C                    RESTART WITH FEW HISTORIES
      NSG=MEM
      FNSG=NSG
      WRITE(IOUT, 40 ) MEM
   40 FORMAT(' UPDATED HISTORIES/BATCH',I7)
C
   50 REWIND IARK
      GO TO 240
C
   60 KOST=0
      COLS=0.0
      COLW=0.0
      TRUNC=0.0
      WNP=0.0
      WRS=0.0
      FUGA=0.0
      PIONW=0.0
      PIONRE=0.0
      PMOLR1=0.0
      PMOLR2=0.0
      PINEFW=0.0
      TLONWI=0.0
      WPRSP=0.0
      EPRSP=0.0
      WTASP=0.0
      ETASP=0.0
C                        AF=AVERAGES OF FUEL  QF= THEIR SQUARES
C                        AI=AVERAGES OF IMP.  QI= THEIR SQUARES (HELIUM)
C                      (THE 7-TH COMPONENT USED ONLY IN AF,QF FOR ION 1)
C                      AALB=AVERAGE ALBEDO  QALB= ITS SQUARE
C                     AHENR=AVERAGE HE ENRICHMENT, QHENR ITS SQUARE
C                     AHETP=AVERAGE HE GOING TO PUMP, QHETP ITS SQUARE
      DO 70 I=1,MCH
      DO 70 J=1,MZCHAN
      DO 70 K=1,8
      QF(I,J,K)=0.0
      QI(I,J,K)=0.0
      AF(I,J,K)=0.0
      AI(I,J,K)=0.0
   70 CONTINUE
      AALB= 0.0
      QALB= 0.0
      AHENR=0.0
      QHENR=0.0
      AHETP=0.0
      QHETP=0.0
C
      DO 80 K=1,NCOM
      POWRAD(K)=0.0
C     DO 80 I=1,MCH
C     ECHBEM(K,I)=0.0    NO LONGER COMPUTED
C     ELOBEM(K,I)=0.0    NO LONGER COMPUTED
C     DO 70 J=1,MCH      TRANSITION MATRICES STILL PRESENT BUT NO LONGER
C     TRAMAT(K,I,J)=0.0  COMPUTED BECAUSE TOO MANY CHANNELS NOW
   80 CONTINUE
      DO 130 I=1,NZONE
        DO L=1,6
          SIGMAN(I,L)=0.0D0
        ENDDO
        SOURCE(I,1)=0.0D0
        SOURCE(I,2)=0.0D0
        SOURCE(I,3)=0.0D0
        DO 90 K=1,NCOM
          FLUX(I,K)=0.0
          ABSOR(I,K)=0.0
          ELOST(K,I)=0.0
          CEXED(I,K)=0.0
          ELAST(I,K)=0.0
          DISSOC(I,K)=0.0
          ENNE(I,K)=0.0
          ENNEH(I,K)=0.0
          VELOC(I,K,1)=0.0
          VELOC(I,K,2)=0.0
          VELOC(I,K,3)=0.0
          EAVER(I,K,1)=0.0
          EAVER(I,K,2)=0.0
          REDP(I,K)=0.0
          ESCEN(I,K)=0.0
          ESCAPE(I,K)=0.0
   90   CONTINUE
        IF(IHOR.NE.0) THEN
C         ALL FUEL LUMPED TOGETHER
          DO L=1,MH
            HORTON(I,1,L)=0.0D0
            HORTON(I,2,L)=0.0D0
            HORTON(I,3,L)=0.0D0
          ENDDO
        ENDIF
        IF(NZETA.LE.0) GO TO 110
        DO 100 K=1,NZETA
          FLUXZ(I,K)=0.0
  100   CONTINUE
  110   DO 120 L=1,NCOM
        DO 120 K=1,NGEV
          ENFLUX(L,I,K)=0.0
  120   CONTINUE
  130 CONTINUE
      DO 170 I=1,NCOM
        DO 160 L=1,NZONE
          ERECYC(I,L,1)=0.0
          ERECYC(I,L,2)=0.0
          ERECCX(I,L)=0.0
          ERECEL(I,L)=0.0
          PRECEL(I,L)=0.0
          DO 140 J=1,3
            PRECYC(I,L,J)=0.0
  140     CONTINUE
          DO 150 J=1,MWAC
            WACOL(I,L,J)=0.0
  150     CONTINUE
C         GAMMAN(I,L)=0.0D0
C         GAMMAI(I,L)=0.0D0
  160   CONTINUE
        SPIN(I)=0.0
        WBORN(I)=0.0
        HISTOR(I)=0.0
        SAG(I)=0.0
        TIMOUT(I)=0.0D0
        EGA(I)=0.0
        SMLEAK(I)=0.0D0
  170 CONTINUE
      AGEH(1)=0.0D0
      AGEH(2)=0.0D0
      AGEH(3)=0.0D0
      IF(NSEGS.LE.0)GO TO 190
      DO 180 I=1,NCOM
      ITRAN=MCH
      DO 180 K=1,ITRAN
  180 ZENTRY(I,K)=0.0
  190 IF(NLATS.LE.0) GO TO 230
      DO 220 I=1,NLATS
C                      TARLHY(I)=THERMAL LOAD ON SURFACE I DUE TO FUEL
C                      TARLHE(I)=THERMAL LOAD ON SURFACE I DUE TO HELIUM
      TARLHY(I)=0.0
      TARLHE(I)=0.0
      K=IDELAT(I,2)
      DO 210 J=1,K
      DO 200 L=1,NCOM
      REDFUE(I,J,L)=0.0
C              REDFUE=REDEPOS. ORIG. FROM FUEL&SONS, REDHEL FROM HE&SONS
      REDHEL(I,J,L)=0.0
      SPUHEL(I,J,L)=0.0
  200 SPFUEL(I,J,L)=0.0
      QDEPL(I,J)=0.0
  210 CONTINUE
  220 CONTINUE
  230 CONTINUE
      MAXSON=0
      FAXSOH=0.0
      INCID=0
      NERELA=0
C
  240 CONTINUE
      IF(IOUT.NE.IUERR) WRITE(IUERR,242)
  242 FORMAT(/1X,119('-'))
C                    SET INITIAL RANDOM NUMBER
      INIZST=IC
      IF(ICORR.EQ.0) THEN
        CALL RANSET(INIZST)
      ELSE
        DO 245 K=11,30
          MHIST = 2**K
          IF(MHIST.GE.ICORR) GOTO 246
  245   CONTINUE
        WRITE(IUERR,*) ' ***** ERROR: TOO MANY CORRELATED HISTORIES'
        CALL EXITN(1)
  246   CONTINUE
        CALL CORSET(MHIST,MAXRND)
        WRITE(IUERR,247) MHIST,MAXRND
  247   FORMAT(/'       MAX.NO. OF CORRELATED HISTORIES=',I7
     &         /' MAX.NO. OF RANDOM NUMBERS PER HISTORY=',I7/)
      ENDIF
C
      HHESRC=SRECYC+SRECOM
      WHTOT=0.0
      WHS=0.0
      WIS=1.0
      NHRTVD=0
      NHSTRD=0
      NHSRC=0
      NZRTVD=0
      NZSTRD=0
      IF(TCUT.LT.TIMINF) THEN
        WRITE(IUERR,280) ABS(TCUT),ITAPIO,ISTEP
  280   FORMAT('0TIME-DEPENDENT SIMULATION FOR ',1P,E9.3,' SEC'/
     &         ' BUFFER UNITS',2I3/
     &         '    TIME STEP',I3)
C
        ITSIM=1
        IF(TCUT.GT.0.0) THEN
          IRTANK=1
        ELSE
C         NO PREVIOUS TIME SLICES. WRITE ONLY
          TCUT=-TCUT
          IRTANK=0
        ENDIF
        IF(IRTANK.NE.0) THEN
          CALL RDTANK (-1,ITAPIO(1),IDMCO,
     &         NST,NION,NIONPM,NCOM,TCUT,
     &         NUTRAL,W,E,X,Y,Z,IZ,IR,IREG,IREG3D,
     &         COSP,SINP,COST,SINT,AGE,
     &         IBIN,IGAP,ITSOU,ITRAN,
     &         IFLAG,NHBUFI,GHBUFI,GZBUFI
     &                )
          IF(NST.LE.NHBUFI) THEN
            WRITE(IUERR,*) ' **** ERROR: NST <= NHBUFI'
            CALL EXITN(1)
          ENDIF
          STMOUT=GHBUFI
          YTMOUT=GZBUFI
          HHESRC=HHESRC+STMOUT
          WHS=FLOAT(NST)/FLOAT(NHBUFI)*STMOUT/HHESRC
          WIS=FLOAT(NST)/FLOAT(NST-NHBUFI)*(HHESRC-STMOUT)/HHESRC
          WRITE(IUERR,285) WHS,WIS
  285     FORMAT(/'   WEIGHT OF RECOVERED HISTORIES :',1P,E10.3/
     &            '     "    "     NEW        "     :',E10.3)
        ENDIF
        CALL WRTANK (-1,ITAPIO(2),IDMC,ITRAN,
     &       TRAN,ITRAN,NION,NIONPM,NCOM,TCUT,
     &       NUTRAL,W,E,X,Y,Z,IZ,IR,IREG,IREG3D,
     &       COSP,SINP,COST,SINT,AGE,
     &       IBIN,IGAP,ITSOU,ITRAN
     &              )
      ELSE
        ITSIM=0
        IRTANK=0
      ENDIF
C
      WTHRES=0.0
C
      ISTAMP=0
      IF(NST.LE.KOST) GO TO 1130
C
      IF(IDEBUG.NE.0) WRITE(IOUT, 290 )
  290 FORMAT('1',30X,'HISTORY DEBUG'
     *       /5X,'HISTORY  IR IREG ISE GP NEU    X       Y       SINP
     * COSP DIST/POL SGT/RN    E        W    3D    Z     IZ    SINT    C
     *OST  LV')
C
C                               START A BATCH
  300 KOSE=0
C
C     START A HISTORY
C     ---------------
  310 KOSE=KOSE+1
      NHIST=KOST+KOSE
CW    WRITE(IOUT,*) ' NHIST=',NHIST-1,' COLS=',COLS,' COLW=',COLW
      IERUN=0
C
      NCOLP(1)=0
      NCOLP(2)=0
      NCOLW=0
      MAXSOH=0
C
      IF(IDEBWR.LT.NDEBWR.AND.LINDEX(NDEBWR,IDBHST(1),NHIST).GT.0) THEN
        IDEBWR=IDEBWR+1
        NDBHST(IDEBWR)=NHIST
        KDEBWR(IDEBWR)=0
        LDEBWR=.TRUE.
      ELSE
        LDEBWR=.FALSE.
      ENDIF
C
C                          SAVE SCORES IN CASE OF GEOMETRY ACCIDENT
      DO 320 K=1,NSCORE
  320 SCOSAV(K)=SCOREC(K)
C
      DO 330 I=1,NCOM
  330 KENTRY(I)=0
      LDEBUG = IDEBUG.NE.0 .AND. NHIST.GE.IDEBUG
      IF(LDEBUG) WRITE(IOUT, 340 ) NHIST
  340 FORMAT('0',30('-'),'HISTORY',I7)
      IF(ICORR.EQ.0) THEN
        CALL RANGET(INIZST)
      ELSE
        IF(NHIST.GE. MHIST) THEN
          WRITE(IUERR, 370 )
  370     FORMAT('0TOO MANY HISTORIES WITH CORRELATED RANDOM NUMBERS')
          CALL EXITN(1)
        ENDIF
C       REMEMBER INITIAL R.N.
C       (IT MAY BE UPDATED ONLY WHEN STARTING NEW PARTICLES FROM
C        RECYCLING OR RECOMBINATIONB SOURCES, AND NOT WHEN CONTINUING
C        A TIME-OUTED HISTORY - 6/DEC/95)
        INIZSV=INIZST
        CALL CORRAN(INIZST)
      ENDIF
CW    WRITE(6,*) ' ICORR=',ICORR,' KOSE=',KOSE,' INIZST=',INIZST
      NSPLIT=0
      IHPRN=NHIST
      IF(KODDBG.EQ.0) GO TO 410
C     CARICA I PARAMETRI DELL'UNICA STORIA DA ESEGUIRE
      IHPRN=IHDBG
      CALL RANSET(ICDBG)
      W=DEBUG(1)
      E=DEBUG(2)
      IR=DEBUG(3)
      IREG=MASTER(LKOR+IR)
      IREG3D=IREG
      IF(I3D.EQ.0) GO TO 400
      CALL FINDV(Z,ASTER(LQUOTA+1),NZETA,IZ)
      IREG3D=MASTER(KSXY3D+(IZ-1)*KREG+IREG)
  400 CONTINUE
      X=DEBUG(4)
      Y=DEBUG(5)
      SINT=DEBUG(6)
      COST=DEBUG(7)
      TANT=SINT/COST
      SINP=DEBUG(8)
      COSP=DEBUG(9)
      E=DEBUG(10)
      A=DEBUG(11)
      Z=DEBUG(12)
      MOL=DEBUG(13)
      ISSOU=DEBUG(14)
      NUTRAL=DEBUG(15)
      IBIN=DEBUG(16)
      NSPLIT=DEBUG(17)
      IF(NSPLIT.NE.0) THEN
        WRITE(IUERR,402)
  402   FORMAT(/' ***** WARNING: NO DEBUG OF IMPURITY SPUTTERED FROM REC
     *YCLING IONS')
        NSPLIT=0
      ENDIF
      GO TO 430
C
  410 CONTINUE
C
  420 CONTINUE
C
      CLOCK=0.0
      AGE=0.0
C
  421 IF(IRTANK.NE.0) THEN
        CALL RDTANK (+1,ITAPIO(1),IDMCO,
     &       ITRAN,NION,NIONPM,NCOM,TCUT,
     &       NUTRAL,W,E,X,Y,Z,IZ,IR,IREG,IREG3D,
     &       COSP,SINP,COST,SINT,AGE,
     &       IBIN,IGAP,ITSOU,IRAND,
     &       IFLAG,NHBUFI,TRAN,TRAN
     &                    )
        IF(IFLAG.LE.0) THEN
C         NO MORE NEUTRALS TO RECOVER.
          IRTANK=0
          GOTO 421
        ELSE
          IF(ICORR.GT.0) THEN
C           CONTINUE HISTORY WITH STORED R.N.
            CALL RANSET(IRAND)
C           RESET INITIAL R.N. (SEE COMMENTS ABOVE)
            INIZST=INIZSV
          ENDIF
C         NEUTRALS ARE RECOVERED AT THE BEGINNING OF TIME-SLICE
          CLOCK=0.0
          W=W*WHS
          ISENT=0
          L=LABINT(NUTRAL)
          MOL=1
          IF(NUTRAL.GT.NION .AND. NUTRAL.LE.NIONPM) MOL=2
          A=TABLE(L,3)*FLOAT(MOL)
          ZA=TABLE(LABINT(NUTRAL),4)
          IF(ZA.LE.1.1) THEN
            WHTOT=WHTOT+W*FLOAT(MOL)
            NHRTVD=NHRTVD+1
            IHNEW=0
          ELSE
            NZRTVD=NZRTVD+1
C           DO NOT INCREMENT HISTORY COUNTING
            KOSE=KOSE-1
          ENDIF
CW        WRITE(IUERR,423)NHIST,'RETRIEVES',NHRTVD,EXTSYM(NUTRAL),W,AGE
CW423     FORMAT(' HISTORY',I5,1X,A,' NEUTRAL',I4,1X,A4,
CW   *           ' W=',1P,E10.3,' AGE=',E10.3)
          GOTO 435
        ENDIF
      ELSE
C       HOT (COLD ONLY WHEN RE-EMITTED. DISCUSS WITH LORNE)
        IBIN=2
        ICX=0
        ISTRTZ=0
        CALL STARTN(ITSOU,ITSIM,WIS,0,NUTBRN,WBRN,EBRN,IR3BRN)
C======================================================================
C                               ESCAPED FRACTION
      IF(ITSOU.EQ.1) THEN
        DW=WBRN-W*FLOAT(MOL)
        IF(DW.GT.0.0) THEN
          IZO=IZONA(IR3BRN)
CW        WRITE(IUERR,*) NUTBRN,' W LOST AT',IZO,IMACRO(IZO),DW/WBRN
          DE=WBRN*EBRN-W*FLOAT(MOL)/FLOAT(MOLOLD)*E
          EGA(NUTRAL)=EGA(NUTRAL)+DW*CLOCK
C NO      ESCAPE(IZO,NUTBRN)=ESCAPE(IZO,NUTBRN)+DW
          ESCEN(IZO,NUTBRN)=ESCEN(IZO,NUTBRN)+DE
          CALL GRU(EBRN,NGEV,EGEV(1),1,IG)
          ENFLUX(NUTBRN,IZO,IG)=ENFLUX(NUTBRN,IZO,IG)+DW
C         + INTO WALL
          ESCAPE(IZO,NUTBRN)=ESCAPE(IZO,NUTBRN)+WBRN
C         - OUT OF WALL
          ESCAPE(IZO,NUTRAL)=ESCAPE(IZO,NUTRAL)-W
C         ZA=TABLE(LABINT(NUTBRN),4)
C         IF(ZA.LE.1.1) THEN
C                NO! COUNT NEUTRALS ONLY
C           LMACRO=IMACRO(IZO)
C?          SOURCE(IZO,1)=SOURCE(IZO,1)+WBRN
C?          SMACRO(LMACRO,1,IMN)=SMACRO(LMACRO,ITSOU,IMN)+DW
C           SMACRO(LMACRO,5,IMN)=SMACRO(LMACRO,5,IMN)+DW
C           AGEH(1)=AGEH(1)+DW
C           AGEH(2)=AGEH(2)+DW*AGE
C           AGEH(3)=AGEH(3)+DW*AGE**2
C         ENDIF
        ENDIF
      ENDIF
C======================================================================
C       WRITE(IUERR,*) ' NHIST=',NHIST,' MOL=',MOL,' E=',E
        ZA=TABLE(LABINT(NUTRAL),4)
        IF(ZA.LE.1.1) THEN
          WHTOT=WHTOT+W*FLOAT(MOL)
          AGE=0.0
          NHSRC=NHSRC+1
          IHNEW=1
CW        WRITE(IUERR,423)NHIST,'   STARTS',NHSRC,EXTSYM(NUTRAL),W,AGE
        ENDIF
      ENDIF
C
      IF(LDEBWR .AND. NUTRAL.LE.NIONPM .AND.
     *  IDEBWR.LE.NDEBWR .AND. KDEBWR(IDEBWR).LT.NDEBPT) THEN
        KDEBWR(IDEBWR)=KDEBWR(IDEBWR)+1
        XDEBWR(IDEBWR,KDEBWR(IDEBWR),1)=X
        XDEBWR(IDEBWR,KDEBWR(IDEBWR),2)=Y
        XDEBWR(IDEBWR,KDEBWR(IDEBWR),3)=Z
CW      WRITE(6,*) ' IDEBWR=',IDEBWR,' K=',KDEBWR(IDEBWR),
CW   *             ' IR=',IR,ISENT,' AT',X,Y
      ENDIF
C
C***********************************************************************
C ASSIGNED PARAMETERS: ABOVE THE LINE,WITHIN PARENTHESIS               *
C RETURN  PARAMETERS : BELOW THE LINE                                  *
C            .                                                         *
C            .                                                         *
C          INPUT                                                       *
C          -----                                                       *
C        INDHEL=0 IF NO HE PRESENT                                     *
C            .                                                         *
C            .                                     IMPUR UNKNOWN HERE  *
C            V                        (IMPUR=0)          (IBIRTH=0)    *
C          START--->--WHICH----->---------HOW--->-----------WALINT     *
C          -----      -----               ---               ------     *
C            .    ISTHEL=1 IF HE HISTORY                               *
C            .                                                         *
C            V                                                         *
C            .                      N.B. HEAVY IMPURITIES MAY BE       *
C            .                           IDENTIFIED IN S.R. WALINT     *
C       (IBIRTH=1)                       THROUGH THE FOLLOWING TEST:   *
C         WALINT                             NUTRAL.GT.NIONPM;         *
C         ------                         MOREOVER THEY CONSERVE THE    *
C            .                           VALUE OF THE PARAMETER ISTHEL *
C            .                           OF THEIR PARENT.              *
C            .                                                         *
C        (IMPUR=1)             (IBIRTH=0)                              *
C           HOW--------->---------WALINT                               *
C           ---                   ------                               *
C            .                                                         *
C            V                                                         *
C***********************************************************************
C                                                                      -
C       WHEN NEUTRAL E<TAGLIO, S.R. START RETURNS W=0
      IRWH=IR
      IREGWH=IREG
C     (SAVED TO RERUN THE HISTORY IN CASE OF ACCIDENT)
      IF(W.LE.0.0) GO TO 1040
      IF(IR.LE.0 .OR. IR.GT.NRTRU) THEN
         IERUN=1
         GO TO 560
      ENDIF
      IR=IR
      IREG=IREG
      IREG3D=IREG3D
C            CARICA DEBUG PER EVENTUALE DEBUG
      DEBUG(1)=W
      DEBUG(2)=0.0
      DEBUG(3)=IR
      DEBUG(4)=X
      DEBUG(5)=Y
      DEBUG(6)=SINT
      DEBUG(7)=COST
      DEBUG(8)=SINP
      DEBUG(9)=COSP
      DEBUG(10)=E
      DEBUG(11)=A
      DEBUG(12)=Z
      DEBUG(13)=MOL
      DEBUG(14)=ISSOU
      DEBUG(15)=NUTRAL
      DEBUG(16)=IBIN
      DEBUG(17)=NSPLIT
C
      IF(NCOLW.LT.MCOLW) GO TO 430
      TRUNC=TRUNC+FLOAT(MOL)
      GO TO 1040
C
  430 CONTINUE
      ISENT=0
      IGAP=0
  435 CONTINUE
      IF(IDLOOP.NE.0 .AND. NHIST.GE.IDLOOP) THEN
        CALL RANGET(IC)
        WRITE(IOUT, 440 ) IHPRN,IC,(DEBUG(I),I=1,NDEBUG)
      ENDIF
  440 FORMAT(/2I24,Z24/(3Z24))
      IF(LDEBUG)
     *  WRITE(IOUT, 440 )
      IZO=IZONA(IREG3D)
      LMACRO=IMACRO(IZO)
      LMN=IATOM(NUTRAL)
      ZA=TABLE(LABINT(NUTRAL),4)
      IF(ZA.LE.1.1) THEN
C       LUMP ALL HYDROGENIC NEUTRALS TOGETHER
        LMN=IMN
        WA=W*FLOAT(MOL)
        IF(IHNEW.EQ.1) THEN
          SOURCE(IZO,1)=SOURCE(IZO,1)+WA
        ELSE
C         TEMPORANEO (COME R.R.) IN ATTESA DI SOMMARE SEPARATAMENTE
          SOURCE(IZO,3)=SOURCE(IZO,3)+WA
        ENDIF
        IF(IHNEW.EQ.1) THEN
          IF(ITSOU.EQ.1 .OR. ITSOU.EQ.4)
     *    SMACRO(LMACRO,ITSOU,LMN)=SMACRO(LMACRO,ITSOU,LMN)+WA
        ELSE
          SMACRO(LMACRO,3,LMN)=SMACRO(LMACRO,3,LMN)+WA
        ENDIF
CW      WRITE(6,*) ' KOSE=',KOSE,' IR=',IREG3D,' IZO=',IZO,' W=',WA
      ELSE
        SMACRO(LMACRO,1,LMN)=SMACRO(LMACRO,1,LMN)+W
      ENDIF
C
C     DIRTY. DERIVA DA TIME-SLICE PRECEDENTE
      IF(IGAP.NE.0) THEN
C       CALM SOLO PER IGAP<>0
        C=RANF()
        CALM=-ALOG(C)*SINT
        GOTO 762
      ENDIF
C
C
C                               NUM.DI CAMM.LIB.MED. (DA EXP(-X))
  450 CONTINUE
      C=RANF()
      CALM=-ALOG(C)
  460 IF(BEXPT(IREG3D).EQ.0.0) GO TO 490
C                               EXPONENTIAL BIASSING
      COSINE=(COSP*WEXPT(IREG3D,1)+SINP*WEXPT(IREG3D,2))*SINT
     *       +COST*WEXPT(IREG3D,3)
      IF(ABS(COSINE).LE.1.0) GO TO 480
      WRITE(IUERR, 470 ) COSP,SINP,SINT,(WEXPT(IREG3D,K),K=1,3)
  470 FORMAT(' COSP,SINP,SINT=',1P,3E12.4,' WEXPT=',3E12.4)
      GO TO 580
  480 CONTINUE
      AEXPT=1.0-BEXPT(IREG3D)*COSINE
      CALM=CALM/AEXPT
      W=W * EXP(CALM*(AEXPT-1.0))/AEXPT
C                               NUM.DI CAMM.LIB.MED.PROIETTATI SU XY
  490 CALM=CALM*SINT
C                               CONTROLLA CHE IL NEUTRO SIA NEL PLASMA
  500 IF(IBOUND(IREG3D).NE.0 .OR. IR.LE.0 .OR. IR.GT.NRTRU) THEN
         IERUN=2
         GO TO 560
      ENDIF
C                               DISTANZA DA PERCORRERE SU XY
      CALL XST
  505 IF(LDEBUG)
     * WRITE(IOUT, 510 ) A,MOL,E,SIGE,SIGIT,SIGST,(SIGI(K),SIGCX(K),
     * SIGEL(K),K=1,NION)
  510 FORMAT(' FROM XST A=',F6.1,' MOL=',I5,' E=',1PE10.3,' SIGE=',E10.3
     *,' SIGIT=',E10.3,' SIGST=',E10.3/' SIGI,SIGCX,SIGEL',(12E10.3))
C                         IF VOID
      IF(SIGT) 520 , 520 , 530
  520 DIST=1.0E+30
      GO TO 540
  530 DIST=CALM/SIGT
  540 DISTZ=DIST
C     (HERE Z IS FOR 'ZERO' I.E. BEFORE TRACING)
      IRZ=IR
      IREGZ=IREG
      IREG3Z=IREG3D
      XZ=X
      YZ=Y
      ZZ=Z
      IF(LDEBUG)
     * WRITE(IOUT, 550 )NHIST,IR,IREG,ISENT,IGAP,IBOUND(IREG3D),
     * EXTSYM(NUTRAL),X,Y,
     * SINP,COSP,DIST,SIGT,E ,W,IREG3D,Z,IZ,SINT,COST,LEAVES
  550 FORMAT(' TO GMT',I5,2I5,3I2,A4,8F8.3,I4,F8.3,I4,2F8.3,I4)
C
CT    IF(IR.EQ.1080 .AND. NHIST.EQ.10) THEN
CT      IDBCG=-1
CT      WRITE(6,*) ' ACTIVATE COMPACT GEOMETRIC DEBUG'
CT    ENDIF
      CALL PILS(DISTSR(1),MDSTSR,NDSTSR)
      CALL CHKRXY(IR,X,Y,MARK)
      IF( MARK.EQ.0 ) IR=-5
C
C                             IF GEOMETRY ACCIDENT
      IF(
     * IR.GE.1 .AND. IR.LE.NRTRU
     * .AND.
     * IREG.GE.IR2DST .AND. IREG.LE.KREG
     * .AND.
     * IREG3D.GE.IR3DST .AND. IREG3D.LE.KREG3D
     * ) GO TO 590
      IERUN=3
  560 INCID=INCID+1
      IF(IDEBIN.EQ.0) GO TO 580
      WRITE(IOUT, 570 ) IERUN
  570 FORMAT('0GEOMETRY ACCIDENT',I2,':')
      WRITE(IOUT, 600 )NHIST,IR,IREG,ISENT,IGAP,IBOUND(IREG3D),
     * EXTSYM(NUTRAL),X,Y,
     * SINP,COSP,DIST,SIGT,E ,W,IREG3D,Z,IZ,SINT,COST,LEAVES
CCCC  IF(.TRUE.) STOP
  580 IREG=-3
      IF(INCID.LE.MINCID) GO TO 1060
      WRITE(IUERR,*) ' TOO MANY GEOMETRY ACCIDENTS'
      CALL EXITN(1)
C                             NO GEOMETRY ACCIDENT
  590 IF(LDEBUG)
     * WRITE(IOUT, 600 )NHIST,IR,IREG,ISENT,IGAP,IBOUND(IREG3D),
     * EXTSYM(NUTRAL),X,Y,
     * SINP,COSP,DIST,SIGT,E ,W,IREG3D,Z,IZ,SINT,COST,LEAVES
  600 FORMAT(' FROM "',I5,2I5,3I2,A4,8F8.3,I4,F8.3,I4,2F8.3,I4)
C
      V=SQRT(E/A*1.91582E+12)
      DMAX=V*(TCUT-CLOCK)*SINT
CT    WRITE(6,*) ' CLOCK=',CLOCK,' V=',V,
CT   *           ' DIST=',DIST/SINT,' DMAX=',DMAX/SINT
      IF(DIST.LT.DMAX) THEN
        ITCUT=0
CT      WRITE(6,*) '   ITCUT=',ITCUT
      ELSE
        ITCUT=1
CT      WRITE(6,*) '   ITCUT=',ITCUT
        IR=IRZ
        IREG=IREGZ
        IREG3D=IREG3Z
        X=X-(DIST-DMAX)*COSP
        Y=Y-(DIST-DMAX)*SINP
        IF(I3D.NE.0)
     *  Z=Z-(DIST-DMAX)/TANT
        DIST=DMAX
C       ISENT=
CT      WRITE(6,*) ' STOP DMAX < DIST'
CT      STOP
      ENDIF
C
      DISTXY=SQRT((X-XZ)**2+(Y-YZ)**2)
      CALL FLXTAU(SIGT,SINT,DISTSR(1),NDSTSR,DMAX,DISTXY,ITAU,TAU)
      TAU=W*TAU
C
C          CLOCK OF NEUTRAL AT THE NEXT EVENT (NEW REGION OR COLLISION)
C     (CONTROLLARE COSA SUCCEDE ALLA PARETE O NEI GAPS)
      DT = DIST/(SINT*V)
      CLOCK=CLOCK+DT
      AGE=AGE+DT
C
C     IF(ISENT) 620 , 640 , 630
C                               FUGA DALLA GEOMETRIA
C 620 CONTINUE
C                               CAMBIA REGIONE
C 630 CONTINUE
C                               RESTA NELLA REGIONE
C 640 CONTINUE
C
      ZA=TABLE(LABINT(NUTRAL),4)
C                               CLASSIFICHE(STIMATORE DELLE DISTANZE)
C     ACCUMULA UN TEMPO CON MASSE MISURATE IN A.M.U. ED ENERGIE IN EV
C     TIME= TEMPO ATTESO TRASCORSO NELLA REGIONE SENZA COLLISIONI
      TIME=TAU*SQRT(A*0.5/E)
      SAG(NUTRAL)=SAG(NUTRAL)+TIME
C
      IZO=IZONA(IREG3Z)
      IZOFRO=IZO
      IF(IZO.EQ.0) GO TO 690
C
      IF(IGAP.NE.0) GOTO 690
      ICH=ICHAN(IZO)
      ICHFRO=ICH
      FLUX(IZO,NUTRAL)=FLUX(IZO,NUTRAL)+TAU
      IF(SIGT.LE.0.0) GO TO 670
      ABSOR(IZO,NUTRAL)=ABSOR(IZO,NUTRAL)+TAU*SIGIT
C                  SCORE ELECTRON ENERGY LOSS IN EACH ZONE
C            COMPUTE ELECTRON ENERGY LOSS
      IF(SIGT.GT.0.0) THEN
        IF(NUTRAL.GT.NIONPM) THEN
          CHIZ1=TLOTZ(LABINT(NUTRAL),2)
        ELSE
          CHIZ1=0.0
        ENDIF
        CALL ELELOS(MOL,A,CHIZ1,E,TEMPE(IREG3Z),DENSE(IREG3Z),ELOSS)
      ELSE
        ELOSS=0.0
      ENDIF
      IF(MOL.EQ.1) THEN
        ELOST(NUTRAL,IZO)=ELOST(NUTRAL,IZO)+TAU*SIGE*ELOSS
        CEXED(IZO,NUTRAL)=CEXED(IZO,NUTRAL)+TAU*SIGCXT
        ELAST(IZO,NUTRAL)=ELAST(IZO,NUTRAL)+TAU*SIGEST
        ZA=TABLE(LABINT(NUTRAL),4)
        IF(IMOMSO.EQ.1 .AND. ZA.LE.1.1) THEN
C                    MOMENTUM GIVEN TO PLASMA BY IONISATION
          P=SQRT(E*A)*2.3151E-18
          PX=P*COSP*SINT
          PY=P*SINP*SINT
          PZ=P*COST
          S1=TAU*SIGIT
          PRECYC(NUTRAL,IZO,1)=PRECYC(NUTRAL,IZO,1)+S1*PX
          PRECYC(NUTRAL,IZO,2)=PRECYC(NUTRAL,IZO,2)+S1*PY
          PRECYC(NUTRAL,IZO,3)=PRECYC(NUTRAL,IZO,3)+S1*PZ
C                    MOMENTUM GIVEN TO PLASMA BY C.X.
C                    (THE ISOTROPIC PART IS SUBTRACTED)
          IF(NUTRAL.LE.NION) THEN
            DO 650 ION=1,NION
              ITARG=LABINT(ION)
              ZION=TABLE(ITARG,4)
              IF(ZION.GT.1.1) GOTO 650
              S2=TAU*SIGCX(ION)
              AION=TABLE(ITARG,3)
              R=SQRT((TABLE(ITARG,2)*TEMPE(IREG3Z)+TEMPI(IREG3Z))*AION)
     &        * 1.0E+6 * DRIFTV(IREG3Z) * 1.6726E-24
              PRECYC(NUTRAL,IZO,1)=PRECYC(NUTRAL,IZO,1)
     &                            +S2*PX
              PRECYC(NUTRAL,IZO,2)=PRECYC(NUTRAL,IZO,2)
     &                            +S2*PY
              PRECYC(NUTRAL,IZO,3)=PRECYC(NUTRAL,IZO,3)
     &                            +S2*PZ
              PRECYC(ION   ,IZO,1)=PRECYC(ION   ,IZO,1)
     &                            -S2*DRIFTC(IREG3Z,1)*R
              PRECYC(ION   ,IZO,2)=PRECYC(ION   ,IZO,2)
     &                            -S2*DRIFTC(IREG3Z,2)*R
              PRECYC(ION   ,IZO,3)=PRECYC(ION   ,IZO,3)
     &                            -S2*DRIFTC(IREG3Z,3)*R
 650        CONTINUE
          ENDIF
        ENDIF
      ELSE IF(MOL.EQ.2) THEN
C              FOR MOLECULES,SIGST REFERS TO FAST DISSOCIATIONS (3 EV)
C                           SIGSTS REFERS TO SLOW DISSOCIATIONS (0.3 EV)
C                        AND SIGIT REFERS TO DISSOCIATIVE IONIZATIONS
C              FAST       10.4=4.4+3+3 (10 APR. 1987) 3=CONDON  ENERGY
C              SLOW        5.0=4.4+0.3+0.3    (12 JAN. 1988)
        ELOST(NUTRAL,IZO)=ELOST(NUTRAL,IZO)+
     *                    TAU*(SIGST*10.4+SIGSTS*5.0+SIGIT*ELOSS)
        DISSOC(IZO,NUTRAL)=DISSOC(IZO,NUTRAL)+TAU*(SIGST+SIGSTS)
        ELAST(IZO,NUTRAL)=ELAST(IZO,NUTRAL)+TAU*SIGEST
C       ZA=TABLE(LABINT(NUTRAL),4)
C       IF(IMOMSO.EQ.1 .AND. ZA.LE.1.1) THEN
C                    MOMENTUM
C         NONE, BECAUSE THE ION IS ISOTROPIC (3 EV ISOT. + EMOL<<3 EV)
C       ENDIF
      ENDIF
  670 CALL GRU(E,NGEV,EGEV(1),1,IG)
      ENFLUX(NUTRAL,IZO,IG)=ENFLUX(NUTRAL,IZO,IG)+TAU
      ENNE(IZO,NUTRAL)=ENNE(IZO,NUTRAL)+TIME
      EAVER(IZO,NUTRAL,1)=EAVER(IZO,NUTRAL,1)+TIME*E
      IF(ZA.LE.1.1 .AND. MOL.EQ.1 .AND. ICX.NE.0) THEN
CW      WRITE(IUERR,*) ' SCORE WITH ICX=',ICX,' IZO=',IZO
        ENNEH(IZO,NUTRAL)=ENNEH(IZO,NUTRAL)+TIME
      ENDIF
CC    IF(ZA.LE.1.1) THEN
CC      LMACRO=IMACRO(IZO)
CC      SMACRO(LMACRO,4,IMN)=SMACRO(LMACRO,4,IMN)+TAU*SIGIT
C       N(H2)=2N(H)
CC      SMACRO(LMACRO,5,IMN)=SMACRO(LMACRO,5,IMN)+TIME*FLOAT(MOL)
CC    ENDIF
      IF(NION.EQ.1 .AND. ZA.LE.1.1 .AND. MOL.EQ.1) THEN
C                   V0 . VI
        CALL V0RELV(A,E,COSP*SINT,SINP*SINT,COST,
     &              TEMPI(IREG3Z),TEMPE(IREG3Z),DRIFTV(IREG3Z),A,
     &              DRIFTC(IREG3Z,1),DRIFTC(IREG3Z,2),DRIFTC(IREG3Z,3),
     &              DOT)
C       1/2 M (V0-VI)**2 = 1/2 M V0**2 * (V0-VI)**2/V0**2 = E*DOT
        EAVER(IZO,NUTRAL,2)=EAVER(IZO,NUTRAL,2)+TIME*E*DOT
      ENDIF
C     N.B.: VELOC() IS THE NEUTRAL FLUID VELOCITY <V>, WHICH MEANS THAT
C                <E> >= 1/2*M*(<V>**2+<VY>**2+<VZ>**2)
C       SINCE THE ISOTROPIC COMPONENT CANCELS OUT (<V**2> > 0,<V>**2=0)
      VELOC(IZO,NUTRAL,1)=VELOC(IZO,NUTRAL,1)+TAU*(COSP*SINT)
      VELOC(IZO,NUTRAL,2)=VELOC(IZO,NUTRAL,2)+TAU*(SINP*SINT)
      VELOC(IZO,NUTRAL,3)=VELOC(IZO,NUTRAL,3)+TAU*(COST)
      IF(IHOR.NE.0 .AND. ZA.LE.1.1) THEN
        IF(MOL.EQ.1) THEN
          V=SQRT(E/A*1.91582E+12)
C                    2.0*1.6022E-12/1.6726E-24
          TAUN=TAU/V
C         (TAUN=TIME EXCEPT FOR A CONSTANT)
C          N
          HORTON(IZO,IBIN,1) = HORTON(IZO,IBIN,1)+TAUN
C          # IONIS
          HORTON(IZO,IBIN,2) = HORTON(IZO,IBIN,2)+TAU*SIGIT
C          # CX
          HORTON(IZO,IBIN,3) = HORTON(IZO,IBIN,3)+TAU*SIGCXT
C          V MOMENTA
          VX=V*(COSP*SINT)
          VY=V*(SINP*SINT)
          VZ=V*(COST)
          HORTON(IZO,IBIN, 4) = HORTON(IZO,IBIN, 4)+TAUN*VX
          HORTON(IZO,IBIN, 5) = HORTON(IZO,IBIN, 5)+TAUN*VY
          HORTON(IZO,IBIN, 6) = HORTON(IZO,IBIN, 6)+TAUN*VZ
          HORTON(IZO,IBIN, 7) = HORTON(IZO,IBIN, 7)+TAUN*VX*VX
          HORTON(IZO,IBIN, 8) = HORTON(IZO,IBIN, 8)+TAUN*VY*VY
          HORTON(IZO,IBIN, 9) = HORTON(IZO,IBIN, 9)+TAUN*VZ*VZ
          HORTON(IZO,IBIN,10) = HORTON(IZO,IBIN,10)+TAUN*VX*VY
          HORTON(IZO,IBIN,11) = HORTON(IZO,IBIN,11)+TAUN*VX*VZ
          HORTON(IZO,IBIN,12) = HORTON(IZO,IBIN,12)+TAUN*VY*VZ
        ELSE
C          # IONIS
          HORTON(IZO,  1 ,13) = HORTON(IZO, 1  ,13)+TAU*SIGIT
C          # SLOW DISSOC
          HORTON(IZO,  1 ,14) = HORTON(IZO, 1  ,14)+TAU*SIGSTS
C          # FAST DISSOC
          HORTON(IZO,  2 ,14) = HORTON(IZO, 2  ,14)+TAU*SIGST
        ENDIF
      ENDIF
C================================== EDGE2D =============================
      DE = DENSE(IREG3Z)
      IF(ZA.LE.1.1 .AND. DE.GT.0.0) THEN
        TE = TEMPE(IREG3Z)
        TI = TEMPI(IREG3Z)
CCC       V=SQRT(E/A)*1.3841E+06
CCC       SVION = SIGE * V / DE
CCC       SVCEX = SVCX(1)
        IF(MOL.EQ.1) THEN
          CALL IOSIG(1,TRAN,TRAN,TE,DE,SVION,TRAN,0,IXS(1),IXS(4)
     &              ,IHADAS,IZADAS,IDADAS,USADAS)
          AION=TABLE(LABINT(1),3)
          CALL CXSIG(1,A,E,COSP*SINT,SINP*SINT,COST,
     &               TI,TE,DRIFTV(IREG3Z),AION,
     &               DRIFTC(IREG3Z,1),DRIFTC(IREG3Z,2),DRIFTC(IREG3Z,3),
     &               IXS(2),TRAN,SVCEX)
          TRAN1= DE * SVION
          SIGMAN(IZO,1) = SIGMAN(IZO,1) + TIME*TRAN1
          ACH = DRIFTV(IREG3Z)
          ZI=TABLE(LABINT(1),4)
          IF(ZI.LE.1.1) THEN
            DI  = DENSI(IREG3Z,1)
            TRAN2= DI * SVCEX * (-1.5*TI - ACH**2*(TE+TI)*0.5    )
            TRAN3= DI * SVCEX * (                             + E)
            SIGMAN(IZO,2) = SIGMAN(IZO,2) + TIME*TRAN2
            SIGMAN(IZO,3) = SIGMAN(IZO,3) + TIME*TRAN3
          ENDIF
          TRAN4= DE * SVION * E
          SIGMAN(IZO,4) = SIGMAN(IZO,4) + TIME*TRAN4
          TRAN6= - DE * SVION * ELOSS
          SIGMAN(IZO,6) = SIGMAN(IZO,6) + TIME*TRAN6
          DO L=2,NION
          ZI=TABLE(LABINT(L),4)
            IF(ZI.LE.1.1) THEN
              DI  = DENSI(IREG3Z,L)
              AION=TABLE(LABINT(L),3)
              CALL CXSIG(1,A,E,COSP*SINT,SINP*SINT,COST,
     &                   TI,TE,DRIFTV(IREG3Z),AION,
     &               DRIFTC(IREG3Z,1),DRIFTC(IREG3Z,2),DRIFTC(IREG3Z,3),
     &                   IXS(2),TRAN,SVCEX)
              TRAN2= DI * SVCEX * (-1.5*TI - ACH**2*(TE+TI)*0.5    )
              TRAN3= DI * SVCEX * (                             + E)
              SIGMAN(IZO,2) = SIGMAN(IZO,2) + TIME*TRAN2
              SIGMAN(IZO,3) = SIGMAN(IZO,3) + TIME*TRAN3
            ENDIF
          ENDDO
        ELSE
          CALL HMSIG(1,TRAN,TE,DE,SVMDF,SVMDS,SVMI,TRAN,TRAN,TRAN,0
     &              ,IXS(3))
C         K=IATOM(NUTRAL)
          TRAN1= DE * SVMI
          SIGMAN(IZO,1) = SIGMAN(IZO,1) + TIME*TRAN1
          TRAN5= DE * SVMI * 3.0
          SIGMAN(IZO,5) = SIGMAN(IZO,5) + TIME*TRAN5
          TRAN6= - DE * ( SVMDF*10.4 + SVMDS*5.0 + SVMI*ELOSS )
          SIGMAN(IZO,6) = SIGMAN(IZO,6) + TIME*TRAN6
        ENDIF
      ENDIF
C================================== EDGE2D =============================
C
C
      IF(ITCUT.EQ.0) GOTO 678
      TIMOUT(NUTRAL)=TIMOUT(NUTRAL)+W
      CALL RANGET(IRAND)
      CALL WRTANK ( 1,ITAPIO(2),IDMC,IRR,
     &     TRAN,ITRAN,NION,NIONPM,NCOM,TCUT,
     &     NUTRAL,W,E,X,Y,Z,IZ,IR,IREG,IREG3D,
     &     COSP,SINP,COST,SINT,AGE,
     &     IBIN,IGAP,ITSOU,IRAND
     &             )
CW    WRITE(IUERR,423)NHIST,'TIME-CUTS',NHSTRD,EXTSYM(NUTRAL),W,AGE
      EGA(NUTRAL)=EGA(NUTRAL)+W*CLOCK
      ZA=TABLE(LABINT(NUTRAL),4)
      LMACRO=IMACRO(IZO)
      LMN=IATOM(NUTRAL)
      IF(ZA.LE.1.1) THEN
C       LUMP ALL HYDROGENIC NEUTRALS TOGETHER
        LMN=IMN
        NHSTRD=NHSTRD+IRR
        TRAN=W*FLOAT(MOL)
C         TEMPORANEO (COME R.R.) IN ATTESA DI SOMMARE SEPARATAMENTE
        SOURCE(IZO,3)=SOURCE(IZO,3)-TRAN
        SMACRO(LMACRO,3,LMN)=SMACRO(LMACRO,3,LMN)-TRAN
      ELSE
        SMACRO(LMACRO,3,LMN)=SMACRO(LMACRO,3,LMN)-W
      ENDIF
      IF (NUTRAL.GT.NIONPM) THEN
        NZSTRD=NZSTRD+IRR
      ENDIF
      GOTO 1040
C
  678 CONTINUE
      IF(I3D.EQ.0) GO TO 690
      CALL TALETE(IZMIN,IZMAX,AXDIST)
      DO 680 I=IZMIN,IZMAX
      TRAN=W*AXDIST(I)
      FLUXZ(IZO,I)=FLUXZ(IZO,I)+TRAN
  680 CONTINUE
C                               FUGA DALLA GEOMETRIA?
  690 IF(ISENT.EQ.-5) GO TO 700
      IF(I3D.EQ.0) GO TO 710
      IF(LEAVES) 720 , 710 , 720
  700 FUGA=FUGA+W
      GO TO 1040
C
C                               RESTA NELLA REGIONE?
  710 IF(ISENT.EQ.0) GO TO 900
C
C                               CAMBIA REGIONE
  720 CONTINUE
C
      IZOTO=IZONA(IREG3D)
      ICHTO=ICHAN(IZOTO)
C   OMITTED                     TRANSITION FREQUENCY MATRIX
C   ------             WHATEVER ICHFRO AND ICHTO SCORE FIRST EMIGRATION
      IF(.TRUE.) GO TO 730
      IF(ICHFRO.NE.ICHTO) ISCHAN=-1
      IF(ICHFRO.EQ.0.OR.ICHTO.EQ.0) GO TO 730
      IF(ICHTO.NE.ICHFRO)
     *TRAMAT(NUTRAL,ICHFRO,ICHTO)=TRAMAT(NUTRAL,ICHFRO,ICHTO)+W
C                               FIRST ENTRY FROM SOURCE INTO A ZONE
  730 IF(IZOFRO.EQ.0) GO TO 740
      IF(IZOTO.EQ.0)  GO TO 740
      IF(IZOTO.EQ.IZOFRO) GO TO 740
      CALL SUBNBR(NZONE,MEIBOR,LOCNBR(1),NEIBOR(1),LASTNB,IZOFRO,IZOTO,
     *            LFRO,LTO)
      ZA=TABLE(LABINT(NUTRAL),4)
      LMACTO=IMACRO(IZOTO)
      LMACFR=IMACRO(IZOFRO)
      LMN=IATOM(NUTRAL)
      IF(ZA.LE.1.1) THEN
C       LUMP ALL HYDROGENIC NEUTRALS TOGETHER
        LMN=IMN
        WA=W*FLOAT(MOL)
        WNBR(LTO,1)=WNBR(LTO,1)+WA
        WNBR(LFRO,2)=WNBR(LFRO,2)+WA
        IF(LMACTO.NE.LMACFR) THEN
          FMACRO(LMACFR,LMACTO,LMN)=FMACRO(LMACFR,LMACTO,LMN)+WA
C         IF(LMACFR.EQ.20 .AND. LMACTO.EQ.9)
C    *    WRITE(IOUT,*) ' 1) 20 --> 9',IZOFRO,IZOTO,IGAP
        ENDIF
      ELSE IF(NUTRAL.GT.NIONPM) THEN
        IF(LMACTO.NE.LMACFR) THEN
          FMACRO(LMACFR,LMACTO,LMN)=FMACRO(LMACFR,LMACTO,LMN)+W
        ENDIF
      ENDIF
      IF(IZOTO.NE.IZOENT) GO TO 740
      IF(KENTRY(1).NE.0) GO TO 740
      KENTRY(1)=1
      IF(ISSOU.GT.0)
     *ZENTRY(NUTRAL,ISSOU)=ZENTRY(NUTRAL,ISSOU)+W
C
  740 IBO=IBOUND(IREG3D)
      IF(IBO) 750 , 830 , 760
C                               NEW REGION: "ESCAPE" REGION
  750 CONTINUE
      EGA(NUTRAL)=EGA(NUTRAL)+W*CLOCK
      IZO=IZONA(IREG3D)
      IF(IZO.LE.0) GO TO 1040
      ESCAPE(IZO,NUTRAL)=ESCAPE(IZO,NUTRAL)+W
      ESCEN(IZO,NUTRAL)=ESCEN(IZO,NUTRAL)+W*E
      CALL GRU(E,NGEV,EGEV(1),1,IG)
      ENFLUX(NUTRAL,IZO,IG)=ENFLUX(NUTRAL,IZO,IG)+W
      ZA=TABLE(LABINT(NUTRAL),4)
      LMACRO=IMACRO(IZO)
      LMN=IATOM(NUTRAL)
      IF(ZA.LE.1.1) THEN
C       LUMP ALL HYDROGENIC NEUTRALS TOGETHER
        LMN=IMN
        SMACRO(LMACRO,5,LMN)=SMACRO(LMACRO,5,LMN)+W*FLOAT(MOL)
        AGEH(1)=AGEH(1)+W*FLOAT(MOL)
        AGEH(2)=AGEH(2)+W*FLOAT(MOL)*AGE
        AGEH(3)=AGEH(3)+W*FLOAT(MOL)*AGE**2
CW      IF(W.GT.0.0)
CW   *  WRITE(IUERR,423)NHIST,'     ENDS',   -1,EXTSYM(NUTRAL),W,AGE
      ELSE
        SMACRO(LMACRO,5,LMN)=SMACRO(LMACRO,5,LMN)+W
      ENDIF
C
      IF(LDEBWR .AND. NUTRAL.LE.NIONPM .AND.
     *  IDEBWR.LE.NDEBWR .AND. KDEBWR(IDEBWR).LT.NDEBPT) THEN
        KDEBWR(IDEBWR)=KDEBWR(IDEBWR)+1
        XDEBWR(IDEBWR,KDEBWR(IDEBWR),1)=X
        XDEBWR(IDEBWR,KDEBWR(IDEBWR),2)=Y
        XDEBWR(IDEBWR,KDEBWR(IDEBWR),3)=Z
CW      WRITE(6,*) ' IDEBWR=',IDEBWR,' K=',KDEBWR(IDEBWR),
CW   *             ' IR=',IR,ISENT,' AT',X,Y
      ENDIF
C
      GO TO 1040
C                               NEW REGION: (TRANSPARENT) WALL
  760 CONTINUE
CT    INTO A (TRANSPARENT) WALL:
CT    PARET1=PARET1+W*FLOAT(MOL)
      PSMP = PSEMIP(IREG3D,1)
      IF(IMACRO(IZOFRO).EQ.IABS(IPVOID)) THEN
C       NEUTRAL COMES FROM SUBDIVERTOR VOID (AND THIS IS DEFINED)
        PSMP = PSEMIP(IREG3D,2)
CW      IF(PSMP.GT.0.0 .AND. IGAP.EQ.0)
CW   &  WRITE(IUERR,*) ' PSEMIP 2',IZOFRO,IMACRO(IZOFRO),
CW   &                 IZONA(IREG3D),IMACRO(IZONA(IREG3D)),PSMP
      ELSE
CW      IF(PSMP.GT.0.0 .AND. IGAP.EQ.0)
CW   &  WRITE(IUERR,*) ' PSEMIP 1',IZOFRO,IMACRO(IZOFRO),
CW   &                 IZONA(IREG3D),IMACRO(IZONA(IREG3D)),PSMP
      ENDIF
      IF(PSMP.LE.0.0) GOTO 765
C     IF ALREADY IN A GAP, SHINE THRU
      IF(IGAP.EQ.1) GOTO 505
      C=RANF()
      IF(C.GE.PSMP) GOTO 765
C                               GAP IN WALL
      IGAP=1
  762 SIGT=0.0
      SIGE=0.0
      SIGIT=0.0
      SIGST=0.0
      GOTO 505
C                               SOLID WALL
  765 CONTINUE
C     A WALL DOES NOT CHANGE IGAP. IF IT IS 0, NEUTRAL IS COMING FROM
C     PLASMA/VOID; IF IT IS 1,IT MEANS THAT THE NEUTRAL IS HITTING
C     THE WALL FROM A TRANSPARENT WALL, AND RETURNS THRU THE SAME GAP.
C     IGAP IS RESET TO 0 ONLY BY ENTERING A PLASMA/VOID REGION.
      EOLD=E
      WOLD=W
      NUOLD=NUTRAL
      MOLOLD=MOL
      IRWALL=IREG3D
      IZOLD=IZO
      IZO=IZONA(IRWALL)
      IZOFRO=IZO
      IF(IZO.LE.0) GO TO 770
      IF(IBOUND(IRWALL).EQ.2) GO TO 770
      CALL GRU(EOLD,NGEV,EGEV(1),1,IG)
C                               KINETIC ENERGY DEPOSITED BY NEUTRALS
      IF(NUOLD.LE.NIONPM)
     *ENFLUX(NUOLD,IZO,IG)=ENFLUX(NUOLD,IZO,IG)+WOLD*EOLD
  770 CONTINUE
C
C               SCORE FLUXES TO WALLS FROM ANYWHERE EXCEPT PUMP VOID
C               NO. TOO EARLY HERE. POLAR NOT YET KNOWN
      IWACOL=0
      LOGIC = IZO.GT.0 .AND. IZOLD.GT.0 .AND.
     &        IMACRO(IZOLD).NE.IABS(IPVOID)
      IF(LOGIC) THEN
        IWACOL=1
        NUTCOL=NUTRAL
        IZOCOL=IZO
        WXXCOL=W
        EXXCOL=E
C       TOO EARLY HERE. POLAR NOT YET KNOWN
C       WACOL(NUTRAL,IZO,8)=WACOL(NUTRAL,IZO,8)+W
C       WACOL(NUTRAL,IZO,12)=WACOL(NUTRAL,IZO,12)+W*E
      ENDIF
C
      LIPMP=0
      NSPTSV=NTSPUT
      IR3DSV=IREG3D
      TESDSV=TEMPE(IR3DSV)
      TISDSV=TEMPI(IR3DSV)
COLD  LOGIC = MIMP.LT.2 .AND. IZOLD.GT.0 .AND. IMACRO(IZOLD).EQ.-IPVOID
COLD  SWITCH OFF SPUTTERING IF NEUTRAL IS COMING FROM PUMP VOID REGION
COLD  AND IPVOID<0
COLD  IF(LOGIC) THEN
COLD     NTSPUT=0
COLD     LIPMP=IABS(LPVOID)
COLD  ENDIF
      LOGIC = IZOLD.GT.0 .AND. IMACRO(IZOLD).EQ.IABS(IPVOID)
      IF(LOGIC) THEN
C        NEUTRAL IS COMING FROM PUMP VOID REGION AND HITS SUBDIV. WALL
         LIPMP=IABS(LPVOID)
         IF(TSUBD.GT.0.0) THEN
           TEMPE(IREG3D)=TSUBD
           TEMPI(IREG3D)=TSUBD
         ENDIF
         IF(MIMP.LT.2 .AND. IPVOID.LT.0) THEN
C          SWITCH OFF SPUTTERING
           NTSPUT=0
         ENDIF
      ENDIF
C
C               SWITCH OFF SPUTTERING IN GAPS
      IF(IGAP.NE.0) NTSPUT=0
C
      XBLEAK=X
      YBLEAK=Y
      ZBLEAK=Z
C
CT    PARET2=PARET2+W*FLOAT(MOL)
      CALL WALINT(1,IREAC,IGAP,LIPMP,LDEBUG,LLEAK,
     &            NZSPU,IZSPU,WZSPU,NZDEP,IZDEP,WZDEP,1,1,0,COSPOL)
      ICX=0
      IF(IR.LT.0) THEN
        IERUN=7
        GOTO 560
      ENDIF
CT    PARET3=PARET3+W*FLOAT(MOL)
C
C               SCORE FLUXES TO WALLS FROM ANYWHERE EXCEPT PUMP VOID
      IF(IWACOL.EQ.1) THEN
        IWACOL=0
        IF(POLAR.GE.COSNOR) THEN
          WACOL(NUTCOL,IZOCOL,8)=WACOL(NUTCOL,IZOCOL,8)+WXXCOL
          WACOL(NUTCOL,IZOCOL,12)=WACOL(NUTCOL,IZOCOL,12)+WXXCOL*EXXCOL
        ENDIF
      ENDIF
C
C               SCORE SPUTTER./REDEP. FROM ANYWHERE EXCEPT PUMP VOID
      LOGIC = IZO.GT.0 .AND. IZOLD.GT.0 .AND.
     &        IMACRO(IZOLD).NE.IABS(IPVOID)
      IF(LOGIC) THEN
        IF(NZSPU.GT.0 .AND. IZSPU.GT.0)
     &  WACOL(NZSPU,IZSPU,10)=WACOL(NZSPU,IZSPU,10)+WZSPU
        IF(NZDEP.GT.0 .AND. IZDEP.GT.0)
     &  WACOL(NZDEP,IZDEP,11)=WACOL(NZDEP,IZDEP,11)+WZDEP
      ENDIF
C
C         RESET DYNAMICALLY MODIFIED INPUT DATA
      NTSPUT=NSPTSV
      TEMPE(IR3DSV)=TESDSV
      TEMPI(IR3DSV)=TISDSV

C
      IF(IR.LT.0) THEN
         IERUN=4
         GO TO 560
      ENDIF
C
      IF(LLEAK.NE.0) THEN
        SMLEAK(NUTRAL)=SMLEAK(NUTRAL)+W
      ENDIF
C
      IF(LDEBWR .AND. NUTRAL.LE.NIONPM .AND.
     *  IDEBWR.LE.NDEBWR .AND. KDEBWR(IDEBWR).LT.NDEBPT) THEN
        IF( LLEAK.GT.0 ) THEN
          KDEBWR(IDEBWR)=KDEBWR(IDEBWR)+1
          XDEBWR(IDEBWR,KDEBWR(IDEBWR),1)=XBLEAK
          XDEBWR(IDEBWR,KDEBWR(IDEBWR),2)=YBLEAK
          XDEBWR(IDEBWR,KDEBWR(IDEBWR),3)=ZBLEAK
CW        WRITE(6,*) ' IDEBWR=',IDEBWR,' K=',KDEBWR(IDEBWR),
CW   *               ' IR=',IR,ISENT,' AT',XBLEAK,YBLEAK
        END IF
        IF(KDEBWR(IDEBWR).LT.NDEBPT) THEN
          KDEBWR(IDEBWR)=KDEBWR(IDEBWR)+1
          XDEBWR(IDEBWR,KDEBWR(IDEBWR),1)=X
          XDEBWR(IDEBWR,KDEBWR(IDEBWR),2)=Y
          XDEBWR(IDEBWR,KDEBWR(IDEBWR),3)=Z
CW        WRITE(6,*) ' IDEBWR=',IDEBWR,' K=',KDEBWR(IDEBWR),
CW   *               ' IR=',IR,ISENT,' AT',X,Y
        ENDIF
      ENDIF
C
CCC        IBIRTH=1
C     IF THE NEUTRAL IS RE-EMITTED, IT IS  'COLD':
      IF (MOL.EQ.1) THEN
        IF (IREAC.EQ.1) IBIN = 3
        IF (IREAC.EQ.2) IBIN = 1
        IF (IREAC.EQ.3) IBIN = 3
      ENDIF
C     IF(MOL.EQ.1 .AND. IREAC.EQ.2) IBIN=1
      IF(LDEBUG)
     * WRITE(IOUT, 780 )NHIST,IR,IREG,ISENT,IREAC,NUTRAL,X,Y,SINP,COSP,
     * POLAR,RN,E ,W,IREG3D,Z,IZ,SINT,COST,LEAVES
  780 FORMAT('  WALL ',I5,5I4,8F8.3,I4,F8.3,I4,2F8.3,I4)
      IZOTO=IZONA(IREG3D)
      NUTRAL=NUTRAL
      MOL=MOL
      CALL SUBNBR(NZONE,MEIBOR,LOCNBR(1),NEIBOR(1),LASTNB,IZOFRO,IZOTO,
     *            LFRO,LTO)
      ZA=TABLE(LABINT(NUTRAL),4)
      LMN=IATOM(NUTRAL)
      LMACTO=IMACRO(IZOTO)
      LMACFR=IMACRO(IZOFRO)
      IF(ZA.LE.1.1) THEN
C       LUMP ALL HYDROGENIC NEUTRALS TOGETHER
        LMN=IMN
        WA=W*FLOAT(MOL)
        WNBR(LTO,1)=WNBR(LTO,1)+WA
        WNBR(LFRO,2)=WNBR(LFRO,2)+WA
        IF(LMACTO.NE.LMACFR) THEN
          FMACRO(LMACFR,LMACTO,LMN)=FMACRO(LMACFR,LMACTO,LMN)+WA
C         IF(LMACFR.EQ.20 .AND. LMACTO.EQ.9)
C    *    WRITE(IOUT,*) ' 2) 20 --> 9',IZOFRO,IZOTO,IGAP
        ENDIF
      ELSE IF(NUTRAL.GT.NIONPM) THEN
        IF(LMACTO.NE.LMACFR) THEN
          FMACRO(LMACFR,LMACTO,LMN)=FMACRO(LMACFR,LMACTO,LMN)+W
        ENDIF
      ENDIF
      IF(IREAC.LE.0 .OR. IREAC.GT.4) THEN
         IERUN=5
         GO TO 560
      ENDIF
C     IREAC=1 : BACKSCATTERED
C       "   2 : REEMITTED
C       "   3 : ALBEDOED
C       "   4 : SPUTTERING ONLY (IN THIS CASE W=0)
C NO! IF(W.LE.0.0) GO TO 810
      IF(E.GT.TAGLIO) GO TO 790
      TRUNC=TRUNC+W*FLOAT(MOL)
      GO TO 1040
  790 CONTINUE
      IF(W.GT.0.0) THEN
        IF(NUTRAL.NE.NUOLD) WBORN(NUTRAL)=WBORN(NUTRAL)+W
        IF(NUTRAL.NE.NUOLD) HISTOR(NUTRAL)=HISTOR(NUTRAL)+1.0
      ENDIF
      IF(IZO.LE.0) GO TO 810
C     IN THE PARTICLE INVENTORY, 'RE-EMITTED' REFERS TO H2, WHICH IS TO
C     BE MULTIPLIED BY 2 FOR PARTICLE BALANCE. IN THE CASE OF EMISSION
C     IN ATOMIC STATE, THE WEIGHT MUST THEN BE STORED DIVIDED BY 2.
      WA=W
      IF(IREAC.EQ.2 .AND. MOL.EQ.1) WA=WA*0.5
C     N.B.  IZO IS HERE THE ZONE NUMBER OF THE IMPACTED WALL/ESCAPE REG.
      WACOL(NUTRAL,IZO,IREAC)=WACOL(NUTRAL,IZO,IREAC)+WA
      IF(IREAC.EQ.3) GO TO 800
      LMACRO=IMACRO(IZO)
      LMN=IATOM(NUTRAL)
      IF(NUTRAL.LE.NIONPM) THEN
C           NON-ALBEDO WALL. ESCAPED FUEL FRACTION DUE TO RECMAT
        DW=WOLD-W*FLOAT(MOL)/FLOAT(MOLOLD)
        DE=WOLD*EOLD-W*FLOAT(MOL)/FLOAT(MOLOLD)*E
        EGA(NUTRAL)=EGA(NUTRAL)+DW*CLOCK
C NO    ESCAPE(IZO,NUOLD)=ESCAPE(IZO,NUOLD)+DW
        ESCEN(IZO,NUOLD)=ESCEN(IZO,NUOLD)+DE
        CALL GRU(EOLD,NGEV,EGEV(1),1,IG)
        ENFLUX(NUOLD,IZO,IG)=ENFLUX(NUOLD,IZO,IG)+DW
C       + INTO WALL
        ESCAPE(IZO,NUOLD)=ESCAPE(IZO,NUOLD)+WOLD
C       - OUT OF WALL
        ESCAPE(IZO,NUTRAL)=ESCAPE(IZO,NUTRAL)-W
C
        ZA=TABLE(LABINT(NUOLD),4)
        IF(ZA.LE.1.1) THEN
C         LUMP ALL HYDROGENIC NEUTRALS TOGETHER
          LMN=IMN
          DW=WOLD-W*FLOAT(MOL)/FLOAT(MOLOLD)
          SMACRO(LMACRO,5,LMN)=SMACRO(LMACRO,5,LMN)+DW*FLOAT(MOLOLD)
          AGEH(1)=AGEH(1)+DW*FLOAT(MOLOLD)
          AGEH(2)=AGEH(2)+DW*FLOAT(MOLOLD)*AGE
          AGEH(3)=AGEH(3)+DW*FLOAT(MOLOLD)*AGE**2
        ENDIF
CT      PUMPED:
CT      PARET4=PARET4+DW*FLOAT(MOL)
      ELSE
C           NON-ALBEDO WALL. IN-OUT (W=0 FOR HEAVY IMP.) 'ESCAPE'
        DW=WOLD-W
        SMACRO(LMACRO,5,LMN)=SMACRO(LMACRO,5,LMN)+DW
      ENDIF
      IF(W.LE.0.0) GO TO 810
C                           1)ENERGY SUBTRACTED FROM WALL :E*W;
C                           2)ENERGY GIVEN TO WALL IF TWO ATOMS(H ISOT.)
C                             RECOMBINE TO FORM A MOLECULE : 4.4EV
      TRAN=0.0
      IF(MOLOLD.EQ.1.AND.MOL.EQ.2) TRAN=4.4
C           SCORE IN PMOLR2 POWER RELEASED IN WALLS BY NEUTRAL ATOMS
C           WHEN THEY RECOMBINE TO FORM A MOLECULE.
C           (REMEMBER THAT PMOLR1 IS THE SAME QUANTITY DUE TO INIT.IONS)
      IF(MOLOLD.EQ.1.AND.MOL.EQ.2) PMOLR2= PMOLR2 + WOLD*4.4
      CALL GRU(E,NGEV,EGEV(1),1,IG)
      IF(NUTRAL.LE.NIONPM)
     *ENFLUX(NUTRAL,IZO,IG)=ENFLUX(NUTRAL,IZO,IG)-W*(E-TRAN)
      GO TO 810
C                               ALBEDO WALL
  800 CONTINUE
C                               ESCAPED FRACTION
      DW=WOLD-W*FLOAT(MOL)/FLOAT(MOLOLD)
      DE=WOLD*EOLD-W*FLOAT(MOL)/FLOAT(MOLOLD)*E
      EGA(NUTRAL)=EGA(NUTRAL)+DW*CLOCK
C NO  ESCAPE(IZO,NUOLD)=ESCAPE(IZO,NUOLD)+DW
      ESCEN(IZO,NUOLD)=ESCEN(IZO,NUOLD)+DE
      CALL GRU(EOLD,NGEV,EGEV(1),1,IG)
      ENFLUX(NUOLD,IZO,IG)=ENFLUX(NUOLD,IZO,IG)+DW
C     + INTO WALL
      ESCAPE(IZO,NUOLD)=ESCAPE(IZO,NUOLD)+WOLD
C     - OUT OF WALL
      ESCAPE(IZO,NUTRAL)=ESCAPE(IZO,NUTRAL)-W
      ZA=TABLE(LABINT(NUOLD),4)
      LMACRO=IMACRO(IZO)
      LMN=IATOM(NUTRAL)
      IF(ZA.LE.1.1) THEN
C       LUMP ALL HYDROGENIC NEUTRALS TOGETHER
        LMN=IMN
        SMACRO(LMACRO,5,LMN)=SMACRO(LMACRO,5,LMN)+DW*FLOAT(MOLOLD)
        AGEH(1)=AGEH(1)+DW*FLOAT(MOLOLD)
        AGEH(2)=AGEH(2)+DW*FLOAT(MOLOLD)*AGE
        AGEH(3)=AGEH(3)+DW*FLOAT(MOLOLD)*AGE**2
CW      IF(DW.GT.0.0)
CW   *  WRITE(IUERR,423)NHIST,'     ENDS',-2,EXTSYM(NUTRAL),DW,AGE
      ELSE IF(NUTRAL.GT.NIONPM) THEN
        DW=WOLD-W
        SMACRO(LMACRO,5,LMN)=SMACRO(LMACRO,5,LMN)+DW
      ENDIF
CT    PUMPED:
CT    PARET4=PARET4+DW*FLOAT(MOL)
C
  810 CONTINUE
      IF(NCOLW.LT.MCOLW) GO TO 820
      TRUNC=TRUNC+FLOAT(MOL)
      GO TO 1040
  820 ISENT=0
C                               W < WCUT IF
C                            1) WEIGHT REDUCED BECAUSE OF PUMPING/ALBEDO
C                            2) IF SELFSPUTTERING NOTHING ELSE
C                               EMERGES FROM WALL (W=0)
COLD  IF(W) 1040 , 1040 , 450
      IF(W.GE.WCUT/WPESO(IREG3D)) GOTO 825
      TRUNC=TRUNC+W*FLOAT(MOL)
      GO TO 1040
  825 IF(IGAP.EQ.0) GOTO 450
      SIGT=0.0
      GOTO 505
C
C                               NEW REGION: PLASMA/VOID
  830 CONTINUE
      IGAP=0
C
      LMACTO=IMACRO(IZOTO)
      LMACFR=IMACRO(IZOFRO)
C
C               SCORE FLUXES TO PLASMA BOUNDARY FROM GAP VOID
      LOGIC = LMACFR.EQ.8 .AND.
     *        (LMACTO.EQ.2 .OR. LMACTO.EQ.3 .OR. LMACTO.EQ.4)
C
C               SCORE FLUXES TO PLASMA BOUNDARY FROM PRIVATE VOID
      LOGIC = (LOGIC) .OR.
     *        ( LMACFR.EQ.14 .AND.
     *         (LMACTO.EQ.6 .OR. LMACTO.EQ.5) )
      IF(LOGIC) THEN
        WACOL(NUTRAL,IZOTO,8)=WACOL(NUTRAL,IZOTO,8)+W
        WACOL(NUTRAL,IZOTO,12)=WACOL(NUTRAL,IZOTO,12)+W*E
      ENDIF
C
C                                  FROM VOID?
      IF(SIGT.EQ.0.0) GO TO 500
C                               CAMMINO RIMASTO DA PERCORRERE IN XY
      CALM=(DISTZ-DIST)*SIGT
C                               SE ESAURITO CAMMINO
      IF(CALM.LE.1.0E-04) GO TO 890
C                               SPLITTING OR R.R. ?
      W1=WPESO(IREG3Z)
      W2=WPESO(IREG3D)
      IF(W1-W2) 840 , 500 , 870
C                               SPLITTING
  840 CONTINUE
      ZNU=W2/W1
      NU=ZNU
      C=RANF()
      IF(C.LE.(ZNU-FLOAT(NU))) NU=NU+1
      WOLD=W
      W=W/ZNU
      IF(NU.EQ.1) GO TO 500
      IF(NSPLIT.LT.MSPLIT) GO TO 860
      WRITE(IUERR, 850 ) NHIST
  850 FORMAT('0***** SPLITTING BANK FULL AT HISTORY',I6)
      W=WOLD
      GO TO 500
C                               MEMORIZZA TUTTI I FIGLI SALVO L'ULTIMO
  860 CONTINUE
      NSPLIT=NSPLIT+1
      BANK(NSPLIT,1)=NUTRAL
      BANK(NSPLIT,2)=W
      BANK(NSPLIT,3)=E
      DWORD=X
      BANK(NSPLIT, 4)=SWORD(1)
      BANK(NSPLIT,22)=SWORD(2)
      DWORD=Y
      BANK(NSPLIT, 5)=SWORD(1)
      BANK(NSPLIT,23)=SWORD(2)
      DWORD=Z
      BANK(NSPLIT, 6)=SWORD(1)
      BANK(NSPLIT,24)=SWORD(2)
      BANK(NSPLIT,7)=IZ
      BANK(NSPLIT,8)=IR
      BANK(NSPLIT,9)=IREG
      BANK(NSPLIT,10)=IREG3D
      BANK(NSPLIT,11)=COSP
      BANK(NSPLIT,12)=SINP
      BANK(NSPLIT,13)=COST
      BANK(NSPLIT,14)=SINT
      BANK(NSPLIT,15)=MOL
      IBRNPS=0
      IF(DENSE(IREG3D).GT.0.0) IBRNPS=1
      BANK(NSPLIT,16)=IBRNPS
      BANK(NSPLIT,17)=0.0
      BANK(NSPLIT,18)=NU-1
      BANK(NSPLIT,19)=IBIN
      BANK(NSPLIT,20)=CLOCK
      BANK(NSPLIT,21)=AGE
      BANK(NSPLIT,25)=ICX
      MAXSON=MAX0(MAXSON,NSPLIT)
      MAXSOH=MAX0(MAXSOH,NSPLIT)
CWBANKWRITE(6,*) '  860 INTO BANK NUTRAL=',NUTRAL
C     L'ULTIMO FIGLIO PROSEGUE
      GO TO 500
C                               RUSSIAN ROULETTE
  870 CONTINUE
      ZNU=W2/W1
      C=RANF()
      IF(C.LT.ZNU) GO TO 880
      WNP=WNP+W
      GO TO 1040
  880 WOLD=W
      W=WOLD/ZNU
      WRS=WRS+(W-WOLD)
      GO TO 500
C                               URTA SUL BORDO DELLA NUOVA REGIONE
  890 ISENT=0
      IGAP=0
      CALL XST
      IF(LDEBUG)
     * WRITE(IOUT, 510 ) A,MOL,E,SIGE,SIGIT,SIGST,(SIGI(K),SIGCX(K),
     * SIGEL(K),K=1,NION)
C
C                               RESTA NELLA REGIONE
  900 CONTINUE
C                               IONE URTATO
      IF(SIGT.LE.0.0) THEN
         IERUN=6
         GO TO 560
      ENDIF
      IF(NUTRAL.LE.NIONPM) THEN
        NCOLP(1)=NCOLP(1)+1
      ELSE
        NCOLP(2)=NCOLP(2)+1
      ENDIF
      COLS=COLS+1.0
C
      IF(LDEBWR .AND. NUTRAL.LE.NIONPM .AND.
     *  IDEBWR.LE.NDEBWR .AND. KDEBWR(IDEBWR).LT.NDEBPT) THEN
        KDEBWR(IDEBWR)=KDEBWR(IDEBWR)+1
        XDEBWR(IDEBWR,KDEBWR(IDEBWR),1)=X
        XDEBWR(IDEBWR,KDEBWR(IDEBWR),2)=Y
        XDEBWR(IDEBWR,KDEBWR(IDEBWR),3)=Z
CW      WRITE(6,*) ' IDEBWR=',IDEBWR,' K=',KDEBWR(IDEBWR),
CW   *             ' IR=',IR,ISENT,' AT',X,Y
      ENDIF
C
      IZO=IZONA(IREG3D)
CW    WRITE(6,*) ' COLLISION IN IZO=',IZO,' AT',X,Y
      TMOMIN1=0.0
      TMOMIN2=0.0
      TMOMIN3=0.0
      IF(MOL.NE.2) THEN
C       ATOM
        IH2=1
C              BEFORE COLLISION ,E AND MOMENTA IN LEFT-LUGGAGE ROOM
C              (SEE ALSO COMMENT AFTER COLLISION HAS OCCURRED)
C         A) CONSERVATIVE PROCESSES (C.X. AND. ELASTIC SCATTERING)
C                 1) ENERGY GIVEN TO PLASMA
        ERECYC(NUTRAL,IZO,1)=ERECYC(NUTRAL,IZO,1)+W*E
CCC     IF(NCHAN.EQ.0.OR.ISCHAN.LT.0) GO TO 920
CCC     KINETIC ENERGY DEPOSITED IN THE NATIVE CHANNEL BEFORE EMIGRATON
CCC     IF(NUTRAL.LE.NIONPM)
CCC  *  ECHBEM(NUTRAL,ISCHAN)=ECHBEM(NUTRAL,ISCHAN)+W*E
C               2) MOMENTUM TO PLASMA
        S=SQRT(E*A)*2.3151E-18
        TMOMIN1=W*S*COSP*SINT
        TMOMIN2=W*S*SINP*SINT
        TMOMIN3=W*S*COST
        PRECYC(NUTRAL,IZO,1)=PRECYC(NUTRAL,IZO,1)+TMOMIN1
        PRECYC(NUTRAL,IZO,2)=PRECYC(NUTRAL,IZO,2)+TMOMIN2
        PRECYC(NUTRAL,IZO,3)=PRECYC(NUTRAL,IZO,3)+TMOMIN3
      ELSE
C       MOLECULES
        IH2=2
C         A) IONISATION
C                 1) ENERGY GIVEN TO PLASMA
        W0=W*(SIGIT/SIGT)
        ERECYC(NUTRAL,IZO,1)=ERECYC(NUTRAL,IZO,1)+W0*3.0
CCC     IF(NCHAN.EQ.0.OR.ISCHAN.LT.0) GO TO 920
CCC     KINETIC ENERGY DEPOSITED IN THE NATIVE CHANNEL BEFORE EMIGRATON
CCC     IF(NUTRAL.LE.NIONPM)
CCC  *  ECHBEM(NUTRAL,ISCHAN)=ECHBEM(NUTRAL,ISCHAN)+W0*3.0
C                 2) MOMENTUM
C       NONE, BECAUSE THE ION IS ISOTROPIC
C         B) ELASTIC SCATTERING
C       SEE BELOW
      ENDIF
C                               PESO EMERGENTE
      WOLD=W
      IF(MOL.EQ.2) GOTO 1010
C         EXPECTED SURVIVAL
      PSUR=SIGST/SIGT
      IF(NUTRAL.LE.NIONPM) THEN
        NCLP=NCOLP(1)
      ELSE
        NCLP=NCOLP(2)
      ENDIF
      IF(NCLP.GE.MCOLP) THEN
C         ANALOG SURVIVAL
        C=RANF()
        IF(C.LT.PSUR) THEN
          PSUR=1.0
        ELSE
          PSUR=0.0
        ENDIF
      ENDIF
      W=WOLD*PSUR
      EGA(NUTRAL)=EGA(NUTRAL)+WOLD*(1.0-PSUR)*CLOCK
      ZA=TABLE(LABINT(NUTRAL),4)
      LMACRO=IMACRO(IZO)
      LMN=IATOM(NUTRAL)
      IF(ZA.LE.1.1) THEN
C       LUMP ALL HYDROGENIC NEUTRALS TOGETHER
        LMN=IMN
        WA=WOLD*(1.0-PSUR)
        SOURCE(IZO,2)=SOURCE(IZO,2)+WA
        SMACRO(LMACRO,2,LMN)=SMACRO(LMACRO,2,LMN)+WA
        AGEH(1)=AGEH(1)+WA
        AGEH(2)=AGEH(2)+WA*AGE
        AGEH(3)=AGEH(3)+WA*AGE**2
CW      IF(WA.GT.0.0)
CW   *  WRITE(IUERR,423)NHIST,'     ENDS',-3,EXTSYM(NUTRAL),WA,AGE
      ELSE IF(NUTRAL.GT.NIONPM) THEN
        WA=WOLD*(1.0-PSUR)
        SMACRO(LMACRO,2,LMN)=SMACRO(LMACRO,2,LMN)+WA
      ENDIF
C     WOLD*SIGST/SIGT <> WOLD*(SIGST*SIGT) !
      IF(W.LE.0.0) GO TO 940
C                               RUSSIAN ROULETTE
C      (INEFFECTIVE SINCE WGAME=..*WTHRES, AND WTHRES=0)
      IF(NUTRAL.GT.NIONPM) GO TO 930
      WTRAN=WGAME/WPESO(IREG3D)
      IF(W.GE.WTRAN) GO TO 930
      C=RANF()
      WTRAN=WSTART/WPESO(IREG3D)
      IF(C.LT.W/WTRAN) GO TO 920
      WNP=WNP+W
      GO TO 1040
  920 WRS=WRS+(WTRAN-W)
      W=WTRAN
  930 CONTINUE
C                               IMPURITY OR HELIUM?
  940 IF(NUTRAL.LE.NIONPM) GO TO 980
C                               TRANSPORT OF IMPURITY IONS TO TARGET
      IT=ISTARG(IREG3D)
      IF(IT.LE.0) GO TO 1040
      IF(IT.LE.NSEGSO) GO TO 950
      KSOUXY=IT-NSEGSO
      ISEGS=0
      LAYER=0
      GO TO 960
  950 KSOUXY=0
      ISEGS=KORSEG(IT)
      LAYER=LAYSEG(ISEGS)
  960 W=WOLD
      Q=CHARGE(NUTRAL)
      IF(Q.NE.0.0) GO TO 970
      J=LABINT(NUTRAL)
      Q=TABLE(J,9)
  970 CONTINUE
      ITSEG=0
      IF(ISEGS.GT.0) ITSEG=ITYSEG(ISEGS)
      CALL HOW(ISEGS,ITSEG,LAYER,KSOUXY,1,Q,1,EBRN,IR3BRN)
      IF(IR.LT.0) THEN
        IERUN=8
        GOTO 560
      ENDIF
CCC                         IMPUR=1
C     FOURTH PARAMETER=1 FOR IMPURITIES.
      IH2=0
      WTRAN=WCUT/WPESO(IREG3D)
      IF(W.GE.WTRAN) GO TO 1030
      TRUNC=TRUNC+W*FLOAT(MOL)
      GO TO 1040
C
  980 CONTINUE
      WTRAN=WCUT/WPESO(IREG3D)
      IF(W.GE.WTRAN) GO TO 985
      TRUNC=TRUNC+W*FLOAT(MOL)
      GO TO 1040
C                               TIPO DI REAZIONE
  985 CONTINUE
C     HOT ATOM
      IBIN=2
      ICX=1
      CALL DIFFUS(3)
      C=RANF()
      IF(C.LT.SCX/SST) GO TO 990
C                               URTO ELASTICO
      E1=E
      S=SQRT(E*A)*2.3151E-18
      P1 = S*(COSP*SINT*PARDIR(IZO,1)+
     *        SINP*SINT*PARDIR(IZO,2)+
     *        COST*PARDIR(IZO,3))
      CALL ELAS
      ERECEL(NUTRAL,IZO)=ERECEL(NUTRAL,IZO) + W*(E1-E)
      S=SQRT(E*A)*2.3151E-18
      P2 = S*(COSP*SINT*PARDIR(IZO,1)+
     *        SINP*SINT*PARDIR(IZO,2)+
     *        COST*PARDIR(IZO,3))
      PRECEL(NUTRAL,IZO)=PRECEL(NUTRAL,IZO) + W*(P1-P2)
      IF(E.GT.TAGLIO) GO TO 1030
      TRUNC=TRUNC+W*FLOAT(MOL)
      GO TO 1040
C                               CHARGE EXCHANGE
  990 NUOLD=NUTRAL
      E1=E
      ZA=TABLE(LABINT(NUTRAL),4)
      IF(IMOMSO.EQ.1 .AND. ZA.LE.1.1) THEN
C         SUBTRACT MOMENTUM TO PLASMA TO AVOID DOUBLE COUNTING ABOVE
        PRECYC(NUTRAL,IZO,1)=PRECYC(NUTRAL,IZO,1)-TMOMIN1
        PRECYC(NUTRAL,IZO,2)=PRECYC(NUTRAL,IZO,2)-TMOMIN2
        PRECYC(NUTRAL,IZO,3)=PRECYC(NUTRAL,IZO,3)-TMOMIN3
      ENDIF
      CALL CHARGX
CT    WRITE(IUERR,*) 'C.X.',NUOLD,NUTRAL
      IF(MCX.EQ.2) THEN
        TE = TEMPE(IREG3D)
        TI = TEMPI(IREG3D)
        ACH = DRIFTV(IREG3D)
        E = 1.5*TI + ACH**2*(TE+TI)*0.5
      ENDIF
      ERECCX(NUTRAL,IZO)=ERECCX(NUTRAL,IZO) + W*(E1-E)
      ZA=TABLE(LABINT(NUTRAL),4)
      IF(IMOMSO.EQ.1 .AND. ZA.LE.1.1) THEN
C         ADD MOMENTUM FROM PLASMA TO AVOID DOUBLE COUNTING BELOW
        S=SQRT(E*A)*2.3151E-18
        PRECYC(NUTRAL,IZO,1)=PRECYC(NUTRAL,IZO,1)+W*S*COSP*SINT
        PRECYC(NUTRAL,IZO,2)=PRECYC(NUTRAL,IZO,2)+W*S*SINP*SINT
        PRECYC(NUTRAL,IZO,3)=PRECYC(NUTRAL,IZO,3)+W*S*COST
      ENDIF
      IF(E.GT.TAGLIO) GO TO 1000
      TRUNC=TRUNC+W*FLOAT(MOL)
      GO TO 1040
 1000 CONTINUE
      NUTRAL=NUTRAL
      IF(NUTRAL.NE.NUOLD) WBORN(NUTRAL)=WBORN(NUTRAL)+W
      IF(NUTRAL.NE.NUOLD) HISTOR(NUTRAL)=HISTOR(NUTRAL)+1.0
      GO TO 1030
C                               MOLECULAR SCATTERING
 1010 CONTINUE
      IF(SIGEST.LE.0.0) GOTO 1015
      CALL DIFFUS(3)
      C=RANF()
      TRAN=(SIGST+SIGSTS)/(SIGST+SIGSTS+SIGEST)
      IF(C.LT.TRAN) GO TO 1015
C                               URTO ELASTICO
        ERECYC(NUTRAL,IZO,1)=ERECYC(NUTRAL,IZO,1)+W*E
        E1=E
        S=SQRT(E*A)*2.3151E-18
        PRECYC(NUTRAL,IZO,1)=PRECYC(NUTRAL,IZO,1)+W*S*COSP*SINT
        PRECYC(NUTRAL,IZO,2)=PRECYC(NUTRAL,IZO,2)+W*S*SINP*SINT
        PRECYC(NUTRAL,IZO,3)=PRECYC(NUTRAL,IZO,3)+W*S*COST
        P1 = S*(COSP*SINT*PARDIR(IZO,1)+
     *          SINP*SINT*PARDIR(IZO,2)+
     *          COST*PARDIR(IZO,3))
      CALL ELAS
        ERECYC(NUTRAL,IZO,2)=ERECYC(NUTRAL,IZO,2)-W*E
        ERECEL(NUTRAL,IZO)=ERECEL(NUTRAL,IZO) + W*(E1-E)
        S=SQRT(E*A)*2.3151E-18
        PRECYC(NUTRAL,IZO,1)=PRECYC(NUTRAL,IZO,1)-W*S*COSP*SINT
        PRECYC(NUTRAL,IZO,2)=PRECYC(NUTRAL,IZO,2)-W*S*SINP*SINT
        PRECYC(NUTRAL,IZO,3)=PRECYC(NUTRAL,IZO,3)-W*S*COST
        P2 = S*(COSP*SINT*PARDIR(IZO,1)+
     *          SINP*SINT*PARDIR(IZO,2)+
     *          COST*PARDIR(IZO,3))
        PRECEL(NUTRAL,IZO)=PRECEL(NUTRAL,IZO) + W*(P1-P2)
      IF(E.GT.TAGLIO) GO TO 1030
      TRUNC=TRUNC+W*FLOAT(MOL)
      GO TO 1040
C                               MOLECULAR DISSOCIATION
 1015 CALL COLAM
      IF(E.GT.TAGLIO) GO TO 1020
      TRUNC=TRUNC+W*FLOAT(MOL)
      GO TO 1040
 1020 CONTINUE
      IF(IDMOL.EQ.-1) THEN
        EGA(NUTRAL)=EGA(NUTRAL)+W*CLOCK
        SOURCE(IZO,2)=SOURCE(IZO,2)+W
        LMACRO=IMACRO(IZO)
        LMN=IATOM(NUTRAL)
C       LUMP ALL HYDROGENIC NEUTRALS TOGETHER
        LMN=IMN
        SMACRO(LMACRO,2,LMN)=SMACRO(LMACRO,2,LMN)+W
        AGEH(1)=AGEH(1)+W
        AGEH(2)=AGEH(2)+W*AGE
        AGEH(3)=AGEH(3)+W*AGE**2
CW      IF(W.GT.0.0)
CW   *  WRITE(IUERR,423)NHIST,'     ENDS',-4,EXTSYM(NUTRAL),W,AGE
      ENDIF
C     COLD ATOM
      IBIN=1
      NUTRAL=NUTRAL
      MOL=MOL
      WBORN(NUTRAL)=WBORN(NUTRAL)+W
      HISTOR(NUTRAL)=HISTOR(NUTRAL)+1.0
***********************************************************
*     IH2=1   NO! PERCHE' L'ENERGIA VIENE DAGLI ELETTRONI *
***********************************************************
C
 1030 CONTINUE
      IF(IH2.EQ.1) THEN
C       ATOM:     AFTER COLLISION, RECLAIM FROM LEFT-LUGGAGE ROOM
C                 ENERGY AND MOMENTUM SURVIVED
C                 (SEE COMMENT ABOVE, BEFORE COLLISION)
C                           1)  ENERGY SUBTRACTED FROM PLASMA
        ERECYC(NUTRAL,IZO,2)=ERECYC(NUTRAL,IZO,2)-W*E
CC      IF(NCHAN.EQ.0.OR.ISCHAN.LT.0) GO TO 1050
CC      KINETIC ENERGY DEPOSITED IN THE NATIVE CHANNEL BEFORE EMIGRATON
CC      IF(NUTRAL.LE.NIONPM)
CC   *  ECHBEM(NUTRAL,ISCHAN)=ECHBEM(NUTRAL,ISCHAN)-W*E
C                           2)  MOMENTUM FROM PLASMA
        S=SQRT(E*A)*2.3151E-18
        PRECYC(NUTRAL,IZO,1)=PRECYC(NUTRAL,IZO,1)-W*S*COSP*SINT
        PRECYC(NUTRAL,IZO,2)=PRECYC(NUTRAL,IZO,2)-W*S*SINP*SINT
        PRECYC(NUTRAL,IZO,3)=PRECYC(NUTRAL,IZO,3)-W*S*COST
      ENDIF
C                               GO ON TRACKING?
      IF(MCOLP.GT.0) GOTO 450
      IF(NUTRAL.LE.NIONPM) THEN
        NCLP=NCOLP(1)
      ELSE
        NCLP=NCOLP(2)
      ENDIF
      IF(NCLP.LT.-MCOLP) GOTO 450
C                               RUSSIAN ROULETTE
      ZA=TABLE(LABINT(NUTRAL),4)
      WOLD=W
      C=RANF()
      IF(C.LT.PLIFE) GO TO 1033
      EGA(NUTRAL)=EGA(NUTRAL)+W*CLOCK
      TRAN=W*FLOAT(MOL)
      WNP=WNP+TRAN
      LMACRO=IMACRO(IZO)
      LMN=IATOM(NUTRAL)
      IF(ZA.LE.1.1) THEN
C       LUMP ALL HYDROGENIC NEUTRALS TOGETHER
        LMN=IMN
        SOURCE(IZO,3)=SOURCE(IZO,3)-TRAN
        SMACRO(LMACRO,3,LMN)=SMACRO(LMACRO,3,LMN)-TRAN
        AGEH(1)=AGEH(1)+TRAN
        AGEH(2)=AGEH(2)+TRAN*AGE
        AGEH(3)=AGEH(3)+TRAN*AGE**2
CW      IF(TRAN.GT.0.0)
CW   *  WRITE(IUERR,423)NHIST,'     ENDS',-5,EXTSYM(NUTRAL),
CW   &                  TRAN,AGE
      ELSE
        SMACRO(LMACRO,3,LMN)=SMACRO(LMACRO,3,LMN)-TRAN
      ENDIF
      GO TO 1040
 1033 WOLD=W
      W=WOLD/PLIFE
      TRAN=(W-WOLD)*FLOAT(MOL)
      WRS=WRS+TRAN
C     EGA(NUTRAL)=EGA(NUTRAL)+W*CLOCK  NO!, NEUTRAL IS NOT DISAPPEARING
      LMACRO=IMACRO(IZO)
      LMN=IATOM(NUTRAL)
      IF(ZA.LE.1.1) THEN
C       LUMP ALL HYDROGENIC NEUTRALS TOGETHER
        LMN=IMN
        SOURCE(IZO,3)=SOURCE(IZO,3)+TRAN
        SMACRO(LMACRO,3,LMN)=SMACRO(LMACRO,3,LMN)+TRAN
      ELSE IF(NUTRAL.GT.NIONPM) THEN
        SMACRO(LMACRO,3,LMN)=SMACRO(LMACRO,3,LMN)+TRAN
      ENDIF
      GO TO 450
C                       IF PUSH-DOWN LIST NOT EMPTY, PROCESS DAUGHTER
 1040 IF(NSPLIT.EQ.0) GO TO 1090
      NUTRAL=BANK(NSPLIT,1)
      IF(LABINT(NUTRAL).EQ.LPVOID .AND. MIMP.LE.0) THEN
        WRITE(IUERR,*) ' **** PUMP MATERIAL CANNOT BE SPUTTERED'
        CALL EXITN(1)
      ENDIF
      W=BANK(NSPLIT,2)
      E=BANK(NSPLIT,3)
      SWORD(1)=BANK(NSPLIT, 4)
      SWORD(2)=BANK(NSPLIT,22)
      X=DWORD
      SWORD(1)=BANK(NSPLIT, 5)
      SWORD(2)=BANK(NSPLIT,23)
      Y=DWORD
      SWORD(1)=BANK(NSPLIT, 6)
      SWORD(2)=BANK(NSPLIT,24)
      Z=DWORD
      IZ=BANK(NSPLIT,7)
      IR=BANK(NSPLIT,8)
      IREG=BANK(NSPLIT,9)
      IREG3D=BANK(NSPLIT,10)
      COSP=BANK(NSPLIT,11)
      SINP=BANK(NSPLIT,12)
      COST=BANK(NSPLIT,13)
      SINT=BANK(NSPLIT,14)
      TANT=SINT/COST
      MOL=BANK(NSPLIT,15)
      IBRNPL=BANK(NSPLIT,16)
      CALM=BANK(NSPLIT,17)
      IBIN=BANK(NSPLIT,19)
      CLOCK=BANK(NSPLIT,20)
      AGE=BANK(NSPLIT,21)
      ICX=BANK(NSPLIT,25)
      BANK(NSPLIT,18)=BANK(NSPLIT,18)-1.0
      IF(BANK(NSPLIT,18).LT.1.0) NSPLIT=NSPLIT-1
      ISENT=0
      IGAP=0
      L=LABINT(NUTRAL)
      A=TABLE(L,3)*FLOAT(MOL)
CWBANKWRITE(6,*) ' 1040 FROM BANK NUTRAL=',NUTRAL
      IF(CALM)450,450,460
C
C     FINE STORIA
C     -----------
C                               RERUN THIS HISTORY
 1060 CONTINUE
      IF(.TRUE.) GO TO 1040
C------- A CAUSA DELLA MEMORIA RICHIESTA IL RERUN E' DISATTIVATO
      DO 1070 K=1,NSCORE
 1070 SCOREC(K)=SCOSAV(K)
      IR=IRWH
      IREG=IREGWH
      NSPLIT=0
      IF(INCID.LT.NST) GO TO 420
      WRITE(IUERR, 1080 )
 1080 FORMAT(/' ***** TOO MANY GEOMETRY ACCIDENTS. CHECK INPUT DATA')
      CALL EXITN(1)
C
 1090 CONTINUE
      FAXSOH=FAXSOH+MAXSOH
C
C                              LAUNCH RECYCLING IMPURITY ION?
 1092 IF(ISTRTZ.GE.NZREC) GOTO 1095
      ISTRTZ=ISTRTZ+1
      NUTRAL=NUTRLZ(ISTRTZ)
      W=ZSOURC(ISTRTZ)/HHESRC
CW    WRITE(IUERR,*) ' BEFORE STARTZ NSPLIT=',NSPLIT
CW    WRITE(IUERR,'(/'' LAUNCH IMPURITY'',I3,2X,A4,'' W='',1P,E12.4)')
CW   &      ISTRTZ,TABLE(LABINT(NUTRAL),6),W
      IF(W.LE.0.0) GOTO 1092
CW    WRITE(IUERR,*) ' START WITH ZSOURC=',ISTRTZ,ZSOURC(ISTRTZ)
      CALL STARTN(ITSOU,ITSIM,WIS,ISTRTZ,NUTBRN,WBRN,EBRN,IR3BRN)
C     THE LAUNCHED IMPURITY ION IS ALWAYS PUT IN THE SPLITTING BANK,
C     EVEN IF IT IS RECYCLABLE, AND THE CURRENT WEIGHT IS SET TO ZERO.
CW    WRITE(IUERR,*) '  AFTER STARTZ NUTRAL=',NUTRAL,' W=',W,' E=',E
CW    WRITE(IUERR,*) '  AFTER STARTZ NSPLIT=',NSPLIT
CW    WRITE(IUERR,*) ' BANK',(BANK(L,1),BANK(L,2),BANK(L,3),L=1,NSPLIT)
CW    WRITE(IUERR,*) ' IR=',IR,' IREG=',IREG,' IREG3D=',IREG3D
      IF(IR.LT.0) THEN
        IERUN=9
        GOTO 560
      ENDIF
      GOTO 1040
C
C                              SUCCESSFUL HISTORY END
 1095 CONTINUE
      IF(KOSE-NSG) 310 , 1100 , 1100
 1100 CONTINUE
      KOST=KOST+NSG
      IBATCH=KOST/NSG
      IF(IDLOOP.NE.0) WRITE(IOUT, 1110 ) IBATCH
 1110 FORMAT('0BATCH NO.',I4,' COMPLETED')
C                      IF IT IS TIME TO PRINT DO NOT CALL S.R. REVISE
C                      SINCE IT WILL BE CALLED LATER ON
      IF(MOD(KOST,NEDIT).EQ.0) GO TO 1120
C                      SINCE A GENERATION HAS BEEN COMPLETED
C                      CALL REVISE TO COMPUTE STANDARD DEV. BUT NO PRINT
C                      (HERE ONLY THE FIRST ENTRY IS USED BY S.R.)
C
C                      COMPUTE TRANHY AND TRANHE BEFORE CALL REVISE, IN
C                      ORDER TO COMPUTE ERRORS OF PUMPING REQUIREMENTS.
      FKOST=KOST
      FKOST1=FKOST/HHESRC
      TRANHY=0.0
      TRANHE=0.0
      IPUMP=PROREQ(4)
      IF(IPUMP.EQ.0) GO TO 1118
      IPUMP=IZONA(IPUMP)
      DO 1116 IZO=1,NZONE
      IF(IBOUNZ(IZO).EQ.0) GO TO 1116
      DO 1115 I=1,NCOM
      IF(IZO.NE.IPUMP) GO TO 1115
C                            STORE H AND HE GOING TO THE PUMP
      TRAN5=ESCAPE(IZO,I)/FKOST1
      IF(I.EQ.INDHEL) TRANHE=TRANHE+TRAN5
      TRAN8=TRAN5
      IF(I.GT.NION) TRAN8=2.0*TRAN8
      IF(I.LE.NIONPM.AND.I.NE.INDHEL)
     *TRANHY=TRANHY+TRAN8
 1115 CONTINUE
 1116 CONTINUE
 1118 CONTINUE
C                              DEFINE ALBEDO FOR S.R. REVISE
C                              PROREQ(4) IS A REGION INDEX
      I=PROREQ(4)
      IF(I.GT.0) ALB=ALBEDO(I)
      CALL REVISE(0,ALB,TRANHY,TRANHE)
 1120 CONTINUE
C                              REPEAT TEST: PRINT?
      IF(MOD(KOST,NEDIT).NE.0) GO TO 300
C                              PRINT, BECAUSE NEDIT REACHED
C                       (S.R. REVISE WILL BE CALLED AND ERRORS PRINTED)
      IF(ISTAMP.NE.1) GO TO 1150
      ISTAMP=1
 1130 WRITE(IOUT, 1140 )KOST
 1140 FORMAT(/'1',48X,'HISTORIES',I6/48X,9('-'))
      GO TO 1170
 1150 WRITE(IOUT, 1160 )KOST
 1160 FORMAT(/48X,'HISTORIES',I6/48X,9('-'))
 1170 IF(TAGLIO.GT.0.0) WRITE(IOUT, 1180 ) TAGLIO
 1180 FORMAT(' TRUNCATED AT',1PE10.3,' EV')
      IF(NCHAN.EQ.0.OR.KINDPR.GT.0)
     *WRITE(IOUT, 1190 )
 1190 FORMAT(' INTERACTIONS OF NEUTRALS WITH PLASMA'/1X,36('=')/)
      FKOST=KOST
C                  RESULTS REFERRED TO SOURCE INTENSITY HHESRC
      FKOST1=FKOST/HHESRC
      PTTOPA=0.0
      PTTOPB=0.0
      TOTCX=0.0
      TOTES(1)=0.0
      TOTES(2)=0.0
      TOTION(1)=0.0
      TOTION(2)=0.0
      TOTION(3)=0.0
      DO K=1,MCP
        SUMION(K)=0.0
      ENDDO
      TOTDIS=0.0
      DO 1200 I=1,MILLE
 1200 BUFFER(I)=0.0
      DO 1210 I=1,MCH
      NORDIN(I)=0
      DO 1210 J=1,MZCHAN
      DO 1210 K=1,NION
      BUFF(I,J,K)=0.0
 1210 CONTINUE
      DO 1220 I=1,MCH
 1220 CHANEL(I)=FLOAT(I)
C                          START LOOP OF ZONES
C                          -------------------
C                    DATA SET FOR NEUTRAL PROFILES TO PLASMA CODE
C     IF(IPUNCH.GT.0) REWIND IPUNCH
C
C================================ EDGE2D ===============================
C       ONE-GROUP
      H0 = 0.0
      H1 = 0.0
      H2 = 0.0
      H3 = 0.0
      H31= 0.0
      H4 = 0.0
      H5 = 0.0
      H6 = 0.0
      H7 = 0.0
      H8 = 0.0
      H9 = 0.0
      H10= 0.0
      H11= 0.0
      H12= 0.0
C       MULTI-GROUP
      Q1 = 0.0
      Q2 = 0.0
      Q3 = 0.0
      Q4 = 0.0
      Q5 = 0.0
      Q6 = 0.0
C================================ EDGE2D ===============================
CW    TRAN1=0.0
CW    DO 7568 I=1,NZONE
CW      TRAN1=TRAN1+ENNE(I,1)
C7568 CONTINUE
CW    TRAN3=0.0
CW    DO 7569 I=1,MMACRO
CW      TRAN3=TRAN3+SMACRO(I,5,IMN)
C7569 CONTINUE
CW    WRITE(6,*) ' ENNE=',TRAN1,' SMACRO=',TRAN3
C
CT    TESTA=0.0
      WRITE(IPUNCH,*) '  NIMBUS --> EDGE2D TRANSFER FILE'
      WRITE(IPUNCH,'(A)') LABRUN(1),LABRUN(2)
C----------------------------------------------------------
      IF(IPUNCH.GT.0) THEN
        IF(MIMP.GT.0) THEN
          WRITE(IPUNCH,1390) NION
          WRITE(IPUNCH,1222)
     &          (LABINT(K),TABLE(LABINT(K),6),TABLE(LABINT(K),4),
     &                     TABLE(LABINT(K),3),
     &           K=1,NION)
 1222     FORMAT(I4,4X,A4,1P,2E12.5)
          WRITE(IPUNCH,1390) NIONPM-NION
          IF(NIONPM.GT.NION)
     &    WRITE(IPUNCH,1222)
     &          (LABINT(K),TABLE(LABINT(K),8),TABLE(LABINT(K),4),
     &                     TABLE(LABINT(K),3),
     &           K=NION+1,NIONPM)
          WRITE(IPUNCH,1390) NCOM-NIONPM
          WRITE(IPUNCH,1222)
     &          (LABINT(K),TABLE(LABINT(K),6),TABLE(LABINT(K),4),
     &                     TABLE(LABINT(K),3),
     &           K=NIONPM+1,NCOM)
        ENDIF
      ENDIF
      DO 1410 IZO=1,NZONE
      SEGNO=+1
C             CLEAR MEMORY FOR RESULTS TO BE TRANSFERRED TP PLASMA CODE
      DO I=1,NION
        PUNION(I)=0.0
        PUNADN(I)=0.0
        DAHFR (I)=0.0
        PUNMDN(I)=0.0
        PUNAEN(I)=0.0
        PUNMEN(I)=0.0
        PUNACS(1,I)=0.0
        PUNACS(2,I)=0.0
        PUNACS(3,I)=0.0
        PUNMCS(1,I)=0.0
        PUNMCS(2,I)=0.0
        PUNMCS(3,I)=0.0
        PUNAE0(I)=0.0
      ENDDO
      ECX=0.0
      PUNENI=0.0
      PUNXMO=0.0
      PUNYMO=0.0
      PUNZMO=0.0
      PUNENE=0.0
      PUNALF=0.0
      DO I=1,NCOM-NIONPM
        PUNZIO(I)=0.0
        PUNZDN(I)=0.0
        PUNZEN(I)=0.0
      ENDDO
C---- PUNASV(1)=0.0
      PUNASV(2)=0.0
      PUNMSV(1)=0.0
      DO K=1,4
        PUNSOU(K,1)=0.0
        PUNSOU(K,2)=0.0
      ENDDO
      DH =0.0
      DH2=0.0
      DZ =0.0
C                          IF NO PLASMA,NO VOID, THEN JUMP
      IF(IBOUNZ(IZO).NE.0) GO TO 1410
C
C            START 1-ST LOOP ON COMPONENTS K IN ZONE IZO (INTERACTIONS)
C            ----------------------------------------------------------
C                                       INTESTAZIONE
C                    ICH=CHANNEL INDEX
      ICH=ICHAN(IZO)
C                    NORDIN(ICH)=ORDER NUMBER OF ZONE IZO IN CHANNEL ICH
C                                (STARTING FROM ZONE WITH LOWEST INDEX)
      IF(ICH.GT.0) NORDIN(ICH)=NORDIN(ICH)+1
C                                 IF IZO HAS NOT BEEN DEFINED AS A CELL
C                                 THEN OUTPUT IN TERMS OF ZONES
      IF(ICH.EQ.0) GO TO 1240
C                                 OUTPUT IN TERMS OF CHANNELS AND CELLS
C                                 (SET SEGNO TO NEGATIVE)
      SEGNO=-1
      IF(NCHAN.EQ.0.OR.KINDPR.GT.0)
     *WRITE(IOUT, 1230 )
 1230 FORMAT(/'  CELL ',' CHARGE-EXCHANGED ',2X,'IONIZED  ELAST.-SCATT.D
     * DISSOCIATED',3X,'FREE PATH      FLUX        DENSITY',
     *4X,'MEAN ENERGY  SLICE VOLUME',/,
     *        '       ','       1/S        ',2X,'  1/S          1/S
     *     1/S    ',3X,'   CM         1/CM2*S       1/CM3 ',
     *4X,'    EV          CM3      ')
      GO TO 1260
C                                 OUTPUT IN TERMS OF ZONES
 1240 IF(KINDPR.GT.0)
     *WRITE(IOUT, 1250 )
 1250 FORMAT(/'  ZONE ',' CHARGE-EXCHANGED ',2X,'IONIZED  ELAST.-SCATT.D
     * DISSOCIATED',3X,'FREE PATH      FLUX        DENSITY',
     *4X,'MEAN ENERGY  SLICE VOLUME',/,
     *        '       ','       1/S        ',2X,'  1/S          1/S
     *     1/S    ',3X,'   CM         1/CM2*S       1/CM3 ',
     *4X,'    EV          CM3      ')
C
 1260 CONTINUE
      IF(VOLZ(IZO).LE.0.0) THEN
        WRITE(IUERR,*) '*** WARNING: UNDEFINED VOLUME OF ZONE',IZO
        WRITE(IUERR,*) '             SET TO 1.0E-10'
        VOLZ(IZO) = 1.0E-10
      ENDIF
      FNORM=VOLZ(IZO)*FKOST1
C                          INTERACTIONS FOR ALL COMPONENTS K AND DENSITY
      DO 1350 K=1,NCOM
      TRAN1=CEXED(IZO,K)/FKOST1
      TRAN2=ABSOR(IZO,K)/FKOST1
      TRAN3=FLUX(IZO,K)/FNORM
      TRAN6=DISSOC(IZO,K)/FKOST1
      TRAN11=ELAST(IZO,K)/FKOST1
      AMBDA=1.0E+30
      TRAN=TRAN1+TRAN2+TRAN6+TRAN11
      IF(TRAN.GT.0.0) AMBDA=(TRAN3*FNORM)/(TRAN*FKOST1)
      TRAN=ENNE(IZO,K)
      TRAN4=0.0
      TRAN4H=0.0
      TRAN5=0.0
      TRAN51=0.0
      TRAN52=0.0
      TRANC1=0.0
      TRANC2=0.0
      TRANC3=0.0
      HALRAD(K)=0.0
      IF(TRAN.LE.0.0) GO TO 1270
C      AVERAGE DENSITY (CM(-3))  ( 1.0217E-06 = SQRT( 1 AMU / 1 EV )
      TRAN4=TRAN/FNORM*1.0217E-06
      TRAN4H=ENNEH(IZO,K)/FNORM*1.0217E-06
C      AVERAGE ENERGY (EV)
      TRAN51=EAVER(IZO,K,1)/TRAN
C      <M V0.V>
      TRAN52=EAVER(IZO,K,2)/TRAN
C      AVERAGE VELOCITY (9.78729E+05 = 1/1.0217E-06)
      TRANC1=VELOC(IZO,K,1)/TRAN * 9.78729E+05
      TRANC2=VELOC(IZO,K,2)/TRAN * 9.78729E+05
      TRANC3=VELOC(IZO,K,3)/TRAN * 9.78729E+05
      ZA=TABLE(LABINT(K),4)
      IF(ZA.GT.1.1) GOTO 1270
      IF(K.LE.NION) THEN
        MOL=1
      ELSE
        MOL=2
      ENDIF
      CALL HALPHA(MOL,DENSEZ(IZO),TEMPEZ(IZO),
     *            TRAN2,TRAN6,HALRAD(K))
 1270 CONTINUE
      IF(SEGNO.LT.0) GO TO 1290
C                            OUTPUT IN TERMS OF ZONES
      IF((NCHAN.EQ.0.OR.KINDPR.GT.0).AND.K.EQ.1)
     *WRITE(IOUT, 1280 )IZO,EXTSYM(K),TRAN1,TRAN2,TRAN11,TRAN6,AMBDA,
     * TRAN3,TRAN4,TRAN51,VOLZ(IZO)
 1280 FORMAT(I6,2X,A4,1PE10.3,8E13.3)
      GO TO 1310
C                            OUTPUT IN TERMS OF CHANNELS AND CELLS
 1290 ICL=NORDIN(ICH)
C                    WRITE CHANNEL INDEX, CELL INDEX WITHIN THE CHANNEL
C                      CELL 1 CORRESPONDS TO THE ZONE WITH LOWEST INDEX
      IF((NCHAN.EQ.0.OR.KINDPR.GT.0).AND.K.EQ.1)
     *WRITE(IOUT, 1300 )ICH,ICL,EXTSYM(K),TRAN1,TRAN2,TRAN11,TRAN6,AMBDA
     *,  TRAN3,TRAN4,TRAN51,VOLZ(IZO)
 1300 FORMAT(I3,',',I2,2X,A4,1PE10.3,8E13.3)
C
 1310 IF((NCHAN.EQ.0.OR.KINDPR.GT.0).AND.K.GT.1)
     *WRITE(IOUT, 1320 ) EXTSYM(K),TRAN1,TRAN2,TRAN11,TRAN6,AMBDA,TRAN3,
     * TRAN4,TRAN51
 1320 FORMAT(8X,A4,1PE10.3,7E13.3,8X,'"')
      TOTCX=TOTCX+TRAN1
      IF(K.LE.NION) THEN
        TOTES(1)=TOTES(1)+TRAN11
      ELSE
        TOTES(2)=TOTES(2)+TRAN11
      ENDIF
      IF(K.LE.NION) THEN
        TOTION(1)=TOTION(1)+TRAN2
      ELSE IF(K.LE.NIONPM) THEN
        TOTION(2)=TOTION(2)+TRAN2
      ELSE
        TOTION(3)=TOTION(3)+TRAN2
      ENDIF
      SUMION(K)=SUMION(K)+TRAN2
      TOTDIS=TOTDIS+TRAN6
C                     MEMORISATION FOR PLOTS
C                     ----------------------
C                     FREE PATH PER ION,CELL,CHANNEL
C                       NO PLOTS IF NCHAN OR MZCHAN>35
      IF(NCHAN.GT.35.OR.MZCHAN.GT.35) GO TO 1340
      IF(ICH.EQ.0) GO TO 1330
      IF(K.GT.NION) GO TO 1330
      BUFF(ICH,NORDIN(ICH),K)=AMBDA
 1330 CONTINUE
C                          IONIZATIONS IN CHANNELS
      IF(ICH.EQ.0) GO TO 1340
      I=ICH+(K-1)*NCHAN
      BUFFER(I)= BUFFER(I)+ TRAN2
C               TOTAL LIGHT IONS PRODUCED IN EACH CHANNEL (HE EXCLUDED)
C                   ("HELIUM" HAS BEEN DEFINED AS DATA/'HE  '/)
C                                     'HE  ' IS THE SYMBOL USED IN
C                                     ARRAY DATA FOR BOTH HE++ AND HE+
      IF(EXTSYM(K).EQ.HELIUM) GO TO 1340
      IF(K.GT.NIONPM) GO TO 1340
      BUFFER(ICH+NCOM*NCHAN)=BUFFER(ICH+NCOM*NCHAN)+TRAN2
 1340 CONTINUE
      IF(IPUNCH.EQ.0) GO TO 1350
C
C          ACCUM. RESULTS FOR PLASMA CODE: H-IONISATIONS IN PUNION,
C          H-DENSITIES IN PUNADN, H2-DENSITIES IN PUNMDN,
C          AND STORE IMP.DENS. IN PUNZDN.
      IF(K.LE.NION  ) THEN
C        FUEL ATOMS
         PUNION(K)=PUNION(K)+TRAN2
         PUNADN(K)=TRAN4
         IF(TRAN4.LE.0.0) THEN
           DAHFR(K)=0.0
         ELSE
           DAHFR(K)=TRAN4H/TRAN4
         ENDIF
         PUNAEN(K)=TRAN51
         PUNAE0(K)=TRAN52
         PUNACS(1,K)=TRANC1
         PUNACS(2,K)=TRANC2
         PUNACS(3,K)=TRANC3
      ELSE IF(K.GT.NION.AND.K.LE.NIONPM) THEN
C        MOLECULES
         IA=IATOM(K)
         IF(IA.LE.0 .OR. IA.GT.NION) THEN
           WRITE(IUERR,*) ' S.R. RUN PUNION K=',K,' IA=',IA
           CALL EXITN(1)
         ENDIF
         PUNION(IA)=PUNION(IA)+TRAN2
         PUNMDN(IA)=TRAN4
         PUNMEN(IA)=TRAN51
         PUNMCS(1,IA)=TRANC1
         PUNMCS(2,IA)=TRANC2
         PUNMCS(3,IA)=TRANC3
      ELSE IF(K.GT.NIONPM) THEN
C        IMPURITIES
         IA=K-NIONPM
         IF(IA.LE.0 .OR. IA.GT.NCOM-NIONPM) THEN
           WRITE(IUERR,*) ' S.R. RUN PUNZIO K=',K,' IA=',IA
           CALL EXITN(1)
         ENDIF
         PUNZIO(IA)=TRAN2
         PUNZDN(IA)=TRAN4
         PUNZEN(IA)=TRAN51
      END IF
C
      IF(DENSI(IZO,1).LE.0.0) GOTO 1350
      ZA=TABLE(LABINT(K),4)
      IF(ZA.GT.1.1) GOTO 1350
      IF(IPUNCH.EQ.0 .OR. NAZONE.GT.0 .OR. IBOUNZ(IZO).NE.0) GOTO 1350
      IF(K.EQ.1 .AND. ENNE(IZO,K).GT.0.0) THEN
        TRAN = ENNE(IZO,K)*1.0217E-06 * DENSI(IZO,1)
     *       * (EAVER(IZO,K,1)/ENNE(IZO,K)-1.5*TEMPI(IZO))
        IF(TRAN.EQ.0.0) THEN
C---      PUNASV(1)=0.0
          PUNASV(2)=1.0
        ELSE
C---      PUNASV(1)=ERECEL(K,IZO) / TRAN
          PUNASV(2)=ERECCX(K,IZO) / TRAN
        ENDIF
CW--    IF(PUNASV(1).NE.0.0)
CW-- *  WRITE(6,*) ' IZO=',IZO,' <SV>EL,A =',PUNASV(1)
CW-- *             ,ERECEL(K,IZO)/FKOST1
        TRAN = FKOST1
        PUNSOU(1,1) = ERECEL(K,IZO) / TRAN
        PUNSOU(2,1) = PRECEL(K,IZO) / TRAN
        PUNSOU(3,1) = ERECCX(K,IZO) / TRAN
      ELSE IF (K.EQ.NION+1 .AND. ENNE(IZO,K).GT.0.0) THEN
        TRAN = ENNE(IZO,K)*1.0217E-06 * DENSI(IZO,1)
     *       * (EAVER(IZO,K,1)/ENNE(IZO,K)-1.5*TEMPI(IZO))
        PUNMSV(1)=ERECEL(K,IZO) / TRAN
CW      IF(PUNMSV(1).NE.0.0)
CW   *  WRITE(6,*) ' IZO=',IZO,' <SV>EL,M =',PUNMSV(1)
CW   *             ,ERECEL(K,IZO)/FKOST1
        TRAN = FKOST1
        PUNSOU(1,2) = ERECEL(K,IZO) / TRAN
        PUNSOU(2,2) = PRECEL(K,IZO) / TRAN
      ENDIF
C                            END 1-ST LOOP OF COMPONENTS OF A ZONE
 1350 CONTINUE
C
C         START 2-ND LOOP ON COMPONENTS K IN ZONE IZO (ENERGY & MOMENTA)
C         --------------------------------------------------------------
C                                      INTESTAZIONE
      IF(NCHAN.EQ.0.OR.KINDPR.GT.0)
     *WRITE(IOUT, 1360 )
 1360 FORMAT(/7X,'ELECTRON EN.LOSS  X-MOM.TRAN.  Y-MOM.TRAN.',
     *'  Z-MOM.TRAN.  KIN.EN.TRAN.   H-ALPHA'/,
     *        7X,'         EV/S       G*CM/S2      G*CM/S2  ',
     *'    G*CM/S2        EV/S       PHOT./S')
CCC  *'    G*CM/S2        EV/S    PHOT./CM(3)/S')
C
C                      ENERGIES AND MOMENTA FOR ALL COMPONENTS K
      DO 1380 K=1,NCOM
        TRAN7A=ERECYC(K,IZO,1)/FKOST1
        TRAN7B=ERECYC(K,IZO,2)/FKOST1
        TRAN7=TRAN7A+TRAN7B
        TRAN8=PRECYC(K,IZO,1)/FKOST1
        TRAN9=PRECYC(K,IZO,2)/FKOST1
        TRAN10=PRECYC(K,IZO,3)/FKOST1
        TRAN12=ELOST(K,IZO)/FKOST1
        POWRAD(K)=POWRAD(K)+TRAN12
        IF(K.LE.NIONPM) THEN
          PTTOPA=PTTOPA+TRAN7A
          PTTOPB=PTTOPB+TRAN7B
        ENDIF
C                       ELECTRON EN.LOSS, KIN.ENERGY AND MOMENTA
C                       DEPOSITED BY NEUTRALS IN EACH CHANNEL
C                       NO PLOTS IF NCHAN OR MZCHAN>35
        IF(NCHAN.GT.35.OR.MZCHAN.GT.35) GO TO 1370
        IF(ICH.EQ.0) GO TO 1370
        I=ICH+(NCOM+1)*NCHAN
C                       ENERGY
C                             1)ELECTRON ENERGY LOSS
        BUFFER(I)=BUFFER(I)+TRAN12
C                             2)KINETIC ENERGY DEPOSITED
        BUFFER(I+NCHAN)=BUFFER(I+NCHAN)+TRAN7
C                       MOMENTA MX,MY,MZ
        BUFFER(I+2*NCHAN)=BUFFER(I+2*NCHAN)+TRAN8
        BUFFER(I+3*NCHAN)=BUFFER(I+3*NCHAN)+TRAN9
        BUFFER(I+4*NCHAN)=BUFFER(I+4*NCHAN)+TRAN10
C
 1370   IF(NCHAN.EQ.0.OR.KINDPR.GT.0)
     *  WRITE(IOUT, 1320 ) EXTSYM(K),TRAN12,TRAN8,TRAN9,TRAN10,TRAN7,
     *                     HALRAD(K)
        IF(IPUNCH.EQ.0) GO TO 1380
C             ACCUM. RESULTS FOR PLASMA CODE: ENERGIES AND MOMENTA
C             (NO CONTRIBUTION FROM IMPURITY NEUTRALS)
        IF(K.GT.NIONPM) GO TO 1380
        PUNENI=PUNENI+TRAN7
        PUNXMO=PUNXMO+TRAN8
        PUNYMO=PUNYMO+TRAN9
        PUNZMO=PUNZMO+TRAN10
        PUNENE=PUNENE+TRAN12
        PUNALF=PUNALF+HALRAD(K)
C                       END 2-ND LOOP OF COMPONENTS OF A ZONE
 1380 CONTINUE
C================================== EDGE2D =============================
CT    CXCORR = 0.0
      DH = 0.0
      DH2= 0.0
      DZ = 0.0
      ECX= 0.0
      IF(NAZONE.GT.0) GOTO 1388
        IR = IZO
        DE = DENSE(IR)
        DO L=1,NION
          ZL=TABLE(LABINT(L),4)
          IF(ZL.LE.1.1) THEN
            DH  = DH + PUNADN(L)
            DH2 =DH2 + PUNMDN(L)
          ENDIF
        ENDDO
        DO K=NIONPM+1,NCOM
          IA=K-NIONPM
          DZ = DZ + PUNZDN(IA)
        ENDDO
        IF(DE.LE.0.0) GOTO 1388
C                   ONE-GROUP
C                   ---------
        TE = TEMPE(IR)
        IF(DH.LE.0.0) GOTO 1385
C  H-ATOMS
        TI = TEMPI(IR)
        DI = 0.0
        VF2= 0.0
        WX = 0.0
        WY = 0.0
        WZ = 0.0
        E  = 0.0
        A  = 0.0
        ACH= 0.0
        AIO= 0.0
        DO L=1,NION
          ZL=TABLE(LABINT(L),4)
          IF(ZL.LE.1.1) THEN
            H0  = H0 + PUNION(L)
            DI  = DI + DENSI(IR,L)
C              AVERAGES OVER FUEL ATOMS ..
            WX  = WX + PUNADN(L)*PUNACS(1,L)
            WY  = WY + PUNADN(L)*PUNACS(2,L)
            WZ  = WZ + PUNADN(L)*PUNACS(3,L)
C           .. OF TOTAL ENERGY
            E   = E  + PUNADN(L)*PUNAEN(L)
C           .. OF MASS
            A   = A  + PUNADN(L)*TABLE(LABINT(L),3)
C           .. OF MACH NUMBER
            ACH = ACH+ DENSI(IR,L)*DRIFTV(IR)
C           .. OF H-ION MASS
            AIO = AIO + DENSI(IR,L)*TABLE(LABINT(L),3)
          ENDIF
        ENDDO
        E   = E/DH
        A   = A/DH
        ACH = ACH/DI
        AIO = AIO/DI
        VF2 = (WX**2+WY**2+WZ**2)/DH**2
        IF(VF2.LE.0.0) THEN
          WX = 0.6
          WY = 0.8
          WZ = 0.0
        ELSE
          TRAN = SQRT(VF2)*DH
          WX = WX/TRAN
          WY = WY/TRAN
          WZ = WZ/TRAN
        ENDIF
C        FLUID ENERGY (EV)
        EF = AMAX1( 0.5 * A*1.6726E-24 * VF2 / 1.6022E-12 , 0.001)
C       CALL XSS( 3 ,DE,TE,TI,EF,A,
C    &           WX,WY,WZ,
C    &           ACH,DRIFTC(IR,1),DRIFTC(IR,2),DRIFTC(IR,3),
C    &           SVION,DUMMY,SVCEX,DUMMY,
C    &           SVIOM,DUMMY,SVDIM,DUMMY,SVRIC,DUMMY)
        CALL IOSIG(1,TRAN,TRAN,TE,DE,SVION,TRAN,0,IXS(1),IXS(4)
     &            ,IHADAS,IZADAS,IDADAS,USADAS)
        CALL CXSIG(1,A,EF,WX,WY,WZ,
     &             TI,TE,ACH,AIO,
     &             DRIFTC(IR,1),DRIFTC(IR,2),DRIFTC(IR,3),
     &             IXS(2),TRAN,SVCEX)
        TRAN1= DE*SVION
        H1 = H1 + DH*TRAN1*VOLZ(IZO)
        TRAN2= DI * SVCEX * (-1.5*TI - ACH**2*(TE+TI)*0.5    )
        TRAN3= DI * SVCEX * (                             + E)
***                CORRECTION FOR ONE-GROUP
        TCX3 = TRAN3/E
        TRAN = 1.0217E-06/(VOLZ(IZO)*FKOST1)
CT      CXCORR = TRAN/(DH*(TRAN2+TRAN3))
        TRAN = (SIGMAN(IZO,2)+SIGMAN(IZO,3))*TRAN
        ECX  = (TRAN/DH - TRAN2)*E/TRAN3
        TRAN31= DI * SVCEX * (                             + ECX)
***
        TRAN4= DE * SVION * E
        H2 = H2 + DH*TRAN2*VOLZ(IZO)
        H3 = H3 + DH*TRAN3*VOLZ(IZO)
        H31= H31+ DH*TRAN31*VOLZ(IZO)
        H4 = H4 + DH*TRAN4*VOLZ(IZO)
        CALL ELELOS(1,A,0.0,E,TE,DE,ELOSS)
        TRAN5 = DE * SVION * (-ELOSS)
        H5 = H5 + DH*TRAN5*VOLZ(IZO)
        H6 = H6 + DH*VOLZ(IZO)
        H7 = H7 + DH*E*VOLZ(IZO)
        H8 = H8 + DH*EF*VOLZ(IZO)
CW      WRITE(IUERR,*)' IZO',IZO,' E',E,' EF',EF,' H7',H7,' H8',H8
CW      WRITE(IUERR,*)'    ','A',A,' VF2',VF2,' W2=',WX**2+WY**2+WZ**2
CW      WRITE(IUERR,*)'    ','PUNACS=',
CW   &                PUNACS(1,1),PUNACS(2,1),PUNACS(3,1)
C       E.S.
CELA--  TRAN = PUNASV(1)*DI*(E-1.5*TI)
CELA--  H10=H10 + DH*TRAN*VOLZ(IZO)
        H10=H10 + PUNSOU(1,1)
CW--    WRITE(6,*) ' IZO=',IZO,' <SV>EL,A =',PUNASV(1),' H10=',H10
CW      WRITE(6,*) ' IZO=',IZO,' DH=',DH,' EF=',EF,
CW      WRITE(6,*) ' IZO=',IZO,' <SV>EL,A*NA*NI*DE =',DH*TRAN
CW   *                        ,' QEL,A=',PUNSOU(1,1)/VOLZ(IZO)
C       C.X.
        TRAN = PUNASV(2)*DI*(E-1.5*TI)
        H12=H12 + DH*TRAN*VOLZ(IZO)
CW   *               ' V=',PUNACS
 1385   CONTINUE
C  H-MOLECULES
        IF(DH2.LE.0.0) GOTO 1386
        E  =0.0
        DO L=1,NION
          E    = E   + PUNMDN(L)*PUNMEN(L)
        ENDDO
        E = E/DH2
        CALL HMSIG(1,TRAN,TE,DE,SVMDF,SVMDS,SVMI,TRAN,TRAN,TRAN,0
     &            ,IXS(3))
        TRAN1= DE*SVMI
        H1 = H1 + DH2*TRAN1*VOLZ(IZO)
        TRAN9= DE * SVMI * 3.0
        H9 = H9 + DH2*TRAN9*VOLZ(IZO)
        CALL ELELOS(2,TRAN,0.0,TRAN,TE,DE,ELOSS)
        TRAN5= - DE * ( SVMDF*10.4 + SVMDS*5.0 + SVMI*ELOSS )
        H5 = H5 + DH2*TRAN5*VOLZ(IZO)
C       E.S.
CELM    TRAN = PUNMSV(1)*DI*(E-1.5*TI)
CELM    H11=H11 + DH2*TRAN*VOLZ(IZO)
        H11=H11 + PUNSOU(1,2)
CW      WRITE(6,*) ' IZO=',IZO,' <SV>EL,M =',PUNMSV(1),' H11=',H11
CW      WRITE(6,*) ' IZO=',IZO,' <SV>EL,M*NM*NI*DE =',DH2*TRAN
CW   *                        ,' QEL,M=',PUNSOU(1,2)/VOLZ(IZO)
 1386   CONTINUE
C                 MULTI-GROUP
C                 -----------
        FNORM1 = 1.0217E-06/(VOLZ(IZO)*FKOST1)
        Q1 = Q1 + SIGMAN(IZO,1)*FNORM1 * VOLZ(IZO)
        Q2 = Q2 + SIGMAN(IZO,2)*FNORM1 * VOLZ(IZO) * 1.6022E-19
        Q3 = Q3 + SIGMAN(IZO,3)*FNORM1 * VOLZ(IZO) * 1.6022E-19
        Q4 = Q4 + SIGMAN(IZO,4)*FNORM1 * VOLZ(IZO) * 1.6022E-19
        Q5 = Q5 + SIGMAN(IZO,5)*FNORM1 * VOLZ(IZO) * 1.6022E-19
        Q6 = Q6 + SIGMAN(IZO,6)*FNORM1 * VOLZ(IZO) * 1.6022E-19
 1388   CONTINUE
C================================== EDGE2D =============================
C                       PUNCH RESULTS FOR PLASMA CODE
      IF(IPUNCH.GT.0 .AND.
     &   (DH  .GT.0.0 .OR.
     &    DH2 .GT.0.0 .OR.
     &    DZ  .GT.0.0     ) ) THEN
      IF(MIMP.LE.0) THEN
C       ACCUMULATE ALL IMPURITIES (ONLY ONE <>0)
C       INTO FIRST ELEMENT. VERY UGLY.
        NIMP=1
        TOTZDN = DZ
        TOTZIO = 0.0
        TOTZEN = 0.0
        DO K=1,NCOM-NIONPM
          TOTZIO=TOTZIO+PUNZIO(K)
          TOTZEN=TOTZEN+PUNZDN(K)*PUNZEN(K)
        ENDDO
        IF(TOTZDN.GT.0.0) TOTZEN=TOTZEN/TOTZDN
        PUNZIO(1)=TOTZIO
        PUNZDN(1)=TOTZDN
        PUNZEN(1)=TOTZEN
        DO I=2,NCOM-NIONPM
          PUNZIO(I)=0.0
          PUNZDN(I)=0.0
          PUNZEN(I)=0.0
        ENDDO
      ELSE
        NIMP=NCOM-NIONPM
      ENDIF
        WRITE(IPUNCH,1390)  IZO,VOLZ(IZO)
C    1                PUNION    ION SOURCE
C    2                PUNENI    TOTAL ION ENERGY TO PLASMA
C    3  PUNXMO,PUNYMO,PUNZMO    TOTAL MOMENTUM TO PLASMA
C    6                PUNENE    TOTAL ELECTRON ENERGY TO PLASMA
C    7                PUNADN    ATOMIC DENSITY
C    8                PUNMDN    MOLECULAR DENSITY
C    9                PUNZDN    IMPURITY ATOMIC DENSITY
C    A                PUNALF    TOTAL H-RAD
C    B                PUNZIO    IMPURITY SOURCE
C    C                PUNAEN    ATOMIC ENERGY
C    D                PUNMEN    MOLECULAR ENERGY
C    E                PUNZEN    ATOMIC IMPURITY ENERGY
C    F           PUNACS(1-3)    ATOMIC VELOCITY
C    J           PUNMCS(1-3)    MOLECULAR VELOCITY
C    M                   ECX    ONE-GROUP EFFECTIVE C.X. ENERGY
C    N                PUNAE0    <M VO.VI>
C    O                PUNSOU(1,1),PUNSOU(2,1)  (QI,F)EL,A
C    P                PUNSOU(1,2),PUNSOU(2,2)  (QI,F)EL,A
C--- O                PUNASV(1) EFFECTIVE <SV>EL,H    FOR QI
C--- P                PUNMSV(1) EFFECTIVE <SV>EL,H2   FOR QI
        WRITE(IPUNCH,1400)
     1                  (PUNION(L),L=1,NION)
     2                 , PUNENI
     3                 , PUNXMO,PUNYMO,PUNZMO
     6                 , PUNENE
     7                 ,(PUNADN(L),L=1,NION)
     8                 ,(PUNMDN(L),L=1,NION)
     9                 ,(PUNZDN(L),L=1,NIMP)
     A                 , PUNALF
     B                 ,(PUNZIO(L),L=1,NIMP)
     C                 ,(PUNAEN(L),L=1,NION)
     D                 ,(PUNMEN(L),L=1,NION)
     E                 ,(PUNZEN(L),L=1,NIMP)
     F                 ,(PUNACS(1,L),PUNACS(2,L),PUNACS(3,L),L=1,NION)
     J                 ,(PUNMCS(1,L),PUNMCS(2,L),PUNMCS(3,L),L=1,NION)
     M                 , ECX
     N                 ,(PUNAE0(L),L=1,NION)
     O                 , PUNSOU(1,1),PUNSOU(2,1)
     P                 , PUNSOU(1,2),PUNSOU(2,2)
     Q                 ,(DAHFR(L),L=1,NION)
C--- O                 , PUNASV(1)
C--- P                 , PUNMSV(1)
CW      IF(DAHFR(1).NE.0.0) THEN
CW        WRITE(IPUNCH,*) ' IZO=',IZO,' DAHFR=',DAHFR
CW      ENDIF
C
CT      TESTA=TESTA+PUNSOU(1,1)
CW      EKIN = 0.5*1.0*(PUNACS(1)**2+PUNACS(2)**2+PUNACS(3)**2)
CW   &       * 1.6726E-24 / 1.6022E-12
CW      IF(EKIN.NE.0.0D0)
CW   &    WRITE(6,*) ' IZO=',IZO,' ETOT=',PUNAEN,' EKIN=',EKIN
        IF(IHOR.NE.0) THEN
          THORC = HORTON(IZO,1,1)
          THORH = HORTON(IZO,2,1)
          THORR = HORTON(IZO,3,1)
          HOR1C = THORC/FNORM
          HOR1H = THORH/FNORM
          HOR1R = THORR/FNORM
          HOR2C = HORTON(IZO,1,2)/FKOST1    * FKOST1/FNORM
          HOR2H = HORTON(IZO,2,2)/FKOST1    * FKOST1/FNORM
          HOR2R = HORTON(IZO,3,2)/FKOST1    * FKOST1/FNORM
          HOR3C = HORTON(IZO,1,3)/FKOST1    * FKOST1/FNORM
          HOR3H = HORTON(IZO,2,3)/FKOST1    * FKOST1/FNORM
          HOR3R = HORTON(IZO,3,3)/FKOST1    * FKOST1/FNORM
          IF(THORC.LE.0.0) THEN
            HOR 4C = 0.0
            HOR 5C = 0.0
            HOR 6C = 0.0
            HOR 7C = 0.0
            HOR 8C = 0.0
            HOR 9C = 0.0
            HOR10C = 0.0
            HOR11C = 0.0
            HOR12C = 0.0
          ELSE
            HOR 4C = HORTON(IZO,1, 4)/THORC
            HOR 5C = HORTON(IZO,1, 5)/THORC
            HOR 6C = HORTON(IZO,1, 6)/THORC
            HOR 7C = HORTON(IZO,1, 7)/THORC
            HOR 8C = HORTON(IZO,1, 8)/THORC
            HOR 9C = HORTON(IZO,1, 9)/THORC
            HOR10C = HORTON(IZO,1,10)/THORC
            HOR11C = HORTON(IZO,1,11)/THORC
            HOR12C = HORTON(IZO,1,12)/THORC
          ENDIF
          IF(THORH.LE.0.0) THEN
            HOR 4H = 0.0
            HOR 5H = 0.0
            HOR 6H = 0.0
            HOR 7H = 0.0
            HOR 8H = 0.0
            HOR 9H = 0.0
            HOR10H = 0.0
            HOR11H = 0.0
            HOR12H = 0.0
          ELSE
            HOR 4H = HORTON(IZO,2, 4)/THORH
            HOR 5H = HORTON(IZO,2, 5)/THORH
            HOR 6H = HORTON(IZO,2, 6)/THORH
            HOR 7H = HORTON(IZO,2, 7)/THORH
            HOR 8H = HORTON(IZO,2, 8)/THORH
            HOR 9H = HORTON(IZO,2, 9)/THORH
            HOR10H = HORTON(IZO,2,10)/THORH
            HOR11H = HORTON(IZO,2,11)/THORH
            HOR12H = HORTON(IZO,2,12)/THORH
          ENDIF
          IF(THORR.LE.0.0) THEN
            HOR 4R = 0.0
            HOR 5R = 0.0
            HOR 6R = 0.0
            HOR 7R = 0.0
            HOR 8R = 0.0
            HOR 9R = 0.0
            HOR10R = 0.0
            HOR11R = 0.0
            HOR12R = 0.0
          ELSE
            HOR 4R = HORTON(IZO,3, 4)/THORR
            HOR 5R = HORTON(IZO,3, 5)/THORR
            HOR 6R = HORTON(IZO,3, 6)/THORR
            HOR 7R = HORTON(IZO,3, 7)/THORR
            HOR 8R = HORTON(IZO,3, 8)/THORR
            HOR 9R = HORTON(IZO,3, 9)/THORR
            HOR10R = HORTON(IZO,3,10)/THORR
            HOR11R = HORTON(IZO,3,11)/THORR
            HOR12R = HORTON(IZO,3,12)/THORR
          ENDIF
          HOR13  = HORTON(IZO,1,13)/FKOST1    * FKOST1/FNORM
          HOR14S = HORTON(IZO,1,14)/FKOST1    * FKOST1/FNORM
          HOR14F = HORTON(IZO,2,14)/FKOST1    * FKOST1/FNORM
CW        IF(.FALSE. .AND. (PUNADN.GT.0.0 .OR. PUNMDN.GT.0.0) )THEN
CW          WRITE(6,*) ' IZO=',IZO,'    PUNADN=',PUNADN,
CW   *                 ' HOR1=',HOR1C+HOR1H+HOR1R
CW          WRITE(6,*) '     ',IZO,'    PUNION=',PUNION,
CW   *                 ' HOR2=',(HOR2C+HOR2H+HOR2R+HOR13 )*FNORM/FKOST1
CW          IF(PUNADN.GT.0.0)
CW   *      WRITE(6,*) '     ',IZO,' PUNACS(1)=',PUNACS(1),
CW   *           ' HOR4=',(HOR4C*HOR1C+HOR4H*HOR1H+HOR4R*HOR1R)
CW   *                                        /(HOR1C+HOR1H+HOR1R)
CW        ENDIF
          WRITE(IPUNCH,1400) HOR 1C,HOR 1H,HOR 1R,HOR 2C,HOR 2H,HOR 2R,
     *                       HOR 3C,HOR 3H,HOR 3R,HOR 4C,HOR 4H,HOR 4R,
     *                       HOR 5C,HOR 5H,HOR 5R,HOR 6C,HOR 6H,HOR 6R,
     *                       HOR 7C,HOR 7H,HOR 7R,HOR 8C,HOR 8H,HOR 8R,
     *                       HOR 9C,HOR 9H,HOR 9R,HOR10C,HOR10H,HOR10R,
     *                       HOR11C,HOR11H,HOR11R,HOR12C,HOR12H,HOR12R,
     *                       HOR13 ,0.0   ,0.0   ,HOR14S,HOR14F,0.0
        ENDIF
      ENDIF
 3055 FORMAT(12I5)
 3056 FORMAT(I5,'  (',I6,')' )
 1390 FORMAT(I12,1P,5E12.3)
 1391 FORMAT(12X,1P,2E12.3)
 1392 FORMAT(I12,1P,5E12.3,5(/12X,5E12.3) )
 1395 FORMAT(I12,1Z16)
 1400 FORMAT(1P,6E12.5)
 1405 FORMAT(5Z16)
C                            END LOOP OF ZONES
 1410 CONTINUE
CT    WRITE(6,*) ' NIMBUS - TESTA=',TESTA*1.6022E-19
      IF(IPUNCH.GT.0) WRITE(IPUNCH,1390) -1
C
C================================== EDGE2D =============================
      IF(NION.EQ.1 .AND. TABLE(LABINT(1),4).LE.1.1) THEN
      H2 = H2*1.6022E-19
      H3 = H3*1.6022E-19
      H31= H31*1.6022E-19
      H4 = H4*1.6022E-19
      H5 = H5*1.6022E-19
      H9 = H9*1.6022E-19
      H10= H10*1.6022E-19
      H11= H11*1.6022E-19
      H12= H12*1.6022E-19
      WRITE(IUERR,*)
     *           ' SOURCES LINEARISED IN PLASMA AND NEUTRAL PARAMETERS'
     *          ,' (EXCEPT EL.SC.), SN=',H0
      WRITE(IUERR,*) ' SN =',H1,' QI =',H2+H3+H4+H9+H10+H11,' QE =',H5
      WRITE(IUERR,*) ' QI = SUM OF',H2,H3,H4,H9,H10,H11
      WRITE(IUERR,*) ' N*V =',H6,' N*E*V =',H7,' N*EF*V =',H8
      WRITE(IUERR,*)
     *           ' SOURCES LINEARISED IN PLASMA AND NEUTRAL PARAMETERS'
     *          ,' (EXCEPT EL.SC.), WITH C.X. EFFECTIVE ENERGY'
      WRITE(IUERR,*) ' SN =',H1,' QI =',H2+H31+H4+H9+H10+H11,' QE =',H5
      WRITE(IUERR,*) ' QI = SUM OF',H2,H31,H4,H9,H10,H11
      WRITE(IUERR,*) ' N*V =',H6,' N*E*V =',H7,' N*EF*V =',H8
      WRITE(IUERR,*) ' SOURCES LINEARISED IN PLASMA PARAMETERS ONLY'
     *              ,' (MEAN ENERGY OF SHIFT. MAXW.)'
      WRITE(IUERR,*) ' SN =',Q1,' QI =',Q2+Q3+Q4+Q5+H10+H11,' QE =',Q6
      WRITE(IUERR,*) ' QI = SUM OF',Q2,Q3,Q4,Q5,H10,H11
      WRITE(IUERR,*) ' QCX=',H12,' QEL=',H10+H11
      ENDIF
C================================== EDGE2D =============================
C                                 GRAPHICS
C                       NO PLOTS IF NCHAN OR MZCHAN>35
      IF(NCHAN.EQ.0.OR.KINDPR.EQ.0) GO TO 1590
      IF(NCHAN.GT.35.OR.MZCHAN.GT.35) GO TO 1590
      DO 1430 K=1,NCOM
      IF(K.GT.NIONPM.AND.DECIMA.LE.1.0E-4) GO TO 1430
      WRITE (6, 1420 ) EXTSYM(K)
 1420 FORMAT('1IONIZATIONS (Y) IN EACH CHANNEL (X) PER SEC.',
     *15X,2H- ,A4,2H -)
      KK=1+(K-1)*NCHAN
C                            ALFABE(24)=O
C                            ALFABE(37)=*
      ALFAN(1)=ALFABE(24)
      CALL DRAW(NCHAN,1,CHANEL,BUFFER(KK),0.0,1,ALFAN)
 1430 CONTINUE
      WRITE(IOUT, 1440 )
 1440 FORMAT('1TOTAL LIGHT IONS (Y) PRODUCED IN EACH CHANNEL (X) PER SEC
     *.')
      KK=1+NCOM*NCHAN
      CALL DRAW(NCHAN,1,CHANEL,BUFFER(KK),0.0,1,ALFAN)
C                        SAVE NEW ION SOURCE(PER CHANNEL,NOT SEGMENT)
      DO 1450 IL=1,NCHAN
 1450 SOUNEW(IL)=BUFFER(KK+IL-1)
C
      WRITE(IOUT, 1530 )
 1530 FORMAT('1ELECTRON ENERGY LOSS (Y) IN EACH CHANNEL (X) PER SEC.')
      KK=KK+NCHAN
      CALL DRAW(NCHAN,1,CHANEL,BUFFER(KK),0.0,1,ALFAN)
C
      WRITE(IOUT, 1540 )
 1540 FORMAT('1KINETIC ENERGY (Y) DEPOSITED BY NEUTRALS IN',
     *' EACH CHANNEL (X) PER SEC.')
      KK=KK+NCHAN
      CALL DRAW(NCHAN,1,CHANEL,BUFFER(KK),-1.0E+30,0,ALFAN)
C
      WRITE(IOUT, 1550 )
 1550 FORMAT('1MOMENTA (Y) DEPOSITED BY NEUTRALS IN EACH CHANNEL (X) PER
     * SEC.')
      KK=KK+NCHAN
      ALFAN(1)=ALFABE(30)
      ALFAN(2)=ALFABE(31)
      ALFAN(3)=ALFABE(32)
      CALL DRAW(NCHAN,3,CHANEL,BUFFER(KK),-1.0E+30,0,ALFAN)
C             PLOT MEAN FREE PATHS FOR EACH CELL OF A CHANNEL
C                          AND EACH ION.
C             INDEX I=1,2,.. WILL DENOTE IN THE GRAPH THE M.F.P.
C             OF THE I-TH ZONE OF THE CHANNEL,ONCE THE ZONES OF
C             A CHANNEL ARE ASSIGNED IN INCREASING ORDER. E.G.:
C             IF CHANNEL 3 CONTAINS ZONES 5 AND 35,THEN ZONE 5 WILL
C             RECEIVE INDEX 1 IN THE PLOT OF MFP'S OF CHANNEL 3.
C             IN VERSIONS AFTER AUGUST 1986 IT IS COMPULSORY TO
C             DESCRIBE THE ZONES OF A CHANNEL IN INCREASING ZONE INDEX.
C             IT IS ADVISABLE TO DESCRIBE THE ZONES OF A CHANNEL
C             STARTING FROM TARGET (BETTER VISUALIZATION).
      DO 1580 K=1,NION
      DO 1560 J=1,MZCHAN
      DO 1560 I=1,NCHAN
      KK=I+(J-1)*NCHAN
 1560 BUFFER(KK)=BUFF(I,J,K)
      WRITE (6, 1570 ) EXTSYM(K)
 1570 FORMAT ('1MEAN FREE PATH (Y) IN CELLS 1,2,.. OF EACH CHANNEL (X)'
     *,9X,2H- ,A4,2H -)
      CALL DRAW(NCHAN,MZCHAN,CHANEL,BUFFER(1),0.0,1,ALFABE)
 1580 CONTINUE
C
 1590 CONTINUE
      IF(NCHAN.EQ.0.OR.KINDPR.GT.0) THEN
      WRITE(IOUT, 1610 )
 1610 FORMAT(  '1INTERACTIONS WITH SURFACES (WALLS AND OTHER BOUNDARIES)
     * PER SEC.'/1X,26('=')/)
      WRITE(IOUT, 1620 )
 1620 FORMAT(/' ZONE     BACKSCATTERED RE-EMITTED SPUTTERED REDEPOSITED
     *COLLISIONS  ALBEDOED   ESCAPED')
      ENDIF
C
      TOTBAC=0.0
      TOTREE=0.0
      TOTSPU=0.0
      DO I=1,NCOM
        SUMSPU(I)=0.0
        SUMSPN(I)=0.0
        SUMIMP(I)=0.0
        SUMNES(I)=0.0
        SUMNEA(I)=0.0
        SUMNLK(I)=0.0
        SUMZLK(I)=0.0
      ENDDO
      TOTSPN=0.0
      TOTALB=0.0
      TOTESC=0.0
      TOTIMP=0.0
C                         TOTFES: FUEL ESCAPED (TO PLASMA CODE)
      TOTFES=0.0
C                         TOTFEA:  "   " VIA ALBEDO (TO PLASMA CODE)
      TOTFEA=0.0
C                         TOTHLK: (H) LEAKED
      TOTHLK=0.0
C                         SAME FOR IMPURITIES
      TOTZES=0.0
      TOTZEA=0.0
      TOTZLK=0.0
C                         FIND THE ZONE OF THE PUMP PIPE
      TRANHY=0.0
      TRANHE=0.0
      IPUMP=PROREQ(4)
      IF(IPUMP.GT.0) IPUMP=IZONA(IPUMP)
      DO 1670 IZO=1,NZONE
      IF(IBOUNZ(IZO).EQ.0) GO TO 1670
      PUNFLA=0.0
      PUNFLM=0.0
C                         ESCAPE,ALBEDO AND MATERIAL WALL ZONES
      DO 1660 I=1,NCOM
        TRAN1=WACOL(I,IZO,1)/FKOST1
        TRAN2=WACOL(I,IZO,2)/FKOST1
        TRAN3=WACOL(I,IZO,3)/FKOST1
        TRAN4=WACOL(I,IZO,4)/FKOST1
        TRA6N=WACOL(I,IZO,6)/FKOST1
        TRAN5=ESCAPE(IZO,I)/FKOST1
        TRAN51=TRAN5
C                           FOR MOLECULE ESCAPE: REPEAT THE SCORE (W*2)
        IF(I.GT.NION.AND.I.LE.NIONPM)
     *  TRAN51=TRAN5+TRAN5
C                           FUEL ESCAPE, TOTAL
        TRAN5F=0.0
        IF(I.LE.NIONPM.AND.I.NE.INDHEL)
     *  TRAN5F=TRAN51
C                           FUEL ESCAPE, THROUGH ALBEDO ZONES &PUMPS
C                           (I.E., EXCLUDE CORE, WHERE IBOUNZ=-2)
        TRAN5A=0.0
C OLDP  IF(I.LE.NIONPM.AND.I.NE.INDHEL.AND.IBOUNZ(IZO).EQ.2)
        IF(I.LE.NIONPM.AND.I.NE.INDHEL.AND.IBOUNZ(IZO).NE.-2)
     *  TRAN5A=TRAN51
        TRAN6=REDP(IZO,I)/FKOST1
        TRAN7=WACOL(I,IZO,5)/FKOST1
        IF(IPUNCH.GT.0) THEN
          IF(I.LE.NION.AND.I.NE.INDHEL) THEN
            PUNFLA = PUNFLA+TRAN7
          ELSE IF(I.GT.NION .AND. I.LE.NIONPM) THEN
            PUNFLM = PUNFLM+TRAN7
          ENDIF
        ENDIF
C                           IMPURITY ESCAPE
        TRAN5Z=0.0
        TRAZ5A=0.0
        IF(I.GT.NIONPM) THEN
C                                    TOTAL
          TRAN5Z=TRAN5
C OLDP    IF(IBOUNZ(IZO).EQ.2) THEN
          IF(IBOUNZ(IZO).NE.-2) THEN
C                                    AS ABOVE
            TRAZ5A=TRAN5
          ENDIF
        ENDIF
C=======================================================================
C                            STORE H AND HE GOING TO THE PUMP
C                      (TRAN5 HAS ALREADY TAKEN INTO ACCOUNT MOLECULES)
        IF(IZO.NE.IPUMP) GO TO 1630
        IF(I.EQ.INDHEL) TRANHE=TRANHE+TRAN5
        IF(I.LE.NIONPM.AND.I.NE.INDHEL)
     *  TRANHY=TRANHY+TRAN51
C
 1630   IF(NCHAN.EQ.0.OR.KINDPR.GT.0) THEN
          IF(I.EQ.1) THEN
            WRITE(IOUT,1640) IZO,EXTSYM(I),TRAN1,TRAN2,TRAN4,TRAN6,
     *      TRAN7,TRAN3,TRAN5
 1640       FORMAT(/I4,2X,A4,1PE11.3,1X,6E11.3)
          ELSE
            WRITE(IOUT,1650)EXTSYM(I),TRAN1,TRAN2,TRAN4,TRAN6,TRAN7,
     *      TRAN3,TRAN5
 1650       FORMAT(4X,2X,A4,1PE11.3,1X,6E11.3)
          ENDIF
        ENDIF
        TOTBAC=TOTBAC+TRAN1
C                      N.B. SCORE PARTICLES REEMITTED: IF SOME SURFACES
C                      REEMIT ATOMS AND SOME OTHER MOLECULES, THEN THE
C                      INVENTORY BECOMES DIFFICULT TO READ
C                      N.B. IN PARTICLE INVENTORY 1 ATOM  +  1 MOLECULE
C                           COUNT AS 3 PARTICLES IN ESCAPE (SEE TRAN51)
        TOTREE=TOTREE+TRAN2
        TOTALB=TOTALB+TRAN3
        TOTSPU=TOTSPU+TRAN4
        SUMSPU(I)=SUMSPU(I)+TRAN4
        TOTSPN=TOTSPN+TRA6N
        SUMSPN(I)=SUMSPN(I)+TRA6N
        TOTESC=TOTESC+TRAN51
        TOTIMP=TOTIMP+TRAN6
        SUMIMP(I)=SUMIMP(I)+TRAN6
C                      N.B. PLASMA CODE REQUIRES TOTAL FUEL ESCAPED AND
C                           FUEL ESCAPED THROUGH ALBEDO REGIONS:
C                           THEREFORE ACCUMULATE SEPARATELY
        TOTZES=TOTZES+TRAN5Z
        SUMNES(I)=SUMNES(I)+TRAN5Z
        TOTZEA=TOTZEA+TRAZ5A
        SUMNEA(I)=SUMNEA(I)+TRAZ5A
        TOTFES=TOTFES+TRAN5F
        TOTFEA=TOTFEA+TRAN5A
        IF(I.LE.NION) THEN
          SUMNES(I)=SUMNES(I)+TRAN5F
          SUMNEA(I)=SUMNEA(I)+TRAN5A
        ELSE IF(I.GT.NION .AND. I.LE.NIONPM) THEN
          L=IATOM(I)
          SUMNES(L)=SUMNES(L)+TRAN5F
          SUMNEA(L)=SUMNEA(L)+TRAN5A
        ENDIF
 1660 CONTINUE
C         .FALSE. :     PUNCH RESULTS FOR PLASMA CODE (WALL FLUXES)
      IF(IPUNCH.GT.0 .AND.
     &               .FALSE. .AND.
     &   (PUNFLA.GT.0.0 .OR. PUNFLM.GT.0.0) ) THEN
        WRITE(IPUNCH,1390)  IZO
C    1                PUNFLA    TOTAL H  FLUX TO WALL
C    2                PUNFLM    TOTAL H2 FLUX TO WALL
        WRITE(IPUNCH,1400)
     &                      PUNFLA,       ! .FALSE.
     &                      PUNFLM        ! .FALSE.
      ENDIF
 1670 CONTINUE
      IF(IPUNCH.GT.0 .AND. .FALSE.) WRITE(IPUNCH,1390) -1
C
C                     MACRO REGION FROM PROFILES
      DO I=1,NMACRO
        DO L=1,MCP
          PMACRO(I,1,L)=0.0
          PMACRO(I,2,L)=0.0
          PMACRO(I,3,L)=0.0
          PMACRO(I,4,L)=0.0
        ENDDO
      ENDDO
      DO 1676 IZO=1,NZONE
        IF(IBOUNZ(IZO).NE.0) GOTO 1676
        LMACRO=IMACRO(IZO)
        DO 1675 K=1,NCOM
          LMN=IATOM(K)
          ZA=TABLE(LABINT(K),4)
          IF(ZA.LE.1.1) THEN
C           LUMP ALL HYDROGENIC NEUTRALS TOGETHER
            LMN=IMN
            IF(K.LE.NION) THEN
              MOL=1
            ELSE
              MOL=2
            ENDIF
            TRAN1 = ABSOR(IZO,K)
            TRAN2 = DISSOC(IZO,K)
            CALL HALPHA(MOL,DENSEZ(IZO),TEMPEZ(IZO),
     *                  TRAN1,TRAN2,HRAD0)
            PMACRO(LMACRO,1,LMN)=PMACRO(LMACRO,1,LMN)+HRAD0/FKOST1
            PMACRO(LMACRO,2,LMN)=PMACRO(LMACRO,2,LMN)
     *                          +ABSOR(IZO,K)/FKOST1
            PMACRO(LMACRO,3,LMN)=PMACRO(LMACRO,3,LMN)+ENNE(IZO,K)*
     *                           FLOAT(MOL)*1.0217E-06/FKOST1
            PMACRO(LMACRO,4,LMN)=PMACRO(LMACRO,4,IMN)+EAVER(IZO,K,1)*
     *                           1.0217E-06/FKOST1
          ELSE
            PMACRO(LMACRO,2,LMN)=PMACRO(LMACRO,2,LMN)
     *                          +ABSOR(IZO,K)/FKOST1
            PMACRO(LMACRO,3,LMN)=PMACRO(LMACRO,3,LMN)+ENNE(IZO,K)*
     *                           1.0217E-06/FKOST1
            PMACRO(LMACRO,4,LMN)=PMACRO(LMACRO,4,LMN)+EAVER(IZO,K,1)*
     *                           1.0217E-06/FKOST1
          ENDIF
 1675   CONTINUE
 1676 CONTINUE
C                       PUNCH RESULTS FOR PLASMA CODE (MACRO REGIONS)
      IF(IPUNCH.GT.0) THEN
        WRITE(IPUNCH,1390)  NMACRO
        WRITE(IPUNCH,1405) (
     &     (SMACRO(M,1,IMN)+SMACRO(M,3,IMN)+SMACRO(M,4,IMN))/FKOST1,
     &     (SMACRO(M,2,IMN)+SMACRO(M,5,IMN))/FKOST1,
     &     (FMACRO(M,K,IMN)/FKOST1,K=1,NMACRO),
     &      M=1,NMACRO)
        WRITE(IPUNCH,1405) ( VMACRO(M),
     &                      (PMACRO(M,L,IMN),L=1,4),
     &                      M=1,NMACRO)
C       IF(NZREC.GT.0) THEN
C         DO J=1,NZREC
C           LMN=NUTRLZ(J)
C           WRITE(IPUNCH,1405) (
C    &     (SMACRO(M,1,LMN)+SMACRO(M,3,LMN)+SMACRO(M,4,LMN))/FKOST1,
C    &     (SMACRO(M,2,LMN)+SMACRO(M,5,LMN))/FKOST1,
C    &     (FMACRO(M,K,LMN)/FKOST1,K=1,NMACRO),
C    &      M=1,NMACRO)
C           WRITE(IPUNCH,1405) (
C    &                      (PMACRO(M,L,LMN),L=1,4),
C    &                      M=1,NMACRO)
C         ENDDO
C       ENDIF
        IF(MIMP.LE.0) THEN
C         LUMP ALL IMPURITIES (ONLY ONE <>) INTO THE FIRST ONE
          JZ = NIONPM+1
          DO J=JZ+1,NCOM
            DO M = 1 , NMACRO
               DO K=1,5
                  SMACRO(M,K,JZ)=SMACRO(M,K,JZ)+SMACRO(M,K,J)
               ENDDO
               DO K=1,NMACRO
                  FMACRO(M,K,JZ)=FMACRO(M,K,JZ)+FMACRO(M,K,J)
               ENDDO
               DO K=1,4
                  PMACRO(M,K,JZ)=PMACRO(M,K,JZ)+PMACRO(M,K,J)
               ENDDO
            ENDDO
          ENDDO
          WRITE(IPUNCH,1405) (
     &    (SMACRO(M,1,JZ)+SMACRO(M,3,JZ)+SMACRO(M,4,JZ))/FKOST1,
     &    (SMACRO(M,2,JZ)+SMACRO(M,5,JZ))/FKOST1,
     &    (FMACRO(M,K,JZ)/FKOST1,K=1,NMACRO),
     &    M=1,NMACRO)
          WRITE(IPUNCH,1405) (
     &                      (PMACRO(M,L,JZ),L=1,4),
     &                      M=1,NMACRO)
        ELSE
          WRITE(IPUNCH,1405) (
     &      0.0,
     &      0.0,
     &    ( 0.0,K=1,NMACRO ),
     &    M=1,NMACRO)
          WRITE(IPUNCH,1405) (
     &                      ( 0.0         ,L=1,4),
     &                      M=1,NMACRO)
          DO J=NIONPM+1,NCOM
            LMN=J
            WRITE(IPUNCH,1405) (
     &     (SMACRO(M,1,LMN)+SMACRO(M,3,LMN)+SMACRO(M,4,LMN))/FKOST1,
     &     (SMACRO(M,2,LMN)+SMACRO(M,5,LMN))/FKOST1,
     &     (FMACRO(M,K,LMN)/FKOST1,K=1,NMACRO),
     &      M=1,NMACRO)
            WRITE(IPUNCH,1405) (
     &                      (PMACRO(M,L,LMN),L=1,4),
     &                      M=1,NMACRO)
          ENDDO
        ENDIF
      ENDIF
C
CSPATIAL DISTRIBUTION UPON WALLS: SPUTTERING, REDEPOSITION, THERMAL LOAD
C-----------------------------------------------------------------------
      IF(NLATS.LE.0) GO TO 2270
      IMAX=NLATS*MSCAN
      DO 1680 I=1,IMAX
      EROTOT(I)=0.0
      REDTOT(I)=0.0
      ERONET(I)=0.0
      TERTOT(I)=0.0
 1680 CONTINUE
      IF(NCHAN.EQ.0.OR.KINDPR.GT.0)
     *WRITE(IOUT, 1690 )
 1690 FORMAT('1SPATIAL DISTRIBUTIONS ALONG WALLS: SPUTTERING, EROSION, R
     *EDEPOSITION, THERMAL LOAD'/1X,82('='))
C                               SPUTTERING
C                   PRESET FOR WALL PLOTS :"CHANEL"REDIFINED.LE.MSCAN
      DO 1700 I=1,MILLE
 1700 BUFFER(I)=0.0
      DO 1710 I=1,MSCAN
 1710 CHANEL(I)=FLOAT(I)
C
      NUSTAR=NIONPM+1
C
CSPUTTERING ORIGINATED FROM FUEL (+HEAVY IMP.GENER. BY FUEL) FOR GIVEN K
C
      DO 1780 K=NUSTAR,NCOM
C                        PREPARE TO TRANSFORM ATOMS/S IN CM/YEAR
C                          POSITION IN TABLE : LABINT(K)
C                          SECONDS PER YEAR : 3.15E+7
C                          ATOMIC MASS : TABLE(..,3)
C                          DENSITY : TABLE(..,10)
C                          OPERATION TIME : YEARFR (YEAR FRACTION)
      TRAN=3.15E+7/(TABLE(LABINT(K),10)*0.6E+24/TABLE(LABINT(K),3))
      TRAN=TRAN*YEARFR
      IF(NCHAN.EQ.0.OR.KINDPR.GT.0)
     *WRITE(IOUT, 1720 ) EXTSYM(K)
 1720 FORMAT(//1X,A4,' SPUTTERING ORIGINATED FROM FUEL (ATOMS/CM2*S)'//
     * ' WALL  POL. SIDE ALONG')
      DO 1750 L=1,NLATS
      N=IDELAT(L,1)
      IPOL=N/1000
      ILATO=N-IPOL*1000
      N=IDELAT(L,2)
      BCD=XCHAR
      IF(IDELAT(L,3).NE.1) BCD=YCHAR
      DO 1730 M=1,N
      BUFFER(M)=SPFUEL(L,M,K)/(FKOST1*SPAREA(L,M))
C               STORE EROSION STARTING FROM 400 ( >NLATS*MSCAN)
      BUFFER(400+M+MSCAN*(L-1))=BUFFER(M)*TRAN
C                           STORE TOTAL EROSION FOR PLOT
C                       NO PLOTS IF NLATS*MSCAN > 399
      IF(NLATS*MSCAN.GT.399) GO TO 1730
      EROTOT(M+MSCAN*(L-1))=EROTOT(M+MSCAN*(L-1))+BUFFER(M)*TRAN
 1730 CONTINUE
      IF(NCHAN.EQ.0.OR.KINDPR.GT.0)
     *WRITE(IOUT, 1740 ) L,IPOL,ILATO,BCD,(BUFFER(M),M=1,N)
 1740 FORMAT(I3,')',I5,I5,3X,' ',A1,2X,1P,10E10.3/
     *(21X,10E10.3))
C                  END OF SPUTTERING ORIGINATED BY FUEL FOR GIVEN K
 1750 CONTINUE
C                  TOTAL EROSION ORIGINATED BY FUEL FOR SAME K
      IF(NCHAN.EQ.0.OR.KINDPR.GT.0)
     *WRITE(IOUT, 1760 ) EXTSYM(K),YEARFR
 1760 FORMAT(//1X,A4,' EROSION ORIGINATED FROM FUEL (CM/OPERATION TIME)
     *YEAR FRACTION = ',1PE10.4//' WALL  POL. SIDE ALONG')
      DO 1770 L=1,NLATS
      N=IDELAT(L,1)
      IPOL=N/1000
      ILATO=N-IPOL*1000
      N=IDELAT(L,2)
C                           PRINT BUFFER FROM N1
      N1=401+MSCAN*(L-1)
C                           TO N2
      N2=N1+N-1
      BCD=XCHAR
      IF(IDELAT(L,3).NE.1) BCD=YCHAR
      IF(NCHAN.EQ.0.OR.KINDPR.GT.0)
     *WRITE(IOUT, 1740 ) L,IPOL,ILATO,BCD,(BUFFER(M),M=N1,N2)
 1770 CONTINUE
C                  END OF EROSION ORIGINATED BY FUEL FOR GIVEN K
 1780 CONTINUE
C     ENDS LOOP OF SPUTTERING AND EROSION ORIGINATED BY FUEL FOR GIVEN K
C
C                     CLEAR BUFFER
      DO 1790 I=1,MILLE
      BUFFER(I)=0.0
 1790 CONTINUE
C
C   SPUTTERING ORIGINATED FROM HE (+HEAVY IMP.GENER. BY HE) FOR GIVEN K
C
      IF(INDHEL.EQ.0) GO TO 1890
      DO 1850 K=NUSTAR,NCOM
C                         TRAN CONVERTS SPUTTERING INTO EROSION
      TRAN=3.15E+7/(TABLE(LABINT(K),10)*0.6E+24/TABLE(LABINT(K),3))
      TRAN=TRAN*YEARFR
      IF(NCHAN.EQ.0.OR.KINDPR.GT.0)
     *WRITE(IOUT, 1800 ) EXTSYM(K)
 1800 FORMAT(//1X,A4,' SPUTTERING ORIGINATED FROM HELIUM (ATOMS/CM2*S)'/
     */ ' WALL  POL. SIDE ALONG')
      DO 1820 L=1,NLATS
      N=IDELAT(L,1)
      IPOL=N/1000
      ILATO=N-IPOL*1000
      N=IDELAT(L,2)
      BCD=XCHAR
      IF(IDELAT(L,3).NE.1) BCD=YCHAR
      DO 1810 M=1,N
      BUFFER(M)=SPUHEL(L,M,K)/(FKOST1*SPAREA(L,M))
C                 STORE EROSION STARTING FROM 400
      BUFFER(400+M+MSCAN*(L-1))=BUFFER(M)*TRAN
C                           STORE TOTAL EROSION FOR PLOT
C                       NO PLOTS IF NLATS*MSCAN > 399
      IF(NLATS*MSCAN.GT.399) GO TO 1810
      EROTOT(M+MSCAN*(L-1))=EROTOT(M+MSCAN*(L-1))+BUFFER(M)*TRAN
 1810 CONTINUE
      IF(NCHAN.EQ.0.OR.KINDPR.GT.0)
     *WRITE(IOUT, 1740 ) L,IPOL,ILATO,BCD,(BUFFER(M),M=1,N)
C                  END OF SPUTTERING ORIGINATED FROM HE FOR GIVEN K
 1820 CONTINUE
C                   EROSION ORIGINATED BY HE FOR SAME K
      IF(NCHAN.EQ.0.OR.KINDPR.GT.0)
     *WRITE(IOUT, 1830 ) EXTSYM(K),YEARFR
 1830 FORMAT(//1X,A4,' EROSION ORIGINATED FROM HE (CM/OPERATION TIME) YE
     *AR FRACTION = ',1PE10.4//' WALL  POL. SIDE ALONG')
      DO 1840 L=1,NLATS
      N=IDELAT(L,1)
      IPOL=N/1000
      ILATO=N-IPOL*1000
      N=IDELAT(L,2)
C                           PRINT BUFFER FROM N1
      N1=401+MSCAN*(L-1)
C                           TO N2
      N2=N1+N-1
      BCD=XCHAR
      IF(IDELAT(L,3).NE.1) BCD=YCHAR
      IF(NCHAN.EQ.0.OR.KINDPR.GT.0)
     *WRITE(IOUT, 1740 ) L,IPOL,ILATO,BCD,(BUFFER(M),M=N1,N2)
 1840 CONTINUE
C                  END OF EROSION ORIGINATED BY HE FOR GIVEN K
 1850 CONTINUE
C     ENDS LOOP OF SPUTTERING AND EROSION GENERATED BY HE FOR GIVEN K
C
C                          PRINT TOTAL EROSION
C
      IF(NCHAN.EQ.0.OR.KINDPR.GT.0)
     *WRITE(IOUT, 1860 ) YEARFR
 1860 FORMAT(//   ' TOTAL EROSION  (CM/OPERATION TIME) YEAR FRACTION =
     *',1PE10.4/1X,13('-') /' WALL  POL. SIDE ALONG')
      DO 1870 L=1,NLATS
      N=IDELAT(L,1)
      IPOL=N/1000
      ILATO=N-IPOL*1000
      N=IDELAT(L,2)
C                           PRINT EROTOT FROM N1
      N1=1+MSCAN*(L-1)
C                           TO N2
      N2=N1+N-1
      BCD=XCHAR
      IF(IDELAT(L,3).NE.1) BCD=YCHAR
      IF(NCHAN.EQ.0.OR.KINDPR.GT.0)
     *WRITE(IOUT, 1740 ) L,IPOL,ILATO,BCD,(EROTOT(M),M=N1,N2)
 1870 CONTINUE
C                     CLEAR BUFFER
      DO 1880 I=1,MILLE
      BUFFER(I)=0.0
 1880 CONTINUE
C
C                          REDEPOSITION
C                          ------------
C REDEPOS. ORIGINATED FROM FUEL (+HEAVY IMP.GENER. BY FUEL) FOR GIVEN K
C
 1890 CONTINUE
C                       BETTER PRINT ALWAYS REDEPOS. ALSO WHEN=0
C1880 IF(DECIMA.LE.1.0E-04) GO TO 2070
      DO 1950 K=NUSTAR,NCOM
C                       PREPARE TO TRANSFORM ATOMS/S IN CM/YEAR
C                          POSITION IN TABLE : LABINT(K)
C                          SECONDS PER YEAR : 3.15E+7
C                          ATOMIC MASS : TABLE(..,3)
C                          DENSITY : TABLE(..,10)
C                          OPERATION TIME : YEARFR (YEAR FRACTION)
      TRAN=3.15E+7/(TABLE(LABINT(K),10)*0.6E+24/TABLE(LABINT(K),3))
      TRAN=TRAN*YEARFR
      KK=K-NUSTAR+1
      IF(NCHAN.EQ.0.OR.KINDPR.GT.0)
     *WRITE(IOUT, 1900 ) EXTSYM(K)
 1900 FORMAT(//1X,A4,' REDEPOSITION ORIGINATED FROM FUEL',
     * ' (ATOMS/CM2*S)'//' WALL  POL. SIDE ALONG')
      DO 1920 L=1,NLATS
      N=IDELAT(L,1)
      IPOL=N/1000
      ILATO=N-IPOL*1000
      N=IDELAT(L,2)
      BCD=XCHAR
      IF(IDELAT(L,3).NE.1) BCD=YCHAR
      DO 1910 M=1,N
      BUFFER(M)=REDFUE(L,M,K)/(FKOST1*SPAREA(L,M))
C                 STORE REDEPOSITSION IN CM STARTING FROM 400
      BUFFER(400+M+MSCAN*(L-1))=BUFFER(M)*TRAN
C                           STORE TOTAL REDEPOSITION FOR PLOT
C                       NO PLOTS IF NLATS*MSCAN > 399
      IF(NLATS*MSCAN.GT.399) GO TO 1910
      REDTOT(M+MSCAN*(L-1))=REDTOT(M+MSCAN*(L-1))+BUFFER(M)*TRAN
 1910 CONTINUE
      IF(NCHAN.EQ.0.OR.KINDPR.GT.0)
     *WRITE(IOUT, 1740 ) L,IPOL,ILATO,BCD,(BUFFER(M),M=1,N)
 1920 CONTINUE
C                  REDEPOSITION IN CM
      IF(NCHAN.EQ.0.OR.KINDPR.GT.0)
     *WRITE(IOUT, 1930 ) EXTSYM(K),YEARFR
 1930 FORMAT(//1X,A4,' REDEPOSITION ORIGINATED FROM FUEL ',
     *'(CM/OPERATION TIME) YEAR FRACTION = ',
     *1PE10.4//' WALL  POL. SIDE ALONG')
      DO 1940 L=1,NLATS
      N=IDELAT(L,1)
      IPOL=N/1000
      ILATO=N-IPOL*1000
      N=IDELAT(L,2)
C                           PRINT BUFFER FROM N1
      N1=401+MSCAN*(L-1)
C                           TO N2
      N2=N1+N-1
      BCD=XCHAR
      IF(IDELAT(L,3).NE.1) BCD=YCHAR
      IF(NCHAN.EQ.0.OR.KINDPR.GT.0)
     *WRITE(IOUT, 1740 ) L,IPOL,ILATO,BCD,(BUFFER(M),M=N1,N2)
 1940 CONTINUE
C       END OF REDEPOSITION IN ATOMS AND CM ORIG. FROM FUEL FOR GIVEN K
C
 1950 CONTINUE
C
C                     CLEAR BUFFER
      DO 1960 I=1,MILLE
      BUFFER(I)=0.0
 1960 CONTINUE
C
C REDEPOS. ORIGINATED FROM HE (+HEAVY IMP.GENER. BY FUEL) FOR GIVEN K
C
      IF(INDHEL.EQ.0) GO TO 2045
      DO 2020 K=NUSTAR,NCOM
C                       PREPARE TO TRANSFORM ATOMS/S IN CM/YEAR
C                          POSITION IN TABLE : LABINT(K)
C                          SECONDS PER YEAR : 3.15E+7
C                          ATOMIC MASS : TABLE(..,3)
C                          DENSITY : TABLE(..,10)
C                          OPERATION TIME : YEARFR (YEAR FRACTION)
      TRAN=3.15E+7/(TABLE(LABINT(K),10)*0.6E+24/TABLE(LABINT(K),3))
      TRAN=TRAN*YEARFR
      KK=K-NUSTAR+1
      IF(NCHAN.EQ.0.OR.KINDPR.GT.0)
     *WRITE(IOUT, 1970 ) EXTSYM(K)
 1970 FORMAT(//1X,A4,' REDEPOSITION ORIGINATED FROM HE',
     * ' (ATOMS/CM2*S)'//' WALL  POL. SIDE ALONG')
      DO 1990 L=1,NLATS
      N=IDELAT(L,1)
      IPOL=N/1000
      ILATO=N-IPOL*1000
      N=IDELAT(L,2)
      BCD=XCHAR
      IF(IDELAT(L,3).NE.1) BCD=YCHAR
      DO 1980 M=1,N
      BUFFER(M)=REDHEL(L,M,K)/(FKOST1*SPAREA(L,M))
C                 STORE REDEPOSITION IN CM STARTING FROM 800
      BUFFER(800+M+MSCAN*(L-1))=BUFFER(M)*TRAN
C                           STORE TOTAL REDEPOSITION FOR PLOT
C                       NO PLOTS IF NLATS*MSCAN > 399
      IF(NLATS*MSCAN.GT.399) GO TO 1980
      REDTOT(M+MSCAN*(L-1))=REDTOT(M+MSCAN*(L-1))+BUFFER(M)*TRAN
 1980 CONTINUE
      IF(NCHAN.EQ.0.OR.KINDPR.GT.0)
     *WRITE(IOUT, 1740 ) L,IPOL,ILATO,BCD,(BUFFER(M),M=1,N)
 1990 CONTINUE
C                  REDEPOSITION IN CM
      IF(NCHAN.EQ.0.OR.KINDPR.GT.0)
     *WRITE(IOUT, 2000 ) EXTSYM(K),YEARFR
 2000 FORMAT(//1X,A4,' REDEPOSITION ORIGINATED FROM HE ',
     *'(CM/OPERATION TIME) YEAR FRACTION = ',
     *1PE10.4//' WALL  POL. SIDE ALONG')
      DO 2010 L=1,NLATS
      N=IDELAT(L,1)
      IPOL=N/1000
      ILATO=N-IPOL*1000
      N=IDELAT(L,2)
C                           PRINT BUFFER FROM N1
      N1=801+MSCAN*(L-1)
C                           TO N2
      N2=N1+N-1
      BCD=XCHAR
      IF(IDELAT(L,3).NE.1) BCD=YCHAR
      IF(NCHAN.EQ.0.OR.KINDPR.GT.0)
     *WRITE(IOUT, 1740 ) L,IPOL,ILATO,BCD,(BUFFER(M),M=N1,N2)
 2010 CONTINUE
C   END OF REDEPOSITION ORIGIN. FROM HELIUM IN ATOMS AND CM FOR GIVEN K
C
 2020 CONTINUE
C              END LOOP OF REDEPOSITIONS
C
C                          PRINT TOTAL REDEPOSITION
C
      IF(NCHAN.EQ.0.OR.KINDPR.GT.0)
     *WRITE(IOUT, 2030 ) YEARFR
 2030 FORMAT(//   ' TOTAL REDEPOSITION (CM/OPERATION TIME) YEAR FRACTION
     * = ',1PE10.4/1X,18('-')/' WALL  POL. SIDE ALONG')
      DO 2040 L=1,NLATS
      N=IDELAT(L,1)
      IPOL=N/1000
      ILATO=N-IPOL*1000
      N=IDELAT(L,2)
C                           PRINT REDTOT FROM N1
      N1=1+MSCAN*(L-1)
C                           TO N2
      N2=N1+N-1
      BCD=XCHAR
      IF(IDELAT(L,3).NE.1) BCD=YCHAR
      IF(NCHAN.EQ.0.OR.KINDPR.GT.0)
     *WRITE(IOUT, 1740 ) L,IPOL,ILATO,BCD,(REDTOT(M),M=N1,N2)
 2040 CONTINUE
C
C                          COMPUTE AND PRINT NET EROSION
C                          -----------------------------
 2045 IMAX=NLATS*MSCAN
      DO 2050 I=1,IMAX
      ERONET(I)=EROTOT(I)-REDTOT(I)
 2050 CONTINUE
C
      IF(NCHAN.EQ.0.OR.KINDPR.GT.0)
     *WRITE(IOUT, 2060 ) YEARFR
 2060 FORMAT(//   ' NET EROSION (CM/OPERATION TIME) YEAR FRACTION = ',1P
     *E10.4/1X,11('-')/' WALL  POL. SIDE ALONG')
      DO 2070 L=1,NLATS
      N=IDELAT(L,1)
      IPOL=N/1000
      ILATO=N-IPOL*1000
      N=IDELAT(L,2)
C                           PRINT ERONET FROM N1
      N1=1+MSCAN*(L-1)
C                           TO N2
      N2=N1+N-1
      BCD=XCHAR
      IF(IDELAT(L,3).NE.1) BCD=YCHAR
      IF(NCHAN.EQ.0.OR.KINDPR.GT.0)
     *WRITE(IOUT, 1740 ) L,IPOL,ILATO,BCD,(ERONET(M),M=N1,N2)
 2070 CONTINUE
C
C                     CLEAR BUFFER
 2080 DO 2090 I=1,MILLE
      BUFFER(I)=0.0
 2090 CONTINUE
C
C                         THERMAL LOAD
C                         ------------
      IF(NCHAN.EQ.0.OR.KINDPR.GT.0)
     *WRITE(IOUT, 2100 )
 2100 FORMAT(//' THERMAL LOAD',
     * ' (WATTS/CM2)'//' WALL  POL. SIDE ALONG')
      DO 2120 L=1,NLATS
      N=IDELAT(L,1)
      IPOL=N/1000
      ILATO=N-IPOL*1000
      N=IDELAT(L,2)
      BCD=XCHAR
      IF(IDELAT(L,3).NE.1) BCD=YCHAR
      DO 2110 M=1,N
C                                     FROM EV/S TO WATTS/CM2
      BUFFER(M)=QDEPL(L,M)*1.6022E-19/(FKOST1*SPAREA(L,M))
C                        STORE TOTAL THERMAL LOAD DISTRIBUTION FOR PLOT
C                       NO PLOTS IF NLATS*MSCAN > 399
      IF(NLATS*MSCAN.GT.399) GO TO 2110
      TERTOT(M+MSCAN*(L-1))=TERTOT(M+MSCAN*(L-1))+BUFFER(M)
 2110 CONTINUE
      IF(NCHAN.EQ.0.OR.KINDPR.GT.0)
     *WRITE(IOUT, 1740 ) L,IPOL,ILATO,BCD,(BUFFER(M),M=1,N)
 2120 CONTINUE
C
C                 TOTAL THERMAL LOAD ON SURFACES DUE TO FUEL,
C                 SEPARATED FROM THAT DUE TO HELIUM
C
      IF(NCHAN.EQ.0.OR.KINDPR.GT.0)
     *WRITE(IOUT, 2130 )
 2130 FORMAT(//' TOTAL THERMAL LOAD ORIGINATED FROM FUEL (WATTS)'//
     *' WALL  POL. SIDE')
      DO 2140 L=1,NLATS
      N=IDELAT(L,1)
      IPOL=N/1000
      ILATO=N-IPOL*1000
C                                     FROM EV/S TO WATTS
      BUFFER(1)=TARLHY(L)*1.6022E-19/FKOST1
      IF(NCHAN.EQ.0.OR.KINDPR.GT.0)
     *WRITE(IOUT, 2150 ) L,IPOL,ILATO,BUFFER(1)
 2140 CONTINUE
 2150 FORMAT(I3,')',I5,I5,7X,1PE10.3)
C
C                 TOTAL THERMAL LOAD ON SURFACES DUE TO HELIUM
      IF(INDHEL.EQ.0) GO TO 2180
      IF(NCHAN.EQ.0.OR.KINDPR.GT.0)
     *WRITE(IOUT, 2160 )
 2160 FORMAT(//' TOTAL THERMAL LOAD ORIGINATED FROM HE (WATTS)'//
     *' WALL  POL. SIDE')
      DO 2170 L=1,NLATS
      N=IDELAT(L,1)
      IPOL=N/1000
      ILATO=N-IPOL*1000
C                                     FROM EV/S TO WATTS
      BUFFER(1)=TARLHE(L)*1.6022E-19/FKOST1
      IF(NCHAN.EQ.0.OR.KINDPR.GT.0)
     *WRITE(IOUT, 2150 ) L,IPOL,ILATO,BUFFER(1)
 2170 CONTINUE
C-----------------------------------------------------------------------
C     PLOT TOTAL EROSION, REDEPOSITION, NET EROSION, THERMAL LOAD
C                    PLOT  TOTAL EROSION
 2180 CONTINUE
      IF(KINDPR.EQ.0) GO TO 2270
C                       NO PLOTS IF NLATS*MSCAN > 399
      IF(NLATS*MSCAN.GT.399) GO TO 2270
      WRITE(IOUT, 2190 ) YEARFR
 2190 FORMAT('1TOTAL EROSION (Y) ALONG SEGMENTS (X) OF WALL 1,2,.. (CM/Y
     *EAR); OPERATION TIME (YEAR FRACTION)=',1PE12.4)
C
C               FROM 1 TO IMAX=MSCAN*NLATS
C
      IMAX=MSCAN*NLATS
      TRAN=EROTOT(1)
      DO 2200 I=1,IMAX
      IF(TRAN.LT.EROTOT(I)) TRAN=EROTOT(I)
 2200 CONTINUE
      TRAN=TRAN/1000.
      CALL DRAW(MSCAN,NLATS,CHANEL,EROTOT(1),TRAN,1,ALFABE)
C
C                    PLOT TOTAL REDEPOSITION (IF ANY)
      IF(DECIMA.LE.1.0E-04) GO TO 2240
      WRITE(IOUT, 2210 ) YEARFR
 2210 FORMAT('1TOTAL REDEPOSITION (Y) ALONG SEGMENTS (X) OF WALL 1,2,..
     *(CM/YEAR); OPERATION TIME (YEAR FRACTION)=',1PE12.4)
C
C                      FROM 1 TO IMAX
C
      TRAN=REDTOT(1)
      DO 2220 I=1,IMAX
      IF(TRAN.LT.REDTOT(I)) TRAN=REDTOT(I)
 2220 CONTINUE
      TRAN=TRAN/1000.
      CALL DRAW(MSCAN,NLATS,CHANEL,REDTOT(1),TRAN,1,ALFABE)
C
C                    PLOT NET EROSION (IF REDEPOSITION EXISTS)
      IF(DECIMA.LE.1.0E-04) GO TO 2240
      WRITE(IOUT, 2230 ) YEARFR
 2230 FORMAT('1NET EROSION (Y) ALONG SEGMENTS (X) OF WALL 1,2,..(CM/YEAR
     *); OPERATION TIME (YEAR FRACTION)=',1PE12.4)
C
C                      LINEAR SCALE FOR NET EROSION (>0,<0)
C
      CALL DRAW(MSCAN,NLATS,CHANEL,ERONET(1),-1.0E+30,0,ALFABE)
C
C                    PLOT TOTAL THERMAL LOAD
 2240 WRITE(IOUT, 2250 )
 2250 FORMAT('1TOTAL THERMAL LOAD (Y) ALONG SEGMENTS (X) OF WALL 1,2,..
     *(WATTS/CM2)')
C
C                      FROM 1 TO IMAX
C
      TRAN=TERTOT(1)
      DO 2260 I=1,IMAX
      IF(TRAN.LT.TERTOT(I)) TRAN=TERTOT(I)
 2260 CONTINUE
      TRAN=TRAN/1000.
      CALL DRAW(MSCAN,NLATS,CHANEL,TERTOT(1),TRAN,1,ALFABE)
C
 2270 CONTINUE
C                                  END OF WALL EFFECTS EDITION
C---------------------------------------------------------------------
      DO 2280 I=1,MCH
 2280 NORDIN(I)=0
C                   CLEAR MEMORY FOR TOT.THERM.LOAD ON WALLS & ESCAPE E
C                      TLONWP=THERMAL LOAD ON WALLS DUE TO PARTICLES
C                IF IONTOW =0 THESE PARTICLES ARE BOTH IONS AND NEUTRALS
      TLONWP=0.0
      PESCAP=0.0
C
      IF(KINDPR.GT.0)
     *WRITE(IOUT, 2290 )
 2290 FORMAT(//' FLUXES, THERMAL LOADS, ESCAPES, IN ENERGY INTERVALS',
     */1X,51('='))
      DO 2490 IZO=1,NZONE
C                            IBO=-1 ESCAPE  ZONE
C                            IBO= 0 PLASMA   ,,
C                            IBO= 1 WALL     ,,
C                            IBO= 2 ALBEDO   ,,
C                          OMIT THE PRINT-OUT OF FLUXES IN PLASMA REG.S
C                          UNLESS KINDPR=3
      IF(IBOUNZ(IZO).EQ.0.AND.KINDPR.NE.3) GO TO 2490
C                          IF NO PLASMA,NO VOID, SKIP NEXT INSTRUCTIONS
      IF(IBOUNZ(IZO).NE.0) GO TO 2310
C                          ICH=CHANNEL INDEX
      ICH=ICHAN(IZO)
C                    NORDIN(ICH)=ORDER NUMBER OF ZONE IZO IN CHANNEL ICH
      IF(ICH.GT.0) NORDIN(ICH)=NORDIN(ICH)+1
C                                 IF IZO HAS NOT BEEN DEFINED AS A CELL
C                                 THEN OUTPUT IN TERMS OF ZONES
      IF(ICH.EQ.0) GO TO 2310
C                                 OUTPUT IN TERMS OF CHANNELS AND CELLS
      ICL=NORDIN(ICH)
      IF(KINDPR.GT.0)
     *WRITE(IOUT, 2300 ) ICH,ICL
 2300 FORMAT(/' CELL',I3,',',I2)
      GO TO 2330
C                                 OUTPUT IN TERMS OF ZONES
 2310 IF(KINDPR.GT.0)
     *WRITE(IOUT, 2320 ) IZO
 2320 FORMAT(/' ZONE',I4)
C
 2330 IBO=IBOUNZ(IZO)
      IF(IBO) 2340 , 2360 , 2380
 2340 IF(KINDPR.GT.0)
     *WRITE(IOUT, 2350 ) (EXTSYM(L),L=1,NCOM)
 2350 FORMAT(/6X,'ENERGY RANGE',7X,'ESCAPED',9(7X,A4))
      FNORM=FKOST1
      GO TO 2400
 2360 IF(KINDPR.GT.0)
     *WRITE(IOUT, 2370 ) (EXTSYM(L),L=1,NCOM)
 2370 FORMAT(/6X,'ENERGY RANGE',7X,' FLUX  ',9(7X,A4))
      FNORM=FKOST1*VOLZ(IZO)
      GO TO 2400
 2380 IF(IBO.EQ.2) GO TO 2340
      IF(KINDPR.GT.0)
     *WRITE(IOUT, 2390 ) (EXTSYM(L),L=1,NCOM)
 2390 FORMAT(/6X,'ENERGY RANGE',5X,'WALL HEATING',4X,A4,8(7X,A4))
      FNORM=FKOST1
 2400 NGEVM1=NGEV-1
      DO 2450 I=1,NGEV
      TRAN =0.0
      TRAN1=0.0
      DO 2410 L=1,NCOM
      BUFFER(L)=ENFLUX(L,IZO,I)/FNORM
      IF(I.LE.NIONPM) TRAN1=TRAN1+BUFFER(L)
 2410 TRAN=TRAN+BUFFER(L)
C                      SCORE TOTAL THERMAL LOAD ON WALLS AND E ESCAPED
C                      EXCLUDING HEAVY IMPURITIES
      IF(IBO.EQ.1)  TLONWP=TLONWP+TRAN1
      IF(IBO.LT.0)  PESCAP=PESCAP+TRAN1
      IF(IBO.EQ.2)  PESCAP=PESCAP+TRAN1
      IF(I.GT.1) GO TO 2430
      IF(KINDPR.GT.0)
     *WRITE(IOUT, 2420 ) EGEV(I),TRAN,(BUFFER(L),L=1,NCOM)
 2420 FORMAT('  INFINITE -',1PE10.3,10E11.3)
      GO TO 2450
 2430 IF(KINDPR.GT.0)
     *WRITE(IOUT, 2440 ) EGEV(I-1),EGEV(I),TRAN,(BUFFER(L),L=1,NCOM)
 2440 FORMAT(1PE10.3,' -',E10.3,10E11.3)
 2450 CONTINUE
      IF(IBO.EQ.0 .OR. IBO.EQ.1) GO TO 2490
      TRAN1=0.0
      TRAN2=0.0
      DO 2460 I=1,NCOM
      TRAN1=TRAN1+ESCEN(IZO,I)
 2460 TRAN2=TRAN2+ESCAPE(IZO,I)
      IF(TRAN2.LE.0.0) GO TO 2490
      TRAN1=TRAN1/TRAN2
      DO 2470 I=1,NCOM
      BUFFER(I)=0.0
      IF(ESCAPE(IZO,I).LE.0.0) GO TO 2470
      BUFFER(I)=ESCEN(IZO,I)/ESCAPE(IZO,I)
 2470 CONTINUE
      IF(KINDPR.GT.0)
     *WRITE(IOUT, 2480 ) TRAN1,(BUFFER(I),I=1,NCOM)
 2480 FORMAT(/25X,'AVERAGE'/5X,'ESCAPE ENERGY',4X,1P,9E11.3)
 2490 CONTINUE
C  OMITTED          EDIT TRANSITION MATRIX AMONG CHANNELS
C  -------OMITTED BECAUSE TOO MANY CHANNELS NOW. IF REQUIRED, ASSIGN
C         DIMENSIONS AND RESET TRAMAT=0.
      IF(.TRUE.) GO TO 2660
      IF(NCHAN.EQ.0) GO TO 2660
      WRITE(IOUT, 2500 )
 2500 FORMAT('1TRANSITION MATRICES'/1X,19('='))
      DO 2600 I=1,NCOM
      FMAX=0.0
      DO 2510 K=1,NCHAN
      DO 2510 J=1,NCHAN
      TRAN=TRAMAT(I,K,J)
 2510 FMAX=AMAX1(FMAX,TRAN)
      IF(FMAX.LE.0.0) GO TO 2600
      FMAX=FMAX/FKOST1
      NEXP=0
      IF(FMAX.GE.1000.0) GO TO 2530
 2520 FMAX=FMAX*10.0
      IF(FMAX.GE.1000.0) GO TO 2540
      NEXP=NEXP+1
      GO TO 2520
 2530 NEXP=NEXP-1
      FMAX=FMAX/10.0
      IF(FMAX.GE.1000.0) GO TO 2530
 2540 TRAN=10.0**NEXP
      FEXP=TRAN/FKOST1
CCC   TRAN=1.0/TRAN
      WRITE(IOUT, 2550 ) EXTSYM(I),TRAN,(L,L=1,NCHAN)
 2550 FORMAT(//1X,A4,' TRANSITION FREQUENCY MATRIX (TIMES',1PE8.1,')'/
     */' CHANNEL',29I4)
      WRITE(IOUT, 2560 )
 2560 FORMAT(' ')
      DO 2590 K=1,NCHAN
      DO 2570 J=1,NCHAN
      IBUFER(J)=TRAMAT(I,K,J)*FEXP+0.5
      IF(IBUFER(J).GT.999) IBUFER(J)=999
C     (PER EVITARE 1000 IN CASO DI ARROTONDAMENTO)
 2570 CONTINUE
      WRITE(IOUT, 2580 ) K,(IBUFER(J),J=1,NCHAN)
 2580 FORMAT(I4,I8,29I4)
 2590 CONTINUE
 2600 CONTINUE
C                   PLOT TRANSITIONS BETWEEN CHANNELS
C                   FROM I TO I+1
      DO 2620 K=1,NION
      NCHAN1=NCHAN-1
      DO 2610 I=1,NCHAN1
      KK=I+(K-1)*NCHAN
 2610 BUFFER(KK)=TRAMAT(K,I,I+1)/FKOST1
C                              CAUTION: SET LAST ITEM=0
      BUFFER(KK+1)=0.0
 2620 CONTINUE
      WRITE(IOUT, 2630 )
 2630 FORMAT('1TRANSITIONS FROM CHANNEL X TO X+1 OF COMPONENT 1,2,..')
      CALL DRAW(NCHAN,NION,CHANEL,BUFFER(1),0.0,1,ALFABE)
C                   FROM I TO I-1
C                              CAUTION: SET FIRST ITEM=0
      DO 2640 K=1,NION
      BUFFER(1+(K-1)*NCHAN)=0.0
      DO 2640 I=2,NCHAN
      KK=I+(K-1)*NCHAN
 2640 BUFFER(KK)=TRAMAT(K,I,I-1)/FKOST1
      WRITE(IOUT, 2650 )
 2650 FORMAT('1TRANSITIONS FROM CHANNEL X TO X-1 OF COMPONENT 1,2,..')
      CALL DRAW(NCHAN,NION,CHANEL,BUFFER(1),0.0,1,ALFABE)
C                     NEW PAGE PROVIDED BY S.R. DRAW
 2660 CONTINUE
C                                     FIRST ENTRY
C                                     -----------
      IF(IZOENT.LE.0) GO TO 2790
      WRITE(IOUT, 2670 ) IZOENT
 2670 FORMAT(//'1CONTRIBUTION OF SOURCE TARGET SEGMENTS TO FIRST ENTRY I
     *NTO ZONE',I3//' FROM SEGMENT (INTENSITY)   NEUTRALS ENTERED PER SE
     *C.')
C
C                       START FROM TARGETS PARALLEL TO Z .....
      WSOIM1=0.0
      DO 2710 I=1,NSEGS
C                           DEFINE VECTOR CHANEL AGAIN
C                           THIS TIME CONTAINING INDEX OF SOURCE TARGET.
      CHANEL(I)=I
      TENS=WSOUR1*(WSOSEG(I,1)-WSOIM1)
      IF(.TRUE.) THEN
        WRITE(IUERR,*) ' ***** IZOENT. WSOSEG(NION>1)'
        CALL EXITN(1)
      ENDIF
      WSOIM1=WSOSEG(I,1)
C                           INTENSITY REFERRED TO SOURCE GIVEN
      TENS=TENS*HHESRC
      DO 2700 K=1,NCOM
      TRAN=ZENTRY(K,I)/FKOST1
      IF(K.LE.1)
     * WRITE(IOUT, 2680 ) I,TENS,EXTSYM(K),TRAN
 2680 FORMAT(/I13,' (',1PE9.3,')',3X,A4,E12.4)
      IF(K.GT.1)
     * WRITE(IOUT, 2690 ) EXTSYM(K),TRAN
 2690 FORMAT(28X,A4,1PE12.4)
 2700 CONTINUE
 2710 CONTINUE
C                       .....AND GO ON WITH TARGETS NORMAL TO Z
      IF(NSOUXY.EQ.0) GO TO 2760
      WSOIM1=0.0
      DO 2750 I=1,NSOUXY
C                           CONTINUE DEFINITION OF VECTOR CHANEL
      IT=I+NSEGS
      CHANEL(IT)=IT
      TENS=(1.0-WSOUR1)*(WSOUXY(I)-WSOIM1)
      WSOIM1=WSOUXY(I)
C                           INTENSITY REFERRED TO SOURCE GIVEN
      TENS=TENS*HHESRC
      DO 2740 K=1,NCOM
      TRAN=ZENTRY(K,IT)/FKOST1
      IF(K.LE.1)
     * WRITE(IOUT, 2720 )IT,TENS,EXTSYM(K),TRAN
 2720 FORMAT(/I13,' (',1PE9.3,')',3X,A4,E12.4)
      IF(K.GT.1)
     * WRITE(IOUT, 2730 ) EXTSYM(K),TRAN
 2730 FORMAT(28X,A4,1PE12.4)
 2740 CONTINUE
 2750 CONTINUE
C               PLOT FIRST ENTRY FOR PLASMA COMPONENTS AND MOLECULES
 2760 TRAN=0.0
      DO 2770 K=1,NIONPM
      DO 2770 I=1,NTARG
      KK=I+(K-1)*NTARG
      BUFFER(KK)=ZENTRY(K,I)/FKOST1
      IF(TRAN.LT.BUFFER(KK)) TRAN=BUFFER(KK)
 2770 CONTINUE
      TRAN=TRAN/10000.
      WRITE(IOUT, 2780 ) IZOENT
 2780 FORMAT('1CONTRIBUTIONS (Y) OF TARGET SEGMENTS (X) TO FIRST ENTRANC
     *E INTO ZONE',I3,' (1,2,.. DENOTE PARTICLE SPECIES, SEE PREVIOUS TA
     *BLE)')
      CALL DRAW(NTARG,NIONPM,CHANEL,BUFFER,TRAN,1,ALFABE)
 2790 CONTINUE
C                                         BALANCES (INVENTORY)
C                                         --------
C       ENERGY EMERGING FROM WALLS=NEUTRAL ENERGY TO WALLS+PLASMA+ESCAPE
C       IF HE++ PRESENT,BALANCES DO NOT CLOSE BECAUSE SIM. TRUNC. AT HE+
C       ACHTUNG: THESE BALANCES INCL. SOME STATISTICAL ESTIMATIONS:
C       E.G.: PESO W, STIMA DELLE IONIZZ., EMISS.MOLEC., STIMA DISS.
C       MOREOVER, WHEN WALLS ARE CARBON, NEUTRALS EMERGING TEND TO COLD
C       THE PLASMA AND THE ESTIMATE OF KINETIC POWER TRANSF. TO PLASMA
C       (NEGATIVE) HAS AN HIGH VARIANCE (LIKE THE MOMENTA). IN THIS CASE
C       IT WILL BE WISER USING DENSITIES TO COMPUTE THIS CONTRIBUTION.
      WRITE(IUERR, 2800 )
 2800 FORMAT(//'0ENERGY AND PARTICLE INVENTORY'/1X,29('=')/,
     *' (HEAVY IMPURITIES EXCLUDED FROM ENERGY INVENTORY)'//)
C                             1) POWER OF INITIAL IONS ON WALLS
      WRITE(IUERR, 2810 )
 2810 FORMAT(/' POWER OF IONS INCIDENT ON COLLECTION SURFACES (WATTS)'/)
C                             1.6022E-19  = FROM EV/S TO WATTS
      TRAN=PIONW*1.6022E-19/FKOST1
      WRITE(IUERR, 2820 ) TRAN
 2820 FORMAT(9X,1P,E10.3)
C                             2) THERMAL LOAD ON WALLS DUE TO IONS
C                                                          REMEMBER THAT
C      ENERGY RELEASED IN THE WALL BY COMBINATION OF 2 ATOMS AND BY IONS
C            COMBINING WITH ELECTRONS FOR FORMING NEUTRALS, WAS GIVEN TO
C                                            ATOMIC IONS BY THE PLASMA.
      TRAN =TLONWI*1.6022E-19/FKOST1
      TRAN1=PIONRE*1.6022E-19/FKOST1
      TRAN2=PMOLR1*1.6022E-19/FKOST1
      TRAN3=TRAN-(TRAN1+TRAN2)
      WRITE(IUERR, 2830 )
 2830 FORMAT(/' THERMAL LOAD GENERATED BY IONS ON COLLECTION SURFACES (W
     *ATTS)'/)
      WRITE(IUERR, 2840 ) TRAN3
 2840 FORMAT(9X,1P,E10.3,'  KINETIC POWER DEPOSITED BY IONS')
      WRITE(IUERR, 2850 ) TRAN1
 2850 FORMAT(9X,1P,E10.3,'  RELEASED BY ION  RECOMBINATIONS')
      WRITE(IUERR, 2860 ) TRAN2
 2860 FORMAT(9X,1P,E10.3,'  RELEASED BY MOL. RECOMBINATIONS')
      WRITE(IUERR, 2870 ) TRAN
 2870 FORMAT(9X,1P,E10.3,'  TOTAL')
C                             3) POWER OF INIT. NEUTR. EMERG. FROM WALLS
      WRITE(IUERR, 2880 )
 2880 FORMAT(/' POWER OF INITIAL NEUTRALS EMERGING FROM COLLECTION SURFA
     *CES (WATTS)'/)
      TRAN=PINEFW*1.6022E-19/FKOST1
      WRITE(IUERR, 2820 ) TRAN
C
C                             4) THERMAL LOAD ON WALLS DUE TO NEUTRALS
C                        FOR MOL.RECOMB. SEE S.R. RUN, SCORE IN ENFLUX;
C            REMEMBER THAT MOL.DISSOC. BRINGS NEW ENERGY BACK TO WALLS;
C     NO ENERGY EXCH. WITH WALL IS SCORED AT FIRST COLL. WHEN IONTOW=1;
C     TLONWP MEANS THER. LOAD ON WALLS DUE TO PARTICLES.  WHEN IONTOW=0
C     THESE  PARTICLES ARE BOTH IONS AND NEUTRALS. OTHERWISE ONLY NEUTR.
C
      WRITE(IUERR, 2890 )
 2890 FORMAT(/' THERMAL LOAD GENERATED BY NEUTRALS ON COLLECTION SURFACE
     *S AND WALLS (WATTS)'/)
      IF(IONTOW.EQ.0) TRAN=(TLONWP-TLONWI/FKOST1)*1.6022E-19
      IF(IONTOW.EQ.1) TRAN=TLONWP*1.6022E-19
      TRAN1=PMOLR2*1.6022E-19/FKOST1
C
      TRAN2=TRAN-TRAN1
      WRITE(IUERR, 2900 ) TRAN2
 2900 FORMAT(9X,1P,E10.3,'  KINETIC POWER DEPOSITED BY NEUTRALS')
      WRITE(IUERR, 2910 ) TRAN1
 2910 FORMAT(9X,1P,E10.3,'  RELEASED BY MOL. RECOMBINATIONS')
      WRITE(IUERR, 2920 ) TRAN
 2920 FORMAT(9X,1P,E10.3,'  TOTAL')
C                             5) POWER TRANSFERRED BY NEUTRALS TO PLASMA
      WRITE(IUERR, 2930 )
 2930 FORMAT(/' KINETIC POWER TRANSFERRED BY NEUTRALS TO PLASMA IONS (WA
     *TTS)'/' THROUGH CHARGE EXCHANGE, ELASTIC SCATTERING AND IONIZATION
     *'/)
      TRANA=PTTOPA*1.6022E-19
      TRANB=PTTOPB*1.6022E-19
      WRITE(IUERR, 2932 ) TRANA+TRANB,TRANA,TRANB
 2932 FORMAT(9X,1P,E10.3,'  (',E9.3,E10.3,')')
C                             6) POWER SUBTRACTED TO ELECTRONS
      WRITE(IUERR, 2940 )
 2940 FORMAT(/' POWER SUBTRACTED TO PLASMA ELECTRONS (WATTS)'/
     *' BY IONIZATIONS, EXCITATIONS AND DISSOCIATIONS'/
     *' (MOL.DISSOC. BRINGS ENERGY BACK TO THE WALLS)'/)
      TRAN=0.0
      DO 2950 I=1,NCOM
      BUFFER(I)=POWRAD(I)*1.6022E-19
      TRAN=TRAN+BUFFER(I)
 2950 WRITE(IUERR, 2960 ) EXTSYM(I),BUFFER(I)
 2960 FORMAT(5X,A4,1PE10.3)
      WRITE(IUERR, 2970 ) TRAN
 2970 FORMAT('   TOTAL',1X,1PE10.3)
C                             7) POWER ESCAPED
      WRITE(IUERR, 2980 )
 2980 FORMAT(/' POWER ESCAPED (WATTS)'/)
      TRAN=PESCAP*1.6022E-19
      WRITE(IUERR, 2820 ) TRAN
C                             END ENERGY BALANCE
C
C                             8) PARTICLE BALANCE
C              BALANCE REFERRED ALSO TO ONE PLASMA PARTICLE
C         1) "RE-EMITTED" MEANS MOLECULES REEMITTED IF IEMIS=M OVERALL;
C                         MEANS ATOMS REEMITTED IF IEMIS=A OVERALL;
C                         IF REEMISSION IS MIXED THEN MEANINGLESS.
C         2) "DISSOCIATED" MEANS MOLECULES DISSOCIATED
C                      N.B. IN PARTICLE INVENTORY,1 ATOM AND 1 MOLECULE
C                           COUNT AS 2 PARTICLES (AND NOT 3).IN OTHER
C                           WORDS WE COUNT THE PARTICLES, NOT THE MASS
      TRAN1=TOTCX/HHESRC
      TRAN21=TOTION(1)/HHESRC
      TRAN22=TOTION(2)/HHESRC
      TRAN23=TOTION(3)/HHESRC
      TRAN31=TOTES(1)/HHESRC
      TRAN32=TOTES(2)/HHESRC
      TRAN4=TOTDIS/HHESRC
      TRAN5=TOTBAC/HHESRC
      TRAN6=TOTREE/HHESRC
      TRAN7=TOTSPU/HHESRC
      TRA7N=TOTSPN/HHESRC
      TRAN8=TOTIMP/HHESRC
      TRAN9=TOTALB/HHESRC
      TRAN10=(TOTESC-TOTZES)/HHESRC
      TRAN11=TOTZES/HHESRC
C
      IF(IONTOW.EQ.0) THEN
        ITRAN=ALFABE(37)
      ELSE
        ITRAN=ALFABE(36)
      ENDIF
      IF(ICUTCX.EQ.0) THEN
        ITRAN1=ALFABE(36)
      ELSE
        ITRAN1=ISTAR2
      ENDIF
      TRANX1=0.0
      TRANX2=0.0
      DO 2984 K=1,NCOM
        IF(K.LE.NION. AND. TABLE(LABINT(K),4).LE.1.1) THEN
          TRANX1=TRANX1+SMLEAK(K)
          SUMNLK(K)=SUMNLK(K)+SMLEAK(K)/FKOST1
        ELSE IF(K.GT.NION .AND. K.LE.NIONPM) THEN
          TRANX1=TRANX1+SMLEAK(K)*2.0
          L=IATOM(K)
          SUMNLK(L)=SUMNLK(L)+SMLEAK(K)*2.0/FKOST1
        ELSE
          TRANX2=TRANX2+SMLEAK(K)
          SUMZLK(K)=SMLEAK(K)/FKOST1
        ENDIF
 2984 CONTINUE
      TOTHLK = TRANX1/FKOST1
      TOTZLK = TRANX2/FKOST1
      WRITE(IUERR, 2985 ) TOTCX,TRAN1,ITRAN1,TOTION(1),TRAN21,
     *                    TOTION(2),TRAN22,TOTION(3),TRAN23,
     *                    TOTES(1),TRAN31,TOTES(2),TRAN32,
     *              TOTDIS,TRAN4,TOTBAC,TRAN5,ITRAN,TOTREE,TRAN6,ITRAN,
     *              TOTSPU,TRAN7,ITRAN,TOTSPN,TRA7N,
     *                           TOTIMP,TRAN8,TOTALB,TRAN9,
     *              TOTESC-TOTZES,TRAN10,TOTZES,TRAN11
     *             ,TOTFEA,TOTFEA/HHESRC
     *             ,TOTZEA,TOTZEA/HHESRC
     *             ,TRANX1/FKOST1,TRANX1/FKOST
     *             ,TRANX2/FKOST1,TRANX2/FKOST
C                  (TOTESC-TOTZES=TOTFES)
 2985 FORMAT(//,' PARTICLE INVENTORY (SECOND VALUE REFERS TO ONE SOURCE
     *PARTICLE)'//
     * 7X,'CHARGE-EXCHANGED',1P,E12.5,'  (',E12.5,')',4X,A2/
     *  9X,'(H+HE) IONIZED',E12.5,'  (',E12.5,')'/
     *  9X,'  (H2) IONIZED',E12.5,'  (',E12.5,')'/
     *  9X,'   (Z) IONIZED',E12.5,'  (',E12.5,')'/
     * 3X,' (H+HE) ELAS-SCATTRD',1PE12.5,'  (',E12.5,')'/
     * 3X,'   (H2) ELAS-SCATTRD',1PE12.5,'  (',E12.5,')'/
     * 12X,'DISSOCIATED',E12.5,'  (',E12.5,')'/
     * 10X,'BACKSCATTERED',E12.5,'  (',E12.5,')',4X,A1/
     * 13X,'RE-EMITTED',E12.5,'  (',E12.5,')',4X,A1/
     *  5X,'INJECTED/SPUTTERED',E12.5,'  (',E12.5,')',4X,A1/
     * 12X,'N-SPUTTERED',E12.5,'  (',E12.5,')'/
     * 12X,'REDEPOSITED',E12.5,'  (',E12.5,')'/
     * 15X,'ALBEDOED',E12.5,'  (',E12.5,')'/
     *  9X,'(H+HE) ESCAPED',E12.5,'  (',E12.5,')    **'/
     *  9X,'   (Z) ESCAPED',E12.5,'  (',E12.5,')'/
     *  9X,' (H+HE) PUMPED',E12.5,'  (',E12.5,')'/
     *  9X,'    (Z) PUMPED',E12.5,'  (',E12.5,')'/
     *  9X,' (H+HE) LEAKED',E12.5,'  (',E12.5,')'/
     *  9X,'    (Z) LEAKED',E12.5,'  (',E12.5,')')
      IF(MIMP.GT.0) THEN
        WRITE(IUERR,'(/)')
        DO I=NIONPM+1,NCOM
          IF(I.NE.LIGHTW) THEN
            CHARSP='   SPUTTERED'
          ELSE
            CHARSP='    INJECTED'
          ENDIF
          WRITE(IUERR,'(7X,A4,    A12         ,1P,E12.5
     *                   /11X,'' N-SPUTTERED'',   E12.5
     *                   /11X,'' REDEPOSITED'',   E12.5
     *                   /11X,''     ESCAPED'',   E12.5
     *                   /11X,''     IONISED'',   E12.5
     *                   /11X,''      PUMPED'',   E12.5
     *                   /11X,''      LEAKED'',   E12.5)')
     *    TABLE(LABINT(I),6),CHARSP,
     *                       SUMSPU(I),SUMSPN(I),
     *                       SUMIMP(I),SUMNES(I),
     *                       SUMION(I),SUMNEA(I),
     *                       SUMZLK(I)
        ENDDO
        ICOMSP=0
      ELSE
        ICOMSP=0
        DO I=NIONPM+1,NCOM
          IF(SUMSPU(I).GT.0.0) THEN
            IF(ICOMSP.EQ.0) THEN
              ICOMSP=I
            ELSE
              WRITE(IUERR,*) ' MIMP <= 0 BUT MORE THAN 1 SPUTT.'
              CALL EXITN(1)
            ENDIF
          ENDIF
        ENDDO
        WRITE(IUERR,'(/,A,A4,'' ('',I1,'')'')')
     *        '    THE ONLY INJECTED/SPUTTERED NEUTRAL IS ',
     *        TABLE(LABINT(ICOMSP),6),ICOMSP
      ENDIF
      HTMOUT=0.0
      ZTMOUT=0.0
      DO 2986 K=1,NCOM
        IF(K.LE.NION) THEN
          HTMOUT=HTMOUT+TIMOUT(K)
        ELSE IF(K.GT.NION .AND. K.LE.NIONPM) THEN
          HTMOUT=HTMOUT+TIMOUT(K)*2.0
        ELSE
          ZTMOUT=ZTMOUT+TIMOUT(K)
        ENDIF
 2986 CONTINUE
      HTMOUT=HTMOUT/FKOST1
      ZTMOUT=ZTMOUT/FKOST1
      IF(TCUT.LT.TIMINF) THEN
        WRITE(IUERR,2987) HTMOUT,HTMOUT/HHESRC
     &                   ,ZTMOUT,ZTMOUT/HHESRC
 2987   FORMAT(8X,'(H) TIME-OUT''ED',1P,E12.5,'  (',E12.5,')'/
     &         8X,'(Z) TIME-OUT''ED',1P,E12.5,'  (',E12.5,')')
      ENDIF
      WRITE(IUERR,'()')
      IF(TCUT.LT.TIMINF) THEN
        WRITE(IUERR,2988) STMOUT,STMOUT/HHESRC
     *                   ,YTMOUT,YTMOUT/HHESRC
 2988   FORMAT(5X,'(H) TIME-RECOVERED',1P,E12.5,'  (',E12.5,')'/
     *         5X,'(Z) TIME-RECOVERED',1P,E12.5,'  (',E12.5,')')
      ENDIF
      WRITE(IUERR,2989) SRECYC,SRECYC/HHESRC
     *                 ,SRECOM,SRECOM/HHESRC
 2989 FORMAT(5X,'     (H+) RECYCLED',1P,E12.5,'  (',E12.5,')'/
     *       5X,'   (H+) RECOMBINED',1P,E12.5,'  (',E12.5,')')
C
      IF(ICUTCX.NE.0) WRITE(IUERR, 2993 )
C
      IF(IONTOW.EQ.0) WRITE(IUERR, 2991 ) SRECYC
 2991 FORMAT(
     * /' *  INCL. EVENTS FROM RECYCLING FUEL IONS (',1P,E11.5,')'
     * /'   (2*RE-EMIT. + BACKS. - RECYC.SOURCE = FLUX OUT OF WALL')
C
      WRITE(IUERR,'(/'' ** INCL. REMOVED IONS'')')
C
 2993 FORMAT(/' ** (DOCTORED)')
C
      IF(IRECO.NE.1 .AND.IONTOW.EQ.1) WRITE(IUERR, 2992 )
 2992 FORMAT(//' N.B. REDEPOSITION COULD BE GREATER THAN SPUTTERING',
     *' SINCE EFFECTS OF RECYCLING IONS HAVE NOT BEEN REQUESTED')
C
CT    SUMFL1=0.0
CT    SUMFL2=0.0
      DO 2995 K=1,2
        SUMFLP(K)=0.0
        SUMFLW(K)=0.0
        SUMFLC(K)=0.0
 2995 CONTINUE
      SUMSOP(1)=0.0
      SUMSOP(2)=0.0
      SUMSOP(3)=0.0
      DO 3010 I=1,NZONE
        CALL GETNBR(NZONE,MEIBOR,LOCNBR(1),NEIBOR(1),I,N,
     &              IBUFER(1),MILLE,IBUFER(NZONE+1),MILLE-NZONE)
        IF(N.LE.0) GOTO 3010
        DO 3004 J=1,N
          L=IBUFER(NZONE+J)
CT        SUMFL1=SUMFL1+WNBR(L,1)
CT        SUMFL2=SUMFL2+WNBR(L,2)
C OLDP    IF(IBOUNZ(I).LT.0) THEN
          IF(IBOUNZ(I).EQ.-2) THEN
            SUMFLC(1)=SUMFLC(1)+WNBR(L,1)
            SUMFLC(2)=SUMFLC(2)+WNBR(L,2)
          ELSE IF(IBOUNZ(I).EQ.0) THEN
            SUMFLP(1)=SUMFLP(1)+WNBR(L,1)
            SUMFLP(2)=SUMFLP(2)+WNBR(L,2)
C OLDP    ELSE IF(IBOUNZ(I).GT.0) THEN
          ELSE IF(IBOUNZ(I).GT.0 .OR. IBOUNZ(I).EQ.-1) THEN
            SUMFLW(1)=SUMFLW(1)+WNBR(L,1)
            SUMFLW(2)=SUMFLW(2)+WNBR(L,2)
          ENDIF
 3004   CONTINUE
C       DO 3005 K=1,NIONPM
C         ZA=TABLE(LABINT(K),4)
C         IF(ZA.LE.1.1) THEN
C           SUMSOU=SUMSOU+ABSOR(I,K)
C         ENDIF
C3005   CONTINUE
        IF(IBOUNZ(I).LT.0) THEN
          CONTINUE
        ELSE IF(IBOUNZ(I).EQ.0) THEN
          SUMSOP(1)=SUMSOP(1)+SOURCE(I,1)
          SUMSOP(2)=SUMSOP(2)+SOURCE(I,2)
          SUMSOP(3)=SUMSOP(3)+SOURCE(I,3)
        ELSE IF(IBOUNZ(I).GT.0) THEN
          CONTINUE
        ENDIF
CW      IF(N.LE.20) THEN
CW        WRITE(IOUT,3006) I,(IBUFER(L),L=1,N)
CW      ELSE
CW        WRITE(IOUT,3006) I,(IBUFER(L),L=1,20)
CW        WRITE(IOUT,3007)   (IBUFER(L),L=21,N)
CW      ENDIF
C3006   FORMAT(' ZONE=',I4    ,' NEIGHBOURS=',20I5)
C3007   FORMAT('      ','    ','            ',20I5)
 3010 CONTINUE
CT    SUMFL1=SUMFL1/FKOST1
CT    SUMFL2=SUMFL2/FKOST1
      DO 3011 K=1,2
        SUMFLC(K)=SUMFLC(K)/FKOST1
        SUMFLP(K)=SUMFLP(K)/FKOST1
        SUMFLW(K)=SUMFLW(K)/FKOST1
 3011 CONTINUE
      SUMSOP(1)=SUMSOP(1)/FKOST1
      SUMSOP(2)=SUMSOP(2)/FKOST1
      SUMSOP(3)=SUMSOP(3)/FKOST1
      SUMESC=0.0
      DO 3012 I=1,NMACRO
        SUMESC = SUMESC+SMACRO(I,5,IMN)
 3012 CONTINUE
      SUMESC = SUMESC/FKOST1
CT    WRITE(6,*) ' SUMFL1=',SUMFL1,' SUMFL2=',SUMFL2,' SUMESC=',SUMESC
CT    WRITE(6,*) ' PARET1=',PARET1/FKOST1
CT    WRITE(6,*) ' PARET2=',PARET2/FKOST1
CT   *          ,' PARET3=',PARET3/FKOST1
CT   *          ,' PARET4=',PARET4/FKOST1
CT    WRITE(6,*) '  2-3-4=',(PARET2-PARET3-PARET4)/FKOST1
      WRITE(IUERR,3015)
     &      SUMFLP(1),SUMSOP(1),SUMFLP(2),SUMSOP(2),SUMSOP(3)
     &     ,SUMFLP(1)+SUMSOP(1)-SUMFLP(2)-SUMSOP(2)+SUMSOP(3)
     &     ,SUMFLW(1),SUMFLW(2),SUMFLW(1)-SUMFLW(2)-(SUMESC-SUMFLC(1))
     &     ,SUMFLC(1),SUMESC-SUMFLC(1)
 3015 FORMAT(//26X,'HYDROGENIC NEUTRAL PARTICLE BALANCE',
     & ' (REMOVED IONS NOT INCL.)   '/
     & 18X,'IN',8X,'SOURCE',7X,'OUT',7X,'IONIZED',7X,'RR/TM',9X,'LOST'/
     & '    PLASMA  ',1P,4E12.5,2E13.5/
     & '      WALL  ',    E12.5,12X,E12.5,26X,E12.5/
     & '      CORE  ',    E12.5/
     & '   REMOVED  ',    E12.5)
COLD & 18X,'IN',8X,'SOURCE',7X,'OUT',7X,'IONIZED',8X,'R.R.',9X,'LOST'/
C
      IF(NMACRO.LE.0) GOTO 3040
      DO 3030 KN=1,NCOM
        IF(KN.GT.NION .AND. KN.LE.NIONPM) GOTO 3030
        LMN=IATOM(KN)
        IF(KN.LE.NIONPM .AND. LMN.NE.IMN) GOTO 3030
        IF(LMN.EQ.IMN) THEN
          TRAN=TABLE(2,6)
        ELSE
          TRAN=TABLE(LABINT(IATOM(LMN)),6)
        ENDIF
        WRITE(IUERR,3021) TRAN
 3021   FORMAT('0',45X,A2,'- NEUTRAL PROFILES IN MACROZONES'
     &         /' MACRO-ZONE',3X,'IN',4X,'RECYC/SPUT RECOM.IONS',
     &          3X,'OUT',5X,'RR/TIME',
     &          1X,'IONIZ+ESCPD',4X,'LOST',5X,'VOLUME',3X,'XPC.IONIZ',
     &          2X,'DENSITY',2X,'PRESS(MB) H-ALPHA''D')
COLD &          3X,'OUT',5X,'RR BORN',
        STRAN1 = 0.0
        STRA11 = 0.0
        STRAN2 = 0.0
        STRAN3 = 0.0
        STRAN4 = 0.0
        STRAN5 = 0.0
        STRAN6 = 0.0
        STRAN7 = 0.0
        STRAN8 = 0.0
        STRA81 = 0.0
        STRANV = 0.0
        STRAN9 = 0.0
        DO 3027 I=1,NMACRO
          TRAN1 = SMACRO(I,1,LMN)/FKOST1
          TRA11 = SMACRO(I,4,LMN)/FKOST1
          TRAN2 = (SMACRO(I,2,LMN)+SMACRO(I,5,LMN))/FKOST1
          TRAN3 = SMACRO(I,3,LMN)/FKOST1
          TRAN4 = 0.0
          TRAN7 = 0.0
          DO 3024 J=1,NMACRO
            IF(I.EQ.J) GOTO 3024
            TRAN4=TRAN4+FMACRO(J,I,LMN)
            TRAN7=TRAN7+FMACRO(I,J,LMN)
 3024     CONTINUE
          TRAN4 = TRAN4/FKOST1
          TRAN7 = TRAN7/FKOST1
          TRAN5 = TRAN1+TRAN3+(TRAN4-TRAN7)-TRAN2+TRA11
          TRAN6 = PMACRO(I,2,LMN)
          IF(VMACRO(I).GT.0.0) THEN
            TRAN8 = PMACRO(I,3,LMN)/VMACRO(I)
            TRA81 = PMACRO(I,4,LMN)/VMACRO(I)*1.6022E-12*0.666667*0.001
          ELSE
            TRAN8=0.0
            TRA81=0.0
          ENDIF
          STRANV = STRANV + VMACRO(I)
          TRAN9 = PMACRO(I,1,LMN)
          IF(TRAN1.EQ.0.0 .AND. TRAN2.EQ.0.0 .AND. TRAN3.EQ.0.0 .AND.
     &       TRAN4.EQ.0.0 .AND. TRAN7.EQ.0.0 .AND. TRAN6.EQ.0.0 .AND.
     &       TRAN8.EQ.0.0 .AND. TRA11.EQ.0.0) GOTO 3027
          IF(I.LT.NMACRO) THEN
            WRITE(IUERR,3025) I,TRAN4,TRAN1,TRA11,TRAN7,TRAN3,TRAN2,
     &                      TRAN5,VMACRO(I),TRAN6,TRAN8,TRA81,TRAN9
 3025       FORMAT(I7,3X,1P,6E10.3,E11.3,1X,5E10.3)
          ELSE
            WRITE(IUERR,3026)   TRAN4,TRAN1,TRA11,TRAN7,TRAN3,TRAN2,
     &                      TRAN5,VMACRO(I),TRAN6,TRAN8,TRA81,TRAN9
 3026       FORMAT('   UNDEF  ',1P,6E10.3,E11.3,1X,5E10.3)
          ENDIF
          NMAC=I
          STRAN1 = STRAN1 + TRAN1
          STRA11 = STRA11 + TRA11
          STRAN2 = STRAN2 + TRAN2
          STRAN3 = STRAN3 + TRAN3
          STRAN4 = STRAN4 + TRAN4
          STRAN5 = STRAN5 + TRAN5
          STRAN6 = STRAN6 + TRAN6
          STRAN7 = STRAN7 + TRAN7
          STRAN8 = STRAN8 + TRAN8*VMACRO(I)
          STRA81 = STRA81 + TRA81*VMACRO(I)
          STRAN9 = STRAN9 + TRAN9
 3027   CONTINUE
        WRITE(IUERR,3028)STRAN4,STRAN1,STRA11,STRAN7,STRAN3,STRAN2,
     &         STRAN5,STRANV,STRAN6,STRAN8/STRANV,STRA81/STRANV,STRAN9
 3028   FORMAT(1X,80('-'),2X,49('-')/
     &         '   TOTAL  ',1P,6E10.3,E11.3,1X,5E10.3)
        WRITE(IUERR,
     &   '(''0'',45X,A2,''- NEUTRAL FLUXES BETWEEN MACROZONES'')')TRAN
        NPR = MIN0(16,NMAC)
        WRITE(IUERR,'(16I8)') (I,I=1,NPR)
        DO I=1,NMAC
          IPRN=0
          DO K=1,NMAC
            IF(FMACRO(I,K,LMN).NE.0.0) IPRN=1
          ENDDO
          IF(IPRN.EQ.1)
     &    WRITE(IUERR,
     &   '(I3,1P,16E8.1)')I,(FMACRO(I,K,LMN)/FKOST1,K=1,NPR)
        ENDDO
        IF(NMAC.LE.16) GOTO 3030
        WRITE(IUERR,'(16I8)') (I,I=17,NMAC)
        DO I=1,NMAC
          IPRN=0
          DO K=1,NMAC
            IF(FMACRO(I,K,LMN).NE.0.0) IPRN=1
          ENDDO
          IF(IPRN.EQ.1)
     &    WRITE(IUERR,'(I3,1P,16E8.1)')I,(FMACRO(I,K,LMN)/FKOST1,
     &                                    K=17,NMAC)
        ENDDO
 3030 CONTINUE
C
 3040 CONTINUE
      IF(IRECO.NE.1) THEN
        TRAN1 = WPRSP/FKOST1
        TRAN2 = 0.0
        IF(WPRSP.NE.0.0) TRAN2 = EPRSP/WPRSP
        TRAN3 = WTASP/FKOST1
        TRAN4 = 0.0
        IF(WTASP.NE.0.0) TRAN4 = ETASP/WTASP
        WRITE(IOUT,3042) TRAN1,TRAN2,TRAN3,TRAN4
 3042   FORMAT(/' SPUTTERING DUE TO PRIMARY IONS'
     *         /'      PROJECTILE IONS',1P,E12.3
     *         /'    AVE IMPACT ENERGY',   E12.3
     *         /' SPUTTERED IMPURITIES',   E12.3
     *         /'           AVE ENERGY',   E12.3)
      ENDIF
C
      IF(TCUT.GE.TIMINF) THEN
C                             9) RESIDENCE TIME
      WRITE(IUERR, 3043 )
 3043 FORMAT(//' RESIDENCE TIME(SEC) OF EACH PARTICLE IN THE WHOLE ASSEM
     *BLY'/)
      DO 3046 I=1,NCOM
      TRAN=0.0
      IF(WBORN(I).GT.0.0) THEN
        TRAN=SAG(I)*1.0217E-06/WBORN(I)
      ENDIF
      IF(I.LE.NION .OR. I.GT.NIONPM) THEN
        MOL=1
      ELSE
        MOL=2
      ENDIF
C     EGA() E' IL TEMPO FINO ALLA MORTE DALL'INIZIO DEL TIME-SLICE,
C     NON LA VITA MEDIA. PER SAG(), UN PO' DIVERSO. CHIARIRE
      WRITE(IUERR,3044) EXTSYM(I),TRAN,EGA(I)*FLOAT(MOL)/FKOST,WBORN(I)
 3044 FORMAT(5X,A4,1P,E10.3,' (',2E10.3,')')
 3046 CONTINUE
      ENDIF
      TRAN=0.0
      IF(AGEH(1).NE.0.0) THEN
        TRAN1=AGEH(2)/AGEH(1)
        TRAN2=AGEH(3)/AGEH(1)
        TRAN2=TRAN2-TRAN1**2
        IF(TRAN2.GT.0.0) THEN
          TRAN2=SQRT(TRAN2)
        ELSE
          TRAN2=0.0
        ENDIF
      ELSE
        TRAN1=0.0
        TRAN2=0.0
      ENDIF
      WRITE(IUERR,3048) TRAN1,TRAN2
 3048 FORMAT(/' FUEL LIFE-TIME',1P,E9.2,' (VAR.',E9.2,') S')
C                             10) BALANCES FOR PLASMA CODE
      IF(IPUNCH.GT.0) THEN
         WRITE(IPUNCH, 1400 ) TOTION(1)+TOTION(2)+TOTION(3),
C======================== MODIFICHE PER D&T ==========================
     *                        (SUMNES(L),SUMNEA(L),L=1,NION),
C OLD*                        TOTFES,TOTFEA,
C=====================================================================
     *                        TOTSPU,TOTZES,TOTIMP
     *                       ,SRECYC,SRECOM,TOTSPN
     *                       ,HTMOUT,STMOUT,TCUT,FLOAT(ITAPIO(2))
C======================== MODIFICHE PER D&T ==========================
     *                       ,ZTMOUT,YTMOUT,TOTZEA
     *                       ,(SUMNLK(L),L=1,NION),TOTZLK
C OLD*                       ,ZTMOUT,YTMOUT,TOTZEA,TOTHLK,TOTZLK
C=====================================================================
C        IF(MIMP.LE.0) THEN
C          WRITE(IPUNCH, 1400 ) TOTION(1)+TOTION(2)+TOTION(3)
C    *                         ,TOTFES,TOTFEA
C    *                         ,SUMSPU(ICOMSP),SUMNES(ICOMSP)
C    *                         ,SUMIMP(ICOMSP)
C    *                         ,SRECYC,SRECOM,SUMSPN(ICOMSP)
C    *                         ,HTMOUT,STMOUT,TCUT,FLOAT(ITAPIO(2))
C    *                         ,ZTMOUT,YTMOUT
C    *                         ,SUMNEA(ICOMSP),TOTHLK,SUMZLK(ICOMSP)
C        ELSE
C        ENDIF
C======================== MODIFICHE PER D&T ==========================
C        IF(NION.GT.1 .OR. .TRUE.) THEN
C          TRAN1=0.0
C          TRAN2=0.0
C          DO I=1,NION
C            TRAN1=TRAN1+SUMNES(I)
C            TRAN2=TRAN2+SUMNEA(I)
C          ENDDO
C          WRITE(IUERR,*) ' TOTFES,SUMNES',TOTFES,TRAN1
C          WRITE(IUERR,*) ' TOTFEA,SUMNEA',TOTFEA,TRAN2
C-ACT*VATE?WRITE(IPUNCH, 1400 ) (SUMNES(I),SUMNEA(I),
C-ACT*VATE?                      I=I,NION)
C        ENDIF
C=====================================================================
         IF(MIMP.GT.0) THEN
           WRITE(IPUNCH, 1400 ) (SUMSPU(I),SUMNES(I),SUMIMP(I),
     *                           SUMSPN(I),SUMNEA(I),SUMZLK(I),
     *                           I=NIONPM+1,NCOM)
         ENDIF
         WRITE(IPUNCH, 3055 ) NCHAN
         WRITE(IPUNCH, 3055 ) (NZCHAN(J),J=1,NCHAN)
         WRITE(IPUNCH, 3055 ) ((IZCHAN(I,J),J=1,NZCHAN(I)),I=1,NCHAN)
      END IF
C     IF(TAGLIO.EQ.0.0) GO TO 3070
      IF( TRUNC.LE.0.0) GO TO 3070
      TRAN=TRUNC/FKOST1
      TRAN11=TRAN/HHESRC
      WRITE(IUERR, 3060 ) TRAN,TRAN11
 3060 FORMAT('      TRUNCATED (ATOMS)',1P,E12.5,'  (',E12.5,')')
 3070 CONTINUE
C
      IF(IPUNCH.GT.0) THEN
         WRITE(IPUNCH,3055) IDEBWR
         IF(IDEBWR.GT.0) THEN
           DO 3075 I=1,IDEBWR
             WRITE(IPUNCH,3056) KDEBWR(I) , NDBHST(I)
             WRITE(IPUNCH,1400)
     *                (XDEBWR(I,K,1),XDEBWR(I,K,2),XDEBWR(I,K,3),
     *                 K=1,KDEBWR(I))
 3075      CONTINUE
         ENDIF
      ENDIF
C
      IF(IPUNCH.GT.0) THEN
C               PUNCH NEUTRALS FLUXES
        IGO=0
 3076   IGO=IGO+1
        IF(IGO.EQ.1) THEN
          WRITE(IPUNCH,3078)' FLUXES TO WALL XCPT FROM M.R.',
     *                      IABS(IPVOID)
        ELSE IF(IGO.EQ.2) THEN
          WRITE(IPUNCH,3078)
     *                ' FLUXES TO PLASMA BOUNDARY FROM GAP VOID'
        ELSE
          GOTO 3086
        ENDIF
 3078   FORMAT(A,I3)
CT      SUM=0.0
CT      SUI=0.0
        SUS=0.0
        SUR=0.0
        DO 3085 IZO=1,NZONE
          IF( (IGO.EQ.1 .AND. IBOUNZ(IZO).GT.0) .OR.
     *        (IGO.EQ.2 .AND. IBOUNZ(IZO).EQ.0) ) THEN
            TRAN=0.0
            TRAI=0.0
            TRAE1=0.0
            TRAE2=0.0
            DO 3080 K=1,NIONPM
              ZA=TABLE(LABINT(K),4)
              IF(ZA.LE.1.1) THEN
C OLD           TRAN1=WACOL(K,IZO,7) CONTAINS CONTRIB. FROM PUMP VOID
                TRAN1=WACOL(K,IZO,8)
                IF(K.GT.NION) TRAN1=TRAN1*2.0
C                 FLUX OF HYDROGEN ATOMS AND MOLECULES ONTO WALL
                TRAN= TRAN+TRAN1
                IF(IGO.EQ.1 .AND. K.LE.NION) THEN
C                 FLUX OF HYDROGEN IONS AND ATOMS ONTO WALL
                  TRAI= WACOL(K,IZO,9)+TRAN1
C                 ENERGY OF HYDROGEN ATOMS ONTO WALL
                  TRAE1 = TRAE1+WACOL(K,IZO,8)
                  TRAE2 = TRAE2+WACOL(K,IZO,12)
                ENDIF
              ENDIF
 3080       CONTINUE
            TRAE=0.0
            TRAS=0.0
            TRAR=0.0
            IF(IGO.EQ.2) GOTO 3082
            IF(TRAE1.GT.0.0) TRAE=TRAE2/TRAE1
            DO 3081 K=NIONPM+1,NCOM
C              SPUTTERED (FROM IONS & NEUTRALS;  4-->6 NEUTRALS ONLY)
C OLD         TRAS=TRAS+WACOL(K,IZO,4)
              TRAS=TRAS+WACOL(K,IZO,10)
C              RE-DEPOSITED
C OLD         TRAR=TRAR+REDP(IZO,K)
              TRAR=TRAR+WACOL(K,IZO,11)
 3081       CONTINUE
 3082       IF(TRAN.GT.0.0 .OR. TRAI.GT.0.0 .OR.
     &         TRAS.GT.0.0 .OR. TRAR.GT.0.0) THEN
              TRAN=TRAN/FKOST1
              TRAI=TRAI/FKOST1
              TRAS=TRAS/FKOST1
              TRAR=TRAR/FKOST1
              TRAE1=TRAE1/FKOST1
              IF( IGO.EQ.2 ) THEN
                  WRITE(IPUNCH,1390) IZO,TRAN
              ELSE
                  WRITE(IPUNCH,1392) IZO,TRAN,TRAI,TRAS,TRAR,TRAE
     &                             , TRAE1
     &                             , (WACOL(K,IZO,13)/FKOST1,K=1,NION)
                  IF(MIMP.GT.0) THEN
                    WRITE(IPUNCH,1400)
     &              (WACOL(K,IZO,10)/FKOST1,WACOL(K,IZO,11)/FKOST1,
     *               K=NIONPM+1,NCOM)
                  ENDIF
              END IF
CT            SUM=SUM+TRAN
CT            SUI=SUI+TRAI
              SUS=SUS+TRAS
              SUR=SUR+TRAR
            ENDIF
          ENDIF
 3085   CONTINUE
        WRITE(IPUNCH,1390) -1
CT      WRITE(IUERR,*) ' IGO=',IGO,' SUM=',SUM,' SUI=',SUI
        IF(IGO.EQ.1)
     &  WRITE(IUERR,*) ' MAIN CHAMBER: SPUTT.=',SUS,
     &                               ' REDEP.=',SUR
        GOTO 3076
 3086   CONTINUE
      ENDIF
C
C                             11) CODE STATISTICS
      WRITE(IUERR, 3088 )
 3088 FORMAT('0CODE STATISTICS'/1X,15('='))
C                                NUMBER OF TRACKS
      WRITE(IUERR, 3090 )
 3090 FORMAT(//9X,'    INITIAL ','TRACK''S WEIGHT   TRACKS'/)
      DO 3110 I=1,NCOM
C            REMEMBER THAT FKOST1=KOST/HHESRC IS NOT EQUAL TO FKOST
      IF(HISTOR(I).LE.0.0) THEN
        TRAN=0.0
      ELSE
        TRAN=WBORN(I)/HISTOR(I)
      ENDIF
        TRAN1=SPIN(I)/FKOST
      ITRAN=HISTOR(I)
      WRITE(IUERR, 3100 ) EXTSYM(I),TRAN1,TRAN,ITRAN
 3100 FORMAT(5X,A4,1P,2E12.3,I11)
 3110 CONTINUE
C
      TRAN=COLS/FKOST
      TRAN1=COLW/FKOST
      WRITE(IUERR, 3120 ) TRAN,TRAN1
 3120 FORMAT(//'        COLLISIONS/HISTORY ',F7.2
     *        /' WALL INTERACTIONS/HISTORY ',F7.2,4X,'(INCLUDING PARENT
     *IONS)')
      CALL RANGET(IC)
      IF(ICORR.NE.0) IC=INIZST
      WRITE(IOUT, 3130 )IC
 3130 FORMAT (/' LAST RANDOM INTEGER ',I20)
      CALL WRITIM
      WRITE(IUERR, 3140 ) WRS,WNP
 3140 FORMAT(' RUSSIAN ROULETTE:  WON=',F10.3,'   LOST=',F10.3)
      WRITE(IUERR, 3150 ) MAXSON,FAXSOH/FKOST
 3150 FORMAT(/' MAXIMUM NUMBER OF DAUGHTER NEUTRALS',I4/
     *        ' AVERAGE   "     "     "        "   ',F5.0)
      IF(INCID.NE.0) WRITE(IUERR, 3160 ) INCID
 3160 FORMAT(/' GEOMETRY ERRORS',I4)
      IF(NERELA.NE.0) WRITE(IUERR, 3162 ) NERELA
 3162 FORMAT(/' ELAST. SCATT. FAILURES',I6)
C
C                 REVISION OF PLASMA PROPERTIES
C                 AND COMPUTATION OF PUMPING REQUIREMENTS
      I=PROREQ(4)
      IF(I.GT.0) ALB=ALBEDO(I)
C                 FIRST ENTRY=1 MEANS PRINT
      CALL REVISE(1,ALB,TRANHY,TRANHE)
C
C
C
      IF(KOST.LT.NST) GO TO 300
      IF(IWRITE.EQ.0) GO TO 3180
      WRITE(IARK) KOST,COLS,SPIN,WACOL,FUGA,FLUX,ABSOR,ELAST,
     * CEXED,ENNE,EAVER,ESCAPE,REDP,FLUXZ,ENFLUX,MAXSON,INCID,IC
     *,IWRITE,WNP,WRS,COLW,TRUNC,SAG,WBORN,HISTOR,DISSOC,TRAMAT,ESCEN
     *,SPFUEL,ERECYC,PRECYC,REDFUE,QDEPL,ZENTRY,SPUHEL,ECHBEM,ELOST
     *,ELOBEM,REDHEL,TARLHY,TARLHE,QF,QI,AF,AI,PIONW,PINEFW,TLONWI
     *,PIONRE,PMOLR1,PMOLR2,AALB,QALB,AHENR,QHENR,AHETP,QHETP,VELOC
     *,SIGMAN,IBIN,LOCNBR,NEIBOR,WNBR,SOURCE,LASTNB,ICORR
     *,SMACRO,NMACRO,ERECEL,ERECCX,PRECEL,TIMOUT,EGA,AGEH,SMLEAK
     *,FAXSOH,ENNEH,NERELA
      REWIND IARK
      WRITE(IOUT, 3170 ) IWRITE
 3170 FORMAT(/' JOB N.',I3,' HAS BEEN FILED')
 3180 CONTINUE
C
      IF(TCUT.LT.TIMINF) THEN
        CALL WRTANK (-2,ITAPIO(2),IDMC,ITRAN,
     &       HHESRC,KOST,NION,NIONPM,NCOM,TCUT,
     &       NUTRAL,W,E,X,Y,Z,IZ,IR,IREG,IREG3D,
     &       COSP,SINP,COST,SINT,AGE,
     &       IBIN,IGAP,ITSOU,ITRAN
     &               )
        WRITE(IUERR,3190) NHRTVD,NHSRC,NHSTRD
     &                   ,NZRTVD,      NZSTRD
 3190   FORMAT(/' H-HISTORIES RETRIEVED FROM PREVIOUS TIME SLICE ',I6/
     &          '                       NEW H-HISTORIES LAUNCHED ',I6/
     &          '                        TIME-OUT''ED H-HISTORIES ',I6
     &         /' Z-HISTORIES RETRIEVED FROM PREVIOUS TIME SLICE ',I6/
     &          '                        TIME-OUT''ED Z-HISTORIES ',I6)
      ENDIF
      WRITE(IUERR,3200) WHTOT/FKOST
 3200 FORMAT(/' SOURCE WEIGHT PER HISTORY',1P,E9.2)
C
      CALL RWGENI(2,IERR)
C
      RETURN
      END
C.......................................................................
C.......................................................................
      SUBROUTINE HADATA(DE,TE,BIA,ISENT)
C
C     PHOTONS PRODUCED PER IONISATION OR DISSOCIATION
C
      COMMON/IOFILE/IN,IOUT,IUERR,IARK,IPUNCH,IGMT,ITRMT,ITAPIO(2)
C
      BIA=0.0
      IF(TE.LE.0.0 .OR. DE.LE.0.0) RETURN
C     WRITE(IUERR,10) DE,TE
C  10 FORMAT(' DE=',1PE12.3,' TE=',E12.3)
      CALL GINTRP(TE,BIA,DE,ISENT)
CW    IF(ISENT.NE.0) THEN
CW      WRITE(IUERR,*) 'HADATA: ERROR=',ISENT
CW    ENDIF
      RETURN
      END
C
C=======================================================================
       SUBROUTINE GINTRP(XINTRP,YINTRP,ZINTRP,IABT)
       IMPLICIT REAL*4(A-H,O-Z)
C
C-----------------------------------------------------------------------
C                                GINTRP
C                                ======
C
C      FOR KNOWN X-AXIS (XINTRP) AND Z-AXIS (ZINTRP) VALUES THIS ROUTINE
C      WILL INTERPOLATE IN ORDER TO DERIVE THEIR CORRESPONDING Y-AXIS
C      VALUE (I.E YINTRP).
C
C      THERE ARE 'NCURVE' CURVES OF Z-AXIS VALUE ZVAL(ICURVE) IN WHICH
C      ICURVE = 1 TO NCURVE AND WHERE THE CURVES ARE DEFINED BY THE
C      POINTS ( XVAL(IPNTS) , YVAL(ICURVE,IPNTS) ) IN THE RANGE
C      IPNTS = 1 TO NPNTS, WHERE IT IS ASSUMED THAT THE NUMBER OF POINTS
C      ON EACH OF THE CURVES IS THE SAME WITH THE SAME X-AXIS VALUES.
C
C      XVAL(IPNTS)        = X-VALUE (E.G TEMP)    OF POINT IPNTS.
C      YVAL(ICURVE,IPNTS) = Y-VALUE (E.G PHOTON) OF POINT IPNTS ON CURVE
C                           ICURVE WHERE ICURVE = 1 TO NCURVE.
C      ZVAL(ICURVE)       = Z-VALUE (E.G DENSITY) OF CURVE ICURVE.
C      ICURVE             = RANGES 1 TO NCURVE.
C      IPNTS              = RANGES 1 TO NPNTS.
C
C      IN ORDER THE OBTAIN THE OBJECTIVE IN THE FIRST PARAGRAPH IT WILL
C      BE NECESSARY TO INTERPOLATE IN Z AT THE GIVEN XVAL POINTS FOR
C      IPNTS = 1 TO NPNTS AND FROM THIS NEW CURVE OF Z-VALUE ZINTRP
C      THEN INTERPOLATE TO FIND YINTRP AT THE REQUIRED XINTRP VALUE.
C
C
C     ABORTS   : IABT = 0     ===> NO ABORT CONDITION ENCOUNTERED.
C     ========   IABT = 1     ===> ZINTRP LIES OUTSIDE THE RANGE
C                                  ZVAL(1) AND ZVAL(NCURVE).
C                IABT = 2     ===> XINTRP LIES OUTSIDE THE RANGE
C                                  XVAL(1) AND XVAL(NPNTS).
C                IABT = 3     ===> INTERPOLATED VALUE FOR YINTRP
C                                  IS GREATER THAT YMAX.
C                IABT = 4     ===> BOTH IABT = 1 AND IABT = 2 CONDITIONS
C                                  HAVE OCCURED.
C
C     NOTE     :IABT = 1 & ZINTRP < ZVAL(1)      - ZINTRP = ZVAL(1)
C     ========  IABT = 1 & ZINTRP > ZVAL(NCURVE) - ZINTRP = ZVAL(NCURVE)
C               IABT = 2 & XINTRP < XVAL(1)      - XINTRP = XVAL(1)
C               IABT = 2 & XINTRP > XVAL(NPNTS)  - XINTRP = XVAL(NPNTS)
C
C     INTERPT  : THIS ROUTINE WILL USE LINEAR INTERPOLATION ALWAYS.
C     ========                         --------------------
C
C     ROUTINES : LINEAR
C     ========
C
C     INPUT    :  XINTRP  ZINTRP
C     ========
C
C     OUTPUT   :  YINTRP  IABT
C     ========
C
C
C                                                      J.SPENCE 15.12.87
C-----------------------------------------------------------------------
C
C      -------------------------------------
       PARAMETER ( NCURVE = 5 , NPNTS = 11 )
C      -------------------------------------
       DIMENSION XVAL(NPNTS)   , YVAL(NCURVE,NPNTS) , ZVAL(NCURVE)
       DIMENSION                 YINTP(NPNTS)
C
C......DATA WHICH HAVE BEEN READ DIRECTLY FROM A GRAPH..................
C
       DATA XVAL/ 1.00E+00 ,
     2            2.11E+00 ,
     3            4.00E+00 ,
     4            6.00E+00 ,
     5            1.00E+01 ,
     6            2.00E+01 ,
     7            5.00E+01 ,
     8            1.00E+02 ,
     9            2.00E+02 ,
     A            5.00E+02 ,
     B            1.00E+03 /
       DATA YVAL/ 2.22E+00 , 1.53E+00 , 9.20E-01 , 5.20E-01 , 3.10E-01 ,
     2            1.00E+00 , 7.20E-01 , 5.00E-01 , 3.10E-01 , 2.00E-01 ,
     3            4.50E-01 , 3.60E-01 , 2.90E-01 , 1.80E-01 , 1.10E-01 ,
     4            3.10E-01 , 2.60E-01 , 2.10E-01 , 1.30E-01 , 6.30E-02 ,
     5            2.20E-01 , 1.80E-01 , 1.47E-01 , 8.90E-02 , 3.50E-02 ,
     6            1.50E-01 , 1.30E-01 , 1.00E-01 , 6.00E-02 , 2.00E-02 ,
     7            1.10E-01 , 9.60E-02 , 7.30E-02 , 4.10E-02 , 1.60E-02 ,
     8            9.40E-02 , 8.30E-02 , 6.50E-02 , 3.80E-02 , 1.60E-02 ,
     9            8.90E-02 , 8.10E-02 , 6.40E-02 , 4.00E-02 , 1.80E-02 ,
     A            9.10E-02 , 8.50E-02 , 7.30E-02 , 5.00E-02 , 2.30E-02 ,
     B            9.90E-02 , 9.20E-02 , 8.20E-02 , 6.00E-02 , 3.00E-02 /
       DATA ZVAL/ 1.00E+12 , 3.20E+12 , 1.00E+13 , 3.20E+13 , 1.00E+14 /
       DATA YMAX/1.00/
C
       YINTRP = 0.0
       ZSTORE = ZINTRP
       XSTORE = XINTRP
C
C......TEST ZINTRP AND RETURN AN ABORT CODE IF REQUIRED.................
C
       IABT   = 0
       IF(ZINTRP.LT.ZVAL(1))THEN
                            IABT = 1
                            ZINTRP = ZVAL(1)
       END IF
       IF(ZINTRP.GT.ZVAL(NCURVE))THEN
                            IABT = 1
                            ZINTRP = ZVAL(NCURVE)
       END IF
       IF(XINTRP.LT.XVAL(1))THEN
                            IF(IABT.EQ.1)THEN
                                         IABT = 4
                            ELSE
                                         IABT = 2
                            END IF
                            XINTRP = XVAL(1)
       END IF
       IF(XINTRP.GT.XVAL(NPNTS))THEN
                            IF(IABT.EQ.1)THEN
                                         IABT = 4
                            ELSE
                                         IABT = 2
                            END IF
                            XINTRP = XVAL(NPNTS)
       END IF
C
C......BETWEEN WHICH OF THE 'NCURVES' CURVES DOES ZINTRP LIE............
C
       DO 100 ICURVE = 1 , NCURVE
          IF(ZINTRP.EQ.ZVAL(ICURVE))THEN
                                    IZUPP = ICURVE
                                    IZLOW = IZUPP
                                    GOTO 10
          END IF
          IF(ZINTRP.LT.ZVAL(ICURVE))THEN
                                    IZUPP = ICURVE
                                    IZLOW = IZUPP - 1
                                    GOTO 10
          END IF
  100  CONTINUE
C
C......BETWEEN WHICH OF THE 'NPNTS' POINTS DOES XINTRP LIE..............
C
   10  DO 200 IPNTS = 1 , NPNTS
          IF(XINTRP.EQ.XVAL(IPNTS))THEN
                                   IXUPP = IPNTS
                                   IXLOW = IXUPP
                                   GOTO 20
          END IF
          IF(XINTRP.LT.XVAL(IPNTS))THEN
                                   IXUPP = IPNTS
                                   IXLOW = IXUPP - 1
                                   GOTO 20
          END IF
  200  CONTINUE
C
C......INTERPOLATION PROCEDURE..........................................
C
   20  ITYPE1 = 2
       DO 300 IPNTS = 1 , NPNTS
          IF(IZUPP.EQ.IZLOW)THEN
                 YINTP(IPNTS) = YVAL(IZUPP,IPNTS)
          ELSE
                 YUPP = YVAL(IZUPP,IPNTS)
                 YLOW = YVAL(IZLOW,IPNTS)
                 CALL LINEAR( ZVAL(IZUPP) , YUPP ,ZVAL(IZLOW) , YLOW ,
     *                        ZINTRP , YINTP(IPNTS) , ITYPE1 )
          END IF
  300  CONTINUE
C
   30  ITYPE2 = 1
       IF(IXUPP.EQ.IXLOW)THEN
                 YINTRP = YINTP(IXUPP)
       ELSE
                 YUPP = YINTP(IXUPP)
                 YLOW = YINTP(IXLOW)
                 CALL LINEAR( XVAL(IXUPP) , YUPP , XVAL(IXLOW) , YLOW ,
     *                        XINTRP , YINTRP , ITYPE2 )
       END IF
C
       IF(YINTRP.GT.YMAX)THEN
                         YINTRP = 1.00
                         IABT   = 3
       END IF
C
C.......................................................................
C
 9999  ZINTRP = ZSTORE
       XINTRP = XSTORE
C
       RETURN
       END
C
C=======================================================================
       SUBROUTINE HADATM( TEV , YALFA )
       IMPLICIT REAL*4(A-H,O-Z)
C      -----------------------------------
       PARAMETER ( NVAL = 10 , ITYPE = 1 )
C      -----------------------------------
       DIMENSION TVAL( NVAL ) , YVAL( NVAL )
C
C.......................................................................
C
       DATA TVAL/  1.27  ,  2.00  ,  3.00  ,  4.00  ,    5.00 ,
     &            10.00  , 20.00  , 30.00  , 70.00  , 1000.00   /
C
       DATA YVAL/ 0.0001 , 0.0006 , 0.0018 , 0.0028 , 0.0039  ,
     &            0.0075 , 0.0110 , 0.0130 , 0.0150 , 0.0150    /
C
C.......................................................................
C
       IF( TEV .LE. TVAL(1)    ) THEN
                                 IMIN = 1
                                 IMAX = 1
                                 GOTO 9000
       END IF
C
       IF( TEV .GE. TVAL(NVAL) ) THEN
                                 IMIN = NVAL
                                 IMAX = NVAL
                                 GOTO 9000
       END IF
C
       DO 100 I = 2 , NVAL
          IF( TEV .EQ. TVAL(I) ) THEN
                                 IMIN = I
                                 IMAX = I
                                 GOTO 9000
          END IF
          IF( TEV .LT. TVAL(I) ) THEN
                                 IMIN = I - 1
                                 IMAX = I
                                 GOTO 9000
          END IF
  100  CONTINUE
C
C.......................................................................
C
 9000  IF( IMIN .EQ. IMAX ) THEN
                            YALFA = YVAL(IMIN)
       ELSE
                            CALL LINEAR( TVAL(IMIN) , YVAL(IMIN) ,
     &                                   TVAL(IMAX) , YVAL(IMAX) ,
     &                                   TEV        , YALFA      ,
     &                                   ITYPE                     )
       END IF
C
C.......................................................................
C
 9999  RETURN
       END
C
C=======================================================================
       SUBROUTINE LINEAR(X1,Y1,X2,Y2,XINTP,YINTP,ITYPE)
       IMPLICIT REAL*4(A-H,O-Z)
       REAL*8 GRAD , X1R8 , Y1R8 , X2R8 , Y2R8 , XIR8 , VALUE
C
       X1R8 = X1
       Y1R8 = Y1
       X2R8 = X2
       Y2R8 = Y2
       XIR8 = XINTP
C
       IF(ITYPE.EQ.0)THEN
         GRAD  = (Y1R8 - Y2R8)/(X1R8 - X2R8)
         VALUE = GRAD * ( XIR8 - X1R8 ) + Y1R8
       END IF
C
       IF(ITYPE.EQ.1)THEN
         GRAD  = (LOG10(Y1R8) - LOG10(Y2R8))/(LOG10(X1R8) - LOG10(X2R8))
         VALUE = GRAD * ( LOG10(XIR8) - LOG10(X1R8) ) + LOG10(Y1R8)
         VALUE = 10.0**VALUE
       END IF
C
       IF(ITYPE.EQ.2)THEN
         GRAD  = (LOG10(Y1R8) - LOG10(Y2R8))/(X1R8 - X2R8)
         VALUE = GRAD * ( XIR8 - X1R8 ) + LOG10(Y1R8)
         VALUE = 10.0**VALUE
       END IF
C
       YINTP = VALUE
C
       RETURN
       END
C.......................................................................
C.......................................................................
      SUBROUTINE GRID(N,M,XGRID,YGRID,KINDPR)
C
C     GENERATES A CHESS-BOARD OF(AT MOST 15*15)ELEMENTARY PARALLELOGRAMS
C     STARTING FROM 3 POINTS A,B,C (COUNTERCLOCKWISE) WITH AB DIVIDED
C     INTO N (UNEQUAL) PARTS AND AC INTO M. DISTANCES BETWEEN PARALLEL
C     LINES (ARBITRARY UNITS) ARE D (ALONG AB) AND S (ALONG AC).
C
      IMPLICIT REAL*8 (A-H,O-Z)
C
      COMMON/IOFILE/IN,IOUT,IUERR,IARK,IPUNCH,IGMT,ITRMT,ITAPIO(2)
C
      REAL  V
C
      DIMENSION D(15),S(15),XGRID(16,16),YGRID(16,16),V(6)
C
      READ(IN, 10 )XA,YA,XB,YB,XC,YC
C  10 FORMAT(10X,6E10.0)                                  ----- 04/11/92
   10 FORMAT(10X,6E11.0)
      IF(KINDPR.GE.2) WRITE(IOUT, 20 )
   20 FORMAT(' *GRD')
C                    CHECK COUNTERCLOCKWISENESS
      V(1)= XA
      V(2)= YA
      V(3)= XB
      V(4)= YB
      V(5)= XC
      V(6)= YC
      CALL CHKPOL(3,V,IERR)
C
      N1=N-1
      M1=M-1
      READ(IN, 10 )(D(I),I=1,N)
      READ(IN, 10 )(S(I),I=1,M)
C
      SUMD=0.0
      DO 30 I=1,N
      SUMD=SUMD+D(I)
   30 CONTINUE
      SUMS=0.0
      DO 40 I=1,M
      SUMS=SUMS+S(I)
   40 CONTINUE
C                DIVIDE SEGMENTS INTO PARTS PROPORTIONAL TO D AND S
      ABX=(XB-XA)/SUMD
      ABY=(YB-YA)/SUMD
      ACX=(XC-XA)/SUMS
      ACY=(YC-YA)/SUMS
C                                 POINTS ALONG AB
C                                     FIRST=A
      XGRID(1,1)=XA
      YGRID(1,1)=YA
      IF(N1.EQ.0) GO TO 60
      DO 50 I=1,N1
      XGRID(I+1,1)=XGRID(I,1)+D(I)*ABX
      YGRID(I+1,1)=YGRID(I,1)+D(I)*ABY
   50 CONTINUE
C                                     LAST=B
   60 XGRID(N+1,1)=XB
      YGRID(N+1,1)=YB
C                               POINTS ALONG AC
      IF(M1.EQ.0) GO TO 80
      DO 70 J=1,M1
      XGRID(1,J+1)=XGRID(1,J)+S(J)*ACX
      YGRID(1,J+1)=YGRID(1,J)+S(J)*ACY
   70 CONTINUE
C                                      LAST=C
   80 XGRID(1,M+1)=XC
      YGRID(1,M+1)=YC
C                              INTERNAL AND PERIPHERAL POINTS
      NP1=N+1
      MP1=M+1
      DO 90 I=2,NP1
      DO 90 J=2,MP1
      XGRID(I,J)=XGRID(I-1,J)+(XGRID(I,J-1)-XGRID(I-1,J-1))
      YGRID(I,J)=YGRID(I-1,J)+(YGRID(I,J-1)-YGRID(I-1,J-1))
   90 CONTINUE
      RETURN
      END
C.......................................................................
C.......................................................................
      SUBROUTINE QUADR(N,M,XGRID,YGRID,KINDPR)
C
C     RETURNS THE COORDINATES XGRID,YGRID OF AN IRREGULAR CHESS-BOARD
C     COMPOSED OF (AT MOST 15*15) ELEMENTARY QUADRANGLES, STARTING FROM
C     4 POINTS A,B,C,D (COUNTERCLOCKWISE AND CONVEX) WITH AB,DC DIVIDED
C     INTO N (UNEQUAL) PARTS AND BC,AD INTO M. DISTANCES BETWEEN
C     LINES (ARBITRARY UNITS) ARE D(I) ALONG AB, DP(I) ALONG DC,
C     S(I) ALONG BC, SP(I) ALONG AD.
C
      IMPLICIT REAL*8 (A-H,O-Z)
C
      COMMON/IOFILE/IN,IOUT,IUERR,IARK,IPUNCH,IGMT,ITRMT,ITAPIO(2)
C
      REAL V
C
      DIMENSION D(15),DP(15),S(15),SP(15),XGRID(16,16),YGRID(16,16),V(8)
C
      READ(IN, 10 )XA,YA,XB,YB,XC,YC,XD,YD
C  10 FORMAT(10X,6E10.0)                                  ----- 04/11/92
   10 FORMAT(10X,6E11.0)
      IF(KINDPR.GE.2) WRITE(IOUT, 20 )
   20 FORMAT(' *QDR')
C                    CHECK CONVEXITY AND COUNTERCLOCKWISENESS
      V(1)= XA
      V(2)= YA
      V(3)= XB
      V(4)= YB
      V(5)= XC
      V(6)= YC
      V(7)= XD
      V(8)= YD
      CALL CHKPOL(4,V,IERR)
C
      N1=N-1
      M1=M-1
      READ(IN, 10 )(D(I), I=1,N)
      READ(IN, 10 )(DP(I),I=1,N)
      READ(IN, 10 )(S(I), I=1,M)
      READ(IN, 10 )(SP(I),I=1,M)
C
      SUMD=0.0
      DO 30 I=1,N
      SUMD=SUMD+D(I)
   30 CONTINUE
C
      SUMDP=0.0
      DO 40 I=1,N
      SUMDP=SUMDP+DP(I)
   40 CONTINUE
C
      SUMS=0.0
      DO 50 I=1,M
      SUMS=SUMS+S(I)
   50 CONTINUE
C
      SUMSP=0.0
      DO 60 I=1,M
      SUMSP=SUMSP+SP(I)
   60 CONTINUE
C           FOR DIVIDING SEGMENTS INTO PARTS PROPORTIONAL TO D,S,DP,SP
      ABX=(XB-XA)/SUMD
      ABY=(YB-YA)/SUMD
      BCX=(XC-XB)/SUMS
      BCY=(YC-YB)/SUMS
      DCX=(XC-XD)/SUMDP
      DCY=(YC-YD)/SUMDP
      ADX=(XD-XA)/SUMSP
      ADY=(YD-YA)/SUMSP
C                                 POINTS ALONG AB
C                         FIRST=A
      XGRID(1,1)=XA
      YGRID(1,1)=YA
      IF(N1.EQ.0) GO TO 80
      DO 70 I=1,N1
      XGRID(I+1,1)=XGRID(I,1)+D(I)*ABX
      YGRID(I+1,1)=YGRID(I,1)+D(I)*ABY
   70 CONTINUE
C                                     LAST=B
   80 XGRID(N+1,1)=XB
      YGRID(N+1,1)=YB
C                                 POINTS ALONG DC
C                                     FIRST=D
      XGRID(1,M+1)=XD
      YGRID(1,M+1)=YD
      IF(N1.EQ.0) GO TO 100
      DO 90 I=1,N1
      XGRID(I+1,M+1)=XGRID(I,M+1)+DP(I)*DCX
      YGRID(I+1,M+1)=YGRID(I,M+1)+DP(I)*DCY
   90 CONTINUE
C                                     LAST=C
  100 XGRID(N+1,M+1)=XC
      YGRID(N+1,M+1)=YC
C                                 POINTS ALONG BC
      IF(M1.EQ.0) RETURN
      DO 110 J=1,M1
      XGRID(N+1,J+1)=XGRID(N+1,J)+S(J)*BCX
      YGRID(N+1,J+1)=YGRID(N+1,J)+S(J)*BCY
  110 CONTINUE
C                               POINTS ALONG AD
      DO 120 J=1,M1
      XGRID(1,J+1)=XGRID(1,J)+SP(J)*ADX
      YGRID(1,J+1)=YGRID(1,J)+SP(J)*ADY
  120 CONTINUE
C                                NO INTERNAL POINTS
      IF(N1.EQ.0) RETURN
C                                INTERNAL POINTS
      DO 150 I=2,N
      DO 150 J=2,M
C                     PARAMETERS OF LINE L1 : Y = P1*X + Q1
C                     GOING FROM (1,J) TO (N+1,J)
      IF(XGRID(1,J).EQ.XGRID(N+1,J)) GO TO 140
      P1=(YGRID(N+1,J)-YGRID(1,J))/(XGRID(N+1,J)-XGRID(1,J))
      Q1=YGRID(1,J)-P1*XGRID(1,J)
C                     PARAMETERS OF LINE L2 : Y = P2*X + Q2
C                     GOING FROM (I,1) TO (I,M+1)
      IF(XGRID(I,1).EQ.XGRID(I,M+1)) GO TO 130
      P2=(YGRID(I,M+1)-YGRID(I,1))/(XGRID(I,M+1)-XGRID(I,1))
      Q2=YGRID(I,1)-P2*XGRID(I,1)
C                     INTERSECTION BETWEEN L1 AND L2
      XGRID(I,J)=(Q2-Q1)/(P1-P2)
      YGRID(I,J)=P1*XGRID(I,J)+Q1
      GO TO 150
  130 XGRID(I,J)=XGRID(I,1)
      YGRID(I,J)=P1*XGRID(I,J)+Q1
      GO TO 150
  140 P2=(YGRID(I,M+1)-YGRID(I,1))/(XGRID(I,M+1)-XGRID(I,1))
      Q2=YGRID(I,1)-P2*XGRID(I,1)
      XGRID(I,J)=XGRID(1,J)
      YGRID(I,J)=P2*XGRID(I,J)+Q2
  150 CONTINUE
      RETURN
      END
C.......................................................................
C.......................................................................
      SUBROUTINE DRAW(N,M,VX,VY,REF,ISCALE,CHAR)
C
C     GRAPHICS ON LINE PRINTER
C
C     N     : NUMBER OF POINTS OF EACH CURVE ( LESS OR EQUAL 50 )
C     M     : NUMBER OF CURVES
C     VX    : VECTOR OF ABSCISSAS
C     VY    : VECTOR OF ORDINATES ( N*M COMPONENTS )
C     REF   : REFERENCE VALUE FOR VY : ALL VY-VALUES
C             LESS OR EQUAL TO REF WILL BE IGNORED
C     ISCALE: KIND OF SCALE
C             ISCALE = 0  X-LIN , Y-LIN
C             ISCALE = 1  X-LIN , Y-LOG
C     CHAR  : VECTOR OF CHARACTERS TO BE USED FOR MARKING THE
C             POINTS IN THE FIGURE. IT MUST BE DEFINED AS INTEGER.
C
C     GRAPHIC OCCUPIES ONE PAGE (61 LINES).THE USER SHOULD INITIALIZE
C     THE PAGE BEFORE CALLING THE SUBROUTINE.
C
C
      COMMON/IOFILE/IN,IOUT,IUERR,IARK,IPUNCH,IGMT,ITRMT,ITAPIO(2)
C
      DIMENSION VY(*),VECT(103),VX(*),SCALE(11)
     *,TIT(130),STIT(130),DIGIT(11),IVX(50),ISL(8),CHAR(1)
      INTEGER TIT,STIT,DIGIT,VECT,BLK,DASH,AXIS
     *,SYMV,SYMX,SYM,CHAR
      DATA DASH/1H./,AXIS/1H./,BLK/1H /
      DATA SYMV/1H./,SYMX/1HX/,BLANK/4H    /,YX/4HY(X)/
      DATA SCALE/0.0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1.0/
      DATA DIGIT/1H-,1H0,1H1,1H2,1H3,1H4,1H5,1H6,1H7,1H8,1H9/
C
      IF(N.LE.50) GO TO 40
      WRITE(IUERR, 10 )N
   10 FORMAT(/' N=',I4,'  TOO MANY POINTS')
   20 WRITE(IUERR, 30 )
   30 FORMAT(57(/))
      RETURN
   40 IF(N.GT.1)GO TO 60
      WRITE(IUERR, 50 )N
   50 FORMAT(/' N=',I4,'  GRAPHIC CANNOT BE TRACED')
      GO TO 20
   60 DELTX=VX(N)-VX(1)
      DO 70 I=1,N
   70 IVX(I)=50.0*(VX(I)-VX(1))/DELTX+0.5
      NMAX=N*M
      DO 80 K=1,NMAX
      IF(VY(K).LE.REF)GO TO 80
      AMIN=VY(K)
      AMAX=VY(K)
      GO TO 100
   80 CONTINUE
      WRITE(IUERR, 90 )REF
   90 FORMAT(/' NO VALUE GREATER THAN',1PE12.4)
      GO TO 20
  100 DO 110 K=1,NMAX
      IF(VY(K).LE.REF)GO TO 110
      AMIN=AMIN1(AMIN,VY(K))
      AMAX=AMAX1(AMAX,VY(K))
  110 CONTINUE
      TY=YX
      IF(M.GT.1)TY=BLANK
      NORD=101
      ORD=100.
      NP=10
      IF(ISCALE.EQ.0)GO TO 230
      AMAX=ALOG10(AMAX)
      KMAX=AMAX
      IF(AMAX.LT.0.0) GO TO 120
      IF(AMAX-KMAX.NE.0.)KMAX=KMAX+1
  120 AMIN=ALOG10(AMIN)
      KMIN=AMIN
      IF(AMIN-KMIN.LT.0.)KMIN=KMIN-1
      IF(KMAX.EQ.KMIN)KMAX=KMAX+1
      NDEC=KMAX-KMIN
      IF(NDEC.LE.12) GO TO 140
      WRITE (IUERR, 130 )
  130 FORMAT(/' TOO MANY DECADES')
      GO TO 20
  140 NORD=(100/NDEC)*NDEC
      ORD=NORD
      NP=NORD/NDEC
      NORD=NORD+1
      DELTY=NDEC
      AMIN=KMIN
      DO 150 I=1,8
      FIP1=I+1
  150 ISL(I)=ORD*ALOG10(FIP1)/DELTY+0.5
      DO 160 I=1,105
      TIT(I)=BLK
  160 STIT(I)=BLK
      K=KMIN-1
      DO 200 I=1,102,NP
      K=K+1
      IF(K.GT.KMAX)GO TO 210
      L=I
      IK=K
      STIT(L)=DIGIT(3)
      STIT(L+1)=DIGIT(2)
      IF(K.EQ.KMAX)GO TO 180
      DO 170 J=1,7,2
      JJ=I+ISL(J)+1
  170 STIT(JJ)=DIGIT(J+3)
  180 IF(K.GE.0)GO TO 190
      L=L+1
      IK=-K
      TIT(L+1)=DIGIT(1)
  190 IF(IK.LE.9)GO TO 200
      KK=MOD(IK,10)
      IK=IK/10
      TIT(L+3)=DIGIT(KK+2)
  200 TIT(L+2)=DIGIT(IK+2)
  210 WRITE(IOUT, 220 )VX(1),DELTX,(TIT(I),I=1,105),(STIT(I),I=1,102)
     *,TY
  220 FORMAT(/16X,'  X=',1PE10.3,' +',E10.3,'*ABSCISSA'//
     *1X,10('.'),'Y'/' .',15X,105A1/' .',6X,' ',8X,102A1,4X,A4)
      GO TO 260
  230 DELTY=AMAX-AMIN
      WRITE(IOUT, 240 )VX(1),DELTX,AMIN,DELTY
  240 FORMAT(/16X,'  X=',1PE10.3,' +',E10.3,'*ABSCISSA',35X,'Y=',1PE10.3
     *,' +',E10.3,'*ORDINATE'/)
      WRITE(IOUT, 250 )(SCALE(I),I=1,11),TY
  250 FORMAT(1X,10('.'),'Y'/' .'/' .',6X,' ',1X,11F10.1,3X,A4)
  260 II=0
      K1=1
      DO 450 I=1,51
      SYM=BLK
      IF(I.LT.5)SYM=AXIS
      IF(I.EQ.5)SYM=SYMV
      IF(I.EQ.6)SYM=SYMX
      DO 270 J=1,101
  270 VECT(J)=BLK
      LUX=1
      IF(MOD(I-1,5).NE.0)GO TO 280
      LUX=0
      II=II+1
      X=SCALE(II)
  280 DO 300 KB=1,101
      IF(LUX.EQ.0.AND.KB.LE.NORD)VECT(KB)=DASH
      IF(MOD(KB-1,NP).NE.0)GO TO 300
      VECT(KB)=AXIS
      IF(ISCALE.EQ.0)GO TO 300
      IF((KB-1)/NP.EQ.NDEC)GO TO 310
      INC=1
      IF(NDEC.GT.2)INC=2
      DO 290 J=1,8,INC
      JJ=KB+ISL(J)
  290 VECT(JJ)=AXIS
  300 CONTINUE
  310 IF(IVX(K1).NE.I-1)GO TO 350
      KK=K1
      K1=K1+1
      IFLAG=1
      DO 330 J=1,M
      K=KK+(J-1)*N
      IF(VY(K).LE.REF.OR.KK.GT.N)GO TO 330
      IFLAG=0
      IF(DELTY.GT.0)GO TO 320
      VECT(1)=CHAR(M)
      GO TO 340
  320 VK=VY(K)
      IF(ISCALE.EQ.1)VK=ALOG10(VK)
      JJ=ORD*(VK-AMIN)/DELTY+0.5
      JJ=JJ+1
      VECT(JJ)=CHAR(J)
  330 CONTINUE
  340 IF(IFLAG.EQ.0) GO TO 390
  350 IF(LUX.EQ.1)GO TO 370
      WRITE(IOUT, 360 )SYM,X,(VECT(L),L=1,101)
  360 FORMAT(1X,A1,11X,F4.1,1X,101A1)
      GO TO 450
  370 WRITE(IOUT, 380 )SYM,(VECT(L),L=1,101)
  380 FORMAT(1X,A1,16X,101A1)
      GO TO 450
  390 IF(LUX.EQ.1)GO TO 420
      IF(M.EQ.1) GO TO 410
      WRITE(IOUT, 400 ) SYM,VX(KK),X,(VECT(L),L=1,101 )
  400 FORMAT(1X,A1,1X,1PE10.3,0PF4.1,1X,101A1,1X,1PE10.3)
      GO TO 450
  410 WRITE(IOUT, 400 ) SYM,VX(KK),X,(VECT(L),L=1,101 ),VY(KK)
      GO TO 450
  420 IF(M.EQ.1)GO TO 430
      WRITE(IOUT, 440 ) SYM,VX(KK),(VECT(L),L=1,101 )
      GO TO 450
  430 WRITE(IOUT, 440 ) SYM,VX(KK),(VECT(L),L=1,101 ),VY(KK)
  440 FORMAT(1X,A1,1X,1PE10.3,5X,101A1,1X,E10.3)
  450 CONTINUE
      WRITE(IOUT, 460 )
  460 FORMAT(//)
      RETURN
      END
C.......................................................................
C.......................................................................
      SUBROUTINE REVISE(IENTRY,ALB,TRANHY,TRANHE)
C
C     1. EDITION OF RESULTS IN TERMS OF CHANNELS AND CELLS
C     2. COMPUTATION OF SQUARES OF AVERAGES FOR ST.DEV. IN CHANNELS,CELL
C     3. REVISION OF THE HE CONCENTRATION AND ALBEDO GIVEN
C        AND COMPUTATION OF PUMPING REQUIREMENTS.
C
C----------------------------------(SEE SYMBOLS MEANING IN S.R. INPUT)
      INCLUDE 'pnimb'
      PARAMETER (MRG=MRGX ,MZN=MRG-2 ,MCH=41 ,MCC=MCCX, MWAC=13 )
      PARAMETER (MBS=MBSX ,MSD=MBS   ,MSC=2 )
      PARAMETER (MIO=3    ,MCP=6)
      PARAMETER (MEG=5    ,MIXS=10   ,MLEAK=9)
C---------------------------------------------------
C
      COMMON/IOFILE/IN,IOUT,IUERR,IARK,IPUNCH,IGMT,ITRMT,ITAPIO(2)
C
      PARAMETER (NDEBUG=17,MSPLIT=500,NBANK=25)
      PARAMETER (MDEBWR=30,MDEBPT=200)
      COMMON/CHISTO/KOSE,KOST,NHIST,NST,FNST,NSG,FNSG,
     * INIZ,ICORR,KINDPR,NEDIT,ISTHEL,IHOR,
     * DECIMA,PLIFE,WTHRES,TAGLIO,WCUT,NGEV,EGEV(MEG),TCUT,
     * IDEBIN,IDLOOP,IDEBUG,KODDBG,IHDBG,ICDBG,DEBUG(NDEBUG),
     * NDEBWR,NDEBPT,IDBHST(MDEBWR),
     * NSPLIT,MAXSON,MAXSOH,BANK(MSPLIT,NBANK),WPESO(MRG)
     *,IREAD,IWRITE,IBEAM,IONTOW,IDMC,IDMCO
C
      PARAMETER (MZSOUR=13, MSOUXY=14)
      COMMON/SOURCE/
     * HHESRC,SRECYC,SRECOM,WSOUR1,NSEGS,SOTEMP(MBS),STMOUT,TIMINF,
     * WSOSEG(MBS,MIO),NSEGSO,KORSEG(MBS),LAYSEG(MBS),YTMOUT,
     * X1SOUR(MBS),Y1SOUR(MBS),X2SOUR(MBS),Y2SOUR(MBS),ZSOURC(MCP),
     * FISOU(MBS),SFISOU(MBS),CFISOU(MBS),WDS(MBS,5),IZOENT,
     * NZSOUR,SREGZ(MZSOUR),DREGZ(MZSOUR),WSOIMP(MBS,MCP),
     * NSOUXY,TSOUXY(MSOUXY),WSOUXY(MSOUXY),ISOUXY(MSOUXY),
     * CSOUXY(8,MSOUXY),HSOUXY(MSOUXY),DSOUXY(MSOUXY),ITYSEG(MBS),
     * ICHTAR(MBS),ISCHAN,SOUNEW(MBS),QIMP(MBS,MCP),PUFIMP(MCP),
     * WREG(1),WSEF(1),KOISEF(1),KOSDE(1),NTARG,KO2DIR(MRG),KO3D2D(MRG)
     *,IRECO,IMOMSO,NOZPMP,MODEZR,SNVOL(MRG*MIO),SNV(MRG,MIO)
     *,PUFFRA(MBS,MCP),PUFFXY(MSOUXY),TPUFFH,TPUFFZ
C
      COMMON/CGEOMT/KREG,KREGM1,IR3DST,IR2DST,AREAD(MRG),
     * KONDC,KONDZ,I3D,KREG3D,LREG3D,LQUOTA,LDZETA,KSXY3D,NZETA
C
      COMMON/COMPOS/NION,NCOM,LIGHTW,RNLITE,EWLITE,
     * SYMB(MIO),PERC(MIO),DENSE(MRG),DENSI(MRG,MIO),EATMD,EATMR,
     * TEMPE(MRG),TEMPI(MRG),IBOUND(MRG),ALBEDO(MRG),LIWALL(MRG),COEFMX
     *,IEMIS(MRG),BEXPT(MRG),WEXPT(MRG,3),SHP,DRIFTV(MRG),DRIFTC(MRG,3)
     *,ISTARG(MRG),CHARGE(MCP),PROREQ(4),ALBATO(MRG),ALBENE(MRG),INDHEL
     *,NTSPUT,PSEMIP(MRG,2),IRTRIM(MCP,MCP),NFTRIM,LPVOID,DCUTCX,TCUTCX
     *,ICUTCX,INDEF,IYCHEM,EYCHEM,AYCHEM,NLEAK,XLEAK(4,MLEAK),ILEAK(MRG)
     *,NZREC,NUTRLZ(MCP),MIMP,IGOPT,PRORCL(MIO),UNDEF
     *,NZYIZ,CZYIZ(MCP),AYIZ(MCP),BYIZ(MCP),EYIZ(MCP),IYIZ(MCP),ALFCH7
     *,PARDIR(MRG,3),RECMAT(MIO,MIO,MRG)
C
      PARAMETER (NCT=24,MKES=4)
      COMMON/CTAB0/TABLE(NCT,11),IZLOZ(0:100)
      COMMON/CTABLE/SPUTAB(NCT,NCT)
     *,LABINT(MCP),LABEXT(NCT),IXS(MIXS),ITRIM
     *,NIONPM,MCX,MOLEC(MCP),IATOM(MCP),EXTSYM(MCP),QESP(NCT,NCT)
     *,EB(NCT),QCOEF(NCT),TLOTZ(NCT,26),CXRMAX(5,MRG),ESRMAX(MKES,MRG)
     *,TBELL(NCT,26),ITAGS(NCT,NCT,2)
C
      PARAMETER (MAXZET=12, MH=14, MZADJ=MZN*6, MEIBOR=MZADJ*2)
      PARAMETER (MMACRO=30+1)
      COMMON/SCORE/NAZONE,NDUM,NZONE,IZONA(MRG),VOLZ(MZN),IBOUNZ(MZN),
     * ELAST(MZN,MCP),FLUXZ(MZN,MAXZET),ESCAPE(MZN,MCP),REDP(MZN,MCP),
     * ABSOR(MZN,MCP),ELOST(MCP,MZN),WACOL(MCP,MZN,MWAC),
     * QF(MCH,MCC,8),QI(MCH,MCC,8),AF(MCH,MCC,8),AI(MCH,MCC,8),SAG(MCP),
     * FLUX(MZN,MCP),ENNE(MZN,MCP),EAVER(MZN,MCP,2),ENFLUX(MCP,MZN,MEG),
     * CEXED(MZN,MCP),DISSOC(MZN,MCP),TRAMAT(1,1,1),WBORN(MCP),
     * HISTOR(MCP),COLS,FUGA,ESCEN(MZN,MCP),REDFUE(MSD,MSC,MCP),
     * ZENTRY(MCP,MCH),WNP,WRS,COLW,TRUNC,NLATS,IS,IDELAT(MSD,3),
     * SCALAT(MSD,MSC),SPFUEL(MSD,MSC,MCP),QDEPL(MSD,MSC),SPIN(MCP),
     * ERECYC(MCP,MZN,2),PRECYC(MCP,MZN,3),NCHAN,NZCHAN(MCC),ICHAN(MZN),
     * MZCHAN,IZCHAN(MCH,MCC),SPAREA(MSD,MSC),DENSEZ(MZN),TEMPEZ(MZN),
     * YEARFR,TARLHY(MSD),TARLHE(MSD),REDHEL(MSD,MSC,MCP),PIONW,PINEFW,
     * TLONWI,PIONRE,PMOLR1,PMOLR2,AALB,QALB,AHENR,QHENR,AHETP,QHETP
     *,SPUHEL(MSD,MSC,MCP),ECHBEM(1,1),ELOBEM(1,1),VELOC(MZN,MCP,3)
     *,WPRSP,EPRSP,WTASP,ETASP,SIGMAN(MZN,6),WNBR(MZADJ,2)
     *,NEIBOR(MEIBOR),LOCNBR(MZN),NMACRO,IMACRO(MZN),COSNOR
     *,ISPOFF(MMACRO-1),IPVOID,TSUBD,ITAU,MSPOFF,YNOSP
C
      REAL*8 FLUXZ,ESCAPE,ELAST,REDP,ABSOR,WACOL,SPIN,
     * FLUX,ENNE,EAVER,ENFLUX,CEXED,WNBR,
     * DISSOC,TRAMAT,SAG,WBORN,HISTOR,COLS,FUGA,ESCEN,WNP,WRS,COLW,TRUNC
     *,SPFUEL,ERECYC,PRECYC,REDFUE,QDEPL,ZENTRY,SPUHEL,ECHBEM,ELOST
     *,ELOBEM,REDHEL,TARLHY,TARLHE,VELOC
     *,WPRSP,EPRSP,WTASP,ETASP,SIGMAN
C
      PARAMETER (MILLE=10000)
      COMMON/COMUNE/BUFFER(MILLE),IBUFER(MILLE)
C                           LOCAL VECTORS FOR ESCAPES(E=ESCAPE)
C                                                    (1=AVERAGE)
      DIMENSION TRANE1(MRG)
C
      DATA HELIUM /4HHE  /
C
C
      IF(NCHAN.EQ.0) GO TO 540
C                        ONLY IF THE SOURCE IS
C                        ON XY-SEGMENTS
      IF(NSOUXY.GT.0) GO TO 540
C                               16 JUNE 1987
C     IF IENTRY=0 THEN COMPUTE ONLY SQUARES OF AVERAGES,WITHOUT PRINT.
C (IN OTHER WORDS, SAME BEHAVIOUR AS WHEN NEDIT IS REACHED, BUT NO EDIT)
C     IBATCH=NSG=NST/10 AND NEDIT=K*NSG (K=1,2,...). SEE DEFINIT. OF NSG
C     OR NSB IN S.R. INPUT (COMMENTS ABOUT THE FIRST CARD)
C
C                                OTHERWISE:
C
C                  EDIT COMPUTED SOURCE TERMS - PART 1: FUEL
C                  =========================================
C                  IN TERMS OF CELLS & CHANNELS
C
      IF(IENTRY.EQ.0) GO TO 90
      WRITE(IOUT, 80 )
   80 FORMAT('1SOURCE TERMS FOR LINKAGE TO PLASMA CODE (PER SECOND AND U
     *NIT VOLUME)'/1X,68('=')/' PART 1: FUEL (ATOMS + MOLECULES)'/)
   90 CONTINUE
      FKOST=KOST
      FKOST1=FKOST/HHESRC
C               IN PREVIOUS (TO 16 JUNE) VERSION IT WAS ISAMP=KOST/NEDIT
      ISAMP=KOST/NSG
      FSAMP=ISAMP
C
      SUM0=0.0
      SUM1=0.0
      SUM2=0.0
      SUM3=0.0
      SUM4=0.0
      SUM5=0.0
      SUM6=0.0
C                     LOOP ON CHANNELS
      DO 170 I=1,NCHAN
C
      SUMC0=0.0
      SUMC1=0.0
      SUMC2=0.0
      SUMC3=0.0
      SUMC4=0.0
      SUMC5=0.0
      SUMC6=0.0
      SUMC7=0.0
      SUMC8=0.0
C
      IF(IENTRY.EQ.0) GO TO 110
      WRITE(IOUT, 100 )I
  100 FORMAT(/1X,'CHANNEL ',I3,' CELL    VOLUME    IONIZATIONS X-MOMENTU
     *M  Y-MOMENTUM  Z-MOMENTUM    ENERGY    EL.EN.LOSS  ATOM1 DENS.  MO
     *L.1 DENS.'/)
  110 CONTINUE
      JMAX=NZCHAN(I)
C                     LOOP ON CELLS OF A CHANNEL
      DO 160 J=1,JMAX
C                     FIND ZONE INDEX CORRESPONDING TO CELL
      IZO=IZCHAN(I,J)
C                     (CELL 1 CORRESPONDS TO THE ZONE WITH LOWEST INDEX)
      DO 130 L=IR3DST,KREG3D
      IF(IZONA(L).NE.IZO) GO TO 130
      TRAN1=0.0
      TRAN2=0.0
      TRAN3=0.0
      TRAN4=0.0
      TRAN5=0.0
      TRAN6=0.0
      TRAN7=0.0
      TRAN8=0.0
      TRAN9=0.0
      DO 120 K=1,NIONPM
C                               'HE  ' IS THE SYMBOL USED IN
C                                ARRAY DATA FOR BOTH HE++ AND HE+
      IF(EXTSYM(K).EQ.HELIUM) GO TO 120
      TRAN1=TRAN1+ABSOR(IZO,K)
      TRAN2=TRAN2+PRECYC(K,IZO,1)
      TRAN3=TRAN3+PRECYC(K,IZO,2)
      TRAN4=TRAN4+PRECYC(K,IZO,3)
      TRAN5=TRAN5+ERECYC(K,IZO,1)+ERECYC(K,IZO,2)
      TRAN6=TRAN6+ELOST(K,IZO)
C                                DENSITY OF FIRST ATOM
      IF(K.EQ.1) THEN
        TRAN7=TRAN7+ENNE(IZO,K)
      ENDIF
C                                DENSITY OF FIRST MOLECULE
      IF(K.EQ.NION+1) THEN
        TRAN8=TRAN8+ENNE(IZO,K)
      ENDIF
  120 CONTINUE
C                       INTEGRAL ON ALL CELL VOLUMES
      IF(IBOUNZ(IZO).EQ.0)
     &SUM0=SUM0+VOLZ(IZO)
      SUM1=SUM1+TRAN1
      SUM2=SUM2+TRAN2
      SUM3=SUM3+TRAN3
      SUM4=SUM4+TRAN4
      SUM5=SUM5+TRAN5
      SUM6=SUM6+TRAN6
C                       NORMALIZATION
      TRAN =FKOST1*VOLZ(IZO)
      TRAN1=TRAN1/TRAN
      TRAN2=TRAN2/TRAN
      TRAN3=TRAN3/TRAN
      TRAN4=TRAN4/TRAN
      TRAN5=TRAN5/TRAN
      TRAN6=TRAN6/TRAN
      TRAN7=TRAN7/TRAN*1.0217E-06
      TRAN8=TRAN8/TRAN*1.0217E-06
C
      IF(IBOUNZ(IZO).EQ.0)
     &SUMC0 = SUMC0 + VOLZ(IZO)
      SUMC1 = SUMC1 + ( TRAN1 * VOLZ(IZO) )
      SUMC2 = SUMC2 + ( TRAN2 * VOLZ(IZO) )
      SUMC3 = SUMC3 + ( TRAN3 * VOLZ(IZO) )
      SUMC4 = SUMC4 + ( TRAN4 * VOLZ(IZO) )
      SUMC5 = SUMC5 + ( TRAN5 * VOLZ(IZO) )
      SUMC6 = SUMC6 + ( TRAN6 * VOLZ(IZO) )
      SUMC7 = SUMC7 + ( TRAN7 * VOLZ(IZO) )
      SUMC8 = SUMC8 + ( TRAN8 * VOLZ(IZO) )
C                     SCORE SQUARES FOR LATER COMPUTATION OF STAND.DEV.
C                       FIRST ISOLATE CONTRIB. OF THE L-TH SAMPLE
C                       X(L)=L*M(L) - (L-1)*M(L-1) WITH M=MEAN
      TEMP=FSAMP*TRAN1-(FSAMP-1.)*AF(I,J,1)
      AF(I,J,1)=TRAN1
      QF(I,J,1)=QF(I,J,1)+TEMP**2
C
      TEMP=FSAMP*TRAN2-(FSAMP-1.)*AF(I,J,2)
      AF(I,J,2)=TRAN2
      QF(I,J,2)=QF(I,J,2)+TEMP**2
C
      TEMP=FSAMP*TRAN3-(FSAMP-1.)*AF(I,J,3)
      AF(I,J,3)=TRAN3
      QF(I,J,3)=QF(I,J,3)+TEMP**2
C
      TEMP=FSAMP*TRAN4-(FSAMP-1.)*AF(I,J,4)
      AF(I,J,4)=TRAN4
      QF(I,J,4)=QF(I,J,4)+TEMP**2
C
      TEMP=FSAMP*TRAN5-(FSAMP-1.)*AF(I,J,5)
      AF(I,J,5)=TRAN5
      QF(I,J,5)=QF(I,J,5)+TEMP**2
C
      TEMP=FSAMP*TRAN6-(FSAMP-1.)*AF(I,J,6)
      AF(I,J,6)=TRAN6
      QF(I,J,6)=QF(I,J,6)+TEMP**2
C
      TEMP=FSAMP*TRAN7-(FSAMP-1.)*AF(I,J,7)
      AF(I,J,7)=TRAN7
      QF(I,J,7)=QF(I,J,7)+TEMP**2
C
      TEMP=FSAMP*TRAN8-(FSAMP-1.)*AF(I,J,8)
      AF(I,J,8)=TRAN8
      QF(I,J,8)=QF(I,J,8)+TEMP**2
C
  130 CONTINUE
      IF(IENTRY.EQ.0) GO TO 150
      WRITE(IOUT, 140 )I,J,VOLZ(IZO),TRAN1,TRAN2,TRAN3,TRAN4,TRAN5,TRAN6
     *,TRAN7,TRAN8
  140 FORMAT(11X,I3,',',I2,1P,9E12.3)
  150 CONTINUE
  160 CONTINUE
      IF(IENTRY.EQ.0) GO TO 170
      WRITE(IOUT,185) SUMC0,
     &                SUMC1,SUMC2,SUMC3,SUMC4,SUMC5,SUMC6,SUMC7,SUMC8
  170 CONTINUE
C                       NORMALIZATION OF THE INTEGRAL
      SUM1=SUM1/FKOST1
      SUM2=SUM2/FKOST1
      SUM3=SUM3/FKOST1
      SUM4=SUM4/FKOST1
      SUM5=SUM5/FKOST1
      SUM6=SUM6/FKOST1
C
      IF(IENTRY.EQ.0) GO TO 190
      WRITE(IOUT, 180 ) SUM0,SUM1,SUM2,SUM3,SUM4,SUM5,SUM6
  180 FORMAT(//' INTEGRAL ON VOL.',1P,7E12.3)
  185 FORMAT(  '            TOTAL',1P,9E12.3)
  190 CONTINUE
C
C                         ESCAPES FOR PLASMA CODE (EXCLUDED HEAVY IMP.)
      IF(IENTRY.EQ.0) GO TO 265
      DO 200 L=IR3DST,KREG3D
      TRANE1(L)=0.0
  200 CONTINUE
C                         LOOP ON REGIONS
      WRITE (IOUT, 210 )
  210 FORMAT(//)
      DO 260 L=IR3DST,KREG3D
      IZO=IZONA(L)
      DO 230 K=1,NIONPM
      IF(EXTSYM(K).EQ.HELIUM) GO TO 230
C                   TEST ESCAPE (NOT IBOUND) TO INCL. ALBEDO REGIONS
      IF(ESCAPE(IZO,K).GT.0.0)
     *TRANE1(L)=TRANE1(L)+ESCAPE(IZO,K)
C                         FOR MOLECULES REPEAT THE SCORE (W*2)
      IF(ESCAPE(IZO,K).GT.0.0.AND.K.GT.NION)
     *TRANE1(L)=TRANE1(L)+ESCAPE(IZO,K)
  230 CONTINUE
      IF(TRANE1(L).EQ.0.0) GO TO 260
C                         NORMALISATION
      TRANE1(L)=TRANE1(L)/FKOST1
      WRITE(IOUT, 240 ) IZO,TRANE1(L)
  240 FORMAT(' FUEL ESCAPED FROM ZONE  ',I4,1PE12.3)
  250 CONTINUE
  260 CONTINUE
  265 CONTINUE
C
C                       COMPUTE ST.DEV. ONLY IF NEDIT REACHED(OR AT END)
C                       -------------- (I.E. ONLY IF IENTRY=1)
C
      IF(IENTRY.EQ.0) GO TO 320
      IF(ISAMP.LE.1) GO TO 320
      IF(NCHAN.GT.0.AND.KINDPR.GT.0)
     *WRITE (IOUT, 270 ) ISAMP,NSG
  270 FORMAT(///' STANDARD DEVIATIONS(%) OF THE ENTRIES IN PREVIOUS TABL
     *E COMPUTED FROM',I5,' BATCHES OF',I6,' HISTORIES'/)
C                     LOOP ON CHANNELS
      DO 310 I=1,NCHAN
      IF(NCHAN.GT.0.AND.KINDPR.GT.0)
     *WRITE (IOUT, 280 ) I
  280 FORMAT(/1X,'CHANNEL ',I2,'  CELL'/)
      JMAX=NZCHAN(I)
C                     LOOP ON CELLS OF A CHANNEL
      DO 300 J=1,JMAX
      TRAN1=QF(I,J,1)/FSAMP-AF(I,J,1)**2
      TRAN1=SQRT(TRAN1/(FSAMP-1.))
      IF(AF(I,J,1).NE.0.0)TRAN1=TRAN1*100./AF(I,J,1)
      TRAN1=ABS(TRAN1)
      IF(AF(I,J,1).EQ.0.0)TRAN1=0.0
C
      TRAN2=QF(I,J,2)/FSAMP-AF(I,J,2)**2
      TRAN2=SQRT(TRAN2/(FSAMP-1.))
      IF(AF(I,J,2).NE.0.0)TRAN2=TRAN2*100./AF(I,J,2)
      TRAN2=ABS(TRAN2)
      IF(AF(I,J,2).EQ.0.0)TRAN2=0.0
C
      TRAN3=QF(I,J,3)/FSAMP-AF(I,J,3)**2
      TRAN3=SQRT(TRAN3/(FSAMP-1.))
      IF(AF(I,J,3).NE.0.0)TRAN3=TRAN3*100./AF(I,J,3)
      TRAN3=ABS(TRAN3)
      IF(AF(I,J,3).EQ.0.0)TRAN3=0.0
C
      TRAN4=QF(I,J,4)/FSAMP-AF(I,J,4)**2
      TRAN4=SQRT(TRAN4/(FSAMP-1.))
      IF(AF(I,J,4).NE.0.0)TRAN4=TRAN4*100./AF(I,J,4)
      TRAN4=ABS(TRAN4)
      IF(AF(I,J,4).EQ.0.0)TRAN4=0.0
C
      TRAN5=QF(I,J,5)/FSAMP-AF(I,J,5)**2
      TRAN5=SQRT(TRAN5/(FSAMP-1.))
      IF(AF(I,J,5).NE.0.0)TRAN5=TRAN5*100./AF(I,J,5)
      TRAN5=ABS(TRAN5)
      IF(AF(I,J,5).EQ.0.0)TRAN5=0.0
C
      TRAN6=QF(I,J,6)/FSAMP-AF(I,J,6)**2
      TRAN6=SQRT(TRAN6/(FSAMP-1.))
      IF(AF(I,J,6).NE.0.0)TRAN6=TRAN6*100./AF(I,J,6)
      TRAN6=ABS(TRAN6)
      IF(AF(I,J,6).EQ.0.0)TRAN6=0.0
C
      TRAN7=QF(I,J,7)/FSAMP-AF(I,J,7)**2
      TRAN7=SQRT(TRAN7/(FSAMP-1.))
      IF(AF(I,J,7).NE.0.0)TRAN7=TRAN7*100./AF(I,J,7)
      TRAN7=ABS(TRAN7)
      IF(AF(I,J,7).EQ.0.0)TRAN7=0.0
C
      TRAN8=QF(I,J,8)/FSAMP-AF(I,J,8)**2
      TRAN8=SQRT(TRAN8/(FSAMP-1.))
      IF(AF(I,J,8).NE.0.0)TRAN8=TRAN8*100./AF(I,J,8)
      TRAN8=ABS(TRAN8)
      IF(AF(I,J,8).EQ.0.0)TRAN8=0.0
C
      IF(NCHAN.GT.0.AND.KINDPR.GT.0)
     *WRITE(IOUT, 290 )I,J,TRAN1,TRAN2,TRAN3,TRAN4,TRAN5,TRAN6,TRAN7,
     *                 TRAN8
  290 FORMAT(11X,I3,',',I2,10X,8F12.2)
  300 CONTINUE
  310 CONTINUE
  320 CONTINUE
C
C
C                  COMPUTED SOURCE TERMS - PART 2: IMPURITIES
C                  ==========================================
C                  IN TERMS OF CELLS & CHANNELS
C
      IF(IENTRY.EQ.0) GO TO 1340
      WRITE(IOUT, 1330 )
 1330 FORMAT('1SOURCE TERMS FOR LINKAGE TO PLASMA CODE (PER SECOND AND U
     *NIT VOLUME)'/1X,68('=')/' PART 2: IMPURITIES'/)
 1340 CONTINUE
      FKOST=KOST
      FKOST1=FKOST/HHESRC
C
      ISAMP=KOST/NSG
      FSAMP=ISAMP
C
      SUM0=0.0
      SUM1=0.0
      SUM2=0.0
      SUM3=0.0
      SUM4=0.0
      SUM5=0.0
      SUM6=0.0
C                     LOOP ON CHANNELS
      DO 1420 I=1,NCHAN
C
      SUMC0=0.0
      SUMC1=0.0
      SUMC2=0.0
      SUMC3=0.0
      SUMC4=0.0
      SUMC5=0.0
      SUMC6=0.0
      SUMC7=0.0
C
      IF(IENTRY.EQ.0) GO TO 1360
      WRITE(IOUT, 1350 )I
 1350 FORMAT(/1X,'CHANNEL ',I3,' CELL    VOLUME    IONIZATIONS X-MOMENTU
     *M  Y-MOMENTUM  Z-MOMENTUM    ENERGY    EL.EN.LOSS    Z DENS.'/)
 1360 CONTINUE
      JMAX=NZCHAN(I)
C                     LOOP ON CELLS OF A CHANNEL
      DO 1410 J=1,JMAX
C                     FIND ZONE INDEX CORRESPONDING TO CELL
      IZO=IZCHAN(I,J)
C                     (CELL 1 CORRESPONDS TO THE ZONE WITH LOWEST INDEX)
      DO 1380 L=IR3DST,KREG3D
      IF(IZONA(L).NE.IZO) GO TO 1380
      TRAN1=0.0
      TRAN2=0.0
      TRAN3=0.0
      TRAN4=0.0
      TRAN5=0.0
      TRAN6=0.0
      TRAN7=0.0
      DO 1370 K=NIONPM+1,NCOM
      TRAN1=TRAN1+ABSOR(IZO,K)
      TRAN2=TRAN2+PRECYC(K,IZO,1)
      TRAN3=TRAN3+PRECYC(K,IZO,2)
      TRAN4=TRAN4+PRECYC(K,IZO,3)
      TRAN5=TRAN5+ERECYC(K,IZO,1)+ERECYC(K,IZO,2)
      TRAN6=TRAN6+ELOST(K,IZO)
C                                DENSITY OF Z
      TRAN7=TRAN7+ENNE(IZO,K)
 1370 CONTINUE
C                       INTEGRAL ON ALL CELL VOLUMES
      IF(IBOUNZ(IZO).EQ.0)
     &SUM0=SUM0+VOLZ(IZO)
      SUM1=SUM1+TRAN1
      SUM2=SUM2+TRAN2
      SUM3=SUM3+TRAN3
      SUM4=SUM4+TRAN4
      SUM5=SUM5+TRAN5
      SUM6=SUM6+TRAN6
C                       NORMALIZATION
      TRAN =FKOST1*VOLZ(IZO)
      TRAN1=TRAN1/TRAN
      TRAN2=TRAN2/TRAN
      TRAN3=TRAN3/TRAN
      TRAN4=TRAN4/TRAN
      TRAN5=TRAN5/TRAN
      TRAN6=TRAN6/TRAN
      TRAN7=TRAN7/TRAN*1.0217E-06
C
      IF(IBOUNZ(IZO).EQ.0)
     &SUMC0 = SUMC0 + VOLZ(IZO)
      SUMC1 = SUMC1 + ( TRAN1 * VOLZ(IZO) )
      SUMC2 = SUMC2 + ( TRAN2 * VOLZ(IZO) )
      SUMC3 = SUMC3 + ( TRAN3 * VOLZ(IZO) )
      SUMC4 = SUMC4 + ( TRAN4 * VOLZ(IZO) )
      SUMC5 = SUMC5 + ( TRAN5 * VOLZ(IZO) )
      SUMC6 = SUMC6 + ( TRAN6 * VOLZ(IZO) )
      SUMC7 = SUMC7 + ( TRAN7 * VOLZ(IZO) )
C                       STAND.DEV.
C                       FIRST ISOLATE CONTRIB. OF THE L-TH SAMPLE
C                       X(L)=L*M(L) - (L-1)*M(L-1) WITH M=MEAN
      TEMP=FSAMP*TRAN1-(FSAMP-1.)*AI(I,J,1)
      AI(I,J,1)=TRAN1
      QI(I,J,1)=QI(I,J,1)+TEMP**2
C
      TEMP=FSAMP*TRAN2-(FSAMP-1.)*AI(I,J,2)
      AI(I,J,2)=TRAN2
      QI(I,J,2)=QI(I,J,2)+TEMP**2
C
      TEMP=FSAMP*TRAN3-(FSAMP-1.)*AI(I,J,3)
      AI(I,J,3)=TRAN3
      QI(I,J,3)=QI(I,J,3)+TEMP**2
C
      TEMP=FSAMP*TRAN4-(FSAMP-1.)*AI(I,J,4)
      AI(I,J,4)=TRAN4
      QI(I,J,4)=QI(I,J,4)+TEMP**2
C
      TEMP=FSAMP*TRAN5-(FSAMP-1.)*AI(I,J,5)
      AI(I,J,5)=TRAN5
      QI(I,J,5)=QI(I,J,5)+TEMP**2
C
      TEMP=FSAMP*TRAN6-(FSAMP-1.)*AI(I,J,6)
      AI(I,J,6)=TRAN6
      QI(I,J,6)=QI(I,J,6)+TEMP**2
C
      TEMP=FSAMP*TRAN7-(FSAMP-1.)*AI(I,J,7)
      AI(I,J,7)=TRAN7
      QI(I,J,7)=QI(I,J,7)+TEMP**2
C
 1380 CONTINUE
      IF(IENTRY.EQ.0) GO TO 1400
      WRITE(IOUT, 390 )I,J,VOLZ(IZO),TRAN1,TRAN2,TRAN3,TRAN4,TRAN5,TRAN6
     *                ,TRAN7
 1400 CONTINUE
 1410 CONTINUE
      IF(IENTRY.EQ.0) GO TO 1420
      WRITE(IOUT,185) SUMC0,
     &                SUMC1,SUMC2,SUMC3,SUMC4,SUMC5,SUMC6,SUMC7
 1420 CONTINUE
C                       NORMALIZATION OF THE INTEGRAL
      IF(IENTRY.EQ.0) GO TO 1440
      SUM1=SUM1/FKOST1
      SUM2=SUM2/FKOST1
      SUM3=SUM3/FKOST1
      SUM4=SUM4/FKOST1
      SUM5=SUM5/FKOST1
      SUM6=SUM6/FKOST1
C
      WRITE(IOUT, 430 ) SUM0,SUM1,SUM2,SUM3,SUM4,SUM5,SUM6
 1440 CONTINUE
C
C                         ESCAPES FOR PLASMA CODE
C
      IF(IENTRY.EQ.0) GO TO 1515
      DO 1450 L=IR3DST,KREG3D
      TRANE1(L)=0.0
 1450 CONTINUE
C                         LOOP ON REGIONS
      WRITE (IOUT, 460 )
 1470 CONTINUE
      DO 1510 L=IR3DST,KREG3D
      IZO=IZONA(L)
      DO 1480 K=NIONPM+1,NCOM
C                   TEST ESCAPE (NOT IBOUND) TO INCL. ALBEDO REGIONS
      IF(ESCAPE(IZO,K).GT.0.0)
     *TRANE1(L)=TRANE1(L)+ESCAPE(IZO,K)
 1480 CONTINUE
      IF(TRANE1(L).EQ.0.0) GO TO 1510
C                         NORMALISATION
      TRANE1(L)=TRANE1(L)/FKOST1
      WRITE(IOUT, 1490 ) IZO,TRANE1(L)
 1490 FORMAT(' IMPURITIES ESCAPED FROM ZONE ',I4,1PE12.3)
 1510 CONTINUE
 1515 CONTINUE
C
C                       COMPUTE ST.DEV. ONLY IF NEDIT REACHED(OR AT END)
C                       -------------- (I.E. ONLY IF IENTRY=1)
C
      IF(KINDPR.EQ.0) GO TO 1540
      IF(IENTRY.EQ.0) GO TO 1540
      IF(ISAMP.LE.1) GO TO 1540
      WRITE (IOUT, 518 ) ISAMP,NSG
C                     LOOP ON CHANNELS
      DO 1530 I=1,NCHAN
      WRITE (IOUT, 280 ) I
      JMAX=NZCHAN(I)
C                     LOOP ON CELLS OF A CHANNEL
      DO 1520 J=1,JMAX
      TRAN1=QI(I,J,1)/FSAMP-AI(I,J,1)**2
      TRAN1=SQRT(TRAN1/(FSAMP-1.))
      IF(AI(I,J,1).NE.0.0)TRAN1=TRAN1*100./AI(I,J,1)
      TRAN1=ABS(TRAN1)
      IF(AI(I,J,1).EQ.0.0)TRAN1=0.0
C
      TRAN2=QI(I,J,2)/FSAMP-AI(I,J,2)**2
      TRAN2=SQRT(TRAN2/(FSAMP-1.))
      IF(AI(I,J,2).NE.0.0)TRAN2=TRAN2*100./AI(I,J,2)
      TRAN2=ABS(TRAN2)
      IF(AI(I,J,2).EQ.0.0)TRAN2=0.0
C
      TRAN3=QI(I,J,3)/FSAMP-AI(I,J,3)**2
      TRAN3=SQRT(TRAN3/(FSAMP-1.))
      IF(AI(I,J,3).NE.0.0)TRAN3=TRAN3*100./AI(I,J,3)
      TRAN3=ABS(TRAN3)
      IF(AI(I,J,3).EQ.0.0)TRAN3=0.0
C
      TRAN4=QI(I,J,4)/FSAMP-AI(I,J,4)**2
      TRAN4=SQRT(TRAN4/(FSAMP-1.))
      IF(AI(I,J,4).NE.0.0)TRAN4=TRAN4*100./AI(I,J,4)
      TRAN4=ABS(TRAN4)
      IF(AI(I,J,4).EQ.0.0)TRAN4=0.0
C
      TRAN5=QI(I,J,5)/FSAMP-AI(I,J,5)**2
      TRAN5=SQRT(TRAN5/(FSAMP-1.))
      IF(AI(I,J,5).NE.0.0)TRAN5=TRAN5*100./AI(I,J,5)
      TRAN5=ABS(TRAN5)
      IF(AI(I,J,5).EQ.0.0)TRAN5=0.0
C
      TRAN6=QI(I,J,6)/FSAMP-AI(I,J,6)**2
      TRAN6=SQRT(TRAN6/(FSAMP-1.))
      IF(AI(I,J,6).NE.0.0)TRAN6=TRAN6*100./AI(I,J,6)
      TRAN6=ABS(TRAN6)
      IF(AI(I,J,6).EQ.0.0)TRAN6=0.0
C
      TRAN7=QI(I,J,7)/FSAMP-AI(I,J,7)**2
      TRAN7=SQRT(TRAN7/(FSAMP-1.))
      IF(AI(I,J,7).NE.0.0)TRAN7=TRAN7*100./AI(I,J,7)
      TRAN7=ABS(TRAN7)
      IF(AI(I,J,7).EQ.0.0)TRAN7=0.0
C
      WRITE(IOUT, 519 )I,J,TRAN1,TRAN2,TRAN3,TRAN4,TRAN5,TRAN6,TRAN7
 1520 CONTINUE
 1530 CONTINUE
 1540 CONTINUE
C
C
C                  COMPUTED SOURCE TERMS - PART 3: HELIUM
C                  ======================================
C                  IN TERMS OF CELLS & CHANNELS
C
      IF(INDHEL.EQ.0) GO TO 540
      IF(IENTRY.EQ.0) GO TO 340
      WRITE(IOUT, 330 )
  330 FORMAT('1SOURCE TERMS FOR LINKAGE TO PLASMA CODE (PER SECOND AND U
     *NIT VOLUME)'/1X,68('=')/' PART 3: HELIUM'/)
  340 CONTINUE
      FKOST=KOST
      FKOST1=FKOST/HHESRC
C
      ISAMP=KOST/NSG
      FSAMP=ISAMP
C
      SUM0=0.0
      SUM1=0.0
      SUM2=0.0
      SUM3=0.0
      SUM4=0.0
      SUM5=0.0
      SUM6=0.0
C                     LOOP ON CHANNELS
      DO 420 I=1,NCHAN
C
      SUMC0=0.0
      SUMC1=0.0
      SUMC2=0.0
      SUMC3=0.0
      SUMC4=0.0
      SUMC5=0.0
      SUMC6=0.0
      SUMC7=0.0
C
      IF(IENTRY.EQ.0) GO TO 360
      WRITE(IOUT, 350 )I
  350 FORMAT(/1X,'CHANNEL ',I3,' CELL    VOLUME    IONIZATIONS X-MOMENTU
     *M  Y-MOMENTUM  Z-MOMENTUM    ENERGY    EL.EN.LOSS   HE DENS.'/)
  360 CONTINUE
      JMAX=NZCHAN(I)
C                     LOOP ON CELLS OF A CHANNEL
      DO 410 J=1,JMAX
C                     FIND ZONE INDEX CORRESPONDING TO CELL
      IZO=IZCHAN(I,J)
C                     (CELL 1 CORRESPONDS TO THE ZONE WITH LOWEST INDEX)
      DO 380 L=IR3DST,KREG3D
      IF(IZONA(L).NE.IZO) GO TO 380
      TRAN1=0.0
      TRAN2=0.0
      TRAN3=0.0
      TRAN4=0.0
      TRAN5=0.0
      TRAN6=0.0
      TRAN7=0.0
      DO 370 K=1,NION
C                               'HE  ' IS THE SYMBOL USED IN
C                                ARRAY DATA FOR BOTH HE++ AND HE+
      IF(EXTSYM(K).NE.HELIUM) GO TO 370
      TRAN1=TRAN1+ABSOR(IZO,K)
      TRAN2=TRAN2+PRECYC(K,IZO,1)
      TRAN3=TRAN3+PRECYC(K,IZO,2)
      TRAN4=TRAN4+PRECYC(K,IZO,3)
      TRAN5=TRAN5+ERECYC(K,IZO,1)+ERECYC(K,IZO,2)
      TRAN6=TRAN6+ELOST(K,IZO)
C                                DENSITY OF HELIUM
      TRAN7=TRAN7+ENNE(IZO,K)
  370 CONTINUE
C                       INTEGRAL ON ALL CELL VOLUMES
      IF(IBOUNZ(IZO).EQ.0)
     &SUM0=SUM0+VOLZ(IZO)
      SUM1=SUM1+TRAN1
      SUM2=SUM2+TRAN2
      SUM3=SUM3+TRAN3
      SUM4=SUM4+TRAN4
      SUM5=SUM5+TRAN5
      SUM6=SUM6+TRAN6
C                       NORMALIZATION
      TRAN =FKOST1*VOLZ(IZO)
      TRAN1=TRAN1/TRAN
      TRAN2=TRAN2/TRAN
      TRAN3=TRAN3/TRAN
      TRAN4=TRAN4/TRAN
      TRAN5=TRAN5/TRAN
      TRAN6=TRAN6/TRAN
      TRAN7=TRAN7/TRAN*1.0217E-06
C
      IF(IBOUNZ(IZO).EQ.0)
     &SUMC0 = SUMC0 + VOLZ(IZO)
      SUMC1 = SUMC1 + ( TRAN1 * VOLZ(IZO) )
      SUMC2 = SUMC2 + ( TRAN2 * VOLZ(IZO) )
      SUMC3 = SUMC3 + ( TRAN3 * VOLZ(IZO) )
      SUMC4 = SUMC4 + ( TRAN4 * VOLZ(IZO) )
      SUMC5 = SUMC5 + ( TRAN5 * VOLZ(IZO) )
      SUMC6 = SUMC6 + ( TRAN6 * VOLZ(IZO) )
      SUMC7 = SUMC7 + ( TRAN7 * VOLZ(IZO) )
C                       STAND.DEV.
C                       FIRST ISOLATE CONTRIB. OF THE L-TH SAMPLE
C                       X(L)=L*M(L) - (L-1)*M(L-1) WITH M=MEAN
      TEMP=FSAMP*TRAN1-(FSAMP-1.)*AI(I,J,1)
      AI(I,J,1)=TRAN1
      QI(I,J,1)=QI(I,J,1)+TEMP**2
C
      TEMP=FSAMP*TRAN2-(FSAMP-1.)*AI(I,J,2)
      AI(I,J,2)=TRAN2
      QI(I,J,2)=QI(I,J,2)+TEMP**2
C
      TEMP=FSAMP*TRAN3-(FSAMP-1.)*AI(I,J,3)
      AI(I,J,3)=TRAN3
      QI(I,J,3)=QI(I,J,3)+TEMP**2
C
      TEMP=FSAMP*TRAN4-(FSAMP-1.)*AI(I,J,4)
      AI(I,J,4)=TRAN4
      QI(I,J,4)=QI(I,J,4)+TEMP**2
C
      TEMP=FSAMP*TRAN5-(FSAMP-1.)*AI(I,J,5)
      AI(I,J,5)=TRAN5
      QI(I,J,5)=QI(I,J,5)+TEMP**2
C
      TEMP=FSAMP*TRAN6-(FSAMP-1.)*AI(I,J,6)
      AI(I,J,6)=TRAN6
      QI(I,J,6)=QI(I,J,6)+TEMP**2
C
      TEMP=FSAMP*TRAN7-(FSAMP-1.)*AI(I,J,7)
      AI(I,J,7)=TRAN7
      QI(I,J,7)=QI(I,J,7)+TEMP**2
C
  380 CONTINUE
      IF(IENTRY.EQ.0) GO TO 400
      WRITE(IOUT, 390 )I,J,VOLZ(IZO),TRAN1,TRAN2,TRAN3,TRAN4,TRAN5,TRAN6
     *                ,TRAN7
  390 FORMAT(11X,I3,',',I2,1P,8E12.3)
  400 CONTINUE
  410 CONTINUE
      IF(IENTRY.EQ.0) GO TO 420
      WRITE(IOUT,185) SUMC0,SUMC1,SUMC2,SUMC3,SUMC4,SUMC5,SUMC6,SUMC7
  420 CONTINUE
C                       NORMALIZATION OF THE INTEGRAL
      IF(IENTRY.EQ.0) GO TO 440
      SUM1=SUM1/FKOST1
      SUM2=SUM2/FKOST1
      SUM3=SUM3/FKOST1
      SUM4=SUM4/FKOST1
      SUM5=SUM5/FKOST1
      SUM6=SUM6/FKOST1
C
      WRITE(IOUT, 430 ) SUM0,SUM1,SUM2,SUM3,SUM4,SUM5,SUM6
  430 FORMAT(//' INTEGRAL ON VOL.',1P,7E12.3)
  440 CONTINUE
C
C                         ESCAPES FOR PLASMA CODE (EXCLUDED HEAVY IMP.)
C
      IF(IENTRY.EQ.0) GO TO 515
      DO 450 L=IR3DST,KREG3D
      TRANE1(L)=0.0
  450 CONTINUE
C                         LOOP ON REGIONS
      WRITE (IOUT, 460 )
  460 FORMAT(//)
  470 CONTINUE
      DO 510 L=IR3DST,KREG3D
      IZO=IZONA(L)
      DO 480 K=1,NION
      IF(EXTSYM(K).NE.HELIUM) GO TO 480
C                   TEST ESCAPE (NOT IBOUND) TO INCL. ALBEDO REGIONS
      IF(ESCAPE(IZO,K).GT.0.0)
     *TRANE1(L)=TRANE1(L)+ESCAPE(IZO,K)
  480 CONTINUE
      IF(TRANE1(L).EQ.0.0) GO TO 510
C                         NORMALISATION
      TRANE1(L)=TRANE1(L)/FKOST1
      WRITE(IOUT, 490 ) IZO,TRANE1(L)
  490 FORMAT(' HELIUM ESCAPED FROM ZONE ',I4,1PE12.3)
  510 CONTINUE
  515 CONTINUE
C
C                       COMPUTE ST.DEV. ONLY IF NEDIT REACHED(OR AT END)
C                       -------------- (I.E. ONLY IF IENTRY=1)
C
      IF(KINDPR.EQ.0) GO TO 540
      IF(IENTRY.EQ.0) GO TO 540
      IF(ISAMP.LE.1) GO TO 540
      WRITE (IOUT, 518 ) ISAMP,NSG
  518 FORMAT(///' STANDARD DEVIATIONS(%) OF THE ENTRIES IN PREVIOUS TABL
     *E COMPUTED FROM',I5,' BATCHES OF',I6,' HISTORIES'/)
C                     LOOP ON CHANNELS
      DO 530 I=1,NCHAN
      WRITE (IOUT, 280 ) I
      JMAX=NZCHAN(I)
C                     LOOP ON CELLS OF A CHANNEL
      DO 520 J=1,JMAX
      TRAN1=QI(I,J,1)/FSAMP-AI(I,J,1)**2
      TRAN1=SQRT(TRAN1/(FSAMP-1.))
      IF(AI(I,J,1).NE.0.0)TRAN1=TRAN1*100./AI(I,J,1)
      TRAN1=ABS(TRAN1)
      IF(AI(I,J,1).EQ.0.0)TRAN1=0.0
C
      TRAN2=QI(I,J,2)/FSAMP-AI(I,J,2)**2
      TRAN2=SQRT(TRAN2/(FSAMP-1.))
      IF(AI(I,J,2).NE.0.0)TRAN2=TRAN2*100./AI(I,J,2)
      TRAN2=ABS(TRAN2)
      IF(AI(I,J,2).EQ.0.0)TRAN2=0.0
C
      TRAN3=QI(I,J,3)/FSAMP-AI(I,J,3)**2
      TRAN3=SQRT(TRAN3/(FSAMP-1.))
      IF(AI(I,J,3).NE.0.0)TRAN3=TRAN3*100./AI(I,J,3)
      TRAN3=ABS(TRAN3)
      IF(AI(I,J,3).EQ.0.0)TRAN3=0.0
C
      TRAN4=QI(I,J,4)/FSAMP-AI(I,J,4)**2
      TRAN4=SQRT(TRAN4/(FSAMP-1.))
      IF(AI(I,J,4).NE.0.0)TRAN4=TRAN4*100./AI(I,J,4)
      TRAN4=ABS(TRAN4)
      IF(AI(I,J,4).EQ.0.0)TRAN4=0.0
C
      TRAN5=QI(I,J,5)/FSAMP-AI(I,J,5)**2
      TRAN5=SQRT(TRAN5/(FSAMP-1.))
      IF(AI(I,J,5).NE.0.0)TRAN5=TRAN5*100./AI(I,J,5)
      TRAN5=ABS(TRAN5)
      IF(AI(I,J,5).EQ.0.0)TRAN5=0.0
C
      TRAN6=QI(I,J,6)/FSAMP-AI(I,J,6)**2
      TRAN6=SQRT(TRAN6/(FSAMP-1.))
      IF(AI(I,J,6).NE.0.0)TRAN6=TRAN6*100./AI(I,J,6)
      TRAN6=ABS(TRAN6)
      IF(AI(I,J,6).EQ.0.0)TRAN6=0.0
C
      TRAN7=QI(I,J,7)/FSAMP-AI(I,J,7)**2
      TRAN7=SQRT(TRAN7/(FSAMP-1.))
      IF(AI(I,J,7).NE.0.0)TRAN7=TRAN7*100./AI(I,J,7)
      TRAN7=ABS(TRAN7)
      IF(AI(I,J,7).EQ.0.0)TRAN7=0.0
C
      WRITE(IOUT, 519 )I,J,TRAN1,TRAN2,TRAN3,TRAN4,TRAN5,TRAN6,TRAN7
  519 FORMAT(11X,I3,',',I2,10X,7F12.2)
  520 CONTINUE
  530 CONTINUE
C
C               PUMPING REQUIREMENTS AND OTHER REVISIONS
C               ========================================
C
  540 CONTINUE
C
C
      IF(PROREQ(1).EQ.0.0) GO TO 770
      IF(IENTRY.EQ.0) GO TO 560
      WRITE(IOUT, 550 )(PROREQ(I),I=1,3)
  550 FORMAT('1PUMPING REQUIREMENTS'/1X,20('=')//
     * ' PROJECT REQUIREMENTS AND DATA'/1X,29('-')/
     * '   1. HELIUM FLOW TO THE PUMP PIPE ',1PE12.5,' ATOMS/SEC'/
     * '   2. CONCENTRATION OF HELIUM TO THE PUMP PIPE ',E12.5 /
     * '   3. TOTAL PUMPING AREA ',E12.5,' M2'//)
  560 CONTINUE
C                            ISOLATE LAST CONTRIBUTION AND SCORE SQUARE
      IF(TRANHE.NE.0.0) GO TO 562
      GO TO 564
  562 TEMP= FSAMP*TRANHE-(FSAMP-1.)*AHETP
      AHETP=TRANHE
      QHETP=QHETP+TEMP**2
  564 IF(IENTRY.EQ.0) GO TO 580
      TEMP1=QHETP/FSAMP-TRANHE**2
      IF(TEMP1.GE.0.0) GO TO 566
      TEMP1=0.0
      GO TO 568
  566 IF(FSAMP.NE.1.0)TEMP1=SQRT(TEMP1/(FSAMP-1.))
      IF(FSAMP.EQ.1.0)TEMP1=0.0
  568 WRITE(IOUT, 570 )TRANHE,TEMP1
  570 FORMAT(' COMPUTED QUANTITIES'/1X,19('-')/
     *'   HELIUM FLOW TO THE PUMP PIPE ',1PE12.5,' (+-',E12.5,') ATOMS/S
     *EC')
  580 CONTINUE
C                              DIAGNOSTICS ONLY AT THE END
      IF(KOST.NE.NST) GO TO 640
C
C                     VECTOR PERC(I) HAS BEEN NORMALIZED IN INPUT
      IF(TRANHE.GT.0.) GO TO 610
      WRITE(IOUT, 590 )
  590 FORMAT(/' ********  SORRY, NO HELIUM PARTICLE HAS REACHED THE PUMP
     * PIPE. UNABLE TO COMPUTE PUMPING REQUIREMENTS'/
     * ' CHECK REGION INDEX OF THE PUMP PIPE OR ENHANCE STATISTICS.')
      GO TO 770
  610 IF(TRANHY.GT.0.) GO TO 640
      WRITE(IOUT, 620 )
  620 FORMAT(/' ********  SORRY, NO FUEL PARTICLE HAS REACHED THE PUMP P
     *IPE. UNABLE TO COMPUTE PUMPING REQUIREMENTS'/
     * ' CHECK REGION INDEX OF THE PUMP PIPE OR IMPROVE STATISTICS.')
      GO TO 770
C
  640 TRAN=0.0
      DO 660 I=1,NION
C                                     'HE  ' IS THE SYMBOL USED IN
C                                     ARRAY DATA FOR BOTH HE++ AND HE+
      IF(EXTSYM(I).EQ.HELIUM) GO TO 650
      TRAN=TRAN+PERC(I)
      GO TO 660
  650 TRAN2=PERC(I)
  660 CONTINUE
C                   OLD HE PROPORTION (I.E.RATIO HE/H)
      TRAN3=TRAN2/TRAN
C                   HE PROPORTION(FOUND) GOING TO THE PUMP
      TRAN1=0.0
      TRAN5=0.0
      IF(TRANHY.NE.0.0) TRAN1=TRANHE/TRANHY
      IF(TRANHE+TRANHY.NE.0.0) TRAN5=TRANHE/(TRANHE+TRANHY)
      IF(IENTRY.EQ.0) GO TO 680
      WRITE(IOUT, 670 )TRAN5
  670 FORMAT('   CONCENTRATION OF HELIUM TO THE PUMP PIPE',1PE12.5)
  680 CONTINUE
C                            HE ENRICHMENT
      TRAN= TRAN1/TRAN3
C                            ISOLATE LAST CONTRIBUTION AND SCORE SQUARE
      IF(TRAN.NE.0.0) GO TO 682
      GO TO 684
  682 TEMP= FSAMP*TRAN-(FSAMP-1.)*AHENR
      AHENR=TRAN
      QHENR=QHENR+TEMP**2
  684 IF(IENTRY.EQ.0) GO TO 700
      TEMP1=QHENR/FSAMP-TRAN**2
      IF(TEMP1.GE.0.0) GO TO 686
      TEMP1=0.0
      GO TO 688
  686 IF(FSAMP.NE.1.0)TEMP1=SQRT(TEMP1/(FSAMP-1.))
      IF(FSAMP.EQ.1.0)TEMP1=0.0
  688 WRITE(IOUT, 690 ) TRAN,TEMP1
  690 FORMAT('   HELIUM ENRICHMENT IN EXHAUST ',1PE12.5,' (+-',E12.5,')
     *')
  700 CONTINUE
C
      IF(IENTRY.EQ.0) GO TO 720
      WRITE(IOUT, 710 )
  710 FORMAT(//' DATA REVISION' / 1X,13('-'))
  720 CONTINUE
C                   SCALING OF HELIUM FLOW TO THE DOWNPIPE
      TRAN4=0.0
      IF(TRAN5.NE.0.0) TRAN4=TRANHE*PROREQ(2)/TRAN5
C                   ALB.TO PUMP REQUIRED HE AT REQUIRED CONCENTRATION
      TRAN=0.0
      IF(TRAN4.NE.0.0) TRAN=1.0-(1.0-ALB)*PROREQ(1)/TRAN4
C                            ISOLATE LAST CONTRIBUTION AND SCORE SQUARE
      IF(TRAN.NE.0.0) GO TO 722
      GO TO 724
  722 TEMP= FSAMP*TRAN-(FSAMP-1.)*AALB
      AALB=TRAN
      QALB=QALB+TEMP**2
  724 IF(IENTRY.EQ.0) GO TO 740
      TEMP1=QALB/FSAMP-TRAN**2
      IF(TEMP1.GE.0.0) GO TO 726
      TEMP1=0.0
      GO TO 728
  726 IF(FSAMP.NE.1.0)TEMP1=SQRT(TEMP1/(FSAMP-1.))
      IF(FSAMP.EQ.1.0)TEMP1=0.0
  728 WRITE(IOUT, 730 )TRAN,TEMP1
  730 FORMAT('   ALBEDO SHOULD BE ',1PE12.5,' (+-',E12.5,')')
  740 CONTINUE
C                   SCALING OF HELIUM CONCENTRATION TO THE TARGET
      TRAN=0.0
      IF(TRAN5.NE.0.0) TRAN=PROREQ(2)*TRAN2/TRAN5
      IF(IENTRY.EQ.0) GO TO 760
      WRITE(IOUT, 750 ) TRAN
  750 FORMAT('   HELIUM CONCENTRATION IN PLASMA SHOULD BE ',1PE12.5)
  760 CONTINUE
CC            VACUUM PHYSICS TEXTBOOKS DEFINE
CC            1M**2 APERTURE,ALBEDO=0.0,AS A PUMPING SPEED 315M**3/S
CC    TRAN=PROREQ(3)*315.0*(1.0-ALB) ? AALB NOW?
CC    IF(IENTRY.EQ.0) GO TO 561
CC    WRITE(IOUT, 560 )TRAN
CC560 FORMAT(// ' PUMPING SPEED ',1PE12.5,' M3/SEC' /1X,13('-'))
CC561 CONTINUE
  770 RETURN
      END
C.......................................................................
C.......................................................................
      FUNCTION ARCSIN(X)
      ARCSIN=ASIN(X)
      RETURN
      END
C.......................................................................
C.......................................................................
      SUBROUTINE NIMBXS( SLOTZ , SBELL )
C
C                   NIMBUS CROSS SECTIONS FOR NEUTRALS
C                   ==================================
C
      COMMON/IOFILE/IN,IOUT,IUERR,IARK,IPUNCH,IGMT,ITRMT,ITAPIO(2)
C
      REAL*8 XTFCT,RM
C
      EXTERNAL XTFCT
C
      COMMON/DQHCOM/IDQH,KES,AR,TS,C1,C2,C3,C4
C
      COMMON/CHXHP/ ICXTYP
C
      PARAMETER (MILLE=10000)
      COMMON/COMUNE/BUFFER(MILLE),IBUFER(MILLE)
C
      PARAMETER (NCT=24,MKES=4)
      COMMON/CTAB0/TABLE(NCT,11),IZLOZ(0:100)
C
      PARAMETER (MAXDIM=NCT*26)
      DIMENSION SLOTZ(NCT,26) , SBELL(NCT,26)
     *        , TLOTZ(NCT,26) , TBELL(NCT,26)
     *        , THBELL(13)
C
      DIMENSION TLOTZS(NCT,26) , TBELLS(NCT,26)
      EQUIVALENCE(TLOTZS(1,1),TLOTZ(1,1))
      EQUIVALENCE(TBELLS(1,1),TBELL(1,1))
C
      LOGICAL LTHBEL
C
      SAVE    THBELL , LTHBEL
C
      DATA LTHBEL/.TRUE./
C
C=================== DATA FOR LOTZ IONISATION ==========================
C                        SET UP TLOTZ TABLE
C
C    (1) NUMBER OF SUBSHELLS,  (2) BINDING ENERGY OF ELECTRONS IN
C    THIS SUBSHELL, (3)-(4)-(5) ARE INDIVIDUAL CONSTANTS
C    (LOTZ'S A,B,C), (6) NUMBER OF EQUIVALENT ELECTRONS IN THE
C    SUBSHELL, (7-11),(12-16),(17-21),(22-26) IDEM FOR OTHER SUBSHELLS.
C
      DATA TLOTZS       / MAXDIM*0.00E+00 /
C                              H
      DATA TLOTZ(2,1)   / 1.0          /
     &     TLOTZ(2,2)   / 13.6         /
     &     TLOTZ(2,3)   / 4.0E-14      /
     &     TLOTZ(2,4)   / 0.6          /
     &     TLOTZ(2,5)   / 0.56         /
     &     TLOTZ(2,6)   / 1.0          /
C                              D
      DATA TLOTZ(3,1)   / 1.0          /
     &     TLOTZ(3,2)   / 13.6         /
     &     TLOTZ(3,3)   / 4.0E-14      /
     &     TLOTZ(3,4)   / 0.6          /
     &     TLOTZ(3,5)   / 0.56         /
     &     TLOTZ(3,6)   / 1.0          /
C                              DT
      DATA TLOTZ(4,1)   / 1.0          /
     &     TLOTZ(4,2)   / 13.6         /
     &     TLOTZ(4,3)   / 4.0E-14      /
     &     TLOTZ(4,4)   / 0.6          /
     &     TLOTZ(4,5)   / 0.56         /
     &     TLOTZ(4,6)   / 1.0          /
C                              T
      DATA TLOTZ(5,1)   / 1.0          /
     &     TLOTZ(5,2)   / 13.6         /
     &     TLOTZ(5,3)   / 4.0E-14      /
     &     TLOTZ(5,4)   / 0.6          /
     &     TLOTZ(5,5)   / 0.56         /
     &     TLOTZ(5,6)   / 1.0          /
C                              HE
      DATA TLOTZ(7,1)   / 1.0          /
     &     TLOTZ(7,2)   / 24.6         /
     &     TLOTZ(7,3)   / 4.0E-14      /
     &     TLOTZ(7,4)   / 0.75         /
     &     TLOTZ(7,5)   / 0.46         /
     &     TLOTZ(7,6)   / 2.0          /
C                              FE
      DATA TLOTZ(8,1)   / 3.0          /
     &     TLOTZ(8,2)   / 7.87         /
     &     TLOTZ(8,3)   / 4.0E-14      /
     &     TLOTZ(8,4)   / 0.4          /
     &     TLOTZ(8,5)   / 0.6          /
     &     TLOTZ(8,6)   / 2.0          /
     &     TLOTZ(8,7)   / 9.0          /
     &     TLOTZ(8,8)   / 2.6E-14      /
     &     TLOTZ(8,9)   / 0.92         /
     &     TLOTZ(8,10)  / 0.19         /
     &     TLOTZ(8,11)  / 6.0          /
     &     TLOTZ(8,12)  / 59.0         /
     &     TLOTZ(8,13)  / 4.0E-14      /
     &     TLOTZ(8,14)  / 0.6          /
     &     TLOTZ(8,15)  / 0.4          /
     &     TLOTZ(8,16)  / 6.0          /
C                              CU
      DATA TLOTZ(9,1)   / 3.0          /
     &     TLOTZ(9,2)   / 7.73         /
     &     TLOTZ(9,3)   / 4.0E-14      /
     &     TLOTZ(9,4)   / 0.0          /
     &     TLOTZ(9,5)   / 0.0          /
     &     TLOTZ(9,6)   / 1.0          /
     &     TLOTZ(9,7)   / 10.4         /
     &     TLOTZ(9,8)   / 2.2E-14      /
     &     TLOTZ(9,9)   / 0.95         /
     &     TLOTZ(9,10)  / 0.16         /
     &     TLOTZ(9,11)  / 10.0         /
     &     TLOTZ(9,12)  / 80.0         /
     &     TLOTZ(9,13)  / 4.0E-14      /
     &     TLOTZ(9,14)  / 0.6          /
     &     TLOTZ(9,15)  / 0.4          /
     &     TLOTZ(9,16)  / 6.0          /
C                              C
      DATA TLOTZ(10,1)  / 2.0          /
     &     TLOTZ(10,2)  / 11.3         /
     &     TLOTZ(10,3)  / 3.5E-14      /
     &     TLOTZ(10,4)  / 0.7          /
     &     TLOTZ(10,5)  / 0.4          /
     &     TLOTZ(10,6)  / 2.0          /
     &     TLOTZ(10,7)  / 16.6         /
     &     TLOTZ(10,8)  / 4.0E-14      /
     &     TLOTZ(10,9)  / 0.7          /
     &     TLOTZ(10,10) / 0.5          /
     &     TLOTZ(10,11) / 2.0          /
C                              MO
C     WE ASSUME THE RATE COEFFICIENT OF MO TO BE EQUAL TO THAT OF CR
C     (SIMILAR OUTER SHELL CONFIGURATION) MULTIPLIED BY Z(MO)/Z(CR)=1.8.
C     TO THIS END LOTZ'S A(I) COEFFICIENTS OF CR WERE MULTIPLIED BY 1.8.
      DATA TLOTZ(11,1)  / 3.0          /
     &     TLOTZ(11,2)  / 6.77         /
     &     TLOTZ(11,3)  / 7.2E-14      /
     &     TLOTZ(11,4)  / 0.0          /
     &     TLOTZ(11,5)  / 0.0          /
     &     TLOTZ(11,6)  / 1.0          /
     &     TLOTZ(11,7)  / 8.25         /
     &     TLOTZ(11,8)  / 4.86E-14     /
     &     TLOTZ(11,9)  / 0.9          /
     &     TLOTZ(11,10) / 0.2          /
     &     TLOTZ(11,11) / 5.0          /
     &     TLOTZ(11,12) / 48.0         /
     &     TLOTZ(11,13) / 7.2E-14      /
     &     TLOTZ(11,14) / 0.6          /
     &     TLOTZ(11,15) / 0.4          /
     &     TLOTZ(11,16) / 6.0          /
C                              NI
      DATA TLOTZ(12,1)  / 3.0          /
     &     TLOTZ(12,2)  / 8.68         /
     &     TLOTZ(12,3)  / 4.0E-14      /
     &     TLOTZ(12,4)  / 0.4          /
     &     TLOTZ(12,5)  / 0.6          /
     &     TLOTZ(12,6)  / 2.0          /
     &     TLOTZ(12,7)  / 10.0         /
     &     TLOTZ(12,8)  / 2.4E-14      /
     &     TLOTZ(12,9)  / 0.94         /
     &     TLOTZ(12,10) / 0.17         /
     &     TLOTZ(12,11) / 8.0          /
     &     TLOTZ(12,12) / 73.0         /
     &     TLOTZ(12,13) / 4.0E-14      /
     &     TLOTZ(12,14) / 0.6          /
     &     TLOTZ(12,15) / 0.4          /
     &     TLOTZ(12,16) / 6.0          /
C                              W
C     WE ASSUME THE RATE COEFFICIENT OF W TO BE EQUAL TO THAT OF V
C     (SIMILAR OUTER SHELL CONFIGURATION) MULTIPLIED BY MASS(W)/MASS(V)=
C     =3.61. TO THIS END LOTZ'S A(I) COEFFICIENTS OF V WERE MULTIPLIED
C     BY 3.61
      DATA TLOTZ(13,1)  / 3.0          /
     &     TLOTZ(13,2)  / 7.06         /
     &     TLOTZ(13,3)  / 14.44E-14    /
     &     TLOTZ(13,4)  / 0.4          /
     &     TLOTZ(13,5)  / 0.6          /
     &     TLOTZ(13,6)  / 2.0          /
     &     TLOTZ(13,7)  / 8.0          /
     &     TLOTZ(13,8)  / 11.552E-14   /
     &     TLOTZ(13,9)  / 0.8          /
     &     TLOTZ(13,10) / 0.25         /
     &     TLOTZ(13,11) / 3.0          /
     &     TLOTZ(13,12) / 43.0         /
     &     TLOTZ(13,13) / 14.44E-14    /
     &     TLOTZ(13,14) / 0.6          /
     &     TLOTZ(13,15) / 0.4          /
     &     TLOTZ(13,16) / 6.0          /
C                              AL
      DATA TLOTZ(14,1)  / 2.0          /
     &     TLOTZ(14,2)  / 5.99         /
     &     TLOTZ(14,3)  / 4.0E-14      /
     &     TLOTZ(14,4)  / 0.3          /
     &     TLOTZ(14,5)  / 0.6          /
     &     TLOTZ(14,6)  / 1.0          /
     &     TLOTZ(14,7)  / 10.6         /
     &     TLOTZ(14,8)  / 4.0E-14      /
     &     TLOTZ(14,9)  / 0.4          /
     &     TLOTZ(14,10) / 0.6          /
     &     TLOTZ(14,11) / 2.0          /
C                              AU
C     WE ASSUME THE RATE COEFFICIENT OF AU TO BE EQUAL TO THAT OF CU
C     (SIMILAR OUTER SHELL CONFIGURATION) MULTIPLIED BY Z(AU)/Z(CU)=2.7.
C     TO THIS END LOTZ'S A(I) COEFFICIENTS OF CR WERE MULTIPLIED BY 2.7.
      DATA TLOTZ(15,1)  / 3.0          /
     &     TLOTZ(15,2)  / 7.73         /
     &     TLOTZ(15,3)  / 10.8E-14     /
     &     TLOTZ(15,4)  / 0.0          /
     &     TLOTZ(15,5)  / 0.0          /
     &     TLOTZ(15,6)  / 1.0          /
     &     TLOTZ(15,7)  / 10.4         /
     &     TLOTZ(15,8)  / 5.94E-14     /
     &     TLOTZ(15,9)  / 0.95         /
     &     TLOTZ(15,10) / 0.16         /
     &     TLOTZ(15,11) / 10.0         /
     &     TLOTZ(15,12) / 80.0         /
     &     TLOTZ(15,13) / 10.8E-14     /
     &     TLOTZ(15,14) / 0.6          /
     &     TLOTZ(15,15) / 0.4          /
     &     TLOTZ(15,16) / 6.0          /
C                              BE
      DATA TLOTZ(16,1)  / 2.0          /
     &     TLOTZ(16,2)  / 9.32         /
     &     TLOTZ(16,3)  / 4.0E-14      /
     &     TLOTZ(16,4)  / 0.7          /
     &     TLOTZ(16,5)  / 0.5          /
     &     TLOTZ(16,6)  / 2.0          /
     &     TLOTZ(16,7)  / 115.0        /
     &     TLOTZ(16,8)  / 4.4E-14      /
     &     TLOTZ(16,9)  / 0.6          /
     &     TLOTZ(16,10) / 0.6          /
     &     TLOTZ(16,11) / 2.0          /
C                              SI
      DATA TLOTZ(17,1)  / 2.0          /
     &     TLOTZ(17,2)  / 8.15         /
     &     TLOTZ(17,3)  / 4.0E-14      /
     &     TLOTZ(17,4)  / 0.3          /
     &     TLOTZ(17,5)  / 0.6          /
     &     TLOTZ(17,6)  / 2.0          /
     &     TLOTZ(17,7)  / 13.5         /
     &     TLOTZ(17,8)  / 4.0E-14      /
     &     TLOTZ(17,9)  / 0.4          /
     &     TLOTZ(17,10) / 0.6          /
     &     TLOTZ(17,11) / 2.0          /
C                             TA
C     WE ASSUME THE RATE COEFFICIENT OF TA TO BE EQUAL TO THAT OF V
C     (SIMILAR OUTER SHELL CONFIGURATION) MULTIPLIED BY Z(TA)/Z(V)=3.2.
C     TO THIS END LOTZ'S A(I) COEFFICIENTS OF V WERE MULTIPLIED BY 3.2
      DATA TLOTZ(18,1)  / 3.0          /
     &     TLOTZ(18,2)  / 7.06         /
     &     TLOTZ(18,3)  / 12.8E-14     /
     &     TLOTZ(18,4)  / 0.4          /
     &     TLOTZ(18,5)  / 0.6          /
     &     TLOTZ(18,6)  / 2.0          /
     &     TLOTZ(18,7)  / 8.0          /
     &     TLOTZ(18,8)  / 10.24E-14    /
     &     TLOTZ(18,9)  / 0.8          /
     &     TLOTZ(18,10) / 0.25         /
     &     TLOTZ(18,11) / 3.0          /
     &     TLOTZ(18,12) / 43.0         /
     &     TLOTZ(18,13) / 12.8E-14     /
     &     TLOTZ(18,14) / 0.6          /
     &     TLOTZ(18,15) / 0.4          /
     &     TLOTZ(18,16) / 6.0          /
C                              TI
      DATA TLOTZ(19,1)  / 3.0          /
     &     TLOTZ(19,2)  / 6.82         /
     &     TLOTZ(19,3)  / 4.0E-14      /
     &     TLOTZ(19,4)  / 0.4          /
     &     TLOTZ(19,5)  / 0.6          /
     &     TLOTZ(19,6)  / 2.0          /
     &     TLOTZ(19,7)  / 8.0          /
     &     TLOTZ(19,8)  / 3.5E-14      /
     &     TLOTZ(19,9)  / 0.7          /
     &     TLOTZ(19,10) / 0.4          /
     &     TLOTZ(19,11) / 2.0          /
     &     TLOTZ(19,12) / 38.0         /
     &     TLOTZ(19,13) / 4.0E-14      /
     &     TLOTZ(19,14) / 0.6          /
     &     TLOTZ(19,15) / 0.4          /
     &     TLOTZ(19,16) / 6.0          /
C                              V
      DATA TLOTZ(20,1)  / 3.0          /
     &     TLOTZ(20,2)  / 7.06         /
     &     TLOTZ(20,3)  / 4.0E-14      /
     &     TLOTZ(20,4)  / 0.4          /
     &     TLOTZ(20,5)  / 0.6          /
     &     TLOTZ(20,6)  / 2.0          /
     &     TLOTZ(20,7)  / 8.0          /
     &     TLOTZ(20,8)  / 3.2E-14      /
     &     TLOTZ(20,9)  / 0.8          /
     &     TLOTZ(20,10) / 0.25         /
     &     TLOTZ(20,11) / 3.0          /
     &     TLOTZ(20,12) / 43.0         /
     &     TLOTZ(20,13) / 4.0E-14      /
     &     TLOTZ(20,14) / 0.6          /
     &     TLOTZ(20,15) / 0.4          /
     &     TLOTZ(20,16) / 6.0          /
C                              ZR
C     WE ASSUME THE RATE COEFFICIENT OF ZR TO BE EQUAL TO THAT OF V
C     (SIMILAR OUTER SHELL CONFIGURATION) MULTIPLIED BY Z(ZR)/Z(V)=1.74
C     TO THIS END LOTZ'S A(I) COEFFICIENTS OF V WERE MULTIPLIED BY 1.74
      DATA TLOTZ(21,1)  / 3.0          /
     &     TLOTZ(21,2)  / 7.06         /
     &     TLOTZ(21,3)  / 6.96E-14     /
     &     TLOTZ(21,4)  / 0.4          /
     &     TLOTZ(21,5)  / 0.6          /
     &     TLOTZ(21,6)  / 2.0          /
     &     TLOTZ(21,7)  / 8.0          /
     &     TLOTZ(21,8)  / 5.57E-14     /
     &     TLOTZ(21,9)  / 0.8          /
     &     TLOTZ(21,10) / 0.25         /
     &     TLOTZ(21,11) / 3.0          /
     &     TLOTZ(21,12) / 43.0         /
     &     TLOTZ(21,13) / 6.96E-14     /
     &     TLOTZ(21,14) / 0.6          /
     &     TLOTZ(21,15) / 0.4          /
     &     TLOTZ(21,16) / 6.0          /
C
C=================== DATA FOR BELL IONISATION ==========================
C                        SET UP TBELL TABLE
C
C    (1) IONISATION POTENTIAL, (2) NUMBER N OF "A" COEFFICIENTS,
C    (3,...,N+2) "A" COEFFICIENTS, (N+3) ALFA, (N+4) NUMBER M OF
C    BETA COEFFICIENTS, (N+5,...,N+M+4) BETA COEFFICIENTS
C
      DATA TBELLS       / MAXDIM*0.00E+00 /
C                               H
      DATA TBELL(2,1)   / 13.6         /
     &     TBELL(2,2)   /  6.0         /
     &     TBELL(2,3)   /  2.3742E-08  /
     &     TBELL(2,4)   / -3.6866E-09  /
     &     TBELL(2,5)   / -1.0366E-08  /
     &     TBELL(2,6)   / -3.8010E-09  /
     &     TBELL(2,7)   /  3.4159E-09  /
     &     TBELL(2,8)   /  1.6834E-09  /
     &     TBELL(2,9)   /  2.4617E-08  /
     &     TBELL(2,10)  /  3.0         /
     &     TBELL(2,11)  /  9.5987E-08  /
     &     TBELL(2,12)  / -9.2464E-07  /
     &     TBELL(2,13)  /  3.9974E-06  /
C                               D
      DATA TBELL(3,1)   / 13.6         /
     &     TBELL(3,2)   /  6.0         /
     &     TBELL(3,3)   /  2.3742E-08  /
     &     TBELL(3,4)   / -3.6866E-09  /
     &     TBELL(3,5)   / -1.0366E-08  /
     &     TBELL(3,6)   / -3.8010E-09  /
     &     TBELL(3,7)   /  3.4159E-09  /
     &     TBELL(3,8)   /  1.6834E-09  /
     &     TBELL(3,9)   /  2.4617E-08  /
     &     TBELL(3,10)  /  3.0         /
     &     TBELL(3,11)  /  9.5987E-08  /
     &     TBELL(3,12)  / -9.2464E-07  /
     &     TBELL(3,13)  /  3.9974E-06  /
C                               DT
      DATA TBELL(4,1)   / 13.6         /
     &     TBELL(4,2)   /  6.0         /
     &     TBELL(4,3)   /  2.3742E-08  /
     &     TBELL(4,4)   / -3.6866E-09  /
     &     TBELL(4,5)   / -1.0366E-08  /
     &     TBELL(4,6)   / -3.8010E-09  /
     &     TBELL(4,7)   /  3.4159E-09  /
     &     TBELL(4,8)   /  1.6834E-09  /
     &     TBELL(4,9)   /  2.4617E-08  /
     &     TBELL(4,10)  /  3.0         /
     &     TBELL(4,11)  /  9.5987E-08  /
     &     TBELL(4,12)  / -9.2464E-07  /
     &     TBELL(4,13)  /  3.9974E-06  /
C                               T
      DATA TBELL(5,1)   / 13.6         /
     &     TBELL(5,2)   /  6.0         /
     &     TBELL(5,3)   /  2.3742E-08  /
     &     TBELL(5,4)   / -3.6866E-09  /
     &     TBELL(5,5)   / -1.0366E-08  /
     &     TBELL(5,6)   / -3.8010E-09  /
     &     TBELL(5,7)   /  3.4159E-09  /
     &     TBELL(5,8)   /  1.6834E-09  /
     &     TBELL(5,9)   /  2.4617E-08  /
     &     TBELL(5,10)  /  3.0         /
     &     TBELL(5,11)  /  9.5986E-08  /
     &     TBELL(5,12)  / -9.2464E-07  /
     &     TBELL(5,13)  /  3.9974E-06  /
C                               HE
      DATA TBELL(7,1)   / 24.6         /
     &     TBELL(7,2)   /  6.0         /
     &     TBELL(7,3)   /  1.4999E-08  /
     &     TBELL(7,4)   /  5.6657E-10  /
     &     TBELL(7,5)   / -6.0822E-09  /
     &     TBELL(7,6)   / -3.5894E-09  /
     &     TBELL(7,7)   /  1.5529E-09  /
     &     TBELL(7,8)   /  1.3207E-09  /
     &     TBELL(7,9)   /  3.1373E-08  /
     &     TBELL(7,10)  /  3.0         /
     &     TBELL(7,11)  /  4.7893E-08  /
     &     TBELL(7,12)  / -7.7361E-07  /
     &     TBELL(7,13)  /  3.7367E-06  /
C                               FE
      DATA TBELL(8,1)   /  7.9         /
     &     TBELL(8,2)   /  6.0         /
     &     TBELL(8,3)   /  1.4438E-07  /
     &     TBELL(8,4)   / -8.0018E-08  /
     &     TBELL(8,5)   / -6.1752E-08  /
     &     TBELL(8,6)   /  5.6502E-08  /
     &     TBELL(8,7)   /  1.2350E-08  /
     &     TBELL(8,8)   / -1.7668E-08  /
     &     TBELL(8,9)   /  3.4615E-07  /
     &     TBELL(8,10)  /  3.0         /
     &     TBELL(8,11)  / -4.3391E-07  /
     &     TBELL(8,12)  /  1.7618E-06  /
     &     TBELL(8,13)  / -5.3387E-06  /
C                               C
      DATA TBELL(10,1)  / 11.3         /
     &     TBELL(10,2)  /  6.0         /
     &     TBELL(10,3)  /  5.9849E-08  /
     &     TBELL(10,4)  /  1.1903E-08  /
     &     TBELL(10,5)  / -3.0141E-08  /
     &     TBELL(10,6)  / -1.3693E-08  /
     &     TBELL(10,7)  /  8.3749E-09  /
     &     TBELL(10,8)  /  4.0150E-09  /
     &     TBELL(10,9)  /  3.7442E-07  /
     &     TBELL(10,10) /  3.0         /
     &     TBELL(10,11) / -6.5826E-07  /
     &     TBELL(10,12) /  2.0520E-06  /
     &     TBELL(10,13) / -4.4688E-06  /
C                               MO
C     WE ASSUME THE RATE COEFFICIENT OF MO TO BE EQUAL TO THAT OF CR
C     (SIMILAR OUTER SHELL CONFIGURATION) MULTIPLIED BY Z(MO)/Z(CR)=1.8
C     TO THIS END BELL'S COEFFICIENTS OF CR WERE MULTIPLIED BY 1.8
      DATA TBELL(11,1)  /  6.8         /
     &     TBELL(11,2)  /  6.0         /
     &     TBELL(11,3)  /  3.1457E-07  /
     &     TBELL(11,4)  / -1.7081E-07  /
     &     TBELL(11,5)  / -7.0447E-08  /
     &     TBELL(11,6)  /  3.9663E-08  /
     &     TBELL(11,7)  /  1.8976E-08  /
     &     TBELL(11,8)  / -8.1922E-09  /
     &     TBELL(11,9)  /  7.0412E-07  /
     &     TBELL(11,10) /  3.0         /
     &     TBELL(11,11) / -5.9762E-07  /
     &     TBELL(11,12) /  8.3650E-07  /
     &     TBELL(11,13) /  1.3167E-06  /
C                               NI
      DATA TBELL(12,1)  /  7.6         /
     &     TBELL(12,2)  /  6.0         /
     &     TBELL(12,3)  /  1.1655E-07  /
     &     TBELL(12,4)  / -3.9394E-08  /
     &     TBELL(12,5)  / -6.9896E-08  /
     &     TBELL(12,6)  /  3.4807E-08  /
     &     TBELL(12,7)  /  1.7806E-08  /
     &     TBELL(12,8)  / -1.1861E-08  /
     &     TBELL(12,9)  /  2.6366E-07  /
     &     TBELL(12,10) /  3.0         /
     &     TBELL(12,11) / -2.0322E-07  /
     &     TBELL(12,12) /  2.7985E-07  /
     &     TBELL(12,13) /  2.6778E-07  /
C                               W
C     WE ASSUME THE RATE COEFFICIENT OF W TO BE EQUAL TO THAT OF TI
C     (SIMILAR OUTER SHELL CONFIGURATION) MULTIPLIED BY Z(W)/Z(TI)=3.36
C     TO THIS END BELL'S COEFFICIENTS OF TI WERE MULTIPLIED BY 3.36
      DATA TBELL(13,1)  /  6.8         /
     &     TBELL(13,2)  /  6.0         /
     &     TBELL(13,3)  /  7.7404E-07  /
     &     TBELL(13,4)  / -6.1300E-07  /
     &     TBELL(13,5)  /  1.0011E-09  /
     &     TBELL(13,6)  /  5.7886E-09  /
     &     TBELL(13,7)  /  9.9338E-08  /
     &     TBELL(13,8)  / -2.7487E-08  /
     &     TBELL(13,9)  /  1.0445E-06  /
     &     TBELL(13,10) /  3.0         /
     &     TBELL(13,11) / -2.4467E-07  /
     &     TBELL(13,12) / -1.5803E-07  /
     &     TBELL(13,13) /  2.3679E-06  /
C                               AL
      DATA TBELL(14,1)  /  6.0         /
     &     TBELL(14,2)  /  6.0         /
     &     TBELL(14,3)  /  3.0764E-07  /
     &     TBELL(14,4)  / -2.8504E-07  /
     &     TBELL(14,5)  /  1.0518E-07  /
     &     TBELL(14,6)  / -2.1274E-08  /
     &     TBELL(14,7)  / -2.5008E-08  /
     &     TBELL(14,8)  /  2.0889E-08  /
     &     TBELL(14,9)  /  5.3461E-07  /
     &     TBELL(14,10) /  3.0         /
     &     TBELL(14,11) / -3.3911E-07  /
     &     TBELL(14,12) / -8.2783E-08  /
     &     TBELL(14,13) /  4.4186E-06  /
C                               BE
      DATA TBELL(16,1)  /  9.3         /
     &     TBELL(16,2)  /  6.0         /
     &     TBELL(16,3)  /  7.4206E-08  /
     &     TBELL(16,4)  / -1.5520E-08  /
     &     TBELL(16,5)  / -3.9403E-08  /
     &     TBELL(16,6)  /  7.2155E-09  /
     &     TBELL(16,7)  /  1.1098E-08  /
     &     TBELL(16,8)  / -2.5501E-09  /
     &     TBELL(16,9)  /  2.1732E-07  /
     &     TBELL(16,10)  /  3.0        /
     &     TBELL(16,11) / -2.1648E-07  /
     &     TBELL(16,12) /  2.8113E-07  /
     &     TBELL(16,13) /  5.3070E-07  /
C                               SI
      DATA TBELL(17,1)  /  8.2         /
     &     TBELL(17,2)  /  6.0         /
     &     TBELL(17,3)  /  2.5653E-07  /
     &     TBELL(17,4)  / -2.1940E-07  /
     &     TBELL(17,5)  /  5.2700E-08  /
     &     TBELL(17,6)  / -2.9152E-10  /
     &     TBELL(17,7)  / -1.2481E-08  /
     &     TBELL(17,8)  /  9.9184E-09  /
     &     TBELL(17,9)  /  4.5234E-07  /
     &     TBELL(17,10) /  3.0         /
     &     TBELL(17,11) / -2.8674E-07  /
     &     TBELL(17,12) /  2.6614E-08  /
     &     TBELL(17,13) /  3.0515E-06  /
C                               TA
C     WE ASSUME THE RATE COEFFICIENT OF TA TO BE EQUAL TO THAT OF TI
C     (SIMILAR OUTER SHELL CONFIGURATION)MULTIPLIED BY Z(TA)/Z(TI)=3.32
C     TO THIS END BELL'S COEFFICIENTS OF TI WERE MULTIPLIED BY 3.32
      DATA TBELL(18,1)  /  6.8         /
     &     TBELL(18,2)  /  6.0         /
     &     TBELL(18,3)  /  7.6483E-07  /
     &     TBELL(18,4)  / -6.0570E-07  /
     &     TBELL(18,5)  /  9.8922E-10  /
     &     TBELL(18,6)  /  5.7197E-09  /
     &     TBELL(18,7)  /  9.8156E-08  /
     &     TBELL(18,8)  / -2.7160E-08  /
     &     TBELL(18,9)  /  1.0321E-06  /
     &     TBELL(18,10) /  3.0         /
     &     TBELL(18,11) / -2.4200E-07  /
     &     TBELL(18,12) / -1.5615E-07  /
     &     TBELL(18,13) /  2.3397E-06  /
C                               TI
      DATA TBELL(19,1)  /  6.8         /
     &     TBELL(19,2)  /  6.0         /
     &     TBELL(19,3)  /  2.3037E-07  /
     &     TBELL(19,4)  / -1.8244E-07  /
     &     TBELL(19,5)  /  2.9796E-10  /
     &     TBELL(19,6)  /  1.7228E-09  /
     &     TBELL(19,7)  /  2.9565E-08  /
     &     TBELL(19,8)  / -8.1807E-09  /
     &     TBELL(19,9)  /  3.1088E-07  /
     &     TBELL(19,10) /  3.0         /
     &     TBELL(19,11) / -7.2891E-08  /
     &     TBELL(19,12) / -4.7033E-08  /
     &     TBELL(19,13) /  7.0474E-07  /
C                               V
      DATA TBELL(20,1)  /  6.7         /
     &     TBELL(20,2)  /  6.0         /
     &     TBELL(20,3)  /  6.1981E-07  /
     &     TBELL(20,4)  / -8.2488E-08  /
     &     TBELL(20,5)  / -1.1598E-07  /
     &     TBELL(20,6)  / -1.3021E-07  /
     &     TBELL(20,7)  / -3.7206E-08  /
     &     TBELL(20,8)  /  1.6844E-08  /
     &     TBELL(20,9)  /  1.3253E-06  /
     &     TBELL(20,10) /  3.0         /
     &     TBELL(20,11) / -6.5540E-07  /
     &     TBELL(20,12) / -2.2345E-07  /
     &     TBELL(20,13) /  7.8098E-06  /
C                               ZR
C     WE ASSUME THE RATE COEFFICIENT OF ZR TO BE EQUAL TO THAT OF TI
C     (SIMILAR OUTER SHELL CONFIGURATION)MULTIPLIED BY Z(ZR)/Z(TI)=1.82
C     TO THIS END BELL'S COEFFICIENTS OF TI WERE MULTIPLIED BY 1.82
      DATA TBELL(21,1)  /  6.8         /
     &     TBELL(21,2)  /  6.0         /
     &     TBELL(21,3)  /  4.1927E-07  /
     &     TBELL(21,4)  / -3.3204E-07  /
     &     TBELL(21,5)  /  5.4229E-10  /
     &     TBELL(21,6)  /  3.1355E-09  /
     &     TBELL(21,7)  /  5.3808E-08  /
     &     TBELL(21,8)  / -1.4889E-08  /
     &     TBELL(21,9)  /  5.6580E-07  /
     &     TBELL(21,10) /  3.0         /
     &     TBELL(21,11) / -1.3266E-07  /
     &     TBELL(21,12) / -8.5600E-08  /
     &     TBELL(21,13) /  1.2826E-06  /
C                               CR
C     DATA TBELL(22,1)  /  6.8         /
C    &     TBELL(22,2)  /  6.0         /
C    &     TBELL(22,3)  /  1.7476E-07  /
C    &     TBELL(22,4)  / -9.4892E-08  /
C    &     TBELL(22,5)  / -3.9137E-08  /
C    &     TBELL(22,6)  /  2.2035E-08  /
C    &     TBELL(22,7)  /  1.0542E-08  /
C    &     TBELL(22,8)  / -4.5512E-09  /
C    &     TBELL(22,9)  /  3.9118E-07  /
C    &     TBELL(22,10) /  3.0         /
C    &     TBELL(22,11) / -3.3201E-07  /
C    &     TBELL(22,12) /  4.6472E-07  /
C    &     TBELL(22,13) /  7.3151E-07  /
C
C============================== END ==================================
C
C
C============================== DATA FOR MOLECULAR PROCESSES =========
C
C  .................................................................
C  .  MAXWELLIAN RATE COEFFICIENTS (E.M.JONES - CLM-R 175 (1977))  .
C  .................................................................
C
C     1)FAST DISSOCIATION:  H2-->H + H (TWO ATOMS AT 3EV)
C
      DIMENSION RH2E2H(9)
      DATA RH2E2H/-26.65989,9.312341,-5.315732,2.551588,-9.873073E-1,
     *             2.490946E-1,-3.733209E-2,3.016028E-3,-1.015095E-4/
C
C     2)IONIZATION: H2-->2*H+ FOLLOWED BY -->(H+) + H (ONE ATOM AT 3EV)
C
      DIMENSION RH2(9)
      DATA RH2/-34.23880,16.14829,-7.646064,2.372854,-0.4906446,
     *          6.507808E-2,-5.235834E-3,2.302402E-4,-4.222022E-6/
C
C     3)DISSOCIATIVE IONIZATION: H2-->(H+) + H (ONE ATOM AT 3EV)
C
      DIMENSION RH2EH(9)
      DATA RH2EH/-115.6823,141.0502,-95.33784,37.05283,-8.853047,
     *            1.320344,-1.198239E-1,6.053489E-3,-1.305276E-4/
C
C     4)SLOW DISSOCIATION: H2-->H + H  (TWO ATOMS AT 0.3EV)
C                                 (JANUARY 1988)
      DIMENSION RH2EHS(7)
      DATA RH2EHS/-34.906693,14.250277,-5.706695,1.314436,-1.776308E-1,
     *             1.290029E-2,-3.870771E-4/
C
C  ...................................................................
C  .  MOLECULAR RATE COEFFICIENTS (JANEV - 'ELEMENTARY PROCESSES IN  .
C  .                                        HYDROGEN-HELIUM PLASMA', .
C  .                                        SPRINGER (1987))         .
C  .................................................................
C
C     1) DISSOCIATION:  H2 + E ---> H + H + E
C
C        REACTION 2.2.5 (P.44 WITH CORRECTIONS ACCORDING TO D.REITER)
C
      DIMENSION R225(9)
      DATA R225/-2.7872175E+01,
     *           1.0522527E+01,
     *          -4.9732123E+00,
     *           1.4511982E+00,
     *          -3.0627906E-01,
     *           4.4333795E-02,
     *          -4.0963442E-03,
     *           2.1596703E-04,
     *          -4.9285453E-06/
C NO! DATA R225/-2.858072836568E+01,
C NO!*           1.038543976082E+01,
C NO!*          -5.383825026583E+00,
C NO!*           1.950636494405E+00,
C NO!*          -5.393666392407E-01,
C NO!*           1.006916814453E-01,
C NO!*          -1.160758573972E-02,
C NO!*           7.411623859122E-04,
C NO!*          -2.001369618807E-05/
C
C     2) IONIZATION: H2 ---> (H2+) + E + E
C                              |
C                              ---> H + (H+)
C
C        REACTION 2.2.9 (P.52)
C
      DIMENSION R229(9)
      DATA R229/-3.568640293666E+01,
     *           1.733468989961E+01,
     *          -7.767469363538E+00,
     *           2.211579405415E+00,
     *          -4.169840174384E-01,
     *           5.088289820867E-02,
     *          -3.832737518325E-03,
     *           1.612863120371E-04,
     *          -2.893391904431E-06/
C
C     3) DISSOCIATIVE IONIZATION: H2 + E ---> H + (H+) + E + E
C
C        REACTION 2.2.10 (P.54)
C
      DIMENSION R2210(9)
      DATA R2210/-3.834597006782E+01,
     *            1.426322356722E+01,
     *           -5.826468569506E+00,
     *            1.727940947913E+00,
     *           -3.598120866343E-01,
     *            4.822199350494E-02,
     *           -3.909402993006E-03,
     *            1.738776657690E-04,
     *           -3.252844486351E-06/
C
C============================== END ==================================
C
      PARAMETER ( IZDIM = 28 )
      REAL*4      SA4(IZDIM)  , RTA4(IZDIM)  , PTA4(IZDIM)
     &        ,   SA40(IZDIM) , RTA40(IZDIM) , PTA40(IZDIM)
      CHARACTER   USERID*80
C
C
C=================== INITIALISE LOTZ & BELL DATA =======================
C
      DO 4010 I        = 1,NCT
         DO 4000 K     = 1,26
            SLOTZ(I,K) = TLOTZ(I,K)
            SBELL(I,K) = TBELL(I,K)
 4000    CONTINUE
 4010 CONTINUE
C
      RETURN
C
C                     IONISATION RATE COEFFICIENT
C                     ===========================
      ENTRY IOSIG( IZ     , A      , E      , TE     , DE
     *           , SVI    , SIGI   , ISIGI  , IHXS   , IZXS
     *           , IHYEAR , IZYEAR , IDYEAR , USERID        )
C     ------------
C
C............................. LOTZ / BELL .............................
C           (USE LOTZ ONLY IF BELL DOES NOT EXIST OR IZXS=2)
C
      IF(      (IZ.EQ.1.AND.(IHXS.EQ.3.OR.IHXS.EQ.4))
     &    .OR. (IZ.NE.1.AND.(IZXS.EQ.0.OR.IZXS.EQ.2))  ) THEN
C
          J                       = IZLOZ(IZ)
          IF( J.EQ.0 ) GOTO 320
C
          NBELL                   = TBELL(J,2)
C
C................................ LOTZ .................................
C
          IF( NBELL.EQ.0 .OR. (IZ.NE.1.AND.IZXS.EQ.2) ) THEN
C
              NLOTZ               = TLOTZ(J,1)
              IF( NLOTZ.EQ.0 ) GOTO 310
C
              DO 4120 M           = 1 , NLOTZ
                 LOC              = ( M - 1 ) * 5 + 1
                 BUFFER(M)        = TLOTZ(J,LOC+1)
                 BUFFER(5+M)      = TLOTZ(J,LOC+2)
                 BUFFER(10+M)     = TLOTZ(J,LOC+3)
                 BUFFER(15+M)     = TLOTZ(J,LOC+4)
                 BUFFER(20+M)     = TLOTZ(J,LOC+5)
 4120         CONTINUE
C
              CALL LOTZ(NLOTZ,
     *             BUFFER(1),BUFFER(6),BUFFER(11),BUFFER(16),BUFFER(21),
     *             TE,SVI)
C
          ELSE
C
C................................ BELL .................................
C.............(SEPARATE BRANCH FOR IZ=1 TO SPEED CODE UP)...............
C
              IF( IZ.NE.1 ) THEN
C
                  BUFFER(1)       = TBELL(J,1)
                  DO 4130 M       = 1 , NBELL
                     BUFFER(M+1)  = TBELL(J,M+2)
 4130             CONTINUE
                  BUFFER(NBELL+2) = TBELL(J,NBELL+3)
                  M               = TBELL(J,NBELL+4)
                  DO 4140 II      = 1 , M
                     LOC          = NBELL + II
                     BUFFER(LOC+2)= TBELL(J,LOC+4)
 4140             CONTINUE
C
                  CALL BELLR(NBELL,M
     *              ,BUFFER(1),BUFFER(2),BUFFER(NBELL+2),BUFFER(NBELL+3)
     *              ,TE,SVI)
C
              ELSE
C
                  IF( LTHBEL ) THEN
                      DO 4150 M   = 1 , 13
                         THBELL(M)= TBELL(2,M)
 4150                 CONTINUE
                      LTHBEL      = .FALSE.
                  END IF
C
                  CALL BELLR(6,3
     *              ,THBELL(1),THBELL(3),THBELL(9),THBELL(11)
     *              ,TE,SVI)
C
              END IF
C
          END IF
C
C............................. CORRECTION ..............................
C
          IF( IZ.EQ.1 ) THEN
              IF( IHXS.EQ.3 ) THEN
C                 CORRECTION FOR MULTISTEP IONIS.(HIGH NE)
C                 (COLLISIONAL RAD.ION.) INTRODUCED ON 4 FEBR. 1987 FOR
C                 H AND HE, ACCORDING TO CULHAM REP. CLM-P668 BY
C                 M.HARRISON, P.HARBOUR AND E.S.HOTSTON,
C                 P.57. FORMULAS HAVE BEEN UPDATED ACCORDING TO HOTSTON
                  SVI = SVI * (1.0+(10.0/TE)*SQRT(DE/1.0E+14))
              END IF
          ELSE IF( IZ.EQ.2 ) THEN
              SVI = SVI * (1.0+(18.1/TE)*SQRT(DE/1.0E+14))
          END IF
C
C................................ ADAS .................................
C                          (IHXS=5 OR IZXS=1)
C
      ELSE IF( (IZ.EQ.1.AND.IHXS.EQ.5)
     &    .OR. (IZ.NE.1.AND.IZXS.EQ.1) ) THEN
C
          IF( IZ.EQ.1 ) THEN
              IYEAR           = IHYEAR
          ELSE
              IYEAR           = IZYEAR
          END IF
C
          CALL ADAS( IZ  , IYEAR    , IDYEAR   , USERID , IZDIM
     I             , 0   , 0.00E+00 , 60       , IUERR  , 0
     I             , TE  , TE
     I             , DE  , 0        , 0.00E+00 , 1.00E+00
     O             , SVI , SA4(1)   , RTA4(1)  , PT04   , PTA4(1)
     O             , IER )
          IF( IER.NE.0 ) CALL EXITN(1)
C
C............................... ERROR .................................
C
      ELSE
          WRITE(IUERR,*) ' ILLEGAL MODEL IN IOSIG (IZ,IHXS,IZXS) = '
     &             , IZ , IHXS, IZXS
          CALL EXITN(1)
C.......................................................................
C
      END IF
C
C......................... VELOCITY OF THE NEUTRAL .....................
C
      IF( ISIGI.NE.0 ) THEN
          S    = SQRT(E/A) * 1.3841E+06
          SIGI = SVI / S
      END IF
C
      RETURN
C
C
C=====================================================================
C
C
C
C                          CHARGE EXCHANGE   H + H+ -> H+ + H
C                          ===============
      ENTRY CXSIG(IZ,A,E,WX,WY,WZ,
     &            TI,TE,FMACH,ATARG,CDX,CDY,CDZ,IXTYPE,
     &            SIGCX,SVCX)
C
C I   IZ       = ATOMIC NUMBER
C I   A        = MASS OF NEUTRAL (AMU)
C I   E        = NEUTRAL ENERGY (EV)
C I   WX/Y/Z   = NEUTRAL DIRECTION COSINES
C I   TI       = ION TEMPERATURE (EV)
C I   TE       = ELECTRON TEMPERATURE
C I   FMACH    = MACH NUMBER OF PLASMA FLOW
C I   ATARG    = ION MASS (AMU)
C I   CDX/Y/Z  = FLOW DIRECTION COSINES
C I   IXTYPE   = C.X. CROSS SECTION MODEL
C O   SIGCX    = C.X. CROSS SECTION (EFFECTIVE)
C O   SVCX     = C.X. REACTION RATE
C
C     RETURNS MICROSCOPIC CHARGE EXCHANGE X-SECTION  BETWEEN H-ISOTOPES
C     AVERAGED OVER ALL TARGET VELOCITIES (MAXWELL + FLOW) FOR NEUTRALS
C     IN A PLASMA REGION CONTAINING H+,D+,DT+,T+.
C
      IF(IZ.NE.1) GOTO 300
C
      ICXTYP = IXTYPE
C
C                    VELOCITY OF THE NEUTRAL
      S=SQRT(E/A)*1.3841E+06
      SX=S*WX
      SY=S*WY
      SZ=S*WZ
C
C                       MEAN RELATIVE VELOCITY BETWEEN FLOW AND NEUTRAL
      IF(FMACH.LE.0.0) THEN
        RV2=S**2
      ELSE
        R=SQRT( (TE+TI)/ATARG )*1.0E+06 * FMACH
C                               0.978729E+06
        RV2=(R*CDX-SX)**2+(R*CDY-SY)**2+(R*CDZ-SZ)**2
      ENDIF
C                          SCALED SHIFTED NEUTRAL ENERGY (EV)
      ES=0.52197E-12*RV2
C                          SHIFTED NEUTRAL ENERGY
      ENS=ES*A
C                          SCALED ION TEMPERATURE
      TS=TI/ATARG
C
      ESTS=ES/TS
      IF(ES.GE.40000.0) GO TO 20
      IF(ES.GE.5000.0) GO TO 10
      IF(ESTS.GE.5.0) GO TO 80
      IP=1
      GO TO 30
   10 IF(ESTS.GE.26.0) GO TO 80
      IP=2
      GO TO 30
   20 IF(ESTS.GE.100.0) GO TO 80
      IP=3
   30 C=SQRT(ATARG/A)
      C1=SQRT(ENS/TI)
      C2=C*C1
      C3=0.0
      IF(C2**2.LT.174.0) C3=EXP(-C2**2)
      C4=2.0*C2
      IDQH=1
      GO TO ( 40 , 50 , 60 ),IP
   40 CALL DQH04P(XTFCT,RM)
      GO TO 70
   50 CALL DQH12P(XTFCT,RM)
      GO TO 70
   60 CALL DQH32P(XTFCT,RM)
   70 RRATE=0.780939E+6*RM*TI/ATARG*SQRT(A/ENS)
      SIGCX=RRATE/S
      GO TO 90
C                    MEAN RELATIVE NEUTRAL/ION ENERGY
   80 ER= 1.5*A*TS+ENS
      CALL HXHP(ER/A,SIGCX)
C                    CONSERVE THE REACTION RATE
      SIGCX=SIGCX*SQRT(ER/E)
   90 CONTINUE
      SVCX=SIGCX * S
      RETURN
C
C
C=====================================================================
C
C                          RECOMBINATION   H+ + E- --> H
C                          =============
      ENTRY RECSIG(TE,DE,SIGVRC,IXTYPE,IHYEAR,IDYEAR,USERID)
C     ------------
C     <V*SIGMA> :-
C     IXTYPE=0  : <V*SIGMA> = 0.0
C     IXTYPE=1  : GORDEEV ET AL., JEPT LETT., VOL.25, NO.3, PAG.204(1977
C     IXTYPE=2  : JANEV-'ELEMENTARY PROCESSES IN HYDROGEN-HELIUM PLASMA'
C                        SPRINGER (1987))
C                 (NL=1S ONLY)
C     IXTYPE=3  : NRL
C     IXTYPE=4  : ADAS
C
      TEKEV = TE*1.0E-03
      BETAN = 13.6E+00 / TE
C
      IF( IXTYPE.EQ.1 ) THEN
C.GORDEEV
          IF(TEKEV.LE.4.0) THEN
              SIGVRC=1.48E-14/(SQRT(TEKEV)*(1.0+43.4*TEKEV))
          ELSE
              SIGVRC=3.58E-16/TEKEV**1.388
          END IF
      ELSE IF( IXTYPE.EQ.2 ) THEN
C.JANEV (NL=1S ONLY)
          SIGVRC = 3.92E+00 * 1.00E-14
     &           * ( BETAN**1.5 / ( BETAN + 0.35E+00 ) )
      ELSE IF( IXTYPE.EQ.3 ) THEN
C.NRL
          SIGVRC = 5.2E-14 * SQRT(BETAN)
     &           * ( 0.43E+00 + 0.500E+00 * ALOG(BETAN)
     &                        + 0.469E+00 / BETAN**0.3333333 )
      ELSE IF( IXTYPE.EQ.4 .AND. DE.GT.0.0D+00 ) THEN
C.ADAS
          IYEAR = IHYEAR
          CALL ADAS( 1    , IYEAR     , IDYEAR    , USERID  , IZDIM
     I             , 0    , 0.00E+00  , 60        , IUERR   , 0
     I             , TE   , TE
     I             , DE   , 0         , 0.00E+00  , 1.00E+00
     O             , SVI0 , SA40(1)   , RTA40(1)  , PT040   , PTA40(1)
     O             , IER )
          IF( IER.NE.0 ) THEN
              CALL EXITN(1)
          ELSE
              SIGVRC=RTA40(1)
          END IF
      ELSE
          SIGVRC=0.00E+00
      END IF
      RETURN
C
C
C
C
C=====================================================================
C
C                          MOLECULAR REACTIONS    (SEE ABOVE)
C                          ===================
      ENTRY HMSIG(IZ,A,TE,DE,SVMDF,SVMDS,SVMI,SIGMDF,SIGMDS,SIGMI,
     &            ISIG,IXTYPE)
C     -----------
      IF(IZ.NE.1) GOTO 300
C
      SVMDF = 0.0
      SVMI = 0.0
      SVMDS = 0.0
      SIGMDF =0.0
      SIGMDS =0.0
      SIGMI =0.0
C
      IF(TE.LE.0.0 .OR. DE.LE.0.0) GO TO 210
C
C              RATE COEFFICIENTS  RC(CM**3/SEC) V*SIGMA(V)
C                     RC1: DISSOCIATION
C                     RC2: IONIZATION
C                     RC3: DISSOCIATIVE IONIZATION
C                     RC4: SLOW DISSOCIATION
C
      IF( IXTYPE.EQ.1 ) THEN
C         JANEV
          CALL PNFIT(9,R225(1) ,TE,RC1)
          CALL PNFIT(9,R229(1) ,TE,RC2)
          CALL PNFIT(9,R2210(1),TE,RC3)
          RC4=0.0
      ELSE
C         JONES
          CALL PNFIT(9,RH2E2H(1),TE,RC1)
          CALL PNFIT(9,RH2(1)   ,TE,RC2)
          CALL PNFIT(9,RH2EH(1) ,TE,RC3)
          CALL PNFIT(7,RH2EHS(1),TE,RC4)
C           CORRECT DISSOCIATION
C           --------------------
C           COEFFICIENT 0.3 WAS INTRODUCED ON 4 FEBRUARY 1987
C           UPON REQUEST OF M.HARRISON, ACCORDING TO A SUGGESTION OF
C           JANEV AND LANGER TO HEIFETZ (SEE HEIFETZ LETTER 14/10/86
C           TO DE MATTEIS ABOUT INTOR BENCHMARK).
C           REFERENCE:USA CONTR. TO THE 14-TH WORKSHOP MEETING INTOR
C           PHASE II DEC.1986 BRUSSELS/VIENNA EURFUBRU/XII-52/86/EDV 22
C           PAG.154(HEIFETZ)
          RC1=0.3*RC1
          RC4=0.3*RC4
      END IF
C
      SVMDF=RC1
      SVMI= RC2+RC3
      SVMDS=RC4
C
      IF(ISIG.EQ.0) GOTO 210
C                     FROM ERG TO EV
      TRAN=SQRT(9.57967E+11/A)
C               9.57967E+11 = 2.0*1.6022E-12/(2.0*A*1.6725E-24)
C                     PURE DISSOCIATION (FAST, 3 EV)
      SIGMDF=RC1/TRAN
C                     PURE DISSOCIATION (SLOW, 3 EV)
      SIGMDS=RC4/TRAN
C                     HALF DISSOCIATION AND HALF IONIZATION
      SIGMI=(RC2+RC3)/TRAN
C              (TO COMPUTE X-SECTIONS FOR H2-LIKE MOLECULES,
C               DIVIDE SIGMDF,SIGMDS AND SIGMI BY SQRT(E),
C               WHERE E IS THE ENERGY IN EV OF THE MOLECULE
C               COMPOSED OF TWO ATOMS OF MASS A EACH)
  210 CONTINUE
      RETURN
C
C
C=====================================================================
C
C     ERROR EXIT
C     =====
C
  300 WRITE(IUERR,305) IZ
  305 FORMAT(/' ***** ERROR: NIMBXS NON-HYDROGENIC SPECIES REQUESTED, CA
     *LLED FOR Z=',I3)
      CALL EXITN(1)
C
  310 WRITE(IUERR,315) IZ
  315 FORMAT(/' ***** ERROR: NIMBXS SPECIES NOT AVAILABLE FOR LOTZ, CALL
     *ED FOR Z=',I3)
      CALL EXITN(1)
C
  320 WRITE(IUERR,325) IZ
  325 FORMAT(/' ***** ERROR: NIMBXS SPECIES NOT FOUND IN DATA BLOCK, CAL
     *LED FOR Z=',I3)
      CALL EXITN(1)
C
      RETURN
C
      END
C
C======================================================================
      SUBROUTINE SUBNBR(NZONE,MEIBOR,LOCNBR,NEIBOR,LASTNB,IZOFRO,IZOTO,
     &                  LFRO,LTO)
C
C     GIVEN TWO ADJACENT ZONES, STORES THE INFORMATION
C
C     LOCNBR(IZO) = LOCATION IN VECTOR MEIBOR OF THE FIRST ADJACENT
C                   ZONE NUMBER FOUND
C
C     STRUCTURE OF VECTOR MEIBOR:
C     SEQUENCE OF PAIRS OF THE TYPE
C     (INDEX OF AN ADJACENT ZONE , LOCATION OF NEXT ADJACENT ZONE)
C     SO IN ORDER TO FIND ALL ZONES ADJACENT TO ZONE IZO, DO:
C        NEIBOR(LOCNBR(IZO)) = LOCATION OF INDEX OF FIRST ZONE FOUND
C                              TO BE ADJACENT TO IZO
C        NEIBOR(LOCNBR(IZO))+1 = LOCATION OF INDEX OF SECOND ZONE
C                                ADJACENT TO IZO
C     AND SO ON
C
C     IZOFRO,IZOTO = LOCATIONS WHERE TO STORE QUANTITY
C
      DIMENSION LOCNBR(NZONE),NEIBOR(MEIBOR)
      COMMON/IOFILE/IN,IOUT,IUERR,IARK,IPUNCH,IGMT,ITRMT,ITAPIO(2)
C
      IF(IZOFRO.LE.0 .OR. IZOTO.LE.0) THEN
        WRITE(IUERR,10) IZOFRO,IZOTO
   10   FORMAT(' ***** ERROR - S.R. SUBNBR: IZOFRO=',I5,' IZOTO=',I5)
        CALL EXITN(1)
      ENDIF
C
      DO 160 IGO=1,2
        IF(IGO.EQ.1) THEN
          IZO1=IZOFRO
          IZO2=IZOTO
        ELSE
          IZO2=IZOFRO
          IZO1=IZOTO
        ENDIF
        LOC=LOCNBR(IZO1)
        IF(LOC.LE.0) GOTO 120
C
  100   IF(LOC.GE.MEIBOR) GOTO 170
        IF(NEIBOR(LOC).EQ.IZO2) GOTO 140
        LOCL=LOC+1
        LOC=NEIBOR(LOCL)
        IF(LOC.GT.0) GOTO 100
C
  120   LASTNB=LASTNB+2
        IF(LASTNB.GT.MEIBOR) THEN
          WRITE(IUERR,*) ' NEIGHBOURS ARRAY FULL'
          CALL EXITN(1)
        ENDIF
        LOC=LASTNB-1
        IF(LOCNBR(IZO1).EQ.0) THEN
          LOCNBR(IZO1)=LOC
        ELSE
          NEIBOR(LOCL)=LOC
        ENDIF
        NEIBOR(LOC)=IZO2
        NEIBOR(LOC+1)=0
  140   CONTINUE
        IF(IGO.EQ.1) THEN
          LFRO=(LOC+1)/2
        ELSE
          LTO=(LOC+1)/2
        ENDIF
C
  160 CONTINUE
      RETURN
C
  170 CONTINUE
      WRITE(IUERR,*) ' ***** SUBNBR ERROR: DIMENSION EXCEEDED'
      CALL EXITN(1)
      RETURN
      END
C
C=======================================================================
      SUBROUTINE GETNBR(NZONE,MEIBOR,LOCNBR,NEIBOR,IZO,
     &                  N,IZADJ,MIZAD,LZADJ,MLZAD)
      DIMENSION LOCNBR(NZONE),NEIBOR(MEIBOR),IZADJ(MIZAD),LZADJ(MLZAD)
      COMMON/IOFILE/IN,IOUT,IUERR,IARK,IPUNCH,IGMT,ITRMT,ITAPIO(2)
C
      N=0
      LOC=LOCNBR(IZO)
  100 IF(LOC.LE.0) GOTO 120
      IF(LOC.GE.MEIBOR) GOTO 130
      N=N+1
      IF(N.GT.MIZAD .OR. N.GT.MLZAD) GOTO 130
      IZADJ(N)=NEIBOR(LOC)
      LZADJ(N)=(LOC+1)/2
      LOC=NEIBOR(LOC+1)
      GOTO 100
C
  120 CONTINUE
      RETURN
C
  130 CONTINUE
      WRITE(IUERR,*) ' ***** GETNBR ERROR: DIMENSION EXCEEDED'
      CALL EXITN(1)
      RETURN
      END
C
C=======================================================================
      SUBROUTINE V0RELV(A,E,WX,WY,WZ,
     &                  TI,TE,FMACH,ATARG,CDX,CDY,CDZ,
     &                  EREL)
C
C I   A        = MASS OF NEUTRAL (AMU)
C I   E        = NEUTRAL ENERGY (EV)
C I   WX/Y/Z   = NEUTRAL DIRECTION COSINES
C I   TI       = ION TEMPERATURE (EV)
C I   TE       = ELECTRON TEMPERATURE
C I   FMACH    = MACH NUMBER OF PLASMA FLOW
C I   ATARG    = ION MASS (AMU)
C I   CDX/Y/Z  = FLOW DIRECTION COSINES
C O   EREL     = (V0-VI)**2/V0**2
C
C                    VELOCITY OF THE NEUTRAL
      S=SQRT(E/A)*1.3841E+06
      SX=S*WX
      SY=S*WY
      SZ=S*WZ
C
C                    MEAN RELATIVE VELOCITY BETWEEN FLOW AND NEUTRAL
      IF(FMACH.LE.0.0) THEN
        RV2=S**2
      ELSE
        R=SQRT( (TE+TI)/ATARG )*1.0E+06 * FMACH
C                               0.978729E+06
        RV2=(R*CDX-SX)**2+(R*CDY-SY)**2+(R*CDZ-SZ)**2
      ENDIF
C                    (V0-VI)**2/V0**2
      EREL = RV2/S**2
      RETURN
      END
C
C=======================================================================
      SUBROUTINE ADAS( IZ0    , IYR  , IDYR  , USER , IZMAX
     I               , IFORCE , ECUT , ICHAN , IOUT , IADAS
     I               , TE     , TI
     I               , DE     , NH   , DH    , HMASS
     O               , SA0    , SA   , RTA   , PTA0 , PTA
     O               , IER    )
      IMPLICIT NONE
C
C.......................................................................
C
C ROUTINE : ADAS
C
C VERSION : V1.R2.M0
C
C PURPOSE : TO ACCESS THE ADAS ATOMIC DATABASE.
C
C INPUT   : (I*4) IZ0          = NUCLEAR CHARGE OF ELEMENT.
C           (I*4) IYR          = YEAR OF ADAS FILES BEING ACCESSED.
C           (I*4) IDYR         = DEFAULT YEAR TO BE USED IF A REQUESTED
C                                ADAS 'IYR' FILE DOES NOT EXIST.
C           (C**) USER         = USERID WHERE ADAS FILES ARE STORED.
C           (I*4) IZMAX        = MAX. NUMBER OF CHARGED STATES ALLOWED
C           (I*4) IFORCE       = 0 --- DISALLOW 'ADASRE' ROUTINE TO READ
C                                      THE SAME 'IZ0' DATA TWICE.
C                              = 1 --- ALLOW 'ADASRE' ROUTINE TO READ
C                                      THE SAME 'IZ0' DATA AGAIN AND SO
C                                      OVERWRITE THE PREVIOUS READING.
C           (R*4) ECUT         = ENERGY CUT-OFF (EV) (USED TO ACCESS
C                                ENERGY FILTERED RADIATED POWER DATA
C                                SETS - SEE IEVCUT BELOW)
C           (I*4) ICHAN        = INPUT CHANNEL FOR USE IN READ ROUTINE
C           (I*4) IOUT         = OUTPUT CHANNEL FOR MESSAGES/ERRORS
C           (I*4) IADAS        = 0 --- USE 'ADASITX'
C                              = 1 --- USE 'ADASIT'
C
C           (R*4) TE           = ELECTRON TEMPERATURE (EV) AT WHICH THE
C                                ADAS COEFFICIENTS ARE REQUIRED
C           (R*4) TI           = ION TEMPERATURE (EV) AT WHICH THE
C                                ADAS COEFFICIENTS ARE REQUIRED
C           (R*4) DE           = ELECTRON DENSITY (CM-3) AT WHICH THE
C                                ADAS COEFFICIENTS ARE REQUIRED
C           (I*4) NH           = NO. OF NEUTRAL H ISOTOPES
C           (R*4) DH(NH)       = HYDROGEN DENSITY (CM-3) AT WHICH THE
C                                ADAS COEFFICIENTS ARE REQUIRED
C           (R*4) HMASS(NH)    = MASS OF HYDROGEN ISOTOPE (AMU)
C
C OUTPUT  : (R*4) SA0          = NEUTRAL IONIS. RATE COEFFT.(CM3 S-1)
C           (R*4) SA()         = ION IONIS. RATE COEFFT.    (CM3 S-1)
C           (R*4) RTA()        = ION RECOMB. RATE COEFFT.   (CM3 S-1)
C           (R*4) PTA0         = NEUTRAL RADIATED POWER  (WATTS CM3 S-1)
C           (R*4) PTA()        = ION RADIATED POWER      (WATTS CM3 S-1)
C
C           (I*4) IER          =     0 --- ROUTINE SUCCESSFUL
C                              = 10000 --- IZMAX .GT. IZDIM
C                              = 10001 --- IADAS ROUTINE DOES NOT EXIST
C                    (ADASRE)  = 10010 --- IZ0(INPUT) <> IZ(ADAS)
C                    (   "  )  = 10020 --- ITDIM SET TOO LOW
C                    (   "  )  = 10030 --- IDDIM SET TOO LOW
C                    (   "  )  = 10040 --- ISDIM SET TOO LOW
C                    (   "  )  = 10050 --- REQUESTED ELEMENT
C                                          NOT SUPPORTED
C                    (   "  )  = 10060 --- IYEAR AND IDYEAR FILES
C                                          NOT FOUND
C                    (ADASITX) = 10110 --- REQUIRED ELEMENT (IZ0) HAS
C                                          NOT BEEN EXTRACTED FROM ADAS
C                                          'ISONUCLEAR MASTER FILES'
C                    (   "   ) = 10120 --- FRACTH(1)+...+FRACTH(3)
C                                          DOES NOT SUM TO 1.0
C
C PROGRAM : (I*4) IZDIM        <= IZMAX
C           (R*4) HFRAC()      = HFRAC(1) : HYDROGEN  FUEL FRACTION
C                                HFRAC(2) : DEUTERIUM FUEL FRACTION
C                                HFRAC(3) : TRITIUM   FUEL FRACTION
C
C ROUTINE : ADASRE, ADASITX, ADASIT
C
C AUTHOR  : J.SPENCE  (K1/0/80)  EXT.4866
C           JET
C
C DATE    : V1.R1.M0 --- 07/04/94 --- CREATION
C           V1.R2.M0 --- 22/05/96 --- MORE IFAIL TRAPPING FROM 'ADASRE'
C
C.......................................................................
C
      INTEGER*4    IZDIM
      PARAMETER  ( IZDIM = 28 )
C
      INTEGER*4    IZ0    , IYR        , IDYR       , IZMAX
     &           , IFORCE , ICHAN      , IOUT       , IADAS
     &           , IER    , I          , IH         , NH
C
      REAL*4       HMASS(NH)  , HFRAC(3)   , ECUT
     &           , TE     , TI         , DE         , DH(NH)
     &           , SA0    , SA(IZMAX)  , RTA(IZMAX)
     &           , PTA0   , PTA(IZMAX) , DHTOT      , TRAN
C
      CHARACTER    USER*(*)
C
      INTEGER*4    IYEAR  , IDYEAR
      CHARACTER*80 USERID
      COMMON / CADAS1 / IYEAR , IDYEAR , USERID
C
C----------------------------- CHECKS & INITIALISE ---------------------
C
      IF( IZMAX.GT.IZDIM ) THEN
          WRITE(IOUT,1000) IZMAX , IZDIM
          IER = 10000
          GOTO 9999
      END IF
C
      IYEAR     = IYR
      IDYEAR    = IDYR
      USERID    = USER
C
      HFRAC(1) = 0.0E0
      HFRAC(2) = 0.0E0
      HFRAC(3) = 0.0E0
      DHTOT    = 0.0E0
      DO IH=1,NH
        IF( HMASS(IH).GT.0.9 .AND. HMASS(IH).LT.1.1 ) THEN
C         H
          DHTOT = DHTOT + DH(IH)
          HFRAC(1) = HFRAC(1)+DH(IH)
        ELSE IF( HMASS(IH).GT.1.9 .AND. HMASS(IH).LT.2.1 ) THEN
C         D
          DHTOT = DHTOT + DH(IH)
          HFRAC(2) = HFRAC(2)+DH(IH)
        ELSE IF( HMASS(IH).GT.2.4 .AND. HMASS(IH).LT.2.6 ) THEN
C         DT
          DHTOT = DHTOT + DH(IH)
          HFRAC(2) = HFRAC(2)+DH(IH)*0.5
          HFRAC(3) = HFRAC(3)+DH(IH)*0.5
        ELSE IF( HMASS(IH).GT.2.9 .AND. HMASS(IH).LT.3.1 ) THEN
C         T
          DHTOT = DHTOT + DH(IH)
          HFRAC(3) = HFRAC(3)+DH(IH)
        ENDIF
      ENDDO
      IF(NH.LE.0 .OR. DHTOT.LE.0.0) THEN
C       DUMMY
        HFRAC(1)=1.0
      ELSE
        TRAN = HFRAC(1)+HFRAC(2)+HFRAC(3)
        DO I=1,3
          HFRAC(I)=HFRAC(I)/TRAN
        ENDDO
      ENDIF
C
C----------------------------- READ ADAS -------------------------------
C
      CALL ADASRE( IZ0 , ECUT , ICHAN , IOUT , IFORCE , IER )
C
      IF( IER.NE.0 ) THEN
          IF( IER.EQ.1 ) THEN
              WRITE(IOUT,1010) IZ0
          ELSE IF( IER.EQ.2 ) THEN
              WRITE(IOUT,1020) 'ITDIM'
          ELSE IF( IER.EQ.3 ) THEN
              WRITE(IOUT,1020) 'IDDIM'
          ELSE IF( IER.EQ.4 ) THEN
              WRITE(IOUT,1020) 'ISDIM'
          ELSE IF( IER.EQ.5 ) THEN
              WRITE(IOUT,1030) IZ0
          ELSE IF( IER.EQ.6 ) THEN
              WRITE(IOUT,1040) IYR , IDYR
          ELSE IF( IER.EQ.7 ) THEN
              WRITE(IOUT,1080)
          ELSE IF( IER.EQ.8 ) THEN
              WRITE(IOUT,1090)
          ELSE
              WRITE(IOUT,1099) 'ADASRE' , IER
          END IF
          IER = 10000 + 10*IER
          GOTO 9999
      END IF
C
C----------------------------- USE  ADAS -------------------------------
C
      IF( IADAS.EQ.0 ) THEN
          CALL ADASITX( IZ0 , IOUT
     I                , TE  , TI    , DE     , DHTOT, HFRAC(1)
     O                , SA0 , SA(1) , RTA(1) , PTA0 , PTA(1)
     O                , IER  )
      ELSE IF( IADAS.EQ.1 ) THEN
          CALL ADASIT ( IZ0 , IOUT
     I                , TE  , TI    , DE     , DHTOT, HFRAC(1)
     O                , SA0 , SA(1) , RTA(1) , PTA0 , PTA(1)
     O                , IER  )
      ELSE
          WRITE(IOUT,1050)
          IER = 10001
          GOTO 9999
      END IF
C
      IF( IER.NE.0 ) THEN
          IF( IER.EQ.1 ) THEN
              WRITE(IOUT,1060) IZ0
          ELSE IF( IER.EQ.2 ) THEN
              WRITE(IOUT,1070) HFRAC(1)+HFRAC(2)+HFRAC(3)
          ELSE
              WRITE(IOUT,1099) 'ADASITX' , IER
          END IF
          IER = 10100 + 10*IER
          GOTO 9999
      END IF
C
C----------------------------- FORMAT ----------------------------------
C
 1000 FORMAT( / ' *** ERROR *** ADAS : IZMAX (',I3,') .GT. IZDIM (',I3
     &        , ')'
     &        / '                      POSSIBLE OVERWRITE PROBLEM' / )
 1010 FORMAT( / ' *** ERROR *** ADASRE : IZ0 (',I3,') <> IZ (ADAS)' / )
 1020 FORMAT( / ' *** ERROR *** ADASRE : ',A,' SET TOO LOW.'
     &        / '                        CONSULT ADAS SUPERVISOR.' / )
 1030 FORMAT( / ' *** ERROR *** ADASRE : IZ0 (',I3,') NOT SUPPORTED' / )
 1040 FORMAT( / ' *** ERROR *** ADASRE : IYEAR (',I3,') & IDYEAR (',I3
     &        , ') FILES NOT FOUND' / )
 1050 FORMAT( / ' *** ERROR *** ADAS : IADAS (',I3,') ROUTINE IS NOT SUP
     &PORTED.' / )
 1060 FORMAT( / ' *** ERROR *** ADASITX : IZ0 (',I3,') HAS NOT BEEN EXTR
     &ACTED FROM ADAS FILES' / )
 1070 FORMAT( / ' *** ERROR *** ADASITX : HYDROGEN ISOTOPIC FRACTIONS ('
     &      , 1P , E12.4 , ') DO NOT SUM TO 1.0' / )
 1080 FORMAT( / ' *** ERROR *** ADASRE : UNABLE TO OPEN ADAS DATAFILE'/)
 1090 FORMAT( / ' *** ERROR *** ADASRE : NO. OF SPECIES > MAX ALLOWED'/)
 1099 FORMAT( / ' *** ERROR *** ' , A , ' : IFAIL = ' , I6
     &                                , ' CONSULT ADAS SUPERVISOR.' / )
C
C----------------------------- FORMAT ----------------------------------
C
      IER   = 0
C
 9999 RETURN
      END
C.......................................................................
C.......................................................................
      SUBROUTINE RWGENI(IRW,IERR)
      IMPLICIT REAL*8 (A-H,O-Z)
C----------------------------------(SEE SYMBOLS MEANING IN S.R. INPUT)
      INCLUDE 'pnimb'
      PARAMETER (MRG=MRGX ,MZN=MRG-2 ,MCH=41 ,MCC=MCCX, MWAC=13 )
      PARAMETER (MBS=MBSX ,MSD=MBS   ,MSC=2 )
      PARAMETER (MIO=3    ,MCP=6)
      PARAMETER (MEG=5    ,MIXS=10   ,MLEAK=9)
C---------------------------------------------------
      COMMON/CGEOM2/LLOCRE,LNUMBO,LIROR,LKR1,LKR2,LDATA,NUMR,LBASE,LTMA
     *             ,LLOCBO,IDBG,KLOOP,PINF,LKO,NOA,IST,NOREG,LVOL,LAREA
     *             ,LNUMR,LAIRC,LVOLTR,LLASTG,IRWGMT,NRTRU
      COMMON/GEOMR/NASCR,IREFL,A,B,C,EPS,ITYP,KLOCR,NVR
      PARAMETER ( NWCOMB=NWCOMX )
      COMMON/COMBIN/MA(NWCOMB)
      PARAMETER (MV=100)
      COMMON/REIZSO/NVRZ,IXRZ(MV),IYRZ(MV)
      COMMON/IOFILE/IN,IOUT,IUERR,IARK,IPUNCH,IGMT,ITRMT,ITAPIO(2)
C
      IERR=1
C
      IF(IRW.EQ.1) THEN
C               READ GEOMETRY
        IF(IGMT.LE.0) GOTO 200
        IF(IRWGMT.LT.1 .OR. IRWGMT.GT.2) GOTO 200
        REWIND IGMT
C           /CGEOM2/ (EXCEPT IRWGMT)
        READ(IGMT,IOSTAT=IERROR)
     *             LLOCRE,LNUMBO,LIROR,LKR1,LKR2,LDATA,NUMR,LBASE,LTMA
     *             ,LLOCBO,IDBG,KLOOP,PINF,LKO,NOA,IST,NOREG,LVOL,LAREA
     *             ,LNUMR,LAIRC,LVOLTR,LLASTG,NRTRU
        IF( IERROR.NE.0 ) GOTO 200
C           /GEOMR/
        READ(IGMT,IOSTAT=IERROR)
     *             NASCR,IREFL,A,B,C,EPS,ITYP,KLOCR,NVR
        IF( IERROR.NE.0 ) GOTO 200
C           /COMBIN/
        READ(IGMT,IOSTAT=IERROR) (MA(L),L=LBASE,LLASTG)
        IF( IERROR.NE.0 ) GOTO 200
C
C           /REIZSO/
        READ(IGMT,IOSTAT=IERROR)
     *              NVRZ,IXRZ,IYRZ
        IF( IERROR.NE.0 ) GOTO 200
C
        REWIND IGMT
        IERR=0
        WRITE(IUERR,*) ' GEOMETRY DATA READ FROM UNIT',IGMT
        WRITE(IUERR,*) ' RGENI:  LBASE=',LBASE,' LLASTG=',LLASTG
        WRITE(IUERR,*) '         LDATA=',LDATA,'   LTMA=',LTMA
C
      ELSE IF(IRW.EQ.2) THEN
C              WRITE GEOMETRY
        IF(IGMT.LE.0) GOTO 200
        IF(IRWGMT.LT.2 .OR. IRWGMT.GT.3) GOTO 200
        REWIND IGMT
C           /CGEOM2/ (EXCEPT IRWGMT)
        WRITE(IGMT,ERR=200)
     *             LLOCRE,LNUMBO,LIROR,LKR1,LKR2,LDATA,NUMR,LBASE,LTMA
     *             ,LLOCBO,IDBG,KLOOP,PINF,LKO,NOA,IST,NOREG,LVOL,LAREA
     *             ,LNUMR,LAIRC,LVOLTR,LLASTG,NRTRU
C           /GEOMR/ (EXCEPT IRWGMT)
        WRITE(IGMT,ERR=200)
     *             NASCR,IREFL,A,B,C,EPS,ITYP,KLOCR,NVR
C           /COMBIN/
        WRITE(IGMT,ERR=200) (MA(L),L=LBASE,LLASTG)
C
C           /REIZSO/
        WRITE(IGMT,ERR=200)
     *              NVRZ,IXRZ,IYRZ
C
        REWIND IGMT
        IERR=0
        WRITE(IUERR,*) ' GEOMETRY DATA WRITTEN ONTO UNIT',IGMT
        WRITE(IUERR,*) ' WGENI:  LBASE=',LBASE,' LLASTG=',LLASTG
        WRITE(IUERR,*) '         LDATA=',LDATA,'   LTMA=',LTMA
      ENDIF
C
  200 CONTINUE
      RETURN
      END
C.......................................................................
C.......................................................................
      SUBROUTINE HALPHA(MOL,DENSE,TEMPE,
     *                  RIONIS,RDISSO,HALRAD)
C
C                       H-ALPHA RADIATION
C
C     MOL     1-ATOM  2-MOLECULE
C     DENSE   ELECTRON DENSITY (CM(-3))
C     TEMPE   ELECTRON TEMPERATURE (EV)
C     RIONIS  IONISATION RATE (ATOM OR MOLECULE)
C     RDISSO  DISSOCIATION RATE (MOLECULE)
C
      IF     (MOL.EQ.1) THEN
C       H ATOM
        CALL HADATA(DENSE,TEMPE,BIA,ITRAN)
        HALRAD = BIA*RIONIS
      ELSE IF(MOL.EQ.2) THEN
C       H MOLECULE
COLD    BIM = 0.03
COLD    BDM = 0.007
COLD    HALRAD(K)=BIM*RIONIS+BDM*RDISSO
        CALL HADATM( TEMPE , YALFA )
        HALRAD = ( RDISSO + RIONIS ) * YALFA
      ELSE
        HALRAD = 0.0
      END IF
C
      RETURN
      END
C
C=======================================================================
      SUBROUTINE UNIVFE(A1,Z1,E1,A2,Z2,E)
C
C     COMPUTES ENERGY AFTER BACKSCATTERING USING UNIVERSAL FORMULAS
C
C
      DEN=SQRT(Z1**0.6666+Z2**0.6666)*Z1*Z2*(A1+A2)
      EPSKEV=E1*(0.0325*A2/DEN)
C                             REFLECTION COEFFICIENT RN
C                             -------------------------
      ALOGE=ALOG10(EPSKEV)
      RN=0.1885-0.2265*ALOGE
      RN=AMIN1(1.0,AMAX1(0.001,RN))
C                             ENERGY REFLECTION COEFFICIENT RE
C                             --------------------------------
      C=RANF()
      IF(C.LE.RN) THEN
        RE=0.07-0.18*ALOGE
        RE=AMIN1(1.0,AMAX1(0.001,RE))
        E=E1*RE/RN
      ELSE
        E=0.0
      ENDIF
CW    WRITE(6,*) ' UNIVFE A1,Z1,A2,Z2,RN',A1,Z1,A2,Z2,RN
CW    WRITE(6,*) ' UNIVFE A1=',A1,' Z1=',Z1,' E1=',E1
CW    WRITE(6,*) '        A2=',A2,' Z2=',Z2,'  E=',E
C
      RETURN
      END
C
C=======================================================================
C*DK TRIM
      SUBROUTINE TRIM
      IMPLICIT REAL*8 (A-H,O-Z)
C"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
C
C  D.REITER, FEB.95
C
C  THE CODE SEGMENT TRIM CARRIES OUT MONTE CARLO SURFACE REFLECTION
C  SAMPLING USING PRECOMPUTED TRIM FILES.
C  IT IS A CONDENSED FORM OF THE EIRENE CODE SURFACE REFLECTION
C  ROUTINE REFLEC:
C  D.REITER, JUEL-2599,(1992), KFA JUELICH REPORT
C  THE ALGORITHM IS DESCRIBED IN:
C  D.REITER ET AL., JUEL-2605,(1991) , KFA JUELICH REPORT
C
C  SUBROUTINE TRIM HAS OF TWO ENTRIES: RDTRIM AND REFTRIM
C  RDTRIM INITIALIZES THE PROCEDURE (TO BE CALLED ONCE)
C  REFTRIM RETURNS VELOCITY OF REFLECTED PARTICLES, GIVEN VELOCITY
C          OF INCIDENT PARTICLE
C  THE EIRENE ASSISTENT ROUTINE ROTATE IS ALSO ATTACHED
C
C
C"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
C
C  ENTRY RDTRIM:
C  THIS SECTION READS SELECTIVELY SOME
C  REFLECTION DATA PRODUCED BY MONTE CARLO CODES
C  INPUT:
C        IUN :                 NUMBER OF UNIT FROM WHICH FILES ARE READ
C        NFLR:                 NUMBER OF FILES THAT ARE READ
C        REFFIL(K), K=1,NFLR:  FILENAMES, EG. 'H_ON_FE',   ETC.
C        IOUT:                 OUTPUT STREAM
C        IWTEST:               >0: WRITE DATA ONTO UNIT IWTEST
C
C  OUTPUT:
C         THE COMMON BLOCK CREF IS FILLED WITH DATA NEEDED FOR
C         RANDOM SAMPLING FROM TRIM-FILES
C
C
C"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
C
C  ENTRY REFTRIM:
C  INPUT :
C         XMP,XCP,XMW,XCW: MASS AND NUCL.CHARGE NUMBERS,
C                  OF PROJECTILE (..P) AND SURFACE (..W)
C         E0TERM: NO REFLECTION FOR INCIDENT ENERGIES BELOW E0TERM (EV)
C                 (EG. 1.5*SURFACE TEMPERATURE)
C         PRFCF: FUDGE FACTOR TO SCALE REFLECTION PROBABILITY
C         EMINR,EMAXR: RANGE OF REFLECTED ENERGIES (EV)
C                 (EG.:0., AND E0, RESP.)
C         E0: INCIDENT ENERGY  (MODIFIED ON OUTPUT) (EV)
C         VELX,VELY,VELZ: INCIDENT SPEED UNIT VECTOR
C                         (MODIFIED ON OUTPUT)
C         CRTX,CRTY,CRTZ: OUTER SURFACE NORMAL UNIT VECTOR
C         IOUT:                 OUTPUT STREAM
C
C  OUTPUT:
C         IFLAG=0  O.K., REFLECTED PARTICLE IS RETURNED
C         IFLAG=10 ERROR
C         IFLAG=1  E0 OUT OF RANGE (TOO SMALL, E0>ERMIN)
C         IFLAG=2  NO REFLECTION: DECIDE: EMISSION OR PUMPING
C         IN CASE IFLAG=0: E0,VELX,VELY,VELZ ARE RETURNED
C
C"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
C......................................................................
C  DECLARATIONS
C......................................................................
C
      CHARACTER*72 REFFIL(*)
      PARAMETER (NHD6=4,NHD1=12,NHD2=7,NHD3=5,NHD4=5,NHD5=5)
      COMMON /CREF/
     R ENAR(12),DENAR(11),WIAR(7),DWIAR(6),RAAR(5),
     R DRAAR(4),
     R TM(NHD6),TC(NHD6),WM(NHD6),WC(NHD6),ERDC(NHD6),
     I INE,INEM,INW,INWM,INR,INRM,
     .          HFTR0(NHD1,NHD2,NHD6),
     .          HFTR1(NHD1,NHD2,NHD3,NHD6),
     .          HFTR2(NHD1,NHD2,NHD3,NHD4,NHD6),
     .          HFTR3(NHD1,NHD2,NHD3,NHD4,NHD5,NHD6),
     .          HFTR3F(NHD5)
C
      PARAMETER (MPAIR=10)
      DIMENSION FPAIR(MPAIR,4)
C
      EREDC(XMTT,XCTT,XMPP,XCPP)=CON/EOQ*XMTT/((XMPP+XMTT)*XCPP*XCTT*
     .                       SQRT(XCPP**ZWDR+XCTT**ZWDR))
      DATA CON/0.4685/,EOQ/14.39/,ZWDR/0.666667/
C
C
C
C  ...................................................................
C
      ENTRY RDTRIM(IUN,NFLR,REFFIL,IOUT,IWTEST)
C
C  ...................................................................
C
      INE=12
      INW=7
      INR=5
C
      IF (NFLR.GT.NHD6) THEN
        WRITE (IOUT,*)'ERROR IN PARAMETER STATEMENT FOR REFLECTION DATA'
        WRITE (IOUT,*)'INCREASE PARAMETER NHD6'
        CALL EXITN(1)
      ENDIF
C
      WRITE (IOUT,'(/1X,''TRIM FILES READ:'')')
      DO 9 IFILE=1,NFLR
        OPEN (UNIT=IUN,FILE=REFFIL(IFILE))
C
        READ (IUN,*)
        READ (IUN,*)
        READ (IUN,*)
        READ (IUN,*)
        DO 8 I1=1,INE
          DO 7 I2=1,INW
            READ (IUN,*)
            READ (IUN,*)
            READ (IUN,*) TC(IFILE),TM(IFILE),WC(IFILE),WM(IFILE),
     .                   ENAR(I1),WIAR(I2),HFTR0(I1,I2,IFILE)
            READ (IUN,*)
            READ (IUN,*) (HFTR1(I1,I2,I3,IFILE),I3=1,INR)
            READ (IUN,*)
            DO 5 I3=1,INR
              READ (IUN,*) (HFTR2(I1,I2,I3,I4,IFILE),I4=1,INR)
    5       CONTINUE
            READ (IUN,*)
            DO 6 I3=1,INR
            DO 6 I4=1,INR
              READ (IUN,*) (HFTR3(I1,I2,I3,I4,I5,IFILE),I5=1,INR)
    6       CONTINUE
    7     CONTINUE
    8   CONTINUE
        WRITE (IOUT,'(1X,A72)') REFFIL(IFILE)
        CLOSE (UNIT=IUN)
    9 CONTINUE
C
      INEM=INE-1
      DO 11 I=1,INEM
        DENAR(I)=1./(ENAR(I+1)-ENAR(I))
   11 CONTINUE
      PIA=4.*ATAN(1.)
      PID180=ATAN(1.)/45.
      DO 12 I=1,INW
        WIAR(I)=COS(WIAR(I)*PID180)
   12 CONTINUE
      INWM=INW-1
      DO 13 I=1,INWM
        DWIAR(I)=1./(WIAR(I+1)-WIAR(I))
   13 CONTINUE
      INRM=INR-1
      RAAR(1)=0.1
      RAAR(2)=0.3
      RAAR(3)=0.5
      RAAR(4)=0.7
      RAAR(5)=0.9
      DO 15 I=1,INRM
        DRAAR(I)=1./(RAAR(I+1)-RAAR(I))
   15 CONTINUE
C
C  SET FACTORS FOR REDUCED ENERGY SCALING FOR ALL TARGET/PROJECTILE
C  COMBINATIONS AVAILABLE IN DATABASE MODEL
C
      DO 23 J=1,NFLR
        ERDC(J)=EREDC(WM(J),WC(J),TM(J),TC(J))
   23 CONTINUE
C
C  SET UNIFORM DISTRIBUTION OF AZIMUTAL ANGLE FOR DATABASE MODEL
C  FOR PERPENDICULAR INCIDENCE (INDW=1)
C
      DO 24 INDR3=1,INR
        HFTR3F(INDR3)=COS(PIA*(1.-RAAR(INDR3)))
   24 CONTINUE
C
      IPAIR=0
C
      IF (IWTEST.LE.0) RETURN
C
      DO 55 IFILE=1,NFLR
        WRITE (IWTEST,'(1X,A72,///1X)') REFFIL(IFILE)
        DO 54 I1=1,INE
          DO 53 I2=1,INW
            WRITE(IWTEST,'(//1X,F5.0,1X,F6.2,1X,F5.0,1X,F6.2,1P,3E10.2)'
     .           )TC(IFILE),TM(IFILE),WC(IFILE),WM(IFILE),
     .            ENAR(I1),WIAR(I2),HFTR0(I1,I2,IFILE)
            WRITE(IWTEST,'(1X)')
            WRITE(IWTEST,'(1P,5E13.5)') (HFTR1(I1,I2,I3,IFILE),I3=1,INR)
            WRITE(IWTEST,'(1X)')
            WRITE(IWTEST,'(1P,5E13.5)') ((HFTR2(I1,I2,I3,I4,IFILE),
     .                                 I4=1,INR),I3=1,INR)
            WRITE(IWTEST,'(1X)')
            WRITE(IWTEST,'(1P,5E13.5)') (((HFTR3(I1,I2,I3,I4,I5,IFILE),
     .                                 I5=1,INR),I4=1,INR),I3=1,INR)
   53     CONTINUE
   54   CONTINUE
        WRITE (IWTEST,'(///1X)')
   55 CONTINUE

      RETURN
C
C................................................................
C
      ENTRY REFTRIM (XMP,XCP,XMW,XCW,E0TERM,PRFCF,
     .               NFLR,EMINR,EMAXR,
     .               E0,VELX,VELY,VELZ,CRTX,CRTY,CRTZ,IFLAG,IOUT)
C
C................................................................
C
C
C   COSINE OF ANGLE OF INCIDENCE
C
      COSIN=VELX*CRTX+VELY*CRTY+VELZ*CRTZ
      IF (COSIN.LT.0.) THEN
        IFLAG=10
        RETURN
      ENDIF
C
C   NO REFLECTION OF FAST ATOMS FOR INCIDENT ENERGY BELOW ERMIN
C
C   THERMAL PARTICLE MODEL IS CALLED
      IF (E0.LE.E0TERM) THEN
        IFLAG=1
        RETURN
      ENDIF
C
C   FACTOR FOR CONVERSION TO REDUCED ENERGY
      EREDUC=EREDC(XMW,XCW,XMP,XCP)
C
C
C   CHECK IF WALL REFLECTION DATA FOR XMP/XCP INCIDENT ON
C   XMW/XCW ARE AVAILABLE
C
      EQTO=1.D40
      EFCT=1.
      DO 80 IFILE=1,NFLR
        IF (ABS(ERDC(IFILE)-EREDUC).LE.1.D-12) GOTO 90
        EQT=EREDUC/ERDC(IFILE)
        ETEST=ABS(EQT-1.)
        IF (ETEST.LT.EQTO) THEN
          ISAVE=IFILE
          EQTO=ETEST
          EQSAVE=EQT
        ENDIF
   80 CONTINUE
      IF(IPAIR.EQ.0) GOTO 84
      IF(IPAIR.GT.MPAIR) GOTO 86
      DO 83 I=1,IPAIR
        IF(XCP.EQ.FPAIR(I,1) .AND.
     &     XMP.EQ.FPAIR(I,2) .AND.
     &     XCW.EQ.FPAIR(I,3) .AND.
     &     XMW.EQ.FPAIR(I,4) ) GOTO 86
   83 CONTINUE
   84 IPAIR=IPAIR+1
      FPAIR(IPAIR,1)=XCP
      FPAIR(IPAIR,2)=XMP
      FPAIR(IPAIR,3)=XCW
      FPAIR(IPAIR,4)=XMW
      WRITE(IOUT,85) XCP,XMP,XCW,XMW,EREDUC,
     &               TC(ISAVE),TM(ISAVE),WC(ISAVE),WM(ISAVE),
     &               ERDC(ISAVE)
   85 FORMAT(/' TRIM REFLECTION DATA REQUIRED BUT NOT AVAILABLE'
     &       /' FOR THE PROJECTILE/TARGET PAIR'
     &       /5X,F5.2,F7.2,3X,F5.2,F7.2
     &       /' (EREDUC=',1P,E10.4,0P,')'
     &       /' REDUCED ENERGY FORMULAS ARE APPLIED WITH THE DATA'
     &       /' FOR THE PROJECTILE/TARGET PAIR'
     &       /5X,F5.2,F7.2,3X,F5.2,F7.2
     &       /' (EREDUC=',1P,E10.4,0P,')' )
   86 CONTINUE
      IFILE=ISAVE
      EFCT=EQSAVE
      E0=E0*EFCT
C
   90 CONTINUE
C
C  REFLECTION PROBABILITY
C
      DO 100 I=2,INEM
        INDEP=I
        IF (E0.LE.ENAR(I)) GOTO 101
  100 CONTINUE
      INDEP=INE
  101 INDE=INDEP-1
C
      DO 103 I=2,INWM
        INDWP=I
        IF (COSIN.GE.WIAR(I)) GOTO 104
  103 CONTINUE
      INDWP=INW
  104 INDW=INDWP-1
C
      RO1=(E0-ENAR(INDE))*DENAR(INDE)
      RO2=(COSIN-WIAR(INDW))*DWIAR(INDW)
C
      RF1=HFTR0(INDE,INDW,IFILE)
      RF1=RF1+RO1*(HFTR0(INDEP,INDW,IFILE)-RF1)
      RF2=HFTR0(INDE,INDWP,IFILE)
      RF2=RF2+RO1*(HFTR0(INDEP,INDWP,IFILE)-RF2)
C
      RPROB=RF1+RO2*(RF2-RF1)
      RPROB=RPROB*PRFCF
C
C   DECIDE IF PARTICLE IS TO BE REFLECTED OR IF THE "THERMAL
C   PARTICLE-MODEL" IS CALLED
C
      FR1=DRANF()
C  THERMAL PARTICLE MODEL
      IF (FR1.GE.RPROB) THEN
        IFLAG=2
        RETURN
      ENDIF
C
C  ENERGY OF REFLECTED PARTICLE
C
      ZEP1=DRANF()
      DO 105 I=2,INRM
        INDR1P=I
        IF (ZEP1.LE.RAAR(I)) GOTO 106
  105 CONTINUE
      INDR1P=INR
  106 INDR1=INDR1P-1
C
      RO3=(ZEP1-RAAR(INDR1))*DRAAR(INDR1)
C
      RF1=HFTR1(INDE,INDW,INDR1,IFILE)
      RF1=RF1+RO1*(HFTR1(INDEP,INDW,INDR1,IFILE)-RF1)
      RF2=HFTR1(INDE,INDWP,INDR1,IFILE)
      RF2=RF2+RO1*(HFTR1(INDEP,INDWP,INDR1,IFILE)-RF2)
      RF3=HFTR1(INDE,INDW,INDR1P,IFILE)
      RF3=RF3+RO1*(HFTR1(INDEP,INDW,INDR1P,IFILE)-RF3)
      RF4=HFTR1(INDE,INDWP,INDR1P,IFILE)
      RF4=RF4+RO1*(HFTR1(INDEP,INDWP,INDR1P,IFILE)-RF4)
C
      RFF1=RF1+RO2*(RF2-RF1)
      RFF2=RF3+RO2*(RF4-RF3)
C
      E0=RFF1+RO3*(RFF2-RFF1)
      E0=MAX(E0,EMINR)
      E0=MIN(E0,EMAXR)
      E0=E0/EFCT
C
C  POLAR ANGLE OF REFLECTION
C
      ZEP1=DRANF()
      DO 107 I=2,INRM
        INDR2P=I
        IF (ZEP1.LE.RAAR(I)) GOTO 108
  107 CONTINUE
      INDR2P=INR
  108 INDR2=INDR2P-1
C
      RO4=(ZEP1-RAAR(INDR2))*DRAAR(INDR2)
C
      RF1=HFTR2(INDE,INDW,INDR1,INDR2,IFILE)
      RF1=RF1+RO1*(HFTR2(INDEP,INDW,INDR1,INDR2,IFILE)-RF1)
      RF2=HFTR2(INDE,INDWP,INDR1,INDR2,IFILE)
      RF2=RF2+RO1*(HFTR2(INDEP,INDWP,INDR1,INDR2,IFILE)-RF2)
      RF3=HFTR2(INDE,INDW,INDR1P,INDR2,IFILE)
      RF3=RF3+RO1*(HFTR2(INDEP,INDW,INDR1P,INDR2,IFILE)-RF3)
      RF4=HFTR2(INDE,INDWP,INDR1P,INDR2,IFILE)
      RF4=RF4+RO1*(HFTR2(INDEP,INDWP,INDR1P,INDR2,IFILE)-RF4)
      RF5=HFTR2(INDE,INDW,INDR1,INDR2P,IFILE)
      RF5=RF5+RO1*(HFTR2(INDEP,INDW,INDR1,INDR2P,IFILE)-RF5)
      RF6=HFTR2(INDE,INDWP,INDR1,INDR2P,IFILE)
      RF6=RF6+RO1*(HFTR2(INDEP,INDWP,INDR1,INDR2P,IFILE)-RF6)
      RF7=HFTR2(INDE,INDW,INDR1P,INDR2P,IFILE)
      RF7=RF7+RO1*(HFTR2(INDEP,INDW,INDR1P,INDR2P,IFILE)-RF7)
      RF8=HFTR2(INDE,INDWP,INDR1P,INDR2P,IFILE)
      RF8=RF8+RO1*(HFTR2(INDEP,INDWP,INDR1P,INDR2P,IFILE)-RF8)
C
      RFF1=RF1+RO2*(RF2-RF1)
      RFF2=RF3+RO2*(RF4-RF3)
      RFF3=RF5+RO2*(RF6-RF5)
      RFF4=RF7+RO2*(RF8-RF7)
C
      RFFF1=RFF1+RO3*(RFF2-RFF1)
      RFFF2=RFF3+RO3*(RFF4-RFF3)
C
      ZCPHI=RFFF1+RO4*(RFFF2-RFFF1)
C  LIMIT POLAR ANGLE TO 85. DEGREES
C  (IE. 5 DEGREES AGAINST SURFACE TANGENTIAL PLANE)
      ZCPHI=MIN(0.999999D0,MAX(0.08716D0,ZCPHI))
      ZSPHI=SQRT(1.0D0-ZCPHI*ZCPHI)
C
C  AZIMUTAL ANGLE OF REFLECTION
C
      ZEP1=DRANF()
      DO 109 I=2,INRM
         INDR3P=I
         IF (ZEP1.LE.RAAR(I)) GOTO 110
  109 CONTINUE
      INDR3P=INR
  110 INDR3=INDR3P-1
C
      RO5=(ZEP1-RAAR(INDR3))*DRAAR(INDR3)
C
      IF (INDW.EQ.1) THEN
        RF1=HFTR3F(INDR3)
        RF3=RF1
        RF5=RF1
        RF7=RF1
        RF9=HFTR3F(INDR3P)
        RF11=RF9
        RF13=RF9
        RF15=RF9
      ELSE
        RF1=HFTR3(INDE,INDW,INDR1,INDR2,INDR3,IFILE)
        RF1=RF1+RO1*(HFTR3(INDEP,INDW,INDR1,INDR2,INDR3,IFILE)-RF1)
        RF3=HFTR3(INDE,INDW,INDR1P,INDR2,INDR3,IFILE)
        RF3=RF3+RO1*(HFTR3(INDEP,INDW,INDR1P,INDR2,INDR3,IFILE)-RF3)
        RF5=HFTR3(INDE,INDW,INDR1,INDR2P,INDR3,IFILE)
        RF5=RF5+RO1*(HFTR3(INDEP,INDW,INDR1,INDR2P,INDR3,IFILE)-RF5)
        RF7=HFTR3(INDE,INDW,INDR1P,INDR2P,INDR3,IFILE)
        RF7=RF7+RO1*(HFTR3(INDEP,INDW,INDR1P,INDR2P,INDR3,IFILE)-RF7)
        RF9=HFTR3(INDE,INDW,INDR1,INDR2,INDR3P,IFILE)
        RF9=RF9+RO1*(HFTR3(INDEP,INDW,INDR1,INDR2,INDR3P,IFILE)-RF9)
        RF=HFTR3(INDE,INDW,INDR1P,INDR2,INDR3P,IFILE)
        RF11=RF+RO1*(HFTR3(INDEP,INDW,INDR1P,INDR2,INDR3P,IFILE)-RF)
        RF=HFTR3(INDE,INDW,INDR1,INDR2P,INDR3P,IFILE)
        RF13=RF+RO1*(HFTR3(INDEP,INDW,INDR1,INDR2P,INDR3P,IFILE)-RF)
        RF=HFTR3(INDE,INDW,INDR1P,INDR2P,INDR3P,IFILE)
        RF15=RF+RO1*(HFTR3(INDEP,INDW,INDR1P,INDR2P,INDR3P,IFILE)-RF)
      ENDIF
C
      RF2=HFTR3(INDE,INDWP,INDR1,INDR2,INDR3,IFILE)
      RF2=RF2+RO1*(HFTR3(INDEP,INDWP,INDR1,INDR2,INDR3,IFILE)-RF2)
      RF4=HFTR3(INDE,INDWP,INDR1P,INDR2,INDR3,IFILE)
      RF4=RF4+RO1*(HFTR3(INDEP,INDWP,INDR1P,INDR2,INDR3,IFILE)-RF4)
      RF6=HFTR3(INDE,INDWP,INDR1,INDR2P,INDR3,IFILE)
      RF6=RF6+RO1*(HFTR3(INDEP,INDWP,INDR1,INDR2P,INDR3,IFILE)-RF6)
      RF8=HFTR3(INDE,INDWP,INDR1P,INDR2P,INDR3,IFILE)
      RF8=RF8+RO1*(HFTR3(INDEP,INDWP,INDR1P,INDR2P,INDR3,IFILE)-RF8)
      RF10=HFTR3(INDE,INDWP,INDR1,INDR2,INDR3P,IFILE)
      RF10=RF10+RO1*(HFTR3(INDEP,INDWP,INDR1,INDR2,INDR3P,IFILE)-RF10)
      RF12=HFTR3(INDE,INDWP,INDR1P,INDR2,INDR3P,IFILE)
      RF12=RF12+RO1*(HFTR3(INDEP,INDWP,INDR1P,INDR2,INDR3P,IFILE)-RF12)
      RF14=HFTR3(INDE,INDWP,INDR1,INDR2P,INDR3P,IFILE)
      RF14=RF14+RO1*(HFTR3(INDEP,INDWP,INDR1,INDR2P,INDR3P,IFILE)-RF14)
      RF16=HFTR3(INDE,INDWP,INDR1P,INDR2P,INDR3P,IFILE)
      RF16=RF16+RO1*(HFTR3(INDEP,INDWP,INDR1P,INDR2P,INDR3P,IFILE)-RF16)
C
      RFF1=RF1+RO2*(RF2-RF1)
      RFF2=RF3+RO2*(RF4-RF3)
      RFF3=RF5+RO2*(RF6-RF5)
      RFF4=RF7+RO2*(RF8-RF7)
      RFF5=RF9+RO2*(RF10-RF9)
      RFF6=RF11+RO2*(RF12-RF11)
      RFF7=RF13+RO2*(RF14-RF13)
      RFF8=RF15+RO2*(RF16-RF15)
C
      RFFF1=RFF1+RO3*(RFF2-RFF1)
      RFFF2=RFF3+RO3*(RFF4-RFF3)
      RFFF3=RFF5+RO3*(RFF6-RFF5)
      RFFF4=RFF7+RO3*(RFF8-RFF7)
C
      RFFFF1=RFFF1+RO4*(RFFF2-RFFF1)
      RFFFF2=RFFF3+RO4*(RFFF4-RFFF3)
C
      ZCTHET=RFFFF1+RO5*(RFFFF2-RFFFF1)
      ZCTHET=MAX(-.999999D0,MIN(0.999999D0,ZCTHET))
      ZSTHET=SQRT(1.0D0-ZCTHET*ZCTHET)
      ZSTHET=ZSTHET*SIGN(1.0D0,(DRANF()-0.5D0))
C
      VX=-ZCPHI
      VY=ZSPHI*ZSTHET
      VZ=ZSPHI*ZCTHET
      IF (COSIN.GT.0.999999D0) THEN
        CALL ROTATF (VELX,VELY,VELZ,VX,VY,VZ,CRTX,CRTY,CRTZ)
      ELSE
        CALL ROTATE (VELX,VELY,VELZ,VX,VY,VZ,CRTX,CRTY,CRTZ,COSIN)
      ENDIF
      IFLAG=0
C
      RETURN
      END
C
C*DK ROTATE
      SUBROUTINE ROTATE(VLABX,VLABY,VLABZ,VLOCX,VLOCY,VLOCZ,
     .                  CX,CY,CZ,CS)
      IMPLICIT REAL*8 (A-H,O-Z)
C   VLAB IST DIE RICHTUNG DES EINFLIEGENDEN TEILCHENS IM LABORSYSTEM
C   VLOC IST DIE RICHTUNG DES REFLEKTIERTEN TEILCHENS IM LOKALEN SYSTEM
C   C IST DIE POSITIVE X RICHTUNG IM LOKALEN SYSTEM
C   ES WIRD VLOC INS LABORSYSTEM ZURUECKTRANSFORMIERT UND ALS VLAB
C   ZURUECKGEGEBEN
C   DAS LOKALE SYSTEM WIRD SO BESTIMMT, DASS DAS TEILCHEN IN SEINER
C   X-Z-EBENE EINFLIEGT, MIT POSITIVER Z-GESCHWINDIGKEIT.
C   ES WIRD VORAUSGESETZT, DASS CS = COS(C,VLAB) POSITIV
C   UND DASS VLOCX NEGATIV (D.H. BEIM OUTPUT COS(C,VLAB).LE.0.)
      SS=SQRT(1.-CS*CS)
      SSI=1./SS
C
C     A1=CX
C     B1=CY
C     C1=CZ
C
      A3=(VLABX-CS*CX)*SSI
      B3=(VLABY-CS*CY)*SSI
      C3=(VLABZ-CS*CZ)*SSI
C   (A2,B2,C2)=(A3,B3,C3) KREUZ (A1,B1,C1)
C
      A2=B3*CZ-C3*CY
      B2=C3*CX-A3*CZ
      C2=A3*CY-B3*CX
C
C     ROTATE WITH MATRIX/A1 A2 A3/
C                       /B1 B2 B3/
C                       /C1 C2 C3/
      VLABX=CX*VLOCX+A2*VLOCY+A3*VLOCZ
      VLABY=CY*VLOCX+B2*VLOCY+B3*VLOCZ
      VLABZ=CZ*VLOCX+C2*VLOCY+C3*VLOCZ
      RETURN
C
      ENTRY ROTATF(VLABX,VLABY,VLABZ,VLOCX,VLOCY,VLOCZ,
     .             CX,CY,CZ)
C  HIER IST ENTWEDER CS=1., D.H. SENKRECHTER EINFLUG, ODER
C  DIE ORIENTIERUNG DER Y-Z-ACHSEN IM LOCALEN SYSTEM SPIELT
C  WEGEN DER SYMMETRIE DER VERTEILUNG DES REFLEXIONSWINKELS
C  KEINE ROLLE, IST INSB. UNABHAENGIG VON VLAB WAEHLBAR
C
C  1. FALL:  ABS(CZ).NE.1.
C
      IF (ABS(CZ).GE.0.99999) GOTO 1
C
      SS=SQRT(CY*CY+CX*CX)
      SSI=1./SS
C
      A2=-CY*SSI
      B2=CX*SSI
C     C2=0.
C
      A3=-CZ*B2
      B3=CZ*A2
C     C3=SS
C     ROTATE WITH MATRIX/A1 A2 A3/
C                       /B1 B2 B3/
C                       /C1 C2 C3/
      VLABX=CX*VLOCX+A2*VLOCY+A3*VLOCZ
      VLABY=CY*VLOCX+B2*VLOCY+B3*VLOCZ
      VLABZ=CZ*VLOCX+         SS*VLOCZ
      RETURN
C
C  2. FALL: CZ=1. ODER CZ=-1., D.H. CX=CY=0.
C
 1    CONTINUE
C     A2=0.
C     B2=-CZ
C     C2=0.
C
C     A3=1.=CZ*CZ
C     B3=0.
C     C3=0.
C     ROTATE WITH MATRIX/A1 A2 A3/
C                       /B1 B2 B3/
C                       /C1 C2 C3/
      VLABX=                     VLOCZ
      VLABY=        -CZ*VLOCY
      VLABZ=CZ*VLOCX
      RETURN
C
      ENTRY ROTATI(VLABX,VLABY,VLABZ,VLOCX,VLOCY,VLOCZ,
     .             CX,CY,CZ)
C  WIE BEI ENTRY ROTATF, ABER ES WIRD MIT INVERSER
C  (=TRANSPONIERTER) MATRIX GEDREHT.
C
C  1. FALL:  ABS(CZ).NE.1.
C
      IF (ABS(CZ).GE.0.99999) GOTO 2
C
      SS=SQRT(CY*CY+CX*CX)
      SSI=1./SS
C
      A2=-CY*SSI
      B2=CX*SSI
C     C2=0.
C
      A3=-CZ*B2
      B3=CZ*A2
C     C3=SS
C     ROTATE WITH MATRIX/A1 A2 A3/
C                       /B1 B2 B3/
C                       /C1 C2 C3/
      VLOCX=CX*VLABX+CY*VLABY+CZ*VLABZ
      VLOCY=A2*VLABX+B2*VLABY
      VLOCZ=A3*VLABX+B3*VLABY+SS*VLABZ
      RETURN
C
C  2. FALL: CZ=1. ODER CZ=-1., D.H. CX=CY=0.
C
    2 CONTINUE
C     A2=0.
C     B2=-CZ
C     C2=0.
C
C     A3=1.=CZ*CZ
C     B3=0.
C     C3=0.
C     ROTATE WITH MATRIX/A1 A2 A3/
C                       /B1 B2 B3/
C                       /C1 C2 C3/
      VLOCX=                  CZ*VLABZ
      VLOCY=        -CZ*VLABY
      VLOCZ=   VLABX
      RETURN
      END
C
      DOUBLE PRECISION FUNCTION DRANF()
      IMPLICIT NONE
C
      EXTERNAL RANF
      REAL*4 RANF,C
C
      DRANF = RANF()
C
      RETURN
      END
C
C=======================================================================
C
      SUBROUTINE SETTRM
C
      PARAMETER (MFTRIM=20)
      CHARACTER*60 TRMFIL(MFTRIM)
      DIMENSION CPLAB(MFTRIM),CTLAB(MFTRIM)
C
      COMMON/IOFILE/IN,IOUT,IUERR,IARK,IPUNCH,IGMT,ITRMT,ITAPIO(2)
C
      INCLUDE 'pnimb'
      PARAMETER (MRG=MRGX ,MZN=MRG-2 ,MCH=41 ,MCC=MCCX, MWAC=13 )
      PARAMETER (MBS=MBSX ,MSD=MBS   ,MSC=2 )
      PARAMETER (MIO=3    ,MCP=6)
      PARAMETER (MEG=5    ,MIXS=10   ,MLEAK=9)
C
      PARAMETER (NCT=24,MKES=4)
      COMMON/CTAB0/TABLE(NCT,11),IZLOZ(0:100)
      COMMON/CTABLE/SPUTAB(NCT,NCT)
     *,LABINT(MCP),LABEXT(NCT),IXS(MIXS),ITRIM
     *,NIONPM,MCX,MOLEC(MCP),IATOM(MCP),EXTSYM(MCP),QESP(NCT,NCT)
     *,EB(NCT),QCOEF(NCT),TLOTZ(NCT,26),CXRMAX(5,MRG),ESRMAX(MKES,MRG)
     *,TBELL(NCT,26),ITAGS(NCT,NCT,2)
C
      COMMON/COMPOS/NION,NCOM,LIGHTW,RNLITE,EWLITE,
     * SYMB(MIO),PERC(MIO),DENSE(MRG),DENSI(MRG,MIO),EATMD,EATMR,
     * TEMPE(MRG),TEMPI(MRG),IBOUND(MRG),ALBEDO(MRG),LIWALL(MRG),COEFMX
     *,IEMIS(MRG),BEXPT(MRG),WEXPT(MRG,3),SHP,DRIFTV(MRG),DRIFTC(MRG,3)
     *,ISTARG(MRG),CHARGE(MCP),PROREQ(4),ALBATO(MRG),ALBENE(MRG),INDHEL
     *,NTSPUT,PSEMIP(MRG,2),IRTRIM(MCP,MCP),NFTRIM,LPVOID,DCUTCX,TCUTCX
     *,ICUTCX,INDEF,IYCHEM,EYCHEM,AYCHEM,NLEAK,XLEAK(4,MLEAK),ILEAK(MRG)
     *,NZREC,NUTRLZ(MCP),MIMP,IGOPT,PRORCL(MIO),UNDEF
     *,NZYIZ,CZYIZ(MCP),AYIZ(MCP),BYIZ(MCP),EYIZ(MCP),IYIZ(MCP),ALFCH7
     *,PARDIR(MRG,3),RECMAT(MIO,MIO,MRG)
C
      PARAMETER (MFRD=4)
      CHARACTER*72 REFFIL(MFRD)
C
      READ(IN,10) NFTRIM
      IF(NFTRIM.GT.MFTRIM) THEN
        WRITE(IUERR,*) ' **** SETTRM: TOO MANY TRIM FILES'
        CALL EXITN(1)
      ENDIF
   10 FORMAT(I6)
   20 FORMAT(2X,A4,2X,A4,A)
      IF(NFTRIM.LE.0) THEN
        ITRIM=0
      ELSE
        READ(IN,20) (CPLAB(K),CTLAB(K),TRMFIL(K),K=1,NFTRIM)
      ENDIF
C
      NFLR=0
      DO 130 I=1,NCOM
        CP=TABLE(LABINT(I),6)
        DO 120 J=1,NCOM
          IRTRIM(I,J)=0
          IF(ITRIM.EQ.0) GOTO 120
          IF(I.GT.NION .AND. I.LE.NIONPM) GOTO 120
          IF(J.LE.NIONPM) GOTO 120
          IF(J.EQ.LIGHTW) GOTO 120
          CT=TABLE(LABINT(J),6)
          DO 110 K=1,NFTRIM
            IF( CP.EQ.CPLAB(K) .AND. CT.EQ.CTLAB(K) ) THEN
C             MATCHING FILE. READ IT IF NOT READ ALREADY
              IF(NFLR.GT.0) THEN
                DO 105 M=1,NFLR
                  IF(REFFIL(M)(1:60).EQ.TRMFIL(K)) IRTRIM(I,J)=M
  105           CONTINUE
              ENDIF
              IF(IRTRIM(I,J).EQ.0) THEN
                IF(NFLR.LT.MFRD) THEN
                  NFLR = NFLR+1
                  WRITE(REFFIL(NFLR),'(72('' ''))')
                  REFFIL(NFLR)(1:60)=TRMFIL(NFLR)
                  IRTRIM(I,J)=NFLR
                ELSE
                  WRITE (IUERR,*)' *** SETTRM: INCREASE PARAMETER MFRD'
                  CALL EXITN(1)
                ENDIF
              ENDIF
            ENDIF
  110     CONTINUE
  120   CONTINUE
  130 CONTINUE
CW
CW    DO 150 I=1,NCOM
CW      K=LABINT(I)
CW      WRITE(6,135) 'IPROJ=',I,K,TABLE(K,1),TABLE(K,6),' '
CW135   FORMAT(1X,A,I2,' (',I3,')',2X,A4,2X,A4,2X,A)
CW      DO 140 J=1,NCOM
CW        K=LABINT(J)
CW        IF(IRTRIM(I,J).NE.0) THEN
CW          WRITE(6,135) '      ITARG=',J,K,TABLE(K,1),TABLE(K,6),
CW   &                   REFFIL(IRTRIM(I,J))
CW        ELSE
CW          WRITE(6,135) '      ITARG=',J,K,TABLE(K,1),TABLE(K,6),' '
CW        ENDIF
CW140   CONTINUE
CW150 CONTINUE
CW
      IF(NFLR.LE.0) RETURN
C
      CALL RDTRIM(ITRMT,NFLR,REFFIL(1),IUERR,0)
C
      RETURN
      END
C
C=======================================================================
      SUBROUTINE REFTRM (XMP,XCP,XMW,XCW,E0TERM,PRFCF,
     .                   NFLR,EMINR,EMAXR,
     .                   E0,VELX,VELY,VELZ,CRTX,CRTY,CRTZ,IFLAG,IOUT)
C
      REAL*8        XMPD,XCPD,XMWD,XCWD,E0TRMD,PRFCFD,
     .                   EMINRD,EMAXRD,
     .              E0D,VELXD,VELYD,VELZD,CRTXD,CRTYD,CRTZD
C
C     INPUT:
      XMPD = XMP
      XCPD = XCP
      XMWD = XMW
      XCWD = XCW
      E0TRMD = E0TERM
      PRFCFD = PRFCF
      EMINRD = EMINR
      EMAXRD = EMAXR
      CRTXD = CRTX
      CRTYD = CRTY
      CRTZD = CRTZ
C
C     INPUT/OUTPUT
      E0D = E0
      VELXD = VELX
      VELYD = VELY
      VELZD = VELZ
C
      CALL REFTRIM (XMPD,XCPD,XMWD,XCWD,E0TRMD,PRFCFD,
     .              NFLR,EMINRD,EMAXRD,
     .              E0D,VELXD,VELYD,VELZD,CRTXD,CRTYD,CRTZD,IFLAG,IOUT)
C
C     INPUT/OUTPUT
      E0 = E0D
      VELX = VELXD
      VELY = VELYD
      VELZ = VELZD
C
      RETURN
      END
C
C=======================================================================
      SUBROUTINE TRIMOD(Z1,A1,Z2,A2,E0,
     &                  COSP,SINP,COST,SINT,
     &                  COSPN,SINPN,COSTN,SINTN,
     &                  TW,IREF,NFTRIM,IOUT)
C
C          WALL INTERACTION FROM TRIM DATA
C
C    I  Z1     NUCLEAR CHARGE OF PROJECTILE (E)
C    I  A1     NUCLEAR MASS OF PROJECTILE (AMU)
C    I  Z2     NUCLEAR CHARGE OF TARGET (E)
C    I  A2     NUCLEAR MASS OF TARGET (AMU)
C    IO E0     ENRGY OF PROJECTILE (EV)
C    IO COSP, SINP, COST, SINT     DIRECTION COSINES OF PROJECTILE
C    I  COSPN, SINPN, COSTN, SINTN  DIRECTION COSINES OF INWARD NORMAL
C    I  TW     WALL TEMPERATURE (EV)
C    O  IREG   FLAG
C    I  NFTRIM TRIM INPUT STREAM
C    I  IOUT   OUTPUT STREAM
C
      PARAMETER (EMIN=0.0)
CW    WRITE(6,*) ' IN TRIMOD',Z1,A1,Z2,A2,E0
CW    WRITE(6,*) '          ',COSP,SINP,COST,SINT
CW    WRITE(6,*) '          ',COSPN,SINPN,COSTN,SINTN
CW    WRITE(6,*) '          ',TW, 0  ,NFTRIM,IOUT
C
C       DIRECTION COSINE OF PROJECTILE
      WX = COSP*SINT
      WY = SINP*SINT
      WZ = COST
      TRAN = SQRT(WX*WX+WY*WY+WZ*WZ)
      WX = WX/TRAN
      WY = WY/TRAN
      WZ = WZ/TRAN
C       DIRECTION COSINES OF OUTWARD WALL NORMAL
      WXN = -COSPN*SINTN
      WYN = -SINPN*SINTN
      WZN = -COSTN
      TRAN = SQRT(WXN*WXN+WYN*WYN+WZN*WZN)
      WXN = WXN/TRAN
      WYN = WYN/TRAN
      WZN = WZN/TRAN
C
      CALL REFTRM(A1,Z1,A2,Z2,
     &            1.5*TW,1.0,NFTRIM,EMIN,E0,
     &            E0,WX,WY,WZ,WXN,WYN,WZN,IFLAG,IOUT)
C
      IF     (IFLAG.EQ.0) THEN
C         REFLECTION
        IREF = 1
        E0 = E0
        COST = WZ
        IF(ABS(COST).GT.0.999) COST = SIGN(0.999,COST)
        SINT = SQRT(1.0-COST**2)
        COSP = WX/SINT
        SINP = WY/SINT
      ELSE IF(IFLAG.EQ.1) THEN
C         E0 > EMIN
        IREF=2
      ELSE IF(IFLAG.EQ.2) THEN
C         RE-EMISSION
        IREF=2
      ELSE
C       ERROR
        IREF=-1
      ENDIF
C
CW    WRITE(6,*) 'OUT TRIMOD',Z1,A1,Z2,A2,E0
CW    WRITE(6,*) '          ',COSP,SINP,COST,SINT
CW    WRITE(6,*) '          ',COSPN,SINPN,COSTN,SINTN
CW    WRITE(6,*) '          ',TW,IREF,NFTRIM,IOUT
      RETURN
      END
C
C.......................................................................
      SUBROUTINE RWTANK
C
      SAVE
C
      COMMON/IOFILE/IN,IOUT,IUERR,IARK,IPUNCH,IGMT,ITRMT,ITAPIO(2)
C
      PARAMETER (MBUFER=1000, MPAR=22)
C
      DIMENSION X(2),Y(2),Z(2)
C
      DIMENSION TANKOU(MBUFER,MPAR),TANKIN(MBUFER,MPAR)
     *         ,JANKOU(MBUFER,MPAR),JANKIN(MBUFER,MPAR)
      EQUIVALENCE (TANKOU(1,1),JANKOU(1,1)), (TANKIN(1,1),JANKIN(1,1))
C
      REAL*8 WHO,WHI,WHOV,WHIV
     &      ,WZO,WZI,WZOV,WZIV
C
      DATA NBUFOU/-99999999/,NBUFIN/-99999999/
C
      CHARACTER STRING*80
C
C=======================================================================
      ENTRY WRTANK( IWRITE,IBUFOU,IDMC,IRR,
     &      HHESRC,KOST,NION,NIONPM,NCOM,TCUT,
     &      NUTRAL,W,E,X,Y,Z,IZ,IR,IREG,IREG3D,
     &      COSP,SINP,COST,SINT,AGE,
     &      IBIN,IGAP,ITSOU,IRAND
     &             )
C
      IF(IWRITE.EQ.-1) THEN
C
C        INITIALISE OUTPUT BUFFER
         NBUFOU=0
         NHBUFO=0
         WHO=0.0D0
         WHOV=0.0D0
         NZBUFO=0
         WZO=0.0D0
         WZOV=0.0D0
         REWIND IBUFOU
         RETURN
      ELSE IF(IWRITE.EQ.-2) THEN
C
C        FLUSH OUT  OUTPUT BUFFER
         IF(NBUFOU.GT.0) THEN
           WRITE(IBUFOU) NBUFOU
           WRITE(IBUFOU) ((TANKOU(I,K),K=1,MPAR),I=1,NBUFOU)
           WRITE(IOUT,10) NBUFOU
   10      FORMAT(' OUT-BUFFERED',I4,' NEUTRALS')
         ENDIF
         WRITE(IBUFOU) -1
         WRITE(IBUFOU) KOST,HHESRC,NHBUFO,WHO,WHOV,
     &                             NZBUFO,WZO,WZOV,TCUT,IDMC
         TRAN=HHESRC/FLOAT(KOST)
         WRITE(IUERR,20) WHO*TRAN,WHOV*TRAN,NHBUFO
     &                  ,WZO*TRAN,WZOV*TRAN,NZBUFO
   20    FORMAT(/' TIME-OUT''ED H+H2 TO BE RECOVERED :',
     &                           1P,E10.3,' (',E10.3,')'/
     &           ' (R.R.) HISTORIES TO BE RECOVERED :',I6/
     &           ' TIME-OUT''ED  Z   TO BE RECOVERED :',
     &                           1P,E10.3,' (',E10.3,')'/
     &           ' (R.R.) HISTORIES TO BE RECOVERED :',I6)
         WRITE(IUERR,'('' WRITING TANK ('',I2,'') WITH FILE ID.='',I6)')
     &         IBUFOU , IDMC
         REWIND IBUFOU
         RETURN
      ELSE IF(IWRITE.EQ.1) THEN
C
         IF(NUTRAL.LE.NION) THEN
           FMOL=1.0
           WHOV=WHOV+W
           WC=1.0
         ELSE IF(NUTRAL.GT.NION .AND. NUTRAL.LE.NIONPM) THEN
           FMOL=2.0
           WHOV=WHOV+W*2.0
           WC=1.0
         ELSE
           FMOL=1.0
           WZOV=WZOV+W
           WC=0.01
         ENDIF
C
         WT=W
C                 R.R.
         IRR=0
         W0=WT*FMOL
         IF(W0.LT.WC) THEN
           C=RANF()
           IF(C.GT.W0/WC) RETURN
           WT=WC/FMOL
         ENDIF
         IRR=1
C
         NBUFOU=NBUFOU+1
C
         JANKOU(NBUFOU,1)=NUTRAL
         TANKOU(NBUFOU,2)=WT
         TANKOU(NBUFOU,3)=E
         TANKOU(NBUFOU,4)=X(1)
         TANKOU(NBUFOU,5)=Y(1)
         TANKOU(NBUFOU,6)=Z(1)
         JANKOU(NBUFOU,7)=IZ
         JANKOU(NBUFOU,8)=IR
         JANKOU(NBUFOU,9)=IREG
         JANKOU(NBUFOU,10)=IREG3D
         TANKOU(NBUFOU,11)=COSP
         TANKOU(NBUFOU,12)=SINP
         TANKOU(NBUFOU,13)=COST
         TANKOU(NBUFOU,14)=SINT
         TANKOU(NBUFOU,15)=AGE
         JANKOU(NBUFOU,16)=IBIN
         JANKOU(NBUFOU,17)=IGAP
         JANKOU(NBUFOU,18)=ITSOU
         TANKOU(NBUFOU,19)=X(2)
         TANKOU(NBUFOU,20)=Y(2)
         TANKOU(NBUFOU,21)=Z(2)
         JANKOU(NBUFOU,22)=IRAND
C
         IF(NUTRAL.LE.NIONPM) THEN
           NHBUFO=NHBUFO+1
           WHO=WHO+WT*FMOL
         ELSE
           NZBUFO=NZBUFO+1
           WZO=WZO+WT
         ENDIF
         IF(NBUFOU.EQ.MBUFER) THEN
C
C              BUFFER TO TAPE
            WRITE(IBUFOU) NBUFOU
            WRITE(IBUFOU) ((TANKOU(I,K),K=1,MPAR),I=1,NBUFOU)
            WRITE(IOUT,10) NBUFOU
            NBUFOU=0
         ENDIF
         RETURN
      ELSE
         RETURN
      ENDIF
C
C
C=======================================================================
      ENTRY RDTANK ( IREAD,IBUFIN,IDMCO,
     &      NST,NION,NIONPM,NCOM,TCUT,
     &      NUTRAL,W,E,X,Y,Z,IZ,IR,IREG,IREG3D,
     &      COSP,SINP,COST,SINT,AGE,
     &      IBIN,IGAP,ITSOU,IRAND,
     &      KREAD,NHBUFI,GHBUFI,GZBUFI
     &                  )
C
      IF    (IREAD.EQ.-1) THEN
C        INITIALISE INPUT BUFFER
         NHBUFI=0
         WHI=0.0
         NZBUFI=0
         WZI=0.0
C
         REWIND IBUFIN
  210    READ(IBUFIN,END=9999) NBUFIN
         IF(NBUFIN.LE.0) GOTO 220
         READ(IBUFIN,END=9999) ((TANKIN(I,K),K=1,MPAR),I=1,NBUFIN)
C        DO 215 I=1,NBUFIN
C          NUTRAL =TANKIN(I,1)
C          W      =TANKIN(I,2)
C          IF(NUTRAL.LE.NION) THEN
C            NHBUFI=NHBUFI+1
C            WHI=WHI+W
C          ELSE IF(NUTRAL.GT.NION .AND. NUTRAL.LE.NIONPM) THEN
C            NHBUFI=NHBUFI+1
C            WHI=WHI+W*2.0
C          ENDIF
C 215    CONTINUE
         GOTO 210
  220    CONTINUE
         READ(IBUFIN,END=9999) NHS,SINTEI,NHBUFI,WHI,WHIV,
     &                                    NZBUFI,WZI,WZIV,TCUTI,IDTANK
         WRITE(IUERR,'('' READING TANK ('',I2,'') WITH FILE ID.='',I6)')
     &         IBUFIN , IDTANK
         IF( IDTANK.NE.IDMCO ) THEN
             WRITE(IUERR,1010) IDTANK , IDMCO
             CALL EXITN(1)
         END IF
         IF(NHS.NE.NST) THEN
           WRITE(IUERR,225) NST,NHS
  225      FORMAT(' **** ERROR IN RDTANK',2I6)
           CALL EXITN(1)
         ENDIF
         WRATIO=TCUTI/TCUT
C        REMEMBER WEIGHT OF HISTORY (AVERAGE H,H2 WEIGHT)
         AVEWHI=WHI/FLOAT(NHBUFI)
         TRAN=SINTEI/FLOAT(NHS)
         WRITE(IUERR,230) WHI*TRAN,WHIV*TRAN,NHBUFI,AVEWHI,WRATIO,
     &                    WZI*TRAN,WZIV*TRAN,NZBUFI
  230    FORMAT(/' TIME-OUT''D H+H2 BEING RECOVERED :',
     &                           1P,E10.3,' (',E10.3,')'/
     &           '                       HISTORIES :',I6/
     &           '                  AVERAGE WEIGHT :',E10.3/
     &           '           (TIME-SLICE SCALED BY :',E10.3,')'/
     &           ' TIME-OUT''D  Z   BEING RECOVERED :',
     &                           1P,E10.3,' (',E10.3,')'/
     &           '                       HISTORIES :',I6)
         GHBUFI=WHIV*TRAN*WRATIO
         GZBUFI=WZIV*TRAN*WRATIO
         REWIND IBUFIN
         WHI=0.0D0
         WZI=0.0D0
         NBUFIN=0
         KREAD=0
         RETURN
      ELSE IF(IREAD.EQ.1) THEN
         IF(NBUFIN.EQ.0) THEN
C
C              BUFFER FROM TAPE
            READ(IBUFIN,END=9999) NBUFIN
            IF(NBUFIN.LT.0) THEN
              KREAD=-1
              REWIND IBUFIN
              WRITE(IOUT,*) ' TOTAL H+H2 TIME-RCV''D',WHI
              WRITE(IOUT,*) ' TOTAL  Z   TIME-RCV''D',WZI
              RETURN
            ENDIF
            READ(IBUFIN,END=9999) ((TANKIN(I,K),K=1,MPAR),I=1,NBUFIN)
            WRITE(IOUT,*) ' IN-BUFFERED',NBUFIN,' NEUTRALS'
         ENDIF
C
         NUTRAL =JANKIN(NBUFIN,1)
         W      =TANKIN(NBUFIN,2)
         E      =TANKIN(NBUFIN,3)
         X(1)   =TANKIN(NBUFIN,4)
         Y(1)   =TANKIN(NBUFIN,5)
         Z(1)   =TANKIN(NBUFIN,6)
         IZ     =JANKIN(NBUFIN,7)
         IR     =JANKIN(NBUFIN,8)
         IREG   =JANKIN(NBUFIN,9)
         IREG3D =JANKIN(NBUFIN,10)
         COSP   =TANKIN(NBUFIN,11)
         SINP   =TANKIN(NBUFIN,12)
         COST   =TANKIN(NBUFIN,13)
         SINT   =TANKIN(NBUFIN,14)
         AGE    =TANKIN(NBUFIN,15)
         IBIN   =JANKIN(NBUFIN,16)
         IGAP   =JANKIN(NBUFIN,17)
         ITSOU  =JANKIN(NBUFIN,18)
         X(2)   =TANKIN(NBUFIN,19)
         Y(2)   =TANKIN(NBUFIN,20)
         Z(2)   =TANKIN(NBUFIN,21)
         IRAND  =JANKIN(NBUFIN,22)
C
         KREAD=KREAD+1
         NBUFIN=NBUFIN-1
C
         IF(NUTRAL.LE.NION) THEN
           W=W/AVEWHI
           WHI=WHI+W
         ELSE IF(NUTRAL.GT.NION .AND. NUTRAL.LE.NIONPM) THEN
           W=W/AVEWHI
           WHI=WHI+W*2.0
         ELSE
           W=W/AVEWHI
           WZI=WZI+W
         ENDIF
C
         RETURN
      ELSE
         KREAD=-2
         RETURN
      ENDIF
C
 9999 WRITE(IUERR,1000) IBUFIN
      CALL EXITN(1)
C
 1000 FORMAT(' ***** ERROR: EOF ENCOUNTERED READING TANK FILE ' , I4 )
 1010 FORMAT(' ***** ERROR: ID OF TANK (' , I6
     &      ,') DOES NOT MATCH ID OF M.C (' , I6 , ')' )
      RETURN
      END
C
C=======================================================================
      SUBROUTINE EXTSET( LOUT , LERR )
      IMPLICIT REAL*4(A-H,O-Z)
C
      COMMON/IOFILE/IN,IOUT,IUERR,IARK,IPUNCH,IGMT,ITRMT,ITAPIO(2)
C
      IOUT   = LOUT
      IUERR  = LERR
C
      RETURN
      END
C
C=======================================================================
      SUBROUTINE SPUTCHEM(IOPTCHEM,ALPHA,E0,TEMP,FLUX,YCHEM)

      IMPLICIT NONE
      INTEGER  IOPTCHEM
      REAL     E0,TEMP,FLUX,YCHEM,YGARCIA,YHAASZ,YROTH96,YHAASZ97,ALPHA
     &       , YROTH98
      INTRINSIC MAX
C
      INTEGER       IN,IOUT,IUERR,IARK,IPUNCH,IGMT,ITRMT,ITAPIO
      COMMON/IOFILE/IN,IOUT,IUERR,IARK,IPUNCH,IGMT,ITRMT,ITAPIO(2)
C
C
C  *********************************************************************
C  *                                                                   *
C  *  CHEMICAL SPUTTERING FOR D --> C                                  *
C  *                                                                   *
C  *  IOPTCHEM       -  OPTIONS FOR CHEMICAL SPUTTERING:               *
C  *         1       -  GARCIA-ROSALES' FORMULA (EPS94)                *
C  *         2       -  ACCORDING TO POSPIESZCZYK (EPS95)              *
C  *         3       -  VIETZKE (IN PHYSICAL PROCESSES OF THE INTER-   *
C  *                    ACTION OF FUSION PLASMAS WITH SOLIDS)          *
C  *         4       -  HAASZ (SUBMITTED TO J.NUCL.MATER.,DEC. 1995)   *
C  *         5       -  GARCIA-ROSALES, ROTH 1996                      *
C  *         6       -  HAASZ'S NEW DATA (FEBRUARY 1997)               *
C  *         7       -  DITTO WITH FLUX DEPENDENCE                     *
C  *         8       -  ROTH (PRESENTED AT THE 19TH PSI, MAY 1998      *
C  *                                                                   *
C  *  ALPHA          -  PARAMETER FOR IOPTCHEM=7                       *
C  *  E0  (EV)       -  ION OR NEUTRAL INCIDENT ENERGY                 *
C  *  TEMP (K)       -  TEMPERATURE AT TARGET OR WALL                  *
C  *  FLUX (CM-2S-1) -  ION OR NEUTRAL FLUX                            *
C  *  YCHEM          -  CHEMICAL SPUTTERING YIELD                      *
C  *                                                                   *
C  *********************************************************************
C

      IF      (IOPTCHEM.EQ.1) THEN
        YCHEM = YGARCIA(E0,TEMP,FLUX)
      ELSE IF (IOPTCHEM.EQ.2) THEN
        YCHEM = 0.04254*(MAX(5E18,FLUX)/5E18)**(-0.477)
      ELSE IF (IOPTCHEM.EQ.3) THEN
        YCHEM = 0.0215*(MAX(1E14,FLUX)/1E16)**(-0.1)
      ELSE IF (IOPTCHEM.EQ.4) THEN
        YCHEM = YHAASZ(E0,TEMP)
      ELSE IF (IOPTCHEM.EQ.5) THEN
C       FLUX CONVERTED TO M-2S-1
        YCHEM = YROTH96(E0,TEMP,FLUX*1.0E+04)
      ELSE IF (IOPTCHEM.EQ.6) THEN
        YCHEM = YHAASZ97(E0,TEMP)
      ELSE IF (IOPTCHEM.EQ.7) THEN
        YCHEM = YHAASZ97(E0,TEMP)
        YCHEM = YCHEM * (MAX(3.0E+14,FLUX)/3.0E+14)**(-ALPHA)
      ELSE IF (IOPTCHEM.EQ.8) THEN
C       FLUX CONVERTED TO M-2S-1
        YCHEM = YROTH98(E0,TEMP,FLUX*1.0E+04)
      ELSE
        WRITE(IUERR,*) ' **** ERROR IN S.R. SPUTCHEM: ILLEGAL OPTION'
        CALL EXITN(1)
      END IF

      RETURN
      END

C -------------

      FUNCTION YROTH96(E0,TEMP,FLUX)

      IMPLICIT NONE
      REAL    E0,TEMP,FLUX
      REAL    ETHC,ETFC,QC,SNC
      REAL    CSURF,CSP3
      REAL    YPHYS,YSURF,YTHERM,YROTH96
      INTRINSIC MIN
C
C  *********************************************************************
C  *                                                                   *
C  *  CHEMICAL SPUTTERING CALCULATED BY GARCIA-ROSALES' FORMULA        *
C  *                                                                   *
C  *  ETHC (EV)  -  THRESHOLD ENERGY FOR D -> C PHYSICAL SPUTTERING    *
C  *  ETFC (EV)  -  THOMAS-FERMI ENERGY                                *
C  *  SNC        -  STOPPING POWER                                     *
C  *  QC         -  FITTING PARAMETERS                                 *
C  *                                                                   *
C  *  CSURF      -  FITTING PARAMETERS                                 *
C  *  CSP3       -  CARBON AT SURFACE                                  *
C  *                                                                   *
C  *  YPHYS      -  PHYSICAL SPUTTERING YIELD                          *
C  *  YSURF      -  SPUTTERING DUE TO SURFACE PROCESS                  *
C  *  YTHERM     -  SPUTTERING DUE TO THERMAL PROCESS                  *
C  *  YROTH96    -  TOTAL CHEMICAL SPUTTERING YIELD                    *
C  *                                                                   *
C  *********************************************************************

C ---------------------------------------------------------
C TOTAL CHEMICAL SPUTTERING YIELD:
C            YCHEM = YSURF+YTHERM*(1+D*YPHYS)
C ---------------------------------------------------------

C
C 1> PHYSICAL SPUTTERING YIELD
C
      ETHC = 27.0
      ETFC = 447.0
      QC   = 0.1
C
C  - STOPPING POWER
C
      SNC = 0.5*LOG(1.+1.2288*E0/ETFC)/(E0/ETFC
     >    + 0.1728*SQRT(E0/ETFC)
     >    + 0.008*(E0/ETFC)**0.1504)
C
C  - PHYSICAL SPUTTERING YIELD
C
      IF (E0.GT.ETHC) THEN
         YPHYS = QC*SNC*(1-(ETHC/E0)**(2./3.))*(1-ETHC/E0)**2
      ELSE
         YPHYS = 0.0
      ENDIF
C
C 2> YSURF: SURFACE PROCESS
C
      CSURF  = 1/(1.+1E13*EXP(-2.45*11604/TEMP))
      CSP3   = CSURF*(2E-32*FLUX+EXP(-1.7*11604/TEMP))
     >         /(2E-32*FLUX+(1+2E29/FLUX*EXP(-1.8*11604/TEMP))
     >         *EXP(-1.7*11604/TEMP))

      IF (E0.GT.1.) THEN
         YSURF = CSP3*QC*SNC*(1-(1./E0)**(2./3.))*(1-1./E0)**2
     >           /(1.+EXP((MIN(90.0,E0)-90.)/50.))
      ELSE
         YSURF = 0.0
      ENDIF
C
C 3> YTHERM: THERMAK ACTIVATED PROCESS
C
      YTHERM = CSP3*0.033*EXP(-1.7*11604/TEMP)
     >         /(2E-32*FLUX+EXP(-1.7*11604/TEMP))
C
C 4> YCHEM: TOTAL CHEMICAL SPUTTERING YIELD
C
      YROTH96 = YSURF + YTHERM * (1 + 125 * YPHYS)

CW    WRITE(6,*) 'YROTH96 = ',YROTH96

      RETURN
      END


C -------------

      FUNCTION YGARCIA(E0,TEMP,FLUX)

      IMPLICIT NONE
      REAL    E0,TEMP,FLUX
      REAL    ETHC,ETFC,QC,SNC
      REAL    YPHYS,YCHEM_TH,YCHEM_ATH,YGARCIA
C
C  *********************************************************************
C  *                                                                   *
C  *  CHEMICAL SPUTTERING CALCULATED BY GARCIA-ROSALES' FORMULA        *
C  *                                                                   *
C  *  ETHC (EV)  -  THRESHOLD ENERGY FOR D -> C PHYSICAL SPUTTERING    *
C  *  ETFC (EV)  -  THOMAS-FERMI ENERGY                                *
C  *  SNC        -  STOPPING POWER                                     *
C  *  QC         -  FITTING PARAMETERS                                 *
C  *                                                                   *
C  *  YPHYS      -  PHYSICAL SPUTTERING YIELD                          *
C  *  YCHEM_TH   -  THERMAL ACTIVATED MECHANISM                        *
C  *  YCHEM_ATH  -  ATHERMAL MECHANISM                                 *
C  *                                                                   *
C  *********************************************************************
C

      ETHC = 28.0
      ETFC = 447.0
      QC   = 0.1
C
C CHECK FOR IMPACT ENERGIES BELOW THRESHOLD
C
      IF (E0.GT.ETHC) THEN
C
C STOPPING POWER
C
      SNC = 0.5*LOG(1.+1.2288*E0/ETFC)/(E0/ETFC
     >    + 0.1728*SQRT(E0/ETFC)
     >    + 0.008*(E0/ETFC)**0.1504)
C
C PHYSICAL SPUTTERING YIELD
C
         YPHYS = QC*SNC*(1-(ETHC/E0)**(2./3.))*(1-ETHC/E0)**2
C
      ELSE
         YPHYS = 0.0
      ENDIF
C
C CHEMICAL SPUTTERING YIELD
C
      YCHEM_TH = 6E19*EXP(-1.*11604/TEMP)
     >         /(1E15+3E27*EXP(-2.*11604/TEMP))
     >         * (2.+200*YPHYS)*(MAX(1E16,FLUX)/1E16)**(-0.1)

      YCHEM_ATH = 0.05*EXP(E0*1E-3*(20.-1*11604./TEMP))
     >          / ((1.+EXP((E0-150.)/25.))*(1.+EXP((TEMP-740.)/25.)))

      YGARCIA = YCHEM_TH + YCHEM_ATH

CW    WRITE(6,*) 'YTH = ',YCHEM_TH,'YATH = ',YCHEM_ATH

      RETURN
      END


C -------------


      FUNCTION YHAASZ(E0,TEMP)
C
C  *********************************************************************
C  *                                                                   *
C  *  CHEMICAL SPUTTERING FROM HAASZ'S NEW DATA (DEC. 1995)            *
C  *  - POLY. FIT: Y = A0 + A1*LOG(E) + A2*LOG(E)**2 + A3*LOG(E)**3    *
C  *                                                                   *
C  *********************************************************************
C
      IMPLICIT NONE

      REAL    E0,TEMP
      REAL    FITC300(4),FITC350(4),FITC400(4),FITC450(4),FITC500(4),
     >        FITC550(4),FITC600(4),FITC650(4),FITC700(4),FITC750(4),
     >        FITC800(4),FITC850(4),FITC900(4),FITC950(4),FITC1000(4),
     >        FITC1050(4),FITC1100(4)
      REAL    POLY_C(4),YFIT,FITE0
      REAL    YHAASZ
      INTEGER I
C
C     POLY. FIT C. /       A0,      A1,      A2,      A3
C
      DATA FITC300 / -0.01789, 0.02309, 0.00089,-0.00315/
      DATA FITC350 / -0.01691, 0.02020, 0.00451,-0.00407/
      DATA FITC400 / -0.01128, 0.01230, 0.00922,-0.00483/
      DATA FITC450 / -0.00401, 0.00453, 0.01226,-0.00493/
      DATA FITC500 / -0.01000, 0.02097,-0.00032,-0.00153/
      DATA FITC550 / -0.02022, 0.04019,-0.01430, 0.00253/
      DATA FITC600 /  0.00047,-0.00319, 0.00950,-0.00025/
      DATA FITC650 /  0.02921,-0.05657, 0.03467,-0.00226/
      DATA FITC700 /  0.00561,-0.00081,-0.01044, 0.00939/
      DATA FITC750 /  0.00225, 0.00205,-0.00949, 0.00800/
      DATA FITC800 /  0.00900,-0.02109, 0.01366, 0.00048/
      DATA FITC850 /  0.00483,-0.01691, 0.01513,-0.00152/
      DATA FITC900 /  0.00569,-0.02211, 0.02185,-0.00427/
      DATA FITC950 /  0.00317,-0.01827, 0.02081,-0.00482/
      DATA FITC1000/  0.00436,-0.02075, 0.02290,-0.00574/
      DATA FITC1050/  0.00463,-0.02082, 0.02285,-0.00601/
      DATA FITC1100/  0.00920,-0.02942, 0.02802,-0.00723/
C
C FIND RIGHT POLYNOMIAL FIT COEFFICIENTS FOR A GIVEN TEMPERATURE
C
      IF      (TEMP.LE.300.0) THEN
         DO I = 1,4
           POLY_C(I) = FITC300(I)
         ENDDO
      ELSE IF (TEMP.GT.300.0 .AND. TEMP.LE.350.0) THEN
         DO I = 1,4
           POLY_C(I) = FITC350(I)
         ENDDO
      ELSE IF (TEMP.GT.350.0 .AND. TEMP.LE.400.0) THEN
         DO I = 1,4
           POLY_C(I) = FITC400(I)
         ENDDO
      ELSE IF (TEMP.GT.400.0 .AND. TEMP.LE.450.0) THEN
         DO I = 1,4
           POLY_C(I) = FITC450(I)
         ENDDO
      ELSE IF (TEMP.GT.450.0 .AND. TEMP.LE.500.0) THEN
         DO I = 1,4
           POLY_C(I) = FITC500(I)
         ENDDO
      ELSE IF (TEMP.GT.500.0 .AND. TEMP.LE.550.0) THEN
         DO I = 1,4
           POLY_C(I) = FITC550(I)
         ENDDO
      ELSE IF (TEMP.GT.550.0 .AND. TEMP.LE.600.0) THEN
         DO I = 1,4
           POLY_C(I) = FITC600(I)
         ENDDO
      ELSE IF (TEMP.GT.600.0 .AND. TEMP.LE.650.0) THEN
         DO I = 1,4
           POLY_C(I) = FITC650(I)
         ENDDO
      ELSE IF (TEMP.GT.650.0 .AND. TEMP.LE.700.0) THEN
         DO I = 1,4
           POLY_C(I) = FITC700(I)
         ENDDO
      ELSE IF (TEMP.GT.700.0 .AND. TEMP.LE.750.0) THEN
         DO I = 1,4
           POLY_C(I) = FITC750(I)
         ENDDO
      ELSE IF (TEMP.GT.750.0 .AND. TEMP.LE.800.0) THEN
         DO I = 1,4
           POLY_C(I) = FITC800(I)
         ENDDO
      ELSE IF (TEMP.GT.800.0 .AND. TEMP.LE.850.0) THEN
         DO I = 1,4
           POLY_C(I) = FITC850(I)
         ENDDO
      ELSE IF (TEMP.GT.850.0 .AND. TEMP.LE.900.0) THEN
         DO I = 1,4
           POLY_C(I) = FITC900(I)
         ENDDO
      ELSE IF (TEMP.GT.900.0 .AND. TEMP.LE.950.0) THEN
         DO I = 1,4
           POLY_C(I) = FITC950(I)
         ENDDO
      ELSE IF (TEMP.GT.950.0 .AND. TEMP.LE.1000.0) THEN
         DO I = 1,4
           POLY_C(I) = FITC1000(I)
         ENDDO
      ELSE IF (TEMP.GT.1000.0 .AND. TEMP.LE.1050.0) THEN
         DO I = 1,4
           POLY_C(I) = FITC1050(I)
         ENDDO
      ELSE
         DO I = 1,4
           POLY_C(I) = FITC1100(I)
         ENDDO
      ENDIF
C
C CALCULATE CHEMICAL YIELD ACCORDING TO THE 3TH POLY. FIT
C
      IF      (E0.LT.10.0)  THEN
         FITE0 = 10.
      ELSE IF (E0.GT.200.0) THEN
         FITE0 = 200.
      ELSE
         FITE0 = E0
      ENDIF
C
      YFIT = 0.0
      DO I = 1,4
        YFIT = YFIT + POLY_C(I)*ALOG10(FITE0)**(I-1)
      ENDDO

      YHAASZ = YFIT

CW    WRITE(6,*) 'YHAASZ = ',YHAASZ

      RETURN
      END

C -------------

      FUNCTION YHAASZ97(E0,TEMP)
C
C  *********************************************************************
C  *                                                                   *
C  *  CHEMICAL SPUTTERING FROM HAASZ'S NEW DATA (FEBRUARY 1997)        *
C  *  - POLY. FIT: Y = A0 + A1*LOG(E) + A2*LOG(E)**2 + A3*LOG(E)**3    *
C  *                                                                   *
C  *********************************************************************
C
      IMPLICIT NONE

      REAL    E0,TEMP
      REAL    FITC300(4),FITC350(4),FITC400(4),FITC450(4),FITC500(4),
     >        FITC550(4),FITC600(4),FITC650(4),FITC700(4),FITC750(4),
     >        FITC800(4),FITC850(4),FITC900(4),FITC950(4),FITC1000(4)
      REAL    POLY_C(4),YFIT,FITE0
      REAL    YHAASZ97
      INTEGER I
C
C     POLY. FIT C. /       A0,      A1,      A2,      A3
C
      DATA FITC300 / -0.03882, 0.07432,-0.03470, 0.00486/
      DATA FITC350 / -0.05185, 0.10126,-0.05065, 0.00797/
      DATA FITC400 / -0.06089, 0.12186,-0.06240, 0.01017/
      DATA FITC450 / -0.08065, 0.16884,-0.09224, 0.01625/
      DATA FITC500 / -0.08872, 0.19424,-0.10858, 0.01988/
      DATA FITC550 / -0.08728, 0.20002,-0.11420, 0.02230/
      DATA FITC600 / -0.05106, 0.13146,-0.07514, 0.01706/
      DATA FITC650 /  0.07373,-0.13263, 0.09571,-0.01672/
      DATA FITC700 /  0.02722,-0.03599, 0.02064, 0.00282/
      DATA FITC750 /  0.09052,-0.18253, 0.12362,-0.02109/
      DATA FITC800 /  0.02604,-0.05480, 0.04025,-0.00484/
      DATA FITC850 /  0.03478,-0.08537, 0.06883,-0.01404/
      DATA FITC900 /  0.02173,-0.06399, 0.05862,-0.01380/
      DATA FITC950 / -0.00086,-0.01858, 0.02897,-0.00829/
      DATA FITC1000/ -0.01551, 0.01359, 0.00600,-0.00353/
C
C FIND RIGHT POLYNOMIAL FIT COEFFICIENTS FOR A GIVEN TEMPERATURE
C
      IF      (TEMP.LE.300.0) THEN
         DO I = 1,4
           POLY_C(I) = FITC300(I)
         ENDDO
      ELSE IF (TEMP.GT.300.0 .AND. TEMP.LE.350.0) THEN
         DO I = 1,4
           POLY_C(I) = FITC350(I)
         ENDDO
      ELSE IF (TEMP.GT.350.0 .AND. TEMP.LE.400.0) THEN
         DO I = 1,4
           POLY_C(I) = FITC400(I)
         ENDDO
      ELSE IF (TEMP.GT.400.0 .AND. TEMP.LE.450.0) THEN
         DO I = 1,4
           POLY_C(I) = FITC450(I)
         ENDDO
      ELSE IF (TEMP.GT.450.0 .AND. TEMP.LE.500.0) THEN
         DO I = 1,4
           POLY_C(I) = FITC500(I)
         ENDDO
      ELSE IF (TEMP.GT.500.0 .AND. TEMP.LE.550.0) THEN
         DO I = 1,4
           POLY_C(I) = FITC550(I)
         ENDDO
      ELSE IF (TEMP.GT.550.0 .AND. TEMP.LE.600.0) THEN
         DO I = 1,4
           POLY_C(I) = FITC600(I)
         ENDDO
      ELSE IF (TEMP.GT.600.0 .AND. TEMP.LE.650.0) THEN
         DO I = 1,4
           POLY_C(I) = FITC650(I)
         ENDDO
      ELSE IF (TEMP.GT.650.0 .AND. TEMP.LE.700.0) THEN
         DO I = 1,4
           POLY_C(I) = FITC700(I)
         ENDDO
      ELSE IF (TEMP.GT.700.0 .AND. TEMP.LE.750.0) THEN
         DO I = 1,4
           POLY_C(I) = FITC750(I)
         ENDDO
      ELSE IF (TEMP.GT.750.0 .AND. TEMP.LE.800.0) THEN
         DO I = 1,4
           POLY_C(I) = FITC800(I)
         ENDDO
      ELSE IF (TEMP.GT.800.0 .AND. TEMP.LE.850.0) THEN
         DO I = 1,4
           POLY_C(I) = FITC850(I)
         ENDDO
      ELSE IF (TEMP.GT.850.0 .AND. TEMP.LE.900.0) THEN
         DO I = 1,4
           POLY_C(I) = FITC900(I)
         ENDDO
      ELSE IF (TEMP.GT.900.0 .AND. TEMP.LE.950.0) THEN
         DO I = 1,4
           POLY_C(I) = FITC950(I)
         ENDDO
      ELSE IF (TEMP.GT.950.0) THEN
         DO I = 1,4
           POLY_C(I) = FITC1000(I)
         ENDDO
      ENDIF
C
C CALCULATE CHEMICAL YIELD ACCORDING TO THE 3TH POLY. FIT
C
      IF      (E0.LT.10.0)  THEN
         FITE0 = 10.
      ELSE IF (E0.GT.200.0) THEN
         FITE0 = 200.
      ELSE
         FITE0 = E0
      ENDIF
C
      YFIT = 0.0
      DO I = 1,4
        YFIT = YFIT + POLY_C(I)*ALOG10(FITE0)**(I-1)
      ENDDO

      YHAASZ97 = YFIT

CW    WRITE(6,*) 'YHAASZ97 = ',YHAASZ97

      RETURN
      END

C -------------

      FUNCTION YROTH98(E0,TEMP,FLUX)

      IMPLICIT NONE
      REAL    E0,TEMP,FLUX
      REAL    ETHC,ETHD,ETHS,ETFC,QC,SNC
      REAL    CSURF,CSP1,CSP2,CSP3,CSP4,CSP5
      REAL    YSURF1,YTHERM1,YCHEM1
      REAL    YSURF2,YTHERM2,YCHEM2
      REAL    YSURF3,YTHERM3,YCHEM3
      REAL    YSURF4,YTHERM4,YCHEM4
      REAL    YSURF5,YTHERM5,YCHEM5
      REAL    YPHYS, YROTH98,ydam
      INTRINSIC MIN
C
C  *********************************************************************
C  *                                                                   *
C  *  CHEMICAL SPUTTERING CALCULATED BY Roth/Pacher4s FORMULA        *
C  *                                                                   *
C  *  ETHC (eV)  -  Threshold energy for D -> C physical sputtering    *
C  *  ETHD (eV)  -  Threshold energy damage production    *
C  *  ETHS (eV)  -  Threshold energy for surface process    *
C  *  ETFC (eV)  -  Thomas-Fermi energy                                *
C  *  SNC        -  Stopping power                                     *
C  *  QC         -  Fitting parameters                                 *
C  *                                                                   *
C  *  CSURF      -  High temperature cut-off                                 *
C  *  CSPn        -  Hydrocarbons at surface                                  *
C  *                                                                   *
C  *  YPHYS      -  Physical sputtering yield                          *
C  *  YSURF      -  Sputtering due to SURFACE process                  *
C  *  YDAM      -  Radiation induced DAMAGE production                  *
C  *  YTHERM     -  Sputtering due to THERMAL process                  *
C  *  YROTH98    -  Total CHEMICAL sputtering yield                    *
C  *                                                                   *
C  *********************************************************************

C ---------------------------------------------------------
C Total Chemical Sputtering Yield:
C            Yroth98 = Ysurf+Ytherm*(1+D*Ydam)
C ---------------------------------------------------------

C
C 1> PHYSICAL SPUTTERING YIELD
C
      ETHC = 27.0
      ETFC = 447.0
      QC   = 0.1
C
C  - Stopping Power
C
      SNC = 0.5*LOG(1.+1.2288*E0/ETFC)/(E0/ETFC
     >    + 0.1728*SQRT(E0/ETFC)
     >    + 0.008*(E0/ETFC)**0.1504)
C
C  - Physical Sputtering Yield
C
      IF (E0.GT.ETHC) THEN
         YPHYS = QC*SNC*(1-(ETHC/E0)**(2./3.))*(1-ETHC/E0)**2
      ELSE
         YPHYS = 0.0
      ENDIF
C
C 2> YSURF: Surface Process
C
       ETHS  =  2.0
      CSURF  = 1/(1.+3E7*EXP(-1.4*11604/TEMP))
      CSP1   = CSURF*(2E-32*FLUX+EXP(-1.865*11604/TEMP))
     >         /(2E-32*FLUX+(1+2E29/FLUX*EXP(-1.8*11604/TEMP))
     >         *EXP(-1.865*11604/TEMP))
      CSP2   = CSURF*(2E-32*FLUX+EXP(-1.7*11604/TEMP))
     >         /(2E-32*FLUX+(1+2E29/FLUX*EXP(-1.8*11604/TEMP))
     >         *EXP(-1.7*11604/TEMP))
      CSP3   = CSURF*(2E-32*FLUX+EXP(-1.535*11604/TEMP))
     >         /(2E-32*FLUX+(1+2E29/FLUX*EXP(-1.8*11604/TEMP))
     >         *EXP(-1.535*11604/TEMP))
      CSP4   = CSURF*(2E-32*FLUX+EXP(-1.38*11604/TEMP))
     >         /(2E-32*FLUX+(1+2E29/FLUX*EXP(-1.8*11604/TEMP))
     >         *EXP(-1.38*11604/TEMP))
      CSP5   = CSURF*(2E-32*FLUX+EXP(-1.26*11604/TEMP))
     >         /(2E-32*FLUX+(1+2E29/FLUX*EXP(-1.8*11604/TEMP))
     >         *EXP(-1.26*11604/TEMP))

      IF (E0.GT.ETHS) THEN
         YSURF1 = CSP1*QC*SNC*(1-(ETHS/E0)**(2./3.))*(1-ETHS/E0)**2
     >           /(1.+EXP((E0-65.)/40.))
         YSURF2 = CSP2*QC*SNC*(1-(ETHS/E0)**(2./3.))*(1-ETHS/E0)**2
     >           /(1.+EXP((E0-65.)/40.))
         YSURF3 = CSP3*QC*SNC*(1-(ETHS/E0)**(2./3.))*(1-ETHS/E0)**2
     >           /(1.+EXP((E0-65.)/40.))
         YSURF4 = CSP4*QC*SNC*(1-(ETHS/E0)**(2./3.))*(1-ETHS/E0)**2
     >           /(1.+EXP((E0-65.)/40.))
         YSURF5 = CSP5*QC*SNC*(1-(ETHS/E0)**(2./3.))*(1-ETHS/E0)**2
     >           /(1.+EXP((E0-65.)/40.))

      ELSE
         YSURF1 = 0.0
         YSURF2 = 0.0
         YSURF3 = 0.0
         YSURF4 = 0.0
         YSURF5 = 0.0
      ENDIF
C
C 3> YTHERM: Thermal Activated Process
C
      YTHERM1 = CSP1*0.033*1.3*EXP(-1.865*11604/TEMP)
     >         /(2E-32*FLUX+EXP(-1.865*11604/TEMP))
      YTHERM2 = CSP2*0.033*1.3*EXP(-1.7*11604/TEMP)
     >         /(2E-32*FLUX+EXP(-1.7*11604/TEMP))
      YTHERM3 = CSP3*0.033*1.3*EXP(-1.535*11604/TEMP)
     >         /(2E-32*FLUX+EXP(-1.535*11604/TEMP))
      YTHERM4 = CSP4*0.033*1.3*EXP(-1.38*11604/TEMP)
     >         /(2E-32*FLUX+EXP(-1.38*11604/TEMP))
      YTHERM5 = CSP5*0.033*1.3*EXP(-1.26*11604/TEMP)
     >         /(2E-32*FLUX+EXP(-1.26*11604/TEMP))
C
C 4> YDAM: Damage Enhancement of Chemical Sputtering Yield
C
      ETHD = 15.0
      IF (E0.GT.ETHD) THEN
         YDAM = QC*SNC*(1-(ETHD/E0)**(2./3.))*(1-ETHD/E0)**2
      ELSE
         YDAM = 0.0
      ENDIF
C
C 5> YROTH98: Total Chemical Sputtering Yield
C
      YCHEM1 = YSURF1 + YTHERM1* (1 + 125* YDAM)
      YCHEM2 = YSURF2 + YTHERM2* (1 + 125* YDAM)
      YCHEM3 = YSURF3 + YTHERM3* (1 + 125* YDAM)
      YCHEM4 = YSURF4 + YTHERM4* (1 + 125* YDAM)
      YCHEM5 = YSURF5 + YTHERM5* (1 + 125* YDAM)

      YROTH98= (YCHEM1 + YCHEM2 + YCHEM3)/4.0 + (YCHEM4 + YCHEM5)/8.0

CW    WRITE(6,*) 'YROTH98 = ',YROTH98

      RETURN
      END
C
C=======================================================================
      SUBROUTINE RCLEAK(IRWALL)
C
C     P1-->P2 SO THAT PLASMA LIES ON THE LEFT
C
      INCLUDE 'pnimb'
      PARAMETER (MRG=MRGX ,MZN=MRG-2 ,MCH=41 ,MCC=MCCX, MWAC=13 )
      PARAMETER (MBS=MBSX ,MSD=MBS   ,MSC=2 )
      PARAMETER (MIO=3    ,MCP=6)
      PARAMETER (MEG=5    ,MIXS=10   ,MLEAK=9)
C
      COMMON/STOGEO/IR,IREG,IREG3D,ISENT,LEAVES,XIN,YIN,ZIN,
     * COSP,SINP,COST,SINT,TANT,COSKT,DIST,PILX,IRZ,IREGZ,IREG3Z,
     * IZIN,IZ,ISSOU,X,Y,Z
      REAL*8 X,Y,Z
C
      PARAMETER ( NWCOMB=NWCOMX )
      COMMON/COMBIN/MASTER(NWCOMB)
      DIMENSION ASTER(NWCOMB)
      EQUIVALENCE(MASTER(1),ASTER(1))
C
      COMMON/CGEOM2/LOCREG,NUMBOD,IROR,LR1,LR2,LDATA,NUMR,LBASE,LTMA
     *             ,LOCBOD,IDBG,KLOOP,PINF,LKOR,NOA,IST,NOREG,LVOL,LAREA
     *             ,LNUMR,LAIRC,LVOLTR,LLASTG,IRWGMT,NRTRU
      REAL*8 PINF
C
      COMMON/CGEOMT/KREG,KREGM1,IR3DST,IR2DST,AREAD(MRG),
     * KONDC,KONDZ,I3D,KREG3D,LREG3D,LQUOTA,LDZETA,KSXY3D,NZETA
C
      COMMON/COMPOS/NION,NCOM,LIGHTW,RNLITE,EWLITE,
     * SYMB(MIO),PERC(MIO),DENSE(MRG),DENSI(MRG,MIO),EATMD,EATMR,
     * TEMPE(MRG),TEMPI(MRG),IBOUND(MRG),ALBEDO(MRG),LIWALL(MRG),COEFMX
     *,IEMIS(MRG),BEXPT(MRG),WEXPT(MRG,3),SHP,DRIFTV(MRG),DRIFTC(MRG,3)
     *,ISTARG(MRG),CHARGE(MCP),PROREQ(4),ALBATO(MRG),ALBENE(MRG),INDHEL
     *,NTSPUT,PSEMIP(MRG,2),IRTRIM(MCP,MCP),NFTRIM,LPVOID,DCUTCX,TCUTCX
     *,ICUTCX,INDEF,IYCHEM,EYCHEM,AYCHEM,NLEAK,XLEAK(4,MLEAK),ILEAK(MRG)
     *,NZREC,NUTRLZ(MCP),MIMP,IGOPT,PRORCL(MIO),UNDEF
     *,NZYIZ,CZYIZ(MCP),AYIZ(MCP),BYIZ(MCP),EYIZ(MCP),IYIZ(MCP),ALFCH7
     *,PARDIR(MRG,3),RECMAT(MIO,MIO,MRG)
C
      PARAMETER (NCT=24,MKES=4)
      COMMON/CTAB0/TABLE(NCT,11),IZLOZ(0:100)
      COMMON/CTABLE/SPUTAB(NCT,NCT)
     *,LABINT(MCP),LABEXT(NCT),IXS(MIXS),ITRIM
     *,NIONPM,MCX,MOLEC(MCP),IATOM(MCP),EXTSYM(MCP),QESP(NCT,NCT)
     *,EB(NCT),QCOEF(NCT),TLOTZ(NCT,26),CXRMAX(5,MRG),ESRMAX(MKES,MRG)
     *,TBELL(NCT,26),ITAGS(NCT,NCT,2)
C
      COMMON/PHYSIC/WSTART,WGAME,W,NUTRAL,MOL,A,E,CLOCK,IBIN,IBRNPL,
     * SIGT,SIGIT,SIGCXT,SIGEST,SIGST,SIGSTS,IDMOL,DISH2S(MRG),
     * ELECTR(MRG,MCP),SIGE,SIGI(MIO),SIGCX(MIO),SIGEL(MIO),
     * DISH2(MRG),DIOH2(MRG)
     *,SVI,SVCX(MIO)
C
      COMMON/IOFILE/IN,IOUT,IUERR,IARK,IPUNCH,IGMT,ITRMT,ITAPIO(2)
C
      REAL*8 XCG(2)
C
      ILK = ILEAK(IRWALL)
      TI = TEMPI(IRWALL)
C
C       SELECT Z
      Z=Z
      IZ=IZ
C       SELECT X, Y
      X1=XLEAK(1,ILK)
      Y1=XLEAK(2,ILK)
      X2=XLEAK(3,ILK)
      Y2=XLEAK(4,ILK)
      C=RANF()
      IF(X1.EQ.X2) THEN
        X=X1
        Y=Y1+C*(Y2-Y1)
      ELSE
        X=X1+C*(X2-X1)
        Y=Y2+(X-X2)*(Y1-Y2)/(X1-X2)
      ENDIF
C                      REGION INDEX OF THE POINT
      XCG(1)=X
      XCG(2)=Y
      CALL GETIR(XCG,IR,0)
      IF(IR.LT.0) RETURN
      IREG=MASTER(LKOR+IR)
      IREG3D=IREG
      IF(I3D.NE.0) IREG3D=MASTER(KSXY3D+(IZ-1)*KREG+IREG)
      IF(IBOUND(IREG3D).NE.0) THEN
        WRITE(IUERR,*) ' **** RCLEAK ERROR FOR SEGMENT',ILK
        IR=-7
        CALL EXITN(1)
        RETURN
      ENDIF
      IRZ=IR
      IREGZ=IREG
      IREG3Z=IREG3D
      ISENT=0
C
C       DIRECTION COSINES OF THE ORIENTED NORMAL
C       TOWARDS PLASMA AS 'PRECOLLISION' DIRECTION FOR DIDIMO
      COSP=Y1-Y2
      SINP=X2-X1
      SUM=SQRT(COSP**2+SINP**2)
      COSP=COSP/SUM
      SINP=SINP/SUM
      COST=0.0
      SINT=1.0
      TANT=999.0
C       COSINE DISTRIBUTION
      CALL COSLAW(COSKT,2)
C       DIRECTION TOWARD PLASMA
      CALL DIDIMO
C
C       OTHER PARAMETERS
      E=1.5*TI
      NUTRAL=NUTRAL
C
C     FORCE RE-EMISSION IN MOLECULAR STATE FOR HYDROGEN
      IF(MOL.EQ.1) THEN
        IF(IEMIS(IRWALL).EQ.2 .AND. MOLEC(NUTRAL).NE.0) THEN
          NUTRAL=MOLEC(NUTRAL)
          MOL=2
          A=A*2.0
          W=W*0.5
        ENDIF
      ENDIF
CW    WRITE(IUERR,*) ' RCLEAK  , NUTRAL,MOL,A,E',NUTRAL,MOL,A,E
C
      RETURN
      END
C
C=======================================================================
      FUNCTION LINDEX( MDIM , IVEC , IVAL )
      IMPLICIT NONE
C
C-----------------------------------------------------------------------
C
C PURPOSE : TO RETURN THE INDEX OF IVEC() WHEN THE VALUE IS IVAL
C
C INPUT   : (I*4) MDIM     = MAX. SIZE OF IVEC()
C           (I*4) IVEC()   = VECTOR
C           (I*4) IVAL     = SEARCH VALUE
C
C OUTPUT  : (I*4) LINDEX   = 0 --- NO VALUE FOUND
C
C AUTHOR  : JAMES SPENCE (K1/0/80)  EXT. 4866
C           JET
C
C DATE    : 22-JAN-96
C
C-----------------------------------------------------------------------
C
C..INPUT
      INTEGER*4 MDIM , IVAL
      INTEGER*4 IVEC(MDIM)
C
C..OUTPUT
      INTEGER*4 LINDEX
C
C..PROGRAM
      INTEGER*4 I
C
C-----------------------------------------------------------------------
C
      LINDEX        = 0
C
      DO 100 I      = 1 , MDIM
         IF( IVAL.EQ.IVEC(I) ) THEN
             LINDEX = I
             GOTO 9999
         END IF
  100 CONTINUE
C
C-----------------------------------------------------------------------
C
 9999 RETURN
      END
C
C=======================================================================
      SUBROUTINE XYREFL(COSPN,SINPN,COSP,SINP,ITYPE,IOUT)
C
      IMPLICIT NONE
      REAL COSPN,SINPN,COSP,SINP
      INTEGER ITYPE,IOUT
C
      REAL TRAN1,TRAN2,UR,VR,UP,VP
      REAL SGN,X
      SGN(X)=SIGN(1.0,X)
C
      GO TO (100,200), ITYPE
C
C
  100 CONTINUE
C                     OPTICAL REFLECTION IN THE (X,Y) PLANE
      TRAN1=SINPN**2-COSPN**2
      TRAN2=-2.0*COSPN*SINPN
      UR=COSP*TRAN1+SINP*TRAN2
      VR=COSP*TRAN2-SINP*TRAN1
      GOTO 500
C
C                     TRANSMISSION THRU GAPS
  200 CONTINUE
C          DIRECTION COSINES IN THE ROTATED SYSTEM COSPN'=0,SINPN'=1
      UP=SINPN*COSP-COSPN*SINP
      VP=COSPN*COSP+SINPN*SINP
C          COSINES GRAZING ALONG OX'
      UP= 0.99388*SGN(UP)
      VP=-0.11043*SGN(VP)
C     UP/VP=9
C          BACK TO OXY
      UR= SINPN*UP+COSPN*VP
      VR=-COSPN*UP+SINPN*VP
      GOTO 500
C
  500 CONTINUE
      TRAN1=SQRT(UR**2+VR**2)
      COSP=UR/TRAN1
      SINP=VR/TRAN1
      RETURN
      END
