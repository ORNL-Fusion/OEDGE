!pb  30.08.06:  data structure for reaction data redefined
!pb  12.10.06:  modcol revised
!pb  22.11.06:  flag for shift of first parameter to rate_coeff introduced
!pb  28.11.06:  initialization of XSTOR reactivated because of trouble in
!pb             BGK iteration
C
C
      FUNCTION FPATHM (K,CFLAG,JCOU,NCOU)
C
C   CALCULATE MEAN FREE PATH AND REACTION RATES FOR NEUTRAL
C   "BEAM MOLECULES" OF VELOCITY VEL IN DRIFTING MAXWELLIAN PLASMA-BACKGROUND
C   IN CELL K
C   CFLAG:  AS IN FUNCTION FPATHA
C
      USE PRECISION
      USE PARMMOD
      USE COMUSR
      USE CCONA
      USE CLOGAU
      USE CINIT
      USE CZT1
      USE COMPRT
      USE COMXS
      USE CTRCEI

      IMPLICIT NONE

      REAL(DP), INTENT(OUT) :: CFLAG(7,3)
      INTEGER, INTENT(IN) :: K, JCOU,NCOU

      REAL(DP) :: DENIO(NPLS), ZTI(NPLS)
      REAL(DP) :: PVELQ(NPLSV)
      REAL(DP) :: TBPI3(9), TBCX3(9), TBEL3(9), FP(6)
      REAL(DP) :: EPPI3(9), EPCX3(9), EPEL3(9)
      REAL(DP) :: VREL, VRELQ, TBEL, FEPLCX3, CROSS, EXPO, ELB, CEL,
     .          SIGMAX, FEPLEL3, VX, VY, VZ, EHEAVY, FTABEI1, FPATHM,
     .          PVELQ0, DENEL, FEELEI1, VEFF, VEFFQ, CXS, ELAB,
     .          TBCX, FEHVDS1, PLS, RATE_COEFF, SNGL_POLY, RCMIN, RCMAX,
     .          ENERGY_RATE_COEFF
      INTEGER :: IBGK, IREL, IMEL, J, JAN, IF8, IML, IPL, IMDS, IRDS,
     .           II, IREAC, IMCX, IMPI, KK, IRCX, I1, I2, IPLSTI, IPLSV,
     .           IREI, IRPI
C
C
C  SET DEFAULTS: NO REACTIONS
C
      XSTORV=0.D0
!pb      IF (NCOU.GT.1) THEN
        XSTOR=0.D0
!pb      ENDIF
      FPATHM=1.D10
      SIGMAX=0.D0
C
      IF (LGVAC(K,0)) RETURN
C
C   LOCAL PLASMA PARAMETERS
C
      DENEL=DEIN(K)
      DO 2 IPLS=1,NPLSI
        ZTI(IPLS)=ZT1(IPLS,K)
2       DENIO(IPLS)=DIIN(IPLS,K)
      PVELQ0=VEL*VEL
      DO 3 IPLS=1,NPLSV
        IF (NLDRFT) THEN
          IF (INDPRO(4) == 8) THEN
            CALL VECUSR (2,VX,VY,VZ,IPLS)
          ELSE
            VX=VXIN(IPLS,K)
            VY=VYIN(IPLS,K)
            VZ=VZIN(IPLS,K)
          END IF
          PVELQ(IPLS)=(VELX*VEL-VX)**2+
     .                (VELY*VEL-VY)**2+
     .                (VELZ*VEL-VZ)**2
        ELSE
          PVELQ(IPLS)=PVELQ0
        ENDIF
3     CONTINUE
C
C
C  ELECTRON IMPACT RATE COEFFICIENT
C
      IF (LGMEI(IMOL,0).EQ.0.OR.LGVAC(K,NPLS+1)) GOTO 25
      DO 10 IMDS=1,NMDSI(IMOL)
        IRDS=LGMEI(IMOL,IMDS)
        IF (MODCOL(1,2,IRDS).EQ.1) THEN
          IF (NSTORDR >= NRAD) THEN
            SIGVEI(IRDS)=TABDS1(IRDS,K)
          ELSE
            SIGVEI(IRDS)=FTABEI1(IRDS,K)
          END IF
        ELSE
          GOTO 990
        ENDIF
C
        IF (NSTORDR >= NRAD) THEN
          ESIGEI(IRDS,5)=EELDS1(IRDS,K)
          EHEAVY=EHVDS1(IRDS,K)
        ELSE
          ESIGEI(IRDS,5)=FEELEI1(IRDS,K)
          EHEAVY=FEHVDS1(IRDS,K)
        ENDIF
C
        ESIGEI(IRDS,1)=EATDS(IRDS,0,1)*E0+EATDS(IRDS,0,2)*EHEAVY
        ESIGEI(IRDS,2)=EMLDS(IRDS,0,1)*E0+EMLDS(IRDS,0,2)*EHEAVY
        ESIGEI(IRDS,3)=EIODS(IRDS,0,1)*E0+EIODS(IRDS,0,2)*EHEAVY
        ESIGEI(IRDS,4)=EPLDS(IRDS,  1)*E0+EPLDS(IRDS,  2)*EHEAVY
C
        SIGMAX=MAX(SIGMAX,SIGVEI(IRDS))
        SIGEIT=SIGEIT+SIGVEI(IRDS)
10    CONTINUE
C
C
C  IONIZATION OF MOLECULE BY ION IMPACT, ION SPEZIES IPLS=1,NPLSI
C
25    CONTINUE
      DO 30 IMPI=1,NMPII(IMOL)
        SIGVPI(IMPI)=0.
        SIGPIT=SIGPIT+SIGVPI(IMPI)
30    CONTINUE
C
C  CHARGE EXCHANGE RATE COEFFICIENT FOR MOLECULE IMOL
C  WITH BULK IONS OF SPEZIES IPLS=1,NPLSI
C  40--->50
C
40    CONTINUE
      IF (LGMCX(IMOL,0,0).EQ.0.OR.LGVAC(K,0)) GOTO 50
      DO 41 IMCX=1,NMCXI(IMOL)
        IRCX=LGMCX(IMOL,IMCX,0)
        IPLS=LGMCX(IMOL,IMCX,1)
        IPLSTI=MPLSTI(IPLS)
        IPLSV=MPLSV(IPLS)
        IF (LGVAC(K,IPLS)) GOTO 41
C
C  1.) RATE COEFFICIENT
C
        IF (MODCOL(3,2,IRCX).EQ.1) THEN
C  MODEL 1:
C  MAXWELLIAN RATE, IGNORE NEUTRAL VELOCITY
          IF (NSTORDR >= NRAD) THEN
            SIGVCX(IRCX)=TABCX3(IRCX,K,1)
          ELSE
CDR  SIGVCX(IRCX)=FTABCX3 : NOT READY
            KK=NREACX(IRCX)
            PLS=TIINL(IPLSTI,K)+ADDCX(IRCX,IPLS)
            TBCX = RATE_COEFF(KK,PLS,0._DP,.TRUE.,0)*DIIN(IPLS,K)
            SIGVCX(IRCX)=TBCX
          END IF
        ELSEIF (MODCOL(3,2,IRCX).EQ.2) THEN
C  MODEL 2:
C  BEAM - MAXWELLIAN RATE
          IF (TIIN(IPLSTI,K).LT.TVAC) THEN
C     HERE: T_I IS SO LOW, THAT ALL ION ENERGY IS IN DRIFT MOTION.
C           HENCE: USE BEAM-BEAM RATE INSTEAD.
            VRELQ=PVELQ(IPLSV)
            VREL=SQRT(VRELQ)
            ELAB=LOG(VRELQ)+DEFCX(IRCX)
            IREAC=MODCOL(3,1,IRCX)
            CXS=CROSS(ELAB,IREAC,IRCX,'FPATHM CX')
            SIGVCX(IRCX)=CXS*VREL*DENIO(IPLS)
          ELSE
C  MINIMUM PROJECTILE ENERGY: 0.1 EV
            ELB=MAX(-2.3_DP,LOG(PVELQ(IPLSV))+EEFCX(IRCX))
            IF (NSTORDR >= NRAD) THEN
! DOUBLE POLYNOMIAL FIT REDUCED TO SINGLE POLYNOMIAL FIT BY 
! PRECALCULATING TEMPERATURE DEPENDENCIES
              TBCX3(1:NSTORDT) = TABCX3(IRCX,K,1:NSTORDT)
              FP = 0._DP
              RCMIN = -HUGE(1._DP)
              RCMAX = HUGE(1._DP)
              EXPO = SNGL_POLY(TBCX3,ELB,RCMIN,RCMAX,FP,0,0)
            ELSE
! CALCULATE RATE-COEFFICIENT 
              KK=NREACX(IRCX)
              PLS=TIINL(IPLSTI,K)+ADDCX(IRCX,IPLS)
              EXPO = RATE_COEFF(KK,PLS,ELB,.FALSE.,0) + DIINL(IPLS,K)
     .               + FACREA(KK)
            END IF
            SIGVCX(IRCX)=EXP(EXPO)
          ENDIF
        ELSEIF (MODCOL(3,2,IRCX).EQ.3) THEN
C  MODEL 3:
C  BEAM - BEAM RATE, BUT WITH EFFECTIVE INTERACTION ENERGY
          VEFFQ=ZTI(IPLS)+PVELQ(IPLSV)
          VEFF=SQRT(VEFFQ)
          ELAB=LOG(VEFFQ)+DEFCX(IRCX)
          IREAC=MODCOL(3,1,IRCX)
          CXS=CROSS(ELAB,IREAC,IRCX,'FPATHM CX')
          SIGVCX(IRCX)=CXS*VEFF*DENIO(IPLS)
        ELSE
          GOTO 992
        ENDIF
C
        SIGMAX=MAX(SIGMAX,SIGVCX(IRCX))
        SIGCXT=SIGCXT+SIGVCX(IRCX)
C
C  2.) BULK ION ENERGY LOSS RATE:
C
        IF (MODCOL(3,4,IRCX).EQ.1) THEN
C  MODEL 1:
C  MEAN ENERGY FROM DRIFTING MAXWELLIAN
C  (ONLY NEEDED FOR TRACKLENGTH ESTIMATOR)
C  ION SAMPLING FROM MAXWELLIAN
          IF (NSTORDR >= NRAD) THEN
            ESIGCX(IRCX,1)=EPLCX3(IRCX,K,1)
          ELSE
            ESIGCX(IRCX,1)=FEPLCX3(IRCX,K)
          END IF
          CFLAG(3,1)=2
        ELSEIF (MODCOL(3,4,IRCX).EQ.2) THEN
C  MODEL 2:
C  MEAN ENERGY FROM CROSS SECTION WEIGHTED DRIFTING MAXWELLIAN
C  (ONLY NEEDED FOR TRACKLENGTH ESTIMATOR)
C  ION SAMPLING FROM WEIGHTED DRIFTING MAXWELLIAN (E.G., BY REJECTION)
          IF (IESTCX(IRCX,3).EQ.0) THEN  ! for tracklength estimator only
C  MINIMUM PROJECTILE ENERGY: 0.1 EV
            ELB=MAX(-2.3_DP,LOG(PVELQ(IPLSV))+EEFCX(IRCX))
            IF (NSTORDR >= NRAD) THEN
! DOUBLE POLYNOMIAL FIT REDUCED TO SINGLE POLYNOMIAL FIT BY 
! PRECALCULATING TEMPERATURE DEPENDENCIES
              EPCX3(1:NSTORDT) = EPLCX3(IRCX,K,1:NSTORDT)
              FP = 0._DP
              RCMIN = -HUGE(1._DP)
              RCMAX = HUGE(1._DP)
              EXPO = SNGL_POLY(TBEL3,ELB,RCMIN,RCMAX,FP,0,0)
            ELSE
! CALCULATE ENERGY-WEIGHTED RATE-COEFFICIENT 
              KK=NELRCX(IRCX)
              PLS=TIINL(IPLSTI,K)+ADDCX(IRCX,IPLS)
              EXPO = ENERGY_RATE_COEFF(KK,PLS,ELB,.FALSE.,0) 
     .               + DIINL(IPLS,K) + FACREA(KK)
            END IF
            ESIGCX(IRCX,1)=EXP(EXPO)/SIGVCX(IRCX)
            ESIGCX(IRCX,1)=ESIGCX(IRCX,1)+EDRIFT(IPLS,K)
          ENDIF  ! this was for tracklength estimator only
          CFLAG(3,1)=3
        ELSEIF (MODCOL(3,4,IRCX).EQ.3) THEN
C  MODEL 3:
C  MEAN ENERGY FROM DRIFTING ISOTROPIC ONE SPEED DISTRIBUTION
C  (ONLY NEEDED FOR TRACKLENGTH ESTIMATOR)
C  ION SAMPLING FROM WEIGHTED DRIFTING ISOTROPIC ONE SPEED DISTRIBUTION
          IF (NSTORDR >= NRAD) THEN
            ESIGCX(IRCX,1)=EPLCX3(IRCX,K,1)
          ELSE
            ESIGCX(IRCX,1)=FEPLCX3(IRCX,K)
          END IF
          CFLAG(3,1)=1
        ELSE
          GOTO 992
        ENDIF
41    CONTINUE
C
C  ELASTIC COLLISIONS OF MOLECULE IMOL WITH IONS OF SPEZIES IPLS=1,NPLSI
C  50--->60
C
50    CONTINUE
      IF (LGMEL(IMOL,0,0).EQ.0.OR.LGVAC(K,0)) GOTO 60
      DO 51 IMEL=1,NMELI(IMOL)
        IREL=LGMEL(IMOL,IMEL,0)
        IPLS=LGMEL(IMOL,IMEL,1)
        IPLSTI=MPLSTI(IPLS)
        IPLSV=MPLSV(IPLS)
        IBGK=NPBGKP(IPLS,1)
        IF (LGVAC(K,IPLS)) GOTO 51
C
C  1.) RATE COEFFICIENT
C
        IF (MODCOL(5,2,IREL).EQ.1) THEN
C  MAXWELL
          IF (NSTORDR >= NRAD) THEN
            SIGVEL(IREL)=TABEL3(IREL,K,1)
          ELSE
            KK=NREAEL(IREL)
            PLS=TIINL(IPLSTI,K)+ADDEL(IREL,IPLS)
            TBEL = RATE_COEFF(KK,PLS,0._DP,.TRUE.,0)*DIIN(IPLS,K)
            SIGVEL(IREL)=TBEL
          END IF
        ELSEIF (MODCOL(5,2,IREL).EQ.2) THEN
C  BEAM - MAXWELL
          IF (TIIN(IPLSTI,K).LT.TVAC) THEN
            VRELQ=PVELQ(IPLSV)
            VREL=SQRT(VRELQ)
            ELAB=LOG(VRELQ)+DEFEL(IREL)
            IREAC=MODCOL(5,1,IREL)
            CEL=CROSS(ELAB,IREAC,IREL,'FPATHM EL')
            SIGVEL(IREL)=CEL*VREL*DENIO(IPLS)
          ELSE
C  MINIMUM PROJECTILE ENERGY: 0.1 EV
            ELB=MAX(-2.3_DP,LOG(PVELQ(IPLSV))+EEFEL(IREL))
            IF (NSTORDR >= NRAD) THEN
! DOUBLE POLYNOMIAL FIT REDUCED TO SINGLE POLYNOMIAL FIT BY 
! PRECALCULATING TEMPERATURE DEPENDENCIES
              TBEL3(1:NSTORDT) = TABEL3(IREL,K,1:NSTORDT)
              FP = 0._DP
              RCMIN = -HUGE(1._DP)
              RCMAX = HUGE(1._DP)
              EXPO = SNGL_POLY(TBEL3,ELB,RCMIN,RCMAX,FP,0,0)
            ELSE
! CALCULATE RATE-COEFFICIENT 
              KK=NREAEL(IREL)
              PLS=TIINL(IPLSTI,K)+ADDEL(IREL,IPLS)
              EXPO = RATE_COEFF(KK,PLS,ELB,.FALSE.,0) + DIINL(IPLS,K)
     .               + FACREA(KK)
            END IF
            SIGVEL(IREL)=EXP(EXPO)
          ENDIF
        ELSEIF (MODCOL(5,2,IREL).EQ.3) THEN
C  BEAM - BEAM
          VRELQ=ZTI(IPLS)+PVELQ(IPLSV)
          VREL=SQRT(VRELQ)
          ELAB=LOG(VRELQ)+DEFEL(IREL)
          IREAC=MODCOL(5,1,IREL)
          CEL=CROSS(ELAB,IREAC,IREL,'FPATHM EL')
          SIGVEL(IREL)=CEL*VREL*DENIO(IPLS)
        ELSE
          GOTO 995
        ENDIF

        SIGMAX=MAX(SIGMAX,SIGVEL(IREL))
        SIGELT=SIGELT+SIGVEL(IREL)
        IF (IBGK.NE.0) SIGBGK=SIGBGK+SIGVEL(IREL)
C
C  2.) BULK ION ENERGY LOSS RATE:
C
        IF (MODCOL(5,4,IREL).EQ.1) THEN
C  MODEL 1:
C  MEAN ENERGY FROM DRIFTING MAXWELLIAN
C  (ONLY NEEDED FOR TRACKLENGTH ESTIMATOR)
C  ION SAMPLING FROM MAXWELLIAN
          IF (NSTORDR >= NRAD) THEN
            ESIGEL(IREL,1)=EPLEL3(IREL,K,1)
          ELSE
            ESIGEL(IREL,1)=FEPLEL3(IREL,K)
          END IF
          CFLAG(5,1)=2
        ELSEIF (MODCOL(5,4,IREL).EQ.2) THEN
C  MODEL 2:
C  MEAN ENERGY FROM CROSS SECTION WEIGHTED DRIFTING MAXWELLIAN
C  (ONLY NEEDED FOR TRACKLENGTH ESTIMATOR)
C  ION SAMPLING FROM WEIGHTED DRIFTING MAXWELLIAN (E.G., BY REJECTION)
          IF (IESTEL(IREL,3).EQ.0) THEN  ! for tracklength estimator only
C  MINIMUM PROJECTILE ENERGY: 0.1 EV
            ELB=MAX(-2.3_DP,LOG(PVELQ(IPLSV))+EEFEL(IREL))
            IF (NSTORDR >= NRAD) THEN
! DOUBLE POLYNOMIAL FIT REDUCED TO SINGLE POLYNOMIAL FIT BY 
! PRECALCULATING TEMPERATURE DEPENDENCIES
              EPEL3(1:NSTORDT) = EPLEL3(IREL,K,1:NSTORDT)
              FP = 0._DP
              RCMIN = -HUGE(1._DP)
              RCMAX = HUGE(1._DP)
              EXPO = SNGL_POLY(EPEL3,ELB,RCMIN,RCMAX,FP,0,0)
            ELSE
! CALCULATE ENERGY-WEIGHTED RATE-COEFFICIENT 
              KK=NELREL(IREL)
              PLS=TIINL(IPLSTI,K)+ADDEL(IREL,IPLS)
              EXPO = ENERGY_RATE_COEFF(KK,PLS,ELB,.FALSE.,0)
     .               + DIINL(IPLS,K) + FACREA(KK)
            END IF
            ESIGEL(IREL,1)=EXP(EXPO)/SIGVEL(IREL)
            ESIGEL(IREL,1)=ESIGEL(IREL,1)+EDRIFT(IPLS,K)
          ENDIF  ! this was for tracklength estimator only
          CFLAG(5,1)=3
C       ELSEIF (MODCOL(5,4,IREL).EQ.3) THEN
C  MODEL 3:
C  MEAN ENERGY FROM DRIFTING ISOTROPIC ONE SPEED DISTRIBUTION
C  (ONLY NEEDED FOR TRACKLENGTH ESTIMATOR)
C  ION SAMPLING FROM WEIGHTED DRIFTING ISOTROPIC ONE SPEED DISTRIBUTION
C  NOT READY
        ELSE
          GOTO 995
        ENDIF
51    CONTINUE
C
60    CONTINUE
C
C     TOTAL
C
      IF (SIGEIT.GT.0._DP) THEN
        DO IREI=1,NRDS
          IF (SIGVEI(IREI) .LE. SIGMAX*1.D-10) THEN
            SIGEIT=SIGEIT-SIGVEI(IREI)
            SIGVEI(IREI) = 0.D0
          END IF
        END DO
      END IF

      IF (SIGPIT.GT.0._DP) THEN
        DO IRPI=1,NRPI
          IF (SIGVPI(IRPI) .LE. SIGMAX*1.D-10) THEN
            SIGPIT=SIGPIT-SIGVPI(IRPI)
            SIGVPI(IRPI) = 0.D0
          END IF
        END DO
      END IF

      IF (SIGCXT.GT.0._DP) THEN
        DO IRCX=1,NRCX
          IF (SIGVCX(IRCX) .LE. SIGMAX*1.D-10) THEN
            SIGCXT=SIGCXT-SIGVCX(IRCX)
            SIGVCX(IRCX) = 0.D0
          END IF
        END DO
      END IF

      IF (SIGELT.GT.0._DP) THEN
        DO IREL=1,NREL
          IF (SIGVEL(IREL) .LE. SIGMAX*1.D-10) THEN
            SIGELT=SIGELT-SIGVEL(IREL)
            SIGVEL(IREL) = 0.D0
          END IF
        END DO
      END IF
C
100   CONTINUE
      SIGTOT=SIGPIT+SIGCXT+SIGEIT+SIGELT
      IF (SIGTOT.GT.1.D-20) THEN
        FPATHM=VEL/SIGTOT
        ZMFPI=1./FPATHM
      ENDIF
C
      RETURN
990   CONTINUE
      WRITE (iunout,*) 'ERROR IN FPATHM: INCONSISTENT ELEC. IMP. DATA'
      WRITE (iunout,*) 'IMOL,IRDS,MODCOL(1,J,IRDS) '
      WRITE (iunout,*) IMOL,IRDS,(MODCOL(1,J,IRDS),J=1,4)
      CALL EXIT_OWN(1)
992   CONTINUE
      WRITE (iunout,*) 
     .  'ERROR IN FPATHM: INCONSISTENT CHARGE EXCHANGE DATA'
      WRITE (iunout,*) 'IMOL,IRCX,(MODCOL(3,J,IRCX),J=1,4) '
      WRITE (iunout,*) IMOL,IRCX,(MODCOL(3,J,IRCX),J=1,4)
      CALL EXIT_OWN(1)
995   CONTINUE
      WRITE (iunout,*) 
     .  'ERROR IN FPATHM: INCONSISTENT ELASTIC COLL. DATA'
      WRITE (iunout,*) 'IMOL,IREL,(MODCOL(5,J,IREL),J=1,4) '
      WRITE (iunout,*) IMOL,IREL,(MODCOL(5,J,IREL),J=1,4)
      CALL EXIT_OWN(1)
      END
