c   061205:   au_to_cm2 --> ccona
!   100107:   ENTRY VELOEL_REINIT added for reinitialization of EIRENE


      SUBROUTINE VELOEL(K,VXO,VYO,VZO,VLO,IOLD,NOLD,VELQ,NFLAG,
     .                  IREL,RMASS)
C
C  THIS SUBROUTINE CARRIES OUT AN ELASTIC COLLISION OF A TEST PARTICLE
C  WITH A BULK PARTICLE.
C  IT RETURNS THE POST COLLISION VELOCITY VECTOR.
C
C  NFLAG: AS IN SUBR. VELOCX
C
C  1ST STEP: FIND COLLISION PARTNER FROM BULK ION SPECIES "IPLS":
C            (VXN,VYN,VZN)
C  2ND STEP: FIND CROSS SECTION AS FUNCTION OF ELAB (AND
C            CARRY OUT WEIGHT CORRECTION, UNLESS REJECTION HAS BEEN USED
C            IN STEP 1
C  3RD STEP: FIND IMPACT PARAMETER B
C  4TH STEP: FIND NEW VELOCITY VECTOR
C
C
C  K   : CELL INDEX
C  VXO : X COMPONENT OF SPEED UNIT VECTOR OF TEST PARTICLE BEFORE EVENT
C  VYO : Y COMPONENT OF SPEED UNIT VECTOR OF TEST PARTICLE BEFORE EVENT
C  VZO : Z COMPONENT OF SPEED UNIT VECTOR OF TEST PARTICLE BEFORE EVENT
C  VLO : VELOCITY OF TEST PARTICLE BEFORE EVENT
C  IOLD: SPECIES INDEX OF THE TEST PARTICLE BEFORE THE EVENT
C  NOLD: DITO, IN MODCOL-ARRAY
C  IPLS: SPECIES INDEX FOR THE THERMAL PLASMA ION VELOCITY
C        AND FOR THE PLASMA DRIFT VELOCITY TO BE USED AS
C        SHIFT VECTOR   (IPLS IN COMMON COMUSR)
C  IREL: LABEL FOR EL-REACTION, E.G., FOR SIGVEL(IREL)
C
      USE PRECISION
      USE PARMMOD
      USE COMUSR
      USE CCONA
      USE CLOGAU
      USE CRAND
      USE CINIT
      USE CZT1
      USE CTRCEI
      USE COMPRT
      USE COMXS
      USE CLAST

      IMPLICIT NONE

      REAL(DP), INTENT(IN) :: VXO, VYO, VZO, VLO, RMASS
      REAL(DP), INTENT(OUT) :: VELQ
      INTEGER, INTENT(IN) :: K, IOLD, NOLD, NFLAG, IREL

      REAL(DP) :: WRMEAN, WRAT, TEST, WO, TIMAX, SIGS, VRELX, VRELS,
     .          E0MAX, ELABS, VXI, VYI, VZI, VRELQ, VN, VREL,
     .          RLMS, RAN, RMSI, RMN, RMI, VRELY, EPS, CPH, CHI,
     .          RSTERN, RESULT, SPH, VRSX, VRSY, VRSZ, CEPS, SEPS, RS,
     .          VSX, VSY, VRYZ, VRELZ, VRQYZ, VSZ, DUMSIGMA, PH,
     .          CTTETHA, BMAX, ELTHETA, ER, ELMIN, ELMAX, B,
     .          VXDR, VYDR, VZDR, ZARGX, ZARGY, ZARGZ, VXN, VYN, VZN,
     .          VX, VY, VZ, ELTHDUM, CTCHDUM, SIGHABER, ELAB,
     .          VR, ZARG, CEL, CROSS, VRQ
      REAL(DP), EXTERNAL :: RANF_EIRENE
      REAL(DP) :: P(9)
!     REAL(DP) :: P_HE_H(9),P_NE_H(9),P_AR_H(9),P_KR_H(9),P_XE_H(9)
!     REAL(DP) :: P_H2_H(9)
!     REAL(DP) :: P_HE_HE(9)
      INTEGER :: IMEAN, IFLAG, IRL, IREAC, JJ, J, ICOUNT, KK
      INTEGER :: IFIRST=0
!  PARAMETERS FOR INTERACTION POTENTIALS ARE NOW READ FROM FILE AMJUEL,
!  NOT HARD WIRED IN THIS ROUTINE OR (EVEN OLDER VERSIONS)
!  IN FUNTIONS FI, FIVEC
!     DATA P_HE_HE/2.55,2.35,0.90,1.9842,1.3990 ,2.6345  ,0.,-1.9125,0./
!     DATA P_H2_H /2.70,3.00,1.00,2.8355,2.18038,3.490687,0.,-2.025 ,0./
!     DATA P_HE_H /2.00,2.20,0.85,1.4556,0.99699,1.99515 ,0.,-1.5   ,0./
!     DATA P_NE_H /2.28,2.68,0.85,1.8709,1.3870 ,2.4402  ,0.,-1.71  ,0./
!     DATA P_AR_H /4.04,2.50,0.86,2.4756,1.7892 ,3.2737  ,0.,-3.03  ,0./
!     DATA P_KR_H /4.45,2.50,0.80,2.7779,2.0077 ,3.7406  ,0.,-3.3375,0./
!     DATA P_XE_H /6.75,3.80,1.08,3.2882,2.6884 ,3.8436  ,0.,-5.0625,0./
      SAVE
C
      IF (IFIRST.EQ.0) THEN
c  special relations for MORSE-Potential functions:
c                iflag=2, projectile A on target B
c                these parameters P(5), P(6), P(8) are also now
c                read from file AMJUEL rather then initialising them here
c       P_A_B(5)=P(4)*(1.-LOG(2.)/P(2))         (=R0, ROOT OF V)
c       P_A_B(6)=P(4)*(1.+LOG(2.)/P(2)/P(3))    (=RW, INFLECTION OF V)
c       P_A_B(8)=-3.*P(1)/4.                    (=V(RW) )
        IFIRST=1
        DO IRL=1,NRELI
          IFLREL(IRL)=0
          NEMEAN(IRL)=0
          XEMEAN(IRL)=0.D0
        ENDDO
      ENDIF
C
      IF (IFLREL(IREL).EQ.0.AND.NFLAG.NE.2) THEN
        IFLREL(IREL)=-1
C  PREPARE REJECTION SAMPLING OF INCIDENT ION VELOCITY
C  IS CROSS SECTION AVAILABLE?
        IREAC=MODCOL(5,1,IREL)
        IF (IREAC.EQ.0) GOTO 1
C
        elmin=log(0.01)
        elmax=log(1.e3)
        SGEVMX(IREL)=-1.D60
        JJ=1
        do j=1,1000
          elab=elmin+(j-1)/999.*(elmax-elmin)
          IF (LHABER) THEN
            CALL SCATANG (ELAB,-1._DP,ELTHDUM,CTCHDUM,SIGHABER)
            CEL= SIGHABER*AU_TO_CM2
          ELSE
            CEL=CROSS(ELAB,IREAC,IREL,'VELOEL 1')
          END IF
          vrq=exp(elab-defel(IREL))
          vr=sqrt(vrq)
          if (cel*vr.gt.SGEVMX(IREL)) then
            JJ=J
            SGEVMX(IREL)=cel*vr
          endif
        enddo
        CALL LEER(1)
        WRITE (iunout,*) 'FIRST CALL TO VELOEL FOR IREL= ',IREL
        WRITE (iunout,*) 'PREPARE REJECTION TECHNIQUE '
        WRITE (iunout,*) 'SGEVMX IN VELOEL,JJ ',SGEVMX(IREL),JJ
        IF (JJ.NE.1.AND.JJ.NE.1000) IFLREL(IREL)=1
        CALL LEER(1)
      ENDIF
1     CONTINUE
C
      ICOUNT=1
C
C  NEXT: STEP 1
C
      ZARG=ZRG(IPLS,K)
      ZARGX=ZRG(IPLS,K)
      ZARGY=ZRG(IPLS,K)
      ZARGZ=ZRG(IPLS,K)
      IF (NLDRFT) THEN
        IF (INDPRO(4) == 8) THEN
          CALL VECUSR (2,VXDR,VYDR,VZDR,IPLS)
        ELSE
          VXDR=VXIN(IPLS,K)
          VYDR=VYIN(IPLS,K)
          VZDR=VZIN(IPLS,K)
        END IF
      ELSE
        VXDR=0.D0
        VYDR=0.D0
        VZDR=0.D0
      ENDIF
C
      VX=VXO*VLO
      VY=VYO*VLO
      VZ=VZO*VLO
C
123   CONTINUE
      IF (INIV2.LE.0) CALL FGAUSS
C
C  SAMPLE FROM 3D MAXWELLIAN
      VXN=FG1(INIV2)
      VYN=FG2(INIV2)
      VZN=FG3(INIV2)
      INIV2=INIV2-1
C
C  DRIFTING, MONOENERGETIC ISOTROPIC DISTRIBUTION
C
      IF (NFLAG.EQ.1) THEN
C  ZT1 CORRESPONDS TO ROOT MEAN SQUARE VELOCITY AT TIIN(IPLS,K)
        VEL=SQRT(ZT1(IPLS,K))
        VN=VEL/SQRT(VXN*VXN+VYN*VYN+VZN*VZN)
        VXN=VXN*VN+VXDR
        VYN=VYN*VN+VYDR
        VZN=VZN*VN+VZDR
      ELSE
        VXN=VXN*ZARGX+VXDR
        VYN=VYN*ZARGY+VYDR
        VZN=VZN*ZARGZ+VZDR
      ENDIF
C
C  DRIFTING MAXWELLIAN DISTRIBUTION (FOR MAXWELL-POTENTIAL: SIGMA*V = CONST.)
C
      IF (NFLAG.EQ.2) THEN
C
        VXI=VXN
        VYI=VYN
        VZI=VZN
C
      ELSE
C
C   ALL OTHER DISTRIBUTIONS
C
C   WEIGHT CORRECTION DUE TO ENERGY DEPENDENCE IN CROSS SECTION
C   OR: REJECTION     DUE TO ENERGY DEPENDENCE IN CROSS SECTION
C   PRESENT VERSION: REJECTION
        VRELQ=(VXN-VX)**2+(VYN-VY)**2+(VZN-VZ)**2
        VREL=SQRT(VRELQ)
        ELAB=LOG(VRELQ)+DEFEL(IREL)
        IREAC=MODCOL(5,1,IREL)
        CEL=CROSS(ELAB,IREAC,IREL,'VELOEL 2')
C
CH FOR SCATTERING ANGLE FROM DIFFERENTIAL CROSS SECTION:
C
        IF (LHABER) THEN
          RMN=RMASS
          RMI=RMASSP(IPLS)
          RMSI=1./(RMN+RMI)
          RLMS=RMN*RMI*RMSI
          ER=RLMS*VRELQ*CVELI2
          RAN=RANF_EIRENE()
          CALL SCATANG (ER,RAN,ELTHDUM,CTCHDUM,SIGHABER)
          CEL= SIGHABER*AU_TO_CM2
        END IF
CH
C
C       IF (NLREJC) THEN
        IF (IFLREL(IREL).GT.0) THEN
          TEST=RANF_EIRENE()*SGEVMX(IREL)
          IF (TEST.GT.CEL*VREL) THEN
C  REJECT
            ICOUNT=ICOUNT+1
            IF (ICOUNT.LT.500) GOTO 123
            WRITE (iunout,*) 
     .        'ICOUNT TOO LARGE IN VELOEL. ACCEPT SAMPLE '
            WRITE (iunout,*) 'NPANU, IREAC, IREL, ELAB ',
     .                   NPANU, IREAC, IREL, ELAB
          ELSE
C  ACCEPT
            XEMEAN(IREL)=XEMEAN(IREL)+ICOUNT
            NEMEAN(IREL)=NEMEAN(IREL)+1
          ENDIF
C       ELSEIF (NLWEIGHT) THEN
        ELSE
          WEIGHT=WEIGHT*CEL*VREL*DIIN(IPLS,K)/SIGVEL(IREL)
        ENDIF
C
        VXI=VXN
        VYI=VYN
        VZI=VZN
      ENDIF
C
C  STEP 1 FINISHED, COLLIDING BULK ION'S VELOCITY IS SET: VXI,VYI,VZI
C
200   CONTINUE
C
C  FIND TYPE OF COLLISION: IFLAG
C
C  NEUTRAL ATOMS:
C
      IF (ITYP.EQ.1) THEN
C  NEUTRAL-NEUTRAL, IN BGK APPROXIMATION
        IF (NCHRGP(IPLS).EQ.0) THEN
          IFLAG=0
C  NEUTRAL-ION, INTERACTION POTENTIAL GIVEN
        ELSEIF (MODCOL(5,0,IREL).NE.0) THEN
          KK=MODCOL(5,0,IREL)
          IFLAG=IFTFLG(KK,0)
          P(1:9)=REACDAT(KK)%POT%POLY%DBLPOL(1:9,1)
        ELSE
          GOTO 995
        ENDIF
C
C  NEUTRAL MOLECULES:
C
      ELSEIF (ITYP.EQ.2) THEN
C  NEUTRAL-NEUTRAL, BGK APPROXIMATION
        IF (NCHRGP(IPLS).EQ.0) THEN
          IFLAG=0
C  NEUTRAL-ION, INTERACTION POTENTIAL GIVEN
        ELSEIF (MODCOL(5,0,IREL).NE.0) THEN
          KK=MODCOL(5,0,IREL)
          IFLAG=IFTFLG(KK,0)
          P(1:9)=REACDAT(KK)%POT%POLY%DBLPOL(1:9,1)
        ELSE
          GOTO 995
        ENDIF
      ELSE
        GOTO 995
      ENDIF
C
C  NEXT: STEP 2, FIND PRE COLLISION DATA AND TOTAL CROSS SECTION
C
      IF (IFLAG.NE.0) THEN
        RMN=RMASS
        RMI=RMASSP(IPLS)
        RMSI=1./(RMN+RMI)
        RLMS=RMN*RMI*RMSI
C  RELATIV VELOCITY AND RELATED DATA
        VRELX=VX-VXI
        VRELY=VY-VYI
        VRELZ=VZ-VZI
        VRQYZ=         VRELY**2+VRELZ**2
        VRELQ=VRELX**2+VRQYZ
        ER=RLMS*VRELQ*CVELI2
c
        VREL=SQRT(VRELQ)
        VRYZ=SQRT(VRQYZ+EPS60)
C  IMPACT PARAMETER --> SCATTERING ANGLE --> NEW VELOCITY
        IF (.NOT.LHABER) THEN
C  CENTER OF MASS VELOCITY
          VSX=(RMI*VXI+RMN*VX)*RMSI
          VSY=(RMI*VYI+RMN*VY)*RMSI
          VSZ=(RMI*VZI+RMN*VZ)*RMSI
C  TOTAL CROSS SECTION (ONLY IF NOT COMPUTED EARLIER AT THIS CALL)
          IF (NFLAG.NE.3) THEN
            ELAB=LOG(VRELQ)+DEFEL(IREL)
            IREAC=MODCOL(5,1,IREL)
            IF (IREAC.EQ.0) GOTO 995
            CEL=CROSS(ELAB,IREAC,IREL,'VELOEL 3')
          ENDIF
C
C  STEP 2 FINISHED, CROSS SECTION CEL IS FOUND
C  NEXT: STEP 3
C
          BMAX=SQRT(CEL*PIAI)/0.52917E-8
          B= SQRT(RANF_EIRENE( ))*BMAX
C  DIRECT SAMPLING FROM DIFFERENTIAL CROSS SECTION
C       ELSEIF (LHABER) THEN
C  NOTHING TO BE DONE HERE
        END IF
      ENDIF
C
C  STEP 3 FINISHED, IMPACT PARAMETER IS FOUND , IN UNITS: BOHR RADIA
C  NEXT: STEP 4
C
      IF (IFLAG.EQ.0) THEN
C
C  THIS PART: ONLY RELAXATION TO MAXWELLIAN, I.E., POST COLLISION
C             NEUTRAL SAMPLED FROM BULK ION POPULATION (E.G.: BGK-COLLISION)
C
        VELQ=VXI*VXI+VYI*VYI+VZI*VZI
        VEL=SQRT(VELQ)
        VELX=VXI/VEL
        VELY=VYI/VEL
        VELZ=VZI/VEL
C
      ELSE
C
C  THIS PART: FIND DEFLECTION ANGLE
C             BINARY COLLISION KINETICS (IF NOT LHABER) OR
C             SAMPLING FROM DIFFERENTIAL CROSS SECTION (IF LHABER)
C
        IF (LHABER) THEN
          RAN=RANF_EIRENE()
          CALL SCATANG (ER,RAN,ELTHETA,CTTETHA,DUMSIGMA)
          PH=ELTHETA
        ELSE
C
C  COLLISION PARAMETERS IFLAG, ER AND B ARE DEFINED NOW.
C
C  FIND DISTANCE OF CLOSEST APPROACH: RSTERN
C
          RS=RSTERN(ER,B,IFLAG,P)
C
C  INTEGRAL TO FIND DEFLECTION ANGLE CHI
C
          CALL GAUMEH (RS,ER,B,IFLAG,P,10,1,RESULT)
          CHI=PIA-2.*B/RS*RESULT
C
C  CONVERT FROM DEFLECTION ANGLE TO OBSERVABLE SCATTERING ANGLE
          PH=ACOS(COS(CHI))
        END IF
C
C  POLAR ANGLE
        EPS=PI2A*RANF_EIRENE( )
C
C  CONVERT POST COLLISON VELOCITY BACK INTO LAB-FRAME
C
        CPH=COS(PH)
        SPH=SIN(PH)
        CEPS=COS(EPS)
        SEPS=SIN(EPS)
        VRSX=VRELX*CPH+SPH*SEPS*VRYZ
        VRSY=VRELY*CPH+SPH*(VREL*VRELZ*CEPS-VRELX*VRELY*SEPS)/VRYZ
        VRSZ=VRELZ*CPH-SPH*(VREL*VRELY*CEPS+VRELX*VRELZ*SEPS)/VRYZ
C
        VELX=VSX+RLMS/RMN*VRSX
        VELY=VSY+RLMS/RMN*VRSY
        VELZ=VSZ+RLMS/RMN*VRSZ
        VELQ=VELX*VELX+VELY*VELY+VELZ*VELZ
        VEL=SQRT(VELQ)
        VELX=VELX/VEL
        VELY=VELY/VEL
        VELZ=VELZ/VEL
C
      ENDIF
C
C  STEP 4 FINISHED, POST COLLISION VELOCITY IS SET
C  NEXT: RETURN
      RETURN
C
995   CONTINUE
      WRITE (iunout,*) 'ERROR IN VELOEL, NO ELASTIC COLLISION DATA'
      WRITE (iunout,*) 'AVAILABLE '
      WRITE (iunout,*) 'ITYP,IATM,IMOL,IION,IPLS ',
     .                  ITYP,IATM,IMOL,IION,IPLS
      CALL EXIT_OWN(1)

C     the following ENTRY is for reinitialization of EIRENE (DMH)
      
      ENTRY VELOEL_REINIT
      IFIRST = 0
      return
      END
