      SUBROUTINE EIRENE(DT,NLMODE,NLLAST,ITNR)
C
C  DT >  0.      : RUN EIRENE FOR A TIMESTEP DT (S),
C  DT <= 0.      : RUN EIRENE IN QUASI STEADY STATE MODE
C  NLMODE=.FALSE.: STAND ALONE EIRENE RUN
C  NLMODE=.TRUE. : CALLED FROM INTERFACING ROUTINE EIRSRT
C                  PLASMA DATA ON COMMON BRAEIR IN SUBROUTINE INFCOP.
C
      USE PRECISION
      USE PARMMOD
      USE COMUSR                                                   
      USE CREFMOD
      USE CREF
      USE CESTIM
      USE CRECH
      USE CADGEO
      USE cai
      USE CCONA
      USE CGRPTL
      USE CLOGAU
      USE CPL3D
      USE CPLOT
      USE CINIT
      USE CUPD
      USE COMSIG
      USE CPOLYG
      USE CGRID
      USE CSPEZ
      USE CZT1
      USE CTRCEI
      USE CCOUPL
      USE CGEOM
      USE CSDVI
      USE CSDVI_COP
      USE CSDVI_BGK
      USE CTETRA
      USE COMPRT
      USE CPES
      USE COMNNL
      USE COMSOU
      USE CSTEP
      USE COMSPL
      USE CTEXT
      USE CLGIN
      USE COUTAU
      USE COMXS
      USE CSPEI
      USE CTRIG
      USE CLAST

      IMPLICIT NONE

      INCLUDE 'mpif.h'

      REAL(DP), INTENT(IN) :: DT
      LOGICAL, INTENT(IN) :: NLMODE, NLLAST
      INTEGER, INTENT(IN) :: ITNR

      INTEGER :: NA, NS, IAIN, ICELL, IERROR, IER
      REAL(DP) :: RESET_SECOND, SECOND_OWN, DUMMY, TIMI
      integer :: inentry=1
C
C               1.         INITIALIZE PACKAGE
C
      CALL MPI_INIT(IER)
      CALL MPI_COMM_SIZE (MPI_COMM_WORLD,NPRS,IER)
      CALL MPI_COMM_RANK (MPI_COMM_WORLD,MY_PE,IER)
      NRPES = NPRS
      IF (NPRS == 1) NSTEFF=1

      IF (MY_PE == 0) THEN

      IF (ITNR == 1) THEN
        CALL FIND_PARAM
        CALL SET_PARMMOD(1)
      ELSE
        DUMMY=RESET_SECOND()
      END IF

      write (6,*) ' Number of PEs ',nprs
      if (nprs .gt. nrpes) then
        write (6,*) ' Number of PE too large '
        write (6,*) ' increase parameter NRPES = ',nrpes
        call exit_own(1)
      endif

      IF (ITNR == 1) CALL ALLOC_CLOGAU
      CALL ALLOC_COMPRT
      inentry = 0

        NRAPS=60
        IRAPS=0
        IITER=ITNR
        ITIMV=1
        IPRNLI=0
        DTIMVN=DT
        NLPLAS=NLMODE

      END IF  ! MY_PE == 0

C
100   CONTINUE
C
C  READ FORMATTED INPUT FILE OR RESTART FOR NEXT ITERATION
C
      ENTRY EIRENE_COUPLE (NLLAST,ITNR)

      IF (MY_PE == 0) THEN
C
      IF (INENTRY == 1) THEN
        CALL SET_PARMMOD(1)
        CALL ALLOC_CLOGAU
        CALL ALLOC_COMPRT
      END IF
      CALL ALLOC_CESTIM(1)
      CALL ALLOC_COMUSR(1)
      CALL ALLOC_CADGEO
      CALL ALLOC_CAI
!pb      CALL ALLOC_CGRPTL
      CALL ALLOC_CPLOT
      CALL ALLOC_CINIT
      CALL ALLOC_CUPD
      CALL ALLOC_CPOLYG
      CALL ALLOC_CGRID
      CALL ALLOC_CSPEZ
      CALL ALLOC_CZT1(1)
      CALL ALLOC_CTRCEI
      CALL ALLOC_CGEOM
      CALL ALLOC_CSDVI(1)
      CALL ALLOC_CTETRA
      CALL ALLOC_CPES
      CALL ALLOC_COMSOU(1)
      CALL ALLOC_COMSPL
      CALL ALLOC_CTEXT(1)
      CALL ALLOC_CLGIN
      CALL ALLOC_COMXS(1)
      CALL ALLOC_CTRIG
      CALL ALLOC_COMNNL

      IF (ITNR == 1) NLSRON = .TRUE.
C
C   SET DEFAULTS
C
        CALL SETCON

      END IF  ! MY_PE == 0
C     
101   CONTINUE

      IF (MY_PE == 0) THEN

      TIMI=SECOND_OWN()
C
      CALL INPUT

      CALL ALLOC_COUTAU
C
C  CHECK PARAMETER STATEMENTS, STORAGE REQUIREMENTS
C
      CALL SETPRM

      CALL ALLOC_CSTEP
      CALL ALLOC_CSPEI
!pb      CALL ALLOC_CESTIM(2)
      CALL ALLOC_CSDVI(2)
      CALL ALLOC_CSDVI_BGK
      CALL ALLOC_CSDVI_COP
      CALL ALLOC_CLAST

!      CALL SETTXT
      CALL STTXT1
C
      TIME=SECOND_OWN()
      WRITE (6,*) 'CPU-TIME CONSUMED IN INPUT: ',TIME-TIMI,' SEC'
      CALL LEER(1)
C
C  SET UP SPLITTING SURFACES, IMPORTANCE FUNCTION AND OTHER DATA
C  FOR NONANALOG METHODS
C
      IF (.NOT.NLANA) THEN
        CALL NANALG
      ELSEIF (NLANA) THEN
C  TURN OF ALL NON-ANALOG SAMPLING
        CALL MASBOX('NON-ANALOG SAMPLING DE-ACTIVATED')
C 1: NO SPLITTING AND RUSSIAN ROULETTE
        WRITE (6,*) 'SUBROUTINE NANALG NOT CALLED '
C 2: SPECIES SOURCE SAMPLING
        DO ISTRA=1,NSTRAI
          NSPEZ(ISTRA)=MAX(0,NSPEZ(ISTRA))
        ENDDO
        WRITE (6,*) 'NON-ANALOG SOURCE SPECIES SAMPLING TURNED OFF'
C 3: SUPPRESION OF ABSORPTION AT SURFACES TURNED OFF
        WMINS=1.D30
        WRITE (6,*) 'SUPPRESION OF ABSORPTION AT SURFACES TURNED OFF'
C 4: SUPPRESION OF ABSORPTION AT COLLISIONS TURNED OFF
        WMINV=1.D30
        WRITE (6,*) 'SUPPRESION OF ABSORPTION AT COLLISIONS TURNED OFF'
        CALL LEER(2)
      ENDIF
C
      TIMI=SECOND_OWN()
C
C
C  PARAMETERS FOR BGK ITERATIONS
C
      NBGVI=NRBGI
      NFSTVI(NTALB)=NBGVI
      NBGVI_STAT=0
      IF (NSIGI_BGK > 0) NBGVI_STAT=NBGVI+2*(NATMI+NMOLI)
      IF (NBGVI_STAT > NBGV_STAT) THEN
        CALL MASPRM('NBGVI_STAT',10,NBGVI_STAT,
     .              'NBGV_STAT',9,NBGV_STAT,IERROR)
        CALL EXIT_OWN(1)
      END IF
C
      IF (TRCAMD) THEN
        CALL LEER(1)
        WRITE (6,*) 'NRCXI,NRCX ',NRCXI,NRCX
        WRITE (6,*) 'NRELI,NREL ',NRELI,NREL
        WRITE (6,*) 'NRPII,NRPI ',NRPII,NRPI
        WRITE (6,*) 'NREII,NREI ',NREII,NRDS
        WRITE (6,*) 'NRRCI,NREC ',NRRCI,NREC
        CALL LEER(1)
      ENDIF
C
C
C  READ EIRENE STATISTICAL RECOMMENDATIONS FROM PREVIOUS RUN,
C  AND CARRY THEM OUT
C
      IF (NFILEK.EQ.2.OR.NFILEK.EQ.3) THEN
        CALL RREC
        WRITE (6,*) 'STRATIFIED SOURCE SAMPLING:'
        WRITE (6,*) 'NPTS(ISTRA) ARE MODIFIED, DUE TO NFILEK.GE.2 '
        DO 162 ISTRA=1,NSTRAI
          WRITE (6,*) ISTRA,' NPTS(INP)= ',NPTS(ISTRA),
     .                      ' NPTS(MOD)= ',NRECOM(ISTRA)
          NPTS(ISTRA)=NRECOM(ISTRA)
162     CONTINUE
      ENDIF
C
C  IF NLERG:
C  PERFORM A RUN, ONE-SPEED, COLLISION-LESS, UNTIL TIME-LIMIT
C  FOR CELL VOLUME ESTIMATION FROM ERGODIC PRINZIPLE
C
      IF (NLERG) CALL ERGOD
C
C  IF NLMOVIE:
C  PERFORM A RUN, MANY TIMESTEPS, CONSTANT NUMBER OF PARTICLES IN
C  PICTURE, COLD START FROM PREVIOUS CENSUS.
C  FOR MOVIE OF PARTICLE TRAJECTORIES
C  INVERT ORDER OF STRATA IN ORDER TO HAVE CENSUS STRATUM FIRST.
C
      IF (NLMOVIE) CALL MOVIE
C
C  PUT SELECTED EIRENE ATOMIC DATA FIELDS ONTO ADIN-ARRAY FOR OUTPUT
C
      DO 170 IAIN=1,NAINI
        NS=NAINS(IAIN)
        NA=NAINT(IAIN)
C
        IF (NSTORDR < NRAD) GOTO 170
        IF (NA.EQ.20) THEN
          DO 1720 ICELL=1,NSBOX
            ADIN(IAIN,ICELL)=TABDS1(NS,ICELL)
1720      CONTINUE
        ELSEIF (NA.EQ.21) THEN
          DO 1721 ICELL=1,NSBOX
            ADIN(IAIN,ICELL)=EELDS1(NS,ICELL)
1721      CONTINUE
        ELSEIF (NA.EQ.22) THEN
          DO 1722 ICELL=1,NSBOX
            ADIN(IAIN,ICELL)=TABCX3(NS,ICELL,1)
1722      CONTINUE
        ELSEIF (NA.EQ.23) THEN
          DO 1723 ICELL=1,NSBOX
            ADIN(IAIN,ICELL)=EPLCX3(NS,ICELL,1)
1723      CONTINUE
        ELSEIF (NA.EQ.24) THEN
          DO 1724 ICELL=1,NSBOX
            ADIN(IAIN,ICELL)=TABEL3(NS,ICELL,1)
1724      CONTINUE
        ELSEIF (NA.EQ.25) THEN
          DO 1725 ICELL=1,NSBOX
            ADIN(IAIN,ICELL)=EPLEL3(NS,ICELL,1)
1725      CONTINUE
        ELSEIF (NA.EQ.26) THEN
          DO 1726 ICELL=1,NSBOX
            ADIN(IAIN,ICELL)=TABPI3(NS,ICELL,1)
1726      CONTINUE
        ELSEIF (NA.EQ.27) THEN
          DO 1727 ICELL=1,NSBOX
            ADIN(IAIN,ICELL)=EPLPI3(NS,ICELL,1)
1727      CONTINUE
        ELSEIF (NA.EQ.28) THEN
          DO 1728 ICELL=1,NSBOX
            ADIN(IAIN,ICELL)=TABRC1(NS,ICELL)
1728      CONTINUE
        ELSEIF (NA.EQ.29) THEN
          DO 1729 ICELL=1,NSBOX
            ADIN(IAIN,ICELL)=EELRC1(NS,ICELL)
1729      CONTINUE
        ENDIF
170   CONTINUE
C
C  PRINT VOLUME AVERAGED INPUT TALLIES.
C
      CALL OUTPLA
C
      TIME=SECOND_OWN()
      WRITE (6,*) 'CPU-TIME CONSUMED IN XSECT: ',TIME-TIMI,' SEC'
      CALL LEER(1)
C
C               2.         PLOT GEOMETRY
C
200   CONTINUE
      CALL PLT2D
C
C               3.         MONTE CARLO CALCULATION
C
300   CONTINUE

      END IF   ! MY_PE == 0

      if (nprs > 1) CALL BROADCAST

      CALL MCARLO
C
C               4.         OUTPUT , INTERFACE  AND PLOTTING
C
400   CONTINUE
C
C  OUTPUT FOR SELECTED STRATA AND/OR SUM OVER STRATA
C
      DO 450 ISTRA=1,NSTRAI
        if( ((mod(istra-1,nprs) .eq. my_pe).and.(nprs.le.nsteff)) .or.
     .     (nprs.gt.nsteff).and.(my_pe.eq.npesta(istra))) then
          IF (TRCSRC(ISTRA).OR.(NSTRAI.EQ.1.AND.TRCSRC(0)))
     .        CALL OUTEIR(ISTRA)
          IF (PLTSRC(ISTRA).OR.(NSTRAI.EQ.1.AND.PLTSRC(0)))
     .        CALL PLTEIR(ISTRA)
        END IF
450   CONTINUE
C
      IF (MY_PE == 0) THEN

      IF ((NSTRAI.GT.1) .AND. (NSMSTRA==1))  THEN
        IF (TRCSRC(0)) CALL OUTEIR(0)
        IF (PLTSRC(0)) CALL PLTEIR(0)
      ENDIF
C
C  WRITE FILES FOR RAPS GRAPHICS
C
      IF (IRAPS.GT.0) THEN
        CALL RPSOUT
        NRAPS=60
        IRAPS=0
      ENDIF
C
C  LAST CALL TO INTERFACING ROUTINE (GLOBAL BALANCES, ETC)
C
      IF (NMODE.GT.0) CALL IF4COP
C
C  CALL DIAGNOSTIC MODULE (COMPUTE LINE INTEGRALS FROM EIRENE TALLIES)
C
      IF (NCHORI.GT.0) CALL DIAGNO
C
      IF (NFILEN.EQ.2.OR.NFILEN.EQ.7) RETURN
C
C  CALL WRREC TO EVALUATE EIRENE STATISTICAL RECOMMENDATIONS
C  FOR NEXT RUN  AND WRITE THEM ON FT 14
C
      IF (NFILEK.EQ.1.OR.NFILEK.EQ.3) THEN
c   achtung !!!!!!!!!!!!!
c   fuer parallele version noch nicht richtig
c   noch mal ganz scharf nachdenken !!!!!!!!
        CALL WRREC
      ENDIF
C
C  ITERATIVE MONTE CARLO PROBLEM: EIRENE RECALL OPTION
C
C  SUBROUTINE MODUSR IS A USER SUPPLIED SUBROUTINE, WHICH MAY BE USED
C  TO MODIFY SOME OF THE INPUT VARIABLES FOR THE NEXT ITERATION STEP.
C  MODUSR IS ALSO CALLED AFTER THE LAST ITERATION TO ALLOW
C  WRITING OF DATA ONTO SOME FILE AFTER EACH ITERATION
C
      IF (NITER.GE.1.AND.IITER.LE.NITER) THEN
        CALL MODUSR
        IITER=IITER+1
        IF (IITER.LE.NITER) THEN
          DUMMY=RESET_SECOND()
          IPRNLI=0
          GOTO 101
        ENDIF
      ENDIF
C
C  SUBROUTINE STOSS IS A SUBROUTINE, IN WHICH BINARY COLLISION
C  EVENTS BETWEEN TEST PARTICLES ARE CARRIED OUT
C  STOSS IS ALSO CALLED AFTER THE LAST "TIMESTEP"
C
      IF (NTIME.GE.1) THEN
C  COLLISIONS BETWEEN TEST PARTICLES
C  MODIFY BACKGROUND (TIME DEP. MODE)
C       CALL STOSS
        CALL TMSTEP
        ITIMV=ITIMV+1
        IF (ITIMV.LE.NTIME) THEN
C  DO ONE MORE COMPLETE TIME-CYCLE IN THIS EIRENE RUN
          DUMMY=RESET_SECOND()
          IITER=1
          IPRNLI=0
          GOTO 101
        ENDIF
      ENDIF
c slmod begin
c...  Good place?
      CALL OUTUSR
c slmod end
      END IF   ! MY_PE == 0
      IF (NLLAST) THEN
         CALL DEALLOC_COMUSR
         CALL DEALLOC_CREFMOD
         CALL DEALLOC_CREF
         CALL DEALLOC_CESTIM
         CALL DEALLOC_CADGEO
         CALL DEALLOC_CAI
         CALL DEALLOC_CGRPTL
         CALL DEALLOC_CPLOT
         CALL DEALLOC_CINIT
         CALL DEALLOC_CUPD
         IF (NCHORI > 0) CALL DEALLOC_COMSIG
         CALL DEALLOC_CPOLYG
         CALL DEALLOC_CGRID
         CALL DEALLOC_CSPEZ
         CALL DEALLOC_CZT1
         CALL DEALLOC_CTRCEI
         IF (NMODE .NE. 0) CALL DEALLOC_CCOUPL
         CALL DEALLOC_CGEOM
         CALL DEALLOC_CSDVI
         CALL DEALLOC_CSDVI_BGK
         CALL DEALLOC_CSDVI_COP
         CALL DEALLOC_CTETRA
         CALL DEALLOC_COMPRT
         CALL DEALLOC_CPES
         CALL DEALLOC_COMNNL
         CALL DEALLOC_COMSOU
         CALL DEALLOC_CSTEP
         CALL DEALLOC_COMSPL
         CALL DEALLOC_CTEXT
         CALL DEALLOC_CLGIN
         CALL DEALLOC_COUTAU
         CALL DEALLOC_COMXS
         CALL DEALLOC_CSPEI
         CALL DEALLOC_CLAST
         CALL LOCAT2            ! DEALLOCATE LOCAL ARRAYS IN LOCATE
         CALL SAMSF2            ! DEALLOCATE LOCAL ARRAYS IN SAMSRF
         CALL STATS3            ! DEALLOCATE LOCAL ARRAYS IN STATIS
C
         CALL MPI_FINALIZE(IER)
      END IF

      RETURN
      END
