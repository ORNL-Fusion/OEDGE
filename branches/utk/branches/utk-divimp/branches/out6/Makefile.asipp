#
# Definintions
#
#
# Remove implicit .f and .f90 and .mod creation rules
#
#%.o : %.f
#%.o : %.f90
%.o : %.mod
#
#
# Source filename extensions
#
OUTEXT=.f
OUTF90EXT=.f90
#COMEXT=.u6a
#COMF90EXT=.u6b
CEXT=.c
#
# VERSION to build
#
VER_AIX=aix
VER_ABSOFT=abs
VER_PGI=pgi
VER_INTEL=ifort
#
VER=$(VER_INTEL)
#
# Source file locations
#
#OUTMAIN=/scratch/$(USER)/divimp
OUTMAIN=$(HOME)/divimp
COMMONS=$(OUTMAIN)/commons
#
LOCAL_FILES =$(OUTMAIN)/out6/local
OUTSRC =$(OUTMAIN)/out6/src
OUTF90SRC=$(OUTSRC)/f90
COMSRC =$(OUTMAIN)/comsrc
COMF90SRC=$(COMSRC)/f90
#
#
#VPATH=$(OUTSRC):$(COMSRC):$(OUTF90SRC):$(COMF90SRC)
VPATH=$(LOCAL_FILES):$(OUTSRC):$(COMSRC):$(OUTF90SRC):$(COMF90SRC)
#
# Suffixes
#
.SUFFIXES: .o $(OUTEXT) $(OUTF90EXT)

#
# Compiler
#
FCOMP=ifort
RM=rm -f
#
#
# Compiler
#
RM=rm -f
#
FCOMP_ABSOFT=f95
FCOMP_INTEL =ifort
FCOMP_PGI=pgf95
#
FCOMP=$(FCOMP_INTEL)
#
# Optimization and debugging flags
#
# ARCH=-qarch=com
# OPTC= -O
# OPTG= -g -bloadmap:load1 -qextchk -qsource
# OPTO= -O -bloadmap:load1 -qmaxmem=16384 -qsource
#
# OPTS= -NQ60000 -NT70000 -ND10000 -NA16384
#
# LINUX - PGI
#
ARCH=
# add -m32 C flag to produce 32 bit C-code - needs to be adjusted depending on 
# the version of the fortran compiler used
OPTC= -O $(EMU)
#
# LINUX - PGI
#
OPT_PGI= -g -Mlist -Mbyteswapio -Mdclchk -Mdepchk -Mfptrap -Minfo -Mbounds -Msave -traceback -Mchkstk -Mchkfpstk
OPT_PGI_OPT= -O -Mbyteswapio -Mlist -traceback -Mchkstk -Mchkfpstk
#
OPT_PGI_BIG= -g -Mlist -Mbyteswapio -Mdclchk -Mdepchk -Mfptrap -Minfo -Mbounds -Msave -traceback -Mchkstk -Mchkfpstk -mcmodel=medium
OPT_PGI_OPT_BIG= -O -Mbyteswapio -Mlist -traceback -Mchkstk -Mchkfpstk -mcmodel=medium
#
# LINUX - ABSOFT
#
OPT_ABSOFT = -g 
OPT_ABSOFT_OPT = -O
#
# LINUX - INTEL
#
OPT_INTEL = -g -traceback
OPT_INTEL_OPT = -O1 -g -traceback
OPT_INTEL_DEBUG = -g -check all -debug all -traceback
#
#
OPT_INTEL_BIG = -g -check all -debug all --mcmodel medium --intel-shared -traceback
OPT_INTEL_OPT_BIG = -O1 -g -traceback --mcmodel medium --intel-shared
#
OPT =$(OPT_INTEL)
OPTO=$(OPT_INTEL_OPT)
OPT_DEBUG=$(OPT_INTEL_DEBUG)
#
# Fortran compiler options
#
FFLAGS= $(OPT)

#
# Common block directory
#
IDIR=$(COMMONS)
#
# C-compiler1
#
CC= gcc
#
# C-flags
#
OPTC= -fbounds-check -O3

CFLAGS= $(OPTC)

#
# Libraries
#
# LINUX
#
LIBS= -L/usr/local/lib -lc -lm -L../libsrc/ifort64 -ljpeg -lghost -lpostcl
#LIBS= -L/usr/local/lib -lc -lm -lg2c -L../libs -lghost -lpostsc 
#LIBS= -L/usr/local/lib -lc -L../libs -lghost -lpostsc
#
#
# Name of target to build
#
#TARG=out6
TARG=out6O$(VER)
TARGALT=out6aO$(VER)

#
# Objects to compile
#

# Problem with write_jpeg_file could be because the library was built elsewhere... -SL 

include OBJECT_LIST

#
# Rules
#

$(OUTEXT).o:
	$(FCOMP) $(FFLAGS) $(ARCH) -I$(IDIR) $(OPTS) -c $?

$(OUTF90EXT).o:
	$(FCOMP) $(FFLAGS) $(ARCH) -I$(IDIR) $(OPTS) -c $?

#
# Target
#

$(TARG): $(OBJECTS)
	$(FCOMP) $(OBJECTS) $(ARCH) $(OPT) $(LIBS) -o $(TARG)

#
# Various MAKE targets for different platforms and optimization
# levels - need to do an rm *.o to make sure that the whole
# thing is recompiled - it could be set up to do this automatically
# except for the one environment used for development.  
#

opt:
	$(MAKE)  "OPT=$(OPTO)"

debug:
	$(MAKE)  "OPT=$(OPT_INTEL_DEBUG)"

debug-alt:
	$(MAKE)  "OPT=$(OPT_INTEL_DEBUG)" "TARG=out6dbg$(VER)"

ifort:
	$(MAKE) "FCOMP=$(FCOMP_IFORT)" "OPT=$(OPT_IFORT)" "VER=$(VER_IFORT)" 

ifortopt:
	$(MAKE) "FCOMP=$(FCOMP_IFORT)" "OPT=$(OPT_IFORT_OPT)" "VER=$(VER_IFORT)" 

alt:
	$(MAKE)  "TARG=$(TARGALT)" "OPT=$(OPTG)"

altopt:
	$(MAKE)  "TARG=$(TARGALT)" "OPT=$(OPTO)"

clean:
	$(RM) *.o
	$(RM) *.lst
	$(RM) *.mod







