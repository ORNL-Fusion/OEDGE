# This Makefile is optimized for compilation on the dipsy computer at 
# UTK. Paths for libraries like netcdf point towards Shawn's directory
# where he already compiled them and such. SAZ 4/1/2021.

# Remove implicit .f creation rule
%.o : %.f
%.o : %.f90

# Source filename extensions

LIMEXT=.f
F90EXT=.f90

CEXT=.c

# VERSION to build
VER=gcc
VER_ABSOFT=abs
VER_PGI=pgi
VER_INTEL=pgi

# Source file locations
DIVMAIN=/home/zamp/utk
LIMMAIN=$(DIVMAIN)/lim3
COMMONS=$(LIMMAIN)/commons

LIMSRC =$(LIMMAIN)/lim/src
LIMF90SRC=$(LIMSRC)/f90
COMSRC =$(LIMMAIN)/comsrc
LIMF90COMSRC=$(COMSRC)/f90

DIVCOMSRC=$(DIVMAIN)/comsrc
DIVF90COMSRC=$(DIVMAIN)/comsrc/f90

# Point towards Shawn's compiled libraries.
DIVLOCALINC=/home/zamp/utk/local/include

VPATH=$(LIMSRC):$(LIMF90SRC):$(LIMF90COMSRC):$(COMSRC):$(DIVCOMSRC):$(DIVF90COMSRC)

EMU=

# Suffixes
.SUFFIXES: .o $(LIMEXT) $(F90EXT)

# Compiler
FCOMP=gfortran
RM=rm -f

FCOMP_ABSOFT=f95
FCOMP_INTEL =ifort
FCOMP_pgi=pgf95

# Optimization and debugging flags
# LINUX - GCC (gfortran)
#  -ffree-line-length-none: Removes limit on line lengths.
#  -std=legacy: Suppresses a ton of warnings from old netCDF code that 
#     are really just from using old syntax conventions.
#  -O3: Turn on a lot of optimization flags.
#  -fbacktrace:
#  -g:
#  -static-libgfortran:

OPT= -ffree-line-length-none -std=legacy -O3 -fbacktrace -g -static-libgfortran 

# LINUX - ABSOFT
#
OPT_ABSOFT = -g 
OPT_ABSOFT_OPT = -O

# LINUX - INTEL
# Must use -O1 optimization since there seems to be an Intel compiler
# bug with loop vectorization at -O2 and above that causes a seg fault. 
# - adding a write statement to an example affected loop stopped the seg fault.
OPT_INTEL = -g -check all -debug all -traceback
OPT_INTEL_OPT = -O1 -traceback

# Fortran compiler options
FFLAGS= $(OPT) 

# Common block directory
IDIR=-I$(COMMONS) -I$(DIVLOCALINC)

# C-compiler
CC= cc

# C-flags
CFLAGS= $(OPTC)

# Libraries
LIB_VER=
# Point towards Shawn's compiled libraries.
LOCAL_LIB=/home/zamp/utk/local/lib
LOCAL_DIV_LIB=/home/zamp/utk/local/lib
LIBS= -Wl,-rpath=$(LOCAL_DIV_LIB) -L$(LOCAL_DIV_LIB) -lnetcdff -lnetcdf -lghost$(LIB_VER) -lpostcl$(LIB_VER)

# Name of target to build
TARG=lim3O$(VER)
TARGALT=lim3aO$(VER)
TARGDBG=lim3Odbg$(VER)

# Objects to compile
include OBJECT_LIST

# Rules
#$(LIMEXT).o:
#	cp $(LIMSRC)$*$(LIMEXT) $*.f
#	$(FCOMP) $(FFLAGS) $(ARCH) -I$(IDIR) $(OPTS) -c $*.f
#	rm $*.f

$(LIMEXT).o:
	$(FCOMP) $(FFLAGS) $(ARCH) $(IDIR) $(OPTS) -c $?

$(F90EXT).o:
	$(FCOMP) $(FFLAGS) $(ARCH) $(IDIR) $(OPTS) -c $?

# Basic creation rules - apparently the file extensions can't be aliased as a variable
%.o: %.f
	$(FCOMP) $(FFLAGS) $(ARCH) $(IDIR) $(OPTS) -c $?

%.o: %.f90
	$(FCOMP) $(FFLAGS) $(ARCH) $(IDIR) $(OPTS) -c $?


#$(LIMCOMEXT).o:
#	rm -f $*.f
#	cp $? $*.f
#	$(FCOMP) $(FFLAGS) $(ARCH) -I$(IDIR) $(OPTS) -c $*.f
#	$(RM) $*.f

#$(COMEXT).o:
#	rm -f $*.f
#	cp $? $*.f
#	$(FCOMP) $(FFLAGS) $(ARCH) -I$(IDIR) $(OPTS) -c $*.f
#	$(RM) $*.f

# Target
$(TARG): $(OBJECTS)
	$(FCOMP) $(OBJECTS) $(ARCH) $(OPT) $(LIBS) -o $(TARG)

# Various MAKE targets for different platforms and optimization
# levels - need to do an rm *.o to make sure that the whole
# thing is recompiled - it could be set up to do this automatically
# except for the one environment used for development.  

opt:
	$(MAKE)  "OPT=$(OPTO)"

opta:
	$(MAKE)  "OPT=$(OPTOA)"

dbg:
	$(MAKE)  "OPT=$(OPTG2)"

2dopt:
	$(MAKE)  "OPT=$(OPTO)" "IDIR=$(COMMONS)"

32bit:
	$(MAKE)  "OPT=$(OPTO)" "EMU=-m32" "ARCH=-tp k8-32" "LOCAL_LIB=/usr/local/lib32"

32bitdbg:
	$(MAKE)  "OPT=$(OPTG)" "EMU=-m32" "ARCH=-tp k8-32" "LOCAL_LIB=/usr/local/lib32"

debug:
	$(MAKE)  "OPT=$(OPTG)" "TARG=$(TARGDBG)"

3dopt:
	cp $(LIMMAIN)/limcom/SLCOM $LIMMAIN/limcom/sl_limcom3d/SLCOM
	$(MAKE)  "OPT=$(OPTO)" "IDIR=$(COMMONS)/sl_limcom3d"

3dsopt:
	cp $(LIMMAIN)/limcom/SLCOM $LIMMAIN/limcom/sl_limcom3ds/SLCOM
	$(MAKE)  "OPT=$(OPTO)" "IDIR=$(COMMONS)/sl_limcom3ds"

2d:
	$(MAKE)  "OPT=$(OPTG)" "IDIR=$(COMMONS)"

3d:
	cp $(LIMMAIN)/limcom/SLCOM $LIMMAIN/limcom/sl_limcom3d/SLCOM
	$(MAKE)  "OPT=$(OPTG)" "IDIR=$(COMMONS)/sl_limcom3d"

3ds:
	cp $(LIMMAIN)/limcom/SLCOM $LIMMAIN/limcom/sl_limcom3ds/SLCOM
	$(MAKE)  "OPT=$(OPTG)" "IDIR=$(COMMONS)/sl_limcom3ds"

abs:
	$(MAKE) "FCOMP=$(FCOMP_ABSOFT)" "OPT=$(OPT_ABSOFT)" "VER=$(VER_ABSOFT)" 

absopt:
	$(MAKE) "FCOMP=$(FCOMP_ABSOFT)" "OPT=$(OPT_ABSOFT_OPT)" "VER=$(VER_ABSOFT)" 

intel:
	$(MAKE) "FCOMP=$(FCOMP_INTEL)" "OPT=$(OPT_INTEL)" "VER=$(VER_INTEL)" 

intelopt:
	$(MAKE) "FCOMP=$(FCOMP_INTEL)" "OPT=$(OPT_INTEL_OPT)" "VER=$(VER_INTEL)" 

intellib:
	$(MAKE) "FCOMP=$(FCOMP_INTEL)" "OPT=$(OPT_INTEL)" "VER=$(VER_INTEL)" "LIB_VER=ifort"

inteloptlib:
	$(MAKE) "FCOMP=$(FCOMP_INTEL)" "OPT=$(OPT_INTEL_OPT)" "VER=$(VER_INTEL)" "LIB_VER=ifort"

intel-iter:
	$(MAKE) "FCOMP=$(FCOMP_INTEL)" "OPT=$(OPT_INTEL)" "VER=$(VER_INTEL)"  "DIVMAIN=/work/projects/divimp/divimp" "LOCAL_LIB=/work/projects/divimp/lib"

intelopt-iter:
	$(MAKE) "FCOMP=$(FCOMP_INTEL)" "OPT=$(OPT_INTEL_OPT)" "VER=$(VER_INTEL)" "DIVMAIN=/work/projects/divimp/divimp" "LOCAL_LIB=/work/projects/divimp/lib" 

alt:
	$(MAKE)  "TARG=$(TARGALT)" "OPT=$(OPTG)"

altopt:
	$(MAKE)  "TARG=$(TARGALT)" "OPT=$(OPTO)"

clean:
	$(RM) *.o
	$(RM) *.lst
	$(RM) *.mod
	$(RM) *.oo







