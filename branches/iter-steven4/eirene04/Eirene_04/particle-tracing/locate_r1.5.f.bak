C
C
      SUBROUTINE FOLION
C
C     CHARGED PARTICLE, LAUNCHED AT X0,Y0,Z0 IN CELL NRCELL, IPOLG, 
C     IPERID, NPCELL, NTCELL, NACELL, NBLOCK, IS FOLLOWED
C
C  ON INPUT:
C     ITYP=3
C  ON OUTPUT: 
C
C           ITYP=0  NEXT GENERATION PHOTON IPHOT IS GENERATED
C           ITYP=1  NEXT GENERATION ATOM IATM IS GENERATED
C           ITYP=2  NEXT GENERATION MOLECULE IMOL IS GENERATED
C           ITYP=4  NO NEXT GENERATION PARTICLE IS GENERATED
C                   (PARTICLE ABSORBED IN BULK ION SPECIES)
C
C  DIFFERENCES FROM SUBR. FOLNEUT:
C    1) MOTION ALONG B (VELPAR,....)
C    2) ADDITIONALLY: "FOKKER PLANCK COLLISIONS", ISRFCL=4
C
      USE PRECISION
      USE PARMMOD
      USE COMUSR
      USE CESTIM
      USE CADGEO
      USE CCONA
      USE CFPLK
      USE CLOGAU
      USE CRAND
      USE CINIT
      USE CUPD
      USE CPOLYG
      USE CGRID
      USE CSPEZ
      USE CZT1
      USE CGEOM
      USE CTETRA
      USE COMPRT
      USE COMNNL
      USE CLGIN
      USE COUTAU
      USE COMXS
      USE CTRIG
      IMPLICIT NONE

      REAL(DP) :: CFLAG(7,3), DUMT(3), DUMV(3)
      REAL(DP) :: AX(2)
      REAL(DP) :: XSTOR2(MSTOR1,MSTOR2,N2ND+N3RD),
     .          XSTORV2(NSTORV,N2ND+N3RD),
     .          BVEC(3), BVEC_1(3), VVEC(3)
      REAL(DP) :: BBX, BBY, BBZ, GYRO, XLI, YLI, ZLI, FNUI, DIST,
     .          PR, WS, COLTYP, X0ERR, Y0ERR, Z0ERR, VELPER, E0PAR,
     .          VELXS, VELYS, VELZS, VELS, PUX, PUY, SG, BX, BY, BZ,
     .          VCOS, SIG, ZLOG, ZINT1, ZEP1, ZTST, ZINT2,
     .          ZMFP, PN, SH, FPATHI, ZTC, FNUEQI, XNI, DELFAC,
     .          SCOS_NEW
      REAL(DP), EXTERNAL :: RANF_EIRENE
      INTEGER :: ISTS, LEARC2, NCOUS, ICOU, J, JJ, IPL, NRCELL_OLD,
     .           ICO, NLI, NLE, NPCELL_OLD, JCOL, NRC, NTCELL_OLD,
     .           NRCOLD, IPLTI
      LOGICAL :: LCNDEXP
C
C  NO CONDITIONAL EXPECTATION ESTIMATORS FOR TEST IONS
C
C  ENERGY LOSS FREQUENCY (LANGER APPROXIMATION) (1/SEC)
      FNUEQI(XNI,TI)=8.8E-8*XNI*TI**(-1.5)
C
C  ALL CELL INDICES MUST BE KNOWN AT THIS POINT
C  TENTATIVELY ASSUME: A NEXT GENERATION PARTICLE WILL BE BORN
C
C  IC_NEUT, IC_ION: COUNTER FOR GENERATIONS WITHIN STATIC LOOP
      IC_ION=IC_NEUT
100   LGPART=.TRUE.
      IC_ION=IC_ION+1
      XGENER=0
      ico=0
      IF (ITYP.EQ.3.AND.(IION.LE.0.OR.IION.GT.NIONI)) GOTO 998
C
C  THE  CELL NUMBER NRCELL, IPOLG, IPERID, NPCELL, NTCELL, NACELL, NBLOCK
C  WAS ALREADY SET IN CALLING SUBROUTINE MCARLO
C
C  IF NLSRFX, SURFACE INDEX MRSURF MUST BE DEFINED AT THIS POINT
C  IF NLSRFY, SURFACE INDEX MPSURF MUST BE DEFINED AT THIS POINT
C  IF NLSRFZ, SURFACE INDEX MTSURF MUST BE DEFINED AT THIS POINT
C  IF NLSRFA, SURFACE INDEX MASURF MUST BE DEFINED AT THIS POINT
C
C  FIND DIRECTION PARALLEL TO B-FIELD
1005  NUPC(1)=NPCELL-1+(NTCELL-1)*NP2T3
      NCELL=NRCELL+NUPC(1)*NR1P2+NBLCKA
      IF (NCELL.GT.NSBOX.OR.NCELL.LT.1) GOTO 991
      IF (INDPRO(5) == 8) THEN
        CALL VECUSR(1,BX,BY,BZ,1)
      ELSE
        BX=BXIN(NCELL)
        BY=BYIN(NCELL)
        BZ=BZIN(NCELL)
      END IF
1003  CONTINUE
      VCOS=VELX*BX+VELY*BY+VELZ*BZ
      SIG=SIGN(1._DP,VCOS)
      VELXS=VELX
      VELYS=VELY
      VELZS=VELZ
      VELS=VEL
C  SET ION ENERGY = PARALLEL ENERGY OF THE IONIZED TEST PARTICLE
C  USE B-FIELD LINE AS TRAJECTORY
      VLXPAR=SIG*BX
      VLYPAR=SIG*BY
      VLZPAR=SIG*BZ
      VELPAR=ABS(VEL*VCOS)*(1.D0-EPS12)
      VELPER=SQRT(VEL**2 - VELPAR**2)
C  VELOCITY WITH RESPECT TO B-FIELD IS NOW DEFINED: 
C  VELPAR: PARALLEL VELOCITY, ABSOLUTE VALUE
C  SIG   : SIGN OF PARALLEL VELOCITY WITH RESPECT TO B
C  VELPER: PERPENDICULAR VELOCITY, ALWAYS POSITIVE
C  VL_PAR: PARALLEL UNIT SPEED VECTOR, VL_PAR=SIG*B
C
      E0PAR=CVRSSI(IION)*VELPAR*VELPAR
C
1004  CONTINUE
C
C  FOLLOW MOTION OF TEST ION OR "STATIC APPROXIMATION"?
      IF (NFOLI(IION).EQ.-1.AND.IFPATH.EQ.1) GOTO 1001
C
C  was the correct ncell used, in case of nlsrf?
C
      IF (NLSRFX) THEN
C  RADIAL CELL NO. MAY BE WRONG
C  CHECK ORIENTATION OF PARALLEL MOTION RELATIV TO RADIDAL COORDINATE
C
        NRCELL_OLD=NRCELL
        IF (LEVGEO.EQ.1) THEN
          SG=SIGN(1._DP,VLXPAR)
          IF (SG.LT.0) THEN
            NRCELL=MRSURF-1
          ELSEIF (SG.GT.0) THEN
            NRCELL=MRSURF
          ENDIF
        ELSEIF (LEVGEO.EQ.2) THEN
          PUX= X0-EP1(MRSURF)
          PUY= Y0/ELL(MRSURF)/ELL(MRSURF)
          PN=SQRT(PUX*PUX+PUY*PUY+EPS60)
          PUX=PUX/PN
          PUY=PUY/PN
          SG=VLXPAR*PUX+VLYPAR*PUY
          IF (ABS(SG) .LT. EPS12) THEN
            NLSRFX=.FALSE.
            SH=SIGN(1._DP,SG)*CELDIA(NCELL)*1.D-2
            X0 = X0 + SH*PUX
            Y0 = Y0 + SH*PUY
          END IF
          IF (SG.LT.0) THEN
            NRCELL=NGHPLS(1,MRSURF,NPCELL)
          ELSEIF (SG.GT.0) THEN
            NRCELL=NGHPLS(3,MRSURF,NPCELL)
          ENDIF
        ELSEIF (LEVGEO.EQ.3) THEN
          SG=VLXPAR*PLNX(MRSURF,NPCELL)+VLYPAR*PLNY(MRSURF,NPCELL)
          IF (ABS(SG) .LT. EPS12) THEN
            NLSRFX=.FALSE.
            SH=SIGN(1._DP,SG)*CELDIA(NCELL)*1.D-2
            X0 = X0 + SH*PLNX(MRSURF,NPCELL)
            Y0 = Y0 + SH*PLNY(MRSURF,NPCELL)
          END IF
          IF (SG.LT.0) THEN
            NRCELL=NGHPLS(1,MRSURF,NPCELL)
          ELSEIF (SG.GT.0) THEN
            NRCELL=NGHPLS(3,MRSURF,NPCELL)
          ENDIF
        ELSEIF (LEVGEO.EQ.4) THEN
          SG=VLXPAR*PTRIX(IPOLG,MRSURF)+
     .       VLYPAR*PTRIY(IPOLG,MRSURF)
          IF (ABS(SG) .LT. EPS12) THEN
C  TO BE WRITTEN
            WRITE (6,*) 'PARALLEL TO SURFACE IN FOLION ',NPANU
            CALL EXIT_OWN(1)
          ELSEIF (SG.GT.0) THEN
            NRCELL=NCHBAR(IPOLG,MRSURF)
            IPOLG=NSEITE(IPOLG,MRSURF)
            MRSURF=NRCELL
          ELSEIF (SG.LT.0) THEN
C  NOTHING TO BE DONE
          ENDIF
        ELSEIF (LEVGEO.EQ.5) THEN
          SG=VLXPAR*PTETX(IPOLG,MRSURF)+
     .       VLYPAR*PTETY(IPOLG,MRSURF)+
     .       VLZPAR*PTETZ(IPOLG,MRSURF)
          IF (ABS(SG) .LT. EPS12) THEN
C  TO BE WRITTEN
            WRITE (6,*) 'PARALLEL TO SURFACE IN FOLION ',NPANU
            CALL EXIT_OWN(1)
          ELSEIF (SG.GT.0) THEN
            NRCELL=NTBAR(IPOLG,MRSURF)
            IPOLG=NTSEITE(IPOLG,MRSURF)
            MRSURF=NRCELL
          ELSEIF (SG.LT.0) THEN
C  NOTHING TO BE DONE
          ENDIF
        ELSE
          write (6,*) 'levgeo in folion  ', levgeo
          write (6,*) 'option not ready, exit called'
          call exit_own(1)
        ENDIF
        IF (NRCELL.NE.NRCELL_OLD) THEN
          ico=ico+1
          if (ico.le.1) goto 1005
        ENDIF
      ELSEIF (NLSRFY) THEN
C  POLOIDAL CELL NO. MAY BE WRONG
C  CHECK ORIENTATION OF PARALLEL MOTION RELATIV TO POLOIDAL COORDINATE
C
        NPCELL_OLD=NPCELL
        IF (LEVGEO.EQ.1) THEN
          SG=SIGN(1._DP,VLYPAR)
          IF (SG.LT.0) THEN
            NPCELL=MPSURF-1
          ELSEIF (SG.GT.0) THEN
            NPCELL=MPSURF
          ENDIF
        ELSEIF (LEVGEO.EQ.2.OR.LEVGEO.EQ.3) THEN
          SG=VLXPAR*PPLNX(NRCELL,MPSURF)+VLYPAR*PPLNY(NRCELL,MPSURF)
          IF (SG.LT.0) THEN
            npcell=nghpls(4,nrcell,mpsurf)
            ipolg=npcell
C  ACCOUNT FOR CUTS, PERIODICITY, ETC.
C           mpsurf is correct
          ELSEIF (SG.GT.0) THEN
            npcell=nghpls(2,nrcell,mpsurf)
            ipolg=npcell
C  ACCOUNT FOR CUTS, PERIODICITY, ETC.
            mpsurf=npcell
          ENDIF
        ENDIF
        IF (NPCELL.NE.NPCELL_OLD) THEN
          ico=ico+1
          if (ico.le.1) goto 1005
        ENDIF
      ELSEIF (NLSRFZ) THEN
C  TOROIDAL CELL NO. MAY BE WRONG
C
        NTCELL_OLD=NTCELL
        IF (NLTRZ) THEN
          SG=SIGN(1._DP,VLZPAR)
          IF (SG.LT.0) THEN
            NTCELL=MTSURF-1
          ELSEIF (SG.GT.0) THEN
            NTCELL=MTSURF
          ENDIF
        ELSE
          WRITE (6,*) 'SG IN FOLION: TO BE WRITTEN '
          WRITE (6,*) 'NPANU ',NPANU
          CALL EXIT_OWN(1)
        ENDIF
        IF (NTCELL.NE.NTCELL_OLD) THEN
          ico=ico+1
          if (ico.le.1) goto 1005
        ENDIF
      ENDIF
C
C AT THIS POINT: V_PARALLEL, V_PERP , GYROPHASE, KNOWN
C
      GOTO 1002

C
1001  CONTINUE
      IF (IC_ION.EQ.1.AND.NLTRC)
     .  WRITE (6,*) 'TRAJECTORY ENTERS STATIC LOOP, ITYP=', ITYP
C  STATIC APPROXIMATION
C  SIMULATE NEXT COLLISION INSTANTANEOUSLY
C
C  WEIGHT TOO SMALL? STOP HISTORY
      IF (WEIGHT.LT.EPS30) THEN
        LGPART=.FALSE.
        RETURN
      ENDIF
C
C  PARTICLE ON SURFACE ?
      IF (NLSRFX.OR.NLSRFY.OR.NLSRFZ.OR.NLSRFA) THEN
C  EMITTED  ?  CALL COLLIDE, AFTER UPDATE
        IF (IC_ION.EQ.1) THEN
C  FIRST ENTRY INTO "STATIC LOOP", ALWAYS: EMITTED FROM FROM SURFACE
C    (CRTXG,....,...): NORMAL RELATIVE TO DEFAULT SETTINGS
C                      NEEDED LATER IF PARTICLE LEAVES STATIC LOOP 
C                      VIA STDCOL OR ADDCOL
          CRTXG=CRTX*SCOS
          CRTYG=CRTY*SCOS
          CRTZG=CRTZ*SCOS
          SCOS = SIGN(1.D0,VLXPAR*CRTXG+VLYPAR*CRTYG+VLZPAR*CRTZG)
          SCOS_SAVE = SCOS
          SCOS_NEW  = SCOS
C  INCIDENT DURING STATIC LOOP?  CALL ESCAPE, AFTER UPDATE
        ELSE
          SCOS_NEW = SIGN(1.D0,VLXPAR*CRTXG+VLYPAR*CRTYG+VLZPAR*CRTZG)
        ENDIF
      ELSE
C  PARTICLE NOT ON SURFACE
        SCOS_SAVE = SCOS
        SCOS_NEW  = SCOS
      ENDIF
C
      NCOU=1
!pb ??
      IF (NR1P2 == 0) THEN
        NUPC(1)=0
      ELSE
        NUPC(1)=(NCELL-NRCELL-NBLCKA)/NR1P2
      END IF
C     IF (ITYP.EQ.3) THEN
        LOGION(IION,ISTRA)=.TRUE.
        ZMFP=FPATHI(NCELL,CFLAG)
C     ENDIF
      XSTOR2(:,:,1)=XSTOR(:,:)
      XSTORV2(:,1)=XSTORV(:)
C  DECIDE TO FOLLOW OR NOT TO FOLLOW THIS TRACK ON BASIS OF MFP
C
C  TO BE WRITTEN
C
      CLPD(1)=ZMFP
      IF (IUPDTE.GE.1) THEN
        CALL UPDION (XSTOR2,XSTORV2,1)
!pb        CALL UPDION_V (XSTOR2,XSTORV2,1)
      ENDIF
      ZTC=0.
C  CARRY OUT INELASTIC COLLISION EVENT, DIRECTLY AT PLACE OF BIRTH
      IF (SCOS_SAVE.EQ.SCOS_NEW) THEN
        GOTO 230
      ELSE 
C  AT THIS POINT: PARTICLE INCIDENT ON SURFACE, IC_ION GT 1 NECESSARILY
        IF (ILIIN(MSURF).GT.0) THEN
          SCOS=SCOS_NEW
          GOTO 380
        ELSE
          GOTO 230
        END IF
      ENDIF
C
C
1002  CONTINUE
C  NO STATIC APPROXIMATION, FOLLOW MOTION
C
      IF (IC_ION.GT.1.AND.NLTRC)
     .  WRITE (6,*) 'TRAJECTORY LEAVES STATIC LOOP, ITYP=', ITYP
      IF (IC_ION.GT.1.AND.
     .   (NLSRFX.OR.NLSRFY.OR.NLSRFZ.OR.NLSRFA)) THEN
C  PARTICLE CONTINUES FROM SURFACE AND FROM PREVIOUS "STATIC LOOP" ?
        IC_ION=0
        IC_NEUT=0
        SCOS_NEW = SIGN(1.D0,VLXPAR*CRTXG+VLYPAR*CRTYG+VLZPAR*CRTZG)
        IF (SCOS_SAVE.NE.SCOS_NEW) THEN
          SCOS=SCOS_NEW
          ZT=0.D0
          TL=0.D0
          IPOLGN=IPOLG
          VELXS=VELX
          VELYS=VELY
          VELZS=VELZ
          VELX=VLXPAR
          VELY=VLYPAR
          VELZ=VLZPAR
          IF (NLSRFA) THEN 
            CALL ADDCOL (X0,Y0,Z0,SCOS,*101,*380)
          ELSEIF (NLSRFX) THEN
            IF (LEVGEO.LE.3) THEN
              ISTS=INMP1I(MRSURF,IPCELL,ITCELL)
              MSURFG=NPCELL+(NTCELL-1)*NP2T3
            ELSEIF (LEVGEO.EQ.4) THEN
              ISTS=ABS(INMTI(IPOLGN,MRSURF))
              MSURFG=INSPAT(IPOLGN,MRSURF)
            ELSEIF (LEVGEO.EQ.5) THEN
              ISTS=ABS(INMTIT(IPOLGN,MRSURF))
C             MSURFG= ??
            ELSEIF (LEVGEO.EQ.6) THEN
              ISTS=INMP1I(MRSURF,IPCELL,ITCELL)
C             MSURFG= ??
            ENDIF
            CALL STDCOL (ISTS,1,SCOS,*101,*380)
          ELSEIF (NLSRFY) THEN
            ISTS=INMP2I(IRCELL,MPSURF,ITCELL)
            MSURFG=NRCELL+(NTCELL-1)*NR1P2
            CALL STDCOL (ISTS,2,SCOS,*101,*380)
          ELSEIF (NLSRFZ) THEN
            ISTS=INMP3I(IRCELL,IPCELL,MTSURF)
            MSURFG=NRCELL+(NPCELL-1)*NR1P2
            CALL STDCOL (ISTS,3,SG,*101,*380)
          ENDIF
        ENDIF
      ENDIF
      IC_ION=0
      IC_NEUT=0
C
C  PARTICLE IN VOLUME OR ON SURFACE BUT NOT FROM "STATIC LOOP"
C
C  EACH TEST ION TRACK STARTS AT THIS POINT, IC_ION=0 HERE
C
101   CONTINUE
C     IF (ITYP.EQ.3) THEN
        LOGION(IION,ISTRA)=.TRUE.
C       NLPR=   : NOT AVAILABLE
        NRC=NRCI(IION)
C     ENDIF
C  WEIGHT TOO SMALL? STOP HISTORY
      IF (WEIGHT.LT.EPS30) THEN
        LGPART=.FALSE.
        RETURN
      ENDIF
      ICOL=0
      JCOL=0
C
      ZEP1=RANF_EIRENE( )
      ZLOG=-LOG(ZEP1)
      ZINT1=0.0
      ZINT2=ZINT1
      AX(1)=1.
      AX(2)=1.
      IF (NLTRA) X01=X0+RMTOR
      X00=X0
      Y00=Y0
      Z00=Z0
      Z01=Z0
C  CLEAR WORK VARIABLES AND: CONTINUE FLIGHTS THROUGH TRANSPARENT
C                            SURFACES FROM THIS POINT
104   CONTINUE
      NCELL=NRCELL+((NPCELL-1)+(NTCELL-1)*NP2T3)*NR1P2+NBLCKA
      NJUMP=0
      VELX=VELXS
      VELY=VELYS
      VELZ=VELZS
      IF (LEVGEO < 3) THEN
        TIMINT=0.0
      ELSE IF (LEVGEO == 3) then
        TIMINT(1:nr1st)=0.0
      END IF  
      TT=1.D30
      TL=1.D30
      TS=1.D30
      ZTST=1.D30
      ZT=0.0
C
      NCOU=1
      NUPC(1)=0
      NCOUNT(1)=1
      NCOUNP(1)=1
      ISRFCL=-1
C
C TL: DISTANCE TO NEXT ADDITIONAL SURFACE
      IF (NCELL.LE.NOPTIM) THEN
        NLI=NLIMII(NCELL)
        NLE=NLIMIE(NCELL)
      ELSE
        NLI=1
        NLE=NLIMI
      ENDIF
      IF (NLI.LE.NLE) THEN
        CALL TIMEA1 (MSURF,NCELL,NLI,NLE,NTCELL,IPERID,X0,Y0,Z0,TIME,
     .               VLXPAR,VLYPAR,VLZPAR,VELPAR,
     .               MASURF,XLI,YLI,ZLI,SG,TL,NLTRC,LCNDEXP)
C       NLPR= :NOT AVAILABLE FOR TEST IONS
        ZTST=TL
        ZDT1=TL
        CLPD(1)=ZDT1
        IF (MASURF.NE.0) ISRFCL=1
      ENDIF
C
C TT: DISTANCE UNTIL NEXT TIMESTEP LIMIT IS REACHED
      IF (LGTIME) THEN
        TT=(DTIMVI-TIME)*VELPAR
        IF (TT.LT.ZTST) THEN
          ZTST=TT
          ZDT1=TT
          CLPD(1)=ZDT1
          ISRFCL=2
        ENDIF
      ENDIF
C
C FNUI: COLLISION FREQUENCY WITH BACKGROUND IONS.
      FNUI=1.D-30
      IF (NRC.GE.0) THEN
        DO IPL=1,NPLSI
          IPLTI=MPLSTI(IPL)
          IF (.NOT.LGVAC(NCELL,IPL))
     .    FNUI=FNUI+FNUEQI(DIIN(IPL,NCELL),TIIN(IPLTI,NCELL))
        ENDDO
      ENDIF
C TAUE: RELAXATION TIME
      TAUE=1./FNUI
C STEPSIZE=0.1*VEL_PARALLEL*TAUE, I.E. 10 COULOMB COLLISIONS PER RELAX.TIME
C TF: DISTANCE UNTIL NEXT COULOMB COLLISION
C DELFAC: INCREASE STEPSIZE AS E0 APPROACHES 1.5 * TI
      DELFAC=1.5_DP*TIIN(1,NCELL)/ABS(E0-1.5_DP*TIIN(1,NCELL)+EPS60)
      TF=TAUE*VELPAR*0.1*DELFAC
      IF (TF.LT.ZTST) THEN
        ZTST=TF
        ZDT1=TF
        CLPD(1)=ZDT1
        ISRFCL=4
      ENDIF
C
C  SCAN OVER RADIAL CELLS
C
210   CONTINUE
C
C  TS:   DISTANCE TO NEXT RADIAL SURFACE OF STANDARD MESH
C  ZDT1: DISTANCE TRAVELLED IN CURRENT RADIAL CELL
C
C  USE PARALLEL VELOCITY, I.E., COMPUTE PARALLEL DISTANCES IN GRID
C  THUS ZT,TS,ZTST,ZDT1,CLPD ETC. ARE PARALLEL DISTANCES
C
      IF (ITIME.EQ.1) THEN
        IF (NLRAD) THEN
          VELXS=VELX
          VELYS=VELY
          VELZS=VELZ
          VELX=VLXPAR
          VELY=VLYPAR
          VELZ=VLZPAR
          CALL TIMER(TS)
C
          IF (TL.LT.TS.OR.TT.LT.TS.OR.TF.LT.TS) THEN
            MRSURF=0
            IPOLGN=0
C  COLLISION WITH ADDITIONAL SURFACE
            IF (TL.LE.TT.AND.TL.LE.TF) THEN
              ZDT1=TL-ZT
              TL=ZT+ZDT1
              ZTST=TL
              ISRFCL=1
C  COLLISION WITH TIME SURFACE
            ELSEIF (TT.LT.TL.AND.TL.LE.TF) THEN
              ZDT1=TT-ZT
              TT=ZT+ZDT1
              ZTST=TT
              ISRFCL=2
C  FOKKER PLANCK COLLISION
            ELSEIF (TF.LT.TL.AND.TF.LE.TT) THEN
              ZDT1=TF-ZT
              TF=ZT+ZDT1
              ZTST=TF
              ISRFCL=4
            ENDIF
          ELSE
C  COLLISION WITH RADIAL SURFACE
            ISRFCL=0
            ZDT1=TS-ZT
            ZTST=TS
          ENDIF
        ENDIF
C
        NCOU=1
        NUPC(1)=0
        CLPD(1)=ZDT1
        NCOUNT(1)=1
        NCOUNP(1)=1
C
        IF (NLTOR.OR.NLTRA) THEN
          CALL TIMET (ZDT1)
          TS=ZT+ZDT1
          ZTST=TS
        ENDIF
C
        IF (NLPOL) THEN
          CALL TIMEP(ZDT1)
          TS=ZT+ZDT1
          ZTST=TS
        ENDIF
C
        IF (ZDT1.LE.0.D0) GOTO 990
        VELX=VELXS
        VELY=VELYS
        VELZ=VELZS
      ENDIF
      IF (ZTST.GE.1.D30) GOTO 990
C
C  LOCAL MEAN FREE PATH
C  USE PARALLEL VELOCITY, I.E., COMPUTE PARALLEL MFP
C  BECAUSE CLPD IS THE PARALLEL DISTANCE IN EACH CELL (EXCLUD. GYRO)
C  ETC.. E.G LAMBDA(PARALLEL)=VEL(PARALLEL)/SIGV.
C  THE COLLISION FREQUENCY SIGV, HOWEVER, MUST BE COMPUTED USING THE
C  FULL TEST ION VELOCITY VECTOR, BECAUSE IT MAY DEPEND UPON THE RELATIV
C  INTERACTION ENERGY: TO BE WRITTEN
C  FOR INTERACTIONS WITH ELECTRONS THIS IS IRRELEVANT
C
      IF (IFPATH.NE.1.OR.NRC.LT.0) THEN
        DO 214 J=1,NCOU
          JJ=J
          XSTOR2(:,:,J)=0.D0
          XSTORV2(:,J)=0.D0
          ZMFP=1.D10
          IF (NLPOL) NPCELL=NCOUNP(J)
          IF (NLTOR) NTCELL=NCOUNT(J)
          VEL=VELS
          GOTO 213
214     CONTINUE
      ELSE
        VELS=VEL
        VEL=VELPAR
        DO 212 J=1,NCOU
          JJ=J
          NCELL=NRCELL+NUPC(J)*NR1P2+NBLCKA
          ZMFP=FPATHI(NCELL,CFLAG)
          XSTOR2(:,:,J)=XSTOR(:,:)
          XSTORV2(:,J)=XSTORV(:)
C  UPDATE INTEGRAL
          ZINT1=ZINT1+CLPD(J)*ZMFPI
C         IF (.NOT.NLPR) THEN
CCC         IF (ZINT1.GE.ZLOG) THEN
              IF (NLPOL) NPCELL=NCOUNP(J)
              IF (NLTOR) NTCELL=NCOUNT(J)
              VEL=VELS
              GOTO 213
CCC         ENDIF
            ZINT2=ZINT1
            ZT=ZT+CLPD(J)
C         ELSEIF (JCOL.EQ.0) THEN
C   CONDITIONAL EXPECTATION ESTIMATOR FOR TEST IONS: TO BE WRITTEN
C         ENDIF
212     CONTINUE
        VEL=VELS
      ENDIF
C
213   CONTINUE
      NCOUS=NCOU
      NCOU=JJ

CCC  IF NO COLLISION, THEN: ENFORCE ONLY ONE STEP AT A TIME
      IF (ZINT1.LT.ZLOG.AND.NCOUS.GT.1) THEN
        MRSURF=0
        MPSURF=0
        MTSURF=0
        MASURF=0
        ISRFCL=0
        NINCX=0
        NINCY=0
        NINCZ=0
      ENDIF
CCC
C
C  CHECK FOR EVENT
C
C     IF (NLPR)    ......
      IF (ZINT1.GE.ZLOG) GO TO 220
C
      ZINT2=ZINT1
      ZT=ZTST
C
C  RESET CLPD TO REAL PATH LENGTH OF GYRO MOTION
      DO 217 ICOU=1,NCOU
        CLPD(ICOU)=CLPD(ICOU)*VEL/VELPAR
217   CONTINUE
C
C  UPDATE CONTRIBUTION TO VOLUME AVERAGED ESTIMATORS
C
      IF (IUPDTE.GE.1) THEN
        CALL UPDION(XSTOR2,XSTORV2,3)
!pb        CALL UPDION_V(XSTOR2,XSTORV2,3)
      ENDIF
C
C  STOP TRACK ?
C
CDR: ALLE DISTANZEN IN ...COL routines sind parallele distanzen
CDR: Daher auch wg. x = x + dist/vel  parallele geschwindigkeiten.
CDR: MUSS NOCH: AUCH VEL=VELPAR, FUER TIME=TIME+.....
      VELX=VLXPAR
      VELY=VLYPAR
      VELZ=VLZPAR
      IF (ISRFCL.EQ.1) CALL ADDCOL(XLI,YLI,ZLI,SG,*104,*380)
      IF (ISRFCL.EQ.2) CALL TIMCOL(AX(2),         *104,*800)
      IF (ISRFCL.EQ.3) CALL TORCOL(               *104)
      IF (ISRFCL.EQ.4) CALL FPKCOL(               *104,*100)
      VELX=VELXS
      VELY=VELYS
      VELZ=VELZS
C
C  NO, CONTINUE TRACK
C
216   CONTINUE
C
C  NEXT CELL - CHECK FOR ESCAPE OR NON DEFAULT ACTING STANDARD SURFACE
C
      IF (LEVGEO.LE.3) THEN
C        
        ISTS=INMP1I(MRSURF,IPCELL,ITCELL)
        IF (NLRAD.AND.ISTS.NE.0) THEN
          SG=ISIGN(1,NINCX)
          NLSRFX=.TRUE.
          MSURFG=NPCELL+(NTCELL-1)*NP2T3
          VELXS=VELX
          VELYS=VELY
          VELZS=VELZ
          VELX=VLXPAR
          VELY=VLYPAR
          VELZ=VLZPAR
          CALL STDCOL (ISTS,1,SG,*104,*380)
        ENDIF
        ISTS=INMP3I(IRCELL,IPCELL,MTSURF)
        IF (NLTOR.AND.ISTS.NE.0) THEN
          SG=ISIGN(1,NINCZ)
          NLSRFZ=.TRUE.
          MSURFG=NRCELL+(NPCELL-1)*NR1P2
          VELXS=VELX
          VELYS=VELY
          VELZS=VELZ
          VELX=VLXPAR
          VELY=VLYPAR
          VELZ=VLZPAR
          CALL STDCOL (ISTS,3,SG,*104,*380)
        ENDIF
        ISTS=INMP2I(IRCELL,MPSURF,ITCELL)
        IF (NLPOL.AND.ISTS.NE.0) THEN
          SG=ISIGN(1,NINCY)
          NLSRFY=.TRUE.
          MSURFG=NRCELL+(NTCELL-1)*NR1P2
          VELXS=VELX
          VELYS=VELY
          VELZS=VELZ
          VELX=VLXPAR
          VELY=VLYPAR
          VELZ=VLZPAR
          CALL STDCOL (ISTS,2,SG,*104,*380)
        ENDIF
C
      ELSEIF (LEVGEO.EQ.4) THEN
        ISTS=ABS(INMTI(IPOLGN,MRSURF))
        IF (NLRAD.AND.ISTS.NE.0) THEN
          SG=ISIGN(1,NINCX)
          NLSRFX=.TRUE.
          MSURFG=INSPAT(IPOLGN,MRSURF)
          VELXS=VELX
          VELYS=VELY
          VELZS=VELZ
          VELX=VLXPAR
          VELY=VLYPAR
          VELZ=VLZPAR
          CALL STDCOL (ISTS,1,SG,*104,*380)
        ENDIF
C
      ELSEIF (LEVGEO.EQ.5) THEN
        ISTS=ABS(INMTIT(IPOLGN,MRSURF))
        IF (NLRAD.AND.ISTS.NE.0) THEN
          SG=ISIGN(1,NINCX)
          NLSRFX=.TRUE.
          VELXS=VELX
          VELYS=VELY
          VELZS=VELZ
          VELX=VLXPAR
          VELY=VLYPAR
          VELZ=VLZPAR
          CALL STDCOL (ISTS,1,SG,*104,*380)
        ENDIF
C
      ELSEIF (LEVGEO.EQ.6) THEN
        ISTS=INMP1I(MRSURF,IPCELL,ITCELL)
        IF (NLRAD.AND.ISTS.NE.0) THEN
          SG=ISIGN(1,NINCX)
          NLSRFX=.TRUE.
          VELXS=VELX
          VELYS=VELY
          VELZS=VELZ
          VELX=VLXPAR
          VELY=VLYPAR
          VELZ=VLZPAR
          CALL STDCOL (ISTS,1,SG,*104,*380)
        ENDIF
      ENDIF
C
C
      NRCELL=NRCELL+NINCX
      IF (NRCELL.GT.NR1STM.OR.NRCELL.LT.1) GOTO 990
C
CDR: SPLITTING AND COND.EXP.EST. NOT AVAILABLE FOR TEST IONS
C
C  CHECK IF WE HAVE ENCOUNTERED A SPLITTING ZONE
C     IF (NLSPLT(MRSURF).AND.NLEVEL.LT.MAXLEV.AND.ICOL.EQ.0) GOTO 330
C
C  SWITCH OFF CONDITIONAL EXP. ESTIMATOR ?
C     IF (AX(2).LT.WMINC) THEN
C       IF (ICOL.EQ.1) GOTO 512
C  NO COLLISION YET; RESTART AGAIN WITH COND. EXP. ESTIMATOR
C                    IN NEW CELL
C       AX(1)=1.
C       AX(2)=1.
C       JCOL=0
C     ENDIF
CCC
      ZTC=CLPD(1)*VELPAR/VEL
      GOTO 2211
CCC
CCC   GOTO 210
C
C  POINT OF COLLISION  220---240
C
220   CONTINUE
C
      CLPD(NCOU)=(ZLOG-ZINT2)*ZMFP
      ZTC=ZT+CLPD(NCOU)
C  RESET CLPD TO REAL PATH LENGTH OF GYRO MOTION
      DO 221 ICOU=1,NCOU
        CLPD(ICOU)=CLPD(ICOU)*VEL/VELPAR
221   CONTINUE
      IF (IUPDTE.GE.1) THEN
        CALL UPDION (XSTOR2,XSTORV2,4)
!pb        CALL UPDION_V (XSTOR2,XSTORV2,4)
      ENDIF
2211  continue
      X0=X0+VLXPAR*ZTC
      Y0=Y0+VLYPAR*ZTC
      Z0=Z0+VLZPAR*ZTC
      TIME=TIME+ZTC/VELPAR
      IF (LEVGEO.LE.3.AND.NLPOL) THEN
        IPOLG=NPCELL
      ELSEIF (NLPLG) THEN
        IPOLG=LEARC2(X0,Y0,NRCELL,NPANU,'FOLION 2     ')
      ELSEIF (NLFEM) THEN
        IPOLG=0
      ELSEIF (NLTET) THEN
        IPOLG=0
      ENDIF
      NLSRFX=.FALSE.
      NLSRFY=.FALSE.
      NLSRFZ=.FALSE.
      MRSURF=0
      MPSURF=0
      MTSURF=0
      MASURF=0
      MSURF=0
      IF (NLTRA) PHI=MOD(PHI-ATAN2(Z01,X01)+ATAN2(Z0,(RMTOR+X0)),PI2A)
C
CCC
      IF (ZINT1.LT.ZLOG) THEN
C  DELTA EVENT AT CELL BOUNDARY
        IF (NINCX.NE.0) THEN
          NLSRFX=.TRUE.
          IF (LEVGEO < 4) THEN
            MRSURF=NRCELL
            IF (NINCX.EQ.-1) MRSURF=NRCELL+1
          ELSEIF (LEVGEO == 4) THEN
            NRCOLD=NRCELL-NINCX
            MRSURF=NCHBAR(IPOLGN,NRCOLD)
            IPOLG=NSEITE(IPOLGN,NRCOLD)
          ELSEIF (LEVGEO == 5) THEN
            NRCOLD=NRCELL-NINCX
            MRSURF=NTBAR(IPOLGN,NRCOLD)
            IPOLG=NTSEITE(IPOLGN,NRCOLD)
          ELSE
            WRITE (6,*) 'DELTA EVENT AT CELL BOUNDARY NOT READY '
            WRITE (6,*) 'FOR LEVGEO=6 IN SUBR. FOLION. '
            CALL EXIT_OWN(1)
          END IF
        ELSEIF (NINCZ.NE.0) THEN
          NLSRFZ=.TRUE.
          NTCELL=KUPC(1)+NINCZ
          IF (NINCZ == 1) THEN
            MTSURF=NTCELL
          ELSEIF (NINCZ.EQ.-1) THEN
            MTSURF=NTCELL+1
          ENDIF
        ELSEIF (NINCY.NE.0) THEN
          NLSRFY=.TRUE.
          IF (LEVGEO.EQ.1) THEN
            NPCELL=JUPC(1)+NINCY
            IF (NINCY == 1) THEN
              MPSURF=NPCELL
            ELSEIF (NINCY.EQ.-1) THEN
              MPSURF=NPCELL+1
            ENDIF
          ELSEIF (LEVGEO.LE.3) THEN
            MPSURF=LUPC(1)
            IF (MUPC(1).EQ.1) NPCELL=NGHPLS(2,NRCELL,MPSURF)
            IF (MUPC(1).NE.1) NPCELL=NGHPLS(4,NRCELL,MPSURF)
C  PERIODICITY FOR LEVGEO=2 (TO BE WRITTEN INTO MORE GENERAL TERMS)
            IF (NPCELL.EQ.0.AND.LEVGEO.EQ.2) THEN
              WRITE (6,*) 'should not be here '
              MPSURF=NP2ND
              NPCELL=NP2NDM
            ELSEIF (NPCELL.EQ.NP2ND.AND.LEVGEO.EQ.2) THEN
              WRITE (6,*) 'should not be here '
              MPSURF=1
              NPCELL=1
            ENDIF
            IF (LEVGEO.LE.3.AND.NLPOL) THEN
              IPOLG=NPCELL
            ELSEIF (LEVGEO.EQ.3.AND..NOT.NLPOL) THEN
              IPOLG=LEARC2(X0,Y0,NRCELL,NPANU,'FOLION neu   ')
            ENDIF
          ENDIF
        ELSE
          GOTO 994
        ENDIF
        IF (NLTRC) CALL CHCTRC(X0,Y0,Z0,16,8)
        NUPC(1)=NPCELL-1+(NTCELL-1)*NP2T3
        NCELL=NRCELL+NUPC(1)*NR1P2+NBLCKA
        IF (INDPRO(5) == 8) THEN
          CALL VECUSR(1,BBX,BBY,BBZ,1)
        ELSE
          BBX=BXIN(NCELL)
          BBY=BYIN(NCELL)
          BBZ=BZIN(NCELL)
        END IF
        VLXPAR=SIG*BBX
        VLYPAR=SIG*BBY
        VLZPAR=SIG*BBZ
        VELPAR=ABS(VEL*VCOS)*(1.D0-EPS12)
        E0PAR=CVRSSI(IION)*VELPAR*VELPAR
        ICO = 0
C  RETAIN V_PARALLEL, V_PERP, VCOS, SIG, SAMPLE PHASE, AND FIND NEW VX,VY,VZ
        BVEC = (/ BBX, BBY, BBZ /)
        VELPER = SQRT(VEL**2 - VELPAR**2)
        GYRO=RANF_EIRENE()*PI2A
        CALL B_PROJI (BVEC,BVEC_1,VVEC,SIG*VELPAR,VELPER,GYRO)
        VELX = VVEC(1)
        VELY = VVEC(2)
        VELZ = VVEC(3)
        GOTO 1004
      ENDIF
CCC
C
230   CONTINUE
C
C  PRE COLLISION ESTIMATOR
C
      IF (NCLVI.GT.0) THEN
        WS=WEIGHT/SIGTOT
        CALL UPCUSR(WS,1)
      ENDIF
C
C
C  TEST FOR CORRECT CELL NUMBER AT COLLISION POINT
C  KILL PARTICLE, IF TOO LARGE ROUND OFF ERRORS DURING
C  PARTICLE TRACING
C
      IF (NLTEST) CALL CLLTST(*997)
C
C  SAMPLE FROM COLLISION KERNEL FOR TEST IONS
C  AT PRESENT: NO SUPPRESSION OF ABSORBTION AT IONIZATION
C  FIND NEW WEIGHT, SPECIES INDEX, VELOCITY AND RETURN
C
      CALL COLION(CFLAG,COLTYP,DIST)
      ISPZ=ISPEZ(ITYP,IPHOT,IATM,IMOL,IION,IPLS)
C
C  POST COLLISION ESTIMATOR
C
      IF (NCLVI.GT.0) THEN
        WS=WEIGHT/SIGTOT
        CALL UPCUSR(WS,2)
      ENDIF
C
      IF (COLTYP.EQ.2.) GOTO 700
C
      GOTO 100
C
C  SIMULATION OF COLLISION EVENT FINISHED
C
C
C
C   INCIDENT ONTO SURFACE
C
380   CONTINUE
C
C   REFLECTION FROM  SURFACE
C   USE PARALLEL VELOCITY, BECAUSE GYROMOTION WAS NOT CONSIDERED
C   IN FINDING THE INTERSECTION WITH THIS SURFACE. THE GYRO-PHASE
C   IS NOT KNOWN EITHER. AND A WRONG PHASE MAY LEAD TO A NEGATIVE "COSIN".
C
      VELX=VLXPAR
      VELY=VLYPAR
      VELZ=VLZPAR
C     VEL=VEL
C
C  UPDATE EFFLUXES ONTO SURFACE AND REFLECT PARTICLE
      PR=1.
      IF (ILIIN(MSURF).LE.-2) PR=SG
C
C  FOR NONTRANSPARENT SURFACES:
C  ACCELERATION IN SHEATH IS DONE IN SUBR. ESCAPE
C
      CALL ESCAPE(PR,SG,*100,*104,*996)
      RETURN
C
C   100: START NEW ION TRACK
C   104: CONTINUE THIS TRACK, TRANSPARENT SURFACE IS CROSSED
C
C
700   CONTINUE
C  REGULAR STOP IN SUBR. FOLION, CONTINUE IN SUBR. MCARLO
      RETURN
C
800   CONTINUE
C  REGULAR STOP IN SUBR. FOLION, STOP HISTORY, CENSUS ARRAY FULL
C     IF (ICOL.EQ.1.AND..NOT.LGLAST) GOTO 512
      LGPART=.FALSE.
      WEIGHT=0.
      RETURN
C
990   CONTINUE
      CALL LEER(1)
      CALL MASAGE ('ERROR IN FOLION,  ZDT1 OR NRCELL OUT OF RANGE  ')
      CALL MASAGE ('PARTICLE IS KILLED                            ')
      WRITE (6,*) 'NPANU,NRCELL,ZDT1,ZTST ',NPANU,NRCELL,ZDT1,ZTST
      WRITE (6,*) 'TL,TS,ZINT1,ZLOG ',TL,TS,ZINT1,ZLOG
      GOTO 995
991   CONTINUE
      CALL LEER(1)
      CALL MASAGE ('ERROR IN FOLION,  NCELL OUT OF RANGE            ')
      CALL MASAGE ('PARTICLE IS KILLED                            ')
      WRITE (6,*) 'NPANU,NCELL,NRCELL,NPCELL,NTCELL '
      WRITE (6,*)  NPANU,NCELL,NRCELL,NPCELL,NTCELL
      GOTO 995
993   CALL MASAGE ('ERROR IN FOLION,  NO PARTICLE TRACING BUT     ')
      CALL MASAGE ('IFPATH.NE.1. PARTICLE IS KILLED               ')
      WRITE (6,*) 'IION ',IION
      GOTO 999
C
994   CALL MASAGE ('ERROR IN FOLION,  AT SURFACE DELTA EVENT      ')
      WRITE (6,*) 'IION,NPANU ',IION,NPANU
      GOTO 999
C
995   WRITE (6,*) 'MRSURF,MPSURF,MTSURF,MASURF ',
     .             MRSURF,MPSURF,MTSURF,MASURF
      X0ERR=X0+ZT*VELX
      Y0ERR=Y0+ZT*VELY
      Z0ERR=Z0+ZT*VELZ
      IF (NLTRC) THEN
        CALL CHCTRC(X0ERR,Y0ERR,Z0ERR,16,18)
      ELSE
        WRITE (6,*) 'X0,Y0,Z0,ZT ',X0,Y0,Z0,ZT
        WRITE (6,*) 'VELX,VELY,VELZ ',VELX,VELY,VELZ
        WRITE (6,*) 'X0ERR,Y0ERR,Z0ERR ',X0ERR,Y0ERR,Z0ERR
      ENDIF
      GOTO 999
996   CALL MASAGE ('ERROR IN FOLION, COND. EXP. ESTIM. NOT IN USE ')
      GOTO 999
997   CALL MASAGE ('ERROR IN FOLION,  DETECTED IN SUBR. CLLTST    ')
      CALL MASAGE ('PARTICLE IS KILLED                            ')
C   DETAILED PRINTOUT ALREADY DONE FROM SUBR. CLLTST
      IF (NLTRC) CALL CHCTRC(X0,Y0,Z0,16,18)
      GOTO 999
998   WRITE (6,*) 'ERROR IN FOLION, SPECIES INDEX OUT OF RANGE '
      WRITE (6,*) ' NPANU,IION ',NPANU,IION
      GOTO 999
C
999   PTRASH(ISTRA)=PTRASH(ISTRA)-WEIGHT
      ETRASH(ISTRA)=ETRASH(ISTRA)-WEIGHT*E0
      LGPART=.FALSE.
      WEIGHT=0.
      CALL LEER(1)
      RETURN
      END
C
      SUBROUTINE FOLNEUT
C
C     NEUTRAL PARTICLE, LAUNCHED AT X0,Y0,Z0, IN CELL NRCELL, IPOLG,
C     IPERID, NPCELL, NTCELL, NACELL, NBLOCK, IS FOLLOWED
C
C  ON INPUT
C     ITYP=0 OR ITYP=1 OR ITYP=2
C
C  ON OUTPUT:
C
C     LGPART=TRUE
C     ITYP=3            A NEXT GENERATION TEST ION IS BORN
C                          IION= SPECIES INDEX OF NEXT GENERATION ION
C     LGPART=FALSE
C     ITYP=4  NO NEXT GENERATION TEST PARTICLE
C
      USE PRECISION
      USE PARMMOD
      USE COMUSR
      USE CESTIM
      USE CADGEO
      USE CCONA
      USE CLOGAU
      USE CRAND
      USE CUPD
      USE CGRID
      USE CSPEZ
      USE CZT1
      USE CTETRA
      USE COMPRT
      USE CPES
      USE COMNNL
      USE COMSPL
      USE CLGIN
      USE COUTAU
      USE COMXS
      USE CTRIG

      IMPLICIT NONE

      REAL(DP) :: CFLAG(7,3)
      REAL(DP) :: AX(2)
      REAL(DP) :: XSTOR2(MSTOR1,MSTOR2,N2ND+N3RD),
     .          XSTORV2(NSTORV,N2ND+N3RD)
      REAL(DP) :: XSTORC(MSTOR1,MSTOR2), XSTORVC(NSTORV)
      REAL(DP) :: VELXC, TIMEC, PR, WS, COLTYP, X0C, Y0C, Z0C, ZDT1C,
     .          X0ERR, Y0ERR, Z0ERR, VELC, E0C, VELYC, VELZC, SG,
     .          GENRC, PHIC, WEIGHC, ZLI, DG, XLI, YLI, T, ZTS,
     .          ZMFP, ZEP1, ZLOG, ZTST, ZINT1, ZINT2, Z0S, TIMES,
     .          X0S, Y0S, PHIS, DIST, ZTC, PSAVE, TSAVE, FPATHM, FPATHA,
     .          EX, EXPM, FPATHPH, WMINC_LOCAL,
     .          SCOS_NEW
      REAL(DP), EXTERNAL :: RANF_EIRENE
      INTEGER :: NBLCKC, NCELLC, NRCLLC, NACLLC, ITIMEC, IPERIDC,
     .           IFPTHC, IUPDTC, NPCLLC, NTCLLC, NTSAVE, NPSAVE,
     .           LEARC2, J, NCOUS, NLE, NRC, JCOL, NLI, ISTS, NPCOLC,
     .           JJ, NPCELC, NTCELC, NTCOLC, IFLAG, I1, I2, I3
      LOGICAL :: NLPR, LTRANS, LCNDEXP
C
C  TENTATIVELY ASSUME: A NEXT GENERATION PARTICLE WILL BE BORN
C
C  IC_NEUT, IC_ION: COUNTER FOR GENERATIONS WITHIN STATIC LOOP
      IC_NEUT=IC_ION
100   LGPART=.TRUE.
      IC_NEUT=IC_NEUT+1
      XGENER=0
      NLPR=.FALSE.
      AX(1)=1.
      AX(2)=1.
      WMINC_LOCAL=WMINC
      IF (ITYP.EQ.0) THEN
        IF (IPHOT.LE.0.OR.IPHOT.GT.NPHOTI) GOTO 998
      ELSEIF (ITYP.EQ.1) THEN
        IF (IATM.LE.0.OR.IATM.GT.NATMI) GOTO 998
      ELSEIF (ITYP.EQ.2) THEN
        IF (IMOL.LE.0.OR.IMOL.GT.NMOLI) GOTO 998
      ENDIF
C
C  THE  CELL NUMBER NRCELL, IPOLG, IPERID, NPCELL, NTCELL, NACELL, NBLOCK
C  WAS ALREADY SET IN CALLING SUBROUTINE MCARLO
C
C  IF NLSRFX, SURFACE INDEX MRSURF MUST BE DEFINED AT THIS POINT
C  IF NLSRFY, SURFACE INDEX MPSURF MUST BE DEFINED AT THIS POINT
C  IF NLSRFZ, SURFACE INDEX MTSURF MUST BE DEFINED AT THIS POINT
C  IF NLSRFA, SURFACE INDEX MASURF MUST BE DEFINED AT THIS POINT
C
C  FOLLOW MOTION OF NEUTRAL PARTICLE OR "STATIC APPROXIMATION"?
      IF (IFPATH.NE.1) GOTO 1002
      IF (ITYP.EQ.1) THEN
        IF (NFOLA(IATM).EQ.-1) GOTO 1001
      ELSEIF (ITYP.EQ.2) THEN
        IF (NFOLM(IMOL).EQ.-1) GOTO 1001
      ELSEIF (ITYP.EQ.0) THEN
        IF (NFOLPH(IPHOT).EQ.-1) GOTO 1001
      ENDIF
      GOTO 1002
C
1001  CONTINUE
      IF (IC_NEUT.EQ.1.AND.NLTRC) 
     .  WRITE (6,*) 'TRAJECTORY ENTERS STATIC LOOP, ITYP=', ITYP
C  STATIC APPROXIMATION
C  SIMULATE NEXT COLLISION INSTANTANEOUSLY
C
C  WEIGHT TOO SMALL? STOP HISTORY
        IF (WEIGHT.LT.EPS30) THEN
          LGPART=.FALSE.
          RETURN
        ENDIF
C
C  PARTICLE ON SURFACE ?
        IF (NLSRFX.OR.NLSRFY.OR.NLSRFZ.OR.NLSRFA) THEN
C  EMITTED  ?  CALL COLLIDE, AFTER UPDATE
          IF (IC_NEUT.EQ.1) THEN
C  FIRST ENTRY INTO "STATIC LOOP", ALWAYS: EMITTED FROM FROM SURFACE
C    (CRTXG,....,...): NORMAL RELATIVE TO DEFAULT SETTINGS
C                      NEEDED LATER IF PARTICLE LEAVES STATIC LOOP 
C                      VIA STDCOL OR ADDCOL
            CRTXG=CRTX*SCOS
            CRTYG=CRTY*SCOS
            CRTZG=CRTZ*SCOS
            SCOS = SIGN(1.D0,VELX*CRTXG+VELY*CRTYG+VELZ*CRTZG)
            SCOS_SAVE = SCOS
            SCOS_NEW  = SCOS
C  INCIDENT OR EMITTED DURING STATIC LOOP?  
C  CALL ESCAPE OR CALL COLLIDE, AFTER UPDATE
          ELSE
            SCOS_NEW = SIGN(1.D0,VELX*CRTXG+VELY*CRTYG+VELZ*CRTZG)
          ENDIF
        ELSE
C  PARTICLE NOT ON SURFACE
          SCOS_SAVE = SCOS
          SCOS_NEW  = SCOS
        ENDIF
C
        NCOU=1
        NUPC(1)=(NCELL-NRCELL-NBLCKA)/NR1P2
        IF (IFPATH.NE.1) GOTO 993
        IF (ITYP.EQ.0) THEN
          LOGPHOT(IPHOT,ISTRA)=.TRUE.
          ZMFP=FPATHPH(NCELL,CFLAG)
        ELSEIF (ITYP.EQ.1) THEN
          LOGATM(IATM,ISTRA)=.TRUE.
          ZMFP=FPATHA(NCELL,CFLAG)
        ELSEIF (ITYP.EQ.2) THEN
          LOGMOL(IMOL,ISTRA)=.TRUE.
          ZMFP=FPATHM(NCELL,CFLAG)
        ENDIF
        XSTOR2(1:mstor1,1:mstor2,1)=XSTOR(1:mstor1,1:mstor2)
        XSTORV2(1:nstorv,1)=XSTORV(1:nstorv)
C  DECIDE TO FOLLOW OR NOT TO FOLLOW THIS TRACK ON BASIS OF MFP
C
C  TO BE WRITTEN
C
        CLPD(1)=ZMFP
        IF (IUPDTE.EQ.1) THEN
          IFLAG=1
          IF (ITYP.EQ.0) THEN
            CALL UPDPHOT(XSTOR2,XSTORV2,IFLAG)
!pb            CALL UPDPHOT_V(XSTOR2,XSTORV2,IFLAG)
          ELSEIF (ITYP.EQ.1) THEN
            CALL UPDATM (XSTOR2,XSTORV2,IFLAG)
!pb            CALL UPDATM_V (XSTOR2,XSTORV2,IFLAG)
          ELSEIF (ITYP.EQ.2) THEN
            CALL UPDMOL (XSTOR2,XSTORV2,IFLAG)
!pb            CALL UPDMOL_V (XSTOR2,XSTORV2,IFLAG)
          ENDIF
        ENDIF
        ZTC=0.
C  CARRY OUT INELASTIC COLLISION EVENT, DIRECTLY AT PLACE OF BIRTH
        IF (SCOS_SAVE.EQ.SCOS_NEW) THEN
          GOTO 230
        ELSE 
C  AT THIS POINT: PARTICLE INCIDENT ON SURFACE, IC_NEUT GT 1 NECESSARILY
          IF (ILIIN(MSURF).GT.0) THEN
            SCOS=SCOS_NEW
            GOTO 380
          ELSE
            GOTO 230
          END IF
        ENDIF
C
C
1002  CONTINUE
C  NO STATIC APPROXIMATION, FOLLOW MOTION
C
      IF (IC_NEUT.GT.1.AND.NLTRC)
     .  WRITE (6,*) 'TRAJECTORY LEAVES STATIC LOOP, ITYP=', ITYP
      IF (IC_NEUT.GT.1.AND.
     .   (NLSRFX.OR.NLSRFY.OR.NLSRFZ.OR.NLSRFA)) THEN
C  PARTICLE CONTINUES FROM SURFACE AND FROM PREVIOUS "STATIC LOOP" ?
        IC_ION=0
        IC_NEUT=0
        SCOS_NEW = SIGN(1.D0,VELX*CRTXG+VELY*CRTYG+VELZ*CRTZG)
        IF (SCOS_SAVE.NE.SCOS_NEW) THEN
          SCOS=SCOS_NEW
          ZT=0.D0
          TL=0.D0
          IPOLGN=IPOLG
          IF (NLSRFA) THEN 
            CALL ADDCOL (X0,Y0,Z0,SCOS,*101,*380)
          ELSEIF (NLSRFX) THEN
            IF (LEVGEO.LE.3) THEN
            ISTS=INMP1I(MRSURF,IPCELL,ITCELL)
            MSURFG=NPCELL+(NTCELL-1)*NP2T3
            ELSEIF (LEVGEO.EQ.4) THEN
              ISTS=ABS(INMTI(IPOLGN,MRSURF))
              MSURFG=INSPAT(IPOLGN,MRSURF)
            ELSEIF (LEVGEO.EQ.5) THEN
              ISTS=ABS(INMTIT(IPOLGN,MRSURF))
C             MSURFG= ??
            ELSEIF (LEVGEO.EQ.6) THEN
              ISTS=INMP1I(MRSURF,IPCELL,ITCELL)
C             MSURFG= ??
            ENDIF
            IF (ILIIN(ISTS) .NE. 0) CALL STDCOL (ISTS,1,SCOS,*101,*380)
          ELSEIF (NLSRFY) THEN
            ISTS=INMP2I(IRCELL,MPSURF,ITCELL)
            MSURFG=NRCELL+(NTCELL-1)*NR1P2
            IF (ILIIN(ISTS) .NE. 0) CALL STDCOL (ISTS,2,SCOS,*101,*380)
          ELSEIF (NLSRFZ) THEN
            ISTS=INMP3I(IRCELL,IPCELL,MTSURF)
            MSURFG=NRCELL+(NPCELL-1)*NR1P2
            IF (ILIIN(ISTS) .NE. 0) CALL STDCOL (ISTS,3,SG,*101,*380)
          ENDIF
        ENDIF
      ENDIF
      IC_ION=0
      IC_NEUT=0
C
C  PARTICLE IN VOLUME OR ON SURFACE BUT NOT FROM "STATIC LOOP"
C
C  EACH NEUTRAL PARTICLE TRACK STARTS AT THIS POINT, IC_NEUT=0 HERE
C
101   CONTINUE
      IF (ITYP.EQ.1) THEN
        LOGATM(IATM,ISTRA)=.TRUE.
        NLPR=NLPRCA(IATM)
        NRC=NRCA(IATM)
      ELSEIF (ITYP.EQ.2) THEN
        LOGMOL(IMOL,ISTRA)=.TRUE.
        NLPR=NLPRCM(IMOL)
        NRC=NRCM(IMOL)
      ELSEIF (ITYP.EQ.0) then
        LOGPHOT(IPHOT,ISTRA)=.TRUE.
        NLPR=NLPRCPH(IPHOT)
        NRC=NRCPH(IPHOT)
      ENDIF
C  WEIGHT TOO SMALL? STOP HISTORY
      IF (WEIGHT.LT.EPS30) THEN
        LGPART=.FALSE.
        RETURN
      ENDIF
      ICOL=0
      JCOL=0
C
      ZEP1=RANF_EIRENE( )
      ZLOG=-LOG(ZEP1)
      ZINT1=0.0
      ZINT2=ZINT1
      IF (NLTRA) X01=X0+RMTOR
      X00=X0
      Y00=Y0
      Z00=Z0
      Z01=Z0
C
C  CLEAR WORK VARIABLES AND: CONTINUE FLIGHTS THROUGH TRANSPARENT
C                            SURFACES FROM THIS POINT
104   CONTINUE
      NCELL=NRCELL+((NPCELL-1)+(NTCELL-1)*NP2T3)*NR1P2+NBLCKA
      NJUMP=0
      IF (LEVGEO < 3) THEN
        TIMINT=0.0
      ELSE IF (LEVGEO == 3) then
        TIMINT(1:nr1st)=0.0
      END IF  
      TT=1.D30
      TL=1.D30
      TS=1.D30
      ZTST=1.D30
      ZT=0.0
C
      NCOU=1
      NUPC(1)=0
      NCOUNT(1)=1
      NCOUNP(1)=1
      ISRFCL=-1
C
C TL: DISTANCE TO NEXT ADDITIONAL SURFACE
      IF (NCELL.LE.NOPTIM) THEN
        NLI=NLIMII(NCELL)
        NLE=NLIMIE(NCELL)
      ELSE
        NLI=1
        NLE=NLIMI
      ENDIF
      IF (NLI.LE.NLE) THEN
        CALL TIMEA1 (MSURF,NCELL,NLI,NLE,NTCELL,IPERID,X0,Y0,Z0,TIME,
     .               VELX,VELY,VELZ,VEL,
     .               MASURF,XLI,YLI,ZLI,SG,TL,NLTRC,LCNDEXP)
!pb        NLPR=NLPRCS(MASURF).OR.NLPR
        NLPR=LCNDEXP.OR.NLPR
        ZDT1=TL
        ZTST=TL
        CLPD(1)=ZDT1
        IF (MASURF.NE.0) ISRFCL=1
      ENDIF
C
C TT: DISTANCE UNTIL NEXT TIMESTEP LIMIT IS REACHED
      IF (LGTIME) THEN
        TT=(DTIMVI-TIME)*VEL
        IF (TT.LT.TL) THEN
          ZDT1=TT
          ZTST=TT
          CLPD(1)=ZDT1
          ISRFCL=2
        ENDIF
      ENDIF
C
C  SCAN OVER SEGMENT
C
210   CONTINUE
C
C  TS:   DISTANCE TO NEXT SURFACE OF STANDARD MESH
C  ZDT1: DISTANCE TRAVELLED IN CURRENT RADIAL CELL
C  ZT: DISTANCE ALREADY TRAVELLED IN PREVIOUS PARTS OF THIS TRACK
C
      IF (ITIME.EQ.1) THEN
        IF (NLRAD) THEN
          CALL TIMER(TS)
C
          T=TS/TL-1.0_DP
          IF (ABS(T).LE.EPS10.AND.TL.NE.1.E30_DP) GOTO 992
          IF (TL.LT.TS.OR.TT.LT.TS) THEN
            MRSURF=0
            IPOLGN=0
C  COLLISION WITH ADDITIONAL SURFACE
            IF (TL.LE.TT) THEN
              ZDT1=TL-ZT
              TL=ZT+ZDT1
              ZTST=TL
              ISRFCL=1
C  COLLISION WITH TIME SURFACE
            ELSEIF (TT.LT.TL) THEN
              ZDT1=TT-ZT
              TT=ZT+ZDT1
              ZTST=TT
              ISRFCL=2
            ENDIF
          ELSE
C  COLLISION WITH RADIAL SURFACE
            ISRFCL=0
            ZDT1=TS-ZT
            ZTST=TS
          ENDIF
        ENDIF
C
        NCOU=1
        NUPC(1)=0
        CLPD(1)=ZDT1
        NCOUNT(1)=1
        NCOUNP(1)=1
C
        IF (NLTOR.OR.NLTRA) THEN
          CALL TIMET (ZDT1)
          TS=ZT+ZDT1
          ZTST=TS
        ENDIF
C
        IF (NLPOL) THEN
          CALL TIMEP(ZDT1)
          TS=ZT+ZDT1
          ZTST=TS
        ENDIF
C
        IF (ZDT1.LE.0.D0) GOTO 990
C
      ELSEIF (ITIME.NE.1) THEN
C
        IF (NLTOR.OR.NLTRA) THEN
          CALL TIMET (ZDT1)
          TS=ZT+ZDT1
          ZTST=TS
        ENDIF
      ENDIF
C
      IF (ZTST.GE.1.D30) GOTO 990
C
C  LOCAL MEAN FREE PATH
C
      IFLAG=3
      IF (IFPATH.NE.1.OR.NRC.LT.0) THEN
        XSTOR2=0.D0
        XSTORV2=0.D0
        ZMFP=1.D10
      ELSE
        NCOUS=NCOU
        ZTS=ZT
        DO 212 J=1,NCOU
          JJ=J
          NCELL=NRCELL+NUPC(J)*NR1P2+NBLCKA
          IF (ITYP.EQ.0) ZMFP=FPATHPH(NCELL,CFLAG)
          IF (ITYP.EQ.1) ZMFP=FPATHA(NCELL,CFLAG)
          IF (ITYP.EQ.2) ZMFP=FPATHM(NCELL,CFLAG)
          IF ((ITYP.EQ.0).AND.(ZMFP < WMINL*CLPD(J))) WMINC_LOCAL=1._DP
          XSTOR2(1:mstor1,1:mstor2,J) = XSTOR(1:mstor1,1:mstor2)
          XSTORV2(1:nstorv,J) = XSTORV(1:nstorv)
C  UPDATE INTEGRAL
          ZINT1=ZINT1+CLPD(J)*ZMFPI
          IF (.NOT.NLPR) THEN 
            IF (ZINT1.GE.ZLOG) THEN
C  COLLISION IN SECTION JJ
              IF (NLPOL) NPCELL=NCOUNP(J)
              IF (NLTOR) NTCELL=NCOUNT(J)
              GO TO 213
            ENDIF
            ZINT2=ZINT1
            ZT=ZT+CLPD(J)
          ELSEIF (NLPR) THEN
            IF (JCOL.EQ.0) THEN
              IF (ZINT1.GE.ZLOG) THEN
                JCOL=JJ
                IF (NLPOL) NPCOLC=NCOUNP(J)
                IF (NLTOR) NTCOLC=NCOUNT(J)
              ELSE
                ZINT2=ZINT1
                ZT=ZT+CLPD(J)
              ENDIF
            ENDIF
            AX(1)=AX(2)
            EX=CLPD(J)*ZMFPI
            IF (EX.LE.1.D-10) THEN
              EXPM=1.
C             AX(1)=AX(1)
            ELSEIF (EX.GT.1.D2) THEN
              EXPM=0.D0
              AX(1)=AX(1)/EX
            ELSE
              EXPM=EXP(-EX)
              AX(1)=AX(1)*(1.-EXPM)/EX
            ENDIF
            ZTS=ZTS+CLPD(J)
            IF (NLPOL) NPCELC=NCOUNP(J)
            IF (NLTOR) NTCELC=NCOUNT(J)
            CLPD(J)=CLPD(J)*AX(1)
            AX(2)=AX(2)*EXPM
C  COND. EXP.EST: STOP BECAUSE OF WMINC-CRITERION
            IF (AX(2).LE.WMINC_LOCAL) THEN
C    RESTORE POINT OF COLLISION ?
              IF (JCOL.NE.0) GOTO 213
C    NO COLLISION YET; CONTINUE LOOP 212
              AX(1)=1.
              AX(2)=1.
            ENDIF
          ENDIF
212     CONTINUE
C
213     CONTINUE
        NCOU=JJ
      ENDIF
C
C  CHECK FOR EVENT
C
      IF (NLPR) THEN
C  CHECK FOR 1.ST COLLISION ALONG TRACK
        IF (ICOL.EQ.0.AND.ZINT1.GE.ZLOG) GOTO 505
C  STOP TRACK BECAUSE OF WMINC-CRITERION?
        IF (NCOU.LT.NCOUS) THEN
          IFLAG=2
          IF (IUPDTE.GE.1) THEN
            IF (ITYP.EQ.1) CALL UPDATM (XSTOR2,XSTORV2,IFLAG)
!pb            IF (ITYP.EQ.1) CALL UPDATM_V (XSTOR2,XSTORV2,IFLAG)
            IF (ITYP.EQ.2) CALL UPDMOL (XSTOR2,XSTORV2,IFLAG)
!pb            IF (ITYP.EQ.2) CALL UPDMOL_V (XSTOR2,XSTORV2,IFLAG)
            IF (ITYP.EQ.0) CALL UPDPHOT(XSTOR2,XSTORV2,IFLAG)
!pb            IF (ITYP.EQ.0) CALL UPDPHOT_V(XSTOR2,XSTORV2,IFLAG)
          ENDIF
          ZT=ZTS
          GOTO 216
        ENDIF
C  STOP TRACK BECAUSE OF COLLISION
      ELSEIF (ZINT1.GE.ZLOG) THEN
        GO TO 220
      ENDIF
C
215   CONTINUE
C
      ZINT2=ZINT1
      ZT=ZTST
C
C  UPDATE CONTRIBUTION TO VOLUME AVERAGED ESTIMATORS
C
      IF (IUPDTE.GE.1) THEN
        IF (ITYP.EQ.1) CALL UPDATM (XSTOR2,XSTORV2,IFLAG)
!pb        IF (ITYP.EQ.1) CALL UPDATM_V (XSTOR2,XSTORV2,IFLAG)
        IF (ITYP.EQ.2) CALL UPDMOL (XSTOR2,XSTORV2,IFLAG)
!pb        IF (ITYP.EQ.2) CALL UPDMOL_V (XSTOR2,XSTORV2,IFLAG)
        IF (ITYP.EQ.0) CALL UPDPHOT(XSTOR2,XSTORV2,IFLAG)
!pb        IF (ITYP.EQ.0) CALL UPDPHOT_V(XSTOR2,XSTORV2,IFLAG)
      ENDIF
C
C  STOP TRACK ?
C
      IF (ISRFCL.EQ.1) CALL ADDCOL (XLI,YLI,ZLI,SG,*104,*380)
      IF (ISRFCL.EQ.2) CALL TIMCOL (AX(2),         *104,*800)
      IF (ISRFCL.EQ.3) CALL TORCOL (               *104)
C
C  NO, CONTINUE TRACK
C
C  NEXT CELL - CHECK FOR ESCAPE OR NON DEFAULT ACTING STANDARD SURFACE
C
      IF (LEVGEO.LE.3) THEN
C
        ISTS=INMP1I(MRSURF,IPCELL,ITCELL)
        IF (NLRAD.AND.ISTS.NE.0) THEN
          SG=ISIGN(1,NINCX)
          NLSRFX=.TRUE.
          MSURFG=NPCELL+(NTCELL-1)*NP2T3
          IF (ILIIN(ISTS) .NE. 0) CALL STDCOL (ISTS,1,SG,*104,*380)
        ENDIF
        ISTS=INMP2I(IRCELL,MPSURF,ITCELL)
        IF (NLPOL.AND.ISTS.NE.0) THEN
          SG=ISIGN(1,NINCY)
          NLSRFY=.TRUE.
          MSURFG=NRCELL+(NTCELL-1)*NR1P2
          IF (ILIIN(ISTS) .NE. 0) CALL STDCOL (ISTS,2,SG,*104,*380)
        ENDIF
        ISTS=INMP3I(IRCELL,IPCELL,MTSURF)
        IF (NLTOR.AND.ISTS.NE.0) THEN
          SG=ISIGN(1,NINCZ)
          NLSRFZ=.TRUE.
          MSURFG=NRCELL+(NPCELL-1)*NR1P2
          IF (ILIIN(ISTS) .NE. 0) CALL STDCOL (ISTS,3,SG,*104,*380)
        ENDIF
C
      ELSEIF (LEVGEO.EQ.4) THEN
        ISTS=ABS(INMTI(IPOLGN,MRSURF))
        IF (NLRAD.AND.ISTS.NE.0) THEN
          SG=ISIGN(1,NINCX)
          NLSRFX=.TRUE.
          MSURFG=INSPAT(IPOLGN,MRSURF)
          IF (ILIIN(ISTS) .NE. 0) CALL STDCOL (ISTS,1,SG,*104,*380)
        ENDIF
C
      ELSEIF (LEVGEO.EQ.5) THEN
        ISTS=ABS(INMTIT(IPOLGN,MRSURF))
        IF (NLRAD.AND.ISTS.NE.0) THEN
          SG=ISIGN(1,NINCX)
          IF (NRCELL == 0) SG = -1.D0
          NLSRFX=.TRUE.
C         MSURFG= ??
          IF (ILIIN(ISTS) .NE. 0) CALL STDCOL (ISTS,1,SG,*104,*380)
        ENDIF
C
      ELSEIF (LEVGEO.EQ.6) THEN
        ISTS=INMP1I(MRSURF,IPCELL,ITCELL)
        IF (NLRAD.AND.ISTS.NE.0) THEN
          SG=ISIGN(1,NINCX)
          NLSRFX=.TRUE.
          CALL STDCOL (ISTS,1,SG,*104,*380)
        ENDIF
      ENDIF
C
      NRCELL=NRCELL+NINCX
      IF (NRCELL.GT.NR1STM) GOTO 990
      IF (NACELL.LT.1.AND.NRCELL.LT.1) GOTO 990
C
C  PARTICLE ON SURFACE MRSURF BELONGING TO 1ST (RADIAL OR X-) GRID
C
C  IF NOT, THEN IT MUST, FOR SOME REASON,
C  HAVE BEEN STOPPED IN THE MIDDLE OF A TRACK.
      IF (MRSURF.EQ.0) THEN
C  ADVANCE IN SAME CELL, AND CONTINUE TRACK
        X0=X0+VELX*ZT
        Y0=Y0+VELY*ZT
        Z0=Z0+VELZ*ZT
        TIME=TIME+ZT/VEL
        IPOLG=IPOLGN
        MASURF=0
        MSURF=0
        IF (NLTRA) THEN
          PHI=MOD(PHI-ATAN2(Z01,X01)+ATAN2(Z0,(RMTOR+X0)),PI2A)
          X01=X0+RMTOR
        ENDIF
        X00=X0
        Y00=Y0
        Z00=Z0
        Z01=Z0
        GOTO 104
      ENDIF
C
C  CHECK IF WE HAVE ENCOUNTERED A SPLITTING ZONE
C  SPLITTING AND RR NOT READY FOR LEVGEO.GE.4
      IF (LEVGEO.LE.3) THEN
        IF (NLSPLT(MRSURF).AND.NLEVEL.LT.MAXLEV.AND.ICOL.EQ.0) THEN
          CALL SPLTRR(1,MRSURF,NINCX,*210,*700)
        ENDIF
      ENDIF
C
216   CONTINUE
C
C  SWITCH OFF CONDITIONAL EXP. ESTIMATOR ?
      IF (NLPR.AND.AX(2).LT.WMINC_LOCAL) THEN
        IF (NLTRC) THEN
          X0S=X0+VELX*ZT
          Y0S=Y0+VELY*ZT
          Z0S=Z0+VELZ*ZT
          TIMES=TIME+ZT/VEL
          IF (NLTRA)
     .      PHIS=MOD(PHI-ATAN2(Z01,X01)+ATAN2(Z0S,(X0S+RMTOR)),PI2A)
          PSAVE=PHI
          PHI=PHIS
          TSAVE=TIME
          TIME=TIMES
          CALL CHCTRC(X0S,Y0S,Z0S,16,8)
          PHI=PSAVE
          TIME=TSAVE
        ENDIF
        IF (ICOL.EQ.1) GOTO 512
C  NO COLLISION YET; RESTART AGAIN WITH COND. EXP. ESTIMATOR
C                    IN NEW CELL
        AX(1)=1.
        AX(2)=1.
        JCOL=0
      ENDIF
C  EITHER: GOTO 101, NEW RANDOM NUMBER, ZINT1=0, X=XS
C  OR    : GOTO 210, CONTINUE TRACK, 
C  THIS IS THE SAME, BECAUSE OF EXPONENTIAL DISTRIBUTION OF PATH LENGTHS
      GOTO 210
C
C  POINT OF COLLISION  220 -- 240
C
220   CONTINUE
      DIST=CLPD(NCOU)
      CLPD(NCOU)=(ZLOG-ZINT2)*ZMFP
      ZTC=ZT+CLPD(NCOU)
      IFLAG=4
      IF (IUPDTE.GE.1) THEN
        IF (ITYP.EQ.1) CALL UPDATM (XSTOR2,XSTORV2,IFLAG)
!pb        IF (ITYP.EQ.1) CALL UPDATM_V (XSTOR2,XSTORV2,IFLAG)
        IF (ITYP.EQ.2) CALL UPDMOL (XSTOR2,XSTORV2,IFLAG)
!pb        IF (ITYP.EQ.2) CALL UPDMOL_V (XSTOR2,XSTORV2,IFLAG)
        IF (ITYP.EQ.0) CALL UPDPHOT(XSTOR2,XSTORV2,IFLAG)
!pb        IF (ITYP.EQ.0) CALL UPDPHOT_V(XSTOR2,XSTORV2,IFLAG)
      ENDIF
      X0=X0+VELX*ZTC
      Y0=Y0+VELY*ZTC
      Z0=Z0+VELZ*ZTC
      TIME=TIME+ZTC/VEL
      IF (LEVGEO.LE.3.AND.NLPOL) THEN
        IPOLG=NPCELL
      ELSEIF (NLPLG) THEN
        IPOLG=LEARC2(X0,Y0,NRCELL,NPANU,'FOLNEUT 2    ')
      ELSEIF (NLFEM) THEN
        IPOLG=0
      ELSEIF (NLTET) THEN
        IPOLG=0
      ENDIF
      NLSRFX=.FALSE.
      NLSRFY=.FALSE.
      NLSRFZ=.FALSE.
      NLSRFA=.FALSE.
      MRSURF=0
      MPSURF=0
      MTSURF=0
      MASURF=0
      MSURF=0
      IF (NLTRA) PHI=MOD(PHI-ATAN2(Z01,X01)+ATAN2(Z0,(RMTOR+X0)),PI2A)
C
230   CONTINUE
C
C  PRE COLLISION ESTIMATOR
C
      IF (NCLVI.GT.0) THEN
        WS=WEIGHT/SIGTOT
        CALL UPCUSR(WS,1)
      ENDIF
C
C  TEST FOR CORRECT CELL NUMBER AT COLLISION POINT
C  KILL PARTICLE, IF TOO LARGE ROUND OFF ERRORS DURING
C  PARTICLE TRACING
C
      IF (NLTEST) CALL CLLTST(*997)
C
C  SAMPLE FROM COLLISION KERNEL FOR NEUTRAL PARTICLES
C  AT PRESENT: NO SUPPRESSION OF ABSORBTION AT IONIZATION
C  FIND NEW WEIGHT, SPECIES INDEX, VELOCITY AND RETURN
C
      IF (ITYP.EQ.1) THEN
        CALL COLATM(CFLAG,COLTYP,DIST)
      ELSEIF (ITYP.EQ.2) THEN
        CALL COLMOL(CFLAG,COLTYP,DIST)
      ELSEIF (ITYP.EQ.0) THEN
        CALL COLPHOT(CFLAG,COLTYP,DIST)
      ENDIF
      ISPZ=ISPEZ(ITYP,IPHOT,IATM,IMOL,IION,IPLS)
C
C  POST COLLISION ESTIMATOR
C
      IF (NCLVI.GT.0) THEN
        WS=WEIGHT/SIGTOT
        CALL UPCUSR(WS,2)
      ENDIF
C
      IF (COLTYP.EQ.2.) GOTO 700
C
      GOTO 100
C
C  SIMULATION OF COLLISION EVENT FINISHED
C
C
C  ..............................................................
C  .
C  .  INCIDENT ONTO SURFACE
C  ..............................................................
C
380   CONTINUE
C
C
      PR=AX(2)
      IF (ILIIN(MSURF).LE.-2) PR=PR*SG
C
C  UPDATE EFFLUXES ONTO SURFACE AND REFLECT PARTICLE
C
      CALL ESCAPE(PR,SG,*100,*104,*512)
C
C   GOTO 100: START NEW TRACK OF NEUTRAL PARTICLE
C   GOTO 104: CONTINUE THIS TRACK, TRANSPARENT SURFACE IS CROSSED
C   GOTO 512: RESTORE PREVIOUS COLLISION DATA,
C             CONDITIONAL EXPECTATION ESTIMATOR WAS USED
C
      RETURN
C
C
C  ...................................................
C  .                                                 .
C  .  CONDITIONAL EXPECTATION ESTIMATOR  500 -- 599  .
C  ...................................................
C
C
C
C
C   SAVE DATA OF FIRST COLLISION ALONG CONDITIONAL TRACK
505   CONTINUE
      ZMFP=1./XSTORV2(NSTORV,JCOL)
      NPCLLC=1
      NTCLLC=1
      IF (NLPOL) NPCLLC=NPCOLC
      IF (NLTOR) NTCLLC=NTCOLC
      ZDT1C=(ZLOG-ZINT2)*ZMFP
      ZTC=ZT+ZDT1C
      X0C=X0+VELX*ZTC
      Y0C=Y0+VELY*ZTC
      Z0C=Z0+VELZ*ZTC
      TIMEC=TIME+ZTC/VEL
      NRCLLC=NRCELL
      NACLLC=NACELL
      NBLCKC=NBLOCK
      NCELLC=NCELL
      ITIMEC=ITIME
      IFPTHC=IFPATH
      IUPDTC=IUPDTE
      IPERIDC=IPERID
      VELXC=VELX
      VELYC=VELY
      VELZC=VELZ
      VELC=VEL
      E0C=E0
      GENRC=XGENER
      WEIGHC=WEIGHT
      IF (NLTRA)
     .  PHIC=MOD(PHI-ATAN2(Z01,X01)+ATAN2(Z0C,(X0C+RMTOR)),PI2A)
      XSTORC(1:mstor1,1:mstor2) = XSTOR2(1:mstor1,1:mstor2,JCOL)
      XSTORVC(1:nstorv) = XSTORV2(1:nstorv,JCOL)
      IF (NLTRC) THEN
        PSAVE=PHI
        TSAVE=TIME
        NPSAVE=NPCELL
        NTSAVE=NTCELL
        IF (NLTRA) PHI=PHIC
        TIME=TIMEC
        NPCELL=NPCLLC
        NTCELL=NTCLLC
        CALL CHCTRC(X0C,Y0C,Z0C,16,13)
        PHI=PSAVE
        TIME=TSAVE
        NPCELL=NPSAVE
        NTCELL=NTSAVE
      ENDIF
      ICOL=1
      IFLAG=5
C  TRACK COMPLETED ?
      IF (NCOU.GE.NCOUS) GOTO 215
C
C  TRACK NOT COMPLETED BECAUSE OF WMINC-CRITERION
C  UPDATE CONTRIBUTION TO VOLUME AVERAGED ESTIMATORS
C
      IF (IUPDTE.GE.1) THEN
        IF (ITYP.EQ.1) CALL UPDATM (XSTOR2,XSTORV2,IFLAG)
!pb        IF (ITYP.EQ.1) CALL UPDATM_V (XSTOR2,XSTORV2,IFLAG)
        IF (ITYP.EQ.2) CALL UPDMOL (XSTOR2,XSTORV2,IFLAG)
!pb        IF (ITYP.EQ.2) CALL UPDMOL_V (XSTOR2,XSTORV2,IFLAG)
        IF (ITYP.EQ.0) CALL UPDPHOT(XSTOR2,XSTORV2,IFLAG)
!pb        IF (ITYP.EQ.0) CALL UPDPHOT_V(XSTOR2,XSTORV2,IFLAG)
      ENDIF
      GOTO 216
C
C   RESTORE PRE COLLISION DATA AND SAMPLE FROM COLLISION KERNEL
512   X0=X0C
      Y0=Y0C
      Z0=Z0C
      TIME=TIMEC
      NLSRFX=.FALSE.
      NLSRFY=.FALSE.
      NLSRFZ=.FALSE.
      MSURF=0
      MRSURF=0
      MPSURF=0
      MTSURF=0
      MASURF=0
      NRCELL=NRCLLC
      NPCELL=NPCLLC
      NTCELL=NTCLLC
      NACELL=NACLLC
      NBLOCK=NBLCKC
      NBLCKA=NSTRD*(NBLOCK-1)+NACELL
      NCELL=NCELLC
      ITIME=ITIMEC
      IFPATH=IFPTHC
      IUPDTE=IUPDTC
      IPERID=IPERIDC
      VELX=VELXC
      VELY=VELYC
      VELZ=VELZC
      VEL=VELC
      E0=E0C
      XGENER=GENRC
      WEIGHT=WEIGHC
      IF (LEVGEO.LE.3.AND.NLPOL) THEN
        IPOLG=NPCELL
      ELSEIF (NLPLG) THEN
        IPOLG=LEARC2(X0,Y0,NRCELL,NPANU,'FOLNEUT 3    ')
      ELSEIF (NLFEM) THEN
        IPOLG=0
      ELSEIF (NLTET) THEN
        IPOLG=0
      ENDIF
      IF (NLTRA) PHI=PHIC
      XSTOR(1:mstor1,1:mstor2) = XSTORC(1:mstor1,1:mstor2)
      XSTORV(1:nstorv) = XSTORVC(1:nstorv)
      IF (NLTRC) CALL CHCTRC(X0,Y0,Z0,0,14)
      ICOL=0
      LGPART=.TRUE.
      GOTO 230
C
700   CONTINUE
C  REGULAR STOP IN SUBR. FOLNEUT, CONTINUE IN SUBR. MCARLO
      RETURN
C
800   CONTINUE
C  REGULAR STOP IN SUBR. FOLNEUT, STOP HISTORY, CENSUS ARRAY FULL
      IF (ICOL.EQ.1.AND..NOT.LGLAST) GOTO 512
      LGPART=.FALSE.
      WEIGHT=0.
      RETURN
C
990   CONTINUE
      CALL LEER(1)
      CALL MASAGE ('ERROR IN FOLNEUT, ZDT1 OR NRCELL OUT OF RANGE  ')
      CALL MASAGE ('PARTICLE IS KILLED                             ')
      WRITE (6,*) 'NPANU,NRCELL,ZDT1,ZTST,TL,TS '
      WRITE (6,*) NPANU,NRCELL,ZDT1,ZTST,TL,TS
      GOTO 995
C
992   CONTINUE
      CALL LEER(1)
      CALL MASAGE ('ERROR IN FOLNEUT, SURFACE CONFLICT             ')
      CALL MASR2  ('TL,TS           ',TL,TS)
      WRITE (6,*) 'NPANU ',NPANU
      ZT=TL
      GOTO 995
C
993   CALL MASAGE ('ERROR IN FOLNEUT, NO PARTICLE TRACING BUT     ')
      CALL MASAGE ('IFPATH.NE.1. PARTICLE IS KILLED               ')
      WRITE (6,*) 'ISPEZ ',ISPEZ(ITYP,IPHOT,IATM,IMOL,IION,IPLS)
      GOTO 999
C
995   WRITE (6,*) 'MRSURF,MPSURF,MTSURF,MASURF ',
     .             MRSURF,MPSURF,MTSURF,MASURF
      X0ERR=X0+ZT*VELX
      Y0ERR=Y0+ZT*VELY
      Z0ERR=Z0+ZT*VELZ
      IF (NLTRC) THEN
        CALL CHCTRC(X0ERR,Y0ERR,Z0ERR,16,18)
      ELSE
        WRITE (6,*) 'X0,Y0,Z0,ZT ',X0,Y0,Z0,ZT
        WRITE (6,*) 'VELX,VELY,VELZ ',VELX,VELY,VELZ
        WRITE (6,*) 'X0ERR,Y0ERR,Z0ERR ',X0ERR,Y0ERR,Z0ERR
      ENDIF
      GOTO 999
997   CALL MASAGE ('ERROR IN FOLNEUT, DETECTED IN SUBR. CLLTST    ')
      CALL MASAGE ('PARTICLE IS KILLED                            ')
C   DETAILED PRINTOUT ALREADY DONE FROM SUBR. CLLTST
      IF (NLTRC) CALL CHCTRC(X0,Y0,Z0,16,18)
      GOTO 999
C
998   WRITE (6,*) 'ERROR IN FOLNEUT, SPECIES INDEX OUT OF RANGE '
      WRITE (6,*) ' NPANU,ITYP,IATM,IMOL,IPHOT ',NPANU,ITYP,IATM,IMOL,
     .                                           IPHOT
      GOTO 999
C
999   CONTINUE
      PTRASH(ISTRA)=PTRASH(ISTRA)-WEIGHT
      ETRASH(ISTRA)=ETRASH(ISTRA)-WEIGHT*E0
      LGPART=.FALSE.
      CALL LEER(1)
      RETURN
      END
      SUBROUTINE LOCATE
c  old option: 
c              sorind=irrc for volume sources
c  new option (additionally):
c              sorind=0 for volume sources
c              then: automatically detect all relevant irrc and 
c                    sample, if more than one:
c                    1.) ipls (must be specified), and icell
c                    2.) find irrc (random) amongst tabrc1
c                    3.) find ityp, iatm,....
c
C
C  LOCATE MONTE-CARLO PARTICLE
C
C  CALLED AT ENTRY LOCAT0 AT INITIALISATION FOR EACH STRATUM ISTRA
C     PURPOSE: PRECOMPUTING SOME QUANTITIES TO SPEED UP RANDOM SAMPLING
C              DURING PARTICLE TRACING
C
C  CALLED AT ENTRY LOCAT1 FOR EACH NEW LAUNCHED MONTE CARLO TRAJECTORY
C  FROM PARTICLE LOOP IN SUBR. MCARLO
C     PURPOSE: SET INITIAL TEST FLIGHT STATE, DEFINED BY THE VARIABLES
C              NO. 1 ... TO NPARTC+MPARTC OF COMMON BLOCK "COMPRT"
C              I.E.,
C                  X0... TO IUPDTE
C  CALLED PROGRAMS: SAMPNT (POINT SOURCE)
C                   SAMLNE (LINE SOURCE)  (NOT READY)
C                   SAMSRF (SURFACE SOURCE)
C                   SAMVOL (VOLUME SOURCE)
C  LOCAL VARIABLES: TEWL,TIWL(IPLS),DIWL(IPLS),
C                   VXWL(IPLS),VYWL(IPLS),VZWL(IPLS):
C
C                   THESE ARE BACKGROUND PARAMETERS USED FOR SAMPLING
C                   IN VELOCITY SPACE, IN CASE NLPLS, I.E., IF THE
C                   TEST FLIGHT STARTS AS BACKGROUND PARTICLE, THEN
C                   "RECOMBINING" INTO A TEST PARTICLE
C                   EG. AT A SURFACE (NLSRF) OR IN THE VOLUME (NLVOL)
C                   IN THE OPPOSITE CASE (.NOT.NLPLS) PARAMETERS
C                   FOR THE SAMPLING DISTRIBUTION ARE SPECIFIED
C                   BY INPUT PARAMETERS IN BLOCK 7.,EG. SORENE,SORENI
C                   SORVDX,SORVDY,SORVDZ AND APPROPRIATE NEMOD2 AND
C                   NEMOD3 FLAGS
C
C                   WEISPZ(ISPZ):
C
C                   ANALOG SPECIES SAMPLING DISTRIBUTION
C                   SPECIES SAMPLING MAY ALSO BE DONE BY BIASED SOURCE
C                   SAMPLING, USING THE DATM,DMOL,DION OR DPLS DISTRIB.
C
      USE PRECISION
      USE PARMMOD
      USE COMUSR
      USE CESTIM
      USE CCONA
      USE CLOGAU
      USE CUPD
      USE CPOLYG
      USE CGRID
      USE CSPEZ
      USE CZT1
      USE CTRCEI
      USE CGEOM
      USE CTETRA
      USE COMPRT
      USE COMNNL
      USE COMSOU
      USE COMSPL
      USE CLGIN
      USE COUTAU
      USE COMXS
      USE CTRIG
      USE CRAND
      USE PHOTON

      IMPLICIT NONE

      INTEGER, INTENT(IN) :: IPANU
      REAL(DP) :: DUMT(3),DUMV(3)
      REAL(DP), ALLOCATABLE, SAVE :: WMM(:), WEISPZ(:), X1LINE(:,:),
     .                               X2LINE(:,:)
      REAL(DP) :: VXWL(NPLS), VYWL(NPLS), VZWL(NPLS), VPWL(NPLS),
     .          TIWL(NPLS), DIWL(NPLS), EFWL(NPLS), CUMDIS(0:NREC)
      REAL(DP) :: YIELD1, YIELD2, FMASS, FCHAR, VELXS, VELYS, FTABRC1,
     .          VELZS, E0S, WEIGHS, VELS, FLX, VPARZ, VPAR, VTERM,
     .          VPERP, VPARX, VPARY, EMAXW, ESHET, SHEATH, GAMMA, CUR,
     .          VYSPTP, VZSPTP, ESPTC, ESPTP, VSPTP, VXSPTP, VSPTC, SG,
     .          VXSPTC, VYSPTC, VZSPTC, A, ZV, TEWL, SUM1, ZEP1,
     .          EMAX, VWD, VXWD, VYWD, VZWD, CS, VELQ, VO, SUMM,
     .          VXO, VYO, VZO, DAT, RSQDV, DML, FR, DIO, DPL, TIWD, 
     .          TEWD, DPH, E00, DE, HW, SHIFT, DVDW, FAC, dwde, prmax,
     .          raw, res
      REAL(DP) :: VEL_B, VELX_B, VELY_B, VELZ_B, VN, xl, xr, xm, yl,
     .            yr, ym, prmin, sig, zmfp, ean, een, ye,
     .            fpathph, flxfc, zmfp_cut, zmfp_e0, zmfp_e00,
     .            fac_e0, fac_e00
      real(sp), allocatable :: eplot(:), y1plot(:), y2plot(:)
      real(dp) :: cflag(7,3)
      REAL(DP), SAVE :: SNORM 
      REAL(DP), EXTERNAL :: RANF_EIRENE
      INTEGER, ALLOCATABLE, SAVE :: IICSOR(:), ITISOR(:),
     .                              IUPSOR(:), IFPSOR(:)
      INTEGER, SAVE :: NEMOD1, NEMOD2, NEMOD3, NEMDSP
      INTEGER :: ISSPTP, ISSPTC, ISTS, IP, ISPZS, IRC, IIRC, IRRC, 
     .           I2, IM, J, I1, IMP, NPANUO, ILINE, ISURF, ITRSF,
     .           IUPATH, IPOINT, ISOUR, ISRFS, I, ISTEP,
     .           ISECT, IDUMM, ICOS, NFLAG, NCELLT,
     .           IPLV, IDUM, IO, NO, IVOLM, ISOR, INDTEC, IPL, IPP,
     .           IPLTI, IROT, IL, IGND, ICELL, KK, IR, ILOOP, ISPC, nen
      INTEGER, SAVE :: NLIMSQ
      INTEGER, EXTERNAL :: IDEZ
      LOGICAL :: NLSPUT, NLTST, NL_add_Doppler
      integer, save :: ifrstpb=0
C
      ENTRY LOCAT0
C
C  PREPARE DATA FOR SAMPLING SUBSTRATA FOR STRATUM ISTRA: 1--10
C
      IF (.NOT.ALLOCATED(WMM)) THEN
        ALLOCATE (WMM(NSRFS))
        ALLOCATE (WEISPZ(NSPZ))
        ALLOCATE (IICSOR(NSRFS)) 
        ALLOCATE (ITISOR(NSRFS))
        ALLOCATE (IUPSOR(NSRFS)) 
        ALLOCATE (IFPSOR(NSRFS))
      END IF

      DO 1 ISPZ=1,NSPZ
        WEISPZ(ISPZ)=-1.
1     CONTINUE
C
      SUMM=0.
      DO 2 ISRFS=1,NSRFSI(ISTRA)
2       SUMM=SUMM+SORWGT(ISRFS,ISTRA)
      IF (SUMM.LE.0.D0) THEN
        WRITE (6,*) 'NO SOURCE MODEL FOR STRATUM NO ISTRA=',ISTRA
        WRITE (6,*) 'BECAUSE THE SUM OF THE FLUXES'
        WRITE (6,*) 'FROM THE SUBSTRATA DEFINED BY'
        WRITE (6,*) 'SORWGT(SUBSTRATUM,STRATUM) IS .LE. ZERO'
        WRITE (6,*) 'THIS STRATUM IS TURNED OF !!'
        NPTS(ISTRA)=0
        RETURN
      ENDIF
      SUM1=0.
      NLIMSQ=NSRFSI(ISTRA)
      DO 4 ISOUR=1,NSRFSI(ISTRA)
        SUM1=SUM1+SORWGT(ISOUR,ISTRA)
        WMM(ISOUR)=SUM1/SUMM
4     CONTINUE
C
C  PREPARE SOME DATA FOR ENERGY SAMPLING AND HISTORY INITIALIZATION
C
      NEMOD1=IDEZ(NEMODS(ISTRA),1,4)
      NEMOD2=IDEZ(NEMODS(ISTRA),2,4)
      NEMOD3=IDEZ(NEMODS(ISTRA),3,4)
      NEMDSP=IDEZ(NEMODS(ISTRA),4,4)
C
      DO 5 ISRFS=1,NSRFSI(ISTRA)
        IF (SORIFL(ISRFS,ISTRA).NE.0) THEN
          IDUMM=SORIFL(ISRFS,ISTRA)
          ITISOR(ISRFS)=IDEZ(IDUMM,1,4)
          IF (ITISOR(ISRFS).EQ.2) ITISOR(ISRFS)=-1
          IFPSOR(ISRFS)=IDEZ(IDUMM,2,4)
          IF (IFPSOR(ISRFS).EQ.2) IFPSOR(ISRFS)=-1
          IUPSOR(ISRFS)=IDEZ(IDUMM,3,4)
          IF (IUPSOR(ISRFS).EQ.2) IUPSOR(ISRFS)=-1
          IICSOR(ISRFS)=IDEZ(IDUMM,4,4)
          IF (IICSOR(ISRFS).EQ.2) IICSOR(ISRFS)=-1
        ELSE
          ITISOR(ISRFS)=0
          IFPSOR(ISRFS)=0
          IUPSOR(ISRFS)=0
          IICSOR(ISRFS)=0
        ENDIF
5     CONTINUE
C
      SNORM=SQRT(SORCTX(ISTRA)**2+SORCTY(ISTRA)**2+SORCTZ(ISTRA)**2)
      IF (SNORM.GT.EPS10) THEN
        SORCTX(ISTRA)=SORCTX(ISTRA)/SNORM
        SORCTY(ISTRA)=SORCTY(ISTRA)/SNORM
        SORCTZ(ISTRA)=SORCTZ(ISTRA)/SNORM
      ENDIF
C
      IF (NLVOL(ISTRA).AND.NLPLS(ISTRA).AND.NEMOD1.EQ.1) THEN
        WRITE (6,*) 'WARNING: NEMOD1=1: NEW MEANING: '
        WRITE (6,*) '                   MONOENERGETIC SOURCE'
      ENDIF
      IF (TRCSOU) THEN
        WRITE (6,*) 'NEMOD1,NEMOD2,NEMOD3 ',NEMOD1,NEMOD2,NEMOD3
        WRITE (6,*) 'SNORM  ',SNORM
        WRITE (6,*) 'ISRFS,IICSOR(I),ITISOR(I),IFPSOR(I),IUPSOR(I)'
        DO 6 I=1,NSRFSI(ISTRA)
          WRITE (6,*) I,IICSOR(I),ITISOR(I),IFPSOR(I),IUPSOR(I)
6       CONTINUE
      ENDIF
C
C  PREPARE SOME DATA FOR SPECIES SAMPLING
C

      IF (NLVOL(ISTRA) .AND. (NEMOD1 == 9) .AND.
     .    ANY(SORIND(1:NSRFSI(ISTRA),ISTRA) > 0)) THEN
        
        IF (ALLOCATED(X1LINE)) THEN
          IF (SIZE(X1LINE) /= NSRFSI(ISTRA)) THEN
            DEALLOCATE(X1LINE)
            DEALLOCATE(X2LINE)
            ALLOCATE(X1LINE(NSRFSI(ISTRA),NRAD))
            ALLOCATE(X2LINE(NSRFSI(ISTRA),NRAD))
          END IF
        ELSE
          ALLOCATE(X1LINE(NSRFSI(ISTRA),NRAD))
          ALLOCATE(X2LINE(NSRFSI(ISTRA),NRAD))
        END IF
        
        X1LINE = -1._DP
        X2LINE = 0._DP
      END IF

      RETURN
C
      ENTRY LOCAT1(IPANU)
C
C  TENTATIVELY ASSUME: A NEXT GENERATION PARTICLE WILL BE BORN
      LGPART=.TRUE.
C
C   SET SOME DEFAULT DATA TO INITIALIZE THIS HISTORY
C
      SCOS_SAVE=0._DP
      WEIGHT=1.0
      IATM=0
      IMOL=0
      IION=0
      IPLS=0
      IPHOT=0
C
      ITIME=1
      IFPATH=1
      IUPDTE=1
      IC_ION=0
      IC_NEUT=0
C
      NCELL=0
      NBLOCK=1
      NACELL=0
      NBLCKA=0
      NRCELL=0
      NPCELL=1
      NTCELL=1
      IPOLG=1
      IPOLGN=1
      IPERID=1
      ICOL=0
C
C  DETAILED PRINTOUT OF TRAJECTORY FOR THIS PARTICLE?
C
      NLTRC=NPANU.GE.I1TRC.AND.NPANU.LE.I2TRC
C
C  =====================================================
C  =SAMPLE STARTING POINT FOR  ATOMS, MOLECULES OR IONS=
C  =====================================================
C
      LGTIME=NPRNLI.GT.0
C  DISTANCE TO "TIME-SURFACE"
      IF (.NOT.LGTIME) THEN
        DTIMVI=1.D30
      ELSEIF (LGTIME) THEN
        DTIMVI=TIME0+DTIMV
      ENDIF
C
C   SOURCE DUE TO TIME DEP. MODE, READ PARTICLES FROM CENSUS: RPARTC,IPARTC
      IF (NLCNS(ISTRA).AND.ISTRA.EQ.NSTRAI) THEN
C   LABELS  11---20
C   AT PRESENT: ONLY ONE SUBSTRATUM
        ISECT=1
        NLSTOR=IPANU.LE.ISTOR(ISECT,ISTRA)
C
        IF (NLMOVIE) THEN
          IMP=IPANU
        ELSE
C   RANDOM SEARCH IN RPARTW ARRAY
          A=RANF_EIRENE()*RPARTW(IPRNL)
C   BINARY SEARCH
          I1=0
          I2=IPRNL
9         IM=(I1+I2)/2
          IF(A.LT.RPARTW(IM)) THEN
            I2=IM
            GOTO 9
          ELSEIF(A.GT.RPARTW(IM+1)) THEN
            I1=IM
            GOTO 9
          ENDIF
          IMP=IM+1
C  PARTICLE NO. IMP FROM CENSUS ARRAY IDENTIFIED
        ENDIF
C
C  LAUNCH PARTICLE NO. IMP FROM CENSUS ARRAY
C
        DO 11 J=1,NPARTT
          RPSTT(J)=RPARTC(IMP,J)
11      CONTINUE
        NPANUO=NPANU
        DO 12 J=1,MPARTT
          IPSTT(J)=IPARTC(IMP,J)
12      CONTINUE
        ITYP=ISPEZI(ISPZ,-1)
        IPHOT=ISPEZI(ISPZ,0)
        IATM=ISPEZI(ISPZ,1)
        IMOL=ISPEZI(ISPZ,2)
        IION=ISPEZI(ISPZ,3)
        IPLS=ISPEZI(ISPZ,4)
        CALL NCELLN(NCELL,NRCELL,NPCELL,NTCELL,NACELL,NBLOCK,
     .              NR1ST,NP2ND,NT3RD,NBMLT,NLRAD,NLPOL,NLTOR)
        NBLCKA=NSTRD*(NBLOCK-1)+NACELL
        NPANU=NPANUO
        NLSRFX=.FALSE.
        NLSRFY=.FALSE.
        NLSRFZ=.FALSE.
        MSURF=NLIM+NSTS
C
        WEIGHT=1.D0
C
        IF (ITYP.EQ.1) THEN
          WTOTA(IATM,ISTRA)=WTOTA(IATM,ISTRA)+WEIGHT
          ETOTA(ISTRA)=ETOTA(ISTRA)+E0*WEIGHT
          LOGATM(IATM,ISTRA)=.TRUE.
        ELSEIF (ITYP.EQ.2) THEN
          WTOTM(IMOL,ISTRA)=WTOTM(IMOL,ISTRA)+WEIGHT
          ETOTM(ISTRA)=ETOTM(ISTRA)+E0*WEIGHT
          LOGMOL(IMOL,ISTRA)=.TRUE.
        ELSEIF (ITYP.EQ.3) THEN
          WTOTI(IION,ISTRA)=WTOTI(IION,ISTRA)+WEIGHT
          ETOTI(ISTRA)=ETOTI(ISTRA)+E0*WEIGHT
          LOGION(IION,ISTRA)=.TRUE.
        ELSEIF (ITYP.EQ.0) THEN
          WTOTPH(IPHOT,ISTRA)=WTOTPH(IPHOT,ISTRA)+WEIGHT
          ETOTPH(ISTRA)=ETOTPH(ISTRA)+E0*WEIGHT
          LOGPHOT(IPHOT,ISTRA)=.TRUE.
        ELSE
          WRITE (6,*) 'ERROR IN LOCATE, CALL EXIT '
          CALL EXIT_OWN(1)
        ENDIF
        IF (NLTRC) CALL CHCTRC(X0,Y0,Z0,0,1)
        IF (NLSTOR) CALL STORE(1)
C
        GOTO 5000
C
C  POINT SOURCE MODEL  21---30
C
      ELSEIF (NLPNT(ISTRA)) THEN
C
C   FIRSTLY FIND POINT NUMBER IPOINT
        IPOINT=1
        IF (NLIMSQ.GT.1) THEN
          ZV=RANF_EIRENE( )
          DO 21 IPOINT=1,NLIMSQ
            IF (ZV.LT.WMM(IPOINT)) GOTO 22
21        CONTINUE
22        CONTINUE
        ENDIF
        ISECT=IPOINT
        NLSTOR=IPANU.LE.ISTOR(ISECT,ISTRA)
C
C   NEXT FIND CO-ORDINATES AND CELL INDICES,
C   LOCAL BACKGROUND TEMPERATURES TIWL AND TEWL, AND
C   LOCAL PLASMA DRIFT VELOCITIES VXWL,VYWL,VZWL FOR EACH BULK
C   ION SPECIES IPLS=1,NPLSI
C
C   NLPT=POINT INDEX IN (NSRFS) SOURCE ARRAYS
        CALL SAMPNT (IPOINT,TIWL,TEWL,DIWL,VXWL,VYWL,VZWL,WEISPZ)
        IF (.NOT.LGPART) RETURN
C
        IF (ITISOR(IPOINT).NE.0) THEN
          ITIME=ITISOR(IPOINT)
        ENDIF
        IF (IFPSOR(IPOINT).NE.0) THEN
          IFPATH=IFPSOR(IPOINT)
        ENDIF
        IF (IUPSOR(IPOINT).NE.0) THEN
          IUPATH=IUPSOR(IPOINT)
        ENDIF
        MSURF=0
C
C   LINE SOURCE  31---50
C
      ELSEIF (NLLNE(ISTRA)) THEN
        ILINE=1
        ISECT=ILINE
        MSURF=0
        WRITE (6,*) 'LINE SOURCE OPTION STILL TO BE WRITTEN. EXIT'
        CALL EXIT_OWN(1)
C
C   SURFACE SOURCE MODEL  51---70
C
      ELSEIF (NLSRF(ISTRA)) THEN
C
C   FIRST FIND SOURCE-SURFACE NUMBER ISURF
        ISURF=1
        IF (NLIMSQ.GT.1) THEN
          ZV=RANF_EIRENE( )
          DO 51 ISURF=1,NLIMSQ
            IF (ZV.LT.WMM(ISURF)) GOTO 52
51        CONTINUE
52        CONTINUE
        ENDIF
        ISECT=ISURF
        NLSTOR=IPANU.LE.ISTOR(ISECT,ISTRA)
C
C   NEXT FIND POSITION ON THIS SOURCE SURFACE, AS WELL AS
C   CELL INDICES, LOCAL TEMPERATURES TIWL AND TEWL, AND
C   LOCAL PLASMA DRIFT VELOCITIES VXWL,VYWL,VZWL FOR EACH BULK
C   ION SPECIES IPLS=1,NPLSI
C
        CALL SAMSF1 (ISURF,TIWL,TEWL,DIWL,VXWL,VYWL,VZWL,EFWL,WEISPZ)
        IF (.NOT.LGPART) RETURN
C
C   MSURF: NUMBER OF NON-DEFAULT (OR ADDITIONAL) SURFACE
C   MSURF=0 MEANS: SOURCE NOT ON ANY KNOWN SURFACE.
C                  DEFAULT SURFACE INTERACTION MODEL
        MSURF=0
        IF (LEVGEO.EQ.4) THEN
          MSURF=ABS(INMTI(IPOLG,NRCELL))
        ELSEIF (LEVGEO.EQ.5) THEN
          MSURF=ABS(INMTIT(IPOLG,NRCELL))
!pb          IF (MSURF > 0) MSURF=MSURF+NLIM !changed in infcop
        ELSE
          IF (MASURF.GT.0) THEN
            MSURF=MASURF
            ITRSF=0
          ELSEIF (MRSURF.GT.0) THEN
            ITRSF=INMP1I(MRSURF,NPCELL,NTCELL)
          ELSEIF (MPSURF.GT.0) THEN
            ITRSF=INMP2I(NRCELL,MPSURF,NTCELL)
          ELSEIF (MTSURF.GT.0) THEN
            ITRSF=INMP3I(NRCELL,NPCELL,MTSURF)
          ENDIF
          IF (ITRSF.GT.0) MSURF=NLIM+ITRSF
        ENDIF
C
C  SET ICOS AND SCOS SUCH AS IF THE SOURCE PARTICLE HAD ARRIVED
C  AT THE SURFACE FROM THE CORRECT SIDE AND IS NOW REFLECTED
C  (NOTE: THE FLAG "IWEI" USED IN SUBR. STDCOL AND ADDCOL
C  WILL ALWAYS BE POSITIVE WITH THIS DEFINITION OF SCOS)
C  THIS DEFAULT SETTING MAY BE OVERRULED BY SORIFL FLAG
C
        IF (IICSOR(ISURF).NE.0) THEN
          ICOS=IICSOR(ISURF)
        ELSEIF (ILSIDE(MSURF).NE.0) THEN
          ICOS=ISIGN(1,ILSIDE(MSURF))
        ELSE
C  TRY TO FIND ICOS AUTOMATICALLY, IF POSSIBLE
          IF (LEVGEO.EQ.3.AND.MRSURF.GT.0) THEN
            IF (MRSURF.EQ.NRCELL) THEN
              ICOS=-1
            ELSE 
              ICOS=1
            ENDIF
          ELSEIF (LEVGEO.EQ.3.AND.MPSURF.GT.0) THEN
            IF (MPSURF.EQ.NPCELL) THEN
              ICOS=-1
            ELSE 
              ICOS=1
            ENDIF
          ELSEIF (LEVGEO.EQ.4.AND.MRSURF.GT.0) THEN
C  CURRENTLY: ONLY MATH. POSITIVELY ORIENTED TRIANGLES,
C             HENCE: NORMAL VECTOR OUTSIDE.
            ICOS=1
          ELSE
            GOTO 990
          ENDIF
        ENDIF
C
        SCOS=ICOS
C
        IF (ITISOR(ISURF).NE.0) THEN
          ITIME=ITISOR(ISURF)
        ELSEIF (ISWICH(1,MSURF).NE.0) THEN
          ITIME=ISWICH(1,MSURF)*ICOS
        ENDIF
        IF (IFPSOR(ISURF).NE.0) THEN
          IFPATH=IFPSOR(ISURF)
        ELSEIF (ISWICH(2,MSURF).NE.0) THEN
          IFPATH=ISWICH(2,MSURF)*ICOS
        ENDIF
        IF (IUPSOR(ISURF).NE.0) THEN
          IUPDTE=IUPSOR(ISURF)
        ELSEIF (ISWICH(3,MSURF).NE.0) THEN
          IUPDTE=ISWICH(3,MSURF)*ICOS
        ENDIF
C
C  FIND SURFACE NORMAL AT PLACE OF BIRTH
C
        IF (INDIM(ISURF,ISTRA).EQ.0) THEN
          CALL ADDNOR(X0,Y0,Z0,SCOS,MSURF,IPERID,*55,*55)
        ELSEIF (INDIM(ISURF,ISTRA).GT.0) THEN
          CALL STDNOR (X0,Y0,Z0,INDIM(ISURF,ISTRA),SCOS,MSURF,*55,*55)
        ENDIF
55      CONTINUE
C
C  VOLUME SOURCE MODEL  71---90
C
      ELSEIF (NLVOL(ISTRA)) THEN
C  SUBSTRATA OF VOLUME SOURCE: IVOLM
        IVOLM=1
        IF (NLIMSQ.GT.1) THEN
          ZV=RANF_EIRENE( )
          DO 71 IVOLM=1,NLIMSQ
            IF (ZV.LT.WMM(IVOLM)) GOTO 72
71        CONTINUE
72        CONTINUE
        ENDIF
        ISECT=IVOLM
        CALL SAMVL1(IVOLM,TIWL,TEWL,DIWL,VXWL,VYWL,VZWL,EFWL,WEISPZ)
        IF (.NOT.LGPART) RETURN
        NLSTOR=IPANU.LE.ISTOR(ISECT,ISTRA)
        MSURF=0
      ENDIF
C
      IRCELL=NRCELL
      IPCELL=NPCELL
      ITCELL=NTCELL
      NCELL=NRCELL+((NPCELL-1)+(NTCELL-1)*NP2T3)*NR1P2+NBLCKA
      NSTCLL=NCELL
      NCELLT=NCLTAL(NCELL)
C
C  SAMPLE STARTING TIME
C
      ITMSTP=1
      IF (.NOT.LGTIME) THEN
        TIME=0.
      ELSEIF (LGTIME) THEN
        ISOR=SORLIM(ISECT,ISTRA)
        INDTEC=IDEZ(ISOR,4,4)
        IF (INDTEC.EQ.0) INDTEC=2
        IF (INDTEC.LE.1) TIME=TIME0
        IF (INDTEC.EQ.2) TIME=TIME0+RANF_EIRENE()*DTIMV
      ENDIF
C
C  INITIAL POSITION OF PARTICLE IS DEFINED NOW, FURTHERMORE:
C    NRCELL,NPCELL,NTCELL,IPOLG,IPERID,NBLOCK,NACELL,
C    AND THE LOCAL BACKGROUND PARAMETERS
C    TEWL,(TIWL(IPLS),DIWL(IPLS),VXWL(IPLS),VYWL(IPLS),VZWL(IPLS),IPLS=1,NPLSI)
C
C    PLUS: WEISPZ FOR SOURCE SPECIES SAMPLING
C          WEISPZ IS THE ANALOG SAMPLING DISTRIBUTION
C          DPLS,DATM,DMOL,DION ARE THE NONANALOG SAMPLING DISTRIBUTIONS
C
C    PLUS: CRTX,CRTY,CRTZ,SCOS
C
C .........................................................................
C
C  FIND TYPE AND SPECIES INDEX AND RELATED CONSTANTS 100---199
C .........................................................................
C
      IF (NLATM(ISTRA)) THEN
        ITYP=1
        IF (NSPEZ(ISTRA).LT.0) THEN
C  CHECK RADON-NIKODYM CONDITION FOR NON-ANALOG SAMPLING
          DO IATM=1,NATMI
            IF (DATD(IATM).LE.0.D0.AND.WEISPZ(IATM).GT.0.D0) THEN
              GOTO 992
            ENDIF
          ENDDO
        ENDIF
C  FIXED SPECIES INDEX
        IATM=NSPEZ(ISTRA)
        IF (IATM.LT.0.OR.IATM.GT.NATMI) THEN
C  SPECIES SAMPLING FROM DATM
          FR=RANF_EIRENE( )
          DO 102 I=1,NATMIM
            IATM=I
            IF (FR.LE.DATM(IATM)) GOTO 101
102       CONTINUE
          IATM=NATMI
101       CONTINUE
          IF (NSPEZ(ISTRA).LT.0) THEN
C  WEIGHT CORRECTION
            DAT=DATD(IATM)
            IF (WEISPZ(IATM).LT.0.D0) GOTO 999
            WEIGHT=WEIGHT*WEISPZ(IATM)/DAT
          ENDIF
        ELSEIF (IATM.EQ.0) THEN
C  ANALOG SPECIES SAMPLING FROM WEISPZ
          FR=RANF_EIRENE( )
          SUMM=0.
          DO 112 I=1,NATMIM
            IATM=I
            IF (WEISPZ(IATM).LT.0.D0) GOTO 999
            SUMM=SUMM+WEISPZ(IATM)
            IF (FR.LE.SUMM) GOTO 111
112       CONTINUE
          IATM=NATMI
111       CONTINUE
        ENDIF
        RSQDV=RSQDVA(IATM)*SQ2I
      ELSEIF (NLMOL(ISTRA)) THEN
        ITYP=2
        IF (NSPEZ(ISTRA).LT.0) THEN
C  CHECK RADON-NIKODYM CONDITION FOR NON-ANALOG SAMPLING
          DO IMOL=1,NMOLI
            IF (DMLD(IMOL).LE.0.D0.AND.WEISPZ(IMOL).GT.0.D0) THEN
              GOTO 992
            ENDIF
          ENDDO
        ENDIF
C  FIXED SPECIES INDEX
        IMOL=NSPEZ(ISTRA)
        IF (IMOL.LT.0.OR.IMOL.GT.NMOLI) THEN
C  NONANALOG SPECIES SAMPLING
          FR=RANF_EIRENE( )
          DO 104 I=1,NMOLIM
            IMOL=I
            IF (FR.LE.DMOL(IMOL)) GOTO 103
104       CONTINUE
          IMOL=NMOLI
103       CONTINUE
C  WEIGHT CORRECTION
          IF (NSPEZ(ISTRA).LT.0) THEN
            DML=DMLD(IMOL)
            IF (WEISPZ(IMOL).LT.0.D0) GOTO 999
            WEIGHT=WEIGHT*WEISPZ(IMOL)/DML
          ENDIF
        ELSEIF (IMOL.EQ.0) THEN
C  ANALOG SPECIES SAMPLING
          FR=RANF_EIRENE( )
          SUMM=0.
          DO 114 I=1,NMOLIM
            IMOL=I
            IF (WEISPZ(IMOL).LT.0.D0) GOTO 999
            SUMM=SUMM+WEISPZ(IMOL)
            IF (FR.LE.SUMM) GOTO 113
114       CONTINUE
          IMOL=NMOLI
113       CONTINUE
        ENDIF
        RSQDV=RSQDVM(IMOL)*SQ2I
      ELSEIF (NLION(ISTRA)) THEN
        ITYP=3
        IF (NSPEZ(ISTRA).LT.0) THEN
C  CHECK RADON-NIKODYM CONDITION FOR NON-ANALOG SAMPLING
          DO IION=1,NIONI
            IF (DIOD(IION).LE.0.D0.AND.WEISPZ(IION).GT.0.D0) THEN
              GOTO 992
            ENDIF
          ENDDO
        ENDIF
C  FIXED SPECIES INDEX
        IION=NSPEZ(ISTRA)
        IF (IION.LT.0.OR.IION.GT.NIONI) THEN
C  NONANALOG SPECIES SAMPLING
          FR=RANF_EIRENE( )
          DO 106 I=1,NIONIM
            IION=I
            IF (FR.LE.DION(IION)) GOTO 105
106       CONTINUE
          IION=NIONI
105       CONTINUE
C  WEIGHT CORRECTION
          IF (NSPEZ(ISTRA).LT.0) THEN
            DIO=DIOD(IION)
            IF (WEISPZ(IION).LT.0.D0) GOTO 999
            WEIGHT=WEIGHT*WEISPZ(IION)/DIO
          ENDIF
        ELSEIF (IION.EQ.0) THEN
C  ANALOG SPECIES SAMPLING
          FR=RANF_EIRENE( )
          SUMM=0.
          DO 116 I=1,NIONIM
            IION=I
            IF (WEISPZ(IION).LT.0.D0) GOTO 999
            SUMM=SUMM+WEISPZ(IION)
            IF (FR.LE.SUMM) GOTO 115
116       CONTINUE
          IION=NIONI
115       CONTINUE
        ENDIF
        RSQDV=RSQDVI(IION)*SQ2I
      ELSEIF (NLPLS(ISTRA)) THEN
        ITYP=4
        IF (NSPEZ(ISTRA).LT.0) THEN
C  CHECK RADON-NIKODYM CONDITION FOR NON-ANALOG SAMPLING
          DO IPLS=1,NPLSI
            IF (DPLD(IPLS).LE.0.D0.AND.WEISPZ(IPLS).GT.0.D0) THEN
              GOTO 992
            ENDIF
          ENDDO
        ENDIF
C
C  FIXED SPECIES INDEX
        IPLS=NSPEZ(ISTRA)
        IF (IPLS.LT.0.OR.IPLS.GT.NPLSI) THEN
C  NONANALOG SPECIES SAMPLING
          FR=RANF_EIRENE( )
          DO 108 I=1,NPLSIM
            IPLS=I
            IF (FR.LE.DPLS(IPLS)) GOTO 107
108       CONTINUE
          IPLS=NPLSI
107       CONTINUE
C  WEIGHT CORRECTION
          IF (NSPEZ(ISTRA).LT.0) THEN
            DPL=DPLD(IPLS)
            IF (WEISPZ(IPLS).LT.0.D0) GOTO 999
            WEIGHT=WEIGHT*WEISPZ(IPLS)/DPL
          ENDIF
        ELSEIF (IPLS.EQ.0) THEN
C  ANALOG SPECIES SAMPLING
          FR=RANF_EIRENE( )
          SUMM=0.
          DO 118 I=1,NPLSIM
            IPLS=I
            IF (WEISPZ(IPLS).LT.0.D0) GOTO 999
            SUMM=SUMM+WEISPZ(IPLS)
            IF (FR.LE.SUMM) GOTO 117
118       CONTINUE
          IPLS=NPLSI
117       CONTINUE
        ENDIF
        RSQDV=RSQDVP(IPLS)*SQ2I
csw added branch
      ELSEIF(NLPHOT(ISTRA)) THEN
        ITYP=0
        IF (NSPEZ(ISTRA).LT.0) THEN
C  CHECK RADON-NIKODYM CONDITION FOR NON-ANALOG SAMPLING
          DO IPHOT=1,NPHOTI
            IF (DPHD(IPHOT).LE.0.D0.AND.WEISPZ(IPHOT).GT.0.D0) THEN
              GOTO 992
            ENDIF
          ENDDO
        ENDIF
C  FIXED SPECIES INDEX
        IPHOT=NSPEZ(ISTRA)
        IF (IPHOT.LT.0.OR.IPHOT.GT.NPHOTI) THEN
C  SPECIES SAMPLING FROM DPHOT
          FR=RANF_EIRENE( )
          DO 1021 I=1,NPHOTIM
            IPHOT=I
            IF (FR.LE.DPHOT(IPHOT)) GOTO 1011
1021      CONTINUE
          IPHOT=NPHOTI
1011      CONTINUE
          IF (NSPEZ(ISTRA).LT.0) THEN
C  WEIGHT CORRECTION
            DPH=DPHD(IPHOT)
            IF (WEISPZ(IPHOT).LT.0.D0) GOTO 999
            WEIGHT=WEIGHT*WEISPZ(IPHOT)/DPH
          ENDIF
        ELSEIF (IPHOT.EQ.0) THEN
C  ANALOG SPECIES SAMPLING FROM WEISPZ
          FR=RANF_EIRENE( )
          SUMM=0.
          DO 1121 I=1,NPHOTIM
            IPHOT=I
            IF (WEISPZ(IPHOT).LT.0.D0) GOTO 999
            SUMM=SUMM+WEISPZ(IPHOT)
            IF (FR.LE.SUMM) GOTO 1111
1121      CONTINUE
          IPHOT=NPHOTI
1111      CONTINUE
        ENDIF
        RSQDV=0.
csw end branch
      ENDIF
C
      ISPZ=ISPEZ(ITYP,IPHOT,IATM,IMOL,IION,IPLS)
C  .............................................................
C
C  SPECIES SAMPLING DONE
C  .............................................................
C
C  MAKE SURE NOT TO WASTE TIME IN PARTICLES WITH ZERO WEIGHT
C
      LGPART=WEIGHT.GT.0.D0
      IF (.NOT.LGPART) RETURN
C
C  PARAMETERS FOR VELOCITY SAMPLING DISTRIBUTION:
C  TEWD,TIWD,VXWD,VYWD,VZDW
C
      IF (NEMOD2.EQ.1) THEN
C  SET SAMPLING TEMPERATURES FROM FIXED INPUT DATA
        TIWD=ABS(SORENI(ISTRA))
        TEWD=ABS(SORENE(ISTRA))
      ELSEIF (NEMOD2.EQ.2) THEN
C  NOT IN USE
      ELSEIF (NEMOD2.EQ.3) THEN
C  SET SAMPLING TEMPERATURES FROM LOCAL PLASMA DATA FOR SPECIES IPLTI
        IPLTI=NEMDSP
        IF (IPLTI.LT.1.OR.IPLTI.GT.NPLSI) GOTO 999
        TIWD=TIWL(IPLTI)
        TEWD=TEWL
      ELSE
C  DEFAULT: ONLY FOR NLPLS=TRUE, OR NLION=TRUE
C  SET SAMPLING TEMPERATURES FROM LOCAL PLASMA DATA FOR SPECIES IPLS
        TEWD=TEWL
        IF (NLPLS(ISTRA)) THEN
          IPL=IPLS
          TIWD=TIWL(IPL)
        ELSEIF (NLION(ISTRA)) THEN
          TIWD=0.
          DO IPP=1,NPLSI
            IF (NMASSI(IION).EQ.NMASSP(IPP).AND.
     .          NCHARI(IION).EQ.NCHARP(IPP).AND.
     .          NCHRGI(IION).EQ.NCHRGP(IPP)) THEN
              IPL=IPP
              TIWD=TIWL(IPL)
            ENDIF
          ENDDO
        ELSE
C  SET SAMPLING ION-TEMPERATURE TO ZERO
          TIWD=0.
        ENDIF
      ENDIF
C
      IF (NEMOD3.EQ.1) THEN
C  SET SAMPLING DRIFT VELOCITIES FROM INPUT DATA FOR DRIFT VELOCITY
        VXWD=SORVDX(ISTRA)
        VYWD=SORVDY(ISTRA)
        VZWD=SORVDZ(ISTRA)
      ELSEIF (NEMOD3.EQ.2) THEN
C  SET SAMPLING DRIFT VELOCITIES FROM INPUT DATA FOR MACH NUMBER
        CS=SQRT(1.*TIWD+TEWD)*RSQDV
        VXWD=SORVDX(ISTRA)*CS
        VYWD=SORVDY(ISTRA)*CS
        VZWD=SORVDZ(ISTRA)*CS
      ELSEIF (NEMOD3.EQ.3) THEN
        IPLV=NEMDSP
        IF (IPLV.LT.1.OR.IPLV.GT.NPLSI) GOTO 999
        VXWD=VXWL(IPLV)
        VYWD=VYWL(IPLV)
        VZWD=VZWL(IPLV)
      ELSE
C  DEFAULT: ONLY FOR NLPLS=TRUE, OR NLION=TRUE
C  SET SAMPLING DRIFT VELOCITIES FROM BACKGROUND DATA FOR SPECIES IPL
        IF (NLPLS(ISTRA)) THEN
          IPL=IPLS
          VXWD=VXWL(IPL)
          VYWD=VYWL(IPL)
          VZWD=VZWL(IPL)
        ELSEIF (NLION(ISTRA)) THEN
          VXWD=0.
          VYWD=0.
          VZWD=0.
          DO IPP=1,NPLSI
            IF (NMASSI(IION).EQ.NMASSP(IPP).AND.
     .          NCHARI(IION).EQ.NCHARP(IPP).AND.
     .          NCHRGI(IION).EQ.NCHRGP(IPP)) THEN
              IPL=IPP
              VXWD=VXWL(IPL)
              VYWD=VYWL(IPL)
              VZWD=VZWL(IPL)
            ENDIF
          ENDDO
        ELSE
          VXWD=0.
          VYWD=0.
          VZWD=0.
        ENDIF
      ENDIF
C
C  .....................................
C
C  FIND VELOCITY VECTOR NEXT
C  .....................................
C
C  PURELY ATOMIC SOURCE?  200 --- 299
C
      IF (NLATM(ISTRA)) THEN
        IF (NEMOD1.EQ.1) THEN
          EMAX=SORENI(ISTRA)
        ELSEIF (NEMOD1.EQ.6) THEN
          EMAX=0.
        ELSE
          GOTO 998
        ENDIF

        LOGATM(IATM,ISTRA)=.TRUE.
        IF (EMAX.GT.0) THEN
          E0=EMAX
          VEL=SQRT(E0)*RSQDVA(IATM)
C
C  COSINE LIKE OR GAUSSIAN ANGLE DISTRIBUTION
C
C  IN CASE (CRTX,CRTY,CRTZ) NE (0.,0.,0.)
C  USE REFLECTION MODEL ANGULAR DISTRIBUTION
          VELX=CRTX
          VELY=CRTY
          VELZ=CRTZ
          CALL REFANG(SORCOS(ISTRA),SORMAX(ISTRA),SORCTX(ISTRA),
     .                SORCTY(ISTRA),SORCTZ(ISTRA),NAMODS(ISTRA),SNORM)
C         VEL_MEAN=VEL
C         E0_MEAN=E0
        ELSEIF (EMAX.LE.0.D0.AND..NOT.NLVOL(ISTRA)) THEN
C
C  SAMPLE FROM SHIFTED TRUNCATED MAXWELLIAN FLUX
C              AROUND INNER (!) NORMAL AT TEMP. TW (EV) = TIWD
          IF (TIWD.LE.0.) TIWD=ABS(EMAX)
          VWD=SQRT(VXWD**2+VYWD**2+VZWD**2)
          CALL VELOCS (TIWD,0._DP,VWD,VXWD,VYWD,VZWD,RSQDVA(IATM),
     .                 CVRSSA(IATM),
     .                 -CRTX,-CRTY,-CRTZ,E0,VELX,VELY,VELZ,VEL)
C  MODIFY ANGULAR DISTRIBUTION IN CASE SORCOS .NE. 0.5 (I.E., IN CASE
C  A NON-COSINE DISTRIBUTION IS REQUESTED
          IF (ABS(SORCOS(ISTRA)-0.5).GT.1.D-5) THEN
            VELX=CRTX
            VELY=CRTY
            VELZ=CRTZ
            CALL REFANG(SORCOS(ISTRA),SORMAX(ISTRA),SORCTX(ISTRA),
     .                  SORCTY(ISTRA),SORCTZ(ISTRA),NAMODS(ISTRA),SNORM)
C           VEL_MEAN=VEL
C           E0_MEAN=E0
          ENDIF
        ELSEIF (EMAX.LE.0..AND.NLVOL(ISTRA)) THEN
C
C  SAMPLE FROM MAXWELLIAN AT TEMP. TW (EV) =TIWD
C
          IF (TIWD.LE.0.) TIWD=ABS(EMAX)
          NFLAG=2
          IDUM=1
          DUMT(1)=SQRT(TIWD/RMASSA(IATM))*CVEL2A
          DUMT(2)=DUMT(1)
          DUMT(3)=DUMT(1)
          DUMV(1)=0
          DUMV(2)=0
          DUMV(3)=0
          CALL VELOCX(0,VXO,VYO,VZO,VO,IO,NO,VELQ,NFLAG,
     .                IDUM,DUMT,DUMV)
          E0=VELQ*CVRSSA(IATM)
C         E0_MEAN=1.5*TIWD+0.
        ELSE
          GOTO 998
        ENDIF
C
        WTOTA(IATM,ISTRA)=WTOTA(IATM,ISTRA)+WEIGHT
        ETOTA(ISTRA)=ETOTA(ISTRA)+E0*WEIGHT
        IF (NADSI.GE.1.AND.NLSRF(ISTRA)) CALL UPSUSR(WEIGHT,2)
        IF (NADSPC.GE.1.AND.NLSRF(ISTRA)) CALL CALC_SPECTRUM(WEIGHT,2)
        IF (NLTRC) CALL CHCTRC(X0,Y0,Z0,0,1)
        IF (NLSTOR) CALL STORE(1)
C
C  PURELY MOLECULAR SOURCE?  300 --- 399
C
      ELSEIF (NLMOL(ISTRA)) THEN
C
        IF (NEMOD1.EQ.1) THEN
          EMAX=SORENI(ISTRA)
        ELSEIF (NEMOD1.EQ.6) THEN
          EMAX=0.
        ELSE
          GOTO 998
        ENDIF
C
        LOGMOL(IMOL,ISTRA)=.TRUE.
        IF (EMAX.GT.0.D0) THEN
C  MONOENERGETIC DISTRIBUTION
          E0=EMAX
          VEL=RSQDVM(IMOL)*SQRT(E0)
C
C  COSINE LIKE OR GAUSSIAN ANGLE DISTRIBUTION
C
C  IN CASE (CRTX,CRTY,CRTZ) NE (0.,0.,0.)
C  USE REFLECTION MODEL ANGULAR DISTRIBUTION
          VELX=CRTX
          VELY=CRTY
          VELZ=CRTZ
          CALL REFANG(SORCOS(ISTRA),SORMAX(ISTRA),SORCTX(ISTRA),
     .                SORCTY(ISTRA),SORCTZ(ISTRA),NAMODS(ISTRA),SNORM)
C         VEL_MEAN=VEL
C         E0_MEAN=E0
        ELSEIF (EMAX.LE.0..AND.TIWD.GT.0..AND..NOT.NLVOL(ISTRA)) THEN
C
C  SAMPLE FROM SHIFTED TRUNCATED MAXWELLIAN FLUX
C              AROUND INNER (!) NORMAL AT TEMP. TIWL
C
          VWD=SQRT(VXWD**2+VYWD**2+VZWD**2)
          CALL VELOCS (TIWD,0._DP,VWD,VXWD,VYWD,VZWD,RSQDVM(IMOL),
     .                 CVRSSM(IMOL),
     .                 -CRTX,-CRTY,-CRTZ,E0,VELX,VELY,VELZ,VEL)
C  MODIFY ANGULAR DISTRIBUTION IN CASE SORCOS .NE. 0.5 (I.E., IN CASE
C  A NON-COSINE DISTRIBUTION IS REQUESTED
          IF (ABS(SORCOS(ISTRA)-0.5).GT.1.D-5) THEN
            VELX=CRTX
            VELY=CRTY
            VELZ=CRTZ
            CALL REFANG(SORCOS(ISTRA),SORMAX(ISTRA),SORCTX(ISTRA),
     .                  SORCTY(ISTRA),SORCTZ(ISTRA),NAMODS(ISTRA),SNORM)
C           VEL_MEAN=VEL
C           E0_MEAN=E0
          ENDIF
        ELSEIF (EMAX.LE.0..AND.TIWD.GT.0..AND.NLVOL(ISTRA)) THEN
C
C  SAMPLE FROM MAXWELLIAN AT TEMP. TW (EV) =TIWD
C
          IF (TIWD.LE.0.) TIWD=ABS(EMAX)
          NFLAG=2
          IDUM=1
          DUMT(1)=SQRT(TIWD/RMASSM(IMOL))*CVEL2A
          DUMT(2)=DUMT(1)
          DUMT(3)=DUMT(1)
          DUMV(1)=0
          DUMV(2)=0
          DUMV(3)=0
          CALL VELOCX(0,VXO,VYO,VZO,VO,IO,NO,VELQ,NFLAG,
     .                IDUM,DUMT,DUMV)
          E0=VELQ*CVRSSM(IMOL)
C         E0_MEAN=1.5*TIWD+0.
        ELSE
          GOTO 998
        ENDIF
C
        WTOTM(IMOL,ISTRA)=WTOTM(IMOL,ISTRA)+WEIGHT
        ETOTM(ISTRA)=ETOTM(ISTRA)+WEIGHT*E0
        IF (NADSI.GE.1) CALL UPSUSR(WEIGHT,2)
        IF (NADSPC.GE.1) CALL CALC_SPECTRUM(WEIGHT,2)
        IF (NLTRC) CALL CHCTRC(X0,Y0,Z0,0,1)
        IF (NLSTOR) CALL STORE(1)
C
C  PURELY TEST IONIC SOURCE?  400 --- 499
C
      ELSEIF (NLION(ISTRA)) THEN
C
        IF (NEMOD1.EQ.1) THEN
          EMAX=SORENI(ISTRA)
        ELSEIF (NEMOD1.EQ.2.OR.NEMOD1.EQ.3) THEN
          EMAX=SORENI(ISTRA)*TIWD+SORENE(ISTRA)*TEWD
        ELSEIF (NEMOD1.EQ.4.OR.NEMOD1.EQ.5) THEN
          VPERP=VXWD*CRTX+VYWD*CRTY+VZWD*CRTZ
          IF (VPERP.GT.0.D0) GOTO 996
          VPARX=VXWD-VPERP*CRTX
          VPARY=VYWD-VPERP*CRTY
          VPARZ=VZWD-VPERP*CRTZ
          VPAR=SQRT(VPARX**2+VPARY**2+VPARZ**2)
          VTERM=SQRT(TIWD/RMASSI(IION))*CVELAA
          VPERP=VPERP/VTERM
          VPAR=VPAR/VTERM
          EMAX=EMAXW(TIWD,VPERP,VPAR)
        ELSEIF (NEMOD1.EQ.6.OR.NEMOD1.EQ.7) THEN
          EMAX=0.
        ELSE
          GOTO 998
        ENDIF
C
        IF (ABS(NEMOD1).EQ.3.OR.NEMOD1.EQ.5.OR.NEMOD1.EQ.7) THEN
          IF (FSHEAT(MSURF).LE.0.D0) THEN
            GAMMA=0.
            CUR=0.
            DO IP=1,NPLSI
              VPWL(IP)=SQRT(VXWL(IP)**2+VYWL(IP)**2+VZWL(IP)**2)
              DIWL(IP)=DIWL(IP)
            ENDDO
            ESHET=NCHRGP(IPLS)*SHEATH(TEWL,DIWL,VPWL,
     .                                NCHRGP,GAMMA,CUR,NPLSI,MSURF)
          ELSE
            ESHET=NCHRGP(IPLS)*FSHEAT(MSURF)*TEWL
          ENDIF
         ELSE
          ESHET=0.
        ENDIF

        LOGION(IION,ISTRA)=.TRUE.
        IF (EMAX.GT.0.D0) THEN
          E0=EMAX
          VEL=SQRT(E0)*RSQDVI(IION)
C
C  COSINE LIKE OR GAUSSIAN ANGLE DISTRIBUTION
C
C  IN CASE (CRTX,CRTY,CRTZ) NE (0.,0.,0.D0)
C  USE REFLECTION MODEL ANGULAR DISTRIBUTION
          VELX=CRTX
          VELY=CRTY
          VELZ=CRTZ
          CALL REFANG(SORCOS(ISTRA),SORMAX(ISTRA),SORCTX(ISTRA),
     .                SORCTY(ISTRA),SORCTZ(ISTRA),NAMODS(ISTRA),SNORM)
C         VEL_MEAN=VEL
C         E0_MEAN=E0
        ELSEIF (EMAX.LE.0..AND.TIWD.GT.0..AND..NOT.NLVOL(ISTRA)) THEN
C
C  SAMPLE FROM SHIFTED TRUNCATED MAXWELLIAN FLUX
C              AROUND INNER (!) NORMAL AT TEMP. TW (EV)
          VWD=SQRT(VXWD**2+VYWD**2+VZWD**2)
          CALL VELOCS (TIWD,0._DP,VWD,VXWD,VYWD,VZWD,RSQDVI(IION),
     .                  CVRSSI(IION),
     .                 -CRTX,-CRTY,-CRTZ,E0,VELX,VELY,VELZ,VEL)
C  MODIFY ANGULAR DISTRIBUTION IN CASE SORCOS .NE. 0.5 (I.E., IN CASE
C  A NON-COSINE DISTRIBUTION IS REQUESTED
          IF (ABS(SORCOS(ISTRA)-0.5).GT.EPS10) THEN
            VELX=CRTX
            VELY=CRTY
            VELZ=CRTZ
            CALL REFANG(SORCOS(ISTRA),SORMAX(ISTRA),SORCTX(ISTRA),
     .                  SORCTY(ISTRA),SORCTZ(ISTRA),NAMODS(ISTRA),SNORM)
C           VEL_MEAN=VEL
C           E0_MEAN=E0
          ENDIF
        ELSEIF (EMAX.LE.0..AND.TIWD.GT.0..AND.NLVOL(ISTRA)) THEN
C
C  SAMPLE FROM MAXWELLIAN AT TEMP. TW (EV) =TIWD
C
          IF (TIWD.LE.0.) TIWD=ABS(EMAX)
          NFLAG=2
          IDUM=1
          DUMT(1)=SQRT(TIWD/RMASSI(IION))*CVEL2A
          DUMT(2)=DUMT(1)
          DUMT(3)=DUMT(1)
          DUMV(1)=0
          DUMV(2)=0
          DUMV(3)=0
          CALL VELOCX(0,VXO,VYO,VZO,VO,IO,NO,VELQ,NFLAG,
     .                IDUM,DUMT,DUMV)
          E0=VELQ*CVRSSI(IION)
C         VEL_MEAN=VEL
C         E0_MEAN=1.5*TIWD+0.
        ELSE
          GOTO 998
        ENDIF
C
        WTOTI(IION,ISTRA)=WTOTI(IION,ISTRA)+WEIGHT
        ETOTI(ISTRA)=ETOTI(ISTRA)+E0*WEIGHT
        IF (NADSI.GE.1) CALL UPSUSR(WEIGHT,2)
        IF (NADSPC.GE.1) CALL CALC_SPECTRUM(WEIGHT,2)
        IF (NLTRC) CALL CHCTRC(X0,Y0,Z0,0,1)
        IF (NLSTOR) CALL STORE(1)
C
C  PURELY BULK IONIC SOURCE?   500  ---  599
C
C  SOURCE DEFINED BY PRE COLLISION RATE OF BULK PARTICLES
C  THE RESULTING TEST PARTICLES MAY BE EITHER ATOMS, MOLECULES OR TEST
C  IONS. IN THIS CASE NOT THE TOTAL TEST PARTICLE FLUX BUT THE
C  THE TOTAL BULK ION FLUX IS SCALED TO A PRESCRIBED VALUE
C
C  SET ENERGY OF THE INCIDENT BULK ION : EMAX
C  IF EMAX=0, SAMPLE FROM SHIFTED TRUNCATED MAXWELLIAN
C  (ADD SHEATH CONTRIBUTION ESHET IF REQUESTED)
C
      ELSEIF (NLPLS(ISTRA)) THEN
C
        IF (NLSRF(ISTRA)) THEN
C
          IF (NEMOD1.EQ.1) THEN
            EMAX=SORENI(ISTRA)
          ELSEIF (NEMOD1.EQ.2.OR.NEMOD1.EQ.3) THEN
            EMAX=SORENI(ISTRA)*TIWD+SORENE(ISTRA)*TEWD
          ELSEIF (NEMOD1.EQ.4.OR.NEMOD1.EQ.5) THEN
            VPERP=VXWD*CRTX+VYWD*CRTY+VZWD*CRTZ
            IF (VPERP.LT.0.D0) GOTO 996
            VPARX=VXWD-VPERP*CRTX
            VPARY=VYWD-VPERP*CRTY
            VPARZ=VZWD-VPERP*CRTZ
            VPAR=SQRT(VPARX**2+VPARY**2+VPARZ**2)
            VTERM=SQRT(TIWD/RMASSP(IPLS))*CVELAA
            VPERP=VPERP/VTERM
            VPAR=VPAR/VTERM
            EMAX=EMAXW(TIWD,VPERP,VPAR)
          ELSEIF (NEMOD1.EQ.6.OR.NEMOD1.EQ.7) THEN
            EMAX=0.
          ELSEIF (NEMOD1.EQ.-2.OR.NEMOD1.EQ.-3) THEN
            EMAX=EFWL(IPLS)
          ELSE
            GOTO 998
          ENDIF
C
          IF (ABS(NEMOD1).EQ.3.OR.NEMOD1.EQ.5.OR.NEMOD1.EQ.7) THEN
            IF (FSHEAT(MSURF).LE.0.D0) THEN
              GAMMA=0.
              CUR=0.
              DO 550 IP=1,NPLSI
                VPWL(IP)=SQRT(VXWL(IP)**2+VYWL(IP)**2+VZWL(IP)**2)
C               DIWL(IP)=DIWL(IP)
550           CONTINUE
              ESHET=NCHRGP(IPLS)*SHEATH(TEWL,DIWL,VPWL,
     .                                  NCHRGP,GAMMA,CUR,NPLSI,MSURF)
            ELSE
              ESHET=NCHRGP(IPLS)*FSHEAT(MSURF)*TEWL
            ENDIF
          ELSE
            ESHET=0.
          ENDIF
C
          CRTX=-CRTX
          CRTY=-CRTY
          CRTZ=-CRTZ
C
          LOGPLS(IPLS,ISTRA)=.TRUE.
          IF (EMAX.GT.0.D0) THEN
C  CONSTANT VELOCITY NORMAL ONTO THE WALL
            E0=EMAX+ESHET
            VEL=SQRT(E0)*RSQDVP(IPLS)
            VELX=CRTX
            VELY=CRTY
            VELZ=CRTZ
C  TRUNCATED COSINE DISTRIBUTION ONTO WALL
            CALL REFANG(SORCOS(ISTRA),SORMAX(ISTRA),SORCTX(ISTRA),
     .                  SORCTY(ISTRA),SORCTZ(ISTRA),NAMODS(ISTRA),SNORM)
C           E0_MEAN=E0
C           VEL_MEAN=VEL
          ELSEIF (EMAX.LE.0.D0.AND.TIWD.GT.0.D0) THEN
C  SAMPLE FROM SHIFTED TRUNCATED MAXWELLIAN FLUX AND ACCELERATE IN SHEATH
            VWD=SQRT(VXWD**2+VYWD**2+VZWD**2)
            CALL VELOCS(TIWD,ESHET,VWD,VXWD,VYWD,VZWD,RSQDVP(IPLS),
     .                  CVRSSP(IPLS),
     .                  -CRTX,-CRTY,-CRTZ,E0,VELX,VELY,VELZ,VEL)
          ENDIF
C
          CRTX=-CRTX
          CRTY=-CRTY
          CRTZ=-CRTZ
C
C  A BULK ION, HITTING A SURFACE, HAS BEEN CREATED.
C
C  UPDATE PARTICLE EFFLUX  ONTO SURFACE MSURF
C  UPDATE ENERGY FLUX ONTO SURFACE MSURF
C
C  SPATIAL RESOLUTION ON NON DEFAULT STANDARD SURFACE?
          IF (MSURF.GT.NLIM.AND.NLMPGS.GT.NLIMPS) THEN
            IF (LEVGEO.LE.3) THEN
              ISTS=MSURF-NLIM
              IF (INUMP(ISTS,1).NE.0) MSURFG=NPCELL+(NTCELL-1)*NP2T3
              IF (INUMP(ISTS,2).NE.0) MSURFG=NRCELL+(NTCELL-1)*NR1P2
              IF (INUMP(ISTS,3).NE.0) MSURFG=NRCELL+(NPCELL-1)*NR1P2
              MSURFG=NLIM+NSTS+MSURFG+(ISTS-1)*NGITT
              FLX=FLXOUT(MSURFG)
            ELSE IF (LEVGEO.EQ.4) THEN
              MSURFG=NLIM+NSTS+INSPAT(IPOLG,MRSURF)
              FLX=FLXOUT(MSURFG)
            ELSE
              MSURFG=0
              FLX=FLXOUT(MSURF)
            END IF
          ELSEIF (MSURF.GT.0) THEN
            MSURFG=0
            FLX=FLXOUT(MSURF)
          ELSE
            MSURFG=0
            FLX=0
          ENDIF
C
          WTOTP(IPLS,ISTRA)=WTOTP(IPLS,ISTRA)-WEIGHT
          ETOTP(ISTRA)=ETOTP(ISTRA)-E0*WEIGHT
          IF (MSURF.GT.0) THEN
            IF (LPOTPL) POTPL(IPLS,MSURF)=POTPL(IPLS,MSURF)+WEIGHT
            IF (LEOTPL) EOTPL(IPLS,MSURF)=EOTPL(IPLS,MSURF)+WEIGHT*E0
            IF (MSURFG.GT.0) THEN
              IF (LPOTPL) POTPL(IPLS,MSURFG)=POTPL(IPLS,MSURFG)+WEIGHT
              IF (LEOTPL) 
     .          EOTPL(IPLS,MSURFG)=EOTPL(IPLS,MSURFG)+E0*WEIGHT
            ENDIF
          ENDIF
          IF (NADSI.GE.1) CALL UPSUSR(-WEIGHT,1)
          IF (NADSPC.GE.1) CALL CALC_SPECTRUM(-WEIGHT,1)
C
          IF (NLTRC) CALL CHCTRC(X0,Y0,Z0,0,1)
          IF (NLSTOR) CALL STORE(2)
C
C  REFLECT THIS ION AS TEST PARTICLE FROM SURFACE NO. MSURF
C
C  BUT FIRST: CALL SPUTTER MODEL IF REQUESTED
C
          FMASS=DBLE(NMASSP(IPLS))
          FCHAR=DBLE(NCHARP(IPLS))
C
          WGHTSP=0.
          WGHTSC=0.
          YIELD1=0.
          YIELD2=0.
          ISSPTP=0
          ISSPTC=0
C
          NLSPUT=.FALSE.
          IF (ILSPT(MSURF).NE.0) THEN
C  SAVE INCIDENT PARTICLE'S SPEED AND ENERGY
            E0S=E0
            WEIGHS=WEIGHT
            VELS=VEL
            VELXS=VELX
            VELYS=VELY
            VELZS=VELZ
            ISPZS=ISPZ
C
            CALL SPUTR1(WMINS,FMASS,FCHAR,FLX,
     .                  ISRS(ISPZ,MSURF),
     .                  YIELD1,
     .                  ISSPTP,ESPTP,VSPTP,VXSPTP,VYSPTP,VZSPTP,
     .                  ISRC(ISPZ,MSURF),
     .                  YIELD2,
     .                  ISSPTC,ESPTC,VSPTC,VXSPTC,VYSPTC,VZSPTC)
            NLSPUT=YIELD1.GT.0..OR.YIELD2.GT.0.
            WGHTSP=WEIGHT*YIELD1
            WGHTSC=WEIGHT*YIELD2
C
C  UPDATE SPUTTER SURFACE TALLIES
C
            IF (LSPTPL) 
     .        SPTPL(IPLS,MSURF)=SPTPL(IPLS,MSURF)+WGHTSP+WGHTSC
          ENDIF
C
C  PHYSICAL SPUTTERING
C
          IF (WGHTSP.GT.0..AND.ISSPTP.GT.0) THEN
C  FOLLOW SPUTTERED PARTICLES LATER. PUT THEM INTO STATISTICAL CELLAR
C
            ISPZ=ISSPTP
            ITYP=ISPEZI(ISPZ,-1)
            IPHOT=ISPEZI(ISPZ,0)
            IATM=ISPEZI(ISPZ,1)
            IMOL=ISPEZI(ISPZ,2)
            IION=ISPEZI(ISPZ,3)
            IPLS=ISPEZI(ISPZ,4)
            E0=ESPTP
            WEIGHT=WGHTSP
            VEL=VSPTP
            VELX=VXSPTP
            VELY=VYSPTP
            VELZ=VZSPTP
C
C.....................................................................
C  SPLITTING
C
            NLEVEL=NLEVEL+1
C  SAVE LOCATION, WEIGHT AND OTHER PARAMETERS AT CURRENT LEVEL
            DO 533 J=1,NPARTC
              RSPLST(NLEVEL,J)=RPST(J)
533         CONTINUE
            DO 534 J=1,MPARTC
              ISPLST(NLEVEL,J)=IPST(J)
534         CONTINUE
C  NUMBER OF NODES AT THIS LEVEL
            NODES(NLEVEL)=2
C
C  SPLITTING DONE. NEXT: SURFACE TALLIES
C.....................................................................
C
            IF (NLTRC.AND.TRCHST) THEN
              WRITE (6,*) 'AFTER SUBR. SPUTER: PHYS. SPUTTERING'
              WRITE (6,'(1X,A8)') TEXTS(ISPZ)
              CALL MASR1('YIELDP  ',YIELD1)
              CALL MASR6 (
     .           'VELX,VELY,VELZ,VEL,E0,WEIGHT                    ',
     .            VELX,VELY,VELZ,VEL,E0,WEIGHT)
            ENDIF
C
            IF (ITYP.EQ.1) THEN
              LOGATM(IATM,ISTRA)=.TRUE.
              IF (LPPAT) PPAT(IATM,NCELLT)=PPAT(IATM,NCELLT)+WEIGHT
              IF (LEPAT) EPAT(NCELLT)=EPAT(NCELLT)+E0*WEIGHT
              IF (MSURF.GT.0) THEN
                IF (LPRFPAT) 
     .            PRFPAT(IATM,MSURF)=PRFPAT(IATM,MSURF)+WEIGHT
                IF (LERFPAT) 
     .            ERFPAT(IATM,MSURF)=ERFPAT(IATM,MSURF)+E0*WEIGHT
                IF (MSURFG.GT.0) THEN
                  IF (LPRFPAT) 
     .              PRFPAT(IATM,MSURFG)=PRFPAT(IATM,MSURFG)+WEIGHT
                  IF (LERFPAT) 
     .              ERFPAT(IATM,MSURFG)=ERFPAT(IATM,MSURFG)+E0*WEIGHT
                ENDIF
              ENDIF
            ELSEIF (ITYP.EQ.2) THEN
              LOGMOL(IMOL,ISTRA)=.TRUE.
              IF (LPPML) PPML(IMOL,NCELLT)=PPML(IMOL,NCELLT)+WEIGHT
              IF (LEPML) EPML(NCELLT)=EPML(NCELLT)+E0*WEIGHT
              IF (MSURF.GT.0) THEN
                IF (LPRFPML) 
     .            PRFPML(IMOL,MSURF)=PRFPML(IMOL,MSURF)+WEIGHT
                IF (LERFPML) 
     .            ERFPML(IMOL,MSURF)=ERFPML(IMOL,MSURF)+E0*WEIGHT
                IF (MSURFG.GT.0) THEN
                  IF (LPRFPML) 
     .              PRFPML(IMOL,MSURFG)=PRFPML(IMOL,MSURFG)+WEIGHT
                   IF (LERFPML) 
     .              ERFPML(IMOL,MSURFG)=ERFPML(IMOL,MSURFG)+E0*WEIGHT
                ENDIF
              ENDIF
            ELSEIF (ITYP.EQ.3) THEN
              LOGION(IION,ISTRA)=.TRUE.
              IF (LPPIO) PPIO(IION,NCELLT)=PPIO(IION,NCELLT)+WEIGHT
              IF (LEPIO) EPIO(NCELLT)=EPIO(NCELLT)+E0*WEIGHT
              IF (MSURF.GT.0) THEN
                IF (LPRFPIO) 
     .            PRFPIO(IION,MSURF)=PRFPIO(IION,MSURF)+WEIGHT
                IF (LERFPIO) 
     .            ERFPIO(IION,MSURF)=ERFPIO(IION,MSURF)+E0*WEIGHT
                IF (MSURFG.GT.0) THEN
                  IF (LPRFPIO) 
     .              PRFPIO(IION,MSURFG)=PRFPIO(IION,MSURFG)+WEIGHT
                  IF (LERFPIO) 
     .              ERFPIO(IION,MSURFG)=ERFPIO(IION,MSURFG)+E0*WEIGHT
                ENDIF
              ENDIF
            ENDIF
            IF (NADSI.GE.1) CALL UPSUSR(WEIGHT,2)
            IF (NADSPC.GE.1) CALL CALC_SPECTRUM(WEIGHT,2)
          ENDIF
C
C  CHEMICAL SPUTTERING
C
          IF (WGHTSC.GT.0..AND.ISSPTC.GT.0) THEN
C  FOLLOW SPUTTERED PARTICLES LATER. PUT THEM INTO STATISTICAL CELLAR
            ISPZ=ISSPTC
            ITYP=ISPEZI(ISPZ,-1)
            IPHOT=ISPEZI(ISPZ,0)
            IATM=ISPEZI(ISPZ,1)
            IMOL=ISPEZI(ISPZ,2)
            IION=ISPEZI(ISPZ,3)
            IPLS=ISPEZI(ISPZ,4)
            E0=ESPTC
            WEIGHT=WGHTSC
            VEL=VSPTC
            VELX=VXSPTC
            VELY=VYSPTC
            VELZ=VZSPTC
C
C.....................................................................
C  SPLITTING
C
            NLEVEL=NLEVEL+1
C  SAVE LOCATION, WEIGHT AND OTHER PARAMETERS AT CURRENT LEVEL
            DO 535 J=1,NPARTC
              RSPLST(NLEVEL,J)=RPST(J)
535         CONTINUE
            DO 536 J=1,MPARTC
              ISPLST(NLEVEL,J)=IPST(J)
536         CONTINUE
C  NUMBER OF NODES AT THIS LEVEL
            NODES(NLEVEL)=2
C
C  SPLITTING DONE. NEXT: SURFACE TALLIES
C.....................................................................
C
            IF (NLTRC.AND.TRCHST) THEN
              WRITE (6,*) 'AFTER SUBR. SPUTER: CHEM. SPUTTERING'
              WRITE (6,'(1X,A8)') TEXTS(ISPZ)
              CALL MASR1('YIELDC  ',YIELD2)
              CALL MASR6 (
     .           'VELX,VELY,VELZ,VEL,E0,WEIGHT                    ',
     .            VELX,VELY,VELZ,VEL,E0,WEIGHT)
            ENDIF
C
            IF (ITYP.EQ.1) THEN
              LOGATM(IATM,ISTRA)=.TRUE.
              IF (LPPAT) PPAT(IATM,NCELLT)=PPAT(IATM,NCELLT)+WEIGHT
              IF (LEPAT) EPAT(NCELLT)=EPAT(NCELLT)+E0*WEIGHT
              IF (MSURF.GT.0) THEN
                IF (LPRFPAT)
     .            PRFPAT(IATM,MSURF)=PRFPAT(IATM,MSURF)+WEIGHT
                IF (LERFPAT)
     .            ERFPAT(IATM,MSURF)=ERFPAT(IATM,MSURF)+E0*WEIGHT
                IF (MSURFG.GT.0) THEN
                  IF (LPRFPAT)
     .              PRFPAT(IATM,MSURFG)=PRFPAT(IATM,MSURFG)+WEIGHT
                  IF (LERFPAT)
     .              ERFPAT(IATM,MSURFG)=ERFPAT(IATM,MSURFG)+E0*WEIGHT
                ENDIF
              ENDIF
            ELSEIF (ITYP.EQ.2) THEN
              LOGMOL(IMOL,ISTRA)=.TRUE.
              IF (LPPML) PPML(IMOL,NCELLT)=PPML(IMOL,NCELLT)+WEIGHT
              IF (LEPML) EPML(NCELLT)=EPML(NCELLT)+E0*WEIGHT
              IF (MSURF.GT.0) THEN
                IF (LPRFPML)
     .            PRFPML(IMOL,MSURF)=PRFPML(IMOL,MSURF)+WEIGHT
                IF (LERFPML)
     .            ERFPML(IMOL,MSURF)=ERFPML(IMOL,MSURF)+E0*WEIGHT
                IF (MSURFG.GT.0) THEN
                  IF (LPRFPML)
     .              PRFPML(IMOL,MSURFG)=PRFPML(IMOL,MSURFG)+WEIGHT
                  IF (LERFPML)
     .              ERFPML(IMOL,MSURFG)=ERFPML(IMOL,MSURFG)+E0*WEIGHT
                ENDIF
              ENDIF
            ELSEIF (ITYP.EQ.3) THEN
              LOGION(IION,ISTRA)=.TRUE.
              IF (LPPIO) PPIO(IION,NCELLT)=PPIO(IION,NCELLT)+WEIGHT
              IF (LEPIO) EPIO(NCELLT)=EPIO(NCELLT)+E0*WEIGHT
              IF (MSURF.GT.0) THEN
                IF (LPRFPIO)
     .            PRFPIO(IION,MSURF)=PRFPIO(IION,MSURF)+WEIGHT
                IF (LERFPIO)
     .            ERFPIO(IION,MSURF)=ERFPIO(IION,MSURF)+E0*WEIGHT
                IF (MSURFG.GT.0) THEN
                  IF (LPRFPIO)
     .              PRFPIO(IION,MSURFG)=PRFPIO(IION,MSURFG)+WEIGHT
                  IF (LERFPIO)
     .              ERFPIO(IION,MSURFG)=ERFPIO(IION,MSURFG)+E0*WEIGHT
                ENDIF
              ENDIF
            ENDIF
            IF (NADSI.GE.1) CALL UPSUSR(WEIGHT,2)
            IF (NADSPC.GE.1) CALL CALC_SPECTRUM(WEIGHT,2)
          ENDIF
C
C  RESTORE INCIDENT PARTICLE, FOR SURFACE REFLECTION ROUTINE
C
          IF (ILSPT(MSURF).NE.0) THEN
            E0=E0S
            WEIGHT=WEIGHS
            VEL=VELS
            VELX=VELXS
            VELY=VELYS
            VELZ=VELZS
            ISPZ=ISPZS
            LGPART=.FALSE.
          ENDIF
C
C
C  NEXT: CALL REFLECTION MODEL
C
540       CONTINUE
          CALL REFLC1 (WMINS,FMASS,FCHAR,NPRT(ISPZ),
     .                 ISRF(ISPZ,MSURF),ISRT(ISPZ,MSURF))
          ISPZ=ISPEZ(ITYP,IPHOT,IATM,IMOL,IION,IPLS)
C
          IF (NLTRC.AND.TRCHST) THEN
            IF (LGPART) THEN
              WRITE (6,*) 'AFTER SUBR. REFLEC: '
              WRITE (6,'(1X,A8)') TEXTS(ISPZ)
              CALL MASR6 (
     .           'VELX,VELY,VELZ,VEL,E0,WEIGHT                    ',
     .            VELX,VELY,VELZ,VEL,E0,WEIGHT)
            ELSE
              WRITE (6,*) 'ABSORBED IN SUBR. REFLEC'
            ENDIF
          ENDIF
C
          IF (MSURF.GT.0) THEN
            IF (ITYP.EQ.1) THEN
              IF (LPRFPAT) PRFPAT(IATM,MSURF)=PRFPAT(IATM,MSURF)+WEIGHT
              IF (LERFPAT) 
     .          ERFPAT(IATM,MSURF)=ERFPAT(IATM,MSURF)+E0*WEIGHT
              IF (MSURFG.GT.0) THEN
                IF (LPRFPAT) 
     .            PRFPAT(IATM,MSURFG)=PRFPAT(IATM,MSURFG)+WEIGHT
                IF (LERFPAT) 
     .            ERFPAT(IATM,MSURFG)=ERFPAT(IATM,MSURFG)+E0*WEIGHT
              ENDIF
            ELSEIF (ITYP.EQ.2) THEN
              IF (LPRFPML) PRFPML(IMOL,MSURF)=PRFPML(IMOL,MSURF)+WEIGHT
              IF (LERFPML) 
     .          ERFPML(IMOL,MSURF)=ERFPML(IMOL,MSURF)+E0*WEIGHT
              IF (MSURFG.GT.0) THEN
                IF (LPRFPML) 
     .            PRFPML(IMOL,MSURFG)=PRFPML(IMOL,MSURFG)+WEIGHT
                IF (LERFPML) 
     .            ERFPML(IMOL,MSURFG)=ERFPML(IMOL,MSURFG)+E0*WEIGHT
              ENDIF
            ELSEIF (ITYP.EQ.3) THEN
              IF (LPRFPIO) PRFPIO(IION,MSURF)=PRFPIO(IION,MSURF)+WEIGHT
              IF (LERFPIO) 
     .          ERFPIO(IION,MSURF)=ERFPIO(IION,MSURF)+E0*WEIGHT
              IF (MSURFG.GT.0) THEN
                IF (LPRFPIO) 
     .            PRFPIO(IION,MSURFG)=PRFPIO(IION,MSURFG)+WEIGHT
                IF (LERFPIO) 
     .            ERFPIO(IION,MSURFG)=ERFPIO(IION,MSURFG)+E0*WEIGHT
              ENDIF
            ENDIF
          ENDIF
C
          IF (NLSTOR) CALL STORE(1)
          IF (NADSI.GE.1) CALL UPSUSR(WEIGHT,2)
          IF (NADSPC.GE.1) CALL CALC_SPECTRUM(WEIGHT,2)
C
        ELSEIF (NLVOL(ISTRA)) THEN
C
C  IDENTIFY "INCIDENT" BULK PARTICLE
C  SAMPLE FROM MAXWELLIAN AT LOCAL PLASMA PARAMETERS TIIN AND (VXIN,VYIN,VZIN)
C  IN CELL ICELL=NCELL
C
!pb          DO ILOOP=1,1000000
          NFLAG=2
          IDUM=1
          CALL VELOCX(NCELL,VXO,VYO,VZO,VO,IO,NO,VELQ,NFLAG,
     .                IDUM,DUMT,DUMV)
          E0=VELQ*CVRSSP(IPLS)
          LOGPLS(IPLS,ISTRA)=.TRUE.
          WTOTP(IPLS,ISTRA)=WTOTP(IPLS,ISTRA)-WEIGHT
          ETOTP(ISTRA)=ETOTP(ISTRA)-E0*WEIGHT
          IF (NLTRC) CALL CHCTRC(X0,Y0,Z0,0,1)
          IF (NLSTOR) CALL STORE(2)
C
C  BULK SPECIES DONE
C  NEXT: IDENTIFY RESULTING TEST PARTICLE SPECIES
C  FOR THIS: FIRST FIND IRRC
C
C  SORLIM GT.0, HENCE: VOLUME RECOMBINATION SOURCE RATES ON TABRC1
C  RECOMBINING BULK ION (IPLS,E0,WEIGHT,...) IS NOW IDENTIFIED
C  FIND TYPE AND SPECIES OF NEW TEST PARTICLE FROM RECOMB. PROCESS: IRRC
          ISTEP=SORIND(IVOLM,ISTRA)
          IF (ISTEP.EQ.0) THEN
            IF (SORLIM(IVOLM,ISTRA).LE.0._DP) THEN
              WRITE (6,*) 'SPECIES DISTRIBUTION AFTER SAMUSR ? '
              WRITE (6,*) 'EXIT FROM LOCATE '
              CALL EXIT_OWN(1)
            ENDIF
C  FIND RECOMBINATION PROCESS IRRC (AMONGST THOSE AVAILABLE FOR IPLS)
            IF (NPRCI(IPLS).EQ.1) THEN
              IRRC=LGPRC(IPLS,1)
            ELSE
              CUMDIS(0)=0.
              DO IIRC=1,NPRCI(IPLS)
                IRRC=LGPRC(IPLS,IIRC)
                IF (NSTORDR >= NRAD) THEN
                  CUMDIS(IIRC)=CUMDIS(IIRC-1)+TABRC1(IRRC,NCELL)
                ELSE
                  CUMDIS(IIRC)=CUMDIS(IIRC-1)+FTABRC1(IRRC,NCELL)
                END IF
              END DO
C  SAMPLE IIRC (AND HENCE: IRRC) FROM CUMDIS
              ZEP1=RANF_EIRENE()*CUMDIS(NPRCI(IPLS))
              DO IRC=1,NPRCI(IPLS)-1
                IF (ZEP1.LE.CUMDIS(IRC)) THEN
                  IIRC=IRC
                  GOTO 560
                ENDIF
              ENDDO
              IIRC=NPRCI(IPLS)
560           IRRC=LGPRC(IPLS,IIRC)
            ENDIF
          ELSE
C  RECOMBINATION PROCESS IRRC IS KNOWN FOR THIS SUBSTRATUM
            IRRC=ISTEP
          ENDIF
C
C  IRRC NOW IDENTIFIED
C
          IF (NATPRC(IRRC).GT.0) THEN
            ITYP=1
            IATM=NATPRC(IRRC)
            RSQDV=RSQDVA(IATM)
            IF (IATM.LE.0.OR.IATM.GT.NATMI) GOTO 999
          ELSEIF (NMLPRC(IRRC).GT.0) THEN
            ITYP=2
            IMOL=NMLPRC(IRRC)
            RSQDV=RSQDVM(IMOL)
            IF (IMOL.LE.0.OR.IMOL.GT.NMOLI) GOTO 999
          ELSEIF (NIOPRC(IRRC).GT.0) THEN
            ITYP=3
            IION=NIOPRC(IRRC)
            RSQDV=RSQDVI(IION)
            IF (IION.LE.0.OR.IION.GT.NIONI) GOTO 999
csw added branch
          ELSEIF (NPHPRC(IRRC).GT.0) THEN
            ITYP=0
            IPHOT=NPHPRC(IRRC)
            RSQDV=0.
            IF(IPHOT.LE.0.OR.IPHOT.GT.NPHOTI) GOTO 999
          ELSE
            GOTO 999
          ENDIF
          ISPZ=ISPEZ(ITYP,IPHOT,IATM,IMOL,IION,IPLS)
C
C  SPECIES IDENTIFIED
C  NEXT: VELOCITY, ENERGY, ETC...
C
C  OLD DEFAULT: SAMPLING FROM LOCAL MAXWELLIAN, I.E., USE BULK VELOCITY
C         E0=E0
C         VEL=VEL
C  NEW OPTIONS
          IF (NEMOD1.EQ.1) THEN
C  MONOENERGETIC, ISOTROP
            EMAX=SORENI(ISTRA)
            E0=EMAX
            VEL=SQRT(E0)*RSQDV
            IF (INIV3.EQ.0) CALL FISOTR
            VELX=FI1(INIV3)
            VELY=FI2(INIV3)
            VELZ=FI3(INIV3)
            INIV3=INIV3-1
          ELSEIF (NEMOD1.EQ.9) THEN
!  especially for test against raytracing
!            E0=TEWL
!            VEL=CLIGHT
!            VELX=VXWL(1)
!            VELY=VYWL(1)
!            VELZ=VZWL(1)
!            il=istra
!            ignd=3
!            icell=ncell
!            if (nrearc(irrc) /= idreac) call get_reaction(nrearc(irrc))
!            e00=reaction%e0
!            call  ph_vdwprof(icell,hw,shift,dvdw,.true.)
!            de = e0-e00
!            fac = ph_lorvdw(de, hw, shift, dvdw, icell,0)
!            dwde=1._dp
!            weight=weight*fac*dwde

            KK = NREARC(IRRC)
            call get_reaction(kk)
            e00=reaction%e0
            ipl=reaction%ignd
            VEL=CLIGHT
! Achtung!!!!!!!!!
! irot =1 ist falsch, wenn das Photon mehrere Reaktionen ausfuehren kann
            irot=1

            IF (X1LINE(IVOLM,NCELL) < 0._DP) THEN

              e0=e00
              zmfp_e00=fpathph(ncell,cflag)
              zmfp_cut = TDGTEMX*celdia(ncell)
              if (zmfp_e00 > zmfp_cut) then
! mean free path at linecenter is large compared to cell diameter 
! line is not thick  =>  sample from whole line
                x1line(ivolm,ncell) = huge(1._dp)
                x2line(ivolm,ncell) = 0._dp

              else

! mean free path at linecenter is small compared to cell diameter
! line is thick  =>  sample from wings only
             
! suche linkes Ende des Intervalls
                call PH_GETCOEFF(kk,iphot,0,ncell,ipl,irot,fac_e00,res)
                if (hwvdw < eps30) hwvdw = e00 - eps6
                fac_e0 = fac_e00
                zmfp_e0 = zmfp_e00
                xl = e00
                yl = zmfp_e00
                do while (zmfp_e0 < zmfp_cut)
                  xr = xl
                  yr = yl
                  xl = xl-hwvdw
                  e0 = xl
                  call PH_GETCOEFF(kk,iphot,0,ncell,ipl,irot,fac_e0,res)
                  zmfp_e0 = zmfp_e00*fac_e00/fac_e0
                  yl = zmfp_e0 
                  if (xl < hwvdw) exit
                end do

                e0 = xl

                do while ((yl-yr)/yl > 1.E-3_dp)
                  xm = (xr + xl) * 0.5_dp 
                  e0 = xm 
                  call PH_GETCOEFF(kk,iphot,0,ncell,ipl,irot,fac_e0,res)
                  zmfp_e0 = zmfp_e00*fac_e00/fac_e0
                  ym = zmfp_e0 
                  if (ym < zmfp_cut) then
                    xr = xm
                    yr = ym
                  else if (ym > zmfp_cut) then
                    xl = xm
                    yl = ym
                  else           ! getroffen
                    xl = xm
                    xr = xm
                    exit
                  end if
                end do
                x1line(ivolm,ncell) = xl

! suche rechtes Ende des Intervalls
                xr = e00
                yr = zmfp_e00       
                zmfp_e0 = zmfp_e00
                do while (zmfp_e0 < zmfp_cut)
                  xl = xr
                  yl = yr
                  xr = xr+hwvdw
                  e0 = xr
                  call PH_GETCOEFF(kk,iphot,0,ncell,ipl,irot,fac_e0,res)
                  zmfp_e0 = zmfp_e00*fac_e00/fac_e0
                  yr = zmfp_e0  
                end do
            
                do while ((yr-yl)/yr > 1.E-3_dp)
                  xm = (xr + xl) * 0.5_dp 
                  e0 = xm 
                  call PH_GETCOEFF(kk,iphot,0,ncell,ipl,irot,fac_e0,res)
                  zmfp_e0 = zmfp_e00*fac_e00/fac_e0
                  ym = zmfp_e0 
                  if (ym < zmfp_cut) then
                    xl = xm
                    yl = ym
                  else if (ym > zmfp_cut) then
                    xr = xm
                    yr = ym
                  else           ! getroffen
                    xl = xm
                    xr = xm
                    exit
                  end if
                end do
                x2line(ivolm,ncell) = xr

              end if

            END IF

C  PHOTON EMISSION PROFILE OPTIONS 0-4
CDR  SAMPLE ONLY FROM LINE PROFILES WITHOUT DOPPLER CONTRIBUTION
CDR  I.E., IN THE REST FRAME OF THE EMITTING ATOM
CDR  SAVE VELOCITY OF EMITTING (BULK) PARTICLE FOR LATER DOPPLER CORRECTION
            VEL_B=VEL
            VELX_B=VELX
            VELY_B=VELY
            VELZ_B=VELZ
            KK = NREARC(IRRC)
            E0=PH_ENERGY(IPHOT,NCELL,KK,IPLS,NL_add_Doppler)
            VEL=CLIGHT
            IF (INIV3.EQ.0) CALL FISOTR
            VELX=FI1(INIV3)
            VELY=FI2(INIV3)
            VELZ=FI3(INIV3)
            INIV3=INIV3-1
CDR  CORRECT FOR DOPPLER SHIFT: XNU = XNU_0*(1-N*VEL_B/CLIGHT)
            if (NL_add_Doppler) then
              VN=VEL_B*(VELX_B*VELX+VELY_B*VELY+VELZ_B*VELZ)
              E0=E0*(1._DP-VN/CLIGHT)
            endif

            if ((e0 > x1line(ivolm,ncell)) .and. 
     .          (e0 < x2line(ivolm,ncell))) then
              lgpart = .false.
              weight = 0._dp
            end IF

          ELSEIF (ITYP.EQ.0) THEN
C  PHOTON EMISSION PROFILE OPTIONS 0-4
CDR  SAMPLE ONLY FROM LINE PROFILES WITHOUT DOPPLER CONTRIBUTION
CDR  I.E., IN THE REST FRAME OF THE EMITTING ATOM
CDR  SAVE VELOCITY OF EMITTING (BULK) PARTICLE FOR LATER DOPPLER CORRECTION
            VEL_B=VEL
            VELX_B=VELX
            VELY_B=VELY
            VELZ_B=VELZ
            KK = NREARC(IRRC)
            E0=PH_ENERGY(IPHOT,NCELL,KK,IPLS,NL_add_Doppler)
            VEL=CLIGHT
            IF (INIV3.EQ.0) CALL FISOTR
            VELX=FI1(INIV3)
            VELY=FI2(INIV3)
            VELZ=FI3(INIV3)
            INIV3=INIV3-1
CDR  CORRECT FOR DOPPLER SHIFT: XNU = XNU_0*(1-N*VEL_B/CLIGHT)
            if (NL_add_Doppler) then
              VN=VEL_B*(VELX_B*VELX+VELY_B*VELY+VELZ_B*VELZ)
              E0=E0*(1._DP-VN/CLIGHT)
            endif
!            msurf=2
!            call calc_spectrum (1._dp,1)
          ELSE
C  OLD DEFAULT, NOTHING TO BE DONE
          ENDIF
!          end do ! iloop

!          if (nadspc > 1) then
!            ean=estiml(2)%pspc%spcmin+0.5_dp*estiml(2)%pspc%spcdel
!            een=estiml(2)%pspc%spcmax
!            de=estiml(2)%pspc%spcdel
!            nen=estiml(2)%pspc%nspc
!          else
!            ean=reaction%e0-1.E-2
!            een=reaction%e0+1.E-2
!            de=(een-ean)/10000
!            nen=10001
!          end if
!          allocate(eplot(nen))
!          allocate(y1plot(nen))
!          allocate(y2plot(nen))
!          ipl=reaction%ignd
! Achtung!!!!!!!!!
! irot =1 ist falsch, wenn das Photon mehrere Reaktionen ausfuehren kann
!          irot=1
!          do i=1,nen
!            e0=ean+(i-1)*de
!            eplot(i)=e0
!            call PH_GETCOEFF(kk,iphot,0,ncell,ipl,irot,fac,res)
!            msurf=3
!            call calc_spectrum (fac*ESTIML(2)%PSPC%SPCDEL*1.E6,1)
!            y1plot(i) = fac
!            y2plot(i) = fpathph(ncell,cflag)
!          end do

!          flxfc=1._dp/1000000
!          DO ISPC=1,NADSPC
!            ESTIML(ISPC)%PSPC%SPC = ESTIML(ISPC)%PSPC%SPC*FLXFC*
!     .                              ESTIML(ISPC)%PSPC%SPCDELI
!            ESTIML(ISPC)%PSPC%SPCINT = SUM(ESTIML(ISPC)%PSPC%SPC*
!     .                                     ESTIML(ISPC)%PSPC%SPCDEL)
!          END DO
!          call plteir(1)

!          call grnxtf
!          call grsclc (5.,2.,35.,27.)
!          call grsclv (eplot(1),minval(y1plot),
!     .                 eplot(nen),maxval(y1plot))
!          call graxs (9,'X=1,Y=1,A',1,' ',1,' ')
!          call grnwpn(2)
!          call grln(eplot,y1plot,nen)
!          call grsclv (eplot(1),minval(y2plot),
!     .                 eplot(nen),maxval(y2plot))
!          call grnwpn(1)
!          call graxs (9,'X=2,Y=2,A',1,' ',1,' ')
!          call grnwpn(3)
!          call grln(eplot,y2plot,nen)
!          call grnwpn(1)
!          call grend
!          stop

 4711     continue
C
          IF (NLTRC.AND.TRCHST) THEN
            WRITE (6,*) 'AFTER RECOMBINATION: '
            CALL MASJ6 
     .           ('ITYP,IPHOT,IATM,IMOL,IION,IPLS                  ',
     .             ITYP,IPHOT,IATM,IMOL,IION,IPLS)
          ENDIF
C
          IF (NLSTOR) CALL STORE(1)
C
        ELSEIF (NLLNE(ISTRA)) THEN
          WRITE (6,*) 'BULK ION LINE SOURCE NOT READY, EXIT CALLED '
          CALL EXIT_OWN(1)
C
        ELSEIF (NLPNT(ISTRA)) THEN
          WRITE (6,*) 'BULK ION POINT SOURCE NOT READY, EXIT CALLED '
          CALL EXIT_OWN(1)
        ENDIF
C
        IF (ITYP.EQ.1) THEN        
          LOGATM(IATM,ISTRA)=.TRUE.
          IF (LPPAT) PPAT(IATM,NCELLT)=PPAT(IATM,NCELLT)+WEIGHT
          IF (LEPAT) EPAT(NCELLT)=EPAT(NCELLT)+E0*WEIGHT
          LAST_EVENT%ISPEZ = IATM
        ELSEIF (ITYP.EQ.2) THEN
          LOGMOL(IMOL,ISTRA)=.TRUE.
          IF (LPPML) PPML(IMOL,NCELLT)=PPML(IMOL,NCELLT)+WEIGHT
          IF (LEPML) EPML(NCELLT)=EPML(NCELLT)+E0*WEIGHT
          LAST_EVENT%ISPEZ = IMOL
        ELSEIF (ITYP.EQ.3) THEN
          LOGION(IION,ISTRA)=.TRUE.
          IF (LPPIO) PPIO(IION,NCELLT)=PPIO(IION,NCELLT)+WEIGHT
          IF (LEPIO) EPIO(NCELLT)=EPIO(NCELLT)+E0*WEIGHT
          LAST_EVENT%ISPEZ = IION
csw added branch
        ELSEIF (ITYP.EQ.0) THEN
          LOGPHOT(IPHOT,ISTRA)=.TRUE.
          IF (LPPPHT) PPPHT(IPHOT,NCELLT)=PPPHT(IPHOT,NCELLT)+WEIGHT
          IF (LEPPHT) EPPHT(NCELLT)=EPPHT(NCELLT)+E0*WEIGHT
          LAST_EVENT%ISPEZ = IPHOT
          STEMIS=E0*WEIGHT
        ENDIF
C
      ENDIF
C
5000  CONTINUE

      LAST_EVENT%IFLAG = 1
      LAST_EVENT%NCELL = NCELLT
      LAST_EVENT%ITYP = ITYP
      LAST_EVENT%E0 = E0
      LAST_EVENT%WEIGHT = WEIGHT
      IF (ITYP.EQ.1) THEN
        LAST_EVENT%ISPEZ = IATM
      ELSEIF (ITYP.EQ.2) THEN
        LAST_EVENT%ISPEZ = IMOL
      ELSEIF (ITYP.EQ.3) THEN
        LAST_EVENT%ISPEZ = IION
      ELSEIF (ITYP.EQ.0) THEN
        LAST_EVENT%ISPEZ = IPHOT
      ENDIF

C
C  HAS THE SOURCE PARTICLE BEEN ABSORBED IN SUBR. REFLEC OR SPUTER?
C
      IF (.NOT.LGPART) RETURN
C
C  IS THE PARTICLE LAUNCHED OUTSIDE THE COMPUTATIONAL BOX?
C
C  TEST FOR CORRECT CELL NUMBER AT BIRTH POINT
C  KILL PARTICLE, IF WRONG CELL INDICES
C
      IF (NLSRFX) THEN
C  RADIAL CELL NO. MAY BE WRONG
      ELSEIF (NLSRFY) THEN
C  POLOIDAL CELL NO. MAY BE WRONG
        IF (LEVGEO.EQ.1) THEN
          SG=SIGN(1._DP,VELY)
        ELSEIF (LEVGEO.EQ.2.OR.LEVGEO.EQ.3) THEN
          SG=VELX*PPLNX(NRCELL,MPSURF)+VELY*PPLNY(NRCELL,MPSURF)
        ENDIF
        IF (SG.LT.0) THEN
          NPCELL=MPSURF-1
        ELSEIF (SG.GT.0) THEN
          NPCELL=MPSURF
        ELSE
          WRITE (6,*) 'ERROR EXIT IN LOCATE, SG=0 '
          CALL EXIT_OWN(1)
        ENDIF
        IPOLG=NPCELL
      ELSEIF (NLSRFZ) THEN
C  TOROIDAL CELL NO. MAY BE WRONG
      ENDIF

      IF (NLTEST) THEN
        CALL CLLTST(*997)
      ELSE
        NLTST=.FALSE.
        NLTST=NLTST.OR.(NLRAD.AND.(NRCELL.GT.NR1ST.OR.NRCELL.LT.0))
        NLTST=NLTST.OR.(NLPOL.AND.(NPCELL.GT.NP2ND.OR.NPCELL.LT.1))
        NLTST=NLTST.OR.(NLTOR.AND.(NTCELL.GT.NT3RD.OR.NTCELL.LT.1))
        NLTST=NLTST.OR.(NRCELL.EQ.0.AND.
     .                            (NACELL.GT.NRADD.OR.NACELL.LT.1))
        IF (NLTST) GOTO 995
      ENDIF
      RETURN

      ENTRY LOCAT2

      IF (ALLOCATED(WMM)) THEN
        DEALLOCATE (WMM)
        DEALLOCATE (WEISPZ)
        DEALLOCATE (IICSOR) 
        DEALLOCATE (ITISOR)
        DEALLOCATE (IUPSOR) 
        DEALLOCATE (IFPSOR)
      END IF

      RETURN
C
990   CONTINUE
      WRITE (6,*) 'ERROR IN LOCATE: ILSIDE OF SOURCE SURFACE IS 0.'
      WRITE (6,*) 'THUS NO OUTER NORMAL CAN BE DEFINED. EXIT CALLED'
      WRITE (6,*) 'SET EITHER ILSIDE NE 0 OR USE SORIFL FLAG '
      WRITE (6,*) 'MSURF,ISTSF,NRCELL,NPCELL,NTCELL '
      WRITE (6,*)  MSURF,ITRSF,NRCELL,NPCELL,NTCELL
      CALL EXIT_OWN(1)
991   CONTINUE
      WRITE (6,*) 'ERROR IN LOCATE: INCONSISTENT INPUT FLAGS   '
      WRITE (6,*) 'MSURF = ',MSURF
      CALL EXIT_OWN(1)
992   CONTINUE
      WRITE (6,*) 'ERROR IN LOCATE: RADON-NIKODYM CONDITION    '
      WRITE (6,*) 'VIOLATED FOR NON-ANALOG SOURCE SPECIES SAMPLING'
      WRITE (6,*) 'CHECK DATM,DMOL,DION OR DPLS ARRAYS (BLOCK) 6 '
      CALL EXIT_OWN(1)
995   CONTINUE
      WRITE (6,*) 'PARTICLE LAUNCHED OUTSIDE THE COMPUTATIONAL BOX'
      WRITE (6,*) 'OR WITH INVALID CELL INDICES'
      WRITE (6,*) 'NPANU,X0,Y0,Z0 ',NPANU,X0,Y0,Z0
      WRITE (6,*) 'NRCELL,NPCELL,NTCELL,NBLOCK,NACELL ',
     .             NRCELL,NPCELL,NTCELL,NBLOCK,NACELL
      CALL EXIT_OWN(1)
996   CONTINUE
      WRITE (6,*) 'BULK ION LAUNCHED IN WRONG DIRECTION'
      WRITE (6,*) 'NPANU,VXWL,VYWL,VZWL ',NPANU,VXWL(IPLS),VYWL(IPLS),
     .                                    VZWL(IPLS)
      WRITE (6,*) '      CRTX,CRTY,CRTZ ',CRTX,CRTY,CRTZ
      CALL EXIT_OWN(1)
997   CONTINUE
      WRITE (6,*) 'TEST PARTICLE LAUNCHED WITH INVALID CELL INDICES'
      IF (NLTRC) CALL CHCTRC(X0,Y0,Z0,16,18)
      IF (NLSTOR) CALL STORE(100)
      WEIGHT=0.
      LGPART=.FALSE.
      RETURN
998   CONTINUE
      WRITE (6,*) 'ERROR IN LOCATE: NEMODS,ITYP= ',NEMODS(ISTRA),ITYP
      WRITE (6,*) 'INVALID OPTION. TIWD= ',TIWD
      CALL EXIT_OWN(1)
999   CONTINUE
      WRITE (6,*) 'ERROR IN LOCATE: TYP OR SPECIES OUT OF RANGE'
      CALL EXIT_OWN(1)
      END
C  6.4.:  include torl in default step function
C
      SUBROUTINE SAMSRF
C
C  THIS SUBROUTINE SAMPLES THE INITIAL CO-ORDINATES OF A PARTICLE
C  HISTORY, WHICH STARTS ON A SURFACE
C
      USE PRECISION
      USE PARMMOD
      USE COMUSR
      USE CADGEO
      USE CCONA
      USE CLOGAU
      USE CINIT
      USE CUPD
      USE CPOLYG
      USE CGRID
      USE CTRCEI
      USE CGEOM
      USE CTETRA
      USE COMPRT
      USE CPES
      USE COMSOU
      USE CSTEP
      USE CLGIN
      USE CTRIG

      IMPLICIT NONE

      REAL(DP), INTENT(OUT) :: TEWL, VXWL(*), VYWL(*), VZWL(*),
     .                       TIWL(*), DIWL(*), EFWL(*), WEISPZ(*)
      INTEGER, INTENT(IN) :: NLSF
      REAL(DP) :: ZZ(3)
      REAL(DP) :: X1, Y1, Z1, X2, Y2, Z2, X3, Y3, Z3, ELLZZ1, EP1ZZ1,
     .          WINK, XR, FLX, STEP0, DELR, CS, STEP, FL, DET, PH,
     .          X0TEST, Y0TEST, S, AN, P, Q, VVX, D, VVI, VVY, BL,
     .          Z0TEST, RNF, ZH, STEP1, DELTA, ZM, XLAMDA, BABS, CTETHA
      INTEGER :: ISID, IDUM, LEARC1, NDUM, LEARC2, NT, IEN, IAN,
     .           LEARCA, ITET, ISGRD1, IS2, IP, ISTEP, ISGRD2,
     .           IS1, ISGRD3, NSMX, K, NL3J, ISTR, ISR, NL2J, NL1J,
     .           IERROR, ISOR, ISRFS, ICOUNT, IPLG, I, ILTR, IAUSR,
     .           IBUSR, IRUSR, IPUSR, ITUSR, IK, J, JCALC, IINDEX, 
     .           KAN, KEN, ISRPB, ISRND, ITRI, IS, NBIN, INDSRF
      REAL(DP):: FF, TORL(NSTEP,NGITT)
      REAL(DP), EXTERNAL :: RANF_EIRENE
      INTEGER, EXTERNAL :: IDEZ
      REAL(DP), ALLOCATABLE, SAVE ::
     .        ALEFT(:,:,:), BRGHT(:,:,:), XI(:,:,:), XE(:,:,:)
      INTEGER, ALLOCATABLE, SAVE :: INDTEC(:,:)
      LOGICAL :: LOGTST
      INTEGER :: ITSIDE(3,4)
      DATA ITSIDE /1,2,3,
     .             1,4,2,
     .             2,4,3,
     .             3,4,1/
C
C  INITIALIZE DATA FOR SURFACE SAMPLING FOR STRATUM NO. ISTRA
C
      ENTRY SAMSF0

      DO ISTRA=1,NSTRAI

      IF (.NOT.NLSRF(ISTRA)) CYCLE

      IERROR=0

      IF (.NOT.ALLOCATED(INDTEC)) THEN
        ALLOCATE (INDTEC(3*NSRFS,NSTRA))
        ALLOCATE (ALEFT(3,NSRFS,NSTRA))
        ALLOCATE (BRGHT(3,NSRFS,NSTRA))
        ALLOCATE (XI(3,NSRFS,NSTRA))
        ALLOCATE (XE(3,NSRFS,NSTRA))
      END IF
C
C  LOOP OVER SOURCE SURFACES: ISRFS
C
      DO 1 ISRFS=1,NSRFSI(ISTRA)
C
        ISOR=SORLIM(ISRFS,ISTRA)
C
        IF (SORLIM(ISRFS,ISTRA).GT.0.AND.INDIM(ISRFS,ISTRA).EQ.1.) THEN
          IF (INGRDA(ISRFS,ISTRA,1).NE.INGRDE(ISRFS,ISTRA,1)) THEN
            WRITE (6,*) 'WARNING FROM SAMSF0, ISTRA= ',ISTRA
            WRITE (6,*) 'NEW INPUT FOR INGRDA,INGRDE....'
            WRITE (6,*) 'AUTOMATIC CORRECTION CARRIED OUT '
            INGRDA(ISRFS,ISTRA,2)=INGRDA(ISRFS,ISTRA,1)
            INGRDE(ISRFS,ISTRA,2)=INGRDE(ISRFS,ISTRA,1)
            INGRDA(ISRFS,ISTRA,1)=INSOR(ISRFS,ISTRA)
            INGRDE(ISRFS,ISTRA,1)=INSOR(ISRFS,ISTRA)
          ENDIF
        ENDIF
C  HAS THIS SURFACE SOURCE A PREPROGRAMMED DISTRIBUTION
C
        IF (ISOR.LE.0) THEN
          ISR=ISRFS
          ISTR=ISTRA
          CALL SM0USR(ISR,ISTR,
     .                SORAD1(ISR,ISTR),SORAD2(ISR,ISTR),
     .                SORAD3(ISR,ISTR),SORAD4(ISR,ISTR),
     .                SORAD5(ISR,ISTR),SORAD6(ISR,ISTR))
          GOTO 1
        ENDIF
C  YES
        NL1J=ISRFS
        NL2J=NL1J+NSRFS
        NL3J=NL2J+NSRFS
        INDTEC(NL1J,ISTRA)=IDEZ(ISOR,1,4)
        INDTEC(NL2J,ISTRA)=IDEZ(ISOR,2,4)
        INDTEC(NL3J,ISTRA)=IDEZ(ISOR,3,4)
C
C  IS A STEP FUNCTION REQUESTED?
C
        ISTEP=0
        IF (INDTEC(NL1J,ISTRA).NE.4.AND.INDTEC(NL2J,ISTRA).NE.4.AND.
     .      INDTEC(NL3J,ISTRA).NE.4) GOTO 7
C
C  YES. CHECK INPUT DATA AND STORAGE
C
        ISTEP=SORIND(ISRFS,ISTRA)
C
        IF (ISTEP.EQ.0) THEN
          WRITE (6,*) 'ERROR IN PRIMARY SOURCE DATA '
          WRITE (6,*) 'STEPFUNCTION REQUESTED FOR SOURCE SURFACE '
          WRITE (6,*) 'NO. ', INSOR(ISRFS,ISTRA),' BUT SORIND.EQ.0.'
          CALL EXIT_OWN(1)
        ELSEIF (ISTEP.GT.NSTEP) THEN
          CALL MASPRM('NSTEP',5,NSTEP,'ISTEP',5,ISTEP,IERROR)
          CALL EXIT_OWN(1)
        ENDIF
C
C  HAS THIS STEPFUNCTION NO. ISTEP STILL TO BE INITIALIZED?
C
        IF (ISTUF(ISTEP).EQ.0) THEN
C  YES
C
C  INITIALIZE STEPFUNCTION NO. ISTEP BY DEFAULT MODEL:
C  DEFAULT MODEL FOR ISTEP: NPLSI STEP FUNCTIONS FROM BULK ION FLUXES
C
C  FIRST: RADIAL STEP FUNCTION:
C
          IF (INDTEC(NL1J,ISTRA).EQ.4) THEN
C
C  USE X-OR RADIAL DISTRIBUTION OF ION FLUX 0.5*NI(R,Y0,Z0)*CS(R,Y0,Z0) (AMP/CM**2)
C  WITH: CS = COMMON ION ACOUSTIC SPEED
C  Y0:
            IF (INDIM(ISRFS,ISTRA).NE.2.OR..NOT.NLPOL) THEN
              IP=1
            ELSEIF (INDIM(ISRFS,ISTRA).EQ.2.AND.NLPOL) THEN
              IP=INSOR(ISRFS,ISTRA)
            ENDIF
C
C  IN STANDARD GEOMETRY BLOCK  IBLOCK=ISTEP
C
            IF (LEVGEO.EQ.1) THEN
              KAN=1
              KEN=NR1STM
              DO K=1,NR1STM
                IRSTEP(ISTEP,K)=K
                IASTEP(ISTEP,K)=0
                IBSTEP(ISTEP,K)=1
                IPSTEP(ISTEP,K)=IP
                ITSTEP(ISTEP,K)=1
                RRSTEP(ISTEP,K)=RSURF(K)
              ENDDO
              NBIN=NR1ST
C  toroidal length: to be written
              TORL(ISTEP,KAN:KEN)=1._DP
            ELSEIF (LEVGEO.EQ.2.OR.LEVGEO.EQ.3) THEN
              KAN=1
              KEN=NR1STM
              DO K=1,NR1STM
                IRSTEP(ISTEP,K)=K
                IASTEP(ISTEP,K)=0
                IBSTEP(ISTEP,K)=ISTEP
                IPSTEP(ISTEP,K)=IP
                ITSTEP(ISTEP,K)=1
                RRSTEP(ISTEP,K)=BGLP(K,IP)
              ENDDO
              NBIN=NR1ST
C  toroidal length: to be written
              TORL(ISTEP,KAN:KEN)=1._DP
            ELSEIF (LEVGEO.EQ.4) THEN
              K=0
              RRSTEP(ISTEP,1) = 0._DP
              INDSRF=INSOR(ISRFS,ISTRA)
              IF (INDSRF < 0) INDSRF=NLIM+ABS(INDSRF)
              DO ITRI=1,NTRII
                DO IS=1,3
                  IF (INMTI(IS,ITRI) == INDSRF) THEN
                    K=K+1
                    IS1=IS+1
                    IF (IS1.GT.3) IS1=1
                    IRSTEP(ISTEP,K)=ITRI
                    IPSTEP(ISTEP,K)=IS
                    ITSTEP(ISTEP,K)=1
                    IASTEP(ISTEP,K)=0
                    IBSTEP(ISTEP,K)=1
                    BABS=SQRT(BXIN(ITRI)**2+BYIN(ITRI)**2+BZIN(ITRI)**2)
                    CTETHA=ABS((PTRIX(IS,ITRI)*BXIN(ITRI) + 
     .                          PTRIY(IS,ITRI)*BYIN(ITRI))/BABS)
                    RRSTEP(ISTEP,K+1)=RRSTEP(ISTEP,K) + CTETHA*SQRT(
     .              (XTRIAN(NECKE(IS,ITRI))-XTRIAN(NECKE(IS1,ITRI)))**2+
     .              (YTRIAN(NECKE(IS,ITRI))-YTRIAN(NECKE(IS1,ITRI)))**2)
C  toroidal length: currently: torus option by default. to be completed
                    TORL(ISTEP,K)=
     .                (XTRIAN(NECKE(IS,ITRI))+XTRIAN(NECKE(IS1,ITRI)))
     .                /2._DP
                    TORL(ISTEP,K)=TORL(ISTEP,K)*2._DP*PIA
                  END IF
                END DO
              END DO
              KAN=1
              KEN=K
              NBIN=K+1
            ELSEIF (LEVGEO.EQ.5) THEN
              K=0
              RRSTEP(ISTEP,1) = 0._DP
              DO ITET=1,NTET
                DO IS=1,4
                  IF (INMTIT(IS,ITET) == NLIM+INSOR(ISRFS,ISTRA)) THEN
                    CALL TET_STEP (ISTEP,ITET,IS,K)
                  END IF
                END DO
              END DO
              KAN=1
              KEN=K
C  toroidal length: already included in RRSTEP, which is a surface area
              TORL(ISTEP,KAN:KEN)=1._DP
              NBIN=K+1
            ELSEIF (LEVGEO.GE.6) THEN
              GOTO 3
            ENDIF
C
            DO K=KAN,KEN
              NBLCKA=NSTRD*(IBSTEP(ISTEP,K)-1)+IASTEP(ISTEP,K)
              NCELL=IRSTEP(ISTEP,K)+
     .            ((IPSTEP(ISTEP,K)-1)+(ITSTEP(ISTEP,K)-1)*NP2T3)*
     .             NR1P2+NBLCKA
              TESTEP(ISTEP,K)=TEIN(NCELL)
              DO 2 IPLS=1,NPLSI
                TISTEP(IPLS,ISTEP,K)=TIIN(IPLS,NCELL)
                IF (INDPRO(4) == 8) THEN
                  CALL VECUSR(2,VXSTEP(IPLS,ISTEP,K),
     .                          VYSTEP(IPLS,ISTEP,K),
     .                          VZSTEP(IPLS,ISTEP,K),IPLS)
                ELSE
                  VXSTEP(IPLS,ISTEP,K)=VXIN(IPLS,NCELL)
                  VYSTEP(IPLS,ISTEP,K)=VYIN(IPLS,NCELL)
                  VZSTEP(IPLS,ISTEP,K)=VZIN(IPLS,NCELL)
                END IF
                DISTEP(IPLS,ISTEP,K)=DIIN(IPLS,NCELL)
                CS=CVEL2A*SQRT((TIIN(IPLS,NCELL)+TEIN(NCELL))/
     .             RMASSP(IPLS))
                FF=ELCHA*CS
                FLSTEP(IPLS,ISTEP,K)=FF*DIIN(IPLS,NCELL)*TORL(ISTEP,K)
2             CONTINUE
            END DO
3           CONTINUE
C
C  LAST INTERVAL BOUNDARY FOR SAMPLING DISTRIBUTION
C
            IF (LEVGEO.EQ.1) THEN
              RRSTEP(ISTEP,NR1ST)=RSURF(NR1ST)
            ELSEIF (LEVGEO.EQ.2.OR.LEVGEO.EQ.3) THEN
              RRSTEP(ISTEP,NR1ST)=BGLP(NR1ST,IP)
            ELSEIF (LEVGEO.GE.4) THEN
C  RRSTEP(ISTEP,NBIN) ALREADY SET ABOVE
            ENDIF
            FL=STEP(1,NPLSI,NBIN,ISTEP)
C
          ELSEIF (INDTEC(NL2J,ISTRA).EQ.4) THEN
            WRITE (6,*) 'DEFAULT STEP FUNCTIONS ONLY AVAILABLE FOR'
            WRITE (6,*) 'SAMPLING OF RADIAL CO-ORDINATE '
            WRITE (6,*) 'DEFINE STEP FUNCTION ELSEWHERE, EG. IN SAMUSR'
            WRITE (6,*) 'CALL EXIT '
            CALL EXIT_OWN(1)
C
          ELSEIF (INDTEC(NL3J,ISTRA).EQ.4) THEN
            WRITE (6,*) 'DEFAULT STEP FUNCTIONS ONLY AVAILABLE FOR'
            WRITE (6,*) 'SAMPLING OF RADIAL CO-ORDINATE '
            WRITE (6,*) 'DEFINE STEP FUNCTION ELSEWHERE, EG. IN SAMUSR'
            WRITE (6,*) 'CALL EXIT '
            CALL EXIT_OWN(1)
          ENDIF
C
        ENDIF
C
7       CONTINUE
C
C  DEFINE LEFT AND RIGHT BOUNDARY OF SAMPLING INTERVALS.
C
        IF (INDIM(ISRFS,ISTRA).EQ.1) THEN
C  SOURCE ON RADIAL SURFACE: SAMPLE SECOND AND THIRD CO-ORDINATE,
C                            COMPUTE FIRST CO-ORDINATE
C
          INDTEC(NL1J,ISTRA)=0
C
          ISGRD2=INGRDA(ISRFS,ISTRA,2)+INGRDE(ISRFS,ISTRA,2)
          ISGRD3=INGRDA(ISRFS,ISTRA,3)+INGRDE(ISRFS,ISTRA,3)
          IF ((LEVGEO.EQ.2.OR.LEVGEO.EQ.3).AND.ISGRD2.GT.0) THEN
            IS1=MAX0(1,INGRDA(ISRFS,ISTRA,2))
            IS2=MIN0(NP2ND,INGRDE(ISRFS,ISTRA,2))
            ALEFT(2,ISRFS,ISTRA)=BGL(INSOR(ISRFS,ISTRA),IS1)
            BRGHT(2,ISRFS,ISTRA)=BGL(INSOR(ISRFS,ISTRA),IS2)
          ELSEIF (LEVGEO.EQ.4.OR.LEVGEO.EQ.5) THEN
            ISTEP=IDINT(REAL(SORIND(ISRFS,ISTRA),KIND(1.D0)))
            IF (ISTEP.NE.0.AND.NSMAX(ISTEP).NE.0) THEN
              ALEFT(2,ISRFS,ISTRA)=RRSTEP(ISTEP,1)
              BRGHT(2,ISRFS,ISTRA)=RRSTEP(ISTEP,NSMAX(ISTEP))
            ELSE
              WRITE (6,*) ' ERROR IN SAMSRF '
              WRITE (6,*) ' INDIM=1 ONLY FORESEEN WITH STEPFUNCTION '
              WRITE (6,*) ' FOR LEVGEO=4 OR LEVGEO=5 '
              CALL EXIT_OWN(1)
            ENDIF
          ELSE
            ALEFT(2,ISRFS,ISTRA)=SORAD3(ISRFS,ISTRA)
            BRGHT(2,ISRFS,ISTRA)=SORAD4(ISRFS,ISTRA)
          ENDIF
          ALEFT(3,ISRFS,ISTRA)=SORAD5(ISRFS,ISTRA)
          BRGHT(3,ISRFS,ISTRA)=SORAD6(ISRFS,ISTRA)
        ENDIF
C
        IF (INDIM(ISRFS,ISTRA).EQ.2) THEN
C  SOURCE ON POLOIDAL SURFACE: SAMPLE FIRST AND THIRD CO-ORDINATE,
C                              COMPUTE SECOND CO-ORDINATE
C
          INDTEC(NL2J,ISTRA)=0
C
          ISGRD1=INGRDA(ISRFS,ISTRA,1)+INGRDE(ISRFS,ISTRA,1)
          ISGRD3=INGRDA(ISRFS,ISTRA,3)+INGRDE(ISRFS,ISTRA,3)
          IF ((LEVGEO.EQ.2.OR.LEVGEO.EQ.3).AND.ISGRD1.GT.0) THEN
            IS1=MAX0(1,INGRDA(ISRFS,ISTRA,1))
            IS2=MIN0(NR1ST,INGRDE(ISRFS,ISTRA,1))
            ALEFT(1,ISRFS,ISTRA)=BGLP(IS1,INSOR(ISRFS,ISTRA))
            BRGHT(1,ISRFS,ISTRA)=BGLP(IS2,INSOR(ISRFS,ISTRA))
          ELSE
            ALEFT(1,ISRFS,ISTRA)=SORAD1(ISRFS,ISTRA)
            BRGHT(1,ISRFS,ISTRA)=SORAD2(ISRFS,ISTRA)
          ENDIF
          ALEFT(3,ISRFS,ISTRA)=SORAD5(ISRFS,ISTRA)
          BRGHT(3,ISRFS,ISTRA)=SORAD6(ISRFS,ISTRA)
        ENDIF
C
        IF (INDIM(ISRFS,ISTRA).EQ.3) THEN
C  SOURCE ON TOROIDAL SURFACE: SAMPLE FIRST AND SECOND CO-ORDINATE,
C                              COMPUTE THIRD CO-ORDINATE
C
          INDTEC(NL3J,ISTRA)=0
C
          ISGRD1=INGRDA(ISRFS,ISTRA,1)+INGRDE(ISRFS,ISTRA,1)
          ISGRD2=INGRDA(ISRFS,ISTRA,2)+INGRDE(ISRFS,ISTRA,2)
C         IF (LEVGEO.EQ.3.AND.ISGRD1.GT.0) THEN
C         ELSE
            ALEFT(1,ISRFS,ISTRA)=SORAD1(ISRFS,ISTRA)
            BRGHT(1,ISRFS,ISTRA)=SORAD2(ISRFS,ISTRA)
C         ENDIF
          ALEFT(2,ISRFS,ISTRA)=SORAD3(ISRFS,ISTRA)
          BRGHT(2,ISRFS,ISTRA)=SORAD4(ISRFS,ISTRA)
        ENDIF
C
        IF (INDIM(ISRFS,ISTRA).EQ.4) THEN
C  SOURCE ON RADIAL AND POLOIDAL SURFACES:
C      SAMPLE ARC-LENGTH AND THIRD CO-ORDINATE,
C      COMPUTE FIRST AND SECOND CO-ORDINATE FROM ARCLENGTH
C
          INDTEC(NL2J,ISTRA)=0
C
          ISTEP=IDINT(REAL(SORIND(ISRFS,ISTRA),KIND(1.D0)))
          IF (ISTEP.NE.0.AND.NSMAX(ISTEP).NE.0) THEN
            ALEFT(1,ISRFS,ISTRA)=RRSTEP(ISTRA,1)
            BRGHT(1,ISRFS,ISTRA)=RRSTEP(ISTRA,NSMAX(ISTEP))
          ELSE
            WRITE (6,*) ' ERROR IN SAMSRF '
            WRITE (6,*) ' INDIM=4 ONLY FORESEEN WITH STEPFUNCTION '
            CALL EXIT_OWN(1)
          ENDIF
          ALEFT(3,ISRFS,ISTRA)=SORAD5(ISRFS,ISTRA)
          BRGHT(3,ISRFS,ISTRA)=SORAD6(ISRFS,ISTRA)
        ENDIF
C
        IF (INDIM(ISRFS,ISTRA).EQ.0) THEN
C  SOURCE ON ADDITIONAL SURFACE
          ALEFT(1,ISRFS,ISTRA)=SORAD1(ISRFS,ISTRA)
          BRGHT(1,ISRFS,ISTRA)=SORAD2(ISRFS,ISTRA)
          ALEFT(2,ISRFS,ISTRA)=SORAD3(ISRFS,ISTRA)
          BRGHT(2,ISRFS,ISTRA)=SORAD4(ISRFS,ISTRA)
          ALEFT(3,ISRFS,ISTRA)=SORAD5(ISRFS,ISTRA)
          BRGHT(3,ISRFS,ISTRA)=SORAD6(ISRFS,ISTRA)
        ENDIF
C
        IF (TRCSOU.AND.ISTEP.GT.0) THEN
          WRITE (6,*) 'FUNCTION STEP NO. ',ISTEP,': '
          WRITE (6,'(1X,A4,A12,5(2X,A7,I2,A1))')
     .    '   K','  RRSTEP    ',('FLSTEP(',IPLS,'): AMP/CM**2',
     .    IPLS=1,NPLSI)
          NSMX=NSMAX(ISTEP)
          DO 4 K=1,NSMX-1
            WRITE (6,'(1X,I4,1P,6E12.4/(5x,1P,6E12.4))')
     .               K,RRSTEP(ISTEP,K),
     .               (FLSTEP(IPLS,ISTEP,K),IPLS=1,NPLSI)
4         CONTINUE
          WRITE (6,'(1X,I4,1P,2E12.4)') NSMX,RRSTEP(ISTEP,NSMX)
          CALL LEER(1)
          WRITE (6,*) 'FLUX FLSTEP INTEGRATED ALONG RRSTEP: '
          DO 5 IPLS=1,NPLSI
            FLX=0.
            DO 6 K=1,NSMX-1
              DELR=RRSTEP(ISTEP,K+1)-RRSTEP(ISTEP,K)
              FLX=FLX+FLSTEP(IPLS,ISTEP,K)*DELR
6           CONTINUE
            CALL MASJ1R('IPLS,FLUX       ',IPLS,FLX)
5         CONTINUE
          CALL LEER(2)
        ENDIF
C
C
C  STEP FUNCTION INITIALISATION FINISHED.
C  NEXT: STORE SOME DATA TO SPEED UP SAMPLING FROM STEP FUNCTION
C
        ISPZ=0
        IF (NSPEZ(ISTRA).GT.0) ISPZ=NSPEZ(ISTRA)
C
        IF (ISTEP.GT.0) THEN
          IF (ISPZ.GT.0.AND.ISPZ.LT.NSPSTI(ISTEP)) GOTO 991
          IF (              ISPZ.GT.NSPSTE(ISTEP)) GOTO 991
C
          IF (INDTEC(NL1J,ISTRA).EQ.4) THEN
            XI(1,ISRFS,ISTRA)=STEP0(ISPZ,ISTEP,ALEFT(1,ISRFS,ISTRA))
            XE(1,ISRFS,ISTRA)=STEP0(ISPZ,ISTEP,BRGHT(1,ISRFS,ISTRA))
          ELSEIF (INDTEC(NL2J,ISTRA).EQ.4) THEN
            XI(2,ISRFS,ISTRA)=STEP0(ISPZ,ISTEP,ALEFT(2,ISRFS,ISTRA))
            XE(2,ISRFS,ISTRA)=STEP0(ISPZ,ISTEP,BRGHT(2,ISRFS,ISTRA))
          ELSEIF (INDTEC(NL3J,ISTRA).EQ.4) THEN
            XI(3,ISRFS,ISTRA)=STEP0(ISPZ,ISTEP,ALEFT(3,ISRFS,ISTRA))
            XE(3,ISRFS,ISTRA)=STEP0(ISPZ,ISTEP,BRGHT(3,ISRFS,ISTRA))
          ENDIF
        ENDIF
C
1     CONTINUE
C
      IF (TRCSOU) CALL LEER(2)

      END DO    ! STRATA LOOP

      RETURN
C
      ENTRY SAMSF1(NLSF,TIWL,TEWL,DIWL,VXWL,VYWL,VZWL,EFWL,WEISPZ)
C
      ICOUNT=0
100   CONTINUE
      ICOUNT=ICOUNT+1
C
C   NLSF=SURFACE INDEX IN (NSRFS ) SOURCE  ARRAYS
C
      JCALC=0
      ISTEP=0
C
      DO 101 ISPZ=1,NSPZ
        WEISPZ(ISPZ)=-1.
101   CONTINUE
C
C   USER SUPPLIED GENERATOR FOR X0,Y0,Z0. ONLY ONE CALL
C   FOR ALL 3 CO-ORDINATES. SUBR. SURTST IS NOT CALLED!
C
      IF (SORLIM(NLSF,ISTRA).LT.0.D0) THEN
        CALL SM1USR(NLSF,X0,Y0,Z0,
     .              SORAD1(NLSF,ISTRA),SORAD2(NLSF,ISTRA),
     .              SORAD3(NLSF,ISTRA),SORAD4(NLSF,ISTRA),
     .              SORAD5(NLSF,ISTRA),SORAD6(NLSF,ISTRA),
     .              IRUSR,IPUSR,ITUSR,IAUSR,IBUSR,
     .              TIWL,TEWL,DIWL,VXWL,VYWL,VZWL,WEISPZ)
        ISTEP=-1
        ZZ(1)=X0
        ZZ(2)=Y0
        ZZ(3)=Z0
        GOTO 1500
      ENDIF
C
      DO 1000 J=1,3
        IK=NLSF+(J-1)*NSRFS
        GOTO (10,20,30,40),INDTEC(IK,ISTRA)
C   ZZ(JCALC) IS TO BE CALCULATED FROM SURFACE-EQUATION
          IF (JCALC.NE.0) GOTO 997
          JCALC=J
          GOTO 1000
C   DELTA DISTRIBUTION AT CENTER OF INTERVALL
10      CONTINUE
          ZZ(J)=(ALEFT(J,NLSF,ISTRA)+BRGHT(J,NLSF,ISTRA))*0.5
          GOTO 1000
C   UNIFORM DISTRIBUTION IN THIS CO-ORDINATE
20      CONTINUE
          ZZ(J)=RANF_EIRENE( )*(BRGHT(J,NLSF,ISTRA)-
     .          ALEFT(J,NLSF,ISTRA))+ALEFT(J,NLSF,ISTRA)
          GOTO 1000
C   TRUNCATED EXPONENTIAL DECAY WITH LENGTH XLAMDA, FOR ONE CO-ORDINATE ONLY
C   PARAMETER: SOREXP
C   METHOD: COVEYOU-TRICK  (SPANIER-GELBARD, ADDISON WESLEY,  P 35)
30      CONTINUE
          DELTA=BRGHT(J,NLSF,ISTRA)-ALEFT(J,NLSF,ISTRA)
          XLAMDA=SOREXP(NLSF,ISTRA)
          ZM=DELTA/XLAMDA
          ZH=MOD(-LOG(RANF_EIRENE( )),ZM)
          ZZ(J)=XLAMDA*ZH+ALEFT(J,NLSF,ISTRA)
          GOTO 1000
C   STEPFUNCTION NO. ISTEP, FOR ONE CO-ORDINATE ONLY
C   PARAMETER: SORIND
40      CONTINUE
          ISTEP=SORIND(NLSF,ISTRA)
          RNF=XI(J,NLSF,ISTRA)+RANF_EIRENE( )*
     .        (XE(J,NLSF,ISTRA)-XI(J,NLSF,ISTRA))
          ZZ(J)=STEP1(IINDEX,ISTEP,RNF,NSPEZ(ISTRA))
          GOTO 1000
1000  CONTINUE
C
      IPOLG=1
C
1500  CONTINUE
C
C  1500---2000
C  IN CASE OF DEFAULT SAMPLING:
C    TWO OUT OF THE THREE CO-ORDINATES ZZ(1),ZZ(2),ZZ(3) ARE
C    SAMPLED.
C    FIND 3RD CO-ORDINATE FROM SURFACE EQUATION
C    CONVERT ZZ(1), ZZ(2), ZZ(3) TO CARTHESIAN CO-ORDINATES X0,Y0,Z0
C  IN CASE OF USER SUPPLIED SAMPLING:
C    THE THREE CARTHESIAN CO-ORDINATES X0,Y0,Z0 ARE GIVEN NOW
C    ONLY SURFACE FLAGS NLSRFX,...MRSURF,.... MUST BE SET
C
      IF (INDIM(NLSF,ISTRA).EQ.0) THEN
C  BIRTH POINT ON ADDITIONAL SURFACE, ZZ( ) ARE CARTHESIAN
        NLSRFX=.FALSE.
        NLSRFY=.FALSE.
        NLSRFZ=.FALSE.
        MTSURF=0
        MPSURF=0
        MRSURF=0
        MASURF=INSOR(NLSF,ISTRA)
        ILTR=ILTOR(MASURF)
        IF (NLTRZ.OR.     ILTR.NE.0) THEN
C Z0 IS GIVEN IN LOCAL CO-ORDINATE SYSTEM ILTOR
          Z0=ZZ(3)
        ELSEIF (NLTRA.AND.ILTR.EQ.0) THEN
          PHI=ZZ(3)*DEGRAD
C Z0 IS IRRELEVANT HERE, AND IS DETERMINED LATER FROM PHI
        ELSEIF (NLTRT.AND.ILTR.EQ.0) THEN
          PHI=ZZ(3)*DEGRAD
C Z0 IS IRRELEVANT HERE, AND IS DETERMINED LATER FROM PHI
        ENDIF
        IF (SORLIM(NLSF,ISTRA).LT.0.D0) GOTO 2000
C
        IF (JCALC.EQ.1) THEN
C  FIND X CO-ORDINATE X0 FROM Y=Y0 AND Z=Z0 ON SURFACE NO. MASURF
          Y0=ZZ(2)
          IF (NLTRA.AND.ILTR.EQ.0) THEN
            WRITE (6,*) 'Z0 IN SAMSRF FOR JCALC=1 ?? '
            CALL EXIT_OWN(1)
          ENDIF
          IF (JUMLIM(MASURF).NE.0) THEN
            IF (ABS(A1LM(MASURF)).LE.EPS12) GOTO 9931
            AN=-1./A1LM(MASURF)
            X0=(A0LM(MASURF)+Y0*A2LM(MASURF)+Z0*A3LM(MASURF))*AN
          ELSE
            S=A4LM(MASURF)
            Q=A0LM(MASURF)+(A2LM(MASURF)+A5LM(MASURF)*Y0)*Y0+
     .        (A3LM(MASURF)+A6LM(MASURF)*Z0+A9LM(MASURF)*Y0)*Z0
            P=A1LM(MASURF)+A7LM(MASURF)*Y0+A8LM(MASURF)*Z0
            IF (ABS(S).GT.EPS12) THEN
C  SECOND ORDER IN X
              AN=1./S
              Q=Q*AN
              P=P*AN
              PH=-P*0.5
              DET=PH*PH-Q
              IF (DET.LT.0.D0) THEN
                GOTO 999
              ELSEIF (DET.EQ.0.D0) THEN
                X0=PH
              ELSEIF (DET.GT.0.D0) THEN
                X0=PH+SQRT(DET)
                CALL SURTST(X0,Y0,Z0,MASURF,LOGTST)
                IF (.NOT.LOGTST) X0=PH-SQRT(DET)
              ENDIF
            ELSEIF (ABS(P).GT.EPS12) THEN
C  FIRST ORDER IN X
              X0=Q/P
            ELSE
C  INDEPENDENT OF X
              GOTO 9931
            ENDIF
          ENDIF
C  CARRY OUT RANGE TEST FOR X0?
          X0TEST=ABS(ALEFT(1,NLSF,ISTRA)-BRGHT(1,NLSF,ISTRA))
          IF (X0TEST.LT.1.D-10) GOTO 2000
          IF (ALEFT(1,NLSF,ISTRA).GT.X0 .OR. 
     .        BRGHT(1,NLSF,ISTRA).LT.X0) THEN
            IF (ICOUNT.LT.1000) GOTO 100
            WRITE (6,*) 'WARNING FROM SAMSRF FROM X0TEST, ICOUNT=1000 '
            LGPART=.FALSE.
            RETURN
          ENDIF
        ELSEIF (JCALC.EQ.2) THEN
C    FIND Y CO-ORDINATE Y0 FROM X=X0 AND Z=Z0 ON SURFACE NO. MASURF
          X0=ZZ(1)
          IF (NLTRA.AND.ILTR.EQ.0) THEN
C  FIND Z0, NT,  FROM X0,PHI
            IF (PHI.LT.ZSURF(1)) PHI=PHI+PI2A
            IF (PHI.GT.ZSURF(NTTRA)) PHI=PHI-PI2A
            NT=LEARCA(PHI,ZSURF,1,NTTRA,1,'SAMSRF      ')
            IF (NT.LE.0.OR.NT.GT.NTTRAM) THEN
              WRITE (6,*) 'NT OUT OF RANGE IN SAMSRF '
              WRITE (6,*) PHI,ZFULL
              CALL EXIT_OWN(1)
            ENDIF
            X01=X0+RMTOR
            CALL FZRTRI(X0,Z0,NT,X01,PHI,NT)
          ENDIF
          IF (JUMLIM(MASURF).NE.0) THEN
            IF (ABS(A2LM(MASURF)).LE.EPS12) GOTO 9931
            AN=-1./A2LM(MASURF)
            Y0=(A0LM(MASURF)+X0*A1LM(MASURF)+Z0*A3LM(MASURF))*AN
          ELSE
            S=A5LM(MASURF)
            Q=A0LM(MASURF)+(A1LM(MASURF)+A4LM(MASURF)*X0)*X0+
     .        (A3LM(MASURF)+A6LM(MASURF)*Z0+A8LM(MASURF)*X0)*Z0
            P=A2LM(MASURF)+A7LM(MASURF)*X0+A9LM(MASURF)*Z0
            IF (ABS(S).GT.EPS12) THEN
C  SECOND ORDER IN Y
              AN=1./S
              Q=Q*AN
              P=P*AN
              PH=-P*0.5
              DET=PH*PH-Q
              IF (DET.LT.0.D0) THEN
                GOTO 999
              ELSEIF (DET.EQ.0.D0) THEN
                Y0=PH
              ELSEIF (DET.GT.0.D0) THEN
                Y0=PH+SQRT(DET)
                CALL SURTST(X0,Y0,Z0,MASURF,LOGTST)
                IF (.NOT.LOGTST) Y0=PH-SQRT(DET)
              ENDIF
            ELSEIF (ABS(P).GT.EPS12) THEN
C  FIRST ORDER IN Y
              Y0=Q/P
            ELSE
C  INDEPENDENT OF Y
              GOTO 9931
            ENDIF
          ENDIF
C  CARRY OUT RANGE TEST FOR Y0?
          Y0TEST=ABS(ALEFT(2,NLSF,ISTRA)-BRGHT(2,NLSF,ISTRA))
          IF (Y0TEST.LT.1.D-10) GOTO 2000
          IF (ALEFT(2,NLSF,ISTRA).GT.Y0 .OR. 
     .        BRGHT(2,NLSF,ISTRA).LT.Y0) THEN
            IF (ICOUNT.LT.1000) GOTO 100
            WRITE (6,*) 'WARNING FROM SAMSRF FROM Y0TEST, ICOUNT=1000 '
            LGPART=.FALSE.
            RETURN
          ENDIF
        ELSEIF (JCALC.EQ.3) THEN
C    FIND Z CO-ORDINATE Z0 FROM X=X0 AND Y=Y0 ON SURFACE NO. MASURF
          X0=ZZ(1)
          Y0=ZZ(2)
          IF ((NLTRA.OR.NLTRT).AND.ILTR.EQ.0) GOTO 9931
          IF (JUMLIM(MASURF).NE.0) THEN
            IF (ABS(A3LM(MASURF)).LE.EPS12) GOTO 9931
            AN=-1./A3LM(MASURF)
            Z0=(A0LM(MASURF)+X0*A1LM(MASURF)+Y0*A2LM(MASURF))*AN
          ELSE
            S= A6LM(MASURF)
            Q= A0LM(MASURF)+(A1LM(MASURF)+A4LM(MASURF)*X0)*X0+
     .        (A2LM(MASURF)+A5LM(MASURF)*Y0+A7LM(MASURF)*X0)*Y0
            P= A3LM(MASURF)+A8LM(MASURF)*X0+A9LM(MASURF)*Y0
            IF (ABS(S).GT.EPS12) THEN
C  SECOND ORDER IN Z
              AN=1./S
              Q=Q*AN
              P=P*AN
              PH=-P*0.5
              DET=PH*PH-Q
              IF (DET.LT.0.D0) THEN
                GOTO 999
              ELSEIF (DET.EQ.0.D0) THEN
                Z0=PH
              ELSEIF (DET.GT.0.D0) THEN
                Z0=PH+SQRT(DET)
                CALL SURTST(X0,Y0,Z0,MASURF,LOGTST)
                IF (.NOT.LOGTST) Z0=PH-SQRT(DET)
              ENDIF
            ELSEIF (ABS(P).GT.EPS12) THEN
C  FIRST ORDER IN Z
              Z0=Q/P
            ELSE
C  INDEPENDENT OF Z
              GOTO 9931
            ENDIF
          ENDIF
C  CARRY OUT RANGE TEST FOR Z0?
          Z0TEST=ABS(ALEFT(3,NLSF,ISTRA)-BRGHT(3,NLSF,ISTRA))
          IF (Z0TEST.LT.1.D-10) GOTO 2000
          IF (ALEFT(3,NLSF,ISTRA).GT.Z0 .OR. 
     .        BRGHT(3,NLSF,ISTRA).LT.Z0) THEN
            IF (ICOUNT.LT.1000) GOTO 100
            WRITE (6,*) 'WARNING FROM SAMSRF, Z0TEST, ICOUNT=1000 '
            LGPART=.FALSE.
            RETURN
          ENDIF
C
        ELSE
          X0=ZZ(1)
          Y0=ZZ(2)
          Z0=ZZ(3)
        ENDIF
C
        CALL SURTST(X0,Y0,Z0,MASURF,LOGTST)
        IF (.NOT.LOGTST) GOTO 998
C
      ELSEIF (INDIM(NLSF,ISTRA).EQ.1) THEN
C  BIRTH POINT ON STANDARD RADIAL SURFACE  MRSURF
C  Y- OR POLOIDAL AND Z- OR TOROIDAL CO-ORDINATES MUST BE SAMPLED
C  X-OR RADIAL CO-ORDINATE IS COMPUTED FROM SURFACE EQUATION
C  SPECIAL CASE: LEVGEO=5: SAMPLE ON SURFACE IN 3D, DISCRETISED BY
C                SET OF TRIANGLES (SELECTED SIDES OF TETRAHEDONS)
        NLSRFX=.TRUE.
        NLSRFY=.FALSE.
        NLSRFZ=.FALSE.
        MRSURF=INSOR(NLSF,ISTRA)
        MPSURF=0
        MTSURF=0
        MASURF=0
        ILTR=0
        IF (NLTRZ) THEN
          Z0=ZZ(3)
        ELSEIF (NLTRA) THEN
          PHI=ZZ(3)*DEGRAD
        ELSEIF (NLTRT) THEN
          PHI=ZZ(3)*DEGRAD
        ENDIF
        IF (SORLIM(NLSF,ISTRA).LT.0.D0) GOTO 2000
        IF (JCALC.EQ.2.OR.JCALC.EQ.3) GOTO 993
C
        IF (LEVGEO.EQ.1) THEN
          X0=RSURF(MRSURF)
          Y0=ZZ(2)
        ELSEIF (LEVGEO.EQ.2) THEN
          X0=RSURF(MRSURF)*COS(ZZ(2)*DEGRAD)+EP1(MRSURF)
          Y0=RSURF(MRSURF)*SIN(ZZ(2)*DEGRAD)*ELL(MRSURF)
        ELSEIF (LEVGEO.EQ.3) THEN
          BL=ZZ(2)
          DO 1501 I=1,NPPLG
            DO 1501 J=NPOINT(1,I),NPOINT(2,I)
            IF (BL.LE.BGL(MRSURF,J)) GOTO 1502
1501      CONTINUE
          GOTO 996
1502      CONTINUE
          IPLG=J-1
          D=BL-BGL(MRSURF,IPLG)
          VVX=VPLX(MRSURF,IPLG)
          VVY=VPLY(MRSURF,IPLG)
          VVI=1./SQRT(VVX*VVX+VVY*VVY)
          X0=XPOL(MRSURF,IPLG)+D*VVX*VVI
          Y0=YPOL(MRSURF,IPLG)+D*VVY*VVI
        ELSEIF (LEVGEO.EQ.4) THEN
          IF (ISTEP.LE.0) GOTO 995
          BL=ZZ(2)
          ITRI=IRSTEP(ISTEP,IINDEX)
          IPLG=IPSTEP(ISTEP,IINDEX)
          MRSURF=ITRI
          D=BL-RRSTEP(ISTEP,IINDEX)
          VVX=VTRIX(IPLG,ITRI)
          VVY=VTRIY(IPLG,ITRI)
          VVI=1./SQRT(VVX*VVX+VVY*VVY)
          X0=XTRIAN(NECKE(IPLG,ITRI))+D*VVX*VVI
          Y0=YTRIAN(NECKE(IPLG,ITRI))+D*VVY*VVI
        ELSEIF (LEVGEO.EQ.5) THEN
          IF (ISTEP.LE.0) GOTO 995
          ITET=IRSTEP(ISTEP,IINDEX)
          ISID=IPSTEP(ISTEP,IINDEX)
          MRSURF=ITET
          X1=XTETRA(NTECK(ITSIDE(1,ISID),ITET))
          Y1=YTETRA(NTECK(ITSIDE(1,ISID),ITET))
          Z1=ZTETRA(NTECK(ITSIDE(1,ISID),ITET))
          X2=XTETRA(NTECK(ITSIDE(2,ISID),ITET))
          Y2=YTETRA(NTECK(ITSIDE(2,ISID),ITET))
          Z2=ZTETRA(NTECK(ITSIDE(2,ISID),ITET))
          X3=XTETRA(NTECK(ITSIDE(3,ISID),ITET))
          Y3=YTETRA(NTECK(ITSIDE(3,ISID),ITET))
          Z3=ZTETRA(NTECK(ITSIDE(3,ISID),ITET))
          CALL FPOLYT_3(X1,Y1,Z1,X2,Y2,Z2,X3,Y3,Z3,X0,Y0,Z0)
        ELSEIF (LEVGEO.EQ.6) THEN
          WRITE (6,*) 'ERROR EXIT FROM SAMSRF. NLPOL ',LEVGEO
          CALL EXIT_OWN(1)
        ENDIF
C
      ELSEIF (INDIM(NLSF,ISTRA).EQ.2) THEN
C  BIRTH POINT ON STANDARD POLOIDAL SURFACE MPSURF
C  X-OR RADIAL CO-ORDINATE AND Z-OR TOROIDAL CO-ORDINATE MUST BE SAMPLED
C  Y-OR POLOIDAL CO-ORDINATE IS COMPUTED FROM SURFACE EQUATION
        NLSRFX=.FALSE.
        NLSRFY=.TRUE.
        NLSRFZ=.FALSE.
        MRSURF=0
        MPSURF=INSOR(NLSF,ISTRA)
        MTSURF=0
        MASURF=0
        ILTR=0
        IF (NLTRZ) THEN
          Z0=ZZ(3)
        ELSEIF (NLTRA) THEN
          PHI=ZZ(3)*DEGRAD
        ELSEIF (NLTRT) THEN
          PHI=ZZ(3)*DEGRAD
        ENDIF
        IF (SORLIM(NLSF,ISTRA).LT.0.D0) GOTO 2000
        IF (JCALC.EQ.1.OR.JCALC.EQ.3) GOTO 993
C
        IF (LEVGEO.EQ.1) THEN
          X0=ZZ(1)
          Y0=PSURF(MPSURF)
        ELSEIF (LEVGEO.EQ.2.AND.NLCRC) THEN
          X0=ZZ(1)*COSPH(MPSURF)
          Y0=ZZ(1)*SINPH(MPSURF)
        ELSEIF (LEVGEO.EQ.2.OR.LEVGEO.EQ.3) THEN
          BL=ZZ(1)
          DO 1601 J=2,NR1ST
            IF (BL.LE.BGLP(J,MPSURF)) GOTO 1602
1601      CONTINUE
          GOTO 996
1602      CONTINUE
          IPLG=J-1
          D=BL-BGLP(IPLG,MPSURF)
          VVX=VVTX(IPLG,MPSURF)
          VVY=VVTY(IPLG,MPSURF)
          VVI=1./SQRT(VVX*VVX+VVY*VVY)
          X0=XPOL(IPLG,MPSURF)+D*VVX*VVI
          Y0=YPOL(IPLG,MPSURF)+D*VVY*VVI
        ELSE
          WRITE (6,*) 'ERROR IN SAMSRF: LEVGEO AND INDIM? '
          CALL EXIT_OWN(1)
        ENDIF
C
      ELSEIF (INDIM(NLSF,ISTRA).EQ.3) THEN
C  BIRTH POINT ON STANDARD TOROIDAL SURFACE
C  X-OR RADIAL CO-ORDINATE AND Y-OR TOROIDAL CO-ORDINATE MUST BE SAMPLED
C  Z-OR TOROIDAL CO-ORDINATE IS COMPUTED FROM SURFACE EQUATION
        NLSRFX=.FALSE.
        NLSRFY=.FALSE.
        NLSRFZ=.TRUE.
        MRSURF=0
        MPSURF=0
        MTSURF=INSOR(NLSF,ISTRA)
        MASURF=0
        ILTR=0
        IF (SORLIM(NLSF,ISTRA).LT.0.D0) GOTO 2000
        IF (JCALC.EQ.1.OR.JCALC.EQ.2) GOTO 993
C
        IF (LEVGEO.EQ.1) THEN
          X0=ZZ(1)
          Y0=ZZ(2)
          Z0=ZSURF(MTSURF)
          IF (NLTRA) PHI=ZSURF(MTSURF)
        ELSEIF (LEVGEO.EQ.2.AND.NLCRC) THEN
          EP1ZZ1=0.0
          ELLZZ1=1.0
          X0=ZZ(1)*COS(ZZ(2)*DEGRAD)+EP1ZZ1
          Y0=ZZ(1)*SIN(ZZ(2)*DEGRAD)*ELLZZ1
          Z0=ZSURF(MTSURF)
          IF (NLTRA) PHI=ZSURF(MTSURF)
          IF (.NOT.NLCRC) GOTO 992
        ELSE
C  TO BE WRITTEN
          WRITE (6,*) 'ERROR IN SAMPLE, SOURCE ON TOR. SURFACE'
          CALL EXIT_OWN(1)
        ENDIF
C
      ELSEIF (INDIM(NLSF,ISTRA).EQ.4) THEN
C  LEVGEO=3,4: 
C     BIRTH POINT ON STANDARD RADIAL OR POLOIDAL SURFACE
C     ARC-LENGTH CO-ORDINATE IS SAMPLED FROM STEP FUNCTION
C  LEVGEO=5: 
C     TRIANGULAR SURFACE SEGMENT IS SAMPLED FROM STEP FUNCTION
C     UNIFORM DISTRIBUTION WITHIN SURFACE SEGMENT
        IF (ISTEP.LE.0) GOTO 995
        NLSRFZ=.FALSE.
        MTSURF=0
        MASURF=0
        ILTR=0
        IF (NLTRZ) THEN
          Z0=ZZ(3)
        ELSEIF (NLTRA) THEN
          PHI=ZZ(3)*DEGRAD
        ELSEIF (NLTRT) THEN
          PHI=ZZ(3)*DEGRAD
        ENDIF
        IF (SORLIM(NLSF,ISTRA).LT.0.D0) GOTO 2000
        IF (JCALC.EQ.1.OR.JCALC.EQ.3) GOTO 993
C
        BL=ZZ(1)
        DO 1701 J=2,NSMAX(ISTEP)
          IF (BL.LE.RRSTEP(ISTEP,J)) GOTO 1702
1701    CONTINUE
        GOTO 996
1702    CONTINUE
        IPLG=J-1
        D=BL-RRSTEP(ISTEP,IPLG)
        IF (LEVGEO.EQ.4) THEN
          IF (ISTEP.LE.0) GOTO 995
          NLSRFX=.TRUE.
          NLSRFY=.FALSE.
          ITRI=IRSTEP(ISTEP,IINDEX)
          ISID=IPSTEP(ISTEP,IINDEX)
          MRSURF=ITRI
          VVX=VTRIX(ISID,ITRI)
          VVY=VTRIY(ISID,ITRI)
          VVI=1./SQRT(VVX*VVX+VVY*VVY)
          X0=XTRIAN(NECKE(ISID,ITRI))+D*VVX*VVI
          Y0=YTRIAN(NECKE(ISID,ITRI))+D*VVY*VVI
        ELSEIF (LEVGEO.EQ.5) THEN
          IF (ISTEP.LE.0) GOTO 995
          NLSRFX=.TRUE.
          NLSRFY=.FALSE.
          ITET=IRSTEP(ISTEP,IINDEX)
          ISID=IPSTEP(ISTEP,IINDEX)
          MRSURF=ITET
          X1=XTETRA(NTECK(ITSIDE(1,ISID),ITET))
          Y1=YTETRA(NTECK(ITSIDE(1,ISID),ITET))
          Z1=ZTETRA(NTECK(ITSIDE(1,ISID),ITET))
          X2=XTETRA(NTECK(ITSIDE(2,ISID),ITET))
          Y2=YTETRA(NTECK(ITSIDE(2,ISID),ITET))
          Z2=ZTETRA(NTECK(ITSIDE(2,ISID),ITET))
          X3=XTETRA(NTECK(ITSIDE(3,ISID),ITET))
          Y3=YTETRA(NTECK(ITSIDE(3,ISID),ITET))
          Z3=ZTETRA(NTECK(ITSIDE(3,ISID),ITET))
          CALL FPOLYT_3(X1,Y1,Z1,X2,Y2,Z2,X3,Y3,Z3,X0,Y0,Z0)
        ELSEIF (LEVGEO.EQ.3) THEN
          IF (IGSTEP(ISTEP,IPLG).LT.200000) THEN
C  RADIAL PART
            NLSRFX=.TRUE.
            NLSRFY=.FALSE.
            MPSURF=0
            MRSURF=IGSTEP(ISTEP,IPLG)-100000
            VVX=VPLX(MRSURF,IPSTEP(ISTEP,IPLG))
            VVY=VPLY(MRSURF,IPSTEP(ISTEP,IPLG))
            VVI=1./SQRT(VVX*VVX+VVY*VVY)
            X0=XPOL(MRSURF,IPSTEP(ISTEP,IPLG))+D*VVX*VVI
            Y0=YPOL(MRSURF,IPSTEP(ISTEP,IPLG))+D*VVY*VVI
          ELSE
C  POLOIDAL PART
            NLSRFX=.FALSE.
            NLSRFY=.TRUE.
            MRSURF=0
            MPSURF=IGSTEP(ISTEP,IPLG)-200000
            VVX=VVTX(IRSTEP(ISTEP,IPLG),MPSURF)
            VVY=VVTY(IRSTEP(ISTEP,IPLG),MPSURF)
            VVI=1./SQRT(VVX*VVX+VVY*VVY)
            X0=XPOL(IRSTEP(ISTEP,IPLG),MPSURF)+D*VVX*VVI
            Y0=YPOL(IRSTEP(ISTEP,IPLG),MPSURF)+D*VVY*VVI
          ENDIF
        ELSE
          GOTO 992
        ENDIF
      ENDIF
C
2000  CONTINUE
C
C  X0,Y0,Z0 AND PHI ARE GIVEN NOW.
C  MAKE SURE, THAT THESE ARE IN PROPER PERIODICITY BLOCK
C
      IF (NLTRA.AND.ILTR.GT.0) THEN
C  Z0 IS A CARTHESIAN CO-ORDINATE IN LOCAL SYSTEM ILTR
C  BIRTHPOINT IS ON ADDITIONAL SURFACE (BECAUSE ILTR.NE.0)
C  FIND PHI,NT AND THEN X0,Z0 IN CELL NT
        CALL FZRTOR(X0,Z0,ILTR,XR,PHI,NT,.FALSE.,0)
        IF (NT.NE.ILTR)
     .    CALL FZRTRI(X0,Z0,NT,XR,PHI,NT)
        X01=X0+RMTOR
      ELSEIF (NLTRA.AND.ILTR.EQ.0) THEN
C  PHI IS THE TOROIDAL ANGLE (RADIANS)
C  BIRTHPOINT IS EITHER ON ADDITIONAL OR ON STANDARD GRID SURFACE
C  FIND Z0, NT,  FROM X0,PHI
C
C  MOVE PHI AWAY FROM TOROIDAL PERIODICITY SURFACE
        IF (PHI.EQ.0.0.AND.ABS(ZSURF(1)).LT.EPS10) PHI=0.01
C  DONE
        IF (PHI.LT.ZSURF(1)) PHI=PHI+PI2A
        IF (PHI.GT.ZSURF(NTTRA)) PHI=PHI-PI2A
        NT=LEARCA(PHI,ZSURF,1,NTTRA,1,'SAMSRF      ')
        IF (NT.LE.0.OR.NT.GT.NTTRAM) THEN
          WRITE (6,*) 'NT OUT OF RANGE IN SAMSRF '
          WRITE (6,*) PHI,ZFULL
          CALL EXIT_OWN(1)
        ENDIF
        X01=X0+RMTOR
        CALL FZRTRI(X0,Z0,NT,X01,PHI,NT)
      ENDIF
C
C  FIND ZONE NUMBER NRCELL, NACELL ,NBLOCK AND IPOLG
C
      IF (NASOR(NLSF,ISTRA).GT.0.AND.NRSOR(NLSF,ISTRA).EQ.0) THEN
C  NRCELL=0
C  IPOLG=0
C  NBLOCK=NBMLTP
C  NACELL IS EXPLICITLY DEFINED BY INPUT VARIABLE NASOR
        NACELL=NASOR(NLSF,ISTRA)
        NRCELL=0
        NBLOCK=NBMLTP
        IPOLG=0
      ELSEIF (NRSOR(NLSF,ISTRA).GT.0.AND.NASOR(NLSF,ISTRA).EQ.0) THEN
C  NRCELL IS EXPLICITLY DEFINED BY INPUT VARIABLE NRSOR
C  IPOLG  IS EXPLICITLY DEFINED BY INPUT VARIABLE NISOR
C  NBLOCK IS EXPLICITLY DEFINED BY INPUT VARIABLE NBSOR
C  NACELL=0
        NRCELL=NRSOR(NLSF,ISTRA)
        NBLOCK=NBSOR(NLSF,ISTRA)
        IPOLG=NISOR(NLSF,ISTRA)
        NACELL=0
      ELSEIF (NRSOR(NLSF,ISTRA).EQ.0.AND.NASOR(NLSF,ISTRA).EQ.0) THEN
C  NRCELL IS COMPUTED IN STANDARD MESH
C  IPOLG IS COMPUTED IN STANDARD MESH
C  NBLOCK IS EXPLICITLY DEFINED BY INPUT VARIABLE NBSOR
C  NACELL=0
        IF (NLSRFX) THEN
          NRCELL=MIN0(NR1STM,MRSURF)
          IAN=MRSURF
          IEN=MRSURF
          NDUM=LEARC1(X0,Y0,Z0,IPOLG,IAN,IEN,NLSRFX,NLSRFY,NPANU,
     .        'SAMSRF      ')
        ELSEIF (NLSRFY) THEN
          IPOLG=MIN0(NP2NDM,MPSURF)
          IAN=MPSURF
          IEN=MPSURF
          NRCELL=LEARC1(X0,Y0,Z0,IDUM,IAN,IEN,NLSRFX,NLSRFY,NPANU,
     .                  'SAMSRF      ')
        ELSE
          NRCELL=LEARC1(X0,Y0,Z0,IPOLG,1,NR1STM,NLSRFX,NLSRFY,NPANU,
     .                  'SAMSRF      ')
        ENDIF
        NACELL=0
        NBLOCK=NBSOR(NLSF,ISTRA)
      ELSEIF (NRSOR(NLSF,ISTRA).LT.0.AND.ISTEP.GT.0) THEN
C  NRCELL IS FOUND FROM STEPFUNCTION DATA
C  IPOLG IS FOUND FROM STEPFUNCTION DATA
C  NBLOCK IS FOUND FROM STEPFUNCTION DATA
C  NACELL IS FOUND FROM STEPFUNCTION DATA
        NRCELL=IRSTEP(ISTEP,IINDEX)
        IPOLG =IPSTEP(ISTEP,IINDEX)
        NBLOCK=IBSTEP(ISTEP,IINDEX)
        NACELL=IASTEP(ISTEP,IINDEX)
      ELSEIF (NRSOR(NLSF,ISTRA).LT.0.AND.ISTEP.LT.0) THEN
C  NRCELL IS TRANSFERRED FROM SUBR. SAMUSR
C  IPOLG IS TRANSFERRED FROM SUBR. SAMUSR
C  NBLOCK IS TRANSFERRED FROM SUBR. SAMUSR
C  NACELL IS TRANSFERRED FROM SUBR. SAMUSR
        NRCELL=IRUSR
        NACELL=IAUSR
        NBLOCK=IBUSR
        IPOLG =IPUSR
      ELSE
        GOTO 999
      ENDIF
C
      NTCELL=1
      IPERID=1
      IF (NLTOR.AND.NACELL.EQ.0) THEN
        IF (NLTRZ) THEN
          IF (NTSOR(NLSF,ISTRA).GT.0) THEN
C  NTCELL IS EXPLICITLY DEFINED BY INPUT VARIABLE NTSOR
            NTCELL=NTSOR(NLSF,ISTRA)
          ELSEIF (NTSOR(NLSF,ISTRA).LT.0.AND.ISTEP.GT.0) THEN
C  NTCELL IS FOUND FROM STEPFUNCTION DATA
            NTCELL=ITSTEP(ISTEP,IINDEX)
          ELSEIF (NTSOR(NLSF,ISTRA).LT.0.AND.ISTEP.LT.0) THEN
C  NTCELL IS TRANSFERRED FROM SUBR. SAMUSR
            NTCELL=ITUSR
          ELSEIF (NTSOR(NLSF,ISTRA).EQ.0) THEN
C  NTCELL IS COMPUTED IN STANDARD MESH
            NTCELL=LEARCA(Z0,ZSURF,1,NT3RD,1,'SAMSRF      ')
          ELSE
            GOTO 999
          ENDIF
        ELSEIF (NLTRA) THEN
C  NTSOR NOT AVAILABLE FOR NLTRA OPTION
          NTCELL=NT
          IPERID=NTCELL
        ELSEIF (NLTRT) THEN
          WRITE (6,*) 'NLTRT: TO BE WRITTEN IN SAMSRF '
          CALL EXIT_OWN(1)
        ENDIF
      ELSEIF (.NOT.NLTOR.OR.NACELL.GT.0) THEN
C       IF (NLTRZ) THEN
C  ALL DONE
        IF (NLTRA) THEN
C  NTSOR NOT AVAILABLE FOR NLTRA OPTION
          IPERID=NT
        ELSEIF (NLTRT) THEN
          WRITE (6,*) 'NLTRT: TO BE WRITTEN IN SAMSRF '
          CALL EXIT_OWN(1)
        ENDIF
      ENDIF
C
      NPCELL=1
      IF (NLPOL.AND.NACELL.EQ.0) THEN
        IF (NPSOR(NLSF,ISTRA).GT.0) THEN
C  NPCELL IS EXPLICITLY DEFINED BY INPUT VARIABLE NPSOR
          NPCELL=NPSOR(NLSF,ISTRA)
        ELSEIF (NPSOR(NLSF,ISTRA).LT.0.AND.ISTEP.GT.0) THEN
C  NPCELL IS FOUND FROM STEPFUNCTION DATA
          NPCELL=IPSTEP(ISTEP,IINDEX)
        ELSEIF (NPSOR(NLSF,ISTRA).LT.0.AND.ISTEP.LT.0) THEN
C  NPCELL IS TRANSFERRED FROM SUBR. SAMUSR
          NPCELL=IPUSR
        ELSEIF (NPSOR(NLSF,ISTRA).EQ.0) THEN
C  NPCELL IS COMPUTED IN STANDARD MESH
          IF (LEVGEO.EQ.1) THEN
            NPCELL=LEARCA(Y0,PSURF,1,NP2ND,1,'SAMSRF')
          ELSEIF (LEVGEO.EQ.2.AND.NLCRC) THEN
            WINK=MOD(ATAN2(Y0,X0)+PI2A-PSURF(1),PI2A)+PSURF(1)
            NPCELL=LEARCA(WINK,PSURF,1,NP2ND,1,'SAMSRF')
          ELSEIF (LEVGEO.EQ.2.OR.LEVGEO.EQ.3) THEN
            IF (NLSRFY) THEN
              NPCELL=MIN0(NP2NDM,MPSURF)
            ELSE
              NPCELL=LEARC2(X0,Y0,NRCELL,NPANU,'SAMSRF')
            ENDIF
          ELSE
            WRITE (6,*) 'ERROR EXIT FROM SAMSRF. NLPOL ',LEVGEO
            CALL EXIT_OWN(1)
          ENDIF
        ELSE
          GOTO 999
        ENDIF
      ENDIF
C
      NBLOCK=MAX0(1,NBLOCK)
      NBLOCK=MIN0(NBLOCK,NBMLT)
      IF (NRCELL.GT.0) NACELL=0
      IF (NACELL.GT.0) NBLOCK=NBMLTP
      NBLCKA=NSTRD*(NBLOCK-1)+NACELL
      NCELL=NRCELL+((NPCELL-1)+(NTCELL-1)*NP2T3)*NR1P2+NBLCKA
C
      IF (ISTEP.GT.0) THEN
        TEWL=TESTEP(ISTEP,IINDEX)
        DO 3010 IPLS=1,NPLSI
          TIWL(IPLS)=TISTEP(IPLS,ISTEP,IINDEX)
          VXWL(IPLS)=VXSTEP(IPLS,ISTEP,IINDEX)
          VYWL(IPLS)=VYSTEP(IPLS,ISTEP,IINDEX)
          VZWL(IPLS)=VZSTEP(IPLS,ISTEP,IINDEX)
          DIWL(IPLS)=DISTEP(IPLS,ISTEP,IINDEX)
          EFWL(IPLS)=ELSTEP(IPLS,ISTEP,IINDEX)/
     .              (FLSTEP(IPLS,ISTEP,IINDEX)+EPS30)
3010    CONTINUE
      ELSEIF (ISTEP.EQ.0) THEN
        TEWL=TEIN(NCELL)
        DO 3020 IPLS=1,NPLSI
          TIWL(IPLS)=TIIN(IPLS,NCELL)
          IF (INDPRO(4) == 8) THEN
            CALL VECUSR (2,VXWL(IPLS),VYWL(IPLS),VZWL(IPLS),IPLS)
          ELSE
            VXWL(IPLS)=VXIN(IPLS,NCELL)
            VYWL(IPLS)=VYIN(IPLS,NCELL)
            VZWL(IPLS)=VZIN(IPLS,NCELL)
          END IF
          DIWL(IPLS)=DIIN(IPLS,NCELL)
          EFWL(IPLS)=0.
3020    CONTINUE
      ELSEIF (ISTEP.LT.0) THEN
C  TEWL, TIWL, .... ALREADY DEFINED IN SM1USR
C  NOTHING MORE TO BE DONE HERE
      ENDIF
C
C  SET ANALOG SPECIES INDEX DISTRIBUTION WEISPZ
C
      IF (NSPEZ(ISTRA).LE.0) THEN
        IF (ISTEP.GT.0) THEN
C  WEISPZ FROM STEP FUNCTION
          DO 4100 ISPZ=NSPSTI(ISTEP),NSPSTE(ISTEP)
            WEISPZ(ISPZ)=FLSTEP(ISPZ,ISTEP,IINDEX)/
     .                   FLSTEP(0,   ISTEP,IINDEX)
4100      CONTINUE
          DO ISPZ=1,NSPSTI(ISTEP)-1
            WEISPZ(ISPZ)=0.D0
          ENDDO
          DO ISPZ=NSPSTE(ISTEP)+1,NSPZ
            WEISPZ(ISPZ)=0.D0
          ENDDO
        ELSE
C  WEISPZ NOT DEFINED
        ENDIF
      ENDIF
C
      RETURN


      ENTRY SAMSF2

      IF (ALLOCATED(INDTEC)) THEN
        DEALLOCATE (INDTEC)
        DEALLOCATE (ALEFT)
        DEALLOCATE (BRGHT)
        DEALLOCATE (XI)
        DEALLOCATE (XE)
      END IF

      RETURN

991   CONTINUE
      WRITE (6,*) ' ERROR IN SAMSRF '
      WRITE (6,*) 'SPECIES INDEX DISTRIBUTION NOT KNOWN'
      CALL EXIT_OWN(1)
992   CONTINUE
      WRITE (6,*) ' ERROR IN SAMSRF '
      WRITE (6,*) 'INDIM, LEVGEO: ',INDIM(NLSF,ISTRA),LEVGEO
      WRITE (6,*) ' THIS CASE IS TO BE WRITTEN '
      CALL EXIT_OWN(1)
993   CONTINUE
      WRITE (6,*) 'ERROR IN SAMSRF. EXIT CALLED'
      WRITE (6,*) 'SOURCE ON STANDARD SURFACE BUT INVALID "JCALC"'
      WRITE (6,*) 'CHANGE INPUT FLAG "INDTEC"'
      CALL EXIT_OWN(1)
9931  CONTINUE
      WRITE (6,*) 'ERROR IN SAMSRF. EXIT CALLED'
      WRITE (6,*) 'SOURCE ON ADDITIONAL SURFACE BUT INVALID "JCALC"'
      WRITE (6,*) 'CHANGE INPUT FLAG "INDTEC"'
      CALL EXIT_OWN(1)
994   CONTINUE
      WRITE (6,*) 'ERROR IN SAMPLE. EXIT CALLED'
      WRITE (6,*) 'ARCLENGTH REQUESTED ON STANDARD SURFACE BUT LEVGEO'
      WRITE (6,*) 'IS NOT = 3. THIS OPTION IS STILL TO BE WRITTEN'
      CALL EXIT_OWN(1)
995   CONTINUE
      WRITE (6,*) ' ERROR IN SAMSRF '
      WRITE (6,*) 'INDIM, LEVGEO: ',INDIM(NLSF,ISTRA),LEVGEO
      WRITE (6,*) ' AND NO STEP FUNCTION FOR COMPUTING THE BIRTH PLACE'
      WRITE (6,*) ' THIS CASE IS TO BE WRITTEN '
      CALL EXIT_OWN(1)
996   CONTINUE
      WRITE (6,*) 'ERROR IN SAMSRF. EXIT CALLED'
      WRITE (6,*) 'ARCLENGTH BL GREATER THAN THE LENGTH OF THE '
      WRITE (6,*) 'POLYGONE    BL = ',BL
      CALL EXIT_OWN(1)
997   CONTINUE
      WRITE (6,*) 'ERROR IN SAMSRF. EXIT CALLED'
      WRITE (6,*) 'CHECK INPUT OF SORLIM, BECAUSE EIRENE TRIES TO'
      WRITE (6,*) 'COMPUTE MORE THAN ONE VARIABLES FROM THE SURFACE'
      WRITE (6,*) 'EQUATION'
      CALL EXIT_OWN(1)
998   CONTINUE
      WRITE (6,*) 'ERROR IN SAMSRF. EXIT CALLED'
      WRITE (6,*) 'X0,Y0,Z0 ',X0,Y0,Z0
      WRITE (6,*) 'BUT OUTSIDE THE VALID AREA OF THIS SURFACE'
      CALL EXIT_OWN(1)
999   CONTINUE
      WRITE (6,*) 'ERROR IN SAMSRF. EXIT CALLED'
      WRITE (6,*) 'INITIAL CELL NUMBER INVALID OR DET NEGATIVE'
      WRITE (6,*) 'X0,Y0,Z0,DET ',X0,Y0,Z0,DET
      WRITE (6,*) 'ISTEP ',ISTEP
      WRITE (6,*) 'NBLOCK,NACELL,NRCELL ',NBLOCK,NACELL,NRCELL
      WRITE (6,*) 'NPCELL,NTCELL,IPOLG ',NPCELL,NTCELL,IPOLG
      CALL EXIT_OWN(1)
      END
      SUBROUTINE SAMVOL

      USE PRECISION
      USE PARMMOD
      USE COMUSR
      USE CCONA
      USE CLOGAU
      USE CINIT
      USE CPOLYG
      USE CGRID
      USE CZT1
      USE CTRCEI
      USE CGEOM
      USE COMPRT
      USE COMSOU
      USE COMXS
      USE CSPEI
      USE CTRIG
      USE CTETRA
      IMPLICIT NONE
C

      REAL(DP), INTENT(OUT) :: TEWL, TIWL(NPLS), DIWL(NPLS),
     .                       VXWL(NPLS), VYWL(NPLS), VZWL(NPLS),
     .                       EFWL(NPLS), WEISPZ(*)
      INTEGER, INTENT(IN) :: NVLM
      REAL(DP), ALLOCATABLE, SAVE :: FREC(:,:,:), VSOURC(:,:)
      REAL(DP), ALLOCATABLE, SAVE :: RQ21(:), PS21(:)
      REAL(DP), ALLOCATABLE, SAVE :: ASIMP(:,:) 
      REAL(DP) :: D(3)
      INTEGER, ALLOCATABLE, SAVE  :: ISOURC(:,:), ICMX(:), 
     .                               IFREC(:)
      REAL(DP) :: ZEP1, X1, Y1, X2, Y2, X3, Y3, RR, RRI, WINK, 
     .            ZRM1, CNORM, EPR, ELR, RRD, RRN, ZZ, X01, Z1, Z2, Z3, 
     .            REC, BX, BY, BZ, ADD, FTABRC1, CNDYNP, VX, VY, VZ, 
     .            VPARA, EELRC, FEELRC1, SUMM, EISUMM, EISUM, SUM,
     .            X4, Y4, Z4, MOMPARA
      REAL(DP), EXTERNAL :: RANF_EIRENE
      INTEGER :: IC1, IC2, ICOUNT, ICELL, IAUSR, IBUSR, IRUSR, IPUSR,
     .           ITUSR, IN, IIRC, IRC, IRRC, J, IT1, IT2, ISTEP, IFRC,
     .           IR2, IP1, IP2, ICTOT, IND, IR, IP, IT, IC, ISRFSI, I,
     .           ICC, IR1, ISR, ISTR, IL, IU, IM, MXREC, MXPLS, IFPLS,
     .           IPLSTI, IPLSV
      INTEGER, SAVE :: ISTROLD=-1
      LOGICAL, ALLOCATABLE, SAVE :: LPLSSR(:)
C
C  AT ENTRY SAMVL0:
C    DEFINE THE CUMULATIVE DISTRIBUTION FUNCTION
C    FREC(IPLS,IRRC,ICELL) FOR EACH VOLUME SOURCE DISTRIBUTION, FOR SAMPLING
C    THE CELL INDEX ICELL OF THE VOLUME SOURCE PARTICLE.
C
C    A FEW GEOMETRICAL CONSTANTS FOR RANDOM SAMPLING
C    OF THE STARTING POINT IN EACH CELL ARE COMPUTED
C
C    THE SOURCE STRENGTH FLUX(ISTRA) IS MODIFIED FOR THE
C    STRATA WITH NLVOL(ISTRA)=.TRUE.
C
C  AT ENTRY SAMVL1:
C    THE INITIAL CO-ORDINATES OF A TEST FLIGHT ARE SAMPLED,
C    AND THE CELL NUMBERS ARE COMPUTED
C
      ENTRY SAMVL0
C

      IF (.NOT.ALLOCATED(FREC)) THEN

C  LPLSSR(IPLS):
C  IDENTIFY THOSE IPLS WHICH NEED A VOLUME SOURCE DISTRIBUTION

        ALLOCATE (LPLSSR(NPLSI))
        LPLSSR = .FALSE.
        DO ISTR=1,NSTRAI
          IF (NLVOL(ISTR) .AND. NLPLS(ISTR) .AND. (NPTS(ISTR) > 0)
     .        .AND. (FLUX(ISTR) > 0._DP)) THEN
            IPLS = NSPEZ(ISTR)
            IF (IPLS.LE.0.OR.IPLS.GT.NPLSI) THEN
              LPLSSR = .TRUE.
            ELSE
              LPLSSR(IPLS) = .TRUE.
            END IF
          END IF
        END DO
        MXREC=MAXVAL(NPRCI(1:NPLSI))
        MXPLS=COUNT(LPLSSR(1:NPLSI))
        ALLOCATE (FREC(0:MXPLS,0:MXREC,0:NRAD))
        ALLOCATE (VSOURC(NSRFS,0:NRAD))
        ALLOCATE (RQ21(N1ST))
        ALLOCATE (PS21(N2ND))
        IF (LEVGEO == 3) ALLOCATE (ASIMP(2,NRAD))
        ALLOCATE (ISOURC(NSRFS,0:NRAD))
        ALLOCATE (ICMX(NSRFS))
        ALLOCATE (IFREC(NPLS))
      END IF
C
      FREC=0.
      SREC=0.
      IFREC=0
C
      IFPLS=0
      DO 2 IPLS=1,NPLSI
        IF (LGPRC(IPLS,0).EQ.0) GOTO 2
        IF (.NOT.LPLSSR(IPLS)) GOTO 2
        IFPLS=IFPLS+1
        IFREC(IPLS)=IFPLS
        DO 3 IIRC=1,NPRCI(IPLS)
          IRRC=LGPRC(IPLS,IIRC)
          DO 3 J=1,NSBOX
            ADD=0.
C  EXCLUDE DEAD CELLS (GRID CUTS, ISOLATED CELLS FROM COUPLE_.., ETC)
C  EXCLUDE IPLS-VACUUM CELLS
            IF (NSTGRD(J).EQ.0.AND..NOT.LGVAC(J,IPLS)) THEN
              IF (NSTORDR >= NRAD) THEN
                ADD=TABRC1(IRRC,J)*DIIN(IPLS,J)*VOL(J)*ELCHA
              ELSE
                ADD=FTABRC1(IRRC,J)*DIIN(IPLS,J)*VOL(J)*ELCHA
              END IF
            END IF
            FREC(IFPLS,IIRC,J)  =FREC(IFPLS,IIRC,J-1)+ADD
            SREC(IPLS,IRRC)     =SREC(IPLS,IRRC)+ADD
3       CONTINUE
2     CONTINUE

C  SUM OVER SPECIES AND RECOMBINATION TYP INDICES
      DO 4 IPLS=1,NPLSI
        IF (LGPRC(IPLS,0).EQ.0) GOTO 4
        IF (.NOT.LPLSSR(IPLS)) GOTO 4
        IFPLS=IFREC(IPLS)
        DO 5 IIRC=1,NPRCI(IPLS)
          IRRC=LGPRC(IPLS,IIRC)
          SREC(IPLS,0)=SREC(IPLS,0)+SREC(IPLS,IRRC)
          SREC(0,IRRC)=SREC(0,IRRC)+SREC(IPLS,IRRC)
          SREC(0,0)   =SREC(0,0)   +SREC(IPLS,IRRC)
          DO 5 J=1,NSBOX
            FREC(IFPLS,0,J)=FREC(IFPLS,0,J)+FREC(IFPLS,IIRC,J)
5         CONTINUE
4     CONTINUE
C
C
      IF (TRCSOU.AND.IFPLS.GT.0) THEN
        EIO=0.
        EEL=0.
        MOM=0.
C
        DO 7 IPLS=1,NPLSI
          CNDYNP=AMUA*RMASSP(IPLS)
          IF (LGPRC(IPLS,0).EQ.0) GOTO 7
          IF (.NOT.LPLSSR(IPLS)) GOTO 7
          IFPLS=IFREC(IPLS)
          IPLSTI = MPLSTI(IPLS)
          IPLSV = MPLSV(IPLS)
          DO 6 IIRC=1,NPRCI(IPLS)
            IRRC=LGPRC(IPLS,IIRC)
            DO 6 J=1,NSBOX
              IF (NSTGRD(J).EQ.0.AND..NOT.LGVAC(J,IPLS)) THEN
                REC=FREC(IFPLS,IIRC,J)-FREC(IFPLS,IIRC,J-1)
                IF (REC.LE.0.D0) GOTO 6
                ADD=(1.5*TIIN(IPLSTI,J)+EDRIFT(IPLS,J))*REC
                EIO(IPLS,IRRC)=EIO(IPLS,IRRC)-ADD
                EIO(IPLS,0)   =EIO(IPLS,0   )-ADD
                IF (INDPRO(5) == 8) THEN
                  CALL VECUSR(1,BX,BY,BZ,1)
                ELSE
                  BX=BXIN(J)
                  BY=BYIN(J)
                  BZ=BZIN(J)
                END IF
                IF (INDPRO(4) == 8) THEN
                  CALL VECUSR(2,VX,VY,VZ,IPLSV)
                  VPARA=VX*BX+VY*BY+VZ*BZ
                  MOMPARA=VPARA*CNDYNP*SIGN(1._DP,VPARA)
                ELSE IF (INDPRO(5) == 8) THEN
                  VX = VXIN(IPLSV,J)
                  VY = VYIN(IPLSV,J)
                  VZ = VZIN(IPLSV,J)
                  VPARA=VX*BX+VY*BY+VZ*BZ
                  MOMPARA=VPARA*CNDYNP*SIGN(1._DP,VPARA)
                ELSE
                  MOMPARA=PARMOM(IPLS,J)
                ENDIF
                ADD=MOMPARA*REC
                MOM(IPLS,IRRC)=MOM(IPLS,IRRC)-ADD
                MOM(IPLS,0)   =MOM(IPLS,0   )-ADD
              ENDIF
6         CONTINUE
C
          DO 8 IIRC=1,NPRCI(IPLS)
            IRRC=LGPRC(IPLS,IIRC)
            DO 8 J=1,NSBOX
              ADD=0.D0
              IF (NSTGRD(J).EQ.0.AND..NOT.LGVAC(J,IPLS)) THEN
                IF (NSTORDR >= NRAD) THEN
                  EELRC = EELRC1(IRRC,J)
                ELSE
                  EELRC = FEELRC1(IRRC,J)
                END IF
                ADD=EELRC*DIIN(IPLS,J)*VOL(J)*ELCHA
              ENDIF
              EEL(IPLS,IRRC)=EEL(IPLS,IRRC)+ADD
              EEL(IPLS,0   )=EEL(IPLS,0   )+ADD
8         CONTINUE
7       CONTINUE
C
        CALL LEER(1)
        WRITE (6,*) 'DIAGNOSTICS FROM SUBR. SAMVOL: '
        CALL LEER(1)
        WRITE (6,*) 'VOLUME RECOMBINATION RATES INTEGRATED OVER'
        WRITE (6,*) 'ENTIRE COMPUTATIONAL GRID '
        CALL LEER(1)
        WRITE (6,*) 'RECOMBINATION ION PARTICLE LOSS (AMP): '
        DO 10 IPLS=1,NPLSI
          IF (.NOT.LPLSSR(IPLS)) CYCLE
          DO 11 IIRC=1,NPRCI(IPLS)
            IRRC=LGPRC(IPLS,IIRC)
            CALL MASJ2R('IPLS,IRRC, SREC         ',
     .                   IPLS,IRRC,-SREC(IPLS,IRRC))
11        CONTINUE
          IF (NPRCI(IPLS).GT.1) THEN
            CALL MASJ2R('IPLS,TOT., SREC(IPLS,0) ',
     .                   IPLS,0   ,-SREC(IPLS,0))
          ENDIF
10      CONTINUE
        CALL LEER(1)
        WRITE (6,*) 'RECOMBINATION ION ENERGY LOSS (WATT): '
        DO 12 IPLS=1,NPLSI
          IF (.NOT.LPLSSR(IPLS)) CYCLE
          DO 13 IIRC=1,NPRCI(IPLS)
            IRRC=LGPRC(IPLS,IIRC)
            CALL MASJ2R('IPLS,IRRC,EIO           ',
     .                   IPLS,IRRC,EIO(IPLS,IRRC))
13        CONTINUE
          IF (NPRCI(IPLS).GT.1) THEN
            CALL MASJ2R('IPLS,TOT.,EIO(IPLS,0)   ',
     .                   IPLS,0   ,EIO(IPLS,0))
          ENDIF
12      CONTINUE
        CALL LEER(1)
        WRITE (6,*) 'RECOMBINATION ELECTRON ENERGY LOSS (WATT): '
        DO 14 IPLS=1,NPLSI
          IF (.NOT.LPLSSR(IPLS)) CYCLE
          DO 15 IIRC=1,NPRCI(IPLS)
            IRRC=LGPRC(IPLS,IIRC)
            CALL MASJ2R('IPLS,IRRC,EEL           ',
     .                   IPLS,IRRC,EEL(IPLS,IRRC))
15        CONTINUE
          IF (NPRCI(IPLS).GT.1) THEN
            CALL MASJ2R('IPLS,TOT.,EEL(IPLS,0)   ',
     .                   IPLS,0   ,EEL(IPLS,0))
          ENDIF
14      CONTINUE
        CALL LEER(1)
        WRITE (6,*) 'RECOMBINATION PARALLEL MOMENTUM LOSS : '
        DO 16 IPLS=1,NPLSI
          IF (.NOT.LPLSSR(IPLS)) CYCLE
          DO 17 IIRC=1,NPRCI(IPLS)
            IRRC=LGPRC(IPLS,IIRC)
            CALL MASJ2R('IPLS,IRRC,MOM           ',
     .                   IPLS,IRRC,MOM(IPLS,IRRC))
17        CONTINUE
          IF (NPRCI(IPLS).GT.1) THEN
            CALL MASJ2R('IPLS,TOT.,MOM(IPLS,0)   ',
     .                   IPLS,0   ,MOM(IPLS,0))
          ENDIF
16      CONTINUE
        CALL LEER(1)

      ENDIF    !trcsou
C
C  SET TOTAL SOURCE STRENGTH FOR STRATA WITH NLVOL(ISTRA)=.TRUE.,
C
      DO 50 ISTRA=1,NSTRAI
        IF (NLVOL(ISTRA).AND.NLPLS(ISTRA)) THEN
          IPLS=NSPEZ(ISTRA)
          IF (IPLS.LE.0.OR.IPLS.GT.NPLSI) THEN
            WRITE (6,*) 'SOURCE SPECIES INDEX NSPEZ OUT OF RANGE'
            WRITE (6,*) 'ISTRA, NSPEZ(ISTRA) ',ISTRA,NSPEZ(ISTRA)
            CALL EXIT_OWN(1)
          ENDIF
          SUMM=0.D0
          EISUMM=0.D0
          DO 53 ISRFSI=1,NSRFSI(ISTRA)
            ISR=ISRFSI
            SUM=0.D0
            EISUM=0.D0
            IF (SORLIM(ISR,ISTRA).LT.0) THEN
C  INITIALIZE SAMPLING DISTRIBUTIONS FOR USER SPECIFIED VOLUME SOURCE
              CALL SM0USR(ISR,ISTRA,
     .                    SORAD1(ISR,ISTRA),SORAD2(ISR,ISTRA),
     .                    SORAD3(ISR,ISTRA),SORAD4(ISR,ISTRA),
     .                    SORAD5(ISR,ISTRA),SORAD6(ISR,ISTRA))
            ELSE
C  INITIALIZE SAMPLING DISTRIBUTIONS FOR DEFAULT VOLUME RECOMBINATION SOURCES
C  ACCOUNT FOR INGRDA(ISRFSI,ISTRA,...), INGRDE(ISRFSI,ISTRA,...)
              I=ISTRA
              ICC=0
              IF (NR1ST.GT.1) THEN
              IF (INGRDA(ISR,I,1).LE.0..OR.INGRDE(ISR,I,1).LE.0.D0) THEN
                CALL LEER(1)
                WRITE (6,*) 'WARNING FROM SAMVL0, ISTRA= ',ISTRA
                WRITE (6,*) 'NEW INPUT FOR INGRDA(.,.,1),INGRDE(.,.,1)'
                WRITE (6,*) 'AUTOMATIC CORRECTION CARRIED OUT '
                INGRDA(ISR,I,1)=1
                INGRDE(ISR,I,1)=MAX0(1,NR1ST)
                CALL LEER(1)
              ENDIF
              ENDIF
              IF (NP2ND.GT.1) THEN
              IF (INGRDA(ISR,I,2).LE.0..OR.INGRDE(ISR,I,2).LE.0.D0) THEN
                CALL LEER(1)
                WRITE (6,*) 'WARNING FROM SAMVL0, ISTRA= ',ISTRA
                WRITE (6,*) 'NEW INPUT FOR INGRDA(.,.,2),INGRDE(.,.,2)'
                WRITE (6,*) 'AUTOMATIC CORRECTION CARRIED OUT '
                INGRDA(ISR,I,2)=1
                INGRDE(ISR,I,2)=MAX0(1,NP2ND)
                CALL LEER(1)
              ENDIF
              ENDIF
              IF (NT3RD.GT.1) THEN
              IF (INGRDA(ISR,I,3).LE.0..OR.INGRDE(ISR,I,3).LE.0.D0) THEN
                CALL LEER(1)
                WRITE (6,*) 'WARNING FROM SAMVL0, ISTRA= ',ISTRA
                WRITE (6,*) 'NEW INPUT FOR INGRDA(.,.,3),INGRDE(.,.,3)'
                WRITE (6,*) 'AUTOMATIC CORRECTION CARRIED OUT '
                INGRDA(ISR,I,3)=1
                INGRDE(ISR,I,3)=MAX0(1,NT3RD)
                CALL LEER(1)
              ENDIF
              ENDIF
              IF (NPRCI(IPLS).EQ.0) THEN
                WRITE (6,*) 'NO DEFAULT VOLUME SOURCE DISTRIBUTION'
                WRITE (6,*) 'DEFINED. SUBSTRATUM TURNED OFF'
                WRITE (6,*) 'IPLS,ISRFSI,ISTRA ',IPLS,ISRFSI,ISTRA
                SORWGT(ISR,ISTRA)=0.D0
                GOTO 53
              ENDIF
              IF (NLRAD) THEN
                IR1=MAX0(1,INGRDA(ISR,ISTRA,1))
                IR2=MIN0(NR1ST,INGRDE(ISR,ISTRA,1))
              ELSE
                IR1=1
                IR2=2
              ENDIF
              IF (NLPOL) THEN
                IP1=MAX0(1,INGRDA(ISR,ISTRA,2))
                IP2=MIN0(NP2ND,INGRDE(ISR,ISTRA,2))
              ELSE
                IP1=1
                IP2=2
              ENDIF
              IF (NLTOR) THEN
                IT1=MAX0(1,INGRDA(ISR,ISTRA,3))
                IT2=MIN0(NT3RD,INGRDE(ISR,ISTRA,3))
              ELSE
                IT1=1
                IT2=2
              ENDIF

              ISTEP=SORIND(ISR,ISTRA)
              IFPLS=IFREC(IPLS)
              DO 52 IIRC=1,NPRCI(IPLS)
                IRRC=LGPRC(IPLS,IIRC)
                IF (ISTEP.EQ.IRRC) THEN
                  IRC=IRRC
                  IFRC=IIRC
                ELSEIF (ISTEP.EQ.0) THEN
C  SUM OVER ALL RECOMBINATION PROCESSES FOR SPECIES IPLS
                  IRC=0
                  IFRC=0
                  ISTEP=-1
                ELSE
                  GOTO 52
                ENDIF
                DO 51 IR=IR1,IR2-1
                  DO 51 IP=IP1,IP2-1
                    DO 51 IT=IT1,IT2-1
                      NCELL=IR+((IP-1)+(IT-1)*NP2T3)*NR1P2
                      ADD=FREC(IFPLS,IFRC,NCELL)-
     .                    FREC(IFPLS,IFRC,NCELL-1)
C  INDIRECT ADDRESSING
                      IF (ADD.GT.0.D0) THEN
                        ICC=ICC+1
                        SUM=SUM+ADD
                        EISUM=EISUM-
     .                   (1.5*TIIN(IPLSTI,NCELL)+EDRIFT(IPLS,NCELL))*ADD
                      ENDIF
51              CONTINUE
52            CONTINUE
              SORWGT(ISR,ISTRA)=SUM
              CALL LEER(1)
              WRITE (6,*) 'SUB-STRATUM WEIGHT REDEFINED '
              CALL MASJ2R ('ISRFSI,ISTRA,SORWGT     ',ISRFSI,ISTRA,SUM)
              IF (TRCSOU) THEN
                CALL MASJ3 ('IRRC,IPLS,ICMX          ',
     .                       IRC ,IPLS,ICC)
                CALL LEER(1)
              ENDIF
              SUMM=SUMM+SUM
              EISUMM=EISUMM+EISUM
            ENDIF
53        CONTINUE
C
          IF (SUMM.GT.0.D0) THEN
            FLUX(ISTRA)=SUMM
            WRITE (6,*) 'SOURCE STRENGTH REDEFINED '
            CALL MASJR2('ISTRA, FLUX, EIFLUX     ',
     .                   ISTRA,FLUX(ISTRA),EISUMM)
            CALL LEER(1)
          ENDIF
        ENDIF
50    CONTINUE
C
C  PREPARE SOME GEOMETRICAL CONSTANTS FOR RANDOM SAMPLING IN STANDARD MESH CELLS
      IF (LEVGEO.EQ.2) THEN
        IF (NLPOL) THEN
          DO 54 IP=1,NP2NDM
            PS21(IP)=PSURF(IP+1)-PSURF(IP)
54        CONTINUE
        ENDIF
        DO 55 IR=1,NR1STM
          RQ21(IR)=RQ(IR+1)-RQ(IR)
55      CONTINUE
      ENDIF
C
      IF (LEVGEO.EQ.3) THEN
        IT=1
        DO 56 IR=1,NR1ST-1
        DO 56 IP=1,NP2ND-1
          IND=IR+((IP-1)+(IT-1)*NP2T3)*NR1P2
          X1=XPOL(IR,IP)
          X2=XPOL(IR,IP+1)
          X3=XPOL(IR+1,IP+1)
          Y1=YPOL(IR,IP)
          Y2=YPOL(IR,IP+1)
          Y3=YPOL(IR+1,IP+1)
          ASIMP(1,IND)=0.5*(X1*(Y2-Y3)+X2*(Y3-Y1)+X3*(Y1-Y2))
          X1=XPOL(IR+1,IP)
          X2=XPOL(IR,IP)
          X3=XPOL(IR+1,IP+1)
          Y1=YPOL(IR+1,IP)
          Y2=YPOL(IR,IP)
          Y3=YPOL(IR+1,IP+1)
          ASIMP(2,IND)=0.5*(X1*(Y2-Y3)+X2*(Y3-Y1)+X3*(Y1-Y2))
56      CONTINUE
      ENDIF
C
      RETURN
C
C  AT THIS POINT: CALLED FROM PARTICLE LOOP TO INITIALIZE TEST FLIGHT
C
      ENTRY SAMVL1(NVLM,TIWL,TEWL,DIWL,VXWL,VYWL,VZWL,EFWL,WEISPZ)
C  USER SUPPLIED SOURCE
C
      IF (SORLIM(NVLM,ISTRA).LT.0) THEN
        CALL SM1USR(NVLM,X0,Y0,Z0,
     .              SORAD1(NVLM,ISTRA),SORAD2(NVLM,ISTRA),
     .              SORAD3(NVLM,ISTRA),SORAD4(NVLM,ISTRA),
     .              SORAD5(NVLM,ISTRA),SORAD6(NVLM,ISTRA),
     .              IRUSR,IPUSR,ITUSR,IAUSR,IBUSR,
     .              TIWL,TEWL,DIWL,VXWL,VYWL,VZWL,WEISPZ)
        NRCELL=IRUSR
        NPCELL=IPUSR
        NTCELL=ITUSR
        NACELL=IAUSR
        NBLOCK=IBUSR
        NBLCKA=NSTRD*(NBLOCK-1)+NACELL
        NCELL=NRCELL+((NPCELL-1)+(NTCELL-1)*NP2T3)*NR1P2+NBLCKA
C
        MTSURF=0
        NLSRFZ=.FALSE.
        MPSURF=0
        NLSRFY=.FALSE.
        MRSURF=0
        NLSRFX=.FALSE.
        EFWL=0._DP
        RETURN
      ENDIF
C
C  VOLUME RECOMBINATION SOURCE
C
C  TENTATIVELY ASSUME: A BULK ION WILL BE GENERATED
      LGPART=.TRUE.
      ITYP=4
C
      IF (.NOT.NLPLS(ISTRA)) GOTO 999

      IF (ISTROLD /= ISTRA) THEN
        ISTROLD=ISTRA
        IPLS=NSPEZ(ISTRA)
        DO ISRFSI=1,NSRFSI(ISTRA)
          ISR=ISRFSI
          ICC=0
          VSOURC(ISR,0)=0.D0
          IF (NLRAD) THEN
            IR1=MAX0(1,INGRDA(ISR,ISTRA,1))
            IR2=MIN0(NR1ST,INGRDE(ISR,ISTRA,1))
          ELSE
            IR1=1
            IR2=2
          ENDIF
          IF (NLPOL) THEN
            IP1=MAX0(1,INGRDA(ISR,ISTRA,2))
            IP2=MIN0(NP2ND,INGRDE(ISR,ISTRA,2))
          ELSE
            IP1=1
            IP2=2
          ENDIF
          IF (NLTOR) THEN
            IT1=MAX0(1,INGRDA(ISR,ISTRA,3))
            IT2=MIN0(NT3RD,INGRDE(ISR,ISTRA,3))
          ELSE
            IT1=1
            IT2=2
          ENDIF

          ISTEP=SORIND(ISR,ISTRA)
          IFPLS=IFREC(IPLS)
          DO IIRC=1,NPRCI(IPLS)
            IRRC=LGPRC(IPLS,IIRC)
            IF (ISTEP.EQ.IRRC) THEN
              IRC=IRRC
              IFRC=IIRC
            ELSEIF (ISTEP.EQ.0) THEN
C  SUM OVER ALL RECOMBINATION PROCESSES FOR SPECIES IPLS
              IRC=0
              IFRC=0
              ISTEP=-1
            ELSE
              CYCLE
            ENDIF
            DO IR=IR1,IR2-1
              DO IP=IP1,IP2-1
                DO IT=IT1,IT2-1
                  NCELL=IR+((IP-1)+(IT-1)*NP2T3)*NR1P2
                  ADD=FREC(IFPLS,IFRC,NCELL)-
     .                FREC(IFPLS,IFRC,NCELL-1)
C  INDIRECT ADDRESSING
                  IF (ADD.GT.0.D0) THEN
                    ICC=ICC+1
!pb                    WRITE (89,'(2i6,es12.4)') icc,ncell,add
                    ISOURC(ISR,ICC)=NCELL
                    VSOURC(ISR,ICC)=VSOURC(ISR,ICC-1)+ADD
                  ENDIF
                END DO  
              END DO
            END DO
          END DO ! IIRC 
          ICMX(ISR)=ICC
        END DO ! ISRFSI
C
      END IF
C
C  FIND CELL NUMBER: NCELL
C
      IC1=0
      IC2=ICMX(NVLM)
      ZEP1=RANF_EIRENE()*VSOURC(NVLM,IC2)

      IL=0
      IU=IC2
      
c  binary search
      DO WHILE (IU-IL.gt.1) 
        IM=(IU+IL)*0.5
        IF(ZEP1.GE.VSOURC(NVLM,IM)) THEN
          IL=IM
        ELSE
          IU=IM
        ENDIF
      END DO
c
      ICELL=IU

      NCELL=ISOURC(NVLM,ICELL)
C
      IF (NCELL.GT.NSURF) GOTO 991
C
C  A CELL NUMBER NCELL HAS NOW BEEN SAMPLED
C
      CALL NCELLN(NCELL,NRCELL,NPCELL,NTCELL,NACELL,NBLOCK,
     .            NR1ST,NP2ND,NT3RD,NBMLT,NLRAD,NLPOL,NLTOR)
C
C  FIND TOROIDAL CO-ORDINATE IN NTCELL
C
      IF (.NOT.NLTOR) THEN
C       NTCELL=1
        IPERID=1
        IF (NLTRZ) THEN
          Z0=0.
        ELSEIF (NLTRA) THEN
C  TACTICALLY ASSUME: PARTICLE STARTS IN LOCAL TOR. BASIS CELL NO.1
          ZRM1=ZSURF(1)
          PHI=ZRM1+RANF_EIRENE()*ZFULL
          IPERID=1
C         Z0=??, TO BE FOUND FROM X01,PHI LATER
C         IPERID=LEARCA(PHI,ZSURF,1,NTTRA,1,'SAMVOL      ')
        ELSEIF (NLTRT) THEN
          GOTO 999
        ENDIF
      ELSEIF (NLTOR) THEN
        IPERID=NTCELL
C  SAMPLE IN CELL NTCELL
        IF (NLTRZ) THEN
          Z0=ZSURF(NTCELL)+RANF_EIRENE()*(ZSURF(NTCELL+1)-ZSURF(NTCELL))
        ELSEIF (NLTRT) THEN
          PHI=ZSURF(NTCELL)+RANF_EIRENE()*
     .        (ZSURF(NTCELL+1)-ZSURF(NTCELL))
C         Z0=??, TO BE FOUND FROM X01,PHI LATER
        ELSEIF (NLTRA) THEN
          ZRM1=ZFULL*(NTCELL-1)
          PHI=ZRM1+RANF_EIRENE()*ZFULL
C         Z0=??, TO BE FOUND FROM X01,PHI LATER
        ENDIF
      ENDIF
C
C  FIND RADIAL AND POLOIDAL CO-ORDINATE
C
      IF (LEVGEO.EQ.1) THEN
        X0=RSURF(NRCELL)+RANF_EIRENE()*(RSURF(NRCELL+1)-RSURF(NRCELL))
        IF (NLPOL) THEN
          Y0=PSURF(NPCELL)+RANF_EIRENE()*(PSURF(NPCELL+1)-PSURF(NPCELL))
        ELSE
          Y0=YIA+RANF_EIRENE()*(YAA-YIA)
        END IF
      ELSEIF (LEVGEO.EQ.2) THEN
        IF (NLCRC) THEN
C  POLOIDAL CO-ORDINATE
          IF (NLPOL) THEN
            WINK=PSURF(NPCELL)+RANF_EIRENE( )*PS21(NPCELL)
          ELSEIF (.NOT.NLPOL) THEN
            WINK=RANF_EIRENE( )*PI2A
          ENDIF
C  RADIAL CO-ORDINATE
          RR=SQRT(RQ(NRCELL)+RANF_EIRENE( )*RQ21(NRCELL))
C
          X0=RR*COS(WINK)
          Y0=RR*SIN(WINK)
        ELSEIF (NLELL) THEN
CDR NOT READY. STRICKLY, THETA AND R ARE CORRELATED. USE
CDR            MARGINAL AND CONDITIONAL DISTRIBUTION F1(R) AND
CDR            F2(PHI, GIVEN R)
C  POLOIDAL CO-ORDINATE
          IF (NLPOL) THEN
            WINK=PSURF(NPCELL)+RANF_EIRENE( )*PS21(NPCELL)
          ELSEIF (.NOT.NLPOL) THEN
            WINK=RANF_EIRENE( )*PI2A
          ENDIF
C  RADIAL CO-ORDINATE
          RR=SQRT(RQ(NRCELL)+RANF_EIRENE( )*RQ21(NRCELL))
C
          RRI=RSURF(NRCELL)
          RRD=RSURF(NRCELL+1)-RRI
          RRN=(RR-RRI)/RRD
C
          ELR=ELL(NRCELL)+RRN*(ELL(NRCELL+1)-ELL(NRCELL))
          EPR=EP1(NRCELL)+RRN*(EP1(NRCELL+1)-EP1(NRCELL))
          X0=RR*COS(WINK)+EPR
          Y0=RR*SIN(WINK)*ELR
        ELSEIF (NLTRI) THEN
          GOTO 999
        ENDIF
      ELSEIF (LEVGEO.EQ.3.OR.LEVGEO.EQ.4) THEN
        IF (LEVGEO.EQ.3) THEN
          IF (.NOT.NLPOL) THEN
            GOTO 999
          ENDIF
          IN = NRCELL + (NPCELL-1)*NR1ST
          ZEP1=AREA(IN)*RANF_EIRENE()
          IF (ZEP1.LE.ASIMP(1,NCELL)) THEN
C   PUNKT IN DREIECK 1
            X1=XPOL(NRCELL,NPCELL)
            X2=XPOL(NRCELL,NPCELL+1)
            X3=XPOL(NRCELL+1,NPCELL+1)
            Y1=YPOL(NRCELL,NPCELL)
            Y2=YPOL(NRCELL,NPCELL+1)
            Y3=YPOL(NRCELL+1,NPCELL+1)
          ELSE
C   PUNKT IN DREIECK 2
            X1=XPOL(NRCELL+1,NPCELL)
            X2=XPOL(NRCELL,NPCELL)
            X3=XPOL(NRCELL+1,NPCELL+1)
            Y1=YPOL(NRCELL+1,NPCELL)
            Y2=YPOL(NRCELL,NPCELL)
            Y3=YPOL(NRCELL+1,NPCELL+1)
          ENDIF
          IPOLG=NPCELL
        ELSEIF (LEVGEO.EQ.4) THEN
          X1=XTRIAN(NECKE(1,NCELL))
          X2=XTRIAN(NECKE(2,NCELL))
          X3=XTRIAN(NECKE(3,NCELL))
          Y1=YTRIAN(NECKE(1,NCELL))
          Y2=YTRIAN(NECKE(2,NCELL))
          Y3=YTRIAN(NECKE(3,NCELL))
        ENDIF
        Z1=0.
        Z2=0.
        Z3=0.
        CALL FPOLYT_3(X1,Y1,Z1,X2,Y2,Z2,X3,Y3,Z3,X0,Y0,ZZ)
      ELSEIF (LEVGEO.EQ.5) THEN
        X1=XTETRA(NTECK(1,NCELL))
        Y1=YTETRA(NTECK(1,NCELL))
        Z1=ZTETRA(NTECK(1,NCELL))
        X2=XTETRA(NTECK(2,NCELL))
        Y2=YTETRA(NTECK(2,NCELL))
        Z2=ZTETRA(NTECK(2,NCELL))
        X3=XTETRA(NTECK(3,NCELL))
        Y3=YTETRA(NTECK(3,NCELL))
        Z3=ZTETRA(NTECK(3,NCELL))
        X4=XTETRA(NTECK(4,NCELL))
        Y4=YTETRA(NTECK(4,NCELL))
        Z4=ZTETRA(NTECK(4,NCELL))
        CALL FPOLYT_4(X1,Y1,Z1,X2,Y2,Z2,X3,Y3,Z3,X4,Y4,Z4,X0,Y0,Z0)
      ELSEIF (LEVGEO.EQ.6) THEN
        WRITE (6,*) 'ERROR EXIT FROM SAMVOL. LEVGEO ',LEVGEO
        CALL EXIT_OWN(1)
      ENDIF
C
      IF (NLTRA) THEN
C  FIND Z0 FROM X01,PHI IN LOCAL TOROIDAL CELL NTCELL
        X01=X0+RMTOR
        CALL FZRTRI(X0,Z0,NTCELL,X01,PHI,NTCELL)
      ENDIF
C
      MTSURF=0
      NLSRFZ=.FALSE.
      MPSURF=0
      NLSRFY=.FALSE.
      MRSURF=0
      NLSRFX=.FALSE.
C
C  NEXT: ANALOG SPECIES INDEX DISTRIBUTION: WEISPZ(IPL)
C
      DO 630 ISPZ=1,NSPZ
        WEISPZ(ISPZ)=-1.
630   CONTINUE
C
C  NOT IN USE ANYMORE
C  CURRENTLY: ONLY SINGLE SPECIES VOLUME SOURCES POSSIBLE
C  MULTI SPECIES VOL-SOURCES HAVE TO BE TREATED BY STRATIFIED SAMPLING
C     IF (NSPEZ(ISTRA).LE.0) THEN
C       IF (NCELL.EQ.1) THEN
C         DO 640 IPL=1,NPLSI
C           IREC=0
C           IFPLS=IFREC(IPLS)
C           WEISPZ(IPL)=(FREC(IFPLS,0,1))/
C    .                  (FREC(0,  0,1))
C           IF (WEISPZ(IPL).LT.0) GOTO 991
640       CONTINUE
C       ELSE
C         DO 645 IPL=1,NPLSI
C           IFPLS=IFREC(IPLS)
C           WEISPZ(IPL)=(FREC(IFPLS,0,NCELL)-FREC(IFPLS,0,NCELL-1))/
C     .                 (FREC(0,    0,NCELL)-FREC(0,    0,NCELL-1))
C           IF (WEISPZ(IPL).LT.0) GOTO 991
645       CONTINUE
C       ENDIF
C     ENDIF
C
      CRTX=SORAD4(NVLM,ISTRA)
      CRTY=SORAD5(NVLM,ISTRA)
      CRTZ=SORAD6(NVLM,ISTRA)
      CNORM=SQRT(CRTX**2+CRTY**2+CRTZ**2)+EPS60
      CRTX=CRTX/CNORM
      CRTY=CRTY/CNORM
      CRTZ=CRTZ/CNORM
!PB  
      TEWL=TEIN(NCELL)
      TIWL(1:NPLSI)=TIIN(MPLSTI(1:NPLSI),NCELL)
      VXWL(1:NPLSI)=VXIN(MPLSV(1:NPLSI),NCELL)
      VYWL(1:NPLSI)=VYIN(MPLSV(1:NPLSI),NCELL)
      VZWL(1:NPLSI)=VZIN(MPLSV(1:NPLSI),NCELL)
      EFWL=0._DP
C
      RETURN
C
990   CONTINUE
      WRITE (6,*) 'ERROR IN SAMVOL'
      CALL EXIT_OWN(1)
991   CONTINUE
      WRITE (6,*) 'SAMPLING ERROR IN SAMVOL'
      WRITE (6,*) 'NCELL,NSURF,NSBOX ',NCELL,NSURF,NSBOX
      CALL EXIT_OWN(1)
997   CONTINUE
      WRITE (6,*) 'SORIND (=IRRC) OUT OF RANGE IN SAMVOL'
      WRITE (6,*) 'IRRC,NREC ',IRRC,NREC
      CALL EXIT_OWN(1)
999   CONTINUE
      WRITE (6,*) 'UNWRITTEN OPTION IN SAMVOL'
      CALL EXIT_OWN(1)
      END
