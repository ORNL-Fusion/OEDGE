C
      SUBROUTINE MCARLO
C
C  MONTE CARLO CALCULATION
C
      USE PRECISION
      USE PARMMOD
      USE COMUSR
      USE CTSURF
      USE CESTIM
      USE CCONA
      USE CLOGAU
      USE CRAND
      USE CGRID
      USE CSPEZ
      USE CZT1
      USE CTRCEI
      USE CGEOM
      USE CSDVI
      USE CSDVI_BGK
      USE CSDVI_COP
      USE COMPRT
      USE CPES
      USE COMNNL
      USE COMSOU
      USE COMSPL
      USE CLGIN
      USE COUTAU
      USE CSPEI
      USE PHOTON

      IMPLICIT NONE

      INCLUDE 'mpif.h'
C
      CHARACTER(6) :: CIS
      CHARACTER(10) :: CDATE, CTIME

      REAL(DP), ALLOCATABLE :: OUTAU(:)
      REAL(DP) :: ZVOLIN(NRTAL), ZVOLIW(NRTAL),
     .          XTIM(0:NSTRA), SCLTAL(N1MX,NTALV), DXTIM(0:NSTRA)
      REAL(DP) :: ST, FFF, DELT, XFL1,
     .          XPRNLS, XFACT, OVER_ACC, XPRNLI, STW, STWS,
     .          TIMI, SECOND_OWN, XPT, XX1, XPT1, XFL, SECND, XX, FLX,
     .          VAL, ZW, ZWW, VALUE, ZVOLWT, ZVOLNT, FSIG, ZFLUX, 
     .          SECND2, OVER, SECND1, WTT, SECDEL, DUMRAN, timan, timen
      REAL(DP), EXTERNAL :: RANF_EIRENE, RANSET_EIRENE

      INTEGER :: npts_save(nstra)
      INTEGER :: ITAL, ISDV, IALS, ISTRAA, ISTRAE, ICELL,
     .           IGFFT, IALV, IDV, I, K, IER, IRC, IBGV, NMX, NINIST,
     .           IPANU, ISEED, ISTR, NPTTOT, NREC11, IB, N2, NREC10,
     .           IC, IR, IGFF, IADD, INDX, ICLV, IADV, ICPV, ISNV,
     .           INODES, J, ISEE, IPTSI, I1, I2, I3, IA, IT, IMCP,
     .           ISUM, NPX, IS, NEW_ITER, ISPC, IN
      INTEGER, EXTERNAL :: RANGET_EIRENE
C
      LOGICAL :: LGSTOP, NLPOLS, NLTORS
      DATA N2/2/
C
C@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
C
      TIMI=SECOND_OWN()
      timan=timi
C
      IF (NFILEN.NE.0) THEN
        NREC10=1500
        OPEN (UNIT=10,ACCESS='DIRECT',FORM='UNFORMATTED',RECL=8*NREC10)
        NREC11=NOUTAU
        OPEN (UNIT=11,ACCESS='DIRECT',FORM='UNFORMATTED',RECL=8*NREC11)
      ENDIF
C@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
C
C-------------------------------------------------------------------
C
C** INITIALIZE SOME DATA AND SUBROUTINES (ONCE FOR ALL STRATA) *****
C
C  SCLTAL: FLAG FOR SCALING OF VOLUME AVERAGED TALLY
C  SCLTAL =0  1.
C         =1  ZVOLIN(ICELL)
C         =2  ZW
C         =3  ZVOLIW(ICELL)
C         =4  ZWW
C
      SCLTAL=0.D0
      SCLTAL(1,1:8)=1
      SCLTAL(1,9:56)=3
C
C  INITIALIZE RANDOM NUMBER ARRAYS
      INIV1=0
      INIV2=0
      INIV3=0
      INIV4=0
C  DETERMINE MAXIMAL INTEGER (DEPENDING ON MACHINE)
      IF (NLCRR) THEN
        INTMAX=HUGE(1)
      ENDIF
C
C  IRNDVC MUST BE EVEN AND NOT LARGER THEN 64 (COMMON CRAND)
C  IRNDVC IS THE NUMBER OF RANDOM VECTORS PRODUCED IN ONE CALL TO
C  TO RANDOM SAMPLING ROUTINES
      IF (NLCRR) THEN
        IRNDVC=2
      ELSE
        IRNDVC=64
      ENDIF
      IRNDVH=IRNDVC/2

      TIMen=SECOND_OWN()
C
C  INITIALIZE SUBR. STATIS
C
      CALL LEER(1)
      CALL STATS0
      CALL STATS0_BGK
      CALL STATS0_COP
      CALL STATS0_SPC
C  INITIALIZE SUBR. REFLEC AND SPUTER
      CALL REFLC0
      IF (NPHOT > 0) CALL REFLC0_PHOTON
      CALL SPUTR0
C  INITIALIZE SUBR. SAMVOL
      CALL SAMVL0
C  INITIALIZE SUBR. SAMSRF
      CALL SAMSF0
C
C
      IESTR=-1
      IF (NFILEN.EQ.2.OR.NFILEN.EQ.7) GOTO 2000
C
C**** CLEAR WORK AREA FOR SUM OVER STRATA ****************************
C
      CALL CLEAR_SUMOSTRA
!pb      STW    = 0._DP
!pb      STWS   = 0._DP
C
C**** INITIALIZE COMMONS COUTAU AND CSPEZ
C
      CALL INIT_COUTAU
      FASCL(0)=1.
      FMSCL(0)=1.
      FISCL(0)=1.
      FPHSCL(0)=1.
C
      LOGATM=.FALSE.
      LOGION=.FALSE.
      LOGMOL=.FALSE.
      LOGPLS=.FALSE.
      LOGPHOT=.FALSE.
C
C
C   MAXIMAL CALCULATION TIME ALLOWED FOR EACH STRATUM,
C   PROPORTIONAL TO NPTS(ISTRA), OR FLUX(ISTRA) (INPUT)
C   OR LINEAR COMBINATION THEREOF
C   THEREFORE NUMBER OF TEST PARTICLES MAY BE LESS THAN NPTS
C   BUT DO AT LEAST 2 PARTICLES, IN CASE NPTS(ISTRA).GE.2
C
      CALL TRMAIN(XX,NTCPU)
      XTIM(0)=SECOND_OWN()
      SECND=XTIM(0)

      timan=secnd
C
C  REMAINING CPU TIME, SUBSTRACT N2 SECONDS FOR PRINTOUT AND PLOTS
      XX1=XX-N2
      XPT=0.
      XFL=0.
      DO 7 ISTRA=1,NSTRAI
        IF (NPTS(ISTRA).LE.0.AND.FLUX(ISTRA).GT.0.D0) THEN
          FLUX(ISTRA)=0.D0
          WRITE (6,*) 'STRATUM ISTRA= ',ISTRA,' TURNED OFF. ZERO NPTS'
          CALL LEER(1)
        ENDIF
        IF (NPTS(ISTRA).GT.0.AND.FLUX(ISTRA).LE.0.D0) THEN
          NPTS(ISTRA)=0
          WRITE (6,*) 'STRATUM ISTRA= ',ISTRA,' TURNED OFF. ZERO FLUX'
          CALL LEER(1)
        ENDIF
        XPT=XPT+FLOAT(NPTS(ISTRA))
        XFL=XFL+FLUX(ISTRA)
7     CONTINUE
      XPT1=0.
      XFL1=0.
      nsteff=0
      DO 8 ISTRA=1,NSTRAI
        if (npts(istra) .gt. 0) then
          XPT1=XPT1+NPTS(ISTRA)
          XFL1=XFL1+FLUX(ISTRA)
          XTIM(ISTRA)=XTIM(0)+XX1*((1.-ALLOC)*XPT1/(XPT+EPS60)+
     +                             (   ALLOC)*XFL1/(XFL+EPS60))
          nsteff=nsteff+1
        else
          xtim(istra)=xtim(istra-1)
        end if
8     CONTINUE

C  REDISTRIBUTE XTIM IN CASE THAT SOURCES ARE SWITCHED OFF (SHORT CYCLE)
      DO ISTRA=1,NSTRAI
        DXTIM(ISTRA)=XTIM(ISTRA)-XTIM(ISTRA-1)
        IF (.NOT.NLSRON(ISTRA)) DXTIM(ISTRA)=0._DP
      END DO

      DO ISTRA=1,NSTRAI
        XTIM(ISTRA)=XTIM(ISTRA-1)+DXTIM(ISTRA)
      END DO      
C

      TIMen=SECOND_OWN()

      CALL LEER(2)
      CALL MASAGE ('LOOP OVER STRATA STARTS AT CPU TIME(SEC):    ')
      CALL MASR1 ('STARTTIM',XTIM(0))
      CALL MASAGE ('CPU TIME ASSIGNED TO STRATA (SEC) :          ')
      IF (ALLOC.EQ.0.D0) THEN
        CALL MASAGE ('PROPORTIONAL NPTS(ISTRA)                     ')
      ELSEIF (ALLOC.EQ.1.) THEN
        CALL MASAGE ('PROPORTIONAL FLUX(ISTRA)                     ')
      ELSE
        CALL MASAGE ('WEIGHTED ALLOCATION BETWEEN NPTS AND FLUX    ')
      ENDIF
      DO 9 ISTRA=1,NSTRAI
        DELT=XTIM(ISTRA)-XTIM(ISTRA-1)
        CALL MASJ1R ('STRATUM, TIME   ',ISTRA,DELT)
9     CONTINUE
      CALL LEER(2)
C
C  ASSIGN NUMBER OF PARTICLES TO BE STORED ON CENSUS, PROPORTIONAL
C  TO CPU TIME ASSIGNED TO EACH STRATUM
C
      IF (NPRNLI.GT.0) THEN
        WRITE(6,*) 'MAXIMUM NUMBER OF PARTICLES THAT WILL BE SAVED '
        WRITE(6,*) 'FOR SNAPSHOT ESTIMATORS: PROPORTIONAL TO CPU-'
        WRITE(6,*) 'TIME ALLOCATED FOR EACH STRATUM'
        DO  ISTRA=1,NSTRAI
          XFACT=(XTIM(ISTRA)-XTIM(ISTRA-1))/XX1
          XPRNLS       =NPRNLI*XFACT+0.5
          NPRNLS(ISTRA)=XPRNLS
        ENDDO
10      ISUM=SUM(NPRNLS(1:NSTRAI))
        IF (ISUM.NE.NPRNLI) THEN
C  ROUND OFF ERRORS
          WRITE (6,*) 'ISUM,NPRNLI ',ISUM,NPRNLI
          NMX=0
          NPX=-1
          DO ISTRA=1,NSTRAI
            IF (NPRNLS(ISTRA).GT.NPX) THEN
              NMX=ISTRA
              NPX=NPRNLS(ISTRA)
            ENDIF
          ENDDO
          IS=ISIGN(1,ISUM-NPRNLI)
          NPRNLS(NMX)=NPRNLS(NMX)-IS
          GOTO 10
        ENDIF
        DO  ISTRA=1,NSTRAI
          CALL MASJ2 ('STRATUM, NUMBER ',ISTRA,NPRNLS(ISTRA))
        ENDDO
      ENDIF
C
C  ASSIGN PE'S TO STRATA
C
      IF ((NSTEFF > 0) .AND. (NPRS.GT.nsteff)) THEN
        CALL PEDIST(XTIM)
        if (.not.lident) then
          do istra=1,nstrai
            ninitl(istra)=ninitl(istra)+my_pe*10000
          enddo
        endif
      ENDIF
C
C**** STRATA LOOP ****************************************************
C
      NPANU=0
      OVER_ACC=0.D0
      NEW_ITER=0
      DO 1000 ISTR=1,NSTRAI

        timan=second_own()

        ISTRA=ISTR
        IF (.NOT.NLSRON(ISTRA)) CYCLE
        IF (NLMOVIE) THEN
          ISTRA=NSTRAI-ISTR+1
          IF (ISTRA.EQ.NSTRAI-1) THEN
C  TOTAL NUMBER OF PARTICLES TO BE LAUNCHED FROM ALL NON-CENSUS STRATA
            NPTTOT=NPRNLI-NPANU
C  REDEFINE NPTS ACCORDING TO XTIM(ISTRA)
            CALL LEER(2)
            WRITE (6,*) 'REDEFINE NPTS(ISTRA) BECAUSE OF NLMOVIE OPTION'
            ISUM=0
            DO IS=1,NSTRAI-1
              XFACT=(XTIM(IS)-XTIM(IS-1))/XTIM(NSTRAI-1)
              XPRNLI=NPTTOT*XFACT+0.5
              NPTS_SAVE(IS)=NPTS(IS)
              NPTS(IS)=XPRNLI
              ISUM=ISUM+NPTS(IS)
              WRITE(6,*) 'ISTRA, NPTS = ',IS,NPTS(IS)
            ENDDO
          ENDIF
        ENDIF
        CALL LEER(2)
        IF (NPTS(ISTRA).GT.0) THEN
          WRITE (6,*) 'BEGIN TO WORK ON STRATUM NO. ',ISTRA
        ELSEIF (NPTS(ISTRA).LE.0) THEN
          WRITE (6,*) 'STRATUM NO. ',ISTRA,' ABANDONED'
        ENDIF
        CALL LEER(2)
        XMCP(ISTRA)=0.
        if( ((nprs.le.nsteff).and.(mod(ISTRA-1,nprs).eq.my_pe)) .or.
     .      ((nprs.gt.nsteff).and.(nstrpe(my_pe).eq.istra)) ) then
        IPANU=0
C
C  INITIALIZE RANDOM NUMBER GENERATOR FOR STRATUM ISTRA
        IF (NINITL(ISTRA).GT.0) THEN
          NINIST=NINITL(ISTRA)
          dumran=ranset_eirene(ninist)
          iseed=ranget_eirene(isee)
          ISEEDR=ISEED*0.3D0
          INIV1=0
          INIV2=0
          INIV3=0
          INIV4=0
        ELSEIF (NINITL(ISTRA).LT.0) THEN
          CALL DATE_AND_TIME(CDATE,CTIME)
          READ(CTIME(1:6),*) NINITL(ISTRA)
          WRITE (6,*) 'NINITL(ISTRA) SET TO ',NINITL(ISTRA)
          NINIST=NINITL(ISTRA)
          dumran=ranset_eirene(ninist)
          iseed=ranget_eirene(isee)
          ISEEDR=ISEED*0.3D0
          INIV1=0
          INIV2=0
          INIV3=0
          INIV4=0
C       ELSEIF (NINITL(ISTRA).EQ.0) THEN
C  DON'T INITIALIZE FOR THIS STRATUM, NOTHING TO BE DONE HERE
        ENDIF
C
        FASCL(ISTRA)=1.
        FMSCL(ISTRA)=1.
        FISCL(ISTRA)=1.
        FPHSCL(ISTRA)=1.

        timen=second_own() 
C
C  CLEAR WORK AREA FOR THIS STRATUM
C
        CALL CLEAR_STRATUM
C
C  ENFORCE TOROIDAL OR POLOIDAL SYMMETRY FOR THIS STRATUM
C
        IF (NLAVRP(ISTRA)) THEN
          NLPOLS=NLPOL
          NLPOL=.FALSE.
        ENDIF
C
        IF (NLAVRT(ISTRA)) THEN
          NLTORS=NLTOR
          NLTOR=.FALSE.
        ENDIF
C
        IPRNLS=0
C
        IF (NPTS(ISTRA).LE.0) GOTO 1000
C
C  INITIALIZE SUBR. LOCATE
C
        CALL LOCAT0
C
C  LOCATE AND FOLLOW MC-PARTICLES
C
        CALL FTCRI(ISTRA,CIS)
        CALL MASBOX ('LAUNCH PARTICLES FOR STRATUM NUMBER ISTRA='//CIS)
        OVER=SECOND_OWN()-SECND
C  ACCUMULATED OVERHEAD BETWEEN STRATA
        OVER_ACC=OVER_ACC+OVER
        CALL MASR1 ('OVERHEAD',OVER)
        XTIM(ISTRA)=XTIM(ISTRA)+OVER_ACC
        WRITE (6,*) 'XTIM(ISTRA)= ',XTIM(ISTRA)
C
        LGLAST=.FALSE.
        LGSTOP=.FALSE.
C
C
        DO 100 IPTSI=1,NPTS(ISTRA)
C
C  RESET INDEX-ARRAY
          NCLMT = 0
          DO I=1,NCLMTS
            IN=ICLMT(I)
            IMETCL(IN) = 0
          END DO
          LMETSP=.FALSE.
          NCLMTS = 0
          IF (NADSPC > 0) THEN
            DO ISPC=1,NADSPC
              ESTIML(ISPC)%PSPC%IMETSP = 0
            END DO
          END IF
C
          IF (LGLAST.AND.LGSTOP) THEN
            CALL LEER(1)
            WRITE (6,*) 'NO FURTHER COMP.TIME AVAIL. FOR THIS STRATUM'
            WRITE (6,*) 'M.C. HISTORIES FOLLOWED UNTIL THAT TIME FOR'
            WRITE (6,*) 'THIS STRATUM'
            CALL MASJ2 ('ISTRA,IPANU=    ',ISTRA,IPANU)
            IF (NPRNLI.GT.0) THEN
              WRITE (6,*) 'M.C. HISTORIES THAT SCORED AT CENSUS'
              CALL MASJ1 ('IPRNLS= ',IPRNLS)
            ENDIF
            IF (TRCLST) CALL OUTLST
            GOTO 101
          ELSEIF (LGLAST.AND..NOT.LGSTOP) THEN
            CALL LEER(1)
            WRITE (6,*) 'CENSUS ARRAYS FILLED FOR THIS STRATUM'
            WRITE (6,*) 'M.C. HISTORIES FOLLOWED UNTIL THAT TIME FOR'
            WRITE (6,*) 'THIS STRATUM'
            CALL MASJ2 ('ISTRA,IPANU=    ',ISTRA,IPANU)
            WRITE (6,*) 'M.C. HISTORIES THAT SCORED AT CENSUS'
            CALL MASJ1 ('IPRNLS= ',IPRNLS)
            IF (TRCLST) CALL OUTLST
            GOTO 101
          ENDIF
          SECND1=SECOND_OWN()
          LGLAST = IPTSI.EQ.NPTS(ISTRA)
          LGLAST = LGLAST.OR.(SECND1.GT.XTIM(ISTRA).AND.IPTSI.GE.2.AND.
     .                        .NOT.NLMOVIE)
          LGSTOP = LGLAST
C  NEXT MONTE CARLO HISTORY
          IF (NLCRR) THEN
C  INITIALIZE RANDOM NUMBERS FOR EACH PARTICLE, TO GENERATE CORRELATION
C           Call RANSET_eirene(ISEED)
            dumran=ranset_eirene(iseed)
            DUMRAN=RANF_EIRENE( )
            iseed=ranget_eirene(isee)
            ISEED=INTMAX-ISEED
            INIV1=0
            INIV2=0
            INIV3=0
            INIV4=0
          ENDIF
          XMCP(ISTRA)=XMCP(ISTRA)+1.
          NPANU=NPANU+1
          IPANU=IPANU+1
          NLEVEL=0
          CALL LOCAT1(IPANU)
C  IS BIRTH PROCESS SURVIVED?
          IF (.NOT.LGPART) GOTO 110
C
102       CONTINUE
C  FOLLOW NEUTRAL PARTICLE
          IF (ITYP.EQ.0.OR.ITYP.EQ.1.OR.ITYP.EQ.2) THEN
            CALL FOLNEUT
C  FOLLOW TEST ION
          ELSEIF (ITYP.EQ.3) THEN
            CALL FOLION
          ENDIF
C  NEXT GENERATION ?
          IF (LGPART) GOTO 102
C
110       CONTINUE
C  NUMBER OF REMAINING NODES AND NUMBER OF LEVELS AT NEXT NODE
          IF (NLEVEL.GT.0) THEN
104         INODES=NODES(NLEVEL)-1
            NODES(NLEVEL)=INODES
            IF(INODES.LE.0) GO TO 103
C  RESTORE VARIABLES AND START NEW TRACK
            DO 105 J=1,NPARTC
              RPST(J)=RSPLST(NLEVEL,J)
105         CONTINUE
            DO 106 J=1,MPARTC
              IPST(J)=ISPLST(NLEVEL,J)
106         CONTINUE
            ITYP=ISPEZI(ISPZ,-1)
            IPHOT=ISPEZI(ISPZ,0)
            IATM=ISPEZI(ISPZ,1)
            IMOL=ISPEZI(ISPZ,2)
            IION=ISPEZI(ISPZ,3)
            IPLS=ISPEZI(ISPZ,4)
            CALL NCELLN(NCELL,NRCELL,NPCELL,NTCELL,NACELL,NBLOCK,
     .                  NR1ST,NP2ND,NT3RD,NBMLT,NLRAD,NLPOL,NLTOR)
            NBLCKA=NSTRD*(NBLOCK-1)+NACELL
            NLSRFX=MRSURF.GT.0
            NLSRFY=MPSURF.GT.0
            NLSRFZ=MTSURF.GT.0
            NLSRFA=MASURF.GT.0
            IF (NLTRC) CALL CHCTRC(X0,Y0,Z0,0,12)
            IF (NLSTOR) CALL STORE(200)
            GOTO 102
C  RETURN TO PREVIOUS LEVEL
103         CONTINUE
            NLEVEL=NLEVEL-1
            IF(NLEVEL.GT.0) GOTO 104
          ENDIF
C  HISTORY HAS ENDED
C
C  IN CASE NLERG: EITHER LOGATM(1,ISTRA) OR LOGMOL(1,ISTRA)
C  ACTIVATE CORRESPONDING STANDARD DEVIATION ESTIMATOR
C
          IF (NLERG.AND.IPTSI.EQ.1) THEN
            IF (NMOLI >= 1) THEN
              IF (LOGMOL(1,ISTRA)) THEN
                IIH(1)=2
                CALL STATS0
              ENDIF
            ENDIF
          ENDIF
C
C   MEAN SQUARE
          IF (NSIGI.GT.0) CALL STATS1     (NSBOX_TAL,NR1TAL,NP2TAL,
     .                                     NT3TAL,NLIMPS,
     .                                     NLSYMP(ISTRA),NLSYMT(ISTRA))
          IF (NSIGI_BGK.GT.0) CALL STATS1_BGK (NSBOX_TAL,NR1TAL,NP2TAL,
     .                                     NT3TAL,NLIMPS,
     .                                     NLSYMP(ISTRA),NLSYMT(ISTRA))
          IF (NSIGI_COP.GT.0) CALL STATS1_COP (NSBOX_TAL,NR1TAL,NP2TAL,
     .                                     NT3TAL,NLIMPS,
     .                                     NLSYMP(ISTRA),NLSYMT(ISTRA))
          IF (NSIGI_SPC.GT.0) CALL STATS1_SPC (NSBOX_TAL,NR1TAL,NP2TAL,
     .                                     NT3TAL,NLIMPS,
     .                                     NLSYMP(ISTRA),NLSYMT(ISTRA))
C
          IF (TRCTIM) THEN
            SECND2=SECOND_OWN( )
            SECDEL=SECND2-SECND1
            CALL MASJ1R('PART., CPU TIME ',NPANU,SECDEL)
          ENDIF
100     CONTINUE
        CALL LEER(1)
        WRITE (6,*) 'ALL REQUESTED TRAJECTORIES COMPLETED'
        WRITE (6,*) 'M.C. HISTORIES FOLLOWED UNTIL THAT TIME FOR'
        WRITE (6,*) 'THIS STRATUM'
        CALL MASJ2 ('ISTRA,IPANU=    ',ISTRA,IPANU)
        IF (NPRNLI.GT.0) THEN
          WRITE (6,*) 'M.C. HISTORIES THAT SURVIVED TO CENSUS'
          CALL MASJ1 ('IPRNLS= ',IPRNLS)
        ENDIF
        IF (TRCLST) CALL OUTLST
C       GOTO 101
101     CONTINUE
C
        SECND=SECOND_OWN()
C
C**** PARTICLE TRACING FOR THIS STRATUM FINISHED **********************
C
c
c     collect data for one stratum from all pe's performing calculations
c     for this stratum
c
       if ((nprs.gt.nsteff).and.(nstrpe(my_pe).eq.istra))
     .  call calstr
C
C  UPDATE AND CHECK LOGICALS FOR TALLIES
C
      DO 120  IMOL=1,NMOLI
        LOGMOL(0,ISTRA)=LOGMOL(0,ISTRA).OR.LOGMOL(IMOL,ISTRA)
        LOGMOL(IMOL,0)=LOGMOL(IMOL,0).OR.LOGMOL(IMOL,ISTRA)
120   CONTINUE
      DO 130  IATM=1,NATMI
        LOGATM(IATM,0)=LOGATM(IATM,0).OR.LOGATM(IATM,ISTRA)
        LOGATM(0,ISTRA)=LOGATM(0,ISTRA).OR.LOGATM(IATM,ISTRA)
130   CONTINUE
      DO 133  IION=1,NIONI
        LOGION(IION,0)=LOGION(IION,0).OR.LOGION(IION,ISTRA)
        LOGION(0,ISTRA)=LOGION(0,ISTRA).OR.LOGION(IION,ISTRA)
133   CONTINUE
      DO 135  IPLS=1,NPLSI
        LOGPLS(IPLS,0)=LOGPLS(IPLS,0).OR.LOGPLS(IPLS,ISTRA)
        LOGPLS(0,ISTRA)=LOGPLS(0,ISTRA).OR.LOGPLS(IPLS,ISTRA)
135   CONTINUE
      DO IPHOT=1,NPHOTI
        LOGPHOT(IPHOT,0)=LOGPHOT(IPHOT,0).OR.LOGPHOT(IPHOT,ISTRA)
        LOGPHOT(0,ISTRA)=LOGPHOT(0,ISTRA).OR.LOGPHOT(IPHOT,ISTRA)
      END DO
cpb die naechsten 4 statements auskommentieren????
      LOGMOL(0,0)=LOGMOL(0,0).OR.LOGMOL(0,ISTRA)
      LOGION(0,0)=LOGION(0,0).OR.LOGION(0,ISTRA)
      LOGATM(0,0)=LOGATM(0,0).OR.LOGATM(0,ISTRA)
      LOGPLS(0,0)=LOGPLS(0,0).OR.LOGPLS(0,ISTRA)
      LOGPHOT(0,0)=LOGPHOT(0,0).OR.LOGPHOT(0,ISTRA)
C
C  NUMBER OF LOCATED M.C. HISTORIES FOR THIS STRATUM: XMCP(ISTRA)
C
      if ((nsteff.ge.nprs).or.(npesta(istra).eq.my_pe)) then

      IF(XMCP(ISTRA).LT.1.) GOTO 1111
C
      WTT=0.
      DO IPHOT=1,NPHOTI
        WTOTPH(0,ISTRA)=WTOTPH(0,ISTRA)+WTOTPH(IPHOT,ISTRA)
        WTT=WTT+WTOTPH(IPHOT,ISTRA)*NPRT(IPHOT)
      END DO
      DO 200 IATM=1,NATMI
        WTOTA(0,ISTRA)=WTOTA(0,ISTRA)+WTOTA(IATM,ISTRA)
        WTT=WTT+WTOTA(IATM,ISTRA)*NPRT(NSPH+IATM)
200   CONTINUE
      DO 201 IMOL=1,NMOLI
        WTOTM(0,ISTRA)=WTOTM(0,ISTRA)+WTOTM(IMOL,ISTRA)
        WTT=WTT+WTOTM(IMOL,ISTRA)*NPRT(NSPA+IMOL)
 201  CONTINUE
      DO 202 IION=1,NIONI
        WTOTI(0,ISTRA)=WTOTI(0,ISTRA)+WTOTI(IION,ISTRA)
        WTT=WTT+WTOTI(IION,ISTRA)*NPRT(NSPAM+IION)
 202  CONTINUE
      WTOTE(ISTRA)=0._DP
      DO 203 IPLS=1,NPLSI
        WTOTP(0,ISTRA)=WTOTP(0,ISTRA)+WTOTP(IPLS,ISTRA)
        WTOTE(ISTRA)=WTOTE(ISTRA)+WTOTP(IPLS,ISTRA)*NCHRGP(IPLS)
        WTT=WTT-WTOTP(IPLS,ISTRA)*NPRT(NSPAMI+IPLS)
 203  CONTINUE
      CALL LEER(2)
      WRITE (6,*) 'TOTAL WEIGHT OF PRIMARY SOURCE PARTICLES '
      WRITE (6,*) 'BULK IONS, ATOMS, MOLECULES, TEST IONS '
      CALL MASR5 ('WTPLS,WTATM,WTMOL,WTION,WTPHOT          ',
     .     WTOTP(0,ISTRA),WTOTA(0,ISTRA),WTOTM(0,ISTRA),WTOTI(0,ISTRA),
     .     WTOTPH(0,ISTRA))
      WRITE (6,*) 'TOTAL NUMBER OF MONTE CARLO HISTORIES'
      IMCP=XMCP(ISTRA)
      CALL MASJ1 ('NPART   ',IMCP)
C
C
C  SET SOME SCALING CONSTANTS
C
      CALL SET_SCAL_CONST (ISTRA, WTT,ZWW, ZW, ZVOLNT, ZVOLWT, 
     .                     ZVOLIN, ZVOLIW, SCLTAL, N1MX)
C
C   STATISTICS , IF REQUESTED
C
      IF (XMCP(ISTRA).LE.1.) GOTO 219
C
C  FACTORS FOR STANDARD DEVIATION
      ZFLUX=FLXFAC(ISTRA)*XMCP(ISTRA)
      FSIG=SQRT(XMCP(ISTRA)/(XMCP(ISTRA)-1.))
C
      IF (NSIGI.GT.0) THEN
        CALL STATS2(XMCP(ISTRA),FSIG,ZFLUX)
C  CONVERT TO %
        SDVI1=MAX(0._DP,SDVI1-EPS6)*100.D0
        SDVI2=MAX(0._DP,SDVI2-EPS6)*100.D0
      ENDIF
      IF (NSIGI_BGK.GT.0) THEN
        CALL STATS2_BGK(XMCP(ISTRA),FSIG,ZFLUX)
C  CONVERT TO %
        DO 211 IB=1,NBGVI_STAT
          SGMS_BGK(IB)=MAX(0._DP,SGMS_BGK(IB)-EPS6)*100.D0
          DO 212 J=1,NSBOX_TAL
            SIGMA_BGK(IB,J)=MAX(0._DP,SIGMA_BGK(IB,J)-EPS6)*100.D0
212       CONTINUE
211     CONTINUE
      ENDIF
      IF (NSIGI_COP.GT.0) THEN
        CALL STATS2_COP(XMCP(ISTRA),FSIG,ZFLUX)
C  CONVERT TO %
        DO 213 IC=1,NCPVI_STAT
          SGMS_COP(IC)=MAX(0._DP,SGMS_COP(IC)-EPS6)*100.D0
          DO 214 J=1,NSBOX_TAL
            SIGMA_COP(IC,J)=MAX(0._DP,SIGMA_COP(IC,J)-EPS6)*100.D0
214       CONTINUE
213     CONTINUE
      ENDIF
      IF (NSIGI_SPC.GT.0) THEN
        CALL STATS2_SPC(XMCP(ISTRA),FSIG,ZFLUX)
C  CONVERT TO %
        DO ISPC=1,NADSPC
          ESTIML(ISPC)%PSPC%SGMS=MAX(0._DP,ESTIML(ISPC)%PSPC%SGMS-EPS6)*
     .                           100.D0
          DO J=0,ESTIML(ISPC)%PSPC%NSPC+1
            ESTIML(ISPC)%PSPC%SGM(J)=MAX(0._DP,ESTIML(ISPC)%PSPC%SGM(J)-
     .                               EPS6)*100.D0
          END DO
        END DO
      ENDIF
C
219   CONTINUE

      CALL SCAL_VOLAV_TALLIES (ISTRA, ZWW, ZW,  
     .                         ZVOLIN, ZVOLIW, SCLTAL, N1MX)
C
C   REPLACE DEFAULT TALLIES BY USER SUPPLIED
C   COLLISION ESTIMATED TALLIES
C   THIS IS DONE BEFORE VOLUME INTEGRATION THUS THERE IS THE RISK TO
C   DESTROY TERMS NEEDED FOR GLOBAL BALANCES
C
      IF (LCOLV) THEN
        DO 285 ICLV=1,NCLVI
          IS=ICLVS(ICLV)
          IT=ICLVT(ICLV)
          IF (IT.LE.0.OR.IT.GE.NTALA) GOTO 285
          IGFFT=NFSTVI(IT)
          IGFF=NFIRST(IT)
          IF (IS.LE.0.OR.IS.GT.IGFFT) GOTO 285
          IADD=NADDV(IT)
          DO 286 J=1,NSBOX_TAL
            INDX=IADD+(J-1)*IGFF+IS
            ESTIMV(IADD+IS,J)=COLV(ICLV,J)
 286      CONTINUE
 285    CONTINUE
      END IF
C
C   REPLACE DEFAULT TALLIES BY USER SUPPLIED
C   TRACKLENGTH ESTIMATED TALLIES
C   THIS IS DONE BEFORE VOLUME INTEGRATION THUS THERE IS THE RISK TO
C   DESTROY TERMS NEEDED FOR GLOBAL BALANCES
C
      IF (LADDV) THEN
        DO 290 IADV=1,NADVI
          IS=IADVS(IADV)
          IT=IADVT(IADV)
          IF (IT.LE.0.OR.IT.GE.NTALA) GOTO 290
          IGFFT=NFSTVI(IT)
          IGFF=NFIRST(IT)
          IF (IS.LE.0.OR.IS.GT.IGFFT) GOTO 290
          IADD=NADDV(IT)
          DO 295 J=1,NSBOX_TAL
            INDX=IADD+(J-1)*IGFF+IS
            ESTIMV(IADD+IS,J)=ADDV(IADV,J)
 295      CONTINUE
 290    CONTINUE
      END IF
C
C
C   INTEGRATE VOLUME AVERAGED PROFILES   450 --- 459
C
      CALL INTEGRATE_TALLIES (ISTRA)
C
C   SYMMETRISE VOLUME AVERAGED TALLIES?
      IF (NLSYMP(ISTRA).OR.NLSYMT(ISTRA)) THEN
        CALL SYMET(ESTIMV,NTALV,NRTAL,NR1TAL,NP2TAL,NT3TAL,
     .             NADDV,NFIRST,NLSYMP(ISTRA),NLSYMT(ISTRA))
      ENDIF
C
C  WORK WITH VOLUME AVERAGED TALLIES FOR THIS STRATUM FINISHED
C
C  SCALE SURFACE AVERAGED ESTIMATORS AND OTHER FLUXES 600 - 630
C
      CALL SCAL_SURF_TALLIES (ISTRA)
C
C
C   SUM OVER SURFACE INDEX
C   IN THE SURFACE AVERAGED ESTIMATORS
C
C
C  SUM OVER SPECIES INDEX FOR INTEGRATED VOLUME AVERAGED TALLIES
C                         AND INTEGRATED SURFACE AVERAGED TALLIES
C
      CALL SUM_AVERAGE (ISTRA)
C
      CALL SCALE_TALLIES (ISTRA)
C
C   ALGEBRAIC EXPRESSION IN TALLIES 801--900
C
      IF (NALVI.GT.0.OR.NALSI.GT.0) THEN
C
        CALL ALGTAL
C
        IF (LALGV) THEN
          DO 830 IALV=1,NALVI
            CALL INTTAL (ALGV,VOL,IALV,NALV,NSBOX_TAL,ALGVI(IALV,ISTRA),
     .                   NR1TAL,NP2TAL,NT3TAL,NBMLT)
830       CONTINUE
        END IF
C
        IF (LALGS) THEN
          DO 832 IALS=1,NALSI
            ALGSI(IALS,ISTRA)=0.
            DO 831 J=1,NLIMPS
              ALGSI(IALS,ISTRA)=ALGSI(IALS,ISTRA)+ALGS(IALS,J)
831         CONTINUE
832       CONTINUE
        END IF
C
      ENDIF
C
C  SCALE STANDARD DEVIATIONS, WHICH ARE NOT GIVEN IN % REL.ERROR
C  1/XMCP IS INCLUDED IN ZVOLIN,ZW,ZWW,... FOR TALLY AVERAGING
C  THEREFORE IT MUST BE MULTIPLIED HERE BECAUSE ONLY FLUX SCALING
C
      IF (XMCP(ISTRA).LE.1.D0) GOTO 950
C
      CALL SCALE_DEVIATION(ISTRA, ZWW, ZW, ZVOLNT, ZVOLWT,
     .                     ZVOLIN, ZVOLIW, SCLTAL, N1MX)
C
950   CONTINUE
C
C  CALL INTERFACE TO OTHER CODES TO RETURN DATA. STRATUM ISTRA
C
      IF (NMODE.GT.0) THEN
        IESTR=ISTRA
        ISTRAA=ISTRA
        ISTRAE=ISTRA
        CALL IF3COP(ISTRAA,ISTRAE,NEW_ITER)
        NEW_ITER=1
      ENDIF
C
C  WRITE RESULTS FOR THIS STRATUM ON TEMP. FILE
C
cpara  hier muss fuer den fall nprs > nstrai noch was getan werden!!!
      IESTR=ISTRA
      IF (NFILEN.EQ.1) THEN
        CALL WRSTRT(ISTRA,NSTRAI,NESTM1,NESTM2,NADSPC,
     .              ESTIMV,ESTIMS,ESTIML,
     .              NSDVI1,SDVI1,NSDVI2,SDVI2,
     .              NSDVC1,SIGMAC,NSDVC2,SGMCS,
     .              NSBGK,SIGMA_BGK,NBGV_STAT,SGMS_BGK,
     .              NSCOP,SIGMA_COP,NCPV_STAT,SGMS_COP,
     .              NSIGI_SPC,TRCFLE)
      ENDIF
C
C  UPDATE TALLIES FOR  "SUM OVER STRATA"
C
      IF (NSTRAI.EQ.1) GOTO 1111
C
      CALL SUMOSTRA (ISTRA)
C
C
      IF (NSMSTRA == 1) THEN
        do idv=1,nidv
          smestv(idv,1:nrtal) = smestv(idv,1:nrtal) +
     .                          estimv(idv,1:nrtal)
        end do
        SMESTS = SMESTS + ESTIMS
        DO ISPC=1,NADSPC
          SMESTL(ISPC)%PSPC%SPC = SMESTL(ISPC)%PSPC%SPC +
     .                            ESTIML(ISPC)%PSPC%SPC
          SMESTL(ISPC)%PSPC%SPCINT = SMESTL(ISPC)%PSPC%SPCINT +
     .                               ESTIML(ISPC)%PSPC%SPCINT
        END DO
      END IF
C
      DO 1170 ISDV=1,NSIGCI
        DO 1172 ICELL=1,NSBOX_TAL
          STVC(0,ISDV,ICELL)=STVC(0,ISDV,ICELL)+SIGMAC(0,ISDV,ICELL)
          STVC(1,ISDV,ICELL)=STVC(1,ISDV,ICELL)+SIGMAC(1,ISDV,ICELL)**2
          STVC(2,ISDV,ICELL)=STVC(2,ISDV,ICELL)+SIGMAC(2,ISDV,ICELL)**2
1172    CONTINUE
        STVCS(0,ISDV)=STVCS(0,ISDV)+SGMCS(0,ISDV)
        STVCS(1,ISDV)=STVCS(1,ISDV)+SGMCS(1,ISDV)**2
        STVCS(2,ISDV)=STVCS(2,ISDV)+SGMCS(2,ISDV)**2
1170  CONTINUE
C
1111  CONTINUE
        WRITE(6,*) 'CPU TIME USED UNTIL END OF STRATUM ISTRA '
        WRITE(6,*) 'ISTRA, CPU(S) ',ISTRA,SECOND_OWN()
        CALL LEER(2)
        endif  ! nprs > nsteff ...
      end if  ! nprs < nsteff ... or  nprs > nstef ...
1000  CONTINUE
C
C*** STRATA LOOP FINISHED *******************************************
C
csw integrate global photon tallies
      IF (NPHOTI > 0 )
     .  CALL PH_INTEGRATE(0,1._dp,1._dp,1._dp,1._dp,1._dp)

      IF (NLMOVIE) NPTS=NPTS_SAVE
C
      IF ((NPRS > 1) .AND. (NSMSTRA > 0)) THEN
        CALL COLSUM
      END IF

      IF ((MY_PE .EQ. 0) .AND. (NSTRAI.EQ.1)) THEN
C
C  WRITE RESULTS FOR SUM OVER STRATA ON TEMP. FILE
C  USE THE DATA FOR STRATUM NO. 1 FOR THIS, RATHER THEN DOING
C  A USELESS SUMMATION
C
C  INDICATE: DATA FOR ISTRA=1 ARE ON CESTIM, BUT WRITE AS SUM OVER
C  STRATA
        IESTR=1
        IF (NFILEN.EQ.1.OR.NFILEN.EQ.6) THEN
          CALL WRSTRT(0,NSTRAI,NESTM1,NESTM2,NADSPC,
     .              ESTIMV,ESTIMS,ESTIML,
     .              NSDVI1,SDVI1,NSDVI2,SDVI2,
     .              NSDVC1,SIGMAC,NSDVC2,SGMCS,
     .              NSBGK,SIGMA_BGK,NBGV_STAT,SGMS_BGK,
     .              NSCOP,SIGMA_COP,NCPV_STAT,SGMS_COP,
     .              NSIGI_SPC,TRCFLE)
        ENDIF
        GOTO 2000
      ENDIF
      IF (XMCP(0).LE.1) GOTO 2000

C SEQUENTIAL REGION

      IF(MY_PE .EQ. 0) THEN

C
C    STATISTICS, SUM OVER STRATA
C
      CALL STAT_SUMOSTRA   
C
C  PUT SUM OVER STRATA BACK ONTO CESTIM, CSDVI
C
      IF (NSMSTRA == 1) THEN
        ESTIMV(1:NIDV,1:NRTAL) = SMESTV(1:NIDV,1:NRTAL)
        ESTIMS = SMESTS
        DO ISPC=1,NADSPC
          ESTIML(ISPC)%PSPC%SPC = SMESTL(ISPC)%PSPC%SPC
          ESTIML(ISPC)%PSPC%SPCINT = SMESTL(ISPC)%PSPC%SPCINT
          IF (NSIGI_SPC > 0) THEN
            ESTIML(ISPC)%PSPC%SGM = SMESTL(ISPC)%PSPC%SGM
            ESTIML(ISPC)%PSPC%SGMS = SMESTL(ISPC)%PSPC%STVS
          END IF
        END DO
        SIGMA  = STV
        SGMS   = STVS
!pb        SIGMAW = STW
!pb        SGMWS  = STWS
        IF (NSIGI_BGK.GT.0) THEN
          DO 1271 IB=1,NBGVI_STAT
            SGMS_BGK(IB)=STVS_BGK(IB)
            DO 1272 J=1,NSBOX_TAL
              SIGMA_BGK(IB,J)=STV_BGK(IB,J)
1272        CONTINUE
1271      CONTINUE
        ENDIF
        IF (NSIGI_COP.GT.0) THEN
          DO 1273 IC=1,NCPVI_STAT
            SGMS_COP(IC)=STVS_COP(IC)
            DO 1274 J=1,NSBOX_TAL
              SIGMA_COP(IC,J)=STV_COP(IC,J)
1274        CONTINUE
1273      CONTINUE
        ENDIF
C
C   ALGEBRAIC EXPRESSION IN TALLIES, SUM OVER STRATA  1271--1279
C
        IF (NALVI.GT.0.OR.NALSI.GT.0) THEN
C
          CALL ALGTAL
C
          DO 1571 IALV=1,NALVI
            CALL INTTAL (ALGV,VOLTAL,IALV,NALV,NSBOX_TAL,ALGVI(IALV,0),
     .                   NR1TAL,NP2TAL,NT3TAL,NBMLT)
1571      CONTINUE
C
          DO 1572 IALS=1,NALSI
            ALGSI(IALS,0)=0.
            DO 1573 J=1,NLIMPS
              ALGSI(IALS,0)=ALGSI(IALS,0)+ALGS(IALS,J)
1573        CONTINUE
1572      CONTINUE
C
        ENDIF
C
C  WRITE RESULTS FOR SUM OVER STRATA ON TEMP. FILE
C
        IESTR=0
        IF (NFILEN.EQ.1.OR.NFILEN.EQ.6) THEN
          CALL WRSTRT(0,NSTRAI,NESTM1,NESTM2,NADSPC,
     .                ESTIMV,ESTIMS,ESTIML,
     .                NSDVI1,SDVI1,NSDVI2,SDVI2,
     .                NSDVC1,SIGMAC,NSDVC2,SGMCS,
     .                NSBGK,SIGMA_BGK,NBGV_STAT,SGMS_BGK,
     .                NSCOP,SIGMA_COP,NCPV_STAT,SGMS_COP,
     .                NSIGI_SPC,TRCFLE)
        ENDIF
      ENDIF
C
      ENDIF
C
2000  CONTINUE

      CALL BROAD_IESTR(IESTR)

      IF(MY_PE .EQ. 0) THEN
C
C  SAVE OR RESTORE SOME DATA FOR "EIRENE RECALL OPTION NFILE.NE.0"
C  FROM FILE "FT11"
C  NOTE: RECORD IRC=3 MAY BE USED IN INTERFACING ROUTINE INFCOP
C
      IF (NFILEN.EQ.1.OR.NFILEN.EQ.6) THEN
        IF (TRCFLE) WRITE (6,*) 'WRITE DATA FOR RECALL OPTION '
        IRC=1
        WRITE (11,REC=IRC) LOGATM,LOGION,LOGMOL,LOGPLS,LOGPHOT
        IF (TRCFLE)   WRITE (6,*) 'WRITE 11  IRC= ',IRC
        IRC=2
        ALLOCATE (OUTAU(NOUTAU))
        CALL WRITE_COUTAU (OUTAU)
        WRITE (11,REC=IRC) OUTAU
        DEALLOCATE (OUTAU)
        IF (TRCFLE)   WRITE (6,*) 'WRITE 11  IRC= ',IRC
      ELSEIF (NFILEN.EQ.2.OR.NFILEN.EQ.7) THEN
        IF (TRCFLE) WRITE (6,*) 'READ DATA FOR RECALL OPTION'
        IRC=1
        READ (11,REC=IRC) LOGATM,LOGION,LOGMOL,LOGPLS,LOGPHOT
        IF (TRCFLE)   WRITE (6,*) 'READ 11  IRC= ',IRC
        IRC=2
        ALLOCATE (OUTAU(NOUTAU))
        READ (11,REC=IRC) OUTAU
        CALL READ_COUTAU (OUTAU)
        DEALLOCATE (OUTAU)
        IF (TRCFLE)   WRITE (6,*) 'READ 11  IRC= ',IRC
      ENDIF

C END SEQUENTIAL REGION
      ENDIF

      CALL MPI_BARRIER (MPI_COMM_WORLD,IER)

C
      RETURN
      END
