#!/bin/tcsh -x
#
  alias ls ls
#
# ======================================================================
# PROCESS INPUT FLAGS
# ======================================================================
#
source $DIVHOME/scripts/run_divimp_process_flags $1 $2 $3 $4 $5 $6 $7 $8 $9 $10 $11 $12 $13 $14 $15
#
# ======================================================================
# SET SHELL VARIABLES
# ======================================================================
#
# DIVIMP root directory:
#  setenv DIVHOME ~/divimp

  setenv ADASCENT $DIVHOME/adas/
  setenv EIRDIR   $DIVHOME/$EIRTEMP
  setenv RESDIRTOP $DIVHOME/results
  source $DIVHOME/scripts/results_resdir $CASENAME

# Location of graphics library used by EIRENE:
  setenv GLI_HOME $DIVHOME/libsrc

# Set local directories:
  set    RUNDIR = $DIVHOME
  set    BATDIR = $DIVHOME/scripts
  setenv EXEDIR $DIVHOME/cases/$CASENAME.$$
  set    EQUDIR = $DIVHOME/shots
  set    DATDIR = $DIVHOME/data
  set    OUTDIR = $DIVHOME/out6

  setenv DIVDATDIR $DATDIR  # for ribbon grid code
#
# ----------------------------------------------------------------------
# Set DIVIMP/OUT executables:
#
  set DIVDIR = $DIVHOME/div6
  set DIVEXE = divimp
  set OUTEXE = out
  set DIVEXT = d6i
  if ( $MYEXT != "default" ) set DIVDIR = $DIVDIR.$MYEXT
  if ( $X86_64             ) set DIVDIR = $DIVDIR.64
#
# ----------------------------------------------------------------------
# Create and enter execution directory:
#
  if ( -e $EXEDIR ) rm -rf $EXEDIR
  mkdir $EXEDIR
  cd    $EXEDIR
#
# ----------------------------------------------------------------------
# Case parameter summary to the screen:
#
                              echo 
                              echo  "  Host                : $HOSTNAME"
                              echo  "  DIVIMP case         : $CASENAME"
                              echo  "  Run directory       : $EXEDIR"
                              echo  "  OUT input file      : $OUTNAME"
                              echo  "  Geometry file       : $GRIDNAME"
  if ( $SAVENAME != "")       echo  "  Saved plasma case   : $SAVENAME"
  if ( $DEVICE  != "unknown") echo  "  Device name         : $DEVICE "
  if ( $DEVICE  != "unknown") echo  "  Data directory      : $DEVDIR "
  if ( $OUTONLY == "no")      echo  "  EIRENE version      : $EIRTEMP"
  if ( $OUTONLY == "no")      echo  "         template     : $EIRFILE"
  if ( $EIRRAW  == "yes")     echo  "         fort.13      : $EIRRAW "
  if ( $EIR15 != ""    )      echo  "         fort.15      : $EIR15  "
  if ( $EIRPHOTONS == "yes") then
                              echo  "    Following photons..."
  endif
  if ( $OUTONLY == "yes")     echo  "  OUT execution only  : yes"
  if ( $CORTEX_ONLY == "yes") echo  "  CORTEX execution    : yes"
  if ( $X86_64 )              echo  "  64-bit operation    : yes"
                              echo 
#
# ======================================================================
# COPY SETUP FILES
# ======================================================================
#
  source $DIVHOME/scripts/run_divimp_prepare_files
#
# ======================================================================
# EXECUTE
# ======================================================================
#
    if ( $OUTONLY == "no" && $CORTEX_ONLY == "no" ) then
#
#     --------------------------------------------------------------------
#     Execute DIVIMP:
#
      echo
      echo "  Executing DIVIMP version 6 :" $MYEXT
      echo 


      divimp_loop:

#        $DIVEXE < fort.5 > divout1
        nice +2 $DIVEXE < fort.5 > divout1
#        Xpgdbg $DIVEXE < fort.5 > divout1

      if ( -e divimp_counter ) then
        mvc raw.divimp_tdep_dist $RESDIR/$CASENAME.raw.divimp_tdep_dist
        goto divimp_loop
      endif

#     Process this output now, since these file units conflict with OUT:
      mvc POSTSCPT.LIS old.LIS
      mvc fort.50 $CASENAME.slm
      mvc fort.7  $CASENAME.dat
      mvc fort.22 $CASENAME.html
      mvc fort.88 $CASENAME.src
    endif
#
#   ----------------------------------------------------------------------
#   Execute OUT:
#
    if       ( $CORTEX_ONLY == "yes" ) then
    else if  ( $OUTNAME == "none" ) then
      echo "OUT not executed - by request"
    else if !( -e $DATDIR/$OUTNAME.d6o ) then
      echo "OUT not executed - input file $OUTNAME.d6o not found"
    else if !( -e fort.8 ) then
      echo "OUT not executed - RAW data file not found"
    else
      if ( $MYEXT != "default" ) set OUTDIR = $OUTDIR.$MYEXT
      if ( $X86_64             ) set OUTDIR = $OUTDIR.64
      cp $DATDIR/$OUTNAME.d6o fort.99
      if ( -e $DATDIR/$CASENAME.d6i ) then
        echo
        echo "  Executing OUT version 6 :" $MYEXT
        echo 
#      Xpgdbg $RUNDIR/out6/$OUTEXE < fort.99 > outout1
#        nice +2 $OUTDIR/$OUTEXE < fort.99 > outout1
        nice +2 $OUTEXE < outinput.dat > outout1
      endif
    endif
  endif
#
#   ----------------------------------------------------------------------
#   Execute CORTEX:
#
    if       ( $OUTNAME == "none" ) then
      echo "CORTEX not executed - by request"
    else if !( -e $FUSEHOME/input/$OUTNAME.ctx ) then
      echo "CORTEX not executed - input file $OUTNAME.ctx not found"
    else if ( $OUTONLY == "yes" ) then
    else
      if ( -e $RESDIR/$CASENAME.idl.ps ) rm $RESDIR/$CASENAME.idl.ps

      fuse -cortex subdir unknown unknown $CASENAME $OUTNAME

      if ( -e $RESDIR/$CASENAME.idl.ps && $CORTEX_ONLY == "no" ) mv $RESDIR/$CASENAME.idl.ps .

      if ( $CORTEX_ONLY == "yes" ) goto clean
    endif
#
#
# ======================================================================
# PROCESS RESULTS
# ======================================================================
#
# ----------------------------------------------------------------------
# Rename DIVIMP/OUT files:
#

#  if ( -e POSTSCPT.LIS ) then
#    ps2pdf POSTSCPT.LIS $CASENAME.pdf
#  endif

  mvc fort.22 $CASENAME.html

#  mvc fort.99 $CASENAME.divdat
  mvc divout1 $CASENAME.lim
  mvc fort.17 $CASENAME.pin
  mvc fort.21 $CASENAME.sol
  mvc fort.62 $CASENAME.bgp
  mvc divimp_plasma.out $CASENAME.bgp

  mvc outout1      $CASENAME.out
  mvc POSTSCPT.LIS $CASENAME.ps
  mvc fort.49      $CASENAME.plt
  mvc outdata.dat  $CASENAME.anl

  if ( $OUTONLY == "yes" || $CORTEX_ONLY == "yes" ) then
    echo 'NOT PROCESSING .RAW FILES (OUTONLY = YES)'
  else
    mvc fort.8           $CASENAME.raw
    mvc plasma.dat       $CASENAME.raw.pla
    mvc source.dat       $CASENAME.raw.src
    mvc geomty.dat       $CASENAME.raw.geo
    mvc triangles.raw    $CASENAME.raw.tri
    mvc fort.79          $CASENAME.raw.rel
    mvc vac-grid.dat     $CASENAME.raw.vac
    mvc jummap.dat       $CASENAME.raw.jum
    mvc osm.raw          $CASENAME.raw.osm
    mvc osm_geometry.raw $CASENAME.raw.ogd
    mvc osm_legacy.raw   $CASENAME.raw.old
#   Process tetrahedron files:
    rename "s/.raw/.raw.tet/g" tetrahedrons*.raw  >& /dev/null
    rename "s/.raw/.raw.fil/g" filaments*.raw  >& /dev/null
    rename "s/tetrahedrons/$CASENAME/g" tetrahedrons*.raw.tet  >& /dev/null
    rename "s/filaments/$CASENAME/g" filaments*.raw.fil  >& /dev/null
#    rename ".raw" ".raw.tet" -- tetrahedrons*.raw  >& /dev/null
#    rename ".raw" ".raw.fil" -- filaments*.raw  >& /dev/null
#    rename "tetrahedrons" "$CASENAME" -- tetrahedrons*.raw.tet  >& /dev/null
#    rename "filaments"    "$CASENAME" -- filaments*.raw.fil  >& /dev/null    
  endif

  mvc fort.90 $CASENAME.osm.log
  mvc fort.85 $CASENAME.g1
  mvc fort.86 $CASENAME.g2
  mvc fort.87 $CASENAME.g3
  mvc fort.65 $CASENAME.e1
  mvc fort.66 $CASENAME.e2
  mvc fort.67 $CASENAME.e3
  mvc fort.25 $CASENAME.sonnet

  mvc dump.dat $CASENAME.dump

  mvc fort.52 $CASENAME.eig

  mvc line.dat   $CASENAME.dat.line
  mvc strata.dat $CASENAME.dat.strata
  mvc bgk.dat    $CASENAME.dat.bgk
#  mvc acd.dat    $CASENAME.dat.acd
  mvc rec.dat    $CASENAME.dat.rec

  mvc fort.9     $CASENAME.inp

  mvc addsur.dat    $CASENAME.addsur

  if ( $OUTONLY == "no" && $CORTEX_ONLY == "no" ) then
    mvc triangles.dat       $CASENAME.triangles
    mvc triangles.npco_char $CASENAME.triangles.npco_char
    mvc triangles.elemente  $CASENAME.triangles.elemente
    mvc triangles.neighbors $CASENAME.triangles.neighbors
    mvc triangles.plasma    $CASENAME.triangles.plasma
    mvc triangles.efield    $CASENAME.triangles.efield

    mvc quadrangles.geometry $CASENAME.quadrangles.geometry
    mvc quadrangles.plasma   $CASENAME.quadrangles.plasma
    mvc quadrangles.efield   $CASENAME.quadrangles.efield

    mvc objects.dat       $CASENAME.triangles
    mvc objects.npco_char $CASENAME.objects.npco_char
    mvc objects.elemente  $CASENAME.objects.elemente
    mvc objects.neighbors $CASENAME.objects.neighbors
    mvc objects.plasma    $CASENAME.objects.plasma
    mvc objects.centre    $CASENAME.objects.centre
    mvc objects.efield    $CASENAME.objects.efield
  endif

#  mvc    osm.idl $CASENAME.osm
  rename "s/osm/$CASENAME/g"             osm.idl.*     >& /dev/null
  rename "s/eirene/$CASENAME/g"          eirene.idl.*  >& /dev/null
  rename "s/divimp/$CASENAME/g"          divimp.*      >& /dev/null
  rename "s/output/$CASENAME.out/g"      output.*      >& /dev/null
  rename "s/idl/$CASENAME.idl/g"         idl.*         >& /dev/null
  rename "s/profile/$CASENAME.profile/g" profile.*     >& /dev/null   # line-of-sight profiles from RAY
#  rename osm     $CASENAME         -- osm.idl.*     >& /dev/null
#  rename eirene  $CASENAME         -- eirene.idl.*  >& /dev/null
#  rename divimp  $CASENAME         -- divimp.*      >& /dev/null
#  rename output  $CASENAME.out     -- output.*      >& /dev/null
#  rename idl     $CASENAME.idl     -- idl.*         >& /dev/null
#  rename profile $CASENAME.profile -- profile.*     >& /dev/null   # line-of-sight profiles from RAY  

  mvc plasma-transfer.dat $CASENAME.rzplasma
  mvc cell.dat            $CASENAME.dat.cell
  rename "s/.transfer/.eir/g"   eirene*.transfer  >& /dev/null
  rename "s/.input/.eirdat/g"   eirene*.input     >& /dev/null
  rename "s/.output/.eirprn/g"  eirene*.output    >& /dev/null
  rename "s/eirene/$CASENAME/g" eirene*.eir*      >& /dev/null
  rename "s/eirene/$CASENAME/g" eirene*           >& /dev/null
  
#  rename ".transfer" ".eir"      -- eirene*.transfer  >& /dev/null
#  rename ".input"    ".eirdat"   -- eirene*.input     >& /dev/null
#  rename ".output"   ".eirprn"   -- eirene*.output    >& /dev/null
#  rename "eirene"    "$CASENAME" -- eirene*.eir*      >& /dev/null
#  mvc eirene.transfer     $CASENAME.eir

  mvc eirene.spectra $CASENAME.eir.spectra

  cpc core_analysis.dat $CASENAME.dat.midplane
#  mvc core_analysis.dat ~/idl/lc/$CASENAME.dat
  
#
# Inversions:
#
# ----------------------------------------------------------------------
# Rename image inversion related files:
#
#  foreach FILENAME (`ls *.ray.*`)   # handled when processing output. files
#    mv $FILENAME $CASENAME.$FILENAME
#  end
#  foreach FILENAME (`ls *.idl.*`)
#    mv $FILENAME $CASENAME.$FILENAME
#  end
#
# ----------------------------------------------------------------------
# Divertor data dump (temporary):
#
#  if ( ls div.* ) then 
    foreach FILENAME (`ls div.*`)
      mv $FILENAME $CASENAME.$FILENAME
    end
#  endif
#exit
#
# ----------------------------------------------------------------------
# MatLab files:
#
  foreach FILENAME (`ls mlb.*`)
    mv $FILENAME $CASENAME.$FILENAME
  end
#
# ----------------------------------------------------------------------
# Data export files:
#
  foreach FILENAME (`ls mhf.*`)
    mv $FILENAME $CASENAME.$FILENAME
  end
  foreach FILENAME (`ls skf.*`)
    mv $FILENAME $CASENAME.$FILENAME
  end
  foreach FILENAME (`ls akf.*`)
    mv $FILENAME $CASENAME.$FILENAME
  end
  foreach FILENAME (`ls mrt.*`)
    mv $FILENAME $CASENAME.$FILENAME
  end
  foreach FILENAME (`ls ero.*`)
    mv $FILENAME $CASENAME.$FILENAME
  end
  foreach FILENAME (`ls tet.*`)
    mv $FILENAME $CASENAME.$FILENAME
  end
#
# ----------------------------------------------------------------------
# Martin O'Mullane files:
#
  mv mom $CASENAME.mom >& /dev/null
#
# ----------------------------------------------------------------------
# Field line traces for ribbon grid:
#
  rm -f *.trace.* >& /dev/null
  foreach FILENAME (`ls trace.*`)
    mv -f $FILENAME $CASENAME.$FILENAME
  end
#
  mv *image*.jpg $RESDIR  >& /dev/null
#
# ----------------------------------------------------------------------
# Rename some EIRENE files:
#
  if ($EIRPHOTONS == "yes") mvc eirene.13 $CASENAME.eir13
  mvc eirene.15   $CASENAME.eir15
  mvc eirene.d10  $CASENAME.eird10
  mvc eirene.d11  $CASENAME.eird11
  mvc eirtrac.dat $CASENAME.eirtrc
#  rm *.eirtim
#
# ----------------------------------------------------------------------
# Rename SOL23 files:
#
  mvc fort.71 $CASENAME.sol23
  mvc fort.73 $CASENAME.exl23
  mvc fort.75 $CASENAME.cfd
#
# ----------------------------------------------------------------------
# Compress large files:
#
  if ( $OUTONLY == "yes" || $CORTEX_ONLY == "yes" ) then
    echo 'NOT PROCESSING .RAW FILES (OUTONLY = YES or CORTEX_ONLY = YES)'
  else
    zipc $CASENAME.raw
    zipc $CASENAME.raw.src
    zipc $CASENAME.raw.pla
    zipc $CASENAME.raw.geo
    zipc $CASENAME.raw.rel
    zipc $CASENAME.raw.vac
    zipc $CASENAME.raw.jum
    zipc $CASENAME.raw.tri
    foreach FILENAME (`ls *raw.tet`)
      zipc $FILENAME
    end
    foreach FILENAME (`ls *.eir`)
      zipc $FILENAME
    end
    zipc $CASENAME.raw.osm
    zipc $CASENAME.raw.ogd
    zipc $CASENAME.raw.old
    mvc raw.divimp_tdep_dist $CASENAME.raw.divimp_tdep_dist
  endif

  if ( -e divimp_netcdf_out.nc ) then
      # save the compressed version of the nc file
      # according to the documentation this file can be accessed as 
      # easily as a regular nc file but takes much less space
      nccopy -d5 divimp_netcdf_out.nc divimp_netcdf_out_compress.nc
      mvc divimp_netcdf_out_compress.nc $CASENAME.nc
  endif

#  zipc $CASENAME.eir
#  zipc $CASENAME.pin
#  zipc $CASENAME.eird10
#  zipc $CASENAME.eird11
#
# ----------------------------------------------------------------------
# Move files for upload to the web:
#
#  mvc $CASENAME.html $RESDIR/transfer
#  mvc $CASENAME.pdf  $RESDIR/transfer
#
# ----------------------------------------------------------------------
#
# Move all files to results directory, replacing any previous results:
#
  rm *.A  >& /dev/null
#  zipc *.A
  rm *.map  >& /dev/null

  if ($OUTONLY == "no" && $CORTEX_ONLY == "no") rm $RESDIR/$CASENAME.*

  mv -f $CASENAME.ps $DIVHOME/results_local  >& /dev/null  
  mv -f $CASENAME.* $RESDIR  >& /dev/null
  chmod u+r $RESDIR/$CASENAME.*
#
# ----------------------------------------------------------------------
# Try to collect QSUB log files
#
#  if ( $QSUB_ID != "none" ) then
#echo here! trying! > ../message.1
#    echo QSUM_ID is:
#    echo $QSUB_ID
#    $DIVHOME/scripts/qsub_report $EXEDIR $QSUB_ID $RESDIR $CASENAME &
#    echo "$DIVHOME/scripts/qsub_report $EXEDIR $QSUB_ID $RESDIR $CASENAME" > ../message.2
#    sleep 10
#  endif 
#
# ----------------------------------------------------------------------
# Clean:
#
  clean:
  if ( $CLEAN == "yes" ) then
#    cd $DIVHOME/cases
#    rm -r -f $CASENAME
    rm -r -f $EXEDIR
  else
    echo "  Not cleaning execution directory"
  endif
#
#
#





