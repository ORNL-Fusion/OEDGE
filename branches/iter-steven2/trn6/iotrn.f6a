**==PPCSTR
C
C=======================================================================
      SUBROUTINE PPCSTR(CSTR)
      IMPLICIT NONE
C
C***********************************************************************
C
C VERSION : V1.R1.M0
C
C ROUTINE : PPCSTR
C
C PURPOSE : TO OUTPUT A CHARACTER STRING TO THE POST PROCESSOR FILE
C
C INPUT   : (C *) CSTR  - CHARACTER STRING FOR OUTPUT
C
C OUTPUT  : (C *) CSTR  - CHARACTER STRING FOR OUTPUT
C
C HISTORY : V1.R1.M0 --- 12/03/93 --- CREATION
C
C***********************************************************************
C
C DUMMY ARGUMENTS
C
      CHARACTER*(*) CSTR
C
      CHARACTER CBUFF*133
C
      INTEGER LPP,IFORM,LOUT
      COMMON/CPPOUT/LPP,IFORM
C
      PARAMETER (LOUT =  6)
C
      CBUFF = ' '
      CBUFF = CSTR
      IF(IFORM.EQ.0)THEN
        WRITE(LPP) CBUFF
      ELSE
        WRITE(LPP,'(A)') CBUFF
      ENDIF
C
 9999 RETURN
      END
**++EOF
**==PPRECW
C
C=======================================================================
      SUBROUTINE PPRECW(NAME,DESC,UNITS,RDATA,RSF,TYPE,NDATA,ISTAG)
      IMPLICIT NONE
C
C***********************************************************************
C
C VERSION : V1.R1.M0
C
C ROUTINE : PPRECW
C
C PURPOSE : TO WRITE A DESCRIPTION HEADER + RECORD FOR A GIVEN DATA TYPE
C
C           NB..R*8 DATA IS CONVERTED TO R*4 BEFORE WRITING
C
C INPUT   : (C *) NAME   - DATA VARIABLE NAME
C           (C *) DESC   - DATA DESCRIPTION
C           (C *) UNITS  - DATA UNITS
C           ( - ) RDATA  - DATA (MAY BE I*4, R*4, R*8)
C           ( - ) RSF    - SCALE FACTOR (MAY BE I*4, R*4, R*8)
C           (C *) TYPE   - DATA VARIABLE TYPE ('I4','R4','R8')
C           (I*4) NDATA  - NUMBER OF DATA VALUES
C           (I*4) ISTAG  - STAGGERED VARIABLE FLAG (0-UNSTAGGERED
C                                                   1-STAGGERED)
C
C OUTPUT  : NONE
C
C HISTORY : V1.R1.M0 --- 12/03/93 --- CREATION
C           V1.R2.M0 --- 01/06/93 --- L.HORTON MODS: REMOVE MAP OPTION
C                                             & FIX EQUIVALENCING BUGS
C           V1.R3.M0 --- 14/12/94 --- ADD STAGGERED VARIABLE FLAG
C
C***********************************************************************
C
      CHARACTER*(*) NAME,DESC,UNITS,TYPE
      INTEGER       NDATA,ISTAG
      REAL*8        RDATA(NDATA),RSF
C
      INTEGER       LDATA
      PARAMETER    (LDATA = 8000)
C
      CHARACTER*132 MSG1
      CHARACTER*80  CBUFF
      CHARACTER*32  FDESC
      CHARACTER*8   FNAME,FUNITS
      CHARACTER*2   FTYPE
      CHARACTER*1   CSTAG
      INTEGER       I
      INTEGER       I4DAT(LDATA),I4SF
      REAL*4        R4DAT(LDATA),R4SF
      REAL*8        R8DAT(LDATA),R8SF
C
      EQUIVALENCE(R8DAT(1),R4DAT(1),I4DAT(1))
      EQUIVALENCE(R8SF    ,R4SF    ,I4SF    )
C
      INTEGER LPP,IFORM,LOUT
      COMMON/CPPOUT/LPP,IFORM
C
      PARAMETER (LOUT =  6)
C
C
C INITIALISE
C ----------
C
      FNAME  = NAME
      FDESC  = DESC
      FUNITS = UNITS
      FTYPE  = TYPE
C
C CHECK INPUT VARIABLES
C ---------------------
C
      IF(FTYPE.NE.'I4' .AND. FTYPE.NE.'R4' .AND. FTYPE.NE.'R8')THEN
        CALL ERRMSS(LOUT,'PPRECW',1,'INVALID TYPE '//FTYPE//
     &             'VARIABLE '//FNAME,' ',' ')
      ENDIF
C
      IF(NDATA.GT.LDATA)THEN
        WRITE(MSG1,*) 'DIMENSION LDATA TOO SMALL'
     &        //' FOR VARIABLE '//FNAME//'  - NDATA =',NDATA
        CALL ERRMSS(LOUT,'PPRECW',1,MSG1,' ',' ')
      ENDIF
C
      IF(ISTAG.EQ.0)THEN
        CSTAG = ' '
      ELSE IF(ISTAG.EQ.1)THEN
        CSTAG = 'S'
      ELSE
        WRITE(MSG1,*) 'INVALID ISTAG VALUE'
     &             //' FOR VARIABLE '//FNAME//'  - ISTAG =',ISTAG
        CALL ERRMSS(LOUT,'PPRECW',1,MSG1,' ',' ')
      ENDIF
C
C SET UP LOCAL 8 BYTE DATA ARRAY
C ------------------------------
C
      R8SF = RSF
      DO 100 I=1,NDATA
        R8DAT(I)  = RDATA(I)
 100  CONTINUE
C
C SCALE THE DATA
C --------------
C
      IF(FTYPE.EQ.'R8')THEN
        DO 110 I=1,NDATA
          R4DAT(I) = R8SF*R8DAT(I)
 110    CONTINUE
      ELSE IF(FTYPE.EQ.'R4')THEN
        DO 120 I=1,NDATA
          R4DAT(I) = R4SF*R4DAT(I)
 120    CONTINUE
      ELSE IF(FTYPE.EQ.'I4')THEN
        DO 130 I=1,NDATA
          I4DAT(I) = I4SF*I4DAT(I)
 130    CONTINUE
      ENDIF
C
C WRITE HEADER AND RECORD
C -----------------------
C
      IF(NDATA.GT.0)THEN
C
        IF(IFORM.EQ.0)THEN
C
          CBUFF  = ' '
          WRITE(CBUFF,'(3A,I8,2A,1X,A)')
     &          '#',FNAME,FTYPE(1:1),NDATA,FDESC,FUNITS,CSTAG
          WRITE(LPP) CBUFF
          WRITE(LPP) (R4DAT(I),I=1,NDATA)
C
        ELSE IF (IFORM.EQ.1)THEN
C
          WRITE(LPP,'(3(A,1X),I4,1X,3(A,1X))')
     &              '#',FNAME,FTYPE(1:1),NDATA,FDESC,FUNITS,CSTAG
          WRITE(LPP,'(10Z8)') (R4DAT(I),I=1,NDATA)
C
        ELSE IF (IFORM.EQ.2)THEN
C
          WRITE(LPP,'(3(A,1X),I4,1X,3(A,1X))')
     &              '#',FNAME,FTYPE(1:1),NDATA,FDESC,FUNITS,CSTAG
          IF(FTYPE(1:1).EQ.'R')THEN
            WRITE(LPP,'(7(1PE11.3))') (R4DAT(I),I=1,NDATA)
          ELSE
            WRITE(LPP,'(7I10)') (I4DAT(I),I=1,NDATA)
          ENDIF
C
        ENDIF
C
      ENDIF
C
C
C-----------------------------------------------------------------------
C
 9999 RETURN
      END
C
C
C
      SUBROUTINE GET (TITLE,NIZS,JOB,equil,FACTA,FACTB,ITER,NITERS)
      IMPLICIT  NONE
C     INCLUDE   "PARAMS"
      include 'params'
      CHARACTER*(*) TITLE,JOB,equil
      INTEGER   NIZS,ITER,NITERS
      REAL      FACTA(-1:MAXIZS),FACTB(-1:MAXIZS)
C
C  *********************************************************************
C  *                                                                   *
C  *   GET:  READ  RESULTS OF DIVIMP RUN ON UNFORMATTED UNIT 8         *
C  *         GET MAY BE CALLED SEVERAL TIMES, ONCE FOR                 *
C  *         EACH ITERATION.                                           *
C  *                                   CHRIS FARRELL    MARCH 1989     *
C  *********************************************************************
C
C     INCLUDE   "COMTOR"
      include 'comtor'
C     INCLUDE   "CNEUT2"
      include 'cneut2'
C     INCLUDE   "CGEOM"
      include 'cgeom'
C     INCLUDE   "DYNAM2"
      include 'dynam2'
C     INCLUDE   "DYNAM3"
      include 'dynam3'
C     INCLUDE   "DYNAM4"
      include 'dynam4'
C     INCLUDE   "PINDATA"
      include 'pindata'
c
      include 'cadas'
c
      include 'outxy'
C
      include 'grbound'
c
      include 'cedge2d'
C
      include 'transcoef'
c
      include 'cioniz'
c
      include 'promptdep'
c
      CHARACTER VERSE*5
      INTEGER   IR,IZ,IT,in
c
c     Version control - calculate a unique and always increasing
c     version code.
c     Maximum revison number for a given version number is maxrev-1
c
      integer   maxrev,version_code
      parameter (maxrev=100)
C
      READ  (8) VERSE,ITER,NITERS,NIZS,TITLE,JOB,NTS,R0,Z0,RXP,ZXP,
     >          NRS,(NKS(IR),IR=1,MAXNRS),RMIN,RMAX,ZMIN,ZMAX,DR,DZ,NDS,
     >          (FACTA(IZ),FACTB(IZ),DWELTS(IZ),IZ=-1,MAXIZS),
     >          (DWELFS(IT),IT=1,MAXNTS),QTIM,FSRATE,NXS,NYS,ABSFAC,
     >          CRMB,CRMI,CIZB,CION,IMODE,IRCENT,IRSEP,IRWALL,IRTRAP,
     >          IKT,NDSIN,(KALPHS(IZ),KBETAS(IZ),IZ=1,MAXIZS),IKREF,
     >          CK0,CIRHR,IKTO,IKTI,NPOLYP,ISHOT,TSLICE,EQUIL,
     >          NITERSOL,CIOPTF,CBPHI,cdatopt,cneur,nves,nleakcore,
     >          irsep2,irwall2,nrs2,ndsin2,ndsin3,cgridopt,
     >          irtrap2,xygrid,cleaksn,cxnear,cynear,refct,
     >          nvesm,nvesp,inmid,oumid,useridh,iyearh,useridz,iyearz,
     >          cre2d,cre2dizs,
c
c               The following are the piece-wise wall specifications
c               from the GA15 routines.
c
     >          ioncpts,ionwpts,(riw(in),ziw(in),rcw(in),zcw(in),
     >          rw(in),zw(in),rves(in),zves(in),in=1,maxpts),
     >          ((iwindw(it,in),icindw(it,in),it=1,2),in=1,maxpts),
     >          (iwwork(in),icwork(in),in=1,4*maxpts),
     >          (iwtdum(in),iwxdum(in),iwydum(in),in=1,maxpts),
     >          (ictdum(in),icxdum(in),icydum(in),in=1,maxpts),
c
c               The following relate to the wall definition as
c               calculated in DIVIMP.
c
     >          wlwall1,wlwall2,wltrap1,wltrap2,wallpts
c
C
      read(verse,'(i1,2x,i2)') vernum,revnum
c
      version_code = vernum * maxrev + revnum
c
      WRITE (6,9001) NXS,NYS,NRS,NDS,NIZS,NTS,
     >  MAXNXS,MAXNYS,MAXNRS,MAXNDS,MAXIZS,MAXNTS,
     >  TITLE,JOB,ITER,IMODE,refct,maxseg,nvesm,nvesp
c
      write(6,*) 'DIVIMP VERSION = ', vernum,
     >           ' REVISION = ',revnum,
     >           ' VERSION CODE = ',version_code
C
      CALL RINOUT ('R POWLS ',POWLS ,MAXNKS*MAXNRS*(MAXIZS+2))
      CALL RINOUT ('R LINES ',LINES ,MAXNKS*MAXNRS*(MAXIZS+2))
      CALL RINOUT ('R HPOWLS',HPOWLS,MAXNKS*MAXNRS*2)
      CALL RINOUT ('R HLINES',HLINES,MAXNKS*MAXNRS*2)
      CALL RINOUT ('R TIZS  ',TIZS  ,MAXNKS*MAXNRS*(MAXIZS+2))
      CALL RINOUT ('R ZEFFS ',ZEFFS ,MAXNKS*MAXNRS*3)
      CALL RINOUT ('R WALLS ',WALLS ,MAXNKS*MAXNRS*(MAXIZS+2))
      CALL RINOUT ('R DEPS  ',DEPS  ,MAXNDS*MAXIZS)
      CALL RINOUT ('R NEROS ',NEROS ,MAXNDS*5)
c
      if (version_code.ge.(5*maxrev+11)) then
         CALL RINOUT ('R PRDEPS',PROMPTDEPS,MAXNDS*6)
      elseif (version_code.ge.(5*maxrev+8)) then
         CALL RINOUT ('R PRDEPS',PROMPTDEPS,MAXNDS)
      endif
c
      if (version_code.ge.(5*maxrev+14)) then
         CALL RINOUT ('R WALLSN',WALLSN,MAXPTS+1)
         CALL RINOUT ('R WALLSE',WALLSE,MAXPTS+1)
         CALL RINOUT ('R WALLSI',WALLSI,MAXPTS+1)
      else
         CALL RINOUT ('R WALLSN',WALLSN,MAXPTS)
         CALL RINOUT ('R WALLSE',WALLSE,MAXPTS)
      endif

      if (version_code.ge.(6*maxrev+1)) then
        CALL RINOUT ('R WALLPT',WALLPT,MAXPTS*25)
      else
        CALL RINOUT ('R WALLPT',WALLPT,MAXPTS*19)
      endif
c
      CALL RINOUT ('R RS    ',RS    ,MAXNKS*MAXNRS)
      CALL RINOUT ('R ZS    ',ZS    ,MAXNKS*MAXNRS)
c
c     The storing of these arrays needed to be customized
c     because of a likely size mismatch between the
c     array in DIVIMP and that in OUT.
c
c      CALL IINOUT ('R IKXYS ',IKXYS ,MAXNXS*MAXNYS)
c      CALL IINOUT ('R IRXYS ',IRXYS ,MAXNXS*MAXNYS)
c      CALL IINOUT ('R IFXYS ',IFXYS ,MAXNXS*MAXNYS)
c
      CALL IINOUT2 ('R IKXYS ',IKXYS ,MAXNXS,MAXNYS,MAXIXS,MAXIYS)
      CALL IINOUT2 ('R IRXYS ',IRXYS ,MAXNXS,MAXNYS,MAXIXS,MAXIYS)
      CALL IINOUT2 ('R IFXYS ',IFXYS ,MAXNXS,MAXNYS,MAXIXS,MAXIYS)
c
      CALL IINOUT ('R IKDS  ',IKDS  ,MAXNDS)
      CALL IINOUT ('R IRDS  ',IRDS  ,MAXNDS)
C
      CALL IINOUT ('R IKINS ',IKINS ,MAXNKS*MAXNRS)
      CALL IINOUT ('R IKOUTS',IKOUTS,MAXNKS*MAXNRS)
      CALL IINOUT ('R IRINS ',IRINS ,MAXNKS*MAXNRS)
      CALL IINOUT ('R IROUTS',IROUTS,MAXNKS*MAXNRS)
C
      CALL IINOUT ('R KORY  ',KORY  ,MAXNKS*MAXNRS)
      CALL IINOUT ('R KORPG ',KORPG ,MAXNKS*MAXNRS)
      CALL IINOUT ('R NVERTP',NVERTP,MAXNKS*MAXNRS)
      CALL RINOUT ('R RVERTP',RVERTP,5*MAXNKS*MAXNRS)
      CALL RINOUT ('R ZVERTP',ZVERTP,5*MAXNKS*MAXNRS)
C
      CALL RINOUT ('R SDLIMS',SDLIMS,MAXNKS*MAXNRS*(MAXIZS+2))
      CALL RINOUT ('R SDTS  ',SDTS  ,MAXNKS*MAXNRS*(MAXIZS+2))
      CALL RINOUT ('R ELIMS ',ELIMS ,MAXNKS*3*(MAXIZS+2))
      CALL RINOUT ('R WALKS ',WALKS ,MAXNWS*2)
c
      call rinout ('R CHEM D',chemden,maxnks*maxnrs)
      call rinout ('R CHEMIZ',chemizs,maxnks*maxnrs)
C
      CALL RINOUT ('R KKS   ',KKS   ,MAXNRS)
      CALL RINOUT ('R KSS   ',KSS   ,MAXNKS*MAXNRS)
      CALL RINOUT ('R KPS   ',KPS   ,MAXNKS*MAXNRS)
      CALL RINOUT ('R KNORMS',KNORMS,MAXNKS*MAXNRS)
      CALL RINOUT ('R KPERPS',KPERPS,MAXNKS*MAXNRS)
      CALL RINOUT ('R KCURVS',KCURVS,MAXNKS*MAXNRS)
      CALL RINOUT ('R KVOLS ',KVOLS ,MAXNKS*MAXNRS)
      CALL RINOUT ('R KAREAS',KAREAS,MAXNKS*MAXNRS)
      CALL RINOUT ('R KTOTAS',KTOTAS,MAXNRS)
      CALL RINOUT ('R KTOTVS',KTOTVS,MAXNRS)
      CALL RINOUT ('R KVOL2 ',KVOL2 ,MAXNKS*MAXNRS)
      CALL RINOUT ('R KAREA2',KAREA2,MAXNKS*MAXNRS)
      CALL RINOUT ('R KTOTA2',KTOTA2,MAXNRS)
      CALL RINOUT ('R KTOTV2',KTOTV2,MAXNRS)
      CALL RINOUT ('R KBFS  ',KBFS  ,MAXNKS*MAXNRS)
      CALL RINOUT ('R KINS  ',KINS  ,MAXNKS*MAXNRS)
      CALL RINOUT ('R KSMAXS',KSMAXS,MAXNRS)
      CALL RINOUT ('R KPMAXS',KPMAXS,MAXNRS)
      CALL RINOUT ('R KTEBS ',KTEBS ,MAXNKS*MAXNRS)
      CALL RINOUT ('R KTIBS ',KTIBS ,MAXNKS*MAXNRS)
      CALL RINOUT ('R KNBS  ',KNBS  ,MAXNKS*MAXNRS)
c
      CALL RINOUT ('R KFIZS ',KFIZS ,MAXNKS*MAXNRS*(MAXIZS+1))
c
c      CALL RINOUT ('R KFSSMO',KFSSMOD,MAXNKS*MAXNRS)
c
      CALL RINOUT ('R KINDS ',KINDS ,MAXNKS*MAXNRS)
      CALL RINOUT ('R KOUTDS',KOUTDS,MAXNKS*MAXNRS)
      CALL RINOUT ('R KFORDS',KFORDS,MAXNKS*MAXNRS)
      CALL RINOUT ('R KBACDS',KBACDS,MAXNKS*MAXNRS)
c
      CALL RINOUT ('R OKTEBS',OKTEBS,MAXNKS*MAXNRS)
      CALL RINOUT ('R OKTIBS',OKTIBS,MAXNKS*MAXNRS)
      CALL RINOUT ('R OKNBS ',OKNBS ,MAXNKS*MAXNRS)
      CALL RINOUT ('R OKVHS ',OKVHS ,MAXNKS*MAXNRS)
      CALL RINOUT ('R OKES  ',OKES  ,MAXNKS*MAXNRS)
C
      CALL RINOUT ('R KFEGS ',KFEGS ,MAXNKS*MAXNRS)
      CALL RINOUT ('R KFIGS ',KFIGS ,MAXNKS*MAXNRS)
      CALL RINOUT ('R KES   ',KES   ,MAXNKS*MAXNRS)
      CALL RINOUT ('R KVHS  ',KVHS  ,MAXNKS*MAXNRS)
c
c     Background data at plates
c
      CALL RINOUT ('R RP    ',RP    ,MAXNDS)
      CALL RINOUT ('R ZP    ',ZP    ,MAXNDS)
      call iinout ('R IDDS  ',idds  ,maxnrs*2)
      CALL RINOUT ('R KTEDS ',KTEDS ,MAXNDS)
      CALL RINOUT ('R KTIDS ',KTIDS ,MAXNDS)
      CALL RINOUT ('R KTI3LS',KTI3LS,MAXNDS)
      CALL RINOUT ('R KTINJ ',KTINJ ,MAXNDS)
      CALL RINOUT ('R KNDS  ',KNDS  ,MAXNDS)
      CALL RINOUT ('R KFEDS ',KFEDS ,MAXNDS)
      CALL RINOUT ('R KFIDS ',KFIDS ,MAXNDS)
      CALL RINOUT ('R KEDS  ',KEDS  ,MAXNDS)
      CALL RINOUT ('R KVDS  ',KVDS  ,MAXNDS)
      call rinout ('R KPREDB',kpredbar,maxnds*3*2)
c
      CALL RINOUT ('R KFLUX ',KFLUX ,MAXNDS)
      CALL RINOUT ('R KENER ',KENER ,MAXNDS)
      CALL RINOUT ('R KYIELD',KYIELD,MAXNDS)
      CALL RINOUT ('R KFY   ',KFY   ,MAXNDS)
      CALL RINOUT ('R KRMAX ',KRMAX ,MAXNDS)
      CALL RINOUT ('R KCUM  ',KCUM  ,MAXNDS)
      CALL RINOUT ('R DDS   ',DDS   ,MAXNDS)
      CALL RINOUT ('R THETAS',THETAS,MAXNDS)
      CALL RINOUT ('R DDS2  ',DDS2  ,MAXNDS)
      CALL RINOUT ('R THETA2',THETAS2,MAXNDS)
      CALL RINOUT ('R COSTET',COSTET,MAXNDS)
c
      call rinout ('R RHOG  ',rhog  ,maxnrs*maxnks)
      call rinout ('R THETAG',thetag,maxnrs*maxnks)
      call rinout ('R HRO   ',hro   ,maxnrs*maxnks)
      call rinout ('R HTETA ',hteta ,maxnrs*maxnks)
      call rinout ('R BTS   ',bts   ,maxnrs*maxnks)
c
      if (version_code.ge.(5*MAXREV+12)) then
         call rinout ('R PSIFL ',psifl ,maxnrs*maxnks)
      endif
c
      call iinout ('R TAGDV ',tagdv ,maxnrs*maxnks)
c
c     Chi Squared data
c
      CALL RINOUT ('R CHISQ1',CHISQ1,25)
      CALL RINOUT ('R CHISQ2',CHISQ2,25)
      CALL RINOUT ('R CHISQ3',CHISQ3,25)
      CALL RINOUT ('R CHISQ4',CHISQ4,25)
      CALL RINOUT ('R CHISQ5',CHISQ5,25)
C
      CALL RINOUT ('R PINATO',PINATOM ,MAXNKS*MAXNRS)
      CALL RINOUT ('R PINION',PINION  ,MAXNKS*MAXNRS)
      CALL RINOUT ('R PINALP',PINALPHA,MAXNKS*MAXNRS)
      CALL RINOUT ('R PINMOL',PINMOL  ,MAXNKS*MAXNRS)
      CALL RINOUT ('R PINZ0 ',PINZ0   ,MAXNKS*MAXNRS)
      CALL RINOUT ('R PININZ',PINIONZ ,MAXNKS*MAXNRS)
      CALL RINOUT ('R PINENA',PINENA  ,MAXNKS*MAXNRS)
      CALL RINOUT ('R PINENM',PINENM  ,MAXNKS*MAXNRS)
      CALL RINOUT ('R PINENZ',PINENZ  ,MAXNKS*MAXNRS)
      CALL RINOUT ('R PINQI ',PINQI   ,MAXNKS*MAXNRS)
      CALL RINOUT ('R PINQE ',PINQE   ,MAXNKS*MAXNRS)
      CALL RINOUT ('R PINMP ',PINMP   ,MAXNKS*MAXNRS)
      CALL RINOUT ('R PINVDI',PINVDIST,3*14*MAXNKS*MAXNRS)
      CALL RINOUT ('R PINREC',PINREC  ,MAXNKS*MAXNRS)
c
      if (version_code.ge.(5*maxrev+13)) then
c
         CALL RINOUT ('R PININF',PINIZ_INFO,MAXNRS*4)
c
      endif
C
      call rinout ('R RVESM ',RVESM   ,2*MAXSEG)
      call rinout ('R ZVESM ',ZVESM   ,2*MAXSEG)
      call iinout ('R JVESM ',JVESM   ,MAXSEG)
      call rinout ('R FLUXHW',FLUXHW  ,MAXSEG)
      call rinout ('R FLXHW2',FLXHW2  ,MAXSEG)
      call rinout ('R FLXHW3',FLXHW3  ,MAXSEG)
      call rinout ('R FLXHW4',FLXHW4  ,MAXSEG)
      call rinout ('R FLXHW5',FLXHW5  ,MAXSEG)
      if (version_code.ge.(5*maxrev+12)) then
         call rinout ('R FLXHW6',FLXHW6  ,MAXSEG)
      endif
      CALL RINOUT ('R HWALKS',HWALKS  ,MAXNWS*2)
C
      CALL rINOUT ('R SOLTE ',solte,maxnks*msolpt+msolpt+1)
      CALL rINOUT ('R SOLTI ',solti,maxnks*msolpt+msolpt+1)
      CALL rINOUT ('R SOLNE ',solne,maxnks*msolpt+msolpt+1)
      CALL rINOUT ('R SOLVEL',solvel,maxnks*msolpt+msolpt+1)
      CALL rINOUT ('R SOLCOR',solcor,maxnks*msolpt+msolpt+1)
C
c     Leakage data
c
      CALL RINOUT ('R CLEAKS',cleaks  ,MAXpts)
      CALL RINOUT ('R CLEAKN',cleakn  ,MAXpts*(maxizs+1))
      call rinout ('R LEAKPS',cleakpos,maximp*2)
c
c     More arrays related to leakage results
c
      call rinout ('R ncore ',ncore,maxnks*maxnrs)
      call rinout ('R nedge ',nedge,maxnks*maxnrs)
      call rinout ('R ntrap ',ntrap,maxnks*maxnrs)
      call rinout ('R ndivt ',ndivert,maxnks*maxnrs)
      call rinout ('R nmsol ',nmsol,maxnks*maxnrs)
      call rinout ('R WTSOU ',wtsource,maxpts*maxnrs*4*5)
      call rinout ('R TSOUR ',targsrc,3*4)
      call rinout ('R TLEAK ',targleak,3*4)
      call rinout ('R WSOUR ',wallsrc,5*3)
      call rinout ('R WLEAK ',wallleak,5*3)

c
c     READ any EDGE2D BG data that has been saved
c

      if (cre2d.eq.1.or.cre2d.eq.2.or.cre2d.eq.5) then

        call rinout ('R E2D N ',e2dnbs,maxnks*maxnrs)
        call rinout ('R E2D TE',e2dtebs,maxnks*maxnrs)
        call rinout ('R E2D TI',e2dtibs,maxnks*maxnrs)
        call rinout ('R E2D VB',e2dvhs,maxnks*maxnrs)
        call rinout ('R E2D E ',e2des,maxnks*maxnrs)
        call rinout ('R E2D I ',e2dion,maxnks*maxnrs)
        if (version_code.ge.(5*maxrev+9)) then
           call rinout ('R E2D A ',e2datom,maxnks*maxnrs)
        endif
        call rinout ('R E2D TA',e2dtarg,maxnrs*8*2)
        call rinout ('R E2D GP',e2dgpara,maxnks*maxnrs)
        call rinout ('R E2D GD',e2dgdown,maxnks*maxnrs)
c
        if (version_code.ge.(5*maxrev+8)) then
           call rinout ('R E2D G ',e2dflux,(maxnks+1)*maxnrs)
        else
           call rinout ('R E2D G ',e2dflux,maxnks*maxnrs)
        endif
c
        if (version_code.ge.(5*maxrev+8)) then
           call rinout ('R E2D VE',e2dbvel,(maxnks+1)*maxnrs)
        endif
c
        if (version_code.ge.(5*maxrev+9)) then
           call rinout ('R E2D Z0',e2dz0,maxnks*maxnrs)
        endif
c
        if (version_code.ge.(5*maxrev+15)) then
           call rinout ('R E2D RC',e2dhrec,maxnks*maxnrs)
        endif
c
        if (version_code.ge.(5*maxrev+10)) then
           call rinout ('R E2D RC',e2drec,maxnks*maxnrs)
           call rinout ('R E2D CX',e2dcxrec,maxnks*maxnrs)
        endif
c
        if (cre2dizs.gt.0) then

          call rinout ('R E2D NZ ',e2dnzs,maxnks*maxnrs*
     >                              (maxe2dizs+1))
          call rinout ('R E2D PW',e2dpowls,maxnks*maxnrs*
     >                              (maxe2dizs+1))
          call rinout ('R E2D LI',e2dlines,maxnks*maxnrs*
     >                              (maxe2dizs+1))

        endif
c
      endif
c
C
c     Read Data related to transport coefficient calculations
c
      call rinout ('R DPERP ',DPERP,maxnrs)
      call rinout ('R DPERPO',odperp,maxnrs)
      call rinout ('R DPERPI',idperp,maxnrs)
      call rinout ('R XPERP ',xPERPt,maxnrs)
      call rinout ('R XPERPO',oxperpt,maxnrs)
      call rinout ('R XPERPI',ixperpt,maxnrs)
      call rinout ('R XPI   ',chiperpi,maxnrs)
      call rinout ('R XPI  O',ochiperpi,maxnrs)
      call rinout ('R XPI  I',ichiperpi,maxnrs)
      call rinout ('R XPE   ',chiperpe,maxnrs)
      call rinout ('R XPE  O',ochiperpe,maxnrs)
      call rinout ('R XPE  I',ichiperpe,maxnrs)
      call rinout ('R RC OUT',rcouter,maxnrs)
      call rinout ('R RC IN ',rcinner,maxnrs)
      if (version_code.ge.(5*maxrev+13)) then
         call rinout ('R ZC OUT',zcouter,maxnrs)
         call rinout ('R ZC IN ',zcinner,maxnrs)
         call rinout ('R MIDIST',middist,maxnrs*2)
      endif
      call rinout ('R GRADNE',gradn,maxnks*maxnrs)
      call rinout ('R GRADTE',gradte,maxnks*maxnrs)
      call rinout ('R GRADTI',gradti,maxnks*maxnrs)
      call rinout ('R E2DGNE',e2dgradn,maxnks*maxnrs)
      call rinout ('R E2DGTE',e2dgradte,maxnks*maxnrs)
      call rinout ('R E2DGTI',e2dgradti,maxnks*maxnrs)
c
c     Read the pressure - from SOL option 22
c
      call rinout ('R KPRESS',kpress,maxnks*maxnrs*2)
c
      if (version_code.ge.(6*maxrev+2)) then

         call rinout ('R KPRAD',kprad,maxnks*maxnrs)

      endif
c
c     Temporarily Add the following
c
      call rinout ('R FLUXES',fluxes,maxnks*maxnrs*16)
c
c
c
      IF (IMODE.EQ.1) THEN
      CALL RINOUT ('R LIMS  ',LIMS  ,MAXNKS*MAXNRS*(MAXIZS+2)*MAXNTS)
      ENDIF
      RETURN
C
 9001 FORMAT(//1X,'GET:     NXS    NYS    NRS    NDS   NIZS    NTS',
     >  /6X,6I7,/1X,'(MAX)',6I7,/6X,A,/6X,A,
     >        /1X,'        ITER   MODE   REFCT  MAXSEG NVESM  NVESP',
     >  /6x,6I7,/)
 9002 FORMAT(//1X,'WARNING! PROGRAM HAS BEEN RECOMPILED SINCE ',
     >  'RESULTS FILE CREATED.',/10X,'RESULTS  WRITTEN  BY  DIV',A5,
     >                          /10X,'RESULTS BEING READ BY OUT',A5,/)
      END
**==DMGUID
C
C=======================================================================
      SUBROUTINE DMGUID(SYSUID,PREFIX)
C
C RETURNS USERID
C
      CHARACTER*(*) SYSUID, PREFIX
C
      CALL GETENV('LOGNAME',SYSUID)
C
      PREFIX = ' '
C
      RETURN
      END
**++EOF
**==ERRMSS
      SUBROUTINE ERRMSS(LUN, MODULE, IER, MSG1, MSG2, MSG3)
C
C***********************************************************************
C
C Prints out error message
C
C INPUT :   LUN    - Unit number for error message (0 --> default)
C           MODULE - Name of calling routine
C           IER    - Error level (0-warning, 1-error+exit, 2-error only)
C           MSGn   - Error message for line n (blank lines not printed)
C
C***********************************************************************
C
      CHARACTER*(*) MODULE,MSG1,MSG2,MSG3
      DATA LDEF/6/
C
C
      IF (LUN.NE.0) THEN
          LOUT = LUN
      ELSE
          LOUT = LDEF
      END IF
C
      WRITE(LOUT,*)
      IF( IER.NE.0 )THEN
        WRITE(LOUT,*)
        WRITE(LOUT,*) '*** ERROR(',MODULE(1:LENSTR(MODULE)),') : ',
     +              MSG1
      ELSE
        WRITE(LOUT,*) '*** WARNING(',MODULE(1:LENSTR(MODULE)),') : ',
     +              MSG1
      ENDIF
      IF (MSG2.NE.' ')
     +    WRITE(LOUT,*) '                    ',MSG2
      IF (MSG3.NE.' ')
     +    WRITE(LOUT,*) '                    ',MSG3
C
      IF( IER.EQ.1 ) CALL EXIT(LOUT)
C
C
      RETURN
      END
