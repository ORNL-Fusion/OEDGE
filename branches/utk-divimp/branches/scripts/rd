#!/bin/sh

# Usage help function ==========================================================
usage()
{
    if [ $# -gt 0 ]
    then
        echo $@
    fi
    echo "Usage: rd [-d <case subdir>] [-s <shot subdir>] [-f <EDGE2D|SOLPS solution>]"
    echo "       [-c <CFD solution>] [-o <OEDGE solution>] divinput outinput geometry"
}

# Set Run-time environment variables ===========================================

# These should be all that require changing for most installations

runroot=$HOME/divimp
exeroot=/afs/ipp/u/divimp/divimpIPP
dataroot=$HOME/divimp
divrundir=/tmp
eireneversion=eirene99
ADASCENT=/afs/ipp/u/divimp/adas

#  Locations of the various DIVIMP directories / files

#  divrundir - Directory where DIVIMP will run
#  divdatdir - Directory containing the input data files
#  DIVRESDIR - Directory where the results from the case will be stored
#  divmaindir- Main DIVIMP directory containing the source code tree
#  divexedir - Directory containing the DIVIMP executable
#  outexedir - Directory containing the DIVIMP output processor executable
#  EIREXEDIR - Directory containing the EIRENE executable
#  EIRDATDIR - Directory containing the EIRENE executable
#  ADASCENT  - Directory with ADAS data
#  equdir    - Directory containg the equilibrium, background plasma and pump files
#  divexe    - DIVIMP executable
#  outexe    - OUT executable
#  EIREXE    - EIRENE executable

divdatdir=$runroot/data
DIVRESDIR=$runroot/results
divmaindir=$exeroot
divexedir=$exeroot/bin
outexedir=$exeroot/bin
EIREXEDIR=$exeroot/bin
EIRDATDIR=$exeroot/$eireneversion
equdir=$dataroot/shots
divexe=$divexedir/div6
outexe=$outexedir/out6
EIREXE=$EIREXEDIR/$eireneversion

# Make variables readable by executables inside script

export ADASCENT
export DIVRESDIR
export EIREXEDIR
export EIRDATDIR
export EIREXE

# Argument parsing and testing =================================================

scriptname=`basename $0`

# Parse options

while getopts "d:s:f:c:o:" option
do
    case $option in
        d )
            csubdir=$OPTARG
        ;;
        s )
            ssubdir=$OPTARG
        ;;
        f )
            fleqsol=$OPTARG
        ;;
        c )
            cfd_sol=$OPTARG
        ;;
        o )
            osm_sol=$OPTARG
        ;;
        \? )
            usage $USAGE
            exit 1
        ;;
        * )
            usage "$scriptname: that smells fishy - error in getopt routine?"
            exit 1
        ;;
    esac
done
shift `expr $OPTIND - 1`

# Check if we have 3 arguments left after options parsing
if [ $# -lt 3 ]
then
    usage "$scriptname: missing argument(s)"
    exit 1
fi

# Test validity of arguments and options
if [ -n "$csubdir" ]
then
    if [ ! -d $divdatdir/$csubdir ]
    then
        usage "$scriptname: data subdirectory does not exist"
        exit 1
    fi
else
    csubdir="."
fi

if [ -n "$ssubdir" ]
then
    if [ ! -d $equdir/$ssubdir ]
    then
        usage "$scriptname: shots subdirectory does not exist"
        exit 1
    fi
else
    ssubdir="."
fi

if [ ! -f $divdatdir/$csubdir/`basename $1 .d6i`.d6i ]
then
    usage "$scriptname: `basename $divexe` input parameter file does not exist"
    exit 1
else
    divinput=`basename $1 .d6i`.d6i
    CASENAME=`basename $1 .d6i`
    export CASENAME
fi

if [ ! -f $divdatdir/$csubdir/`basename $2 .d6o`.d6o ]
then
    usage "$scriptname: `basename $outexe` input parameter file does not exist"
    exit 1
else
    outinput=`basename $2 .d6o`.d6o
fi

if [ \( ! -f $equdir/$ssubdir/$3 \) -a \( ! -f $equdir/$csubdir/$3 \) ]
then
    usage "$scriptname: geometry grid file does not exist"
    exit 1
else
    geometry=$3
    if [ -f $equdir/$csubdir/$3 ]
    then
        ssubdir=$csubdir
    fi
fi

if [ -n "$fleqsol" ]
then
    if [ ! -f $equdir/$ssubdir/$fleqsol ]
    then
        usage "$scriptname: fluid code background file does not exist"
        exit 1
    fi
fi

if [ -n "$cfd_sol" ]
then
    if [ ! -f $DIVRESDIR/$csubdir/`basename $cfd_sol .cfd`.cfd ]
    then
        usage "$scriptname: CFD solution file does not exist"
        exit 1
    else
        cfd_sol=`basename $cfd_sol .cfd`.cfd
    fi
fi

if [ -n "$osm_sol" ]
then
    if [ ! -f $DIVRESDIR/$csubdir/`basename $osm_sol .bgp`.bgp ]
    then
        usage "$scriptname: OEDGE background file does not exist"
        exit 1
    else
        osm_sol=`basename $osm_sol .bgp`.bgp
    fi
fi

# Start actual processing ======================================================

# Prevent crashing code dumping core
ulimit -c 0

# Create unique execution directory (including sh PID) and cd to it
cd $divrundir
mkdir $CASENAME.$$
cd $CASENAME.$$
CURRENTDIR=`pwd`
export CURRENTDIR

# Link to EIRENE AMJUEL data files
ln -s "$EIRDATDIR/a+m/HYDHEL"     .
ln -s "$EIRDATDIR/a+m/SPUTER"     .
ln -s "$EIRDATDIR/a+m/AMJUEL.TEX" AMJUEL
ln -s "$EIRDATDIR/a+m/H2VIBR.TEX" H2VIBR
ln -s "$EIRDATDIR/a+m/METHANE"    .

# Link geometry file to unit 4
ln -s $equdir/$ssubdir/$geometry fort.4

# Link to file for Eirene option related print outs
if [ -f  $equdir/$ssubdir/info.dat ]
then
    ln -s $equdir/$ssubdir/info.dat .
elif [ -f $equdir/info.dat ]
then
    ln -s $equdir/info.dat .
fi

# Link JET hybrid wall data file to unit 28
if [ -f  $equdir/$ssubdir/hybrid.dat ]
then
    ln -s $equdir/$ssubdir/hybrid.dat fort.28
elif [ -f $equdir/hybrid.dat ]
then
    ln -s $equdir/hybrid.dat fort.28
fi

# Link CFD OSM solution file to  unit 74
if [ -n "$cfd_sol" ]
then
    ln -s $DIVRESDIR/$csubdir/$cfd_sol fort.74
fi

# Link divimp_plasma.dat to OEDGE solution and - if available -
# link divimp_aux_data.dat to auxiliary data from previous run
if [ -n "$osm_sol" ]
then
    ln -s $DIVRESDIR/$csubdir/$osm_sol divimp_plasma.dat
    auxbgpdat=`basename $osm_sol .bgp`.auxdata
    if [ -f $DIVRESDIR/$csubdir/$auxbgpdat ]
    then
        ln -s $DIVRESDIR/$csubdir/$auxbgpdat divimp_aux_data.dat
    fi
fi

# Link fluid plasma solution to unit 11 and - if available -
# link auxiliary data file to unit 12   and - if available -
# link ext_flux.dat to external flux file
if [ -n "$fleqsol" ]
then
    ln -s $equdir/$ssubdir/$fleqsol fort.11
    if [ -f $equdir/$ssubdir/$fleqsol.aux ]
    then
        ln -s $equdir/$ssubdir/$fleqsol.aux fort.12
    fi
    if [ -f $equdir/$ssubdir/$fleqsol.ext_flux ]
    then
        ln -s $equdir/$ssubdir/$fleqsol.ext_flux ext_flux.dat
    fi
else
    if [ -f $equdir/$ssubdir/$geometry.aux ]
    then
        ln -s $equdir/$ssubdir/$geometry.aux fort.12
    fi
    if [ -f $equdir/$ssubdir/$geometry.ext_flux ]
    then
        ln -s $equdir/$ssubdir/$geometry.ext_flux ext_flux.dat
    fi
fi

# Copy script for EIRENE run to current directory
cp $runroot/re99 reire99

#  Link DIVIMP input data file to unit 5
ln -s $divdatdir/$csubdir/$divinput fort.5

# Copy EIRENE input file template to fort.80
cp $EIRDATDIR/eirene99.dat fort.80

# Run DIVIMP ===================================================================

echo Starting DIVIMP in working directory $divrundir/$CASENAME.$$

$divexe < fort.5 > divout1

if [ -f fort.7 ]
then
    grep "TOTAL CPU TIME USED" fort.7 > /dev/null 2>&1
    if  [ "$?" -eq "0" ]
    then
        echo DIVIMP finished successfully
    else
        echo DIVIMP crashed
        echo Aborting script for inspection of working directory
        codecrash="true"
    fi
else
    echo DIVIMP crashed
    echo Aborting script for inspection of crash site
    codecrash="true"
fi

# Files produced by DIVIMP
# divout1 is the debug output
# Unit  7 is the text output from DIVIMP
# Unit  9 is an echo of the DIVIMP input
# Unit 17 is the passing file from DIVIMP to PIN
# Unit 19 is the temporary file used to record PIN iteration information
# Unit 21 is the print file from the CALCSOL option
# Unit 22 is the HTML version of the .dat file
# Unit 23 is a temporary file used to store HTML as the code runs
# Unit 25 is a diagnostic print file of grid information
# Unit 26 is used by OUT to print the numerics for plots
# Unit 27 is another grid print file
# Unit 41 is the TRAN file output for JET post-processors
# Unit 50 is a diagnostic file from the Theta routines and Steve's code
# Unit 88 is a SOL22 (and other stuff) diagnostic file
# POSTSCPT.LIS is the ghost80 Postscript output of SOL22

# Create subdirectory in results directory
if [ ! -d $DIVRESDIR/$csubdir ]
then
    echo "Create results subdirectory"
    mkdir $DIVRESDIR/$csubdir
fi

# Pushing results files to results directory ===================================

# SOL22 plot file
if [ -f POSTSCPT.LIS ]
then
   ps2pdf POSTSCPT.LIS $CASENAME.sol22.pdf
   mv $CASENAME.sol22.pdf $DIVRESDIR/$csubdir
fi

# .lim debug output
if [ -f divout1 ]
then
    mv divout1 $DIVRESDIR/$csubdir/$CASENAME.lim
fi

# .dat case output file
if [ -f fort.7 ]
then
    mv fort.7 $DIVRESDIR/$csubdir/$CASENAME.dat
fi

# .html case output file
if [ -f fort.22 ]
then
    mv fort.22 $DIVRESDIR/$csubdir/$CASENAME.html
fi

# .inp input echo file + other information
if [ -f fort.9 ]
then
    mv fort.9 $DIVRESDIR/$csubdir/$CASENAME.inp
fi

# PIN input plasma file
if [ -f fort.17 ]
then
   mv fort.17  $DIVRESDIR/$csubdir/$CASENAME.pin
fi

# Additional information from SOL option 22.
if [ -f fort.21 ]
then
    mv fort.21 $DIVRESDIR/$csubdir/$CASENAME.sol22
fi

# Print-out from PIN
if [ -f fort.24 ]
then
    mv fort.24 $DIVRESDIR/$csubdir/$CASENAME.pinprn
fi

# TRAN file for JET postprocessors
if [ -f fort.41 ]
then
    mv fort.41 $DIVRESDIR/$csubdir/$CASENAME.tran
fi

# Diagnostic information from THETA module (among others)
if [ -f fort.50 ]
then
    mv fort.50 $DIVRESDIR/$csubdir/$CASENAME.theta
fi

# Probe data ?
if [ -f fort.56 ]
then
    mv fort.56 $DIVRESDIR/$csubdir/$CASENAME.probe
fi

# Additional information from SOL option 23.
if [ -f fort.71 ]
then
    mv fort.71 $DIVRESDIR/$csubdir/$CASENAME.sol23
fi

# Excel print information from sol23
if [ -f fort.73 ]
then
    mv fort.73 $DIVRESDIR/$csubdir/$CASENAME.exl23
fi

# CFD solution file
if [ -f fort.75 ]
then
    mv fort.75 $DIVRESDIR/$csubdir/$CASENAME.cfd
fi

#  Diagnostic files (SL)
if [ -f fort.88 ]
then
    mv fort.88 $DIVRESDIR/$csubdir/$CASENAME.src
fi
if [ -f fort.87 ]
then
    mv fort.87 $DIVRESDIR/$csubdir/$CASENAME.g3
fi

# DIVIMP format background plasma file
if [ -f divimp_plasma.out ]
then
    mv divimp_plasma.out $DIVRESDIR/$csubdir/$CASENAME.bgp
fi

#  Additional DIVIMP data file - output in a standardized tagged format.
if [ -f divimp_aux_data.out ]
then
    mv divimp_aux_data.out $DIVRESDIR/$csubdir/$CASENAME.auxdata
fi

# HC output files
if [ -f hc_alert.txt ]
then
    mv hc_alert.txt $DIVRESDIR/$csubdir/$CASENAME.hc_alert
fi

if [ -f hc_cpos_stat.txt ]
then
    mv hc_cpos_stat.txt $DIVRESDIR/$csubdir/$CASENAME.hc_cpos_stat
fi

if [ -f hc_output.txt ]
then
    mv hc_output.txt $DIVRESDIR/$csubdir/$CASENAME.hc_output
fi

if [ -f hc_scratch.txt ]
then
    mv hc_scratch.txt $DIVRESDIR/$csubdir/$CASENAME.hc_scratch
fi

if [ -f temphc.txt ]
then
    mv temphc.txt $DIVRESDIR/$csubdir/$CASENAME.temphc
fi

# EIRENE related output:
if [ -f fort.81 ]
then
    mv fort.81 $DIVRESDIR/$csubdir/$CASENAME.eirdat
fi
if [ -f fort.52 ]
then
    mv fort.52 $DIVRESDIR/$csubdir/$CASENAME.eirgeo
fi
if [ -f fort.50 ]
then
    mv fort.50 $DIVRESDIR/$csubdir/$CASENAME.debug
fi
if [ -f fort.85 ]
then
    mv fort.85 $DIVRESDIR/$csubdir/$CASENAME.g1
fi
if [ -f addsur.dat ]
then
    mv addsur.dat $DIVRESDIR/$csubdir/$CASENAME.eirsur
fi
if [ -f eirint.dat ]
then
    mv eirint.dat $DIVRESDIR/$csubdir/$CASENAME.eirint
fi
if [ -f $CASENAME.eir ]
then
    mv $CASENAME.eir $DIVRESDIR/$csubdir
fi
if [ -f $CASENAME.eirprn ]
then
    mv $CASENAME.eirprn $DIVRESDIR/$csubdir
fi

# Prepare OUT ==================================================================

# Link outinp1 to OUT parameter file

ln -s $divdatdir/$csubdir/$outinput outinp1

# Link experimental data to unit 13
if [ -f $equdir/$ssubdir/$geometry.experiment ]
then
    ln -s $equdir/$ssubdir/$geometry.experiment fort.13
fi

# Link camera.dat to toroidal camera inversion data
if [ -f $equdir/$ssubdir/$geometry.camera ]
then
   ln -s $equdir/$ssubdir/$geometry.camera camera.dat
fi

# Run OUT ======================================================================

if [ ! -n "$codecrash" ]
then
    echo Starting OUTput processing ...
    $outexe < outinp1 > outout1
    grep "OUT: TOTAL TIME USED" outout1 > /dev/null 2>&1
    if  [ "$?" -eq "0" ]
    then
        echo OUT finished successfully
    else
        echo OUT crashed
        echo Aborting script for inspection of crash site
        codecrash="true"
    fi
fi

# Pushing remaining DIVIMP results files required by OUT to results directory ==

# .raw complete results file
if [ -f fort.8 ]
then
    mv fort.8 $CASENAME.raw
    gzip $CASENAME.raw
    mv $CASENAME.raw.gz $DIVRESDIR/$csubdir
fi

# Supplimentary .raw files
if [ -f plasma.dat ]
then
    mv plasma.dat   $DIVRESDIR/$csubdir/$CASENAME.raw.pla
fi
if [ -f source.dat ]
then
    mv "source.dat" $DIVRESDIR/$csubdir/$CASENAME.raw.src
fi
if [ -f geomty.dat ]
then
    mv geomty.dat   $DIVRESDIR/$csubdir/$CASENAME.raw.geo
fi
if [ -f eirtrac.dat ]
then
    mv eirtrac.dat  $DIVRESDIR/$csubdir/$CASENAME.eirtrc
fi

# Pushing OUT results files to results directory ===============================

# .out OUT debugging file
if [ -f outout1 ]
then
    mv outout1 $DIVRESDIR/$csubdir/$CASENAME.out
fi

# .dag OUT output file
if [ -f fort.7 ]
then
    mv fort.7 $DIVRESDIR/$csubdir/$CASENAME.dag
fi

# .ing - Echo of input to graphing routines
if [ -f fort.9 ]
then
    mv fort.9 $DIVRESDIR/$csubdir/$CASENAME.ing
fi

# .psg - Postscript plots
if [ -f POSTSCPT.LIS ]
then
    ps2pdf POSTSCPT.LIS $CASENAME.pdf
    mv $CASENAME.pdf $DIVRESDIR/$csubdir
fi

# Special printed listing of some plot information.
if [ -f fort.26 ]
then
    mv fort.26 $DIVRESDIR/$csubdir/$CASENAME.grp
fi

# Special printed listing of some plot information.
if [ -f fort.49 ]
then
    mv fort.49 $DIVRESDIR/$csubdir/$CASENAME.plt
fi

# Erosion/Deposition data
if [ -f fort.57 ]
then
    mv fort.57 $DIVRESDIR/$csubdir/$CASENAME.deposition
fi

# AUG special output (deprecated?)
if [ -f fort.59 ]
then
    mv fort.59 $DIVRESDIR/$csubdir/$CASENAME.AUGdiv
fi

# Image files
if [ -f $CASENAME_image01.jpg ]
then
    mv *image*.jpg $DIVRESDIR/$csubdir
fi

# Clean-up =====================================================================

cd $divrundir
if [ ! -n "$codecrash" ]
then
    rm -rf $CASENAME.$$
else
    echo Keeping crash site $CASENAME.$$ for inspection
    echo Please delete manually if not required anymore
fi

#  Return to base directory.
cd $runroot

exit 0
