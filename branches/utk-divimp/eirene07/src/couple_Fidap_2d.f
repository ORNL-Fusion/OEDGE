C EIRENE07 COMPILATION
C ===== SOURCE: bubble.f


      SUBROUTINE BUBBLE (IAR,N)

      USE PRECISION
      IMPLICIT NONE

      INTEGER, INTENT(INOUT) :: IAR(N)
      INTEGER, INTENT(IN) :: N

      INTEGER IH, K, J, IBOUND

      IBOUND = N

      DO WHILE (IBOUND > 1)
        K = 1
        J = 1
        DO WHILE (IBOUND > J)
          IF (IAR(J) > IAR(J+1)) THEN
            IH = IAR(J)
            IAR(J) = IAR(J+1)
            IAR(J+1) = IH
            K = J
          END IF
          J = J + 1
        END DO
        IBOUND = K
      END DO

      RETURN
      END 
C ===== SOURCE: eirsrt.f
C

      SUBROUTINE EIRSRT(LSTOP,LTIME,DELTAT,FLUXES,
     .                  B2BRM,B2RD,B2Q,B2VP)
      USE PRECISION
      USE PARMMOD
      USE BRASPOI
      USE COMUSR
      USE CESTIM
      USE CCONA
      USE CLOGAU
      USE CINIT
      USE CPOLYG
      USE CGRID
      USE CSPEZ
      USE CZT1
      USE CTRCEI
      USE CCOUPL
      USE CGEOM
      USE CSDVI
      USE CSDVI_BGK
      USE CSDVI_COP
      USE COMPRT
      USE COMNNL
      USE COMSOU
      USE COUTAU
      USE COMXS
      USE CSPEI

      IMPLICIT NONE
      LOGICAL, INTENT(IN) :: LSTOP, LTIME
      REAL(DP), INTENT(IN) :: DELTAT, FLUXES(*),
     .                      B2BRM, B2RD, B2Q, B2VP
C
C
C
      RETURN

      END
C ===== SOURCE: if0prm.f


      SUBROUTINE IF0PRM(IUNIN)
C
      USE PRECISION
      USE PARMMOD
      USE COMUSR
      USE CINIT
      USE CTETRA

      IMPLICIT NONE

      INTEGER :: NBRICK, NQUAD, NLINE
      COMMON /CINTFA/ NBRICK, NQUAD, NLINE

      INTEGER, INTENT(IN) :: IUNIN
      INTEGER :: NFLA, NCUTB, NCUTL, NDXA, NDYA, IPL, NTARGI, IT, IPRT,
     .           NAINB, IAIN, NAOTB, IAOT,  
     .           NCOPI, NOD, NTT, I1, I2, I3
      INTEGER, ALLOCATABLE :: NTGPRT(:)
      CHARACTER(72) :: ZEILE
C
      READ (IUNIN,*)
      DO IPL=1,NPLS
        READ (IUNIN,*) 
      END DO
C  NUMBER OF TARGET SOURCES ON B2 SURFACES: NTARGI
      READ (IUNIN,'(I6)') NTARGI
      NSTEP = MAX(NSTEP,NTARGI)
C  NUMBER OF PARTS PER TARGET SOURCE
      IF (NTARGI.GT.0) THEN
        DO IT=1,NTARGI
          READ (IUNIN,*) ZEILE
        END DO
      END IF
C  READ ADDITIONAL DATA TO BE TRANSFERRED FROM B2 INTO EIRENE
C  HERE: B2 VOLUME TALLIES
      READ (IUNIN,'(I6)') NAINB
!  NAINB+1 BECAUSE OF TRANSFER OF ELECTRON DENSITY TO SUBROUTINE PLAUSR
      NAIN = MAX(NAIN,NAINB+1)
      DO IAIN=1,NAINB
        READ (IUNIN,*) 
        READ (IUNIN,*) 
        READ (IUNIN,*) 
      END DO
C  READ ADDITIONAL DATA TO BE TRANSFERRED FROM EIRENE INTO B2
C  HERE: EIRENE SURFACE TALLIES
      READ (IUNIN,'(I6)') NAOTB
      DO IAOT=1,NAOTB
        READ (IUNIN,*) 
      END DO
C
C READING BLOCK 14 FROM FORMATTED INPUT FILE (IUNIN) FINISHED
C
C
C  DEFINE ADDITIONAL TALLIES FOR COUPLING (UPDATED IN SUBR. UPTCOP
C                                              AND IN SUBR. COLLIDE)
      NCOPI=4
      NCPVI=NCOPI*NPLS
      NCOP = NCOPI
      NCPV = NCPVI
C
      OPEN (UNIT=30,ACCESS='SEQUENTIAL',FORM='FORMATTED')
      REWIND 30

      READ (30,'(A72)') ZEILE
      DO WHILE (INDEX(ZEILE,'NO. OF NODES') == 0)
         READ (30,'(A72)') ZEILE
      END DO
      READ (30,*) NKNOT

      NBRICK = 0
      NQUAD = 0
      NLINE = 0
      READ (30,'(A72)') ZEILE
      DO WHILE (INDEX(ZEILE,'ELEMENT GROUPS') == 0)
         READ (30,'(A72)') ZEILE
      END DO

      DO
         READ (30,'(A72)',END=9) ZEILE
         I1 = INDEX(ZEILE,'ELEMENTS:')
         DO WHILE (I1 == 0)
            READ (30,'(A72)',END=9) ZEILE
            I1 = INDEX(ZEILE,'ELEMENTS:')
         END DO
         I2 = INDEX(ZEILE,'NODES:')
         I3 = INDEX(ZEILE,'GEOMETRY:')
         READ (ZEILE(I2+7:I3-1),*) NOD
         READ (ZEILE(I1+10:I2),*) NTT
         IF (NOD == 27) THEN
           NBRICK = NBRICK + NTT
         ELSE IF (NOD == 9) THEN
           NQUAD = NQUAD + NTT
         ELSE IF (NOD == 3) THEN
           NLINE = NLINE + NTT
         ELSE
           EXIT
         END IF
      END DO

 9    CONTINUE
      NTRI = NQUAD*8
C
C SAVE SOME MORE INPUT DATA FOR SHORT CYCLE ON COMMON CCOUPL
      NDX = 1
      NDY = 1
      NFL = 1
      NDXP = NDX+1
      NDYP = NDY+1

      RETURN
      END
C ===== SOURCE: indmap.f
C
C
      SUBROUTINE INDMAP(FIELD,DUMMY,NDX,NDY,NFL,NDXA,NDYA,NFLA,
     .                  NCUTB,NCUTL,NPOINT,NPPLG)
C
C     INDEX MAPPING FOR BRAAMS DATA FIELDS. DATA IN DUMMY ZONES
C     (CUTS OR BOUNDARY ZONES) MAY BE NEEDED AND THUS ARE KEPT
C     AND DUBLICATED IN CASE NCUTL GT NCUTB
C
C     NCUTB= NUMBER OF CELLS IN IX DIRECTION PER CUT IN BRAAMS
C     NCUTL= NUMBER OF CELLS IN IX DIRECTION PER CUT IN LINDA (AND
C            THUS ALSO IN EIRENE) GEOMETRY
C

      USE PRECISION
      USE COMPRT, ONLY: IUNOUT

      IMPLICIT NONE

      INTEGER, INTENT(IN) :: NPOINT(2,*)
      INTEGER, INTENT(IN) :: NDX,NDY,NFL,NDXA,NDYA,NFLA,NCUTB,NCUTL,
     .                       NPPLG
      REAL(DP), INTENT(INOUT) :: FIELD(0:NDX+1,0:NDY+1,NFL)
      REAL(DP), INTENT(INOUT) :: DUMMY(0:NDX+1,0:NDY+1)
      INTEGER :: IX, IY, IF, IENDD, INB, IINID, IINIV, IENDV, IPART
C
C  LOOP FOR THE SPECIES
C
      DO 500 IF=1,NFLA
C
C  INITIALIZE DUMMY
C
        DO 10 IY=0,NDY+1
          DO 10 IX=0,NDX+1
10          DUMMY(IX,IY)=FIELD(IX,IY,IF)
C
C
C      NDX DIRECTION: IX=0: NOT MODIFIED
C                     IX=I(CUT): USE CUT VALUE
C                     IX=I(LAST X ZONE): MOVE TO NDXA+1
C
C  NPOINT(1,1)=1
C  NPOINT(2,NPPLG)=NDXA+1
C
        IF (NCUTB.LT.0) GOTO 990
        DO 211 IPART = 1,NPPLG
C  "VALID REGION"
          IINIV= NPOINT(1,IPART)
          IENDV= NPOINT(2,IPART)-1
C  "CUT REGION" AND LAST X ZONE IX = NDXA+1
          IF (IPART.LT.NPPLG) THEN
            IINID= NPOINT(2,IPART)
            IENDD= NPOINT(1,IPART+1)-1
            IF (IENDD-IINID+1.NE.NCUTL) GOTO 991
          ELSE
            IINID= NDXA+1
            IENDD= NDXA+1
          ENDIF
          DO 212 IY=0,NDYA+1
            DO 213 IX = IINIV,IENDV
              INB=IX-(IPART-1)*(NCUTL-NCUTB)
              DUMMY(IX,IY)=FIELD(INB,IY,IF)
213         CONTINUE
            DUMMY(IINID,IY) = FIELD(INB+1,IY,IF)
            IF (IENDD.NE.IINID) DUMMY(IENDD,IY) = FIELD(INB+NCUTB,IY,IF)
212       CONTINUE
211     CONTINUE
        DO 220 IY=0,NDYA+1
          DO 220 IX=0,NDXA+1
            FIELD(IX,IY,IF)=DUMMY(IX,IY)
220     CONTINUE
C
500   CONTINUE
      RETURN
C
990   CONTINUE
      WRITE (6,*) 'ERROR IN SUBR. INDMAP: THIS SUBR. IS VALID ONLY'
      WRITE (6,*) 'NCUTB>=0 BUT NCUTB = ',NCUTB
      CALL EXIT
991   WRITE (6,*) 'ERROR IN SUBR. INDMAP: INCONSISTENCY IN NUMBER OF '
      WRITE (6,*) 'ZONES PER CUT FROM LINDA GEOMETRY DETECTED.  '
      WRITE (6,*) 'NCUTL = ',NCUTL, ' IENDD-IINID+1 = ',IENDD-IINID+1
      CALL EXIT
      END
C ===== SOURCE: indmpi.f
C
C
      SUBROUTINE INDMPI(FIELD,DUMMY,NDX,NDY,NFL,NDXA,NDYA,NFLA,
     .                  NCUTB,NCUTL,NPOINT,NPPLG,NSTR,ISTR)
C
C     INDEX MAPPING: INVERS TO SUBR. INDMAP
C

      USE PRECISION

      IMPLICIT NONE
      INTEGER, INTENT(IN) :: NPOINT(2,*)
      INTEGER, INTENT(IN) :: NDX,NDY,NFL,NDXA,NDYA,NFLA,NCUTB,NCUTL,
     .                       NPPLG,NSTR,ISTR 
      REAL(DP), INTENT(INOUT) :: FIELD(0:NDX+1,0:NDY+1,NFL,NSTR)
      REAL(DP), INTENT(INOUT) :: DUMMY(0:NDX+1,0:NDY+1)
      INTEGER :: IX, IY, IF, IENDD, INB, IINID, IINIV, IENDV, IPART
C
C  LOOP OVER THE SPECIES
C
      DO 500 IF=1,NFLA
C
C  INITIALIZE DUMMY
C
        DO 10 IY=0,NDY+1
          DO 10 IX=0,NDX+1
10          DUMMY(IX,IY)=0.
C
C
C      NDX DIRECTION
C
C  NPOINT(1,1)=1
C  NPOINT(2,NPPLG)=NDXA+1
C
        IF (NCUTB.LT.0) GOTO 990
        DO 211 IPART = 1,NPPLG
C  "VALID REGION"
          IINIV= NPOINT(1,IPART)
          IENDV= NPOINT(2,IPART)-1
C  "CUT REGION" AND LAST X ZONE IX = NDXA+1
          IF (IPART.LT.NPPLG) THEN
            IINID= NPOINT(2,IPART)
            IENDD= NPOINT(1,IPART+1)-1
            IF (IENDD-IINID+1.NE.NCUTL) GOTO 991
          ELSE
            IINID= NDXA+1
            IENDD= NDXA+1
          ENDIF
          DO 212 IY=0,NDYA+1
            DO 213 IX = IINIV,IENDV
              INB=IX-(IPART-1)*(NCUTL-NCUTB)
              DUMMY(INB,IY)=FIELD(IX,IY,IF,ISTR)
213         CONTINUE
            DUMMY(INB+1,IY)=FIELD(IINID,IY,IF,ISTR)
            IF (IENDD.NE.IINID)
     .          DUMMY(INB+NCUTB,IY)=FIELD(IENDD,IY,IF,ISTR)
212       CONTINUE
211     CONTINUE
        DO 220 IY=0,NDYA+1
          DO 220 IX=0,NDXA+1
            FIELD(IX,IY,IF,ISTR)=DUMMY(IX,IY)
220     CONTINUE
C
500   CONTINUE
      RETURN
C
990   CONTINUE
      WRITE (6,*) 'ERROR IN SUBR. INDMPI: THIS SUBR. IS VALID ONLY'
      WRITE (6,*) 'NCUTB>=0 BUT NCUTB = ',NCUTB
      CALL EXIT
991   WRITE (6,*) 'ERROR IN SUBR. INDMPI: INCONSISTENCY IN NUMBER OF'
      WRITE (6,*) 'ZONES PER CUT FROM LINDA GEOMETRY DETECTED. '
      WRITE (6,*) 'NCUTL = ',NCUTL, ' IENDD-IINID+1 = ',IENDD-IINID+1
      CALL EXIT
      END
C ===== SOURCE: infcop.f
C   THIS CODE SEGMENT CONTAINES VARIOUS SUBROUTINES NEEDED FOR
C   INTERFACING THE EIRENE CODE TO PLASMA FLUID CODES.
C   IT READS GEOMETRICAL DATA (MESHES) FROM FILE FT30
C   AND PRODUCES THE EIRENE INPUT DATA (BLOCK 2).
C   IT READS PLASMA BACKGROUND DATA FROM FILE (FT31) OR COMMON BLOCKS,
C   IT THEN PRODUCES INPUT DATA FOR EIRENE
C   INPUT BLOCK 5 (PLASMA DATA) AND BLOCK 7 (SURFACE RECYCLING SOURCES)
C
C
C   THIS PARTICULAR VERSION LINKS EIRENE TO THE B2   2D MULTIFLUID EDGE
C   PLASMA TRANSPORT CODE.
C
C   IT WAS WRITTEN BY D.REITER AND P.BOERNER, KFA-JUELICH
C   E-MAIL: D.REITER @ KFA-JUELICH.DE
C
C
C
C   MOST OF THE FORTRAN IN THIS CODE SEGMENT HAS BEEN DEVELOPED
C   UNDER KFA-NET CONTRACT NO. 428/90-8/FU-D
C
C   FINAL REPORT BY: D.REITER(1), P.BOERNER(1), B.KUEPPERS(1),
C                    M.BAELMANS(2) AND G.P.MADDISON(3)
C                    (1992)
C   1): KFA-JUELICH GMBH
C   2): UNIV. LEUVEN, ERM, KFA-JUELICH
C   3): AEA TECHNOLOGY, FUSION, CULHAM, UKAEA FUSION ASSOCIATION
C
*DK COUPLE
C
      SUBROUTINE INFCOP
C
C
C     THIS SUBROUTINE DEFINES THE PLASMA MODEL IN CASE OF A COUPLED
C     NEUTRAL-PLASMA CALCULATION
C
C     THE ENTRY "IF0COP" RECEIVES GEOMETRICAL INPUT DATA FROM AN
C     EXTERNAL FILE (E.G. OTHER PLASMA CODES)
C     AND PREPARES THEM FOR AN EIRENE RUN
C
C     THE ENTRY "IF1COP" RECEIVES PLASMA INPUT DATA FROM AN
C     EXTERNAL FILE (E.G. OTHER PLASMA CODES)
C     AND PREPARES THEM FOR AN EIRENE RUN
C
C     THE ENTRY "IF2COP" PREPARES THE SOURCE SAMPLING DISTRIBUTION
C     FROM THE EXTERNAL DATA, AND MAY OVERWRITE OTHER INPUT
C     DATA FROM BLOCKS 1 TO 13 AS WELL
C
C     THE ENTRIES "IF3COP, IF4COP" RETURN  RESULTS TO AN EXTERNAL FILE
C
C
C
      USE PRECISION
      USE PARMMOD
      USE BRASPOI
      USE COMUSR
      USE CESTIM
      USE CADGEO
      USE CCONA
      USE CLOGAU
      USE CPLOT
      USE CINIT
      USE CPOLYG
      USE CGRID
      USE CZT1
      USE CTRCEI
      USE CCOUPL
      USE CGEOM
      USE CSDVI
      USE CSDVI_BGK
      USE CSDVI_COP
      USE CTETRA
      USE COMPRT
      USE COMNNL
      USE COMSOU
      USE CSTEP
      USE CTEXT
      USE CLGIN
      USE COUTAU
      USE COMXS
      USE CSPEI
      USE CTRIG
      USE module_avltree

      IMPLICIT NONE

      TYPE(CELLSIM), POINTER :: CPSIM
      TYPE(CELLMUL), POINTER :: CPMUL
C
      REAL(DP) :: SCALN(0:NFL)
      REAL(DP) :: DI(NPLS), VP(NPLS)
C
      REAL(DP) :: PUX(NRAD),PUY(NRAD),PVX(NRAD),PVY(NRAD),
     R          TORL(NSTRA,NGITT),EFLX(NSTRA),
     R          DUMMY(0:NDXP,0:NDYP),
     R          ESHT(NSTEP,NGITT),ORI(NSTEP,NGITT),
     R          SFNIT(0:NSTEP),SFEIT(0:NSTEP),
     R          SFEET(0:NSTEP),SHEAE(0:NSTEP),SHEAI(0:NSTEP)
      INTEGER, ALLOCATABLE, SAVE :: NRWL(:)
C
      LOGICAL :: LSHORT, LSTOP, LSTP

      INTEGER :: NBRICK, NQUAD, NLINE
      COMMON /CINTFA/ NBRICK, NQUAD, NLINE

      INTEGER, ALLOCATABLE :: NODQUAD(:,:), NODLINE(:,:)

      INTEGER, ALLOCATABLE :: IHELP(:), NOSTS(:), NLNSTS(:), NOSPEC(:)
      REAL(DP) :: TIS(NPLS),DIS(NPLS),VXS(NPLS),VYS(NPLS),VZS(NPLS)
      REAL(SP) :: PARM(16)
      INTEGER :: ITSIDE(3,4)

      REAL(DP) :: EMAXW, ESUM, ETOT, EADD, PERWI, PARWI, FLX, FLXI, 
     .          VPX, VPY, GAMMA, SHEATH, VT, PN1, VTEST, VR, DRR,
     .          PERW, PARW, CS, CUR, X1, Y1, Z1, X2, Y2, Z2, PHI1, PHI2,
     .          STEP, THMAX, BXS, BYS, BZS, PM1, TE, VPZ,
     .          EEMAX, RP1, OR, EESHT, V, T, TES, VL, XCO, YCO, ZCO,
     .          DIST, DIST1, DIST2, DIST3, BVAC
      INTEGER :: IFIRST, NREC11, NDXY, NR1STQ, ISTRAI, IY, IRC, NFALSE,
     .           JC, J, NDXYM, NDYAM, NDXAM, N1, N2, N3IN, N3EN, ITFAL,
     .           IAOT, IAIN, IR, IP, IR1, IP1, K, MPER, N3, NT, IERROR,
     .           IPL, IMODE, IFRST, ITARG, INEW, IOLD,
     .           N1EN, N1IN, N2EN, N2IN, IPRT, NDZA, I, NTGPRI, IT, 
     .           IEPLS, I4, IIPLS, IG, NPES, ITRI, NTACT, IN, NTOLD, IS,
     .           ISTS, IC, IDU, I1, I2, I3, NOD, NTT, IEL, NLN, 
     .           NQU, IQ, IMATCH, JTRI, JS, IP2, JP1, JP2, ISP, JSP,
     .           MINIS, MAXIS, MINJS, MAXJS, ICO, ICOLUMN, IANF, NREAD
      INTEGER :: INDCO(9),INDF1(3),INDF2(3),INDF3(3),INDF4(3),INDF5(3),
     .           INDF6(3)
      INTEGER, INTENT(IN) :: ISTRAA, ISTRAE, NEW_ITER
      INTEGER, EXTERNAL :: IDEZ
      REAL, ALLOCATABLE :: TEF(:),DENF(:,:)
C
      CHARACTER(72) :: ZEILE, NAMENT, SPECNAME
      CHARACTER(10) :: CHR, FORM
      CHARACTER(6) :: CITARG
      CHARACTER(72), ALLOCATABLE :: ENTITY(:)
      CHARACTER(1000) :: LINE
      LOGICAL, ALLOCATABLE :: LUSED(:)
      TYPE(TRI_ELEM), POINTER :: CURR, CUR2
C
C
      DATA ITSIDE /1,2,3,
     .             1,4,2,
     .             2,4,3,
     .             3,4,1/
C
      SAVE
C
      ENTRY IF0COP
C
      LSHORT=.FALSE.
C
      GOTO 99990
C
C  TO INITALIZE THE SHORT CYCLING, THE GEOMETRY HAS TO BE
C  DEFINED ONCE (ENTRY: INTER0)
C
      ENTRY INTER0
      LSHORT=.TRUE.
99990 CONTINUE
C
      IERROR=0
C
      IMODE=IABS(NMODE)
C
      IF (.NOT.LSHORT.AND.ITIMV.LE.1) THEN
        WRITE (6,*) '        SUBROUTINE INFCOP IS CALLED  '
C  READ INPUT DATA OF BLOCK 14
C  SAVE INPUT DATA OF BLOCK 14 FOR SHORT CYCLE ON COMMON CCOUPL
        CALL LEER(1)
        CALL ALLOC_CCOUPL(1)
        READ (IUNIN,'(5L1)') LSYMET,LBALAN
        IF (TRCINT)
     .  WRITE (6,*) ' LSYMET,LBALAN = ',LSYMET,LBALAN
        DO 20 IPL=1,NPLSI
          READ (IUNIN,'(2I6,2E12.4)') I,IFLB(IPL),FCTE(IPL),BMASS(IPL)
          IF (TRCINT)
     .    WRITE (6,*) IPL,IFLB(IPL),FCTE(IPL),BMASS(IPL)
20      CONTINUE
C  NUMBER OF DIFFERENT ENTITIES: NTARGI
        READ (IUNIN,'(I6)') NTARGI
        WRITE (6,*) '        NTARGI= ',NTARGI
        CALL LEER(1)
        IF (NTARGI.GT.NSTEP) THEN
          CALL MASPRM ('NSTEP',5,NSTEP,'NTARGI',6,NTARGI,IERROR)
          WRITE (6,*) 'EXIT CALLED FROM SUBR. INFCOP '
          CALL EXIT
        ENDIF
        ALLOCATE (NOSTS(NTARGI))
        ALLOCATE (ENTITY(NTARGI))
        DO 30 IT=1,NTARGI
          READ (IUNIN,'(2I6,1X,A72)') I,NOSTS(IT),NAMENT
          ENTITY(IT)=ADJUSTL(TRIM(NAMENT))
          CALL UPPERCASE (ENTITY(IT))
          IF (TRCINT)
     .      WRITE (6,'(2I6,1X,A72)') IT,NOSTS(IT),ENTITY(IT)
          IF (TRCINT) CALL LEER(1)
30      CONTINUE
C  READ ADDITIONAL DATA TO BE TRANSFERRED FROM FIDAP INTO EIRENE
C  HERE: FIDAP VOLUME TALLIES
        READ (IUNIN,'(I6)') NAINB
        WRITE (6,*) '        NAINI = ',NAINB
        IF (NAINB.GT.NAIN) THEN
          CALL MASPRM ('NAIN',4,NAIN,'NAINB',5,NAINB,IERROR)
          WRITE (6,*) 'EXIT CALLED FROM SUBR. INFCOP '
          CALL EXIT
        ENDIF
        IF (TRCINT.AND.NAINB.GT.0)
     .      WRITE (6,*) 'I,NAINS(IAIN),NAINT(IAIN)'
        DO 40 IAIN=1,NAINB
          READ (IUNIN,'(6I6)') I,NAINS(IAIN),NAINT(IAIN)
          READ (IUNIN,'(A72)') TXTPLS(IAIN,12)
          READ (IUNIN,'(2A24)') TXTPSP(IAIN,12),TXTPUN(IAIN,12)
          IF (TRCINT) THEN
            WRITE (6,'(6I6)') I,NAINS(IAIN),NAINT(IAIN)
            WRITE (6,'(1X,A72)') TXTPLS(IAIN,12)
            WRITE (6,'(1X,2A24)') TXTPSP(IAIN,12),TXTPUN(IAIN,12)
          ENDIF
40      CONTINUE
C  READ ADDITIONAL DATA TO BE TRANSFERRED FROM EIRENE INTO FIDAP
C  HERE: EIRENE SURFACE TALLIES
        READ (IUNIN,'(I6)') NAOTB
        WRITE (6,*) '        NAOTI = ',NAOTB
        IF (NAOTB.GT.NLIMPS) THEN
          CALL MASPRM ('NLIMPS',6,NLIMPS,'NAOTB',5,NAOTB,IERROR)
          WRITE (6,*) 'EXIT CALLED FROM SUBR. INFCOP '
          CALL EXIT
        ENDIF
        IF (TRCINT.AND.NAOTB.GT.0)
     .      WRITE (6,*) 'I,NAOTS(IAOT),NAOTT(IAOT)'
        DO 50 IAOT=1,NAOTB
          READ (IUNIN,'(6I6)') I,NAOTS(IAOT),NAOTT(IAOT)
          IF (TRCINT) THEN
            WRITE (6,'(6I6)') I,NAOTS(IAOT),NAOTT(IAOT)
          ENDIF
50      CONTINUE
      ENDIF
C
C READING BLOCK 14 FROM FORMATTED INPUT FILE (IUNIN) FINISHED
C
C SAVE SOME MORE INPUT DATA FOR SHORT CYCLE ON COMMON CCOUPL
      LNLPLG=NLPLG
      LNLDRF=NLDRFT
      LTRCFL=TRCFLE
      NSTRI=NSTRAI
      DO 60 ISTRA=1,NSTRAI
        LNLVOL(ISTRA)=NLVOL(ISTRA)
60    CONTINUE
      NMODEI=NMODE
      NFILNN=NFILEN
C
C  DEFINE ADDITIONAL TALLIES FOR COUPLING (UPDATED IN SUBR. UPTCOP
C                                              AND IN SUBR. COLLIDE)
      NCPVI=NPLSI
      IF (NCPVI.GT.NCPV) THEN
        WRITE (6,*) 'FROM INTERFACING SUBROUTINE INFCOP: '
        CALL MASPRM('NCPV',4,NCPV,'NCPVI',5,NCPVI,IERROR)
        CALL EXIT
      ENDIF
      DO 70 IPLS=1,NPLSI
        ICPVE(IPLS)=1
        ICPRC(IPLS)=1
        TXTTAL(IPLS,NTALM)=
     .  'ENERGY WEIGHTED CX RATE OF ATOMS WITH IPLS                  '
        TXTSPC(IPLS,NTALM)=TEXTS(NSPAMI+IPLS)
        TXTUNT(IPLS,NTALM)='AMP                       '
C
        ICPVE(NPLSI+IPLS)=3
        ICPRC(NPLSI+IPLS)=1
        TXTTAL(NPLSI+IPLS,NTALM)=
     .  'PAR. MOM. SOURCE, FROM ATOMS, FOR IPLS             '
        TXTSPC(NPLSI+IPLS,NTALM)=TEXTS(NSPAMI+IPLS)
        TXTUNT(NPLSI+IPLS,NTALM)='G*CM/S* AMP * CM**-3       '
C
        ICPVE(2*NPLSI+IPLS)=3
        ICPRC(2*NPLSI+IPLS)=2
        TXTTAL(2*NPLSI+IPLS,NTALM)=
     .  'PAR. MOM. SOURCE, FROM MOLECULES, FOR IPLS         '
        TXTSPC(2*NPLSI+IPLS,NTALM)=TEXTS(NSPAMI+IPLS)
        TXTUNT(2*NPLSI+IPLS,NTALM)='G*CM/S* AMP * CM**-3       '
C
        ICPVE(3*NPLSI+IPLS)=3
        ICPRC(3*NPLSI+IPLS)=3
        TXTTAL(3*NPLSI+IPLS,NTALM)=
     .  'PAR. MOM. SOURCE, FROM TEST IONS, FOR IPLS         '
        TXTSPC(3*NPLSI+IPLS,NTALM)=TEXTS(NSPAMI+IPLS)
        TXTUNT(3*NPLSI+IPLS,NTALM)='G*CM/S* AMP * CM**-3       '
C
70    CONTINUE
C
      OPEN (UNIT=29,ACCESS='SEQUENTIAL',FORM='FORMATTED')
      REWIND 29
C
      OPEN (UNIT=30,ACCESS='SEQUENTIAL',FORM='FORMATTED')
      REWIND 30
C
C  READ IN DATA TO SET UP GEOMETRY FOR NEUTRAL GAS TRANSPORT CODE
C  STATEMENT NUMBER 1000 ---> 1999
C
C  AT PRESENT THE DATA COME FROM THE FILE FT30
C  THIS PART WILL HAVE TO BE MODIFIED AS SOON AS BRAAMS PROVIDES
C  CELL VERTICES AND CUT DESCRIBTION
C
1000  CONTINUE
C
      INMTI=0
      NTRII = 0
      NRKNOT = 0
      NECKE = 0
      NSEITE = 0
      NCHBAR = 0
      ncltet = 0
      ALLOCATE (COORTRI(NKNOT))
      DO I=1,NKNOT
        NULLIFY(COORTRI(I)%PTRI)
      END DO

      nr1p2 = nr1st
      np2t3 = np2nd
      nr1ori = nr1st
      np2ori = np2nd
      nt3ori = nt3rd

      CALL ALLOC_CSTEP

      RRSTEP(1:NTARGI,1) = 0.D0

      READ (30,'(A72)') ZEILE
      DO WHILE (INDEX(ZEILE,'NODAL COORDINATES') == 0)
         READ (30,'(A72)') ZEILE
      END DO

      DO IC=1,NKNOT
         READ (30,*) IDU,XTRIAN(IC),YTRIAN(IC)
      END DO
      NRKNOT=NKNOT

!  CONVERT TO CM 
      XTRIAN(1:NKNOT)=XTRIAN(1:NKNOT)*0.1_DP
      YTRIAN(1:NKNOT)=YTRIAN(1:NKNOT)*0.1_DP

      write (6,*) ' xmin = ',minval(xtrian(1:nrknot))
      write (6,*) ' xmax = ',maxval(xtrian(1:nrknot))
      write (6,*) ' ymin = ',minval(ytrian(1:nrknot))
      write (6,*) ' ymax = ',maxval(ytrian(1:nrknot))

      ALLOCATE (NODQUAD(9,NQUAD))
      ALLOCATE (NODLINE(3,NLINE))
      ALLOCATE (NLNSTS(NLINE))
      ALLOCATE (LUSED(NLINE))
      NODQUAD = 0
      NODLINE = 0
      NLNSTS = 0
      LUSED = .FALSE.

      NQU = 0
      NLN = 0

      READ (30,'(A72)') ZEILE
      DO WHILE (INDEX(ZEILE,'ELEMENT GROUPS') == 0)
         READ (30,'(A72)') ZEILE
      END DO

      DO
        READ (30,'(A72)',END=9) ZEILE
        I1 = INDEX(ZEILE,'ELEMENTS:')
        DO WHILE (I1 == 0)
          READ (30,'(A72)',END=9) ZEILE
          I1 = INDEX(ZEILE,'ELEMENTS:')
        END DO
        I2 = INDEX(ZEILE,'NODES:')
        I3 = INDEX(ZEILE,'GEOMETRY:')
        READ (ZEILE(I2+7:I3-1),*) NOD

        READ (ZEILE(I1+10:I2),*) NTT

        READ (30,'(A72)') ZEILE
        I1 = INDEX(ZEILE,'ENTITY NAME:')
        DO WHILE (I1 == 0)
          READ (30,'(A72)') ZEILE
          I1 = INDEX(ZEILE,'ENTITY NAME:')
        END DO
        
        NAMENT = ADJUSTL(TRIM(ZEILE(I1+12:)))
        CALL UPPERCASE(NAMENT)
        ISTS=0
        DO IT=1,NTARGI
          IF (ENTITY(IT) == NAMENT) ISTS=NOSTS(IT)
        END DO
        
        IF (NOD == 9) THEN
! READ COORDINATE NUMBERS OF QUADRILATERALS
          DO IEL=1,NTT
            NQU = NQU + 1
            READ (30,*) IDU,(NODQUAD(J,NQU),J=1,NOD)
          END DO
        ELSE IF (NOD == 3) THEN
! READ COORDINATE NUMBERS OF BOUNDARY LINES
          DO IEL=1,NTT
            NLN = NLN + 1
            READ (30,*) IDU,(NODLINE(J,NLN),J=1,NOD)
            CALL BUBBLE (NODLINE(1:NOD,NLN),NOD)
            NLNSTS(NLN) = ISTS
          END DO
        ELSE
          EXIT
        END IF
         
      END DO

 9    CONTINUE
      NTACT=0
      DO I=1,NQUAD
        INDCO = NODQUAD(:,I)
C  SET UP TRIANGLES
        CALL MAKE_TRIAS (INDCO)
        
        ncell=NCELL+1
        ncltAL(ntact+1:ntrii) = ncell
        
        INDF1 = (/ INDCO(1), INDCO(2), INDCO(3) /)
        CALL BUBBLE (INDF1,3)
        INDF2 = (/ INDCO(3),  INDCO(4),  INDCO(5) /)
        CALL BUBBLE (INDF2,3)
        INDF3 = (/ INDCO(5),  INDCO(6),  INDCO(7) /)
        CALL BUBBLE (INDF3,3)
        INDF4 = (/ INDCO(7),  INDCO(8),  INDCO(1) /)
        CALL BUBBLE (INDF4,3)

        IMATCH=0
        DO IQ=1,NLINE
          IF (INDF1(1) == NODLINE(1,IQ)) THEN
            IF (ALL(INDF1 == NODLINE(:,IQ))) THEN
              INMTI(1,NTACT+1) = NLNSTS(IQ)
              INMTI(1,NTACT+2) = NLNSTS(IQ)
              LUSED(IQ) = .TRUE.
              IMATCH = IMATCH + 1
            END IF
          END IF
          IF (INDF2(1) == NODLINE(1,IQ)) THEN
            IF (ALL(INDF2 == NODLINE(:,IQ))) THEN
              INMTI(1,NTACT+3) = NLNSTS(IQ)  
              INMTI(1,NTACT+4) = NLNSTS(IQ) 
              LUSED(IQ) = .TRUE.
              IMATCH = IMATCH + 1
            END IF
          END IF
          IF (INDF3(1) == NODLINE(1,IQ)) THEN
            IF (ALL(INDF3 == NODLINE(:,IQ))) THEN
              INMTI(1,NTACT+5) = NLNSTS(IQ)
              INMTI(1,NTACT+6) = NLNSTS(IQ)
              LUSED(IQ) = .TRUE.
              IMATCH = IMATCH + 1
            END IF
          END IF
          IF (INDF4(1) == NODLINE(1,IQ)) THEN
            IF (ALL(INDF4 == NODLINE(:,IQ))) THEN
              INMTI(1,NTACT+7) = NLNSTS(IQ) 
              INMTI(1,NTACT+8) = NLNSTS(IQ) 
              LUSED(IQ) = .TRUE.
              IMATCH = IMATCH + 1
            END IF
          END IF
          IF (IMATCH == 4) EXIT
        END DO 

        ntact=ntrii

      END DO

      IF (.NOT.ALL(LUSED)) THEN
        WRITE (6,*) ' SURFACES WITHOUT MATCHING LINE FOUND IN IF0COP '
        DO IQ=1,NLINE
          IF (.NOT.LUSED(IQ)) WRITE (6,*) IQ
        END DO
        CALL EXIT
      END IF

      DO ITRI=1,NTRII    ! FOR ALL TRIANGLES
        DO IS=1,3        ! AND FOR ALL SIDES OF EACH TRIANGLE    
          IF (NCHBAR(IS,ITRI) == 0) THEN  ! IF IT HAS NO NEIGHBOR JET
            ISP=IS+1
            IF (ISP == 4) ISP = 1
            IP1=NECKE(IS,ITRI)
            IP2=NECKE(ISP,ITRI)
            MINIS=MIN(IP1,IP2)
            MAXIS=MAX(IP1,IP2)
            CURR => COORTRI(IP1)%PTRI
            DO WHILE (ASSOCIATED(CURR))
              JTRI = CURR%NOTRI
              IF (JTRI /= ITRI) THEN  ! OMIT TRIANGLE ITRI
                DO JS =1,3            ! CHECK ALL SIDES
                  JSP=JS+1
                  IF (JSP == 4) JSP = 1
                  JP1=NECKE(JS,JTRI)
                  JP2=NECKE(JSP,JTRI)
                  MINJS=MIN(JP1,JP2)
                  MAXJS=MAX(JP1,JP2)
                  IF ((MINIS == MINJS) .AND. (MAXIS == MAXJS)) THEN
                    NCHBAR(IS,ITRI) = JTRI  ! NEIGHBOR FOUND
                    NSEITE(IS,ITRI) = JS
                    NCHBAR(JS,JTRI) = ITRI
                    NSEITE(JS,JTRI) = IS
                    EXIT
                  END IF
                END DO ! JS
              END IF
              CURR => CURR%NEXT_TRI
            END DO  ! WHILE
          END IF
        END DO
      END DO

      DO IC=1,NRKNOT
        CURR => COORTRI(IC)%PTRI
        DO WHILE (ASSOCIATED(CURR))
          CUR2 => CURR
          CURR => CURR%NEXT_TRI
          DEALLOCATE(CUR2)
        END DO
        NULLIFY(COORTRI(IC)%PTRI)
      END DO

      IMATCH = 0
      DO ITRI=1,NTRII
        DO IS=1,3
          IF ((NCHBAR(IS,ITRI) == 0) .AND. (INMTI(IS,ITRI) == 0)) THEN
            WRITE (6,*) ' NO NEIGHBOR AND NO BOUNDARY',
     .                  ' CONDITION ON ITRI = ',
     .                    ITRI,' SIDE ',IS
            IMATCH = IMATCH + 1
          END IF
        END DO
      END DO

      IF (IMATCH > 0) CALL EXIT

      DEALLOCATE (NODQUAD)
      DEALLOCATE (NODLINE)
      DEALLOCATE (NLNSTS)
      DEALLOCATE (LUSED)

C
C
C  TRANSFER FLAGS
C
      NAINI=NAINB
C
C
      NLPLG=.FALSE.
      NLFEM=.TRUE.
      LEVGEO=4
      NR1ST=NTRII+1
      NLPOL=.FALSE.
      NP2ND=1
      NLTOR=.FALSE.
      NT3RD=1
      NR1TAL=NCLTAL(NTRII)+1
      NP2TAL=NP2ND
      NT3TAL=NT3RD

      DO IN=NR1ST,NR1ST+NRADD
        NCLTAL(IN)=NCLTAL(NTRII)+IN-NTRII
      ENDDO

      CALL LEER(2)
      CALL HEADNG(' CASE REDEFINED IN COUPLE_TETRA: ',32)
      WRITE (6,*) 'NLPLG,NLFEM ',NLPLG,NLFEM
      WRITE (6,*) 'NLPOL       ',NLPOL
      WRITE (6,*) 'NR1ST,NP2ND ',NR1ST,NP2ND
      CALL LEER(2)
CTRIG E
C
      RETURN
C
C   GEOMETRY DEFINITION PART FINISHED
C
      ENTRY IF1COP
C
C   NOW READ THE PLASMA STATE GIVEN BY BRAAMS
C   AT PRESENT THE DATA COME FROM THE FILE FT31
C   FURTHERMORE: SCALING TO EIRENE UNITS AND INDEX MAPPING
C   STATEMENT NO. 2000 ---> 2999
C
C  IN CASE OF "SHORT CYCLE" THE PLASMA STATE IS TRANSFERRED VIA COMMON
C
      LSHORT=.FALSE.
      CALL LEER(1)
      WRITE (6,*) 'IF1COP CALLED '
      IF (NLPLAS) WRITE (6,*) 'PLASMA DATA EXPECTED ON BRAEIR'
      IF (.NOT.NLPLAS) WRITE (6,*) 'PLASMA DATA EXPECTED ON FORT.31'
C  SKIP READING PLASMA, IF NLPLAS
      IF(NLPLAS) GOTO 2100
C
      GOTO 99991
C
C  IN CASE OF "SHORT CYCLE" OR TIME DEP. MODE
C  THE PLASMA STATE IS TRANSFERRED VIA COMMON
C  ONLY SCALING TO EIRENE UNITS AND INDEX MAPPING NEEDS TO BE DONE HERE
C
      ENTRY INTER1
      LSHORT=.TRUE.
      GOTO 2100
C
99991 CONTINUE
C
C
C  TRANSFER PROFILES
C
      IF (.NOT.(INDPRO(1).EQ.6.OR.INDPRO(2).EQ.6.OR.INDPRO(3).EQ.6.OR.
     .          INDPRO(4).EQ.6)) RETURN
C
C
      IF (NFLA.GT.NFL) THEN
        WRITE (6,*) ' PARAMETER ERROR DETECTED IN INFCOP '
        WRITE (6,*) ' NFLA MUST BE <= NFL'
        WRITE (6,*) ' NFLA,NFL = ',NFLA,NFL
        CALL EXIT
      ENDIF

2100  CONTINUE
C
C  RESET 2D ARRAYS ONTO 1D EIRENE ARRAYS, RESCALE TO EIRENE UNITS
C  AND CONVERT BRAAMS VECTORS INTO CARTHESIAN EIRENE VECTORS
C
C  UNITS CONVERSION FACTORS
      T=1._DP/11600._DP
      V=1.
      VL=1.
CTRIG A
> C  VACCUM DATA NEEDED FOR REGION OUTSIDE B2-MESH
>       TVAC=0.02
>       DVAC=1.E2_DP
>       VVAC=0.
>       BVAC=1.
> CTRIG E
      DO 2105 IPLS=1,NPLSI
        D(IPLS)=FCTE(IPLS)*1.E-6_DP
        FL(IPLS)=FCTE(IPLS)
2105  CONTINUE
C
      ALLOCATE (TEF(NKNOT))
      ALLOCATE (DENF(0:NPLSI,NKNOT))
      ALLOCATE (NOSPEC(NPLSI))
      ALLOCATE (LUSED(NPLSI))

      OPEN (UNIT=31,ACCESS='SEQUENTIAL',FORM='FORMATTED')
      REWIND 31
      READ (31,'(A1000)') LINE

      ICOLUMN = 0
      IANF = 1
      NOSPEC = 0
      FORM='(A       )'
      LUSED=.FALSE.
      DO IPLS=1,NPLSI
        IF (LEN_TRIM(CDENMODEL(IPLS)) > 0) LUSED(IPLS)=.TRUE.
      END DO
      DO 
!  POSITION OF NEXT NON-BLANK CHARACTER
        I1 = VERIFY(LINE(IANF:),' ')
        IF (I1 == 0) EXIT
        I2 = INDEX(LINE(IANF+I1:),' ')
        ICOLUMN=ICOLUMN+1
        IF (ICOLUMN > 6) THEN
          IF (I2 < 10) THEN
            WRITE (FORM(3:3),'(I1)') I2
          ELSE
            WRITE (FORM(3:4),'(I2)') I2
          END IF
          SPECNAME=REPEAT(' ',72)
          READ(LINE(IANF+I1-1:IANF+I1+I2-2),FORM) SPECNAME(1:i2)
          SPECNAME=TRIM(SPECNAME)
          CALL UPPERCASE (SPECNAME)
          DO IPLS=1,NPLSI
            IF (SPECNAME == TEXTS(NSPAMI+IPLS)) THEN
              IF (NOSPEC(IPLS) == 0) THEN
                NOSPEC(IPLS) = ICOLUMN-6
                LUSED(IPLS)=.TRUE.
              ELSE
                WRITE (6,*) ' ERROR! SPECIES ',SPECNAME,' FOUND TWICE '
              END IF
              EXIT
            END IF
          END DO
        END IF
        IANF=IANF+I1+I2-1
      END DO
      
     IF (.NOT. ALL(LUSED)) THEN
        WRITE (6,*) ' ERROR DETECTED IN INFCOP! '
        WRITE (6,*) ' BULK PARTICLE DEFINITION IN EIRENE INPUT DOES NOT'
        WRITE (6,*) ' MATCH SPECIFICATIONS IN FIDAP PLASMA FILE '
        WRITE (6,*) ' CALCULATION ABANDONNED '
        CALL EXIT
      END IF

      NREAD=COUNT(NOSPEC>0)
      DO IC=1,NKNOT
        READ (31,'(A1000)') LINE
        READ (LINE,*) ICO,XCO,YCO,ZCO,TEF(IC),
     .                (DENF(IPLS,IC),IPLS=0,NREAD)
      END DO

      TEINTF=TVAC
      TIINTF=TVAC
      DIINTF=DVAC
      DO ITRI=1,NTRII
        DIST1=1._DP/SQRT((XTRIAN(NECKE(1,ITRI))-XCOM(ITRI))**2+
     .                   (YTRIAN(NECKE(1,ITRI))-YCOM(ITRI))**2)
        DIST2=1._DP/SQRT((XTRIAN(NECKE(2,ITRI))-XCOM(ITRI))**2+
     .                   (YTRIAN(NECKE(2,ITRI))-YCOM(ITRI))**2)
        DIST3=1._DP/SQRT((XTRIAN(NECKE(3,ITRI))-XCOM(ITRI))**2+
     .                   (YTRIAN(NECKE(3,ITRI))-YCOM(ITRI))**2)
        DIST=DIST1+DIST2+DIST3
        TEINTF(ITRI) = T*(TEF(NECKE(1,ITRI))*DIST1 + 
     .                    TEF(NECKE(2,ITRI))*DIST2 +
     .                    TEF(NECKE(3,ITRI))*DIST3)/DIST
!  STORE ELECTRON DENSITY ONTO ADINTF(NAIN) FOR TRANSFER INTO SUBR. PLAUSR        
        ADINTF(NAIN,ITRI) = 1.E-6_DP*
     .                      (DENF(0,NECKE(1,ITRI))*DIST1 + 
     .                       DENF(0,NECKE(2,ITRI))*DIST2 +
     .                       DENF(0,NECKE(3,ITRI))*DIST3)/DIST
        DO IPLS=1,NPLSI
          IPL=NOSPEC(IPLS)
          IF (IPL == 0) CYCLE
          TIINTF(IPLS,ITRI) = TEINTF(ITRI)
          DIINTF(IPLS,ITRI) = D(IPLS)*
     .                       (DENF(IPL,NECKE(1,ITRI))*DIST1 + 
     .                        DENF(IPL,NECKE(2,ITRI))*DIST2 +
     .                        DENF(IPL,NECKE(3,ITRI))*DIST3)/DIST
        END DO
      END DO
      write (6,*) ' temax = ',maxval(teintf(1:ntrii))
      write (6,*) ' temin = ',minval(teintf(1:ntrii))

      DEALLOCATE (TEF)
      DEALLOCATE (DENF)
      DEALLOCATE (NOSPEC)
      DEALLOCATE (LUSED)
C
C
      RETURN
C
2999  CONTINUE
C
C  PLASMA PROFILES ARE NOW READ IN
C
      ENTRY IF2COP(ITARG)
      IF (ITARG.GT.NTARGI) THEN
        CALL LEER(1)
        WRITE (6,*) 'SOURCE DATA FOR STRATUM ISTRA= ',ITARG
        WRITE (6,*) 'CANNOT BE DEFINED IN IF2COP. CHANGE INDSRC(ISTRA)'
        CALL LEER(1)
        RETURN
      ENDIF
C
C  NEXT DEFINE FLUXES, TEMPERATURES AND VELOCITIES AT THE TARGETS
C  (FLUXES IN AMP/(CM ALONG TARGET), TEMPERATURES IN EV, VELOCITIES IN CM/SEC)
C   FNIXB*FL (FNIYB*FL) ARE GIVEN IN AMP
C  STATEMENT NO 3000 ---> 3999
C
3000  CONTINUE
C
      TESTEP(ITARG,:)=0.D0
      TISTEP(:,ITARG,:)=0.D0
      DISTEP(:,ITARG,:)=0.D0
      VXSTEP(:,ITARG,:)=0.D0
      VYSTEP(:,ITARG,:)=0.D0
      VZSTEP(:,ITARG,:)=0.D0
      FLSTEP(:,ITARG,:)=0.D0
      DO IG=1,NRWL(ITARG)
        IN=IRSTEP(ITARG,IG)
        TESTEP(ITARG,IG)=TEINTF(IN)
        TISTEP(1:NPLSI,ITARG,IG)=TIINTF(1:NPLSI,IN)
        DISTEP(1:NPLSI,ITARG,IG)=DIINTF(1:NPLSI,IN)
        VXSTEP(1:NPLSI,ITARG,IG)=VXINTF(1:NPLSI,IN)
        VYSTEP(1:NPLSI,ITARG,IG)=VYINTF(1:NPLSI,IN)
        VZSTEP(1:NPLSI,ITARG,IG)=VZINTF(1:NPLSI,IN)
        FLSTEP(1:NPLSI,ITARG,IG)=1.D0
      END DO
      nrwl(itarg)=nrwl(itarg)+1
C
      IF (TRCSOU) CALL LEER(2)
C
C  INITALIZE FUNCTION STEP (FOR RANDOM SAMPLING ALONG TARGET)
C  SET SOME SOURCE PARAMETERS EXPLICITLY TO ENFORCE INPUT CONSISTENCY
C
      IIPLS=1
      IEPLS=NPLSI
      FLUX(ITARG)=STEP(IIPLS,IEPLS,NRWL(ITARG),ITARG)
C
      NLPLS(ITARG)=.TRUE.
      NLATM(ITARG)=.FALSE.
      NLMOL(ITARG)=.FALSE.
      NLION(ITARG)=.FALSE.
C
      NLSRF(ITARG)=.TRUE.
      NLPNT(ITARG)=.FALSE.
      NLLNE(ITARG)=.FALSE.
      NLVOL(ITARG)=.FALSE.
      NLCNS(ITARG)=.FALSE.
C
      NSRFSI(ITARG)=1
      INDIM(1,ITARG)=4
      I4=IDEZ(INT(SORLIM(1,ITARG)),4,4)
      SORLIM(1,ITARG)=I4*1000+104
      SORIND(1,ITARG)=ITARG
C  IN CASE INDIM=4: INSOR,INDGRD... ARE REDUNDANT
      NRSOR(1,ITARG)=-1
      NPSOR(1,ITARG)=-1
      IF (INDSRC(ITARG).LT.6) THEN
        WRITE (6,*) 'MESSAGE FROM IF2COP: '
        WRITE (6,*) 'SOURCE STRENGTH AND SPATIAL DISTRIBUTION FOR '
        WRITE (6,*) 'STRATUM ',ISTRA,' MODIFIED.'
        CALL MASR1('FLUX=   ',FLUX(ISTRA))
        WRITE (6,*) 'USE STEP FUNCTION ISTEP= ',ITARG,' FROM BLOCK 14'
      ENDIF
C
      IF (INDSRC(ITARG).EQ.6) THEN
C  DEFINE SOURCE FOR TARGET RECYCLING STRATUM ITARG
C  ASSUME NOW: ITARG=ISTRA
C  DEFAULTS ARE ALREADY SET IN SUBR. INPUT.
C
        CALL FTCRI(ITARG,CITARG)
        TXTSOU(ITARG)= 'SURFACE RECYCLING SOURCE NO.'//CITARG
        NPTS(ITARG)=NPTC(ITARG,1)
        NINITL(ITARG)=ITARG*1001
        NSPEZ(ITARG)=-1
        SORIFL(1,ITARG)=NIFLG(ITARG,1)
        SORWGT(1,ITARG)=1.
        IF (NIXY(ITARG,1).EQ.1) THEN
C TARGET RECYCLING SOURCE AT POLOIDAL SURFACE NPES
          NEMODS(ITARG)=3
          NAMODS(ITARG)=1
          SORENI(ITARG)=3.
          SORENE(ITARG)=0.5
        ELSEIF (NIXY(ITARG,1).EQ.2) THEN
C WALL RECYCLING SOURCE AT RADIAL SURFACE NPES
          NEMODS(ITARG)=2
          NAMODS(ITARG)=1
          SORENI(ITARG)=2.
          SORENE(ITARG)=0.
        ENDIF
C
C  SORAD1,...: USE POLYGON MESH, IE. SORAD1,... ARE REDUNDANT.
C
C  VELOCITY SPACE DISTRIBUTION
        SORCOS(ITARG)=1.
        SORMAX(ITARG)=0.
C
C
C  DO 2028 LOOP FROM SUBR. INPUT
        THMAX=MAX(0.D0,MIN(PIHA,SORMAX(ITARG)*DEGRAD))
        IF (NAMODS(ITARG).EQ.1) THEN
          RP1=SORCOS(ITARG)+1.
          SORCOS(ITARG)=1./RP1
          IF (ABS(COS(THMAX)).LE.EPS10) THEN
            SORMAX(ITARG)=1.
          ELSE
            SORMAX(ITARG)=1.-COS(THMAX)**RP1
          ENDIF
        ELSEIF (NAMODS(ITARG).EQ.2) THEN
          SORCOS(ITARG)=SORCOS(ITARG)*DEGRAD
          SORMAX(ITARG)=THMAX
        ENDIF
        NLSYMT(0)=NLSYMT(0).AND.NLSYMT(ITARG)
        NLSYMP(0)=NLSYMP(0).AND.NLSYMP(ITARG)
C
      ENDIF
C
C  SOURCE DEFINITION FOR TARGET RECYCLING STRATUM ITARG COMPLETED
C
3999  CONTINUE
C
C  TARGET DATA ARE DEFINED NOW
C
      DO 5000 IG=1,NGITT
        ELSTEP(:,ITARG,IG)=0.
5000  CONTINUE
C
C  COMPUTE EXACT SURFACE ENERGY FLUXES FOR COMPARISON WITH SAMPLED
C  E-FLUX "ETOTP". THIS IS ONLY FOR DIAGNOSTICS PURPOSES
C  E.G. TO CHECK CONSISTENCY OF BOUNDARY CONDITIONS
C  STATEMENT NO. 6000 ---> 6500
C
      IF (.NOT.TRCSOU) GOTO 6500
C
      EEMAX=0.
      EESHT=0.
C
      DO 6011 IG=1,NRWL(ITARG)-1
        OR=ORI(ITARG,IG)
C  COMPUTE SHEATH POTENTIAL ESHT(ITARG,IG)
C  USE ALL NPLSI SPECIES, NOT JUST IFL=NSPZI,NSPZE
        ESHT(ITARG,IG)=0.D0
        IF (NEMODS(ITARG).EQ.3.OR.NEMODS(ITARG).EQ.5.OR.
     .      NEMODS(ITARG).EQ.7) THEN
          IF (IGSTEP(ITARG,IG).GT.200000) THEN
            ITRI=IRSTEP(ITARG,IG)
            NPES=IGSTEP(ITARG,IG)-200000
            DO 6005 IPL=1,NPLSI
              PM1=(PTRIX(NPES,ITRI)*VXSTEP(IPL,ITARG,IG)+
     .             PTRIY(NPES,ITRI)*VYSTEP(IPL,ITARG,IG))*OR
              VPZ=VZSTEP(IPL,ITARG,IG)
              VP(IPL)=SQRT(PM1**2+VPZ**2)
              DI(IPL)=DISTEP(IPL,ITARG,IG)
6005        CONTINUE
            TE=TESTEP(ITARG,IG)
            CUR=0.
            GAMMA=0.
            ESHT(ITARG,IG)=SHEATH(TE,DI,VP,NCHRGP,GAMMA,CUR,NPLSI,
     .                           -ITARG)
          ELSEIF (IGSTEP(ITARG,IG).LT.200000) THEN
            ITRI=IRSTEP(ITARG,IG)
            NPES=IGSTEP(ITARG,IG)-100000
            ESHT(ITARG,IG)= 0
          ENDIF
        ENDIF
C
        IF (IGSTEP(ITARG,IG).LT.200000) GOTO 6010
        ITRI=IRSTEP(ITARG,IG)
        NPES=IGSTEP(ITARG,IG)-200000
        DO 6009 IPLS=1,NPLSI
          IF (FLSTEP(IPLS,ITARG,IG).EQ.0.D0) GOTO 6009
          VT=SQRT(2.*TISTEP(IPLS,ITARG,IG)/BMASS(IPLS))*CVEL2A
C  VELOCITY COMPONENT NORMAL TO TARGET SURFACE
C  I.E., POLOIDAL COMPONENT V-POL
C  ASSUMING ORTHOGONAL TARGET
          PM1=(PTRIX(NPES,ITRI)*VXSTEP(IPLS,ITARG,IG)+
     .         PTRIY(NPES,ITRI)*VYSTEP(IPLS,ITARG,IG))*OR
C  VELOCITY COMPONENT PARALLEL TO TARGET SURFACE
C  I.E., RADIAL PLUS TOROIDAL COMPONENT, V-RAD + V-TOR
C  AGAIN: ASSUMING ORTHOGONAL TARGET
          VPX=VXSTEP(IPLS,ITARG,IG)-PM1*PPLNX(IY,NPES)*OR
          VPY=VYSTEP(IPLS,ITARG,IG)-PM1*PPLNY(IY,NPES)*OR
          VPZ=VZSTEP(IPLS,ITARG,IG)-0.
          PN1=SQRT(VPX**2+VPY**2+VPZ**2)
          PERW=0.
          PARW=0.
          IF (VT.GT.0.) THEN
            PERW=PM1/VT
            PARW=PN1/VT
          ENDIF
C
          CS=SQRT((1.*TISTEP(IPLS,ITARG,IG)+
     .                TESTEP(ITARG,IG))/BMASS(IPLS))*CVEL2A
C THE MACH NUMBER BOUNDARY CONDITION ONLY AFFECTS THE PARALLEL TO B
C MOMENTUM, I.E., NOT THE RADIAL VELOCITY
          VTEST=SQRT(PM1**2+VPZ**2)
          VTEST=VTEST/(CS+EPS60)
          VR=SQRT(VPX**2+VPY**2)
          WRITE (6,*) 'IPLS,ITARG,IG,MACH ',IPLS,ITARG,IG,VTEST
C         WRITE (6,*) 'POL., TOR., RAD. ',PM1,VPZ,VR
          CALL LEER(1)
C TARGET ENERGY FLUXES
          DRR=RRSTEP(ITARG,IG+1)-RRSTEP(ITARG,IG)
          IF (NEMODS(ITARG).EQ.1) THEN
            EADD=SORENI(ITARG)
          ELSEIF (NEMODS(ITARG).EQ.2.OR.NEMODS(ITARG).EQ.3) THEN
            EADD=SORENI(ITARG)*TISTEP(IPLS,ITARG,IG)+SORENE(ITARG)*
     .             TESTEP(ITARG,IG)
          ELSEIF (NEMODS(ITARG).GE.4) THEN
            PERWI=PERW/SQRT(BMASS(IPLS)/RMASSP(IPLS))
            PARWI=PARW/SQRT(BMASS(IPLS)/RMASSP(IPLS))
            EADD=EMAXW(TISTEP(IPLS,ITARG,IG),PERWI,PARWI)
          ENDIF
          ESUM=EADD*FLSTEP(IPLS,ITARG,IG)
          ELSTEP(IPLS,ITARG,IG)=ELSTEP(IPLS,ITARG,IG)+ESUM
          EEMAX=EEMAX+ESUM*DRR
C  ADD SHEATH ACCELERATION
          EADD=NCHRGP(IPLS)*ESHT(ITARG,IG)
          ESUM=EADD*FLSTEP(IPLS,ITARG,IG)
          EESHT=EESHT+ESUM*DRR
          ELSTEP(IPLS,ITARG,IG)=ELSTEP(IPLS,ITARG,IG)+ESUM
6009    CONTINUE
        GOTO 6011
6010    CONTINUE
C  TO BE WRITTEN
6011  CONTINUE
C
      CALL LEER(1)
      WRITE (6,*) 'TARGET DATA: TARGET NO. ITARG=ISTRA= ',ITARG
      WRITE (6,*) 'IG, ARC, P-FLUX, E-FLUX, TE, TI, SHEATH/TE'
      DO 6100 IG=1,NRWL(ITARG)-1
        WRITE (6,'(1X,I4,1P,6E11.3)')
     .             IG,RRSTEP(ITARG,IG),FLSTEP(0,ITARG,IG),
     .             ELSTEP(0,ITARG,IG),
     .             TESTEP(ITARG,IG),TISTEP(1,ITARG,IG),
     .             ESHT(ITARG,IG)/(TESTEP(ITARG,IG)+EPS60)
6100  CONTINUE
      WRITE (6,'(1X,I4,1P,1E11.3)') NRWL(ITARG),
     .                                 RRSTEP(ITARG,NRWL(ITARG))
      CALL MASR1 ('EEMAX    ',EEMAX)
      CALL MASR1 ('EESHT    ',EESHT)
C
      ETOT=EEMAX+EESHT
      EFLX(ITARG)=EEMAX+EESHT
      WRITE (6,*) 'PARTICLE FLUX(IPLS), IPLS=1,NPLSI '
      WRITE (6,'(1X,1P,6E12.4)') (FLTOT(ISPZ,ITARG),ISPZ=1,NPLSI)
      CALL LEER(1)
      WRITE (6,*) 'ENERGY FLUX '
      WRITE (6,'(1X,1P,1E12.4)') EFLX(ITARG)
      CALL LEER(2)
C
6300  CONTINUE
C
C
C  SET SOME OTHER DATA SPECIFIC FOR EIRENE CODE REQUIREMENTS
C  STATEMENT NO. 6500 ---> 6999
C
6500  CONTINUE
C
C
      RETURN
999   CONTINUE
      WRITE (6,*) 'ERROR IN IF2COP: NGITT TOO SMALL '
      CALL EXIT
      RETURN
C
C
      ENTRY IF3COP(ISTRAA,ISTRAE,NEW_ITER)
C
C
      WRITE (6,*) ' IF3COP IS CALLED, ISTRAA,ISTRAE '
      WRITE (6,*) ISTRAA,ISTRAE
      LSHORT=.FALSE.
      LSTOP=.TRUE.
      IFIRST=0
      NDXY=(NDXA-1)*NR1STQ+NDYA
      GOTO 99992
C
      ENTRY INTER3(LSTP,IFRST,ISTRAA,ISTRAE,NEW_ITER)
C
C  ENTRY FOR SHORT CYCLE FROM SUBR. EIRSRT
C
C  IFIRST=0: RESTORE DATA FROM A PREVIOUS EIRENE RUN, SET REFERENCE
C            DATA FOR "STOP-CRITERION" SNIS,SEES,SEIS
C  IFIRST>0: MODIFY SOURCE TERMS ACCORDING TO NEW PLASMA CONDITIONS,
C            COMPARE INTEGRALS WITH SNIS,...., AND DECIDE TO STOP OR
C            CONTINUE SHORT CYCLE (LSTOP)
C
      LSHORT=.TRUE.
      LSTOP=LSTP
      IFIRST=IFRST
      NDXY=(NDXA-1)*NR1STQ+NDYA
C
99992 CONTINUE
C
      DO 10000 ISTRAI=ISTRAA,ISTRAE
C
        IF (XMCP(ISTRAI).LE.1.) GOTO 10000
C
        IF (LSHORT) GOTO 7000
C
C  READ DATA FROM STRATUM NO. ISTRAI BACK INTO WORKING SPACE
C  IF REQUIRED
C
        IF (ISTRAI.EQ.IESTR) THEN
C  NOTHING TO BE DONE
        ELSEIF ((NFILEN.EQ.1.OR.NFILEN.EQ.2).AND.IESTR.NE.ISTRAI) THEN
          IESTR=ISTRAI
          CALL RSTRT(ISTRAI,NSTRAI,NESTM1,NESTM2,NADSPC,
     .               ESTIMV,ESTIMS,ESTIML,
     .               NSDVI1,SDVI1,NSDVI2,SDVI2,
     .               NSDVC1,SIGMAC,NSDVC2,SGMCS,
     .               NSBGK,SIGMA_BGK,NBGV_STAT,SGMS_BGK,
     .               NSCOP,SIGMA_COP,NCPV_STAT,SGMS_COP,
     .               NSIGI_SPC,TRCFLE)
        ELSE
          WRITE (6,*) 'ERROR IN INFCOP: STRATUM ISTRAI= ',ISTRAI
          WRITE (6,*) 'IS NOT AVAILABLE. EXIT CALLED'
          CALL EXIT
        ENDIF
C
C  DATA TRANSFER BACK FROM EIRENE TO EXTERNAL CODE
C  STATEMENT NO 7000 ---> 7999
C
7000    CONTINUE
C
C  SCALE SURFACE SOURCES PER UNIT FLUX, FOR OTHER SOURCES USE
C  EIRENE SCALINGS
        IF (ISTRAI.LE.NTARGI.AND.WTOTP(0,ISTRAI).NE.0.) THEN
C  FLUX FROM EIRENE TO PLASMA CODE: NEGATIVE
          FLX=-WTOTP(0,ISTRAI)
          FLXI=1./FLX
        ELSEIF (ISTRAI.LE.NTARGI.AND.WTOTP(0,ISTRAI).EQ.0.) THEN
          WRITE (6,*) 'NO FLUX FROM STRATUM NO. ISTRAI= ',ISTRAI
          WRITE (6,*) 'NO DATA RETURNED FOR THIS STRATUM'
          GOTO 7999
        ELSEIF (ISTRAI.GT.NTARGI) THEN
          FLXI=1.
        ENDIF
C
        IF (.NOT.LSHORT) GOTO 7400
C  SHORT LOOP CORRECTION FINISHED
C
7400    CONTINUE
C
C
C  ADD CONTRIBUTIONS FROM VOLUME RECOMBINATION SOURCE
C
C
        IF (.NOT.LSYMET) GOTO 7500
C
C  SECONDLY SYMMETRISE EIRENE ARRAYS ACCORDING TO SYMMETRY IN MODEL
C
C
C   THIRDLY WRITE EIRENE ARRAYS (1D) ONTO BRAAMS ARRAYS (2D)
C   AND RESCALE TO PROPER UNITS: #/CELL/STRATUM FLUX
C   # STANDS FOR PARTICLES (SNI), MOMENTUM (SMO)
C   AND ENERGY (SEE,SEI)
C
7500    CONTINUE
C
C   NEXT:
C   IF LSHORT: CRITERION TO STOP SHORT CYCLE,
C   IF NOT LSHORT: RESCALE SURFACE SOURCE STRATA
C                  UNITS: # PER UNIT TARGET PLATE FLUX
C
C
C
C   THIRDLY:
C   INDEX MAPPING BACK TO BRAAMS IMPLEMENTATION OF LINDA GEOMETRY
C
C
7700    CONTINUE
C
7999    CONTINUE
C
C  DATA TRANSFER BACK TO PLASMA CODE FINISHED FOR STRATUM NO. ISTRAI
C
10000 CONTINUE
C
      RETURN
C
      ENTRY IF4COP
C
      NREC11=NOUTAU
      OPEN (UNIT=11,ACCESS='DIRECT',FORM='UNFORMATTED',RECL=8*NREC11)
      IRC=3
      WRITE (11,REC=IRC) RCCPL
      IF (TRCINT.OR.TRCFLE)   WRITE (6,*) 'WRITE 11  IRC= ',IRC
      ALLOCATE (IHELP(NOUTAU))
      JC=0
      DO K=1,NPTRGT
        DO J=1,10*NSTEP
          JC=JC+1
          IHELP(JC)=ICCPL1(J,K)
          IF (JC == NOUTAU) THEN
            IRC=IRC+1
            WRITE (11,REC=IRC) IHELP
            IF (TRCINT.OR.TRCFLE)   WRITE (6,*) 'WRITE 11  IRC= ',IRC
            JC=0
          END IF
        END DO
      END DO
      IF (JC > 0) THEN
        IRC=IRC+1
        WRITE (11,REC=IRC) IHELP
        IF (TRCINT.OR.TRCFLE)   WRITE (6,*) 'WRITE 11  IRC= ',IRC
      END IF
      DEALLOCATE (IHELP)
      IRC=IRC+1
      WRITE (11,REC=IRC) ICCPL2
      IRC=IRC+1
      WRITE (11,REC=IRC) LCCPL
      IF (TRCINT.OR.TRCFLE)   WRITE (6,*) 'WRITE 11  IRC= ',IRC
C
      IF (LSHORT) LSTOP=LSTP
C
      IF (.NOT.LSTOP) RETURN
C
      IF (.NOT.(LBALAN)) GOTO 11000
C
C  BALANCES, SHOULD BE DONE ONLY AT THE END OF BRAAMS RUN
C  AT THE END OF AN EIRENE RUN THE BALANCES MAY BE OFF AT LEAST AT
C  THE BEGINNING OF THE CYCLING PROCEDURE, BECAUSE THE PLASMA STILL
C  HAS TO ADJUST TO THE NEW SOURCES
C
C
C
11000 CONTINUE
C
      RETURN
C
      END
C ===== SOURCE: make_trias.f


      SUBROUTINE MAKE_TRIAS (INDCO)

      USE PRECISION
      USE PARMMOD
      USE CTRIG
      USE CLGIN

      IMPLICIT NONE

      INTEGER,INTENT(IN) :: INDCO(9)

      IF (NTRII+8 > NTRI) THEN
        WRITE (6,*) ' ALLOWED NUMBER OF TRIANGLES EXCEEDED '
        WRITE (6,*) ' INCREASE NT '
        CALL EXIT
      END IF

      NECKE(1,NTRII+1) = INDCO(1)
      NECKE(2,NTRII+1) = INDCO(2)
      NECKE(3,NTRII+1) = INDCO(9)
      CALL EINFUEGEN (INDCO(1),NTRII+1)
      CALL EINFUEGEN (INDCO(2),NTRII+1)
      CALL EINFUEGEN (INDCO(9),NTRII+1)

      NECKE(1,NTRII+2) = INDCO(2)
      NECKE(2,NTRII+2) = INDCO(3)
      NECKE(3,NTRII+2) = INDCO(9)
      CALL EINFUEGEN (INDCO(2),NTRII+2)
      CALL EINFUEGEN (INDCO(3),NTRII+2)
      CALL EINFUEGEN (INDCO(9),NTRII+2)

      NECKE(1,NTRII+3) = INDCO(3)
      NECKE(2,NTRII+3) = INDCO(4)
      NECKE(3,NTRII+3) = INDCO(9)
      CALL EINFUEGEN (INDCO(3),NTRII+3)
      CALL EINFUEGEN (INDCO(4),NTRII+3)
      CALL EINFUEGEN (INDCO(9),NTRII+3)

      NECKE(1,NTRII+4) = INDCO(4)
      NECKE(2,NTRII+4) = INDCO(5)
      NECKE(3,NTRII+4) = INDCO(9)
      CALL EINFUEGEN (INDCO(4),NTRII+4)
      CALL EINFUEGEN (INDCO(5),NTRII+4)
      CALL EINFUEGEN (INDCO(9),NTRII+4)

      NECKE(1,NTRII+5) = INDCO(5)
      NECKE(2,NTRII+5) = INDCO(6)
      NECKE(3,NTRII+5) = INDCO(9)
      CALL EINFUEGEN (INDCO(5),NTRII+5)
      CALL EINFUEGEN (INDCO(6),NTRII+5)
      CALL EINFUEGEN (INDCO(9),NTRII+5)

      NECKE(1,NTRII+6) = INDCO(6)
      NECKE(2,NTRII+6) = INDCO(7)
      NECKE(3,NTRII+6) = INDCO(9)
      CALL EINFUEGEN (INDCO(6),NTRII+6)
      CALL EINFUEGEN (INDCO(7),NTRII+6)
      CALL EINFUEGEN (INDCO(9),NTRII+6)

      NECKE(1,NTRII+7) = INDCO(7)
      NECKE(2,NTRII+7) = INDCO(8)
      NECKE(3,NTRII+7) = INDCO(9)
      CALL EINFUEGEN (INDCO(7),NTRII+7)
      CALL EINFUEGEN (INDCO(8),NTRII+7)
      CALL EINFUEGEN (INDCO(9),NTRII+7)

      NECKE(1,NTRII+8) = INDCO(8)
      NECKE(2,NTRII+8) = INDCO(1)
      NECKE(3,NTRII+8) = INDCO(9)
      CALL EINFUEGEN (INDCO(8),NTRII+8)
      CALL EINFUEGEN (INDCO(1),NTRII+8)
      CALL EINFUEGEN (INDCO(9),NTRII+8)

      NCHBAR(2,NTRII+1) = NTRII+2
      NSEITE(2,NTRII+1) = 3
      NCHBAR(3,NTRII+1) = NTRII+8
      NSEITE(3,NTRII+1) = 2

      NCHBAR(2,NTRII+2) = NTRII+3
      NSEITE(2,NTRII+2) = 3
      NCHBAR(3,NTRII+2) = NTRII+1
      NSEITE(3,NTRII+2) = 2

      NCHBAR(2,NTRII+3) = NTRII+4
      NSEITE(2,NTRII+3) = 3
      NCHBAR(3,NTRII+3) = NTRII+2
      NSEITE(3,NTRII+3) = 2

      NCHBAR(2,NTRII+4) = NTRII+5
      NSEITE(2,NTRII+4) = 3
      NCHBAR(3,NTRII+4) = NTRII+3
      NSEITE(3,NTRII+4) = 2

      NCHBAR(2,NTRII+5) = NTRII+6
      NSEITE(2,NTRII+5) = 3
      NCHBAR(3,NTRII+5) = NTRII+4
      NSEITE(3,NTRII+5) = 2

      NCHBAR(2,NTRII+6) = NTRII+7
      NSEITE(2,NTRII+6) = 3
      NCHBAR(3,NTRII+6) = NTRII+5
      NSEITE(3,NTRII+6) = 2

      NCHBAR(2,NTRII+7) = NTRII+8
      NSEITE(2,NTRII+7) = 3
      NCHBAR(3,NTRII+7) = NTRII+6
      NSEITE(3,NTRII+7) = 2

      NCHBAR(2,NTRII+8) = NTRII+1
      NSEITE(2,NTRII+8) = 3
      NCHBAR(3,NTRII+8) = NTRII+7
      NSEITE(3,NTRII+8) = 2
 
      NTRII = NTRII+8

      RETURN

      CONTAINS
      
      SUBROUTINE EINFUEGEN (IC,ITRI)
        INTEGER, INTENT(IN) :: IC, ITRI
        TYPE(TRI_ELEM), POINTER :: CUR

        ALLOCATE (CUR)
        CUR%NOTRI = ITRI
        CUR%NEXT_TRI => COORTRI(IC)%PTRI
        COORTRI(IC)%PTRI => CUR
      END SUBROUTINE EINFUEGEN

      END


C ===== SOURCE: mshproj.f
C
C
      SUBROUTINE MSHPROJ(X1,Y1,X2,Y2,X3,Y3,X4,Y4,PUX,PUY,PVX,PVY,
     .                   NDXA,NR1ST,IY)

      USE PRECISION

      IMPLICIT NONE
      REAL(DP), INTENT(IN) :: X1(*),Y1(*),X2(*),Y2(*),X3(*),Y3(*),
     .                      X4(*),Y4(*)
      INTEGER, INTENT(IN) :: NDXA,NR1ST,IY
      REAL(DP) :: PUX(*),PUY(*),PVX(*),PVY(*)
      REAL(DP) :: EPS60, D12, D34, D13, D24, DUX, DUY, DVX, DVY,
     .          PUPV, PVPV
      INTEGER :: IX, IN
      EPS60 = 1.E-60_DP
C
C
      DO 1 IX=1,NDXA
C
C  CALCULATE THE NORM OF THE VECTORS (POINT2-POINT1),....
C
        D12 = SQRT((X2(IX)-X1(IX))*(X2(IX)-X1(IX))+(Y2(IX)-Y1(IX))*
     .        (Y2(IX)-Y1(IX)))+EPS60
        D34 = SQRT((X4(IX)-X3(IX))*(X4(IX)-X3(IX))+(Y4(IX)-Y3(IX))*
     .        (Y4(IX)-Y3(IX)))+EPS60
        D13 = SQRT((X3(IX)-X1(IX))*(X3(IX)-X1(IX))+(Y3(IX)-Y1(IX))*
     .        (Y3(IX)-Y1(IX)))+EPS60
        D24 = SQRT((X4(IX)-X2(IX))*(X4(IX)-X2(IX))+(Y4(IX)-Y2(IX))*
     .        (Y4(IX)-Y2(IX)))+EPS60
C
C  CALCULATE THE BISSECTING VECTORS, BUT NOT NORMALISED YET
C
        DUX = (X2(IX)-X1(IX))/D12 + (X4(IX)-X3(IX))/D34
        DUY = (Y2(IX)-Y1(IX))/D12 + (Y4(IX)-Y3(IX))/D34
        DVX = (X3(IX)-X1(IX))/D13 + (X4(IX)-X2(IX))/D24
        DVY = (Y3(IX)-Y1(IX))/D13 + (Y4(IX)-Y2(IX))/D24
C
C  CALCULATE THE COMPONENTS OF THE TWO UNIT VECTOR (= PROJECTION RATE)
C
        IN=IY+(IX-1)*NR1ST
        PUX(IN) = DUX/(SQRT(DUX*DUX+DUY*DUY)+EPS60)
        PUY(IN) = DUY/(SQRT(DUX*DUX+DUY*DUY)+EPS60)
        PVX(IN) = DVX/(SQRT(DVX*DVX+DVY*DVY)+EPS60)
        PVY(IN) = DVY/(SQRT(DVX*DVX+DVY*DVY)+EPS60)
C
C  ORTHOGONORMALIZE, CONSERVE ORIENTATION (E.SCHMIDT)
C
        PUPV=PUX(IN)*PVX(IN)+PUY(IN)*PVY(IN)
        PVX(IN)=PVX(IN)-PUPV*PUX(IN)
        PVY(IN)=PVY(IN)-PUPV*PUY(IN)
        PVPV=SQRT(PVX(IN)*PVX(IN)+PVY(IN)*PVY(IN))+EPS60
        PVX(IN)=PVX(IN)/PVPV
        PVY(IN)=PVY(IN)/PVPV
C
1     CONTINUE
      RETURN
      END
C ===== SOURCE: neutr.f
C
C
*//NEUTR//
C=======================================================================
C          S U B R O U T I N E   N E U T R
C=======================================================================
      SUBROUTINE NEUTR(KARD,NDIMX,NDIMY,NDIMF,DUMMY,LDMX,LDMY,LDMF,
     .                 LDNS,IS)

      USE PRECISION

      IMPLICIT NONE
      INTEGER, INTENT(IN):: KARD,NDIMX,NDIMY,NDIMF,LDMX,LDMY,LDMF,
     .                      LDNS,IS
      INTEGER :: ND1,LIM,IX,IY,III,IF
      REAL(DP), INTENT(IN) :: DUMMY(0:LDMX+1,0:LDMY+1,LDMF,LDNS)
C
      ND1 = NDIMX
      LIM = (ND1/5)*5 - 4
      DO  500  IF = 1,NDIMF
        DO  110  IY = 1,NDIMY
          DO  100  IX = 1,LIM,5
  100     WRITE(KARD,910) (DUMMY(IX-1+III,IY,IF,IS),III = 1,5)
          IF( (LIM+4).EQ.ND1 )   GOTO 110
          WRITE(KARD,910) (DUMMY(IX,IY,IF,IS),IX = LIM+5,ND1)
  110   CONTINUE
  500 CONTINUE
      RETURN
  910 FORMAT(5(E16.8))
*//END NEUTR//
      END
C ===== SOURCE: plasm.f


*//PLASM//
C=======================================================================
C          S U B R O U T I N E   P L A S M
C=======================================================================
      SUBROUTINE PLASM(KARD,NDIMX,NDIMY,NDIMF,N,M,NF,DUMMY)

      USE PRECISION

      IMPLICIT NONE
      INTEGER, INTENT(IN) :: KARD,NDIMX,NDIMY,NDIMF,N,M,NF
      REAL(DP), INTENT(OUT) :: DUMMY(0:N+1,0:M+1,NF)
      INTEGER :: ND1, LIM, IX, IY, IF, III
      ND1 = NDIMX + 2
      LIM = (ND1/5)*5 - 4
      DO    110  IF = 1,NDIMF
      DO    110  IY = 0,NDIMY+1
      DO    100  IX = 1,LIM,5
100     READ(KARD,910) (DUMMY(-1+IX-1+III,IY,IF),III = 1,5)
        IF( (LIM+4).EQ.ND1 )     GOTO 110
        READ(KARD,910) (DUMMY(-1+IX,IY,IF),IX = LIM+5,ND1)
110   CONTINUE
      RETURN
910   FORMAT(5(E16.8))
*//END PLASM//
      END
C ===== SOURCE: statis_cop.f
C
C
      SUBROUTINE STATIS_COP
      USE PRECISION
      USE PARMMOD
      USE COMUSR
      USE CESTIM
      USE CCONA
      USE CGRID
      USE CSDVI
      USE CSDVI_COP
      USE COUTAU

      IMPLICIT NONE

      INTEGER, INTENT(IN) :: NBIN, NRIN, NPIN, NTIN, NSIN
      LOGICAL, INTENT(IN) :: LP, LT
      REAL(DP) :: XNM, SD2, DS, ZFLUXQ, SD2S, SDS, SDI, SDE,
     .          D2S, SG, DSA, DD, D, SG2, DA, FSIG, XN, ZFLUX,
     .          SD1, SD1S
      INTEGER :: IPLS, NSB, IR, ICO, IPL, NR1, NP2, NT3, ICPV 
C
      SAVE
C
      ENTRY STATS0_COP
C
      RETURN

C
      ENTRY STATS1_COP(NBIN,NRIN,NPIN,NTIN,NSIN,LP,LT)
      NSB=NBIN
      NR1=NRIN
      NP2=NPIN
      NT3=NTIN
C
C
      IF (NCPVI.EQ.0) RETURN
C
C
C
      DO 1012 ICPV=1,NCPVI
C
        IF (LMETSP(NSPAN(NTALM)+ICPV-1)) THEN
          SD1S=0.
          DO ICO = 1,NCLMT
            IR = ICLMT(ICO)
            SD1=COPV(ICPV,IR)-SDVIA_COP(ICPV,IR)
            SD1S=SD1S+SD1
            SDVIA_COP(ICPV,IR) = COPV(ICPV,IR)
            SIGMA_COP(ICPV,IR)=SIGMA_COP(ICPV,IR)+SD1*SD1
          END DO
          SGMS_COP(ICPV)=SGMS_COP(ICPV)+SD1S*SD1S
        END IF
1012  CONTINUE

C  STATISTICS FOR PARTICLE SOURCES
      ICPV=NCPVI
      DO IPL = 1,NPLSI
        IF (LMETSP(NSPAN(14)+IPL-1) .OR.
     .      LMETSP(NSPAN(20)+IPL-1) .OR.
     .      LMETSP(NSPAN(26)+IPL-1) ) THEN
          ICPV = NCPVI + IPL
          SD1S=0.
          DO ICO = 1,NCLMT
            IR = ICLMT(ICO)
            SDS=PAPL(IPL,IR)+PIPL(IPL,IR)+PMPL(IPL,IR)
            SD1=SDS-SDVIA_COP(ICPV,IR)
            SD1S=SD1S+SD1
            SDVIA_COP(ICPV,IR) = SDS
            SIGMA_COP(ICPV,IR)=SIGMA_COP(ICPV,IR)+SD1*SD1
          END DO
          SGMS_COP(ICPV)=SGMS_COP(ICPV)+SD1S*SD1S
        END IF
      END DO

C  STATISTICS FOR ELECTRON AND ION ENERGY SOURCES
      ICPV=NCPVI+NPLSI
      SD1S=0.
      SD2S=0.
      DO ICO = 1,NCLMT
        IR = ICLMT(ICO)
        SDE=EAEL(IR)+EIEL(IR)+EMEL(IR)
        SDI=EAPL(IR)+EIPL(IR)+EMPL(IR)
        SD1=SDE-SDVIA_COP(ICPV+1,IR)
        SD2=SDI-SDVIA_COP(ICPV+2,IR)
        SD1S=SD1S+SD1
        SD2S=SD2S+SD2
        SDVIA_COP(ICPV+1,IR) = SDE
        SDVIA_COP(ICPV+2,IR) = SDI
        SIGMA_COP(ICPV+1,IR)=SIGMA_COP(ICPV+1,IR)+SD1*SD1
        SIGMA_COP(ICPV+2,IR)=SIGMA_COP(ICPV+2,IR)+SD2*SD2
      END DO
      SGMS_COP(ICPV+1)=SGMS_COP(ICPV+1)+SD1S*SD1S

C
C
1020  CONTINUE
      RETURN
C
      ENTRY STATS2_COP(XN,FSIG,ZFLUX)
C
C  1. FALL  ALLE BEITRAEGE GLEICHES VORZEICHEN: SIG ZWISCHEN 0 UND 1
C           (=1, FALLS NUR EIN BEITRAG UNGLEICH 0, ODER (KUENSTLICH
C            ERZWUNGEN) FALLS GAR KEIN BEITRAG UNGLEICH NULL)
C  2. FALL  NEGATIVE UND POSITIVE BEITRAGE KOMMEN VOR:
C           LT. FORMEL SIND AUCH WERTE GROESSER 1  MOEGLICH.
C
      XNM=XN-1.
      IF (XNM.LE.0.) RETURN
      ZFLUXQ=ZFLUX*ZFLUX
C
      IF (NCPVI.EQ.0) GOTO 2200
C
      DO 2112 ICPV=1,NCPVI
C
        DS=SUM(COPV(ICPV,1:NSB))
        DO 2111 IR=1,NSB
          D=COPV(ICPV,IR)
          DD=D*D
          DA=ABS(D)
          SG2=MAX(0.D0,SIGMA_COP(ICPV,IR)-DD/XN)
C RELATIV STANDARD DEVIATION
          SG=SQRT(SG2)/(DA+EPS60)
          SIGMA_COP(ICPV,IR)=SG*FSIG
C CUMULATED VARIANCE FOR SUM OVER STRATA
          STV_COP(ICPV,IR)=STV_COP(ICPV,IR)+SG2*ZFLUXQ/XNM/XN
          EE_COP(ICPV,IR)=EE_COP(ICPV,IR)+D*ZFLUX/XN
2111    CONTINUE
        D2S=DS*DS
        DSA=ABS(DS)
        SG2=MAX(0.D0,SGMS_COP(ICPV)-D2S/XN)
        SG=SQRT(SG2)/(DSA+EPS60)
        SGMS_COP(ICPV)=SG*FSIG
C
        STVS_COP(ICPV)=STVS_COP(ICPV)+SG2*ZFLUXQ/XNM/XN
        EES_COP(ICPV)=EES_COP(ICPV)+DS*ZFLUX/XN
2112  CONTINUE
C
C  STATISTICS FOR PARTICLE SOURCES
      ICPV = NCPVI
      DO IPLS=1,NPLSI
C
        ICPV = ICPV + 1
        DS=SUM(PAPL(IPLS,1:NSB))+SUM(PIPL(IPLS,1:NSB))+
     .     SUM(PMPL(IPLS,1:NSB))
        DO IR=1,NSB
          D=PAPL(IPLS,IR)+PMPL(IPLS,IR)+PIPL(IPLS,IR)
          DD=D*D
          DA=ABS(D)
          SG2=MAX(0.D0,SIGMA_COP(ICPV,IR)-DD/XN)
C RELATIV STANDARD DEVIATION
          SG=SQRT(SG2)/(DA+EPS60)
          SIGMA_COP(ICPV,IR)=SG*FSIG
C CUMULATED VARIANCE FOR SUM OVER STRATA
          STV_COP(ICPV,IR)=STV_COP(ICPV,IR)+SG2*ZFLUXQ/XNM/XN
          EE_COP(ICPV,IR)=EE_COP(ICPV,IR)+D*ZFLUX/XN
        END DO
        D2S=DS*DS
        DSA=ABS(DS)
        SG2=MAX(0.D0,SGMS_COP(ICPV)-D2S/XN)
        SG=SQRT(SG2)/(DSA+EPS60)
        SGMS_COP(ICPV)=SG*FSIG
C
        STVS_COP(ICPV)=STVS_COP(ICPV)+SG2*ZFLUXQ/XNM/XN
        EES_COP(ICPV)=EES_COP(ICPV)+DS*ZFLUX/XN
      END DO
C
C  STATISTICS FOR ELECTRON ENERGY SOURCES
        DS=SUM(EAEL(1:NSB))+SUM(EIEL(1:NSB))+SUM(EMEL(1:NSB))
        DO IR=1,NSB
          D=EAEL(IR)+EMEL(IR)+EIEL(IR)
          DD=D*D
          DA=ABS(D)
          SG2=MAX(0.D0,SIGMA_COP(ICPV+1,IR)-DD/XN)
C RELATIV STANDARD DEVIATION
          SG=SQRT(SG2)/(DA+EPS60)
          SIGMA_COP(ICPV+1,IR)=SG*FSIG
C CUMULATED VARIANCE FOR SUM OVER STRATA
          STV_COP(ICPV+1,IR)=STV_COP(ICPV+1,IR)+SG2*ZFLUXQ/XNM/XN
          EE_COP(ICPV+1,IR)=EE_COP(ICPV+1,IR)+D*ZFLUX/XN
        END DO
        D2S=DS*DS
        DSA=ABS(DS)
        SG2=MAX(0.D0,SGMS_COP(ICPV+1)-D2S/XN)
        SG=SQRT(SG2)/(DSA+EPS60)
        SGMS_COP(ICPV+1)=SG*FSIG
C
        STVS_COP(ICPV+1)=STVS_COP(ICPV+1)+SG2*ZFLUXQ/XNM/XN
        EES_COP(ICPV+1)=EES_COP(ICPV+1)+DS*ZFLUX/XN
C
C  STATISTICS FOR ION ENERGY SOURCES
        DS=SUM(EAPL(1:NSB))+SUM(EIPL(1:NSB))+SUM(EMPL(1:NSB))
        DO IR=1,NSB
          D=EAPL(IR)+EMPL(IR)+EIPL(IR)
          DD=D*D
          DA=ABS(D)
          SG2=MAX(0.D0,SIGMA_COP(ICPV+2,IR)-DD/XN)
C RELATIV STANDARD DEVIATION
          SG=SQRT(SG2)/(DA+EPS60)
          SIGMA_COP(ICPV+2,IR)=SG*FSIG
C CUMULATED VARIANCE FOR SUM OVER STRATA
          STV_COP(ICPV+2,IR)=STV_COP(ICPV+2,IR)+SG2*ZFLUXQ/XNM/XN
          EE_COP(ICPV+2,IR)=EE_COP(ICPV+2,IR)+D*ZFLUX/XN
        END DO
        D2S=DS*DS
        DSA=ABS(DS)
        SG2=MAX(0.D0,SGMS_COP(ICPV+2)-D2S/XN)
        SG=SQRT(SG2)/(DSA+EPS60)
        SGMS_COP(ICPV+2)=SG*FSIG
C
        STVS_COP(ICPV+2)=STVS_COP(ICPV+2)+SG2*ZFLUXQ/XNM/XN
        EES_COP(ICPV+2)=EES_COP(ICPV+2)+DS*ZFLUX/XN
C
2200  CONTINUE
      RETURN
      END
C ===== SOURCE: upscop.f
C
C
      SUBROUTINE UPSCOP
      RETURN
      END
C ===== SOURCE: uptcop.f
C
C
      SUBROUTINE UPTCOP(XSTOR2,XSTORV2,WV,IFLAG)
C
C  USER SUPPLIED TRACKLENGTH ESTIMATOR, VOLUME AVERAGED
C
      USE PRECISION
      USE PARMMOD
      USE COMUSR
      USE CESTIM
      USE CCONA
      USE CLOGAU
      USE CUPD
      USE CPOLYG
      USE CGRID
      USE CSPEZ
      USE CZT1
      USE CGEOM
      USE COMPRT
      USE CSDVI
      USE COMXS

      IMPLICIT NONE

      REAL(DP), INTENT(IN) :: XSTOR2(MSTOR1,MSTOR2,N2ND+N3RD),
     .                      XSTORV2(NSTORV,N2ND+N3RD), WV
      INTEGER, INTENT(IN) :: IFLAG
      REAL(DP) :: P, WTRSIG, EION, V0_PARB, DIST, WTR, MOMPARA
      INTEGER :: IAEL, IREL, IPL2, IAEI, IRDS, IBGK, IICX, IIEI, IIEL,
     .           IMEL, IPL1, I, IPL, IIO, IRD, IP, IR, IML, IAT, IFIRST,
     .           IRCX, IADD, ICOU, IACX, IRDD, IMCX, IMEI
      INTEGER, SAVE :: NMTSP
      REAL(DP), ALLOCATABLE, SAVE ::
     . CNDYNA(:), CNDYNM(:), CNDYNI(:)
CDR
      REAL(DP), ALLOCATABLE, SAVE ::
     . VPX(:),    VPY(:),    VRX(:),    VRY(:)
CDR
      DATA IFIRST/0/
      SAVE
      IF (IFIRST.EQ.0) THEN
        IFIRST=1
        ALLOCATE (CNDYNA(NATM))
        ALLOCATE (CNDYNM(NMOL))
        ALLOCATE (CNDYNI(NION))
        ALLOCATE (VPX(NRAD))
        ALLOCATE (VPY(NRAD))
        ALLOCATE (VRX(NRAD))
        ALLOCATE (VRY(NRAD))
        DO 11 IAT=1,NATMI
11        CNDYNA(IAT)=AMUA*RMASSA(IAT)
        DO 12 IML=1,NMOLI
12        CNDYNM(IML)=AMUA*RMASSM(IML)
        DO 13 IIO=1,NIONI
13        CNDYNI(IIO)=AMUA*RMASSI(IIO)
C
CDR
CDR  PROVIDE A RADIAL UNIT VECTOR PER CELL
CDR  VPX,VPY,  NEEDED FOR PROJECTING PARTICLE VELOCITIES
C
CDR  SAME FOR POLOIDAL UNIT VECTOR VRX,VRY
C
        DO 1 I=1,NRAD
          VPX(I)=0.
          VPY(I)=0.
          VRX(I)=0.
          VRY(I)=0.
1       CONTINUE
        DO 2 IR=1,NR1STM
          DO 2 IP=1,NP2NDM
            IRD=IR+(IP-1)*NR1P2
            VPX(IRD)=PLNX(IR,IP)
            VPY(IRD)=PLNY(IR,IP)
            VRX(IRD)=PPLNX(IR,IP)
            VRY(IRD)=PPLNY(IR,IP)
2       CONTINUE
C
        NMTSP=NPHOTI+NATMI+NMOLI+NIONI+NPLSI+NADVI+NALVI
C
      ENDIF
C
C  WV=WEIGHT/VEL
C
C  ATOMS
      IF (ITYP.EQ.1) THEN
        DO 20 ICOU=1,NCOU
          DIST=CLPD(ICOU)
          WTR=WV*DIST
          IRD=NRCELL+NUPC(ICOU)*NR1P2+NBLCKA
          IRDD=NCLTAL(IRD)
C
          IF (LGVAC(IRD,0)) GOTO 20
C
          XSTOR(:,:) = XSTOR2(:,:,ICOU)
          XSTORV(:) = XSTORV2(:,ICOU)
C
C  1,NPLSI:
C              PARTICLE CHARGE EXCHANGE RATE DUE TO IPLS: #/S
C              WITH ATOM SPECIES IATM=1,NATMI, PER ION
C  EACH RATE IS WEIGHTED WITH THE FACTOR (E0/EI-1), E0 BEING
C  THE NEUTRAL PARTCILE ENERGY, EI THE MEAN PLASMA ION ENERGY
C  THESE RATES ARE SCALED IN THE SHORT CYCLE WITH EI*NI
C
C
          IF (NCPVI.LT.NPLSI) GOTO 20
C
          IF (LGACX(IATM,0,0).EQ.0) GOTO 51
          DO 52 IACX=1,NACXI(IATM)
            IRCX=LGACX(IATM,IACX,0)
            IPLS=LGACX(IATM,IACX,1)
            IF (LGVAC(IRD,IPLS)) GOTO 52
            EION=1.5*TIIN(IPLS,IRD)+EDRIFT(IPLS,IRD)
            WTRSIG=WTR*SIGVCX(IRCX)/DIIN(IPLS,IRD)
            COPV(IPLS,IRDD)=COPV(IPLS,IRDD)+WTRSIG*(E0/EION-1.)
            LMETSP(NMTSP+IPLS)=.TRUE.
52        CONTINUE
51        CONTINUE
C
C.........................................
C
C   MOMENTUM EXCHANGE RATE: DYN/CM**3
C
C.........................................
C
C
C  CONTRIBUTIONS FROM ATOMS
C  NPLSI+1, 2*NPLSI:
C
          IF (NCPVI.LT.2*NPLSI) GOTO 20
C
          IADD=NPLSI
          V0_PARB=VEL*(VELX*BXIN(IRD)+VELY*BYIN(IRD)+VELZ*BZIN(IRD))
          V0_PARB=V0_PARB*CNDYNA(IATM)
C
          IF (LGACX(IATM,0,0).EQ.0) GOTO 59
          DO 56 IACX=1,NACXI(IATM)
            IRCX=LGACX(IATM,IACX,0)
            IPLS=LGACX(IATM,IACX,1)
            IF (LGVAC(IRD,IPLS)) GOTO 56
C
C  COLLISION ESTIMATOR IN SUBR. COLLIDE ?
            IF (IESTCX(IRCX,2).NE.0) GOTO 56
C
C  PRESENTLY: PARALLEL COMPONENT OF VSIGCX(IRCX) NOT AVAILABLE
C             FROM FUNCTION FPATHA
C
            MOMPARA=PARMOM(IPLS,IRD)
C
            WTRSIG=WTR*SIGVCX(IRCX)
C  PREVIOUS BULK ION IPLS, NOW LOST
            IPL1=IADD+IPLS
            COPV(IPL1,IRDD)=COPV(IPL1,IRDD)-WTRSIG*MOMPARA
            LMETSP(NMTSP+IPL1)=.TRUE.
C  NEW BULK ION IPL
            IF (N1STX(IRCX,1).EQ.4) THEN
              IPL2=IADD+N1STX(IRCX,2)
              COPV(IPL2,IRDD)=COPV(IPL2,IRDD)+WTRSIG*MOMPARA
              LMETSP(NMTSP+IPL2)=.TRUE.
            ENDIF
            IF (N2NDX(IRCX,1).EQ.4) THEN
              IPL2=IADD+N2NDX(IRCX,2)
              COPV(IPL2,IRDD)=COPV(IPL2,IRDD)+WTRSIG*V0_PARB*
     .                        SIGN(1._DP,BVIN(IPLS,IRD))
              LMETSP(NMTSP+IPL2)=.TRUE.
            ENDIF
56        CONTINUE
59        CONTINUE
C
C  ELECTRON IMPACT CONTRIBUTION
C
          DO 61 IAEI=1,NAEII(IATM)
            IRDS=LGAEI(IATM,IAEI)
            IF (PPLDS(IRDS,0).GT.0) THEN
              DO 62 IPL=1,NPLSI
                P=PPLDS(IRDS,IPL)
                IF (P.GT.0) THEN
                  WTRSIG=WTR*SIGVEI(IRDS)*P
C  NEW BULK ION IPL
                  IPL2=IADD+IPL
                  COPV(IPL2,IRDD)=COPV(IPL2,IRDD)+WTRSIG*V0_PARB*
     .                            SIGN(1._DP,BVIN(IPL,IRD))
                  LMETSP(NMTSP+IPL2)=.TRUE.
                ENDIF
62            CONTINUE
            ENDIF
61        CONTINUE
C
C  ION IMPACT IONIZATION CONTRIBUTION: NOT INCLUDED
C
C
C  ELASTIC CONTRIBUTION FROM ATOMS
C
C
          IF (LGAEL(IATM,0,0).EQ.0) GOTO 80
C  DEFAULT TRACKLENGTH ESTIMATOR (BGK APPROXIMATION)
          DO 81  IAEL=1,NAELI(IATM)
            IREL=LGAEL(IATM,IAEL,0)
            IPLS=LGAEL(IATM,IAEL,1)
            IBGK=NPBGKP(IPLS,1)
C
            IF (IBGK.NE.0) GOTO 81
C  THIS TALLY IS A BGK TALLY. IT SHOULD NOT BE UPDATED HERE.
C
C  COLLISION ESTIMATOR IN SUBR. COLLIDE ?
            IF (IESTEL(IREL,2).NE.0) GOTO 81
C
            MOMPARA=PARMOM(IPLS,IRD)
            WTRSIG=WTR*SIGVEL(IREL)
C
            IPL1=IADD+IPLS
            COPV(IPL1,IRDD)=COPV(IPL1,IRDD)-WTRSIG*MOMPARA
            LMETSP(NMTSP+IPL1)=.TRUE.
            IPL2=IPL1
            COPV(IPL2,IRDD)=COPV(IPL2,IRDD)+WTRSIG*V0_PARB*
     .                      SIGN(1._DP,BVIN(IPLS,IRD))
            LMETSP(NMTSP+IPL2)=.TRUE.
81        CONTINUE
80      CONTINUE
C
20      CONTINUE
C
C  MOLECULES
      ELSEIF (ITYP.EQ.2) THEN
C
        DO 200 ICOU=1,NCOU
          DIST=CLPD(ICOU)
          WTR=WV*DIST
          IRD=NRCELL+NUPC(ICOU)*NR1P2+NBLCKA
          IRDD=NCLTAL(IRD)
C
          IF (LGVAC(IRD,0)) GOTO 200
C
          XSTOR(:,:) = XSTOR2(:,:,ICOU)
          XSTORV(:) = XSTORV2(:,ICOU)
C
C             MOMENTUM EXCHANGE RATE: DYN/CM**3
C
C
C
C
C  CONTRIBUTIONS FROM MOLECULES
C  2*NPLSI+1, 3*NPLSI:
C
          IF (NCPVI.LT.3*NPLSI) GOTO 200
C
          IADD=2*NPLSI
          V0_PARB=VEL*(VELX*BXIN(IRD)+VELY*BYIN(IRD)+VELZ*BZIN(IRD))
          V0_PARB=V0_PARB*CNDYNM(IMOL)
C
          IF (LGMCX(IMOL,0,0).EQ.0) GOTO 590
          DO 560 IMCX=1,NMCXI(IMOL)
            IRCX=LGMCX(IMOL,IMCX,0)
            IPLS=LGMCX(IMOL,IMCX,1)
            IF (LGVAC(IRD,IPLS)) GOTO 560
C
C  COLLISION ESTIMATOR IN SUBR. COLLIDE ?
            IF (IESTCX(IRCX,2).NE.0) GOTO 560
C
C  PRESENTLY: PARALLEL COMPONENT OF VSIGCX(IRCX) NOT AVAILABLE
C             FROM FUNCTION FPATHM
C
            MOMPARA=PARMOM(IPLS,IRD)
C
            WTRSIG=WTR*SIGVCX(IRCX)
C  PREVIOUS BULK ION IPLS, NOW LOST
            IPL1=IADD+IPLS
            COPV(IPL1,IRDD)=COPV(IPL1,IRDD)-WTRSIG*MOMPARA
            LMETSP(NMTSP+IPL1)=.TRUE.
C  NEW BULK ION IPL
            IF (N1STX(IRCX,1).EQ.4) THEN
              IPL2=IADD+N1STX(IRCX,2)
              COPV(IPL2,IRDD)=COPV(IPL2,IRDD)+WTRSIG*MOMPARA
              LMETSP(NMTSP+IPL2)=.TRUE.
            ENDIF
            IF (N2NDX(IRCX,1).EQ.4) THEN
              IPL2=IADD+N2NDX(IRCX,2)
              COPV(IPL2,IRDD)=COPV(IPL2,IRDD)+WTRSIG*V0_PARB*
     .                        SIGN(1._DP,BVIN(IPLS,IRD))
              LMETSP(NMTSP+IPL2)=.TRUE.
            ENDIF
560       CONTINUE
590       CONTINUE
C
C  ELECTRON IMPACT CONTRIBUTION
C
          DO 610 IMEI=1,NMDSI(IMOL)
            IRDS=LGMEI(IMOL,IMEI)
            IF (PPLDS(IRDS,0).GT.0) THEN
              DO 620 IPL=1,NPLSI
                P=PPLDS(IRDS,IPL)
                IF (P.GT.0) THEN
                  WTRSIG=WTR*SIGVEI(IRDS)*P
C  NEW BULK ION IPL
                  IPL2=IADD+IPL
                  COPV(IPL2,IRDD)=COPV(IPL2,IRDD)+WTRSIG*V0_PARB*
     .                            SIGN(1._DP,BVIN(IPL,IRD))
                  LMETSP(NMTSP+IPL2)=.TRUE.
                ENDIF
620           CONTINUE
            ENDIF
610       CONTINUE
C
C
C  ELASTIC CONTRIBUTION FROM MOLECULES
C
C
          IF (LGMEL(IMOL,0,0).EQ.0) GOTO 800
C  DEFAULT TRACKLENGTH ESTIMATOR
          DO 810 IMEL=1,NMELI(IMOL)
            IREL=LGMEL(IMOL,IMEL,0)
            IPLS=LGMEL(IMOL,IMEL,1)
            IBGK=NPBGKP(IPLS,1)
C
            IF (IBGK.NE.0) GOTO 810
C  THIS TALLY IS A BGK TALLY. IT SHOULD NOT BE UPDATED HERE.
C
C  COLLISION ESTIMATOR IN SUBR. COLLIDE ?
            IF (IESTEL(IREL,2).NE.0) GOTO 810
C
            MOMPARA=PARMOM(IPLS,IRD)
            WTRSIG=WTR*SIGVEL(IREL)
C
            IPL1=IADD+IPLS
            COPV(IPL1,IRDD)=COPV(IPL1,IRDD)-WTRSIG*MOMPARA
            LMETSP(NMTSP+IPL1)=.TRUE.
            IPL2=IPL1
            COPV(IPL2,IRDD)=COPV(IPL2,IRDD)+WTRSIG*V0_PARB*
     .                      SIGN(1._DP,BVIN(IPLS,IRD))
            LMETSP(NMTSP+IPL2)=.TRUE.
810       CONTINUE
800     CONTINUE
C
C
200     CONTINUE
C
C  TEST IONS
C
      ELSEIF (ITYP.EQ.3) THEN
C
        DO 2000 ICOU=1,NCOU
          DIST=CLPD(ICOU)
          WTR=WV*DIST
          IRD=NRCELL+NUPC(ICOU)*NR1P2+NBLCKA
          IRDD=NCLTAL(IRD)
C
          IF (LGVAC(IRD,0)) GOTO 2000
C
          XSTOR(:,:) = XSTOR2(:,:,ICOU)
          XSTORV(:) = XSTORV2(:,ICOU)
C
C             MOMENTUM EXCHANGE RATE: DYN/CM**3
C
C
C
C
C  CONTRIBUTIONS FROM TEST IONS
C  3*NPLSI+1, 4*NPLSI:
C
          IF (NCPVI.LT.4*NPLSI) GOTO 2000
C
          IADD=3*NPLSI
          V0_PARB=VEL*(VELX*BXIN(IRD)+VELY*BYIN(IRD)+VELZ*BZIN(IRD))
          V0_PARB=V0_PARB*CNDYNI(IION)
C
          IF (LGICX(IION,0,0).EQ.0) GOTO 5900
          DO 5600 IICX=1,NICXI(IION)
            IRCX=LGICX(IION,IICX,0)
            IPLS=LGICX(IION,IICX,1)
            IF (LGVAC(IRD,IPLS)) GOTO 5600
C
C  COLLISION ESTIMATOR IN SUBR. COLLIDE ?
            IF (IESTCX(IRCX,2).NE.0) GOTO 5600
C
C  PRESENTLY: PARALLEL COMPONENT OF VSIGCX(IRCX) NOT AVAILABLE
C             FROM FUNCTION FPATHI
C
            MOMPARA=PARMOM(IPLS,IRD)
C
            WTRSIG=WTR*SIGVCX(IRCX)
C  PREVIOUS BULK ION IPLS, NOW LOST
            IPL1=IADD+IPLS
            COPV(IPL1,IRDD)=COPV(IPL1,IRDD)-WTRSIG*MOMPARA
            LMETSP(NMTSP+IPL1)=.TRUE.
C
C  NEW BULK ION IPL
            IF (N1STX(IRCX,1).EQ.4) THEN
              IPL2=IADD+N1STX(IRCX,2)
              COPV(IPL2,IRDD)=COPV(IPL2,IRDD)+WTRSIG*MOMPARA
              LMETSP(NMTSP+IPL2)=.TRUE.
            ENDIF
            IF (N2NDX(IRCX,1).EQ.4) THEN
              IPL2=IADD+N2NDX(IRCX,2)
              COPV(IPL2,IRDD)=COPV(IPL2,IRDD)+WTRSIG*V0_PARB*
     .                        SIGN(1._DP,BVIN(IPLS,IRD))
              LMETSP(NMTSP+IPL2)=.TRUE.
            ENDIF
5600      CONTINUE
5900      CONTINUE
C
C  ELECTRON IMPACT CONTRIBUTION
C
          DO 6100 IIEI=1,NIDSI(IION)
            IRDS=LGIEI(IION,IIEI)
            IF (PPLDS(IRDS,0).GT.0) THEN
              DO 6200 IPL=1,NPLSI
                P=PPLDS(IRDS,IPL)
                IF (P.GT.0) THEN
                  WTRSIG=WTR*SIGVEI(IRDS)*P
C  NEW BULK ION IPL
                  IPL2=IADD+IPL
                  COPV(IPL2,IRDD)=COPV(IPL2,IRDD)+WTRSIG*V0_PARB*
     .                            SIGN(1._DP,BVIN(IPL,IRD))
                  LMETSP(NMTSP+IPL2)=.TRUE.
                ENDIF
6200          CONTINUE
            ENDIF
6100      CONTINUE
C
C
C  ELASTIC CONTRIBUTION FROM TEST IONS
C
          IF (LGIEL(IION,0,0).EQ.0) GOTO 8000
C  DEFAULT TRACKLENGTH ESTIMATOR
          DO 8100 IIEL=1,NIELI(IION)
            IREL=LGIEL(IION,IIEL,0)
            IPLS=LGIEL(IION,IIEL,1)
            IBGK=NPBGKP(IPLS,1)
C
            IF (IBGK.NE.0) GOTO 8100
C  THIS TALLY IS A BGK TALLY. IT SHOULD NOT BE UPDATED HERE.
C
C  COLLISION ESTIMATOR IN SUBR. COLLIDE ?
            IF (IESTEL(IREL,2).NE.0) GOTO 8100
C
            MOMPARA=PARMOM(IPLS,IRD)
            WTRSIG=WTR*SIGVEL(IREL)
C
            IPL1=IADD+IPLS
            COPV(IPL1,IRDD)=COPV(IPL1,IRDD)-WTRSIG*MOMPARA
            LMETSP(NMTSP+IPL1)=.TRUE.
            IPL2=IPL1
            COPV(IPL2,IRDD)=COPV(IPL2,IRDD)+WTRSIG*V0_PARB*
     .                      SIGN(1._DP,BVIN(IPLS,IRD))
            LMETSP(NMTSP+IPL2)=.TRUE.
8100      CONTINUE
8000    CONTINUE
C
C
2000    CONTINUE
C
C
      ENDIF
C
      RETURN
      END
