C
      SUBROUTINE TIMCOL (PR,*,*)
C
C  COLLISION WITH TIME SURFACE, FIND NEW CO-ORDINATES
C  UPDATE (TIME-) SURFACE TALLIES
C  UPDATE USER SUPPLIED SNAPSHOT ESTIMATED TALLIES (CALL UPNUSR)
C  PUT PARTICLE ONTO CENSUS ARRAYS
C  AND STOP HISTORY
C  RETURN 1: CONTINUE FLIGHT
C  RETURN 2: STOP FLIGHT
C
      USE PRECISION
      USE PARMMOD
      USE COMUSR
      USE CESTIM
      USE CCONA
      USE CLOGAU
      USE CUPD
      USE CGRID
      USE COMPRT
      USE COMNNL
      USE CLGIN

      IMPLICIT NONE

      REAL(DP), INTENT(IN) :: PR
      REAL(DP) :: DIST
      INTEGER :: J
C
      X0=X0+VELX*TT
      Y0=Y0+VELY*TT
      Z0=Z0+VELZ*TT
      TIME=TIME+TT/VEL
      MSURF=0
      NLSRFX=.FALSE.
      NLSRFY=.FALSE.
      NLSRFZ=.FALSE.
      MRSURF=0
      MPSURF=0
      MTSURF=0
      MASURF=0
C
      IPOLG=IPOLGN
      IPERID=NNTCLL
      IF (NLTRA) THEN
        PHI=MOD(PHI-ATAN2(Z01,X01)+ATAN2(Z0,(RMTOR+X0)),PI2A)
        X01=X0+RMTOR
      ENDIF
      X00=X0
      Y00=Y0
      Z00=Z0
      Z01=Z0
      WEIGHT=WEIGHT*PR
C
      IF (NLTRC) CALL CHCTRC(X0,Y0,Z0,16,15)
C
C  UPDATE SNAPSHOT ESTIMATORS
      IF (NSNVI.GT.0) CALL UPNUSR
C
c-dpc
      dist=sqrt(x0**2+y0**2)
      if(dist.gt.1e4) then
        write(*,*) 'timcol: ERROR!  dist = ',dist,
     1   ' (particle more than 100 m from the origin)'
        write(*,*) 'npanu,x0,y0,z0,velx,vely,velz ',
     1   npanu,x0,y0,z0,velx,vely,velz
        weight=0.
        goto 112
      endif
c-dpc
      IPRNLI=IPRNLI+1
      IPRNLS=IPRNLS+1
      IF (IPRNLS.GE.NPRNLS(ISTRA).AND..NOT.NLMOVIE) THEN
C  THIS IS THE LAST SCORE FOR THIS STRATUM TO BE STORED
        LGLAST=.TRUE.
      ENDIF
C
C   CENSUS ARRAYS:
C   SAVE LOCATION, WEIGHT AND OTHER PARAMETERS
      DO 100 J=1,NPARTT
        RPART(IPRNLI,J)=RPSTT(J)
100   CONTINUE
      DO 110 J=1,MPARTT
        IPART(IPRNLI,J)=IPSTT(J)
110   CONTINUE
C
112   continue
C  DECIDE: CONTINUE OR STOP TRAJECTORY
      IF ((NTMSTP.GE.0.AND.ITMSTP.GE.NTMSTP).OR.LGLAST) THEN
C
C  DO NOT CONTINUE THIS TRACK
C  UPDATE PARTICLE EFFLUX  ONTO TIME-SURFACE MSURF=NLIM+NSTSI
C  UPDATE ENERGY FLUX ONTO TIME-SURFACE MSURF=NLIM+NSTSI
C
        MSURF=NLIM+NSTSI
        IF (ITYP.EQ.1) THEN
          IF (LEOTAT) EOTAT(IATM,MSURF)=EOTAT(IATM,MSURF)+E0*WEIGHT
          IF (LPOTAT) POTAT(IATM,MSURF)=POTAT(IATM,MSURF)+WEIGHT
        ELSEIF (ITYP.EQ.2) THEN
          IF (LEOTML) EOTML(IMOL,MSURF)=EOTML(IMOL,MSURF)+E0*WEIGHT
          IF (LPOTML) POTML(IMOL,MSURF)=POTML(IMOL,MSURF)+WEIGHT
        ELSEIF (ITYP.EQ.3) THEN
          IF (LEOTIO) EOTIO(IION,MSURF)=EOTIO(IION,MSURF)+E0*WEIGHT
          IF (LPOTIO) POTIO(IION,MSURF)=POTIO(IION,MSURF)+WEIGHT
        ENDIF
        ISPZ=ISPEZ(ITYP,IPHOT,IATM,IMOL,IION,IPLS)
        IF (LSPUMP) SPUMP(ISPZ,MSURF)=SPUMP(ISPZ,MSURF)+WEIGHT
        RETURN 2
      ELSE
C  OTHERWISE: RESTORE WEIGHT = WEIGHT/PR, AND CONTINUE
        WEIGHT=WEIGHT/PR
        ITMSTP=ITMSTP+1
        TIME=TIME0
        RETURN 1
      ENDIF
      RETURN
      END
