Generating an OSM-EIRENE Plasma Background
==========================================

Starting a run
--------------

Now we are ready to generate a plasma background using OSM-EIRENE. The process involves building up an input file from nothing and gradually adding various layer of complexity that are required to obtain agreement with experimental data. To begin, we will generate a meaningless background plasma just to demonstrate the workflow.

First `download the grid made by the extended grid generator <https://drive.google.com/file/d/1F3O5wcy5rUo6oAmoXTo5HtM0xLp6pghY/view?usp=sharing>`_ and place it in your ``[iris username]/shots`` directory (e.g., with Filezilla). Using your favorite text editor, such as ``geany``, open up a blank document on iris. Add the following lines and save the document as ``d3d-167196-osm-v1.d6i``:

  .. code-block::
    $
    $ Required to indicate extended grid generated by Fuse.
    $
    '{GRID FILE}     File name of the fluid grid to be loaded'  'fort.4' 
    '{GRID FORMAT}                                           '  2        
    '{EXIT}'
    $
    $ Plasma background options
    $
    '+S21  SOLTEST - 0.0 run normally -1.0 test SOL opt    ' -1

Lines the start with a $ are comments and ignored by OEDGE. The first three lines that involve options in {} brackets are specific to extended grids. We will not cover these types of options anymore in this tutorial beyond just mentioning they are needed for grids made with the fuse grid generator. The rest of the input options take the form seen in in option S21. See the following note.

  .. note::
    **Anatomy of an input option**\n
    The most basic input options consist of three things: A tag, a description, and a value. In the above, the tag is +S21, the description is "SOLTEST - 0.0 run normally -1.0 test SOL opt" and the value is -1. Every input option has a unique tag and the description is arbitrary and used only to make the input file human-readable. All the input options can be found on this website at :doc:`input`. For instance, documentation for the grid option is found at :ref:`S21`. Some tags start with a "+", while others start with an "*". This is due to historical reasons, but as far as the user is concerned the options are treated the same and there is no repeat arguments, e.g., There is no *S21 tag, only an +S21.

Save the input file. The general run command for OEDGE on iris is as follows:

  .. code-block:: console

    $ ./rundiv_master.sh <DIV input file> <OUT input file> <geometry file name> <fluid plasma filename extension - optional> <CFD solution - optional> <DIVIMP solution - optional>"

For our specific instance, we run by replacing the unused files with "none":

  .. code-block:: console

    $ ./rundiv_master.sh d3d-167196-osm-v1 none grid_d3d_167196_3000_v1 none none none

This command submits the run using the slurm scheduler on iris. You can track the status of your jobs by typing ``wq`` at the terminal. The progress of the simulation can be tracked by opening up the ``d3d-167196-osm-v1.output`` text file. 

To recap our progress to this point:

  - We created a barebones input file and told OEDGE that we are using an extended grid
  - We set input option :ref:`S21` = -1. Following the link to the documentation for :ref:`S21` tells us that only a plasma background is being generated. Tracking impurities via DIVIMP is not performed when this is set to -1. 
  - We saved our input file and submitted it to iris and looked at the output in the ``.output`` file.

Once the run is finished, we need to visualize the results. This is covered in the next section.

Visualizing results
-------------------

All OEDGE results are stored in the results folder. For our purposes, we only need the .dat and .nc files. The first is a human-readable summary of the simulation, and the latter is a NetCDF file containing the data. Copy these two files into the same directory to your own local machine using a file transfer service of your choice (:ref:`instructions using Filezilla with the fusion VPN here<File Transfer with iris (with fusion VPN)>`). 

Open up the plotting GUI, click Browse... for the NetCDF file and find your .nc file. From the dropdown you can select various quantities to make a 2D plot from, assuming these quantites were calculated in the simulation. So Electron Temperature will generate a 2D plot by Impurity Density will throw an error since we did not run DIVIMP. The Plot Options... Dialogue allows you the change some of the plot settings such as the colorbar scale or to plot a specific charge state for plot options that allow it. A 2D plot of the plasma density is shown below.

  .. image:: dens_ex1.png
    :width: 500

Any of the 2D quantities can also be lotted along a specific "ring". A ring represents a given flux surface of the grid in the poloidal plane. For example, say we wanted to plot the variation of the electron temperature along the first ring outside of the core. This would be ring number 16 as mentioned in the message box of the GUI. Select Electron Temperature from the dropdown, enter 16 in the Along Ring box and press the corresponding Plot button next to Along Ring.

  .. image:: along_te1.png
    :width: 500

The electron temperature is plotted against the parallel distance along the field line (S). S=0 corresponds to either the inner our outer target, figuring this out generally becomes clear during the plasma constraing process, but for this example S=0 is the inner target. We will not go into details with the rest of the GUI options as any further functionality is best explored by calling the plotting functions from within custom python scripts. 

Adding experimental target data to OSM
--------------------------------------

So far, our simulation was ran with default values for hundreds of other input options. Fortunately, we do not need to worry about most of these options and only a subset are needed for making a reliable plasma background. The first step of any OSM background is passing in the available Langmuir probe data. We will use Langmuir probe data from the previous discharge, #167195, because the outer strike point was swept back and forth between 4,000-5,000 ms to fill in the Langmuir probe data for all the flux surfaces. This is very common in well-designed experiments.

The goal is to load the Langmuir probe data and identify which flux surface, or ring, the data is applicable to. You are free to approach this however you'd like, but a simple helper script is included within the repository at ``python-plots/map_lps_to_grid.py.`` On your own machine, you can call the script as such:

  .. code-block:: console
    $ python map_lps_to_grid.py 167195 4000 5000 /path/to/file.nc

Where ``/path/to/file.nc`` is the full path to the NetCDF file from above. This has only been tested assuming you are connected through the fusion VPN (sorry for those without it). When with the above command, the script will output the probe number and label of each probe. It falls onto the user to figure out where each probe is located in the machine (Langmuir probe naming convention has changed throughout the years, which combined with all the possible plasma shapes on DIII-D makes it nearly impossible to automate this process). For this example, probes 23, 25, 29, 31, 33, 35, 51 and 53 are on the outer target and 131 is on the inner target. We call the script again and pass in the locations of each probe to perform the mapping:

  .. code-block:: console
    python map_lps_to_grid.py 167195 4000 5000 /path/to/file.nc -o 23 25 29 31 33 35 51 53 -i 131 -n 5

The option ``-n 5`` is just to lower the threshold for how many data points in needed in a ring to output the average value for. Within the directory a file ``167195_4000_5000.csv`` is created with the desired data. You may open this up in Excel to help visualize what the data include. A plot of the electron temperature with rings number is shown below.

  .. image:: excel_ plot_te.png
    :width: 500
